{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "erc20.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2021-05-31\n*/\n\n/**\t\n*** CAT GIRL COIN ** \n */\t\npragma solidity ^0.8.4;\t\n// SPDX-License-Identifier: Unlicensed\t\ninterface IBEP20 {\t\n    function totalSupply() external view returns (uint256);\t\n    /**\t\n     * @dev Returns the amount of tokens owned by `account`.\t\n     */\t\n    function balanceOf(address account) external view returns (uint256);\t\n    /**\t\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\t\n     *\t\n     * Returns a boolean value indicating whether the operation succeeded.\t\n     *\t\n     * Emits a {Transfer} event.\t\n     */\t\n    function transfer(address recipient, uint256 amount) external returns (bool);\t\n    /**\t\n     * @dev Returns the remaining number of tokens that `spender` will be\t\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\t\n     * zero by default.\t\n     *\t\n     * This value changes when {approve} or {transferFrom} are called.\t\n     */\t\n    function allowance(address owner, address spender) external view returns (uint256);\t\n    /**\t\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\t\n     *\t\n     * Returns a boolean value indicating whether the operation succeeded.\t\n     *\t\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\t\n     * that someone may use both the old and the new allowance by unfortunate\t\n     * transaction ordering. One possible solution to mitigate this race\t\n     * condition is to first reduce the spender's allowance to 0 and set the\t\n     * desired value afterwards:\t\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\t\n     *\t\n     * Emits an {Approval} event.\t\n     */\t\n    function approve(address spender, uint256 amount) external returns (bool);\t\n    /**\t\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\t\n     * allowance mechanism. `amount` is then deducted from the caller's\t\n     * allowance.\t\n     *\t\n     * Returns a boolean value indicating whether the operation succeeded.\t\n     *\t\n     * Emits a {Transfer} event.\t\n     */\t\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\t\n    /**\t\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\t\n     * another (`to`).\t\n     *\t\n     * Note that `value` may be zero.\t\n     */\t\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\n    /**\t\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\t\n     * a call to {approve}. `value` is the new allowance.\t\n     */\t\n    event Approval(address indexed owner, address indexed spender, uint256 value);\t\n}\t\n/**\t\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\t\n * checks.\t\n *\t\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\t\n * in bugs, because programmers usually assume that an overflow raises an\t\n * error, which is the standard behavior in high level programming languages.\t\n * `SafeMath` restores this intuition by reverting the transaction when an\t\n * operation overflows.\t\n *\t\n * Using this library instead of the unchecked operations eliminates an entire\t\n * class of bugs, so it's recommended to use it always.\t\n */\t\n \t\nlibrary SafeMath {\t\n    /**\t\n     * @dev Returns the addition of two unsigned integers, reverting on\t\n     * overflow.\t\n     *\t\n     * Counterpart to Solidity's `+` operator.\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - Addition cannot overflow.\t\n     */\t\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\t\n        uint256 c = a + b;\t\n        require(c >= a, \"SafeMath: addition overflow\");\t\n        return c;\t\n    }\t\n    /**\t\n     * @dev Returns the subtraction of two unsigned integers, reverting on\t\n     * overflow (when the result is negative).\t\n     *\t\n     * Counterpart to Solidity's `-` operator.\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - Subtraction cannot overflow.\t\n     */\t\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\t\n        return sub(a, b, \"SafeMath: subtraction overflow\");\t\n    }\t\n    /**\t\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\t\n     * overflow (when the result is negative).\t\n     *\t\n     * Counterpart to Solidity's `-` operator.\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - Subtraction cannot overflow.\t\n     */\t\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\n        require(b <= a, errorMessage);\t\n        uint256 c = a - b;\t\n        return c;\t\n    }\t\n    /**\t\n     * @dev Returns the multiplication of two unsigned integers, reverting on\t\n     * overflow.\t\n     *\t\n     * Counterpart to Solidity's `*` operator.\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - Multiplication cannot overflow.\t\n     */\t\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\t\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\t\n        // benefit is lost if 'b' is also tested.\t\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\t\n        if (a == 0) {\t\n            return 0;\t\n        }\t\n        uint256 c = a * b;\t\n        require(c / a == b, \"SafeMath: multiplication overflow\");\t\n        return c;\t\n    }\t\n    /**\t\n     * @dev Returns the integer division of two unsigned integers. Reverts on\t\n     * division by zero. The result is rounded towards zero.\t\n     *\t\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - The divisor cannot be zero.\t\n     */\t\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\t\n        return div(a, b, \"SafeMath: division by zero\");\t\n    }\t\n    /**\t\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\t\n     * division by zero. The result is rounded towards zero.\t\n     *\t\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - The divisor cannot be zero.\t\n     */\t\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\n        require(b > 0, errorMessage);\t\n        uint256 c = a / b;\t\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\t\n        return c;\t\n    }\t\n    /**\t\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\n     * Reverts when dividing by zero.\t\n     *\t\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\n     * invalid opcode to revert (consuming all remaining gas).\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - The divisor cannot be zero.\t\n     */\t\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\t\n        return mod(a, b, \"SafeMath: modulo by zero\");\t\n    }\t\n    /**\t\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\n     * Reverts with custom message when dividing by zero.\t\n     *\t\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\n     * invalid opcode to revert (consuming all remaining gas).\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - The divisor cannot be zero.\t\n     */\t\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\n        require(b != 0, errorMessage);\t\n        return a % b;\t\n    }\t\n}\t\nabstract contract Context {\t\n    function _msgSender() internal view virtual returns (address) {\t\n        return msg.sender;\t\n    }\t\n    function _msgData() internal view virtual returns (bytes memory) {\t\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\t\n        return msg.data;\t\n    }\t\n}\t\n/**\t\n * @dev Collection of functions related to the address type\t\n */\t\nlibrary Address {\t\n    /**\t\n     * @dev Returns true if `account` is a contract.\t\n     *\t\n     * [IMPORTANT]\t\n     * ====\t\n     * It is unsafe to assume that an address for which this function returns\t\n     * false is an externally-owned account (EOA) and not a contract.\t\n     *\t\n     * Among others, `isContract` will return false for the following\t\n     * types of addresses:\t\n     *\t\n     *  - an externally-owned account\t\n     *  - a contract in construction\t\n     *  - an address where a contract will be created\t\n     *  - an address where a contract lived, but was destroyed\t\n     * ====\t\n     */\t\n    function isContract(address account) internal view returns (bool) {\t\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\t\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\t\n        // for accounts without code, i.e. `keccak256('')`\t\n        bytes32 codehash;\t\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\t\n        // solhint-disable-next-line no-inline-assembly\t\n        assembly { codehash := extcodehash(account) }\t\n        return (codehash != accountHash && codehash != 0x0);\t\n    }\t\n    /**\t\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\t\n     * `recipient`, forwarding all available gas and reverting on errors.\t\n     *\t\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\t\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\t\n     * imposed by `transfer`, making them unable to receive funds via\t\n     * `transfer`. {sendValue} removes this limitation.\t\n     *\t\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\t\n     *\t\n     * IMPORTANT: because control is transferred to `recipient`, care must be\t\n     * taken to not create reentrancy vulnerabilities. Consider using\t\n     * {ReentrancyGuard} or the\t\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\t\n     */\t\n    function sendValue(address payable recipient, uint256 amount) internal {\t\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\t\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\t\n        (bool success, ) = recipient.call{ value: amount }(\"\");\t\n        require(success, \"Address: unable to send value, recipient may have reverted\");\t\n    }\t\n    /**\t\n     * @dev Performs a Solidity function call using a low level `call`. A\t\n     * plain`call` is an unsafe replacement for a function call: use this\t\n     * function instead.\t\n     *\t\n     * If `target` reverts with a revert reason, it is bubbled up by this\t\n     * function (like regular Solidity function calls).\t\n     *\t\n     * Returns the raw returned data. To convert to the expected return value,\t\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - `target` must be a contract.\t\n     * - calling `target` with `data` must not revert.\t\n     *\t\n     * _Available since v3.1._\t\n     */\t\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\t\n      return functionCall(target, data, \"Address: low-level call failed\");\t\n    }\t\n    /**\t\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\t\n     * `errorMessage` as a fallback revert reason when `target` reverts.\t\n     *\t\n     * _Available since v3.1._\t\n     */\t\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\t\n        return _functionCallWithValue(target, data, 0, errorMessage);\t\n    }\t\n    /**\t\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\n     * but also transferring `value` wei to `target`.\t\n     *\t\n     * Requirements:\t\n     *\t\n     * - the calling contract must have an ETH balance of at least `value`.\t\n     * - the called Solidity function must be `payable`.\t\n     *\t\n     * _Available since v3.1._\t\n     */\t\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\t\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\t\n    }\t\n    /**\t\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\t\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\t\n     *\t\n     * _Available since v3.1._\t\n     */\t\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\t\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\t\n        return _functionCallWithValue(target, data, value, errorMessage);\t\n    }\t\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\t\n        require(isContract(target), \"Address: call to non-contract\");\t\n        // solhint-disable-next-line avoid-low-level-calls\t\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\t\n        if (success) {\t\n            return returndata;\t\n        } else {\t\n            // Look for revert reason and bubble it up if present\t\n            if (returndata.length > 0) {\t\n                // The easiest way to bubble the revert reason is using memory via assembly\t\n                // solhint-disable-next-line no-inline-assembly\t\n                assembly {\t\n                    let returndata_size := mload(returndata)\t\n                    revert(add(32, returndata), returndata_size)\t\n                }\t\n            } else {\t\n                revert(errorMessage);\t\n            }\t\n        }\t\n    }\t\n}\t\n/**\t\n * @dev Contract module which provides a basic access control mechanism, where\t\n * there is an account (an owner) that can be granted exclusive access to\t\n * specific functions.\t\n *\t\n * By default, the owner account will be the one that deploys the contract. This\t\n * can later be changed with {transferOwnership}.\t\n *\t\n * This module is used through inheritance. It will make available the modifier\t\n * `onlyOwner`, which can be applied to your functions to restrict their use to\t\n * the owner.\t\n */\t\ncontract Ownable is Context {\t\n    address private _owner;\t\n    address private _previousOwner;\t\n    uint256 private _lockTime;\t\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\t\n    /**\t\n     * @dev Initializes the contract setting the deployer as the initial owner.\t\n     */\t\n    constructor () {\t\n        address msgSender = _msgSender();\t\n        _owner = msgSender;\t\n        emit OwnershipTransferred(address(0), msgSender);\t\n    }\t\n    /**\t\n     * @dev Returns the address of the current owner.\t\n     */\t\n    function owner() public view returns (address) {\t\n        return _owner;\t\n    }\t\n    /**\t\n     * @dev Throws if called by any account other than the owner.\t\n     */\t\n    modifier onlyOwner() {\t\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\t\n        _;\t\n    }\t\n     /**\t\n     * @dev Leaves the contract without owner. It will not be possible to call\t\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\t\n     *\t\n     * NOTE: Renouncing ownership will leave the contract without an owner,\t\n     * thereby removing any functionality that is only available to the owner.\t\n     */\t\n    function renounceOwnership() public virtual onlyOwner {\t\n        emit OwnershipTransferred(_owner, address(0));\t\n        _owner = address(0);\t\n    }\t\n    /**\t\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\t\n     * Can only be called by the current owner.\t\n     */\t\n    function transferOwnership(address newOwner) public virtual onlyOwner {\t\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\t\n        emit OwnershipTransferred(_owner, newOwner);\t\n        _owner = newOwner;\t\n    }\t\n    function geUnlockTime() public view returns (uint256) {\t\n        return _lockTime;\t\n    }\t\n    //Locks the contract for owner for the amount of time provided\t\n    function lock(uint256 time) public virtual onlyOwner {\t\n        _previousOwner = _owner;\t\n        _owner = address(0);\t\n        _lockTime = block.timestamp + time;\t\n        emit OwnershipTransferred(_owner, address(0));\t\n    }\t\n    \t\n    //Unlocks the contract for owner when _lockTime is exceeds\t\n    function unlock() public virtual {\t\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\t\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\t\n        emit OwnershipTransferred(_owner, _previousOwner);\t\n        _owner = _previousOwner;\t\n    }\t\n}\t\n// pragma solidity >=0.5.0;\t\ninterface IUniswapV2Factory {\t\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\t\n    function feeTo() external view returns (address);\t\n    function feeToSetter() external view returns (address);\t\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\t\n    function allPairs(uint) external view returns (address pair);\t\n    function allPairsLength() external view returns (uint);\t\n    function createPair(address tokenA, address tokenB) external returns (address pair);\t\n    function setFeeTo(address) external;\t\n    function setFeeToSetter(address) external;\t\n}\t\n// pragma solidity >=0.5.0;\t\ninterface IUniswapV2Pair {\t\n    event Approval(address indexed owner, address indexed spender, uint value);\t\n    event Transfer(address indexed from, address indexed to, uint value);\t\n    function name() external pure returns (string memory);\t\n    function symbol() external pure returns (string memory);\t\n    function decimals() external pure returns (uint8);\t\n    function totalSupply() external view returns (uint);\t\n    function balanceOf(address owner) external view returns (uint);\t\n    function allowance(address owner, address spender) external view returns (uint);\t\n    function approve(address spender, uint value) external returns (bool);\t\n    function transfer(address to, uint value) external returns (bool);\t\n    function transferFrom(address from, address to, uint value) external returns (bool);\t\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\t\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\t\n    function nonces(address owner) external view returns (uint);\t\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\t\n    event Mint(address indexed sender, uint amount0, uint amount1);\t\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\t\n    event Swap(\t\n        address indexed sender,\t\n        uint amount0In,\t\n        uint amount1In,\t\n        uint amount0Out,\t\n        uint amount1Out,\t\n        address indexed to\t\n    );\t\n    event Sync(uint112 reserve0, uint112 reserve1);\t\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\t\n    function factory() external view returns (address);\t\n    function token0() external view returns (address);\t\n    function token1() external view returns (address);\t\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\t\n    function price0CumulativeLast() external view returns (uint);\t\n    function price1CumulativeLast() external view returns (uint);\t\n    function kLast() external view returns (uint);\t\n    function mint(address to) external returns (uint liquidity);\t\n    function burn(address to) external returns (uint amount0, uint amount1);\t\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\t\n    function skim(address to) external;\t\n    function sync() external;\t\n    function initialize(address, address) external;\t\n}\t\n// pragma solidity >=0.6.2;\t\ninterface IUniswapV2Router01 {\t\n    function factory() external pure returns (address);\t\n    function WETH() external pure returns (address);\t\n    function addLiquidity(\t\n        address tokenA,\t\n        address tokenB,\t\n        uint amountADesired,\t\n        uint amountBDesired,\t\n        uint amountAMin,\t\n        uint amountBMin,\t\n        address to,\t\n        uint deadline\t\n    ) external returns (uint amountA, uint amountB, uint liquidity);\t\n    function addLiquidityETH(\t\n        address token,\t\n        uint amountTokenDesired,\t\n        uint amountTokenMin,\t\n        uint amountETHMin,\t\n        address to,\t\n        uint deadline\t\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\t\n    function removeLiquidity(\t\n        address tokenA,\t\n        address tokenB,\t\n        uint liquidity,\t\n        uint amountAMin,\t\n        uint amountBMin,\t\n        address to,\t\n        uint deadline\t\n    ) external returns (uint amountA, uint amountB);\t\n    function removeLiquidityETH(\t\n        address token,\t\n        uint liquidity,\t\n        uint amountTokenMin,\t\n        uint amountETHMin,\t\n        address to,\t\n        uint deadline\t\n    ) external returns (uint amountToken, uint amountETH);\t\n    function removeLiquidityWithPermit(\t\n        address tokenA,\t\n        address tokenB,\t\n        uint liquidity,\t\n        uint amountAMin,\t\n        uint amountBMin,\t\n        address to,\t\n        uint deadline,\t\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\n    ) external returns (uint amountA, uint amountB);\t\n    function removeLiquidityETHWithPermit(\t\n        address token,\t\n        uint liquidity,\t\n        uint amountTokenMin,\t\n        uint amountETHMin,\t\n        address to,\t\n        uint deadline,\t\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\n    ) external returns (uint amountToken, uint amountETH);\t\n    function swapExactTokensForTokens(\t\n        uint amountIn,\t\n        uint amountOutMin,\t\n        address[] calldata path,\t\n        address to,\t\n        uint deadline\t\n    ) external returns (uint[] memory amounts);\t\n    function swapTokensForExactTokens(\t\n        uint amountOut,\t\n        uint amountInMax,\t\n        address[] calldata path,\t\n        address to,\t\n        uint deadline\t\n    ) external returns (uint[] memory amounts);\t\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\t\n        external\t\n        payable\t\n        returns (uint[] memory amounts);\t\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\t\n        external\t\n        returns (uint[] memory amounts);\t\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\t\n        external\t\n        returns (uint[] memory amounts);\t\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\t\n        external\t\n        payable\t\n        returns (uint[] memory amounts);\t\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\t\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\t\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\t\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\t\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\t\n}\t\n// pragma solidity >=0.6.2;\t\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\t\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\t\n        address token,\t\n        uint liquidity,\t\n        uint amountTokenMin,\t\n        uint amountETHMin,\t\n        address to,\t\n        uint deadline\t\n    ) external returns (uint amountETH);\t\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\t\n        address token,\t\n        uint liquidity,\t\n        uint amountTokenMin,\t\n        uint amountETHMin,\t\n        address to,\t\n        uint deadline,\t\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\n    ) external returns (uint amountETH);\t\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\t\n        uint amountIn,\t\n        uint amountOutMin,\t\n        address[] calldata path,\t\n        address to,\t\n        uint deadline\t\n    ) external;\t\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\t\n        uint amountOutMin,\t\n        address[] calldata path,\t\n        address to,\t\n        uint deadline\t\n    ) external payable;\t\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\t\n        uint amountIn,\t\n        uint amountOutMin,\t\n        address[] calldata path,\t\n        address to,\t\n        uint deadline\t\n    ) external;\t\n}\t\ncontract CatGirlCoin is Context, IBEP20, Ownable {\t\n    using SafeMath for uint256;\t\n    using Address for address;\t\n    mapping (address => uint256) private _rOwned;\t\n    mapping (address => uint256) private _tOwned;\t\n    mapping (address => mapping (address => uint256)) private _allowances;\t\n    mapping (address => bool) private _isExcludedFromFee;\t\n    mapping (address => bool) private _isExcluded;\t\n    mapping (address => bool) public _isExcludedFromAntiWhale;\n    mapping (address => bool) private _AddressExists;\n    address[] private _addressList;\n    address[] private _excluded;\n   \t\n   \taddress payable private _devWallet;\n   \taddress private _lottoPotAddress;\n   \taddress private _lottoWalletAddress;\n   \tuint256 public _lastLottoWinnerAmount;\n    uint256 public _totalLottoPrize;\n    uint public _lottoDrawCount = 0;\n   \n   \tuint256 private _minLottoBalance = 1000000000 * 10**9;\n   \t\n   \t\n    uint256 private constant MAX = ~uint256(0);\t\n    uint256 private _tTotal = 100000 * 10**12 * 10**9;  \t   \n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\t\n    \n    uint256 private _tFeeTotal;\t\n    string private _name = \"CatGirl\";\t\n    string private _symbol = \"CATGIRL\";\n    uint8 private _decimals = 9;\t\n    \t\n    uint256 public _taxFee = 4;\n    uint256 private _previousTaxFee = _taxFee;\t\n    \t\n    uint256 public _liquidityFee = 1;\t\n    uint256 private _previousLiquidityFee = _liquidityFee;\t\n    \n    uint256 public _lottoFee = 2;\n    uint256 private _previousLottoFee = _lottoFee;\n\t\n\tuint256 public _devFee = 1;\n    uint256 private _previousDevFee = _devFee;\n    \n    IUniswapV2Router02 public uniswapV2Router;\t\n    address public uniswapV2Pair;\t\n    \t\n    bool inSwapAndLiquify;\t\n    bool inLotteryDraw;\t\n    bool public swapAndLiquifyEnabled = true;\t\n    bool public lottoEnabled = true;\n    bool public _shouldSwapToBNB = false;\n    \n    uint256 public _maxTxAmount = 100000 * 10**12 * 10**9;\n    uint256 private numTokensSellToAddToLiquidity = 500 * 10**12 * 10**9;\t\n    uint256 public lotteryThreshold = 10 * 10**12 * 10**9;\t\n    // anti whale\n    bool    public _isAntiWhaleEnabled = true;\n    uint256 public _antiWhaleThreshold = 1 * 10**15 * 10**9;\n    \n    struct TData {\n        uint256 tAmount;\n        uint256 tFee;\n        uint256 tLiquidity;\n        uint256 tLotto;\n        uint256 tDev;\n        uint256 currentRate;\n    }\n    \n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\t\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\t\n    event SwapAndLiquify(\t\n        uint256 tokensSwapped,\t\n        uint256 ethReceived,\t\n        uint256 tokensIntoLiqudity\t\n    );\n    event DrawLotto(uint256 amount, uint _lottoDrawCount);\n    \t\n    modifier lockTheSwap {\t\n        inSwapAndLiquify = true;\t\n        _;\t\n        inSwapAndLiquify = false;\t\n    }\n    \n    modifier lockTheLottery {\t\n        inLotteryDraw = true;\t\n        _;\t\n        inLotteryDraw = false;\t\n    }\n    \n    constructor () {\n        _rOwned[_msgSender()] = _rTotal;\t\n        addAddress(_msgSender());\n        _lottoPotAddress = address(1);\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\t\n         // Create a uniswap pair for this new token\t\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\t\n            .createPair(address(this), _uniswapV2Router.WETH());\t\n        // set the rest of the contract variables\t\n        uniswapV2Router = _uniswapV2Router;\t\n        \t\n        //exclude owner and this contract from fee\t\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[_lottoPotAddress] = true;\n        _isExcludedFromFee[address(this)] = true;\t\n        \n        _isExcludedFromAntiWhale[owner()] = true;\n        _isExcludedFromAntiWhale[_lottoPotAddress] = true;\n        _isExcludedFromAntiWhale[address(this)] = true;\n        _isExcludedFromAntiWhale[address(uniswapV2Router)] = true;\n        _isExcludedFromAntiWhale[uniswapV2Pair] = true;\n        \t\n        emit Transfer(address(0), _msgSender(), _tTotal);\t\n    }\t\n    function name() public view returns (string memory) {\t\n        return _name;\t\n    }\t\n    function symbol() public view returns (string memory) {\t\n        return _symbol;\t\n    }\t\n    function decimals() public view returns (uint8) {\t\n        return _decimals;\t\n    }\t\n    function totalSupply() public view override returns (uint256) {\t\n        return _tTotal;\t\n    }\n    function minLottoBalance() public view returns (uint256) {\t\n        return _minLottoBalance;\t\n    }\n    function currentLottoPool() public view returns (uint256) {\t\n        return balanceOf(_lottoPotAddress);\t\n    }\n    function balanceOf(address account) public view override returns (uint256) {\t\n        if (_isExcluded[account]) return _tOwned[account];\t\n        return tokenFromReflection(_rOwned[account]);\t\n    }\t\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\t\n        _transfer(_msgSender(), recipient, amount);\t\n        return true;\t\n    }\t\n    function allowance(address owner, address spender) public view override returns (uint256) {\t\n        return _allowances[owner][spender];\t\n    }\t\n    function approve(address spender, uint256 amount) public override returns (bool) {\t\n        _approve(_msgSender(), spender, amount);\t\n        return true;\t\n    }\t\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\t\n        _transfer(sender, recipient, amount);\t\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\t\n        return true;\t\n    }\t\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\t\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\t\n        return true;\t\n    }\t\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\t\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\t\n        return true;\t\n    }\t\n    function isExcludedFromReward(address account) public view returns (bool) {\t\n        return _isExcluded[account];\t\n    }\t\n    function isIncludeFromLotto(address account) public view returns (bool) {\t\n        return _AddressExists[account];\t\n    }\n    function totalFees() public view returns (uint256) {\t\n        return _tFeeTotal;\t\n    }\t\n    function deliver(uint256 tAmount) public {\t\n        address sender = _msgSender();\t\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\t\n        (uint256 rAmount,,,,,,,) = _getValues(tAmount);\t\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n        _rTotal = _rTotal.sub(rAmount);\t\n        _tFeeTotal = _tFeeTotal.add(tAmount);\t\n    }\t\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\t\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\t\n        if (!deductTransferFee) {\t\n            (uint256 rAmount,,,,,,,) = _getValues(tAmount);\t\n            return rAmount;\t\n        } else {\t\n            (,uint256 rTransferAmount,,,,,,) = _getValues(tAmount);\t\n            return rTransferAmount;\t\n        }\t\n    }\t\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\t\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\t\n        uint256 currentRate =  _getRate();\t\n        return rAmount.div(currentRate);\t\n    }\t\n    function excludeFromReward(address account) public onlyOwner() {\t\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\t\n        require(!_isExcluded[account], \"Account is already excluded\");\t\n        if(_rOwned[account] > 0) {\t\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\t\n        }\t\n        _isExcluded[account] = true;\t\n        _excluded.push(account);\t\n    }\t\n    function includeInReward(address account) external onlyOwner() {\t\n        require(_isExcluded[account], \"Account is already excluded\");\t\n        for (uint256 i = 0; i < _excluded.length; i++) {\t\n            if (_excluded[i] == account) {\t\n                _excluded[i] = _excluded[_excluded.length - 1];\t\n                _tOwned[account] = 0;\t\n                _isExcluded[account] = false;\t\n                _excluded.pop();\t\n                break;\t\n            }\t \n        }\t\n    }\n    \n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\t\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto, uint256 tDev) = _getValues(tAmount);\t\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \t\n        _takeLiquidity(tLiquidity);\t\n        _takeLotto(tLotto);\n\t\t_takeDev(tDev);\n        _reflectFee(rFee, tFee);\t\n        emit Transfer(sender, recipient, tTransferAmount);\t\n    }\t\n    \n    function setUniswapRouter(address r) external onlyOwner {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(r);\n        uniswapV2Router = _uniswapV2Router;\n    }\n\n    function setUniswapPair(address p) external onlyOwner {\n        uniswapV2Pair = p;\n    }\n    function excludeFromFee(address account) public onlyOwner {\t\n        _isExcludedFromFee[account] = true;\t\n    }\t\n    \t\n    function includeInFee(address account) public onlyOwner {\t\n        _isExcludedFromFee[account] = false;\t\n    }\t\n    \t\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\t\n        _taxFee = taxFee;\t\n    }\t\n    \n    function setLottoFeePercent(uint256 lottoFee) external onlyOwner() {\n        _lottoFee = lottoFee;\n    }\n\n\tfunction setDevFeePercent(uint256 devFee) external onlyOwner() {\n        _devFee = devFee;\n    }\n    \n    function setshouldSwapToBNB(bool enabled) public onlyOwner() {\n        _shouldSwapToBNB = enabled;\n    }\n    function setLottoEnabled(bool enabled) public onlyOwner() {\n        lottoEnabled = enabled;\n    }\n    function setDevAddress(address payable dev) public onlyOwner() {\n        _devWallet = dev;\n    }\n\tfunction setMinLottoBalance(uint256 minBalance) public onlyOwner() {\n        _minLottoBalance = minBalance;\n    }\n\tfunction setLotteryThresHold(uint256 threshold) public onlyOwner() {\n        lotteryThreshold = threshold;\n    }\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\t\n        _liquidityFee = liquidityFee;\t\n    }\t\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\t\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\t\n            10**2\t\n        );\t\n    }\t\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\t\n        swapAndLiquifyEnabled = _enabled;\t\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\t\n    }\t\n    function setAntiWhaleEnabled(bool e) external onlyOwner {\n        _isAntiWhaleEnabled = e;\n    }\n    function setAntiWhaleThreshold(uint256 amount) external onlyOwner {\n        _antiWhaleThreshold = amount;\n    }\n    function setExcludedFromAntiWhale(address account, bool e) external onlyOwner {\n        _isExcludedFromAntiWhale[account] = e;\n    }\n     //to recieve ETH from uniswapV2Router when swaping\t\n    receive() external payable {}\t\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\t\n        _rTotal = _rTotal.sub(rFee);\t\n        _tFeeTotal = _tFeeTotal.add(tFee);\t\n    }\t\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\t\n        (uint256 tTransferAmount, TData memory data) = _getTValues(tAmount);\n        data.tAmount = tAmount;\n        data.currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(data);\t\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, data.tFee, data.tLiquidity, data.tLotto, data.tDev);\t\n    }\t\n    function _getTValues(uint256 tAmount) private view returns (uint256, TData memory) {\t\n        uint256 tFee = calculateTaxFee(tAmount);\t\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\t\n        \n        uint256 tLotto = calculateLottoFee(tAmount);\n\t\tuint256 tDev = calculateDevFee(tAmount);\n\t\t\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tLotto).sub(tDev);\t\n        return (tTransferAmount, TData(0, tFee, tLiquidity, tLotto, tDev, 0));\t\n    }\t\n    function _getRValues(TData memory _data) private pure returns (uint256, uint256, uint256) {\t\n        uint256 rAmount = _data.tAmount.mul(_data.currentRate);\t\n        uint256 rFee = _data.tFee.mul(_data.currentRate);\t\n        uint256 rLiquidity = _data.tLiquidity.mul(_data.currentRate);\t\n        uint256 rLotto = _data.tLotto.mul(_data.currentRate);\n\t\tuint256 rDev = _data.tDev.mul(_data.currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rLotto).sub(rDev);\t\n        return (rAmount, rTransferAmount, rFee);\t\n    }\t\n    function _getRate() private view returns(uint256) {\t\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\t\n        return rSupply.div(tSupply);\t\n    }\t\n    function _getCurrentSupply() private view returns(uint256, uint256) {\t\n        uint256 rSupply = _rTotal;\t\n        uint256 tSupply = _tTotal;      \t\n        for (uint256 i = 0; i < _excluded.length; i++) {\t\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\t\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\t\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\t\n        }\t\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\t\n        return (rSupply, tSupply);\t\n    }\t\n    \n\tfunction addAddress(address adr) private {\n        if(_AddressExists[adr])\n            return;\n        _AddressExists[adr] = true;\n        _addressList.push(adr);\n    }\n    \n    function random() private view returns (uint) {\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.number)));\n    }\n    \t\n    function lotterize() private view returns(address) {\n\t\tuint256 randomNumber = random().mod(_addressList.length);\n\n\t\tuint256 ownedAmount = _rOwned[_addressList[randomNumber]];\n\n\t\tif (ownedAmount >= _minLottoBalance) {\n\t\t\treturn _addressList[randomNumber];\n\t\t}\n\t\treturn _devWallet;\n    }\n    \n    function _takeLotto(uint256 tLotto) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLotto = tLotto.mul(currentRate);\n\n        _rOwned[_lottoPotAddress] = _rOwned[_lottoPotAddress].add(rLotto);\n        if(_isExcluded[_lottoPotAddress])\n            _tOwned[_lottoPotAddress] = _tOwned[_lottoPotAddress].add(tLotto);\n    }\n    \n    function drawLotto(uint256 amount) private lockTheLottery {\n        _lottoWalletAddress = lotterize();\n        _transfer(_lottoPotAddress, _lottoWalletAddress, amount);\n        _lastLottoWinnerAmount = amount;\n        _totalLottoPrize = _totalLottoPrize.add(amount);\n        ++_lottoDrawCount;\n        emit DrawLotto(amount, _lottoDrawCount);\n    }\n    \n    function _takeDev(uint256 tDev) private {\n        uint256 currentRate =  _getRate();\n        uint256 rDev = tDev.mul(currentRate);\n\n        if (_shouldSwapToBNB) {\n            swapTokensForEth(rDev);\n            _devWallet.transfer(address(this).balance);\n        } else {\n            _rOwned[_devWallet] = _rOwned[_devWallet].add(rDev);\n            if(_isExcluded[_devWallet])\n                _tOwned[_devWallet] = _tOwned[_devWallet].add(tDev);\n        }\n    }\n    \n    function _takeLiquidity(uint256 tLiquidity) private {\t\n        uint256 currentRate =  _getRate();\t\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\t\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\t\n        if(_isExcluded[address(this)])\t\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\t\n    }\t\n    \t\n    \t\n    function calculateLottoFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_lottoFee).div(\n            10**2\n        );\n    }\n\t\n\tfunction calculateDevFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_devFee).div(\n            10**2\n        );\n    }\n    \n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\t\n        return _amount.mul(_taxFee).div(\t\n            10**2\t\n        );\t\n    }\t\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\t\n        return _amount.mul(_liquidityFee).div(\t\n            10**2\t\n        );\t\n    }\n    \n    function removeAllFee() private {\t\n        if(_taxFee == 0 && _liquidityFee == 0 && _devFee == 0 && _lottoFee == 0) return;\t\n        \t\n        _previousTaxFee = _taxFee;\n        _previousLottoFee = _lottoFee;\n\t\t_previousDevFee = _devFee;\n        _previousLiquidityFee = _liquidityFee;\n        \t\n        _taxFee = 0;\n        _lottoFee = 0;\n\t\t_devFee = 0;\n        _liquidityFee = 0;\t\n    }\t\n    \t\n    function restoreAllFee() private {\t\n        _taxFee = _previousTaxFee;\t\n        _lottoFee = _previousLottoFee;\n\t\t_devFee = _previousDevFee;\n        _liquidityFee = _previousLiquidityFee;\t\n    }\t\n    \t\n    function isExcludedFromFee(address account) public view returns(bool) {\t\n        return _isExcludedFromFee[account];\t\n    }\t\n    \n    function _approve(address owner, address spender, uint256 amount) private {\t\n        require(owner != address(0), \"BEP20: approve from the zero address\");\t\n        require(spender != address(0), \"BEP20: approve to the zero address\");\t\n        _allowances[owner][spender] = amount;\t\n        emit Approval(owner, spender, amount);\t\n    }\t\n    function _transfer(\t\n        address from,\t\n        address to,\t\n        uint256 amount\t\n    ) private {\t\n        require(from != address(0), \"BEP20: transfer from the zero address\");\t\n        require(to != address(0), \"BEP20: transfer to the zero address\");\t\n        require(amount > 0, \"Transfer amount must be greater than zero\");\t\n        if(from != owner() && to != owner())\t\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\t\n            \n        /*\n            anti whale: when buying, check if sender balance will be greater than 1% of total supply\n            if greater, throw error\n        */\n        if ( _isAntiWhaleEnabled && !_isExcludedFromAntiWhale[to] ) {\n            if ( from == uniswapV2Pair || from == address(uniswapV2Router) ) {\n                require(amount <= _antiWhaleThreshold, \"Anti whale: can't buy more than the specified threshold\");\n                require(balanceOf(to).add(amount) <= _antiWhaleThreshold, \"Anti whale: can't hold more than the specified threshold\");\n            }\n        }\n        // is the token balance of this contract address over the min number of\t\n        // tokens that we need to initiate a swap + liquidity lock?\t\n        // also, don't get caught in a circular liquidity event.\t\n        // also, don't swap & liquify if sender is uniswap pair.\t\n        uint256 contractTokenBalance = balanceOf(address(this));\t\n        \t\n        if(contractTokenBalance >= _maxTxAmount)\t\n        {\t\n            contractTokenBalance = _maxTxAmount;\t\n        }\t\n        \t\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\t\n        if (\t\n            overMinTokenBalance && !inSwapAndLiquify &&\tfrom != uniswapV2Pair && swapAndLiquifyEnabled\t\n        ) {\t\n            contractTokenBalance = numTokensSellToAddToLiquidity;\t\n            //add liquidity\t\n            swapAndLiquify(contractTokenBalance);\t\n        }\n        \n        // Process lotto draw\n        uint256 lottoBalance = balanceOf(_lottoPotAddress);\n        bool overMinLottoBalance = lottoBalance >= lotteryThreshold;\n        if (\n            overMinLottoBalance && !inSwapAndLiquify && !inLotteryDraw && lottoEnabled\n        ) {\n            drawLotto(lottoBalance);\n        }\n        \t\n        //indicates if fee should be deducted from transfer\t\n        bool takeFee = true;\t\n        \t\n        //if any account belongs to _isExcludedFromFee account then remove the fee\t\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\t\n            takeFee = false;\t\n        }\t\n        \n        addAddress(from);\n\t\taddAddress(to);\n        \t\n        //transfer amount, it will take tax, burn, liquidity fee\t\n        _tokenTransfer(from,to,amount,takeFee);\t\n    }\t\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\t\n        // split the contract balance into halves\t\n        uint256 half = contractTokenBalance.div(2);\t\n        uint256 otherHalf = contractTokenBalance.sub(half);\t\n        // capture the contract's current ETH balance.\t\n        // this is so that we can capture exactly the amount of ETH that the\t\n        // swap creates, and not make the liquidity event include any ETH that\t\n        // has been manually sent to the contract\t\n        uint256 initialBalance = address(this).balance;\t\n        // swap tokens for ETH\t\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\t\n        // how much ETH did we just swap into?\t\n        uint256 newBalance = address(this).balance.sub(initialBalance);\t\n        // add liquidity to uniswap\t\n        addLiquidity(otherHalf, newBalance);\t\n        \t\n        emit SwapAndLiquify(half, newBalance, otherHalf);\t\n    }\t\n    function swapTokensForEth(uint256 tokenAmount) private {\t\n        // generate the uniswap pair path of token -> weth\t\n        address[] memory path = new address[](2);\t\n        path[0] = address(this);\t\n        path[1] = uniswapV2Router.WETH();\t\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\t\n        // make the swap\t\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\t\n            tokenAmount,\t\n            0, // accept any amount of ETH\t\n            path,\t\n            address(this),\t\n            block.timestamp\t\n        );\t\n    }\t\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\t\n        // approve token transfer to cover all possible scenarios\t\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\t\n        // add the liquidity\t\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\t\n            address(this),\t\n            tokenAmount,\t\n            0, // slippage is unavoidable\t\n            0, // slippage is unavoidable\t\n            owner(),\t\n            block.timestamp\t\n        );\t\n    }\t\n    //this method is responsible for taking all fee, if takeFee is true\t\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\t\n        if(!takeFee)\t\n            removeAllFee();\t\n        \t\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\t\n            _transferFromExcluded(sender, recipient, amount);\t\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\t\n            _transferToExcluded(sender, recipient, amount);\t\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\t\n            _transferStandard(sender, recipient, amount);\t\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\t\n            _transferBothExcluded(sender, recipient, amount);\t\n        } else {\t\n            _transferStandard(sender, recipient, amount);\t\n        }\t\n        \t\n        if(!takeFee)\t\n            restoreAllFee();\t\n    }\t\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\t\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto, uint256 tDev) = _getValues(tAmount);\t\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\t\n        _takeLiquidity(tLiquidity);\t\n        _takeLotto(tLotto);\n\t\t_takeDev(tDev);\n        _reflectFee(rFee, tFee);\t\n        emit Transfer(sender, recipient, tTransferAmount);\t\n    }\t\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\t\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto, uint256 tDev) = _getValues(tAmount);\t\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \t\n        _takeLiquidity(tLiquidity);\t\n        _takeLotto(tLotto);\n\t\t_takeDev(tDev);\n        _reflectFee(rFee, tFee);\t\n        emit Transfer(sender, recipient, tTransferAmount);\t\n    }\t\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\t\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto, uint256 tDev) = _getValues(tAmount);\t\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \t\n        _takeLiquidity(tLiquidity);\t\n        _takeLotto(tLotto);\n\t\t_takeDev(tDev);\n        _reflectFee(rFee, tFee);\t\n        emit Transfer(sender, recipient, tTransferAmount);\t\n    }\t\n    \t\n}"
    }
  }
}