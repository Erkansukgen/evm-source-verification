{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Artblock.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Storage\n * @dev Store & retrieve value in a variable\n */\ncontract Artblock {\n    function purchase(uint256 projectid) public payable {}\n}\n\ncontract Artblockcore {\n    mapping(uint256 => uint256) public projectIdToPricePerTokenInWei;\n    function transferFrom(address from, address to, uint256 tokenId) public {}\n}\n\ncontract ArtRun {\n    address private owner = msg.sender;\n    Artblockcore private x = Artblockcore(0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270);\n    Artblock private y = Artblock(0x47e312d99C09Ce61A866c83cBbbbED5A4b9d33E7);\n    receive() external payable {}\n    fallback() external payable {}\n    function nb712ygfbvg() public {\n        payable(owner).transfer(address(this).balance);\n    }\n    function ie3ifw2fve() public payable {\n        uint256 cost = x.projectIdToPricePerTokenInWei(204);\n        while (true) {\n            if (address(this).balance>=cost && gasleft()>400000) {\n                try y.purchase{value:cost}(204) {}\n                catch {break;}\n            }\n            else break;\n        }\n    }\n    function dw29e2(address to, uint256[] memory tokenIds) public {\n        require(msg.sender == owner, \"O\");\n        for (uint i=0;i<tokenIds.length;i++) {\n            x.transferFrom(address(this),to,tokenIds[i]);\n        }\n    }\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}"}}}