{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"kukoincontractforreview.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.10;\n\ninterface IERC20Token {\n    function transfer(address _to, uint256 _value) external  returns (bool success);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n}\ncontract POLCVault {\n    IERC20Token POLCToken =  IERC20Token(0xaA8330FB2B4D5D07ABFE7A72262752a8505C6B37);  // VERIFY ME!!!\n    address public kwallet = 0x4ecC91cCAd7b4b78489792818814e995F562A947;  // VERIFY ME!!\n    uint256 public currentStep = 1;\n    uint256 public stepAmount = 187500 ether;\n    uint256 public stepSize = 30 days;  // VERIFY ME!!!\n    uint256 counterStart = 1638230400;\n    bool iDone = false;\n\n    function initialClaim() public {\n        require(iDone == false);\n        require(counterStart < block.timestamp, \"Must wait claim date\");\n        iDone = true;\n        POLCToken.transfer(kwallet, (250000 ether));\n    }\n\n    function claimStep() public {\n        require(counterStart > 0, \"Contract is not initialized\");\n        uint256 nClaim = counterStart + (currentStep * stepSize);\n        require(nClaim < block.timestamp, \"Must wait the next claim date\" );\n        currentStep += 1;\n        require(POLCToken.transfer(kwallet, stepAmount), \"ERC20 transfer error\");\n    }\n\n    function nextPayment() public view returns (uint256 paymentDate){\n        paymentDate = counterStart + (currentStep * stepSize);\n    }\n\n}\n"}}}