{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"StrategyETHAlpha.sol":{"content":"/**\r\n *Submitted for verification at Etherscan.io on 2021-01-07\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n\r\n*/\r\n\r\n\r\n\r\ninterface UniswapRouter {\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\ninterface IBETH{\r\n    function deposit() external payable;\r\n    function withdraw(uint256 share) external;\r\n    function totalETH() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\ninterface IFToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function calcBalanceOfUnderlying(address owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IBankController {\r\n\r\n    function getFTokeAddress(address underlying)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface WETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n    event Deposit(address indexed dst, uint wad);\r\n    event Withdrawal(address indexed src, uint wad);\r\n}\r\n\r\ncontract StrategyETHAlpha {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\r\n\r\n    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //weth\r\n\r\n    address constant public ethpool = address(0x67B66C99D3Eb37Fa76Aa3Ed1ff33E8e39F0b9c7A);\r\n\r\n    address public governance;\r\n    address public controller;\r\n    uint256 public redeliverynum = 100 * 1e18;\r\n\r\n    uint public withdrawalFee = 0;\r\n    uint constant public withdrawalMax = 10000;\r\n\r\n    address[] public swap2BTRouting;\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        governance = tx.origin;\r\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\r\n\t\tswap2BTRouting = [weth,bt];\r\n    }\r\n\r\n    function () external payable {\r\n    }\r\n\r\n    function deposit() public {\r\n\t\tuint _want = IERC20(want).balanceOf(address(this));\r\n        require(_want > 0,\"WETH is 0\");\r\n        WETH(address(weth)).withdraw(_want); //weth->eth\r\n        IBETH(ethpool).deposit.value(_want)();\r\n    }\r\n\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external onlyController\r\n\t{\r\n\t\tuint amount = _withdraw(_amount);\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, amount);\r\n\t}\r\n\r\n\r\n    function _withdraw(uint _amount) internal returns(uint) {\r\n\t\tuint amount = IERC20(want).balanceOf(address(this));\r\n\t\tif (amount < _amount) {\r\n\t\t\t_withdrawSome(_amount.sub(amount));\r\n\t\t\tamount = IERC20(want).balanceOf(address(this));\r\n\t\t}\r\n\r\n        uint _fee = 0;\r\n        if (withdrawalFee>0){\r\n            _fee = amount.mul(withdrawalFee).div(withdrawalMax);\r\n            amount = amount.sub(_fee);\r\n            UniswapRouter(unirouter).swapExactTokensForTokens(_fee, 0, swap2BTRouting, address(this), now.add(1800));\r\n        }\r\n        if (amount < _amount){\r\n            return amount;\r\n        }\r\n\t\treturn _amount;\r\n    }\r\n\r\n    function _withdrawSome(uint _amount) internal\r\n    {\r\n        uint256 share = _amount.mul(IBETH(ethpool).totalSupply()).div(IBETH(ethpool).totalETH());\r\n        IBETH(ethpool).withdraw(share);\r\n        WETH(address(weth)).deposit.value(address(this).balance)();\r\n    }\r\n\r\n\tfunction withdrawAll() external onlyController returns (uint balance) {\r\n\t\tbalance = _withdraw(balanceOf());\r\n\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n\t}\r\n\r\n\r\n\tfunction balanceOfwant() public view returns (uint256) {\r\n\t\treturn IERC20(want).balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction balanceOfPool() public view returns (uint256) {\r\n        return IBETH(ethpool).balanceOf(address(this)).mul(IBETH(ethpool).totalETH()).div(IBETH(ethpool).totalSupply());\r\n\t}\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfwant().add(balanceOfPool());\r\n    }\r\n\r\n\r\n    function setredeliverynum(uint256 value) public\r\n    {\r\n        require(msg.sender == governance, \"!governance\");\r\n        redeliverynum = value;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setWithdrawalFee(uint _withdrawalFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_withdrawalFee <=1000,\"fee >= 10%\"); //max:1%\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}"}}}