{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AAAAQuery2.sol": {
      "content": "// Dependency file: contracts/libraries/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/modules/ConfigNames.sol\n\n// pragma solidity >=0.5.16;\n\nlibrary ConfigNames {\n    //GOVERNANCE\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\n\n    // POOL\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\n    \n    //NOT GOVERNANCE\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\n\n    //POOL\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\n\n    //wallet\n    bytes32 public constant TEAM = bytes32('team'); \n    bytes32 public constant SPARE = bytes32('spare');\n    bytes32 public constant REWARD = bytes32('reward');\n}\n\n// Root file: contracts/AAAAQuery2.sol\n\npragma solidity >=0.6.6;\npragma experimental ABIEncoderV2;\n\n// import \"contracts/libraries/SafeMath.sol\";\n// import 'contracts/modules/ConfigNames.sol';\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n}\n\ninterface IConfig {\n    function developer() external view returns (address);\n    function platform() external view returns (address);\n    function factory() external view returns (address);\n    function mint() external view returns (address);\n    function token() external view returns (address);\n    function developPercent() external view returns (uint);\n    function wallet() external view returns (address);\n    function base() external view returns (address);\n    function share() external view returns (address);\n    function params(bytes32 key) external view returns(uint);\n    function setParameter(uint[] calldata _keys, uint[] calldata _values) external;\n    function setPoolParameter(address _pool, bytes32 _key, uint _value) external;\n    function getValue(bytes32 _key) external view returns (uint);\n    function getPoolValue(address _pool, bytes32 _key) external view returns (uint);\n    function getParams(bytes32 _key) external view returns (uint, uint, uint, uint);\n    function getPoolParams(address _pool, bytes32 _key) external view returns (uint, uint, uint, uint);\n}\n\ninterface IAAAAFactory {\n    function countPools() external view returns(uint);\n    function countBallots() external view returns(uint);\n    function allBallots(uint index) external view returns(address);\n    function allPools(uint index) external view returns(address);\n    function isPool(address addr) external view returns(bool);\n    function getPool(address lend, address collateral) external view returns(address);\n}\n\ninterface IAAAAPool {\n    function supplyToken() external view returns(address);\n    function collateralToken() external view returns(address);\n    function totalBorrow() external view returns(uint);\n    function totalPledge() external view returns(uint);\n    function remainSupply() external view returns(uint);\n    function getInterests() external view returns(uint);\n    function numberBorrowers() external view returns(uint);\n    function borrowerList(uint index) external view returns(address);\n    function borrows(address user) external view returns(uint,uint,uint,uint,uint);\n    function getRepayAmount(uint amountCollateral, address from) external view returns(uint);\n    function liquidationHistory(address user, uint index) external view returns(uint,uint,uint);\n    function liquidationHistoryLength(address user) external view returns(uint);\n    function getMaximumBorrowAmount(uint amountCollateral) external view returns(uint amountBorrow);\n    function interestPerBorrow() external view returns(uint);\n    function lastInterestUpdate() external view returns(uint);\n    function interestPerSupply() external view returns(uint);\n    function supplys(address user) external view returns(uint,uint,uint,uint,uint);\n}\n\ninterface IAAAAMint {\n    function maxSupply() external view returns(uint);\n    function mintCumulation() external view returns(uint);\n    function takeLendWithAddress(address user) external view returns (uint);\n    function takeBorrowWithAddress(address user) external view returns (uint);\n}\n\ninterface ISwapPair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\n\ninterface IAAAABallot {\n    struct Voter {\n        uint weight; // weight is accumulated by delegation\n        bool voted;  // if true, that person already voted\n        uint vote;   // index of the voted proposal 0 YES, 1 NO\n        bool claimed; // already claimed reward\n    }\n    function name() external view returns(bytes32);\n    function subject() external view returns(string memory);\n    function content() external view returns(string memory);\n    function createdBlock() external view returns(uint);\n    function createdTime() external view returns(uint);\n    function creator() external view returns(address);\n    function proposals(uint index) external view returns(uint);\n    function end() external view returns (bool);\n    function pass() external view returns (bool);\n    function expire() external view returns (bool);\n    function pool() external view returns (address);\n    function value() external view returns (uint);\n    function total() external view returns (uint);\n    function reward() external view returns (uint);\n    function voters(address user) external view returns (Voter memory);\n}\n\ninterface IOtherConfig {\n    function isToken(address _token) external view returns (bool);\n}\n\ncontract AAAAQuery2 {\n    address public owner;\n    address public config;\n    address public otherConfig;\n    using SafeMath for uint;\n\n    struct ConfigCommonStruct {\n        uint PROPOSAL_VOTE_DURATION;\n        uint PROPOSAL_EXECUTE_DURATION;\n        uint PROPOSAL_CREATE_COST;\n        uint STAKE_LOCK_TIME;\n        uint MINT_AMOUNT_PER_BLOCK;\n        uint INTEREST_PLATFORM_SHARE;\n        uint INTEREST_BUYBACK_SHARE;\n        uint CHANGE_PRICE_DURATION;\n        uint CHANGE_PRICE_PERCENT;\n    }\n\n    struct ConfigValueStruct {\n        uint min;\n        uint max;\n        uint span;\n        uint value;\n        address pair;\n        bytes32 key;\n        string name;\n    }\n\n    struct ConfigPoolStruct {\n        address pair;\n        address supplyToken;\n        address collateralToken;\n        uint POOL_BASE_INTERESTS;\n        uint POOL_MARKET_FRENZY;\n        uint POOL_PLEDGE_RATE;\n        uint POOL_LIQUIDATION_RATE;\n        uint POOL_MINT_BORROW_PERCENT;\n        uint POOL_MINT_POWER;\n        address lpToken0;\n        address lpToken1;\n        string lpToken0Symbol;\n        string lpToken1Symbol;\n        string supplyTokenSymbol;\n        string collateralTokenSymbol;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setupConfig (address _config) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        config = _config;\n    }\n\n    function setupOtherConfig (address _config) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        otherConfig = _config;\n    }\n\n    function getConfigCommon() public view returns (ConfigCommonStruct memory info){\n        info.PROPOSAL_VOTE_DURATION = IConfig(config).getValue(ConfigNames.PROPOSAL_VOTE_DURATION);\n        info.PROPOSAL_EXECUTE_DURATION = IConfig(config).getValue(ConfigNames.PROPOSAL_EXECUTE_DURATION);\n        info.PROPOSAL_CREATE_COST = IConfig(config).getValue(ConfigNames.PROPOSAL_CREATE_COST);\n        info.STAKE_LOCK_TIME = IConfig(config).getValue(ConfigNames.STAKE_LOCK_TIME);\n        info.MINT_AMOUNT_PER_BLOCK = IConfig(config).getValue(ConfigNames.MINT_AMOUNT_PER_BLOCK);\n        info.INTEREST_PLATFORM_SHARE = IConfig(config).getValue(ConfigNames.INTEREST_PLATFORM_SHARE);\n        info.INTEREST_BUYBACK_SHARE = IConfig(config).getValue(ConfigNames.INTEREST_BUYBACK_SHARE);\n        info.CHANGE_PRICE_DURATION = IConfig(config).getValue(ConfigNames.CHANGE_PRICE_DURATION);\n        info.CHANGE_PRICE_PERCENT = IConfig(config).getValue(ConfigNames.CHANGE_PRICE_PERCENT);\n        return info;\n    }\n\n    function getConfigPool(address _pair) public view returns (ConfigPoolStruct memory info){\n        info.pair = _pair;\n        info.supplyToken = IAAAAPool(_pair).supplyToken();\n        info.collateralToken = IAAAAPool(_pair).collateralToken();\n        info.supplyTokenSymbol = IERC20(info.supplyToken).symbol();\n        info.collateralTokenSymbol = IERC20(info.collateralToken).symbol();\n        info.POOL_BASE_INTERESTS = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_BASE_INTERESTS);\n        info.POOL_MARKET_FRENZY = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MARKET_FRENZY);\n        info.POOL_PLEDGE_RATE = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PLEDGE_RATE);\n        info.POOL_LIQUIDATION_RATE = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE);\n        info.POOL_MINT_BORROW_PERCENT = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MINT_BORROW_PERCENT);\n        info.POOL_MINT_POWER = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MINT_POWER);\n\n        if (IOtherConfig(otherConfig).isToken(info.collateralToken) == false) {\n            info.lpToken0 = ISwapPair(info.collateralToken).token0();\n            info.lpToken1 = ISwapPair(info.collateralToken).token1();\n            info.lpToken0Symbol = IERC20(info.lpToken0).symbol();\n            info.lpToken1Symbol = IERC20(info.lpToken1).symbol();\n        }\n        return info;\n    }\n\n    function getConfigPools() public view returns (ConfigPoolStruct[] memory list){\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\n        list = new ConfigPoolStruct[](count);\n        if(count > 0) {\n            for(uint i = 0; i < count; i++) {\n                address pair = IAAAAFactory(IConfig(config).factory()).allPools(i);\n                list[i] = getConfigPool(pair);\n            }\n        }\n        return list;\n    }\n\n    function countConfig() public view returns (uint) {\n        return 10 + IAAAAFactory(IConfig(config).factory()).countPools() * 4;\n    }\n\n    function getConfigValue(address _pair, bytes32 _key, string memory _name) public view returns (ConfigValueStruct memory info){\n        info.pair = _pair;\n        info.key = _key;\n        info.name = _name;\n        if(_pair != address(0)) {\n            (info.min, info.max, info.span, info.value) = IConfig(config).getPoolParams(_pair, _key);\n        } else {\n            (info.min, info.max, info.span, info.value) = IConfig(config).getParams(_key);\n        }\n\n        if(info.value > info.min + info.span) {\n            info.min = info.value - info.span;\n        }\n\n        if(info.max > info.value + info.span) {\n            info.max = info.value + info.span;\n        }\n\n        return info;\n    }\n\n    function getConfigCommonValue(bytes32 _key, string memory _name) public view returns (ConfigValueStruct memory info){\n        return getConfigValue(address(0), _key, _name);\n    }\n\n    function getConfigCommonValues() public view returns (ConfigValueStruct[] memory list){\n        list = new ConfigValueStruct[](9);\n        list[0] = getConfigCommonValue(ConfigNames.PROPOSAL_VOTE_DURATION, 'PROPOSAL_VOTE_DURATION');\n        list[1] = getConfigCommonValue(ConfigNames.PROPOSAL_EXECUTE_DURATION, 'PROPOSAL_EXECUTE_DURATION');\n        list[2] = getConfigCommonValue(ConfigNames.PROPOSAL_CREATE_COST, 'PROPOSAL_CREATE_COST');\n        list[3] = getConfigCommonValue(ConfigNames.STAKE_LOCK_TIME, 'STAKE_LOCK_TIME');\n        list[4] = getConfigCommonValue(ConfigNames.MINT_AMOUNT_PER_BLOCK, 'MINT_AMOUNT_PER_BLOCK');\n        list[5] = getConfigCommonValue(ConfigNames.INTEREST_PLATFORM_SHARE, 'INTEREST_PLATFORM_SHARE');\n        list[6] = getConfigCommonValue(ConfigNames.INTEREST_BUYBACK_SHARE, 'INTEREST_BUYBACK_SHARE');\n        list[7] = getConfigCommonValue(ConfigNames.CHANGE_PRICE_DURATION, 'CHANGE_PRICE_DURATION');\n        list[8] = getConfigCommonValue(ConfigNames.CHANGE_PRICE_PERCENT, 'CHANGE_PRICE_PERCENT');\n        return list;\n    }\n\n    function getConfigPoolValues(address _pair) public view returns (ConfigValueStruct[] memory list){\n        list = new ConfigValueStruct[](6);\n        list[0] = getConfigValue(_pair, ConfigNames.POOL_BASE_INTERESTS, 'POOL_BASE_INTERESTS');\n        list[1] = getConfigValue(_pair, ConfigNames.POOL_MARKET_FRENZY, 'POOL_MARKET_FRENZY');\n        list[2] = getConfigValue(_pair, ConfigNames.POOL_PLEDGE_RATE, 'POOL_PLEDGE_RATE');\n        list[3] = getConfigValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE, 'POOL_LIQUIDATION_RATE');\n        list[4] = getConfigValue(_pair, ConfigNames.POOL_MINT_BORROW_PERCENT, 'POOL_MINT_BORROW_PERCENT');\n        list[5] = getConfigValue(_pair, ConfigNames.POOL_MINT_POWER, 'POOL_MINT_POWER');\n        return list;\n    }\n}"
    }
  }
}