{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/SellPrivate.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, 'Address: insufficient balance');\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}('');\n        require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, 'Address: low-level call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), 'Address: call to non-contract');\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, 'SafeMath: addition overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, 'SafeMath: subtraction overflow');\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, 'SafeMath: multiplication overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, 'SafeMath: division by zero');\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, 'SafeMath: modulo by zero');\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal virtual view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal virtual view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public virtual override view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'ERC20: decreased allowance below zero')\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), 'ERC20: transfer from the zero address');\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: mint to the zero address');\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), 'ERC20: burn from the zero address');\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), 'ERC20: approve from the zero address');\n        require(spender != address(0), 'ERC20: approve to the zero address');\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ncontract Ownable {\n    address public owner;\n    constructor() public {\n      owner = msg.sender;\n      }\n\n    modifier onlyOwner() {\n      if (msg.sender != owner) {\n        revert();\n      }    \n      _;\n    }\n} \n\n\ncontract SellPrivate is Ownable{\n    using SafeMath for uint256;\n\n    ERC20 public tokenReward;\n\n    uint256 public totalETHDeposit= 0;\n    \n    uint256 public dayUnblock = 1611964800;\n    \n    uint256 public percentMaxPayout= 20;\n    \n    struct User {\n        uint256 totalETH;\n        uint256 totalJUSDeposit;\n        uint256 totalJUS;\n        uint256 totalJUSBlock;\n        uint256 totalREFBlock;\n        uint256 totalREF;\n        uint256 refLevel;\n        address refParent;\n    }\n    struct Order {\n        uint256 id;\n        address userId;\n        uint256 timestampCreated;\n        uint256 amountETH;\n        bool [5] times;\n        uint256 rewarded;\n        uint256 totalReward;\n        address address_refer;\n        uint256 timestampLastWithDraw;\n    }\n\n\n    mapping (address => uint256) public balanceOf;\n    \n\n\n    mapping(address => User) public users;\n    mapping(uint256 => Order) public orders;\n    uint256 public orderCount;\n    address public dev_adress = 0x11dB03C79af1D7957DBC1a4739764b3E6C37d9cd;\n    address public address_refer = 0x701D8BDEF1955f74F741fdae7d0cC36e10991456;\n    address payable address_admin = 0xc8140D31eD7cA4407cB9e616A0e18357b1630c6E;\n    \n    address default_adress = 0x0000000000000000000000000000000000000000;\n    uint256 percent_withDraw = 500000000000000000;\n    \n\n    event Deposit(address indexed user, uint256 amount);\n    event Transfer(address sender, address receiver, uint256 amount);\n    mapping(address => address) public userIdsOrders;\n\n    constructor(address _jusToken) public {\n        tokenReward = ERC20(_jusToken);\n    }\n\n    function getName() public view returns (string memory) {\n        return tokenReward.name();\n    }\n\n    function getTotalSupply() public view returns (uint256) {\n        return tokenReward.totalSupply();\n    }\n\n    function getBalanceOf(address _owner) public view returns (uint256) {\n        return tokenReward.balanceOf(_owner);\n    }\n\n    function getBalance() public view returns (uint256) {\n        return tokenReward.balanceOf(address(this));\n    }\n\n    function sendTransferReward(address _to, uint256 _value) public {\n        tokenReward.transfer(_to, _value);\n    }\n\n    function setTokenJUSReward(address _token) public onlyOwner {\n        tokenReward = ERC20(_token);\n    }\n\n    function setDevReward(address _dev) public onlyOwner {\n        dev_adress = _dev;\n    }\n    \n    function setReferReward(address _ref) public onlyOwner {\n        address_refer = _ref;\n    }\n\n    function setDayUnblock(uint256 _dayUnblock) public onlyOwner {\n        dayUnblock = _dayUnblock;\n    }\n    \n    function setPercentMaxPayout(uint256 _percent) public onlyOwner {\n        percentMaxPayout = _percent;\n    }\n\n    function setAddressAdmin(address payable _address_admin) public onlyOwner {\n        address_admin = _address_admin;\n    }\n\n    function setAddressRefer(address  _address_refer) public onlyOwner {\n        address_refer = _address_refer;\n    }\n    \n    function setPercent_withDraw(uint256  _percent_withDraw) public onlyOwner {\n        percent_withDraw = _percent_withDraw;\n    }\n    \n    function checkLimitAndSentReward(\n        address _refer,\n        uint256 bonus\n    ) private {\n        User storage user = users[_refer];\n        uint256 currentTotalJUS = user.totalREF.add(bonus);\n        uint256 totalJUSonETHReward = user.totalJUSDeposit.mul(percentMaxPayout).div(100); //  percent on total ETH\n        if (_refer == address_refer) {\n            sendTransferReward(_refer, bonus);\n        } else {\n            if (currentTotalJUS <= totalJUSonETHReward) {\n                user.totalREF = user.totalREF.add(bonus);\n                // this one will block refer before day unblock\n                if(block.timestamp <= dayUnblock){\n                  user.totalREFBlock = user.totalREFBlock.add(bonus);\n                }else{\n                    uint256 totalRef = user.totalREFBlock.add(bonus);\n                    sendTransferReward(_refer, totalRef);\n                    user.totalREFBlock = 0;\n                }\n            }\n        }\n    }\n    \n    function getBonus(uint256 _amountETH, uint16 _level)  internal  returns (uint256) {\n        uint16 [3] memory arrBonus = [500,300,200];\n        uint256 reward = 0;\n        uint256 maxAmountReward = 2*1e18;\n        if(_amountETH >= maxAmountReward){\n            reward =  maxAmountReward.mul(arrBonus[_level]).div(1e18);\n        }else{\n            reward = _amountETH.mul(arrBonus[_level]).div(1e18);\n        }\n        return reward.mul(1e18);\n    }\n    \n    function calBonusRefer(\n        address _refer,\n        uint256 _amountETH\n    ) private {\n        User storage user = users[_refer];\n        uint256 minTotalETH =5e17;\n        \n        // if _refer is address dev then don'nt need check balance ETH\n        if (_refer == address_refer) {\n            sendTransferReward(_refer, getBonus(_amountETH,0));\n        } else {\n            if (user.totalETH >= minTotalETH) {\n                checkLimitAndSentReward(_refer, getBonus(_amountETH,0));\n            }\n\n            User storage userLevel1 = users[user.refParent];\n            if (user.refParent == address_refer || (userLevel1.totalETH >= minTotalETH && user.refParent != address_refer)) {\n                checkLimitAndSentReward(user.refParent, getBonus(_amountETH,1));\n            }\n\n            User storage userLevel2 = users[userLevel1.refParent];\n            if (\n                userLevel1.refParent == address_refer || \n                (userLevel2.totalETH >= minTotalETH && userLevel1.refParent != address_refer)) {\n                checkLimitAndSentReward(userLevel1.refParent, getBonus(_amountETH,2));\n            }\n        }\n    }\n\n    function getRateTokenReward(uint256 _amountETH) public view returns (uint256) {\n        uint16 [5] memory arrPrice   = [20000,18000,15000, 12000, 10000];\n        uint256 p1 = 500;\n        uint256 p2 = 1000;\n        uint256 p3 = 1400;\n        uint256 p4 = 1700;\n        uint256 p5 = 1840;\n        if (_amountETH.add(totalETHDeposit) <= p1.mul(1e18)) {\n           return arrPrice[0];\n        }\n\n        if (_amountETH.add(totalETHDeposit) > p1.mul(1e18) && totalETHDeposit <= p2.mul(1e18)) {\n            return arrPrice[1];\n        }\n\n        if (_amountETH.add(totalETHDeposit) > p2.mul(1e18) && totalETHDeposit <= p3.mul(1e18)) {\n            return arrPrice[2];\n        }\n\n        if (_amountETH.add(totalETHDeposit) > p3.mul(1e18) && totalETHDeposit <= p4.mul(1e18)) {\n           return  arrPrice[3];\n        }\n        \n        if (_amountETH.add(totalETHDeposit) > p4.mul(1e18) && totalETHDeposit <= p5.mul(1e18)) {\n            return arrPrice[4];\n        }\n    }\n\n    // Buy token JUS by deposit ETH\n    function buyToken(\n        uint256 _amountETH,\n        address _refer,\n        uint256 _referLevel\n    ) payable  public {\n        require(msg.value == _amountETH, 'Insufficient ETH balance');\n        \n        // minimum deposit 0.1 ETH\n        require(_amountETH >= 1e17, 'minimum deposit 0.1 ETH');\n        \n        address userIdOrder = userIdsOrders[msg.sender];\n        // insert or update amount for user\n\n        User storage user = users[msg.sender];\n\n        if (_refer == dev_adress) {\n            user.refLevel = 1;\n        } else {\n            user.refLevel = _referLevel;\n        }\n\n        user.refParent = _refer;\n        uint256 _rate_token_reward = getRateTokenReward(_amountETH);\n\n        // call bonus\n        if (_refer != default_adress && userIdOrder == default_adress) {\n            calBonusRefer(_refer, _amountETH);\n        }\n\n        // calculator reward\n        uint256 reward = _amountETH.mul(_rate_token_reward);\n\n        // create order\n        userIdsOrders[msg.sender] = msg.sender;\n        \n        bool [5] memory times= [false,false,false,false,false];\n        orders[orderCount] = Order(\n            orderCount,\n            msg.sender,\n            block.timestamp,\n            _amountETH,\n            times,\n            0,\n            reward,\n            _refer,\n            block.timestamp\n        );\n        if(msg.value>0){\n            // sent amount to wallet addmin\n            sentTransferETH(address_admin);    \n        }\n\n        // update totalETH deposit\n        user.totalETH = user.totalETH.add(_amountETH);\n        user.totalJUSDeposit = user.totalJUSDeposit.add(reward);\n        user.totalJUSBlock = user.totalJUSBlock.add(reward);\n        totalETHDeposit = totalETHDeposit.add(_amountETH);\n        orderCount++;\n    }\n\n    function withDrawToken(uint256 _orderId, uint256 _milestone) public {\n        Order storage order = orders[_orderId];\n        require(order.userId == msg.sender, 'Require created by sender');\n        uint8 [5] memory arrmMilestone = [1,2,3,4,5];\n        uint256 rewardPending = 0;\n        uint256 feePending = 0;\n        bool isWithDraw = false;\n        uint256 milestone = 0;\n        if (order.times[0] != true  && _milestone == arrmMilestone[0]) {\n            milestone = 10;\n            isWithDraw = true;\n            order.times[0] = true;\n        }\n\n        if (order.times[1] != true && _milestone == arrmMilestone[1]) {\n            milestone = 10;\n            isWithDraw = true;\n            order.times[1] = true;\n        }\n\n        if (order.times[2] != true && _milestone == arrmMilestone[2]) {\n            milestone = 20;\n            isWithDraw = true;\n            order.times[2]=true;\n        }\n\n        if (order.times[3] != true && _milestone == arrmMilestone[3]) {\n            milestone = 30;\n            isWithDraw = true;\n            order.times[3]=true;\n        }\n    \n        if (order.times[4] != true && _milestone == arrmMilestone[4]) {\n            milestone = 30;\n            isWithDraw = true;\n            order.times[4]=true;\n        }\n        \n        if (isWithDraw) {\n            rewardPending = getRewardByPercent(_orderId, milestone);\n            feePending = (rewardPending.mul(percent_withDraw).div(1e18)).div(100); // percent 0.5%\n            order.rewarded = order.rewarded.add(rewardPending);\n            order.timestampLastWithDraw = block.timestamp;\n\n            // sent transfer to sender\n            sendTransferReward(msg.sender, rewardPending.sub(feePending));\n\n            // sent fee to dev\n            sendTransferReward(dev_adress, feePending);\n\n            User storage user = users[order.userId];\n            user.totalJUS = user.totalJUS.add(rewardPending);\n            if (rewardPending > 0) {\n                user.totalJUSBlock = user.totalJUSBlock.sub(rewardPending);\n            }\n        }\n    }\n\n    function getRewardByPercent(uint256 _orderId, uint256 _milestone) public view returns (uint256) {\n        Order memory order = orders[_orderId];\n        uint256 rewardPending = 0;\n        rewardPending = order.totalReward.mul(_milestone).div(100);\n        return rewardPending;\n    }\n\n    function getOrder(uint256 _orderId) public view returns (Order memory) {\n        return orders[_orderId];\n    }\n\n    function getUser(address _adr) public view returns (User memory) {\n        return users[_adr];\n    }\n\n    function getOrders(address _user) public view returns (Order[] memory) {\n        Order[] memory ordersTemp = new Order[](orderCount);\n        uint256 count;\n        for (uint256 i = 0; i < orderCount; i++) {\n            if (orders[i].userId == _user) {\n                ordersTemp[count] = orders[i];\n                count += 1;\n            }\n        }\n        Order[] memory filteredOrders = new Order[](count);\n        for (uint256 i = 0; i < count; i++) {\n            filteredOrders[i] = ordersTemp[i];\n        }\n        return filteredOrders;\n    }\n\n    function sentTransferETH(address payable _to) private {\n       _to.transfer(msg.value);\n    }   \n}"}}}