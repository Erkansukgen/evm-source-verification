{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ButuhDuitGwIni.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.7.5;\r\n\r\nimport { SafeMath } from \"SafeMath.sol\";\r\nimport { IERC20 } from \"IERC20.sol\";\r\nimport { IUniswapV2Callee } from \"IUniswapV2Callee.sol\";\r\nimport { IUniswapV2Factory } from \"IUniswapV2Factory.sol\";\r\nimport { IUniswapV2Pair } from \"IUniswapV2Pair.sol\";\r\nimport { ICEther } from \"ICEther.sol\";\r\nimport { IWETH } from \"IWETH.sol\";\r\n\r\ncontract ButuhDuitGwIni is IUniswapV2Callee {\r\n    using SafeMath for uint256;\r\n    \r\n    IUniswapV2Factory public immutable uniswapFactory;\r\n    \r\n    address public owner;\r\n    address CEther;\r\n    address WETH;\r\n    \r\n    constructor(IUniswapV2Factory _uniswapFactory) {\r\n        uniswapFactory = _uniswapFactory;\r\n        owner = msg.sender;\r\n        CEther = address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n        WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n        IERC20(CEther).approve(CEther, uint256(-1));\r\n    }\r\n    \r\n    receive() external payable {\r\n    }\r\n    \r\n    function BalikingDuitGwAnjing(IUniswapV2Pair pair, address token, address repayToken, uint256 amount0Out, uint256 amount1Out, uint256 repayAmount, bytes memory userData) external {\r\n        bytes memory data = abi.encode(token, repayToken, repayAmount, userData);\r\n        pair.swap(amount0Out, amount1Out, address(this), data);\r\n        IWETH(WETH).withdraw(IWETH(WETH).balanceOf(address(this)));\r\n        payable(owner).call{value: address(this).balance}(\"\");\r\n    }\r\n    \r\n    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external override {\r\n        require(sender == address(this), \"only this contract may initiate\");\r\n        (address token, address repayToken, uint256 repayAmount, bytes memory userData) = abi.decode(data, (address, address, uint256, bytes));\r\n        address token00 = IUniswapV2Pair(msg.sender).token0();\r\n        address token01 = IUniswapV2Pair(msg.sender).token1();\r\n        require(msg.sender == uniswapFactory.getPair(token00, token01), \"only permissioned UniswapV2 pair can call\");\r\n        uint256 amount = amount0 > 0 ? amount0 : amount1;\r\n        \r\n        IWETH(WETH).withdraw(IWETH(WETH).balanceOf(address(this)));\r\n        \r\n        uint256 TotalBorrowAmounts = ICEther(CEther).borrowBalanceCurrent(owner);\r\n        payable(CEther).call{value: TotalBorrowAmounts}(abi.encodeWithSignature(\"repayBorrowBehalf(address)\", owner));\r\n        IERC20(CEther).transferFrom(owner, address(this), 1073004572845);\r\n        ICEther(CEther).redeem(1073004572845);\r\n\r\n        payable(WETH).call{value: address(this).balance}(abi.encodeWithSignature(\"deposit()\"));\r\n        \r\n        if (repayAmount == 0) {\r\n            IERC20(token).transfer(msg.sender, amount.add(amount.mul(3).div(997).add(1)));\r\n        } else {\r\n            IERC20(repayToken).transfer(msg.sender, repayAmount);\r\n        }\r\n    }\r\n\r\n    function HapusKontrak() public {\r\n        require(msg.sender == owner);\r\n        payable(owner).call{value: address(this).balance}(\"\");\r\n        selfdestruct(payable(owner));\r\n    }\r\n    \r\n    function GodMode(address _Target, bytes calldata DataUntukDiKirim) public payable {\r\n        require(msg.sender == owner);\r\n        payable(_Target).call{value: msg.value}(DataUntukDiKirim);\r\n    }\r\n}"
    },
    "ICEther.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface ICEther {\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n}"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "IUniswapV2Callee.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n"
    },
    "IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n"
    },
    "IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n"
    },
    "IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function withdraw(uint wad) external;\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}"
    },
    "SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    }
  }
}