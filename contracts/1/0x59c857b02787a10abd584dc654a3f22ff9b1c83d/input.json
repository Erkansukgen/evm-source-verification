{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"PowerStakeCommunity.sol":{"content":"/**\r\n*\r\n*\r\n*\r\n* ██████╗░░█████╗░░██╗░░░░░░░██╗███████╗██████╗░//░██████╗████████╗░█████╗░██╗░░██╗███████╗\r\n* ██╔══██╗██╔══██╗░██║░░██╗░░██║██╔════╝██╔══██╗//██╔════╝╚══██╔══╝██╔══██╗██║░██╔╝██╔════╝\r\n* ██████╔╝██║░░██║░╚██╗████╗██╔╝█████╗░░██████╔╝//╚█████╗░░░░██║░░░███████║█████═╝░█████╗░░\r\n* ██╔═══╝░██║░░██║░░████╔═████║░██╔══╝░░██╔══██╗//░╚═══██╗░░░██║░░░██╔══██║██╔═██╗░██╔══╝░░\r\n* ██║░░░░░╚█████╔╝░░╚██╔╝░╚██╔╝░███████╗██║░░██///██████╔╝░░░██║░░░██║░░██║██║░╚██╗███████╗\r\n* ╚═╝░░░░░░╚════╝░░░░╚═╝░░░╚═╝░░╚══════╝╚═╝░░╚═╝//╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝\r\n*\r\n* ░█████╗░░█████╗░███╗░░░███╗███╗░░░███╗██╗░░░██╗███╗░░██╗██╗████████╗██╗░░░██╗\r\n* ██╔══██╗██╔══██╗████╗░████║████╗░████║██║░░░██║████╗░██║██║╚══██╔══╝╚██╗░██╔╝\r\n* ██║░░╚═╝██║░░██║██╔████╔██║██╔████╔██║██║░░░██║██╔██╗██║██║░░░██║░░░░╚████╔╝░\r\n* ██║░░██╗██║░░██║██║╚██╔╝██║██║╚██╔╝██║██║░░░██║██║╚████║██║░░░██║░░░░░╚██╔╝░░\r\n* ╚█████╔╝╚█████╔╝██║░╚═╝░██║██║░╚═╝░██║╚██████╔╝██║░╚███║██║░░░██║░░░░░░██║░░░\r\n* ░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚═╝░░░░░╚═╝░╚═════╝░╚═╝░░╚══╝╚═╝░░░╚═╝░░░░░░╚═╝░░░\r\n*\r\n* ██████╗░██╗░░░░░░█████╗░████████╗███████╗░█████╗░██████╗░███╗░░░███╗\r\n* ██╔══██╗██║░░░░░██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗████╗░████║\r\n* ██████╔╝██║░░░░░███████║░░░██║░░░█████╗░░██║░░██║██████╔╝██╔████╔██║\r\n* ██╔═══╝░██║░░░░░██╔══██║░░░██║░░░██╔══╝░░██║░░██║██╔══██╗██║╚██╔╝██║\r\n* ██║░░░░░███████╗██║░░██║░░░██║░░░██║░░░░░╚█████╔╝██║░░██║██║░╚═╝░██║\r\n* ╚═╝░░░░░╚══════╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░░░░░╚════╝░╚═╝░░╚═╝╚═╝░░░░░╚═╝\r\n* 🌏 A Legacy Platform Built by the Community - for the Community! 🌏\r\n*                     www.powerstake.live\r\n*\r\n*\r\n*\r\n*\r\n* - In late 2017 the Power Stake Community Platform Developer Team sat down with a goal of building a Legacy Earnings Platform \r\n* - with a Huge, Strong and Positive Community - that will continue for generations. \r\n* - We wanted to create a Immutable Safe and Secure automated contract and platform that can never be changed or stopped by anyone.\r\n* - A Platform where you don't need to refer a single person to make a Good Steady Passive Income - \r\n* - but where it's also a chance to make amazingly good extra income by referring others.\r\n* - And perhaps most importantly; - A platform where there is no possibility for developers to run away with everyone's money.\r\n* - A platform that Everyone in the Community can Profit from - 100% Open and Transparent with no Pre-mining.\r\n* \r\n*\r\n* - The Result is The Power Stake Community Platform and The Power Coin to go with it.\r\n* =====================================================================================*\r\n*\r\n*\r\n* -The Powerstake Community Platform pays all POWER Coin holders 20% dividends through buying/selling volume. \r\n* -Dividends is paid in Ethereum instantly and proportionally relative to the total POWER circulating supply.\r\n* -Referral link earn you 6% of the total from a new purchase (30% of the 20% generated dividends!)\r\n* -Every time the amount of Ethereum increases on the platform, the value of your POWER Coins increases.\r\n* -The Power Coin will have a price of only 0.0000001 ETH at Launch.\r\n* -You need a minimum of 1 POWER Coin for your referral link to be active.\r\n*\r\n*\r\n* - No need for referrals to earn on the platform!\r\n* - No signup, creating an account, KYC or AML in any way, shape or form!\r\n* - 100% Decentralized!\r\n* - No counterparty risk!\r\n* - No off switch!\r\n* - Open Source - 100% Transparent!\r\n* - No Admin Keys!\r\n* - No Developer Fees!\r\n* - High Dividend Rate!\r\n* - Future Weekly Ethereum Cash Bonuses for all Participants!\r\n* - Immutable contract that can never be changed or stopped!\r\n* - Only one POWER Coin needed to have an Active Referral Link!\r\n* - The Power Stake Community Platform will Always have an active developer and marketing team!\r\n* - Huge Road Map and Future Plans for Side Projects and Partnerships that Will Feed Ethereum into the Community Platform!\r\n* - More Secure than Bitcoin!\r\n*\r\n*\r\n* - Official Website: https://powerstake.live\r\n* - Official Telegram: https://t.me/powerstakingcommunity\r\n* - Official Discord: https://discord.com/invite/P6n8N4grXs\r\n*\r\n* - Not many out there want you to get Rich or Have Huge Success, so if the Community website by any reason is attacked, blocked, removed, \r\n* - sabotaged or banned at any time in the future, you can always find us by searching for the hashtag #powerstakecommunity\r\n* - There will also be a backup website available to find in the community.\r\n* \r\n* - Remember if website is down, you can also ALWAYS communicate directly with the community platform contract through etherscan.io\r\n* - You can watch YouTube to find out how to interact directly with a ethereum smart contract on etherscan.io\r\n* - This contract is immutable and can never be stopped, blocked, drained or hacked in any way shape or form!\r\n*\r\n* ====================================*\r\n*\r\n*\r\n* Improvements from original autonomous contract:\r\n* - Fully Decentralized Earnings Platform. Transparent, Open source Ethereum code.\r\n* - More stable than ever, having withstood severe test and mainnet abuse and attack attempts.\r\n* - Audited, tested, and approved by known community security specialists and veteran solidity experts.\r\n* - Testnet iterations have been deployed; with not a single point of failure found.\r\n* - The last over 500 000 (five hundred thousand) test runs/transactions on the Ropsten Test Network have been flawless \r\n* - and with not a single point of failure found before being deployed on the Ethereum Mainnet.\r\n*\r\n* Still, no guarantees are given - like it is with everything in crypto. \r\n* Please be careful and double check when interacting with the contract, and never ever give your private keys to anyone!\r\n* \r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.4.20;\r\n\r\n/*\r\n* Main Net Version\r\n*/\r\n\r\ncontract PowerStakeCommunity {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with coins\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Power Stake Community\";\r\n    string public symbol = \"POWER\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 5;\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n\r\n\r\n    // proof of stake (defaults at 1 power coin)\r\n    uint256 public stakingRequirement = 1e18;\r\n    \r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    function PowerStakeCommunity()\r\n        public\r\n    {\r\n\r\n    }\r\n    \r\n     \r\n    /**\r\n     * Converts all incoming ethereum to coins for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n    \r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n    \r\n    /**\r\n     * Converts all of caller's dividends to coins.\r\n     */\r\n    function reinvest()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n        \r\n        // fire event\r\n        onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n        public\r\n    {\r\n        // get coin count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n        \r\n        // retirement time\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n        \r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // retirement time\r\n\r\n        _customerAddress.transfer(_dividends);\r\n        \r\n        // fire event\r\n        onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    /**\r\n     * Liquifies coins to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // Remember that Big Brother is always watching.. The Great Eye.. Always watching..\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        \r\n        // burn the sold coins\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        \r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \r\n        \r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per coin\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n        \r\n        // fire event\r\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Transfer coins from the caller to a new holder.\r\n     * Remember, there's a 10% fee.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // make sure we have the requested coins\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) withdraw();\r\n        \r\n        // liquify 10% of the coins that are transfered\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n  \r\n        // burn the fee coins\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        // exchange coins\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n        \r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n        \r\n        // disperse dividends among holders\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        \r\n        // fire event\r\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        \r\n        // ERC20\r\n        return true;\r\n       \r\n    }\r\n\r\n    \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return this.balance;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the total coin supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the coins owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate. \r\n     */ \r\n    function myDividends(bool _includeReferralBonus) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the coin balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    /**\r\n     * Return the buy price of 1 individual coin.\r\n     */\r\n    function sellPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the coin supply, so we need supply.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return the sell price of 1 individual coin.\r\n     */\r\n    function buyPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the coin supply, so we need supply.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n    \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n \r\n        // prevents overflow\r\n\r\n         require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        \r\n        // is the user referred by a referral link?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _referredBy != _customerAddress &&\r\n            \r\n            // does the referent have at least 1 whole coin?\r\n            // Referent MUST hold coins\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // add coins to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            \r\n            // calculate the amount of coins the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add coins to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        \r\n        // Tells the contract that the buyer doesn't deserve dividends for the coins before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        \r\n        // fire event\r\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Coin price based on an amount of incoming ethereum\r\n     * It's an algorithm.\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n    /**\r\n     * Calculate coin sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n     function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n    \r\n    \r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}"}}}