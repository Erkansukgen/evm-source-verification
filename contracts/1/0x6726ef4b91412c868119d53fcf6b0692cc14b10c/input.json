{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/promo.sol": {
      "content": "\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.10;\n\n//--------------------------------------\n//  PROMO contract\n//\n// Symbol      : PIC\n// Name        : PROMO\n// Total supply: 40000000\n// Decimals    : 14\n//--------------------------------------\n\nabstract contract ERC20Interface {\n    function totalSupply() virtual external view returns (uint256);\n    function balanceOf(address tokenOwner) virtual external view returns (uint);\n    function allowance(address tokenOwner, address spender) virtual external view returns (uint);\n    function transfer(address to, uint tokens) virtual external returns (bool);\n    function approve(address spender, uint tokens) virtual external returns (bool);\n    function transferFrom(address from, address to, uint tokens) virtual external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Burn(address from, address, uint256 value);\n\n    }\n\n// ----------------------------------------------------------------------------\n// Safe Math Library \n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a, \"SafeMath: subtraction overflow\"); \n        c = a - b; \n        return c;\n    }\n\n}\n\ncontract Promocoin is ERC20Interface, SafeMath{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public initialSupply;\n    uint256 public _totalSupply;\n    address public owner;\n    \n   \n    mapping(address => uint) internal balances;\n    mapping(address => mapping(address => uint)) internal allowed;\n    mapping(uint256 => uint256) internal token;\n    \n    \n    constructor() public {\n        name = \"PROMO\";\n        symbol = \"PIC\";\n        decimals = 14;\n        _totalSupply = 40000000 * 10 ** uint256(decimals);\n\t    initialSupply = _totalSupply;\n\t    balances[msg.sender] = _totalSupply;\n        owner = msg.sender;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n    \n   \n \n    function totalSupply() external view override returns (uint256) {\n        return safeSub(_totalSupply, balances[address(0)]);\n    }\n\n    function balanceOf(address tokenOwner) external view override returns (uint getBalance) {\n        return balances[tokenOwner];\n    }\n \n    function allowance(address tokenOwner, address spender) external view override returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n \n    function approve(address spender, uint tokens) external override returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    \n    function transfer(address to, uint tokens) external override returns (bool success) {\n        require(to != address(0));\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    \n   function transferFrom(address from, address to, uint tokens) external override returns (bool success) {\n        require(to != address(0));\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n   }\n   \n   \n}\n\n"
    }
  }
}