{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Distribute.sol": {
      "content": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: contracts/distribute.sol\n\npragma solidity ^0.8.0;\n\n\ncontract Distribute is ReentrancyGuard {\n  receive() external payable {}\n\n  function distribution() external returns (bool success) {\n    uint256 amountAvailable = address(this).balance;\n    address payable acct1 = payable(0xCE517A3e613C318aD6ba7Fe92294A0DF7f40aE84);\n    address payable acct2 = payable(0xc1EA070DB0EA8e7a6Dc842D9D060f03766CE73bC);\n    address payable acct3 = payable(0x1979f50dE3347E181f83AD1e814Db3A9601E99b5);\n    address payable acct4 = payable(0x45abdf7079aF2c1016AceE8d437f5E5542a86809);\n    (success, ) = payable(acct1).call{ value: (amountAvailable * 25) / 100 }(\n      \"\"\n    );\n    (success, ) = payable(acct2).call{ value: (amountAvailable * 25) / 100 }(\n      \"\"\n    );\n    (success, ) = payable(acct3).call{ value: (amountAvailable * 25) / 100 }(\n      \"\"\n    );\n    (success, ) = payable(acct4).call{ value: (amountAvailable * 25) / 100 }(\n      \"\"\n    );\n  }\n}\n"
    }
  }
}