{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DevelopmentLock.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2021-09-22\n*/\n\n/**\n *Submitted for verification at arbiscan.io on 2021-09-10\n*/\n\n// SPDX-License-Identifier: UNLICENSED \n//MARBILOCK\n// The tokens here will be used for airdrops, cex listings, otc trades to push the token and other rewards\n\npragma solidity ^0.8.4;\n \ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \ncontract REWARDSLOCK {\n    uint public end;\n    address payable public owner;\n    address payable public pendingOwner;\n    uint public duration = 90 days;\n    \n    \n    constructor(address payable _owner) {\n        owner = _owner;\n        end = block.timestamp + duration;\n    }\n    \n    function deposit(address token, uint amount) external {\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n    }\n    \n    function timeLeft() public view returns (uint) {\n        if (end > block.timestamp) {\n            return end - block.timestamp;\n        } else {\n            return 0;\n        }\n    }\n    \n    /**\n     * @notice Allows owner to change ownership\n     * @param _owner new owner address to set\n     */\n    function setOwner(address payable _owner) external {\n        require(msg.sender == owner, \"owner: !owner\");\n        pendingOwner = _owner;\n    }\n\n    /**\n     * @notice Allows pendingOwner to accept their role as owner (protection pattern)\n     */\n    function acceptOwnership() external {\n        require(msg.sender == pendingOwner, \"acceptOwnership: !pendingOwner\");\n        owner = pendingOwner;\n    }\n    \n    function ExtendLockTime(uint locktime) public {\n        require(msg.sender == owner, \"only owner\");\n        end += locktime;\n    }\n    \n    function getOwner() public view returns (address) {\n        return owner;\n    }\n    \n    function getEthBalance() view public returns (uint) {\n        return address(this).balance;\n    }\n    \n    function getTokenBalance(address tokenaddr) view public returns (uint) {\n        return IERC20(tokenaddr).balanceOf(address(this));\n    }\n    \n    receive() external payable {}\n    \n    function withdraw(address token, uint amount) external {\n        require(msg.sender == owner, \"only owner\");\n        require(block.timestamp >= end, \"too early\");\n        if(token == address(0)) {\n            owner.transfer(amount);\n        } else {\n            IERC20(token).transfer(owner, amount);\n        }\n    }\n}"
    }
  }
}