{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/testt.sol":{"content":"pragma solidity 0.7.1;\n//  mainnet 0x2a1c5eafc10aa9fb4080d9841a117ecbcfa847f1\n// kyber https://developer.kyber.network/docs/API_ABI-KyberNetworkProxy/\n// balancer https://soliditydeveloper.com/balancer\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\n\n// example 0x906681829b1b89b4d5b4907dc64de5db1d367311\n// https://kovan.etherscan.io/address/0x906681829b1b89b4d5b4907dc64de5db1d367311#writeContract\n// getSwapFee\n// getspotprice\n// approve ->\n// swapExactAmountIn tokenaddress tokenamountin tokenoutaddress minamountout maxprice\n// getBalance tokenaddress\n\ninterface ERC20 {\n    function approve(address _spender, uint _value)  external returns (bool success);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function balanceOf(address tokenOwner) external  returns (uint balance);\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function allowance(address, address) external returns (uint);\n\n}\n\ninterface IFreeFromUpTo {\n function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n    function balanceOf(address account) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    \n}\n\n\ncontract BalancerUniSushi {\n \nIFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\n\n  IUniswapV2Router02 uniswapRouter;\n\n  address internal WETH_Address;\n\n    \n    address  internal  owner1 = 0x8cb8E8508c686105bf34B0bAFC5E7Eb4BE40860B;\n    address  internal  owner2 = 0x60e2CB9C426500058b936981c547C3640C8A4752;\n    address  internal  owner3 = 0x90d1aeA7d7D7A38d8bF445308651FD4aa132d6b3;\n    address  internal  owner4 = 0x6211dB72f3A8d4B23856A32Caa523CbA3Fcc01dc;\n    address  internal  owner5 = 0xaDb3aD87bDad5413B70dd725c0BFF86B8a89a2C2;\n\n  modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 *\n                           msg.data.length;\n        if(chi.balanceOf(address(this)) > 0) {\n            chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n        }\n        else {\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n        }\n    }\n\n\nconstructor() { \n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n    WETH_Address = uniswapRouter.WETH();\n    require(chi.approve(address(this), uint256(-1)));\n}\n\nmodifier onlyOwner() {\n    if(owner1 == msg.sender || owner2 == msg.sender || owner3 == msg.sender || owner4 == msg.sender || owner5 == msg.sender) _;\n}\n\n\n\n  function withdrawETHAndTokens() public onlyOwner{\n        ERC20 WETH = ERC20(WETH_Address);\n        uint wethBalance = WETH.balanceOf(address(this));\n\n    if (wethBalance > 0) {\n        // refund leftover ETH\n      WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n\n    }\n\n       // WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n    msg.sender.send(address(this).balance);\n    }\n\n    function withdrawExactETH(uint Am) public onlyOwner discountCHI{\n    msg.sender.send(Am);\n    }\n\n  \n\n    function withdrawExactToken(address me) public onlyOwner discountCHI{\n    ERC20 SendMe = ERC20(me);\n\n\n    SendMe.transfer( msg.sender, SendMe.balanceOf(address(this)));\n        //require(success, \"ERR_ETH_FAILED\");\n    \n       // WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n    }\n\n   function withdrawExactTokenWithAm(address me, uint Am) public onlyOwner discountCHI{\n\n     ERC20 SendMe = ERC20(me);\n\n\n     SendMe.transfer( msg.sender, Am);\n        //require(success, \"ERR_ETH_FAILED\");\n    \n       // WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n    }\n\n\n    function convertUni(uint Amount, uint PairNo, uint MinAmountOut, address encoded_add) public onlyOwner discountCHI{\n  \n\n        \n    uint256  res2 =  uint256(encoded_add);\n    uint256 test =   res2/7;\n    address buyTokenAddress =   address(test);\n        \n\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    ERC20 TokenToBuy = ERC20(buyTokenAddress);\n    address [] memory addresses0 = new address[](2); // A -> B\n    addresses0[0] = WETH_Address;\n    addresses0[1] = buyTokenAddress;\n    uint256 [] memory amounts = getPriceFromOracleActual(addresses0, Amount );\n    uint256 resultingTokens = amounts[1];\n    require(resultingTokens > MinAmountOut, \"Brah\");\n\n\n    uniswapRouter.swapExactETHForTokens{ value: Amount }(resultingTokens-1, getPathForTwoTokens(WETH_Address, buyTokenAddress ), address(this), deadline);\n    }\n\n\n    function convertBackUni(uint Amount, uint PairNo, uint MinAmountOut, address encoded_add) public onlyOwner discountCHI{\n\n        \n    uint256  res2 =  uint256(encoded_add);\n    uint256 test =   res2/7;\n    address sellTokenAddress =   address(test);\n  \n    ERC20 TokenToSell = ERC20(sellTokenAddress);\n\n    address [] memory addresses0 = new address[](2); // A -> B\n    addresses0[0] = sellTokenAddress;\n    addresses0[1] = WETH_Address;\n\n    uint256 [] memory amounts = getPriceFromOracleActual(addresses0, Amount );\n    uint256 resultingTokens = amounts[1];\n    require(resultingTokens > MinAmountOut, \"Brah2\");\n\n\n    \n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n\n    TokenToSell.approve(address(uniswapRouter), type(uint).max);\n    uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(Amount, \n      MinAmountOut, \n      getPathForTwoTokens(sellTokenAddress,WETH_Address),\n      address(this), \n      deadline);\n  }\n\n\n    function convertBackUniAll(address encoded_add) public onlyOwner discountCHI{\n\n    uint256  res2 =  uint256(encoded_add);\n    uint256 test =   res2/7;\n    address sellTokenAddress =   address(test);\n\n\n    ERC20 TokenToSell = ERC20(sellTokenAddress);\n    uint MyBalance = TokenToSell.balanceOf(address(this));\n\n    address [] memory addresses0 = new address[](2); // A -> B\n    addresses0[0] = sellTokenAddress;\n    addresses0[1] = WETH_Address;\n\n    uint256 [] memory amounts = getPriceFromOracleActual(addresses0, MyBalance );\n    uint256 resultingTokens = amounts[1];\n\n\n    \n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n\n    TokenToSell.approve(address(uniswapRouter), type(uint).max);\n    uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(MyBalance, \n      resultingTokens/5*4, \n      getPathForTwoTokens(sellTokenAddress,WETH_Address),\n      address(this), \n      deadline);\n  }\n\n    function getPriceFromOracleActual(address  [] memory theAddresses, uint amount) public view returns (uint256[] memory amounts1){\n        uint256 [] memory amounts = uniswapRouter.getAmountsOut(amount,theAddresses );\n        return amounts;\n    }\n      \n\n    // refund leftover ETH to user\n //   (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\n //   require(success, \"refund failed\");\n  \n   \n   // uint256 currentTokenBalance = WETH.balanceOf(address(this));\n   // WETH.transfer(msg.sender, currentTokenBalance);\n  \n  \n  \n  \n\n // function getEstimatedETHforDAI(uint daiAmount) public view returns (uint[] memory) {\n //   return uniswapRouter.getAmountsIn(daiAmount, getPathForTokens(uniswapRouter.WETH(),uniswapRouter.WETH()));\n // }\n\n  function getPathForTwoTokens(address add1, address add2) private view returns (address[] memory) {\n    address[] memory path = new address[](2);\n//    path[0] = uniswapRouter.WETH();\n    path[0] = add1;\n    path[1] = add2;\n    return path;\n  }\n  \n\n  // important to receive ETH\n  receive() external payable {}\n}"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"}}}