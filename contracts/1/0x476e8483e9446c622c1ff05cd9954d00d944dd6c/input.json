{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/MTVX-presale.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-12-02\n*/\n\npragma solidity 0.8.9;\n\n// SPDX-License-Identifier: MIT\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract MTVXTokenPresaleBridge is Ownable {\n    \n    mapping (address => bool) public walletWhitelisted;\n    mapping (address => uint256) public purchasedAmount;\n    event TokensBought(uint256 tokenAmount, uint256 indexed ethAmount, address indexed sender);\n    uint256 public tokensPerEth =  13333333*1e18;\n    uint256 public maxEthAmount = 0.4 ether;\n    uint256 public minEthAmount = 0.1 ether;\n    uint256 public totalEthCap = 15 ether;\n    uint256 public totalPurchasedAmount;\n    bool public isInitialized = false;\n    bool public isWhitelistPresale = false;\n    address public tokenAddress;\n    \n    constructor() {\n        address token = address(0x3505355aBC42683ed3114e3773190B646B77a1ba); // MTVX Token\n        \n        tokenAddress = token;\n    }\n    \n    receive() external payable {\n        buyTokens();\n    }\n    \n    function buyTokens() payable public {\n        require(isInitialized, \"Private sale not active\");\n        if(isWhitelistPresale){\n            require(walletWhitelisted[msg.sender], \"User is not whitelisted\");\n        }\n        require(msg.value > 0, \"Must send ETH to get tokens\");\n        require(msg.value % minEthAmount == 0, \"Must buy in increments of Minimum ETH Amount (0.1)\");\n        require(msg.value + purchasedAmount[msg.sender] <= maxEthAmount, \"Cannot buy more than MaxETH Amount\");\n        require(msg.value + totalPurchasedAmount <= totalEthCap, \"No more tokens available for presale\");\n        \n        purchasedAmount[msg.sender] += msg.value;\n        totalPurchasedAmount += msg.value;\n        \n        uint256 tokenAmount = (msg.value * tokensPerEth)/1e18;\n        \n        IERC20 token = IERC20(tokenAddress);\n        require(token.balanceOf(address(this)) >= tokenAmount, \"Not enough tokens on contract to send\");\n        token.transfer(msg.sender, tokenAmount);\n        emit TokensBought(tokenAmount, msg.value, msg.sender);\n    }\n    \n    function initialize() external onlyOwner {\n        require(!isInitialized, \"May not initialize contract again\");\n        // Exclude the pair from fees so that users don't get taxed when selling.\n        isInitialized = true;\n    }\n    \n    // only use in case of emergency\n    function emergencyTokenAddressUpdate(address newToken) external onlyOwner{\n        tokenAddress = newToken;\n    }\n    \n    function updateMinEthAmount(uint256 newAmt) external onlyOwner{\n        require(!isInitialized, \"can't change the rules after presale starts\");\n        minEthAmount = newAmt;\n        require(maxEthAmount >= minEthAmount, \"can't set the max lower than the min\");\n    }\n    \n    function updateMaxEthAmount(uint256 newAmt) external onlyOwner{\n        require(!isInitialized, \"can't change the rules after presale starts\");\n        maxEthAmount = newAmt;\n        require(maxEthAmount >= minEthAmount, \"can't set the max lower than the min\");\n    }\n    \n    function updateTotalCap(uint256 newCap) external onlyOwner{\n        require(!isInitialized, \"can't change the rules after presale starts\");\n        totalEthCap = newCap;\n    }\n    \n    function setWhiteListPresale(bool isWhitelist) external onlyOwner {\n        isWhitelistPresale = isWhitelist;\n    }\n    \n    // only use in case of emergency or after presale is over\n    function emergencyWithdrawTokens() external onlyOwner {\n        IERC20(tokenAddress).transfer(msg.sender, IERC20(tokenAddress).balanceOf(address(this)));\n    }\n    \n    function whitelistWallet(address wallet, bool value) public onlyOwner {\n        walletWhitelisted[wallet] = value;\n    }\n    \n    function whitelistWallets(address[] memory wallets) public onlyOwner {\n        for(uint256 i = 0; i < wallets.length; i++){\n            whitelistWallet(wallets[i], true);\n        }\n    }\n    \n    // owner can withdraw ETH after people get tokens\n    function withdrawETH() external onlyOwner {\n        (bool success,) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success, \"Withdrawal was not successful\");\n    }\n}"
    }
  }
}