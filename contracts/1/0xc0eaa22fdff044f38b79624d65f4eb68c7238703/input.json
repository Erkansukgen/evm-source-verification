{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"scripts/Address.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.12;\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"scripts/Campaign.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n\nimport \"./Staker.sol\";\nimport { SafeERC20 } from \"./SafeERC20.sol\";\nimport './IFactoryGetters.sol';\n\ncontract ReEntrancyGuard {\n    bool internal locked;\n\n    modifier noReentrant() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n}\n\n// Uniswap v2\ninterface IUniswapV2Router02 {\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\n\ncontract Campaign is ReEntrancyGuard {\n    using Address for address;\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n\n    address public factory;\n    address public campaignOwner;\n    address public token;\n    uint256 public softCap;\n    uint256 public hardCap;\n    uint256 public tokenSalesQty;\n    uint256 public feePcnt;\n    uint256 public startDate;\n    uint256 public endDate;\n    uint256 public regEndDate;\n    uint256 public tierSaleEndDate;\n    uint256 public tokenLockTime;\n\n    struct TierProfile {\n        uint256 weight;\n        uint256 minTokens;\n        uint256 noOfParticipants;\n    }\n    mapping(uint256 => TierProfile) public indexToTier;\n    uint256 public totalPoolShares;\n    uint256 public sharePriceInMATIC;\n    bool private isSharePriceSet;\n\n    struct UserProfile {\n        bool isRegisterd;\n        uint256 inTier;\n    }\n    mapping(address => UserProfile) public allUserProfile;\n\n    mapping(address => bool) public lottery;\n\n    // Liquidity\n    uint256 public lpMATICQty;\n    uint256 public lpTokenQty;\n    uint256 public lpLockDuration;\n    uint256[2] private lpInPool; // This is the actual LP provided in pool.\n    bool private recoveredUnspentLP;\n\n    // Config\n    bool public burnUnSold;\n\n    // Misc variables //\n    uint256 public unlockDate;\n    uint256 public collectedMATIC;\n    uint256 public lpTokenAmount;\n\n    // States\n    bool public tokenFunded;\n    bool public finishUpSuccess;\n    bool public liquidityCreated;\n    bool public cancelled;\n\n   // Token claiming by users\n    mapping(address => bool) public claimedRecords;\n    bool public tokenReadyToClaim;\n\n    // Map user address to amount invested in MATIC //\n    mapping(address => uint256) public participants;\n\n    address public constant BURN_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\n\n    // Events\n    event Registered(\n        address indexed user,\n        uint256 timeStamp,\n        uint256 tierIndex\n    );\n\n    event Purchased(\n        address indexed user,\n        uint256 timeStamp,\n        uint256 amountMATIC,\n        uint256 amountToken\n    );\n\n    event LiquidityAdded(\n        uint256 amountMATIC,\n        uint256 amountToken,\n        uint256 amountLPToken\n    );\n\n    event LiquidityLocked(\n        uint256 timeStampStart,\n        uint256 timeStampExpiry\n    );\n\n    event LiquidityWithdrawn(\n        uint256 amount\n    );\n\n    event TokenClaimed(\n        address indexed user,\n        uint256 timeStamp,\n        uint256 amountToken\n    );\n\n    event Refund(\n        address indexed user,\n        uint256 timeStamp,\n        uint256 amountMATIC\n    );\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"Only factory can call\");\n        _;\n    }\n\n    modifier onlyCampaignOwner() {\n        require(msg.sender == campaignOwner, \"Only campaign owner can call\");\n        _;\n    }\n\n    modifier onlyFactoryOrCampaignOwner() {\n        require(msg.sender == factory || msg.sender == campaignOwner, \"Only factory or campaign owner can call\");\n        _;\n    }\n\n    constructor() public{\n        factory = msg.sender;\n    }\n\n    /**\n     * @dev Initialize  a new campaign.\n     * @notice - Access control: External. Can only be called by the factory contract.\n     */\n    function initialize\n    (\n        address _token,\n        address _campaignOwner,\n        uint256[4] calldata _stats,\n        uint256[4] calldata _dates,\n        uint256[3] calldata _liquidity,\n        bool _burnUnSold,\n        uint256 _tokenLockTime,\n        uint256[6] calldata _tierWeights,\n        uint256[6] calldata _tierMinTokens\n    ) external\n    {\n        require(msg.sender == factory,'Only factory allowed to initialize');\n        token = _token;\n        campaignOwner = _campaignOwner;\n        softCap = _stats[0];\n        hardCap = _stats[1];\n        tokenSalesQty = _stats[2];\n        feePcnt = _stats[3];\n        startDate = _dates[0];\n        endDate = _dates[1];\n        regEndDate = _dates[2];\n        tierSaleEndDate = _dates[3];\n        lpMATICQty = _liquidity[0];\n        lpTokenQty = _liquidity[1];\n        lpLockDuration = _liquidity[2];\n        burnUnSold = _burnUnSold;\n        tokenLockTime = _tokenLockTime;\n\n        for(uint256 i=0; i<_tierWeights.length; i++) {\n            indexToTier[i+1] = TierProfile(_tierWeights[i], _tierMinTokens[i], 0);\n        }\n    }\n\n    function isInRegistration() public view returns(bool) {\n        uint256 timeNow = block.timestamp;\n        return (timeNow >= startDate) && (timeNow < regEndDate);\n    }\n\n    function isInTierSale() public view returns(bool) {\n        uint256 timeNow = block.timestamp;\n        return (timeNow >= regEndDate) && (timeNow < tierSaleEndDate);\n    }\n\n    function isInFCFS() public view returns(bool) {\n        uint256 timeNow = block.timestamp;\n        return (timeNow >= tierSaleEndDate) && (timeNow < endDate);\n    }\n\n    function isInEnd() public view returns(bool) {\n        uint256 timeNow = block.timestamp;\n        return (timeNow >= endDate);\n    }\n\n    function currentPeriod() external view returns(uint256 period) {\n        if(isInRegistration()) period = 0;\n        else if(isInTierSale()) period = 1;\n        else if(isInFCFS()) period = 2;\n        else if(isInEnd()) period = 3;\n    }\n\n    function userRegistered(address account) public view returns(bool) {\n        return allUserProfile[account].isRegisterd;\n    }\n\n    function userTier(address account) external view returns(uint256) {\n        return allUserProfile[account].inTier;\n    }\n\n    function userAllocation(address account) public view returns(uint256 maxInvest, uint256 maxTokensGet) {\n        UserProfile memory usr = allUserProfile[account];\n        TierProfile memory tier = indexToTier[usr.inTier];\n        uint256 userShare = tier.weight;\n        if(isSharePriceSet) {\n            maxInvest = sharePriceInMATIC.mul(userShare);\n        } else {\n            maxInvest = (hardCap.div(totalPoolShares)).mul(userShare);\n        }\n        maxTokensGet = calculateTokenAmount(maxInvest);\n    }\n\n    function userMaxInvest(address account) public view returns(uint256) {\n        (uint256 inv, ) = userAllocation(account);\n        return inv;\n    }\n\n    function userMaxTokens(address account) external view returns(uint256) {\n        (, uint256 toks) = userAllocation(account);\n        return toks;\n    }\n\n    /**\n     * @dev Allows campaign owner to fund in his token.\n     * @notice - Access control: External, OnlyCampaignOwner\n     */\n    function fundIn() external onlyCampaignOwner {\n        require(!tokenFunded, \"Campaign is already funded\");\n        uint256 amt = getCampaignFundInTokensRequired();\n        require(amt > 0, \"Invalid fund in amount\");\n\n        tokenFunded = true;\n        ERC20(token).safeTransferFrom(msg.sender, address(this), amt);\n    }\n\n    // In case of a \"cancelled\" campaign, or softCap not reached,\n    // the campaign owner can retrieve back his funded tokens.\n    function fundOut() external onlyCampaignOwner {\n        require(failedOrCancelled(), \"Only failed or cancelled campaign can un-fund\");\n        tokenFunded = false;\n        ERC20 ercToken = ERC20(token);\n        uint256 totalTokens = ercToken.balanceOf(address(this));\n        sendTokensTo(campaignOwner, totalTokens);\n\n    }\n\n    /**\n     * @dev To Register In The Campaign In Reg Period\n     * @param _tierIndex - The tier index to participate in\n     * @notice - Valid tier indexes are, 1, 2, 3 ... 6\n     * @notice - Access control: Public\n     */\n    function registerForIDO(uint256 _tierIndex) external noReentrant {\n        require(tokenFunded, \"Campaign is not funded yet\");\n        address account = msg.sender;\n        require(isInRegistration(), \"Not In Registration Period\");\n        require(!userRegistered(account), \"Already regisered\");\n        require(_tierIndex >= 1 && _tierIndex <= 6, \"Invalid tier index\");\n\n\n        IFactoryGetters fact = IFactoryGetters(factory);\n        address stakerAddress = fact.getStakerAddress();\n\n        Staker stakerContract = Staker(stakerAddress);\n        uint256 stakedBal = stakerContract.stakedBalance(account); // Get the staked balance of user\n\n        TierProfile storage tier = indexToTier[_tierIndex];\n        require(tier.minTokens <= stakedBal, \"Not eligible for the tier\"); // Check eligibility for the tier\n\n        tier.noOfParticipants = (tier.noOfParticipants).add(1); // Update no. of participants\n        totalPoolShares = totalPoolShares.add(tier.weight); // Update total shares\n        allUserProfile[account] = UserProfile(true, _tierIndex); // Update user profile\n\n        lockTokens(account); // Lock staked tokens\n\n        emit Registered(account, block.timestamp, _tierIndex);\n    }\n\n    /**\n     * @dev Allows registered user to buy token in tiers.\n     * @notice - Access control: Public\n     */\n    function buyTierTokens() external payable noReentrant {\n\n        require(tokenFunded, \"Campaign is not funded yet\");\n        require(isLive(), \"Campaign is not live\");\n        require(isInTierSale(), \"Not in tier sale period\");\n        require(userRegistered(msg.sender), \"Not regisered\");\n\n        if(!isSharePriceSet) {\n            sharePriceInMATIC = hardCap.div(totalPoolShares);\n            isSharePriceSet = true;\n        }\n\n        // Check for over purchase\n        require(msg.value != 0, \"Value Can't be 0\");\n        require(msg.value <= getRemaining(),\"Insufficent token left\");\n        uint256 invested =  participants[msg.sender].add(msg.value);\n        require(invested <= userMaxInvest(msg.sender), \"Investment is more than allocated\");\n\n        participants[msg.sender] = invested;\n        collectedMATIC = collectedMATIC.add(msg.value);\n\n        emit Purchased(msg.sender, block.timestamp, msg.value, calculateTokenAmount(msg.value));\n    }\n\n    /**\n     * @dev Allows registered user to buy token in FCFS.\n     * @notice - Access control: Public\n     */\n    function buyFCFSTokens() external payable noReentrant {\n\n        require(tokenFunded, \"Campaign is not funded yet\");\n        require(isLive(), \"Campaign is not live\");\n        require(isInFCFS(), \"Not in FCFS sale period\");\n      //  require(lottery[msg.sender], \"Not selected\");\n\n        // Check for over purchase\n        require(msg.value != 0, \"Value Can't be 0\");\n        require(msg.value <= getRemaining(),\"Insufficent token left\");\n        uint256 invested =  participants[msg.sender].add(msg.value);\n\n        participants[msg.sender] = invested;\n        collectedMATIC = collectedMATIC.add(msg.value);\n\n        emit Purchased(msg.sender, block.timestamp, msg.value, calculateTokenAmount(msg.value));\n    }\n\n    /**\n     * @dev Add liquidity and lock it up. Called after a campaign has ended successfully.\n     * @notice - Access control: internal\n     */\n\n    function addAndLockLP() internal {\n\n        // require(!isLive(), \"Presale is still live\");\n        // require(!failedOrCancelled(), \"Presale failed or cancelled , can't provide LP\");\n        // require(softCap <= collectedMATIC, \"Did not reach soft cap\");\n\n        if ((lpMATICQty > 0 && lpTokenQty > 0) && !liquidityCreated) {\n\n            liquidityCreated = true;\n\n            unlockDate = (block.timestamp).add(lpLockDuration);\n            emit LiquidityLocked(block.timestamp, unlockDate);\n\n            IFactoryGetters fact = IFactoryGetters(factory);\n            address lpRouterAddress = fact.getLpRouter();\n            require(ERC20(address(token)).approve(lpRouterAddress, lpTokenQty), \"Failed to approve\"); // Uniswap doc says this is required //\n\n            (uint256 retTokenAmt, uint256 retMATICAmt, uint256 retLpTokenAmt) = IUniswapV2Router02(lpRouterAddress).addLiquidityETH\n                {value : lpMATICQty}\n                (address(token),\n                lpTokenQty,\n                0,\n                0,\n                address(this),\n                block.timestamp + 100000000);\n\n            lpTokenAmount = retLpTokenAmt;\n            lpInPool[0] = retMATICAmt;\n            lpInPool[1] = retTokenAmt;\n\n            emit LiquidityAdded(retMATICAmt, retTokenAmt, retLpTokenAmt);\n\n\n        }\n    }\n\n    /**\n     * @dev Get the actual liquidity added to LP Pool\n     * @return - uint256[2] consist of MATIC amount, Token amount.\n     * @notice - Access control: Public, View\n     */\n    function getPoolLP() external view returns (uint256, uint256) {\n        return (lpInPool[0], lpInPool[1]);\n    }\n\n    /**\n     * @dev There are situations that the campaign owner might call this.\n     * @dev 1: Pancakeswap pool SC failure when we call addAndLockLP().\n     * @dev 2: Pancakeswap pool already exist. After we provide LP, thee's some excess matic/tokens\n     * @dev 3: Campaign owner decided to change LP arrangement after campaign is successful.\n     * @dev In that case, campaign owner might recover it and provide LP manually.\n     * @dev Note: This function can only be called once by factory, as this is not a normal workflow.\n     * @notice - Access control: External, onlyFactory\n     */\n    function recoverUnspentLp() external onlyFactory {\n\n        require(!recoveredUnspentLP, \"You have already recovered unspent LP\");\n        recoveredUnspentLP = true;\n\n        uint256 maticAmt;\n        uint256 tokenAmt;\n\n        if (liquidityCreated) {\n            // Find out any excess matic/tokens after LP provision is completed.\n            maticAmt = lpMATICQty.sub(lpInPool[0]);\n            tokenAmt = lpTokenQty.sub(lpInPool[1]);\n        } else {\n            // liquidity not created yet. Just returns the full portion of the planned LP\n            // Only finished success campaign can recover Unspent LP\n            require(finishUpSuccess, \"Campaign not finished successfully yet\");\n            maticAmt = lpMATICQty;\n            tokenAmt = lpTokenQty;\n        }\n\n        // Return matic, token if any\n        if (maticAmt > 0) {\n            (bool ok, ) = campaignOwner.call{value: maticAmt}(\"\");\n            require(ok, \"Failed to return MATIC Lp\");\n        }\n\n        if (tokenAmt > 0) {\n            ERC20(token).safeTransfer(campaignOwner, tokenAmt);\n        }\n    }\n\n    /**\n     * @dev When a campaign reached the endDate, this function is called.\n     * @dev Add liquidity to uniswap and burn the remaining tokens.\n     * @dev Can be only executed when the campaign completes.\n     * @dev Anyone can call. Only called once.\n     * @notice - Access control: Public\n     */\n    function finishUp() external {\n\n        require(!finishUpSuccess, \"finishUp is already called\");\n        require(!isLive(), \"Presale is still live\");\n        require(!failedOrCancelled(), \"Presale failed or cancelled , can't call finishUp\");\n        require(softCap <= collectedMATIC, \"Did not reach soft cap\");\n        finishUpSuccess = true;\n\n        addAndLockLP(); // Add and lock liquidity\n\n        uint256 feeAmt = getFeeAmt(collectedMATIC);\n        uint256 unSoldAmtMATIC = getRemaining();\n        uint256 remainMATIC = collectedMATIC.sub(feeAmt);\n\n        // If lpMATICQty, lpTokenQty is 0, we won't provide LP.\n        if ((lpMATICQty > 0 && lpTokenQty > 0)) {\n            remainMATIC = remainMATIC.sub(lpMATICQty);\n        }\n\n        // Send fee to fee address\n        if (feeAmt > 0) {\n            (bool sentFee, ) = getFeeAddress().call{value: feeAmt}(\"\");\n            require(sentFee, \"Failed to send Fee to platform\");\n        }\n\n        // Send remain matic to campaign owner\n        (bool sentMATIC, ) = campaignOwner.call{value: remainMATIC}(\"\");\n        require(sentMATIC, \"Failed to send remain MATIC to campaign owner\");\n\n        // Calculate the unsold amount //\n        if (unSoldAmtMATIC > 0) {\n            uint256 unsoldAmtToken = calculateTokenAmount(unSoldAmtMATIC);\n            // Burn or return UnSold token to owner\n            sendTokensTo(burnUnSold ? BURN_ADDRESS : campaignOwner, unsoldAmtToken);\n        }\n    }\n\n\n    /**\n     * @dev Allow either Campaign owner or Factory owner to call this\n     * @dev to set the flag to enable token claiming.\n     * @dev This is useful when 1 project has multiple campaigns that\n     * @dev to sync up the timing of token claiming After LP provision.\n     * @notice - Access control: External,  onlyFactoryOrCampaignOwner\n     */\n    function registerUser(address _user) external onlyFactoryOrCampaignOwner {\n\n        lottery[_user] = true;\n    }\n\n    /**\n     * @dev Allow either Campaign owner or Factory owner to call this\n     * @dev to set the flag to enable token claiming.\n     * @dev This is useful when 1 project has multiple campaigns that\n     * @dev to sync up the timing of token claiming After LP provision.\n     * @notice - Access control: External,  onlyFactoryOrCampaignOwner\n     */\n    function banUser(address _user) external onlyFactoryOrCampaignOwner {\n\n        lottery[_user] = false;\n    }\n\n\n\n    /**\n     * @dev Allow either Campaign owner or Factory owner to call this\n     * @dev to set the flag to enable token claiming.\n     * @dev This is useful when 1 project has multiple campaigns that\n     * @dev to sync up the timing of token claiming After LP provision.\n     * @notice - Access control: External,  onlyFactoryOrCampaignOwner\n     */\n    function setTokenClaimable() external onlyFactoryOrCampaignOwner {\n\n        require(finishUpSuccess, \"Campaign not finished successfully yet\");\n        tokenReadyToClaim = true;\n    }\n\n    /**\n     * @dev Allow users to claim their tokens.\n     * @notice - Access control: External\n     */\n    function claimTokens() external noReentrant {\n        require(tokenReadyToClaim, \"Tokens not ready to claim yet\");\n        require(!claimedRecords[msg.sender], \"You have already claimed\");\n\n        uint256 amtBought = getClaimableTokenAmt(msg.sender);\n        if (amtBought > 0) {\n            claimedRecords[msg.sender] = true;\n            emit TokenClaimed(msg.sender, block.timestamp, amtBought);\n            ERC20(token).safeTransfer(msg.sender, amtBought);\n\n        }\n    }\n\n     /**\n     * @dev Allows campaign owner to withdraw LP after the lock duration.\n     * @dev Only able to withdraw LP if lockActivated and lock duration has expired.\n     * @dev Can call multiple times to withdraw a portion of the total lp.\n     * @param _lpToken - The LP token address\n     * @notice - Access control: Internal, OnlyCampaignOwner\n     */\n    function withdrawLP(address _lpToken,uint256 _amount) external onlyCampaignOwner {\n        require(liquidityCreated, \"liquidity is not yet created\");\n        require(block.timestamp >= unlockDate ,\"Unlock date not reached\");\n\n        emit LiquidityWithdrawn( _amount);\n        ERC20(_lpToken).safeTransfer(msg.sender, _amount);\n\n    }\n\n    /**\n     * @dev Allows Participants to withdraw/refunds when campaign fails\n     * @notice - Access control: Public\n     */\n    function refund() external {\n        require(failedOrCancelled(),\"Can refund for failed or cancelled campaign only\");\n\n        uint256 investAmt = participants[msg.sender];\n        require(investAmt > 0 ,\"You didn't participate in the campaign\");\n\n        participants[msg.sender] = 0;\n        (bool ok, ) = msg.sender.call{value: investAmt}(\"\");\n        require(ok, \"Failed to refund MATIC to user\");\n\n        emit Refund(msg.sender, block.timestamp, investAmt);\n    }\n\n    /**\n     * @dev To calculate the calimable token amount based on user's total invested MATIC\n     * @param _user - The user's wallet address\n     * @return - The total amount of token\n     * @notice - Access control: Public\n     */\n    function getClaimableTokenAmt(address _user) public view returns (uint256) {\n        uint256 investAmt = participants[_user];\n        return calculateTokenAmount(investAmt);\n    }\n\n    // Helpers //\n    /**\n     * @dev To send all XYZ token to either campaign owner or burn address when campaign finishes or cancelled.\n     * @param _to - The destination address\n     * @param _amount - The amount to send\n     * @notice - Access control: Internal\n     */\n    function sendTokensTo(address _to, uint256 _amount) internal {\n\n        // Security: Can only be sent back to campaign owner or burned //\n        require((_to == campaignOwner)||(_to == BURN_ADDRESS), \"Can only be sent to campaign owner or burn address\");\n\n         // Burn or return UnSold token to owner\n        ERC20 ercToken = ERC20(token);\n        ercToken.safeTransfer(_to, _amount);\n    }\n\n    /**\n     * @dev To calculate the amount of fee in MATIC\n     * @param _amt - The amount in MATIC\n     * @return - The amount of fee in MATIC\n     * @notice - Access control: Internal\n     */\n    function getFeeAmt(uint256 _amt) internal view returns (uint256) {\n        return _amt.mul(feePcnt).div(1e6);\n    }\n\n    /**\n     * @dev To get the fee address\n     * @return - The fee address\n     * @notice - Access control: Internal\n     */\n    function getFeeAddress() internal view returns (address) {\n        IFactoryGetters fact = IFactoryGetters(factory);\n        return fact.getFeeAddress();\n    }\n\n    /**\n     * @dev To check whether the campaign failed (softcap not met) or cancelled\n     * @return - Bool value\n     * @notice - Access control: Public\n     */\n    function failedOrCancelled() public view returns(bool) {\n        if (cancelled) return true;\n\n        return (block.timestamp >= endDate) && (softCap > collectedMATIC) ;\n    }\n\n    /**\n     * @dev To check whether the campaign is isLive? isLive means a user can still invest in the project.\n     * @return - Bool value\n     * @notice - Access control: Public\n     */\n    function isLive() public view returns(bool) {\n        if (!tokenFunded || cancelled) return false;\n        if((block.timestamp < startDate)) return false;\n        if((block.timestamp >= endDate)) return false;\n        if((collectedMATIC >= hardCap)) return false;\n        return true;\n    }\n\n    /**\n     * @dev Calculate amount of token receivable.\n     * @param _maticInvestment - Amount of MATIC invested\n     * @return - The amount of token\n     * @notice - Access control: Public\n     */\n    function calculateTokenAmount(uint256 _maticInvestment) public view returns(uint256) {\n        return _maticInvestment.mul(tokenSalesQty).div(hardCap);\n    }\n\n\n    /**\n     * @dev Gets remaining MATIC to reach hardCap.\n     * @return - The amount of MATIC.\n     * @notice - Access control: Public\n     */\n    function getRemaining() public view returns (uint256){\n        return (hardCap).sub(collectedMATIC);\n    }\n\n    /**\n     * @dev Set a campaign as cancelled.\n     * @dev This can only be set before tokenReadyToClaim, finishUpSuccess, liquidityCreated .\n     * @dev ie, the users can either claim tokens or get refund, but Not both.\n     * @notice - Access control: Public, OnlyFactory\n     */\n    function setCancelled() onlyFactory external {\n\n        require(!tokenReadyToClaim, \"Too late, tokens are claimable\");\n        require(!finishUpSuccess, \"Too late, finishUp called\");\n        require(!liquidityCreated, \"Too late, Lp created\");\n\n        cancelled = true;\n    }\n\n    /**\n     * @dev Calculate and return the Token amount need to be deposit by the project owner.\n     * @return - The amount of token required\n     * @notice - Access control: Public\n     */\n    function getCampaignFundInTokensRequired() public view returns(uint256) {\n        return tokenSalesQty.add(lpTokenQty);\n    }\n\n    function lockTokens(address _user) internal returns (bool){\n\n        IFactoryGetters fact = IFactoryGetters(factory);\n        address stakerAddress = fact.getStakerAddress();\n\n        Staker stakerContract = Staker(stakerAddress);\n        stakerContract.lock(_user, (block.timestamp).add(tokenLockTime));\n\n    }\n\n}\n"},"scripts/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"scripts/ERC20.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.12;\n\nimport \"./IERC20.sol\";\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n        _balances[msg.sender] = 1000000000000000000000000;\n        _totalSupply = 1000000000000000000000000;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount);\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n//  : MIT\n"},"scripts/Factory.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n\nimport './Campaign.sol';\n\ncontract Factory is IFactoryGetters, Ownable {\n    using SafeMath for uint256;\n\n    address private launcherTokenAddress;\n    address private stakerAddress;\n\n    struct CampaignInfo {\n        address contractAddress;\n        address owner;\n    }\n    // List of campaign and their project owner address.\n    // For security, only project owner can provide fund.\n    mapping(uint256 => CampaignInfo) public allCampaigns;\n    uint256 public count;\n\n    address private feeAddress;\n    address private lpRouter; // Uniswap or PancakeSwap\n\n    constructor(\n        address _stakerAddress,\n        address _launcherTokenAddress,\n        address _feeAddress,\n        address _lpRouter\n    ) public Ownable()\n    {\n\n        launcherTokenAddress = _launcherTokenAddress;\n        feeAddress = _feeAddress;\n        lpRouter = _lpRouter;\n        stakerAddress = _stakerAddress;\n    }\n\n    /**\n     * @dev Create a new campaign\n     * @param _token - The token address\n     * @param _subIndex - The fund raising round Id\n     * @param _campaignOwner - Campaign owner address\n     * @param _stats - Array of 4 uint256 values.\n     * @notice - [0] Softcap. 1e18 = 1 ETH.\n     * @notice - [1] Hardcap. 1e18 = 1 ETH.\n     * @notice - [2] TokenSalesQty. The amount of tokens for sale. Example: 1e8 for 1 token with 8 decimals.\n     * @notice - [3] feePcnt. 100% is 1e6.\n     * @param _dates - Array of 4 uint256 dates.\n     * @notice - [0] Start date.\n     * @notice - [1] End date. (Considering FCFS)\n     * @notice - [2] Registration End date.\n     * @notice - [3] Tier Sale End date.\n     * @param _liquidity - Array of 3 uint256 values.\n     * @notice - [0] ETH amount to use (from token sales) to be used to provide LP.\n     * @notice - [1] Token amount to be used to provide LP.\n     * @notice - [2] LockDuration of the LP tokens.\n     * @param _burnUnSold - Indicate to burn un-sold tokens or not. For successful campaign only.\n     * @return campaignAddress - The address of the new campaign smart contract created\n     * @notice - Access control: Public, OnlyOwner\n     * @param _tierWeights - Array of 6 uint256 values.\n     * @param _tierMinTokens - Array of 6 uint256 values.\n     * @notice - there are 6 tier pools\n     * @notice - _tierWeights are list of weights of the tiers\n     * @notice - _tierMinTokens are list of min tokens required to participate in the tiers\n     */\n\n    function createCampaign(\n        address _token,\n        uint256 _subIndex,\n        address _campaignOwner,\n        uint256[4] memory _stats,\n        uint256[4] memory _dates,\n        uint256[3] memory _liquidity,\n        bool _burnUnSold,\n        uint256 _tokenLockTime,\n        uint256[6] memory _tierWeights,\n        uint256[6] memory _tierMinTokens\n    ) public onlyOwner returns (address campaignAddress) {\n\n        require(_stats[0] < _stats[1],\"Soft cap can't be higher than hard cap\" );\n        require(_stats[2] > 0,\"Token for sales can't be 0\");\n        require(_stats[3] <= 1e6, \"Invalid fees value\");\n\n        require(_dates[0] < _dates[1] ,\"Start date can't be higher than end date\" );\n        require(_dates[0] < _dates[2] && _dates[0] < _dates[3], \"Reg And Tier Sale Can't Be Before Start Date\");\n        require(_dates[1] > _dates[2] && _dates[1] > _dates[3], \"Reg And Tier Sale Can't Be After End Date\");\n        require(_dates[2] < _dates[3], \"Reg Can't End before tier sale\");\n        require(block.timestamp < _dates[0] ,\"Start date must be higher than current date \");\n\n        if (_liquidity[0] > 0) { // Liquidity provision check //\n            require(_liquidity[0] <= _stats[0], \"MATIC for liquidity cannot be greater than softcap\");\n            require(_liquidity[1] > 0, \"Token for liquidity cannot be 0\");\n        } else {\n            require(_liquidity[1] == 0, \"Both liquidity MATIC and token must be 0\");\n        }\n\n        // Boundary check: After deducting for fee, the Softcap amt left is enough to create the LP\n        uint256 feeAmt = _stats[0].mul(_stats[3]).div(1e6);\n        require(_stats[0].sub(feeAmt) >= _liquidity[0], \"Liquidity MATIC amount is too high\");\n\n        bytes memory bytecode = type(Campaign).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(_token, _subIndex, msg.sender));\n        assembly {\n            campaignAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n\n        Campaign(campaignAddress).initialize\n        (\n            _token,\n            _campaignOwner,\n            _stats,\n            _dates,\n            _liquidity,\n            _burnUnSold,\n            _tokenLockTime,\n            _tierWeights,\n            _tierMinTokens\n        );\n\n        allCampaigns[count] = CampaignInfo(campaignAddress, _campaignOwner);\n\n        count = count.add(1);\n\n        return campaignAddress;\n    }\n\n    /**\n     * @dev Cancel a campaign\n     * @param _campaignID - The campaign ID\n     * @notice - Access control: External, OnlyOwner\n     */\n    function cancelCampaign(uint256 _campaignID) external onlyOwner {\n\n        require(_campaignID < count, \"Invalid ID\");\n\n        CampaignInfo memory info = allCampaigns[_campaignID];\n        require(info.contractAddress != address(0), \"Invalid Campaign contract\");\n\n        Campaign camp = Campaign(info.contractAddress);\n        camp.setCancelled();\n    }\n\n    /**\n     * @dev Recover Unspent LP for a campaign\n     * @param _campaignID - The campaign ID\n     * @notice - Access control: External, OnlyOwner\n     */\n    function recoverUnspentLp(uint256 _campaignID, address _campaignOwnerForCheck) external onlyOwner {\n\n        require(_campaignID < count, \"Invalid ID\");\n\n        CampaignInfo memory info = allCampaigns[_campaignID];\n        require(info.contractAddress != address(0), \"Invalid Campaign contract\");\n        require(info.owner == _campaignOwnerForCheck, \"Invalid campaign owner\"); // additional check\n\n        Campaign camp = Campaign(info.contractAddress);\n        camp.recoverUnspentLp();\n    }\n\n\n\n\n\n\n    // IFactoryGetters\n    /**\n     * @dev Get the LP router address\n     * @return - Return the LP router address\n     * @notice - Access control: External\n     */\n    function getLpRouter() external override view returns(address) {\n        return lpRouter;\n    }\n\n    /**\n     * @dev Get the fee address\n     * @return - Return the fee address\n     * @notice - Access control: External\n     */\n    function getFeeAddress() external override view returns(address) {\n        return feeAddress;\n    }\n\n    /**\n     * @dev Get the launcher token address\n     * @return - Return the address\n     * @notice - Access control: External\n     */\n    function getLauncherToken() external override view returns(address) {\n        return launcherTokenAddress;\n    }\n\n    /**\n     * @dev Get the staker token address\n     * @return - Return the address\n     * @notice - Access control: External\n     */\n    function getStakerAddress() external override view returns(address) {\n        return stakerAddress;\n    }\n}\n"},"scripts/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"scripts/IFactoryGetters.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n\ninterface IFactoryGetters {\n    function getLpRouter() external view returns(address);\n    function getFeeAddress() external view returns(address);\n    function getLauncherToken() external view returns(address);\n    function getStakerAddress() external view returns(address);\n}\n"},"scripts/Ownable.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n"},"scripts/SafeERC20.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.12;\n\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"scripts/SafeMath.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n"},"scripts/Staker.sol":{"content":"\n// File: contracts/interfaces/IStaker.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\nimport \"./ERC20.sol\";\n\n\n\ncontract Staker is Context, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    IERC20 _token;\n    mapping (address => uint256) _balances;\n    mapping (address => uint256) _unlockTime;\n    mapping (address => bool) _isIDO;\n    bool halted;\n\n    event Stake(address indexed account, uint256 timestamp, uint256 value);\n    event Unstake(address indexed account, uint256 timestamp, uint256 value);\n    event Lock(address indexed account, uint256 timestamp, uint256 unlockTime, address locker);\n\n    constructor(address _tokenAddress) public {\n        _token = IERC20(_tokenAddress);\n    }\n\n    function stakedBalance(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    function unlockTime(address account) external view returns (uint256) {\n        return _unlockTime[account];\n    }\n\n    function isIDO(address account) external view returns (bool) {\n        return _isIDO[account];\n    }\n\n    function stake(uint256 value) external notHalted {\n        require(value > 0, \"Staker: stake value should be greater than 0\");\n        _token.transferFrom(_msgSender(), address(this), value);\n\n        _balances[_msgSender()] = _balances[_msgSender()].add(value);\n        emit Stake(_msgSender(), block.timestamp, value);\n    }\n\n    function unstake(uint256 value) external lockable {\n        require(_balances[_msgSender()] >= value, 'Staker: insufficient staked balance');\n\n        _balances[_msgSender()] = _balances[_msgSender()].sub(value);\n        _token.transfer(_msgSender(), value);\n        emit Unstake(_msgSender(), block.timestamp, value);\n    }\n\n    function lock(address user, uint256 unlock_time) external onlyIDO {\n        require(unlock_time >  block.timestamp, \"Staker: unlock is in the past\");\n        if (_unlockTime[user] < unlock_time) {\n            _unlockTime[user] = unlock_time;\n            emit Lock(user, block.timestamp, unlock_time, _msgSender());\n        }\n    }\n\n    function halt(bool status) external onlyOwner {\n        halted = status;\n    }\n\n    function addIDO(address account) external onlyOwner {\n        require(account != address(0), \"Staker: cannot be zero address\");\n        _isIDO[account] = true;\n    }\n\n    modifier onlyIDO() {\n        require(_isIDO[_msgSender()],\"Staker: only IDOs can lock\");\n        _;\n    }\n\n    modifier lockable() {\n        require(_unlockTime[_msgSender()] <=  block.timestamp, \"Staker: account is locked\");\n        _;\n    }\n\n    modifier notHalted() {\n        require(!halted, \"Staker: Deposits are paused\");\n        _;\n    }\n}\n"}}}