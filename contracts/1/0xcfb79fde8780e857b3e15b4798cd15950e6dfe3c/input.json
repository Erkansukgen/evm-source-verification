{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/presale.sol":{"content":"\n// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address payable owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() {\n    owner = payable(msg.sender);\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address payable newOwner) onlyOwner public {\n    require(newOwner != address(0), \"Cannot transfer ownership to the 0 address\");\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ninterface TRYToken {\n    function setTrans100 (uint256 _trans100) external;\n    function setRewardPoolDivisor (uint256 _rdiv) external;    \n    function setRebalanceDivisor (uint256 _rebalanceDivisor) external; \n    function setRebalanceInterval (uint256 _interval) external;  \n    function setRebalanceRewardDivisior (uint256 _rDivisor) external;\n    function toggleFeeless (address _addr) external; \n    function setOracle (address _addr, bool _bool) external; \n    function setMinRebalanceAmount (uint256 amount_) external;\n    function setBurnTxFee (uint256 amount_) external;\n    function setAntiDumpFee (uint256 amount_) external;\n    function RebalanceLiquidity () external;\n    function addLPFarm(address _farm) external;\n}\n\ncontract TRYowner is Ownable{\n    \n    using SafeMath for uint256;\n    \n    \n    TRYToken public token;\n    \n    \n    constructor() \n    {\n        token = TRYToken(0xc12eCeE46ed65D970EE5C899FCC7AE133AfF9b03); \n        \n    }\n    \n    function setTrans100(uint256 _trans100) public onlyOwner {\n        require(_trans100 <= 100e18, \"Cannot set over 100 transactions\"); \n        token.setTrans100(_trans100);\n    }\n    \n    function setRewardPoolDivisor(uint256 _rdiv) public onlyOwner {\n        require(_rdiv >= 100, \"Cannot set over 1% RewardPoolDivisor\"); \n        token.setRewardPoolDivisor(_rdiv);\n    }\n    \n    function setRebalanceDivisor(uint256 _rebalanceDivisor) public onlyOwner {\n        require(_rebalanceDivisor >= 10, \"Cannot set rebalanceDivisor over 10%\");\n        require(_rebalanceDivisor <= 100, \"Cannot set rebalanceDivisor under 1%\");\n        token.setRebalanceDivisor(_rebalanceDivisor);\n    }\n    \n    function setRebalanceInterval(uint256 _interval) public onlyOwner{\n        require(_interval<= 7200, \"Cannot set over 2 hour interval\");  \n        require(_interval>= 3600, \"Cannot set under 1 hour interval\");\n        token.setRebalanceInterval(_interval);\n    }\n    \n    function setRebalanceRewardDivisior(uint256 _rDivisor) public onlyOwner {\n        require(_rDivisor <= 25, \"Cannot set rebalanceRewardDivisor under 4%\");\n        require(_rDivisor >= 10, \"Cannot set rebalanceRewardDivisor over 10%\");\n        token.setRebalanceRewardDivisior(_rDivisor);   \n    } \n\n    function toggleFeeless(address _addr) public onlyOwner {\n        token.toggleFeeless(_addr); \n    }\n    \n    function setOracle(address _addr, bool _bool) public onlyOwner {  \n        token.setOracle(_addr, _bool);\n    } \n    \n    function setMinRebalanceAmount(uint256 amount_) public onlyOwner {\n        require(amount_ <= 100e18, \"Cannot set over 100 TRY tokens\");\n        require(amount_ >= 20e18, \"Cannot set under 20 TRY tokens\");\n        token.setMinRebalanceAmount(amount_);\n    }\n    \n    function setBurnTxFee(uint256 amount_) public onlyOwner {\n        require(amount_ >= 100, \"Cannot set over 1% burnTxFee\"); \n        token.setBurnTxFee(amount_);\n    }\n    \n    function setAntiDumpFee(uint256 amount_) public onlyOwner {\n        require(amount_ >= 10, \"Cannot set over 10% antiDumpFee\"); \n        require(amount_ <= 100, \"Cannot set under 1% antiDumpFee\");\n        token.setAntiDumpFee(amount_);\n    }\n    \n    function RebalanceLiquidity() public {\n        token.RebalanceLiquidity();\n    }\n    \n    function addLPFarm(address _farm) public onlyOwner{\n        require(_farm == address(0), \"LPfarm already set\");\n        token.addLPFarm(_farm);\n    }\n    \n}\n    \n    \n"}}}