{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"browser/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"browser/EVT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport './SafeMath.sol';\nimport './Ownable.sol';\n\ncontract EVT is Ownable {\n    using SafeMath for uint256;\n\n    /// @notice EIP-20 token name for this token\n    string public constant name = 'Evereth';\n\n    /// @notice EIP-20 token symbol for this token\n    string public constant symbol = 'EVT';\n\n    /// @notice EIP-20 token decimals for this token\n    uint8 public constant decimals = 18;\n\n    /// @notice Total number of tokens in circulation\n    uint256 public totalSupply = 0;\n\n    uint256 public maxSupply = 2800000 ether; // 2.8 million EVT\n\n    mapping(address => mapping(address => uint256)) internal allowances;\n\n    mapping(address => uint256) internal balances;\n\n    /// @notice A record of each accounts delegate\n    mapping(address => address) public delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint256 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint256) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\n        'EIP712Domain(string name,address verifyingContract)'\n    );\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\n        'Delegation(address delegatee,uint256 nonce,uint256 expiry)'\n    );\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint256) public nonces;\n\n    /// @notice Contracts allowed to mint new tokens, can only be set by the governance\n    mapping(address => bool) public minters;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(\n        address indexed delegate,\n        uint256 previousBalance,\n        uint256 newBalance\n    );\n\n    /// @notice The standard EIP-20 transfer event\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @notice The standard EIP-20 approval event\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address _to, uint256 _amount) internal {\n        require(_to != address(0), 'EVT::_mint: mint to the zero address');\n\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(address(0), _to, _amount);\n\n        _moveDelegates(address(0), delegates[_to], _amount);\n    }\n\n    // Only owner (EVTMaster Contract)\n    function mint(address _to, uint256 amount) public onlyOwner returns (bool) {\n        require(totalSupply.add(amount, 'EVT::mint: mint amount overflows') <= maxSupply, 'EVT::mint: max supply exceeded');\n        _mint(_to, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */\n    function allowance(address account, address spender)\n        external\n        view\n        returns (uint256)\n    {\n        return allowances[account][spender];\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.trxeum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whtrx or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount)\n        external\n        returns (bool)\n    {\n        allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the number of tokens held by the `account`\n     * @param account The address of the account to get the balance of\n     * @return The number of tokens held\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return balances[account];\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whtrx or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 amount) external returns (bool) {\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whtrx or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool) {\n        address spender = msg.sender;\n        uint256 spenderAllowance = allowances[src][spender];\n\n        if (spender != src && spenderAllowance != uint256(-1)) {\n            uint256 newAllowance = spenderAllowance.sub(amount);\n            allowances[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), address(this))\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked('\\x19\\x01', domainSeparator, structHash)\n        );\n        address signatory = ecrecover(digest, v, r, s);\n        require(\n            signatory != address(0),\n            'EVT::delegateBySig: invalid signature'\n        );\n        require(\n            nonce == nonces[signatory]++,\n            'EVT::delegateBySig: invalid nonce'\n        );\n        require(block.timestamp <= expiry, 'EVT::delegateBySig: signature expired');\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint256) {\n        uint256 nCheckpoints = numCheckpoints[account];\n        return\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber)\n        public\n        view\n        returns (uint256)\n    {\n        require(\n            blockNumber < block.number,\n            'EVT::getPriorVotes: not yet determined'\n        );\n\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint256 delegatorBalance = balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _transferTokens(\n        address src,\n        address dst,\n        uint256 amount\n    ) internal {\n        require(\n            src != address(0),\n            'EVT::_transferTokens: cannot transfer from the zero address'\n        );\n        require(\n            dst != address(0),\n            'EVT::_transferTokens: cannot transfer to the zero address'\n        );\n\n        balances[src] = balances[src].sub(amount, 'EVT::_transferTokens: transfer amount exceeds balance');\n        balances[dst] = balances[dst].add(amount, 'EVT::_transferTokens: transfer amount overflows');\n        emit Transfer(src, dst, amount);\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint256 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\n                    : 0;\n                uint256 srcRepNew = srcRepOld.add(amount, 'EVT::_moveVotes: vote amount underflows');\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint256 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\n                    : 0;\n                uint256 dstRepNew = dstRepOld.add(amount, 'EVT::_moveVotes: vote amount overflows');\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint256 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        uint256 blockNumber = block.number;\n\n        if (\n            nCheckpoints > 0 &&\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n        ) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\n                blockNumber,\n                newVotes\n            );\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n}\n"},"browser/EVTLPMaster.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport './SafeMath.sol';\nimport './Ownable.sol';\nimport './IERC20.sol';\nimport './SafeERC20.sol';\nimport './Address.sol';\nimport './EVTMaster.sol';\n\ninterface IMigratorChef {\n    function migrate(IERC20 token) external returns (IERC20);\n}\n\ncontract EverETHLPMaster is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n    \n    // The EVT token and staking master!\n    EVT public evt;\n    EVTMaster public evtMaster;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;     // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of EVTs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accEVTPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accEVTPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken;          // Address of LP token contract.\n        uint256 rewardEndBlock;  // How much EVT left in the pool\n        uint256 allocPoint;      // How many allocation points assigned to this pool. EVTs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that EVTs distribution occurs.\n        uint256 accEVTPerShare;  // Accumulated EVTs per share, times 1e12. See below.\n    }\n\n    // Block number when bonus EVT period ends.\n    uint256 public bonusEndBlock;\n    // EVT tokens created per block.\n    uint256 public rewardPerBlock;\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n    IMigratorChef public migrator;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when EVT mining starts.\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(EVTMaster _evtMaster) {\n        evtMaster = _evtMaster;\n        evt = evtMaster.rewardToken();\n        startBlock = block.number;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(uint256 _allocPoint, IERC20 _lpToken, uint256 _rewardEndBlock, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            allocPoint: _allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accEVTPerShare: 0,\n            rewardEndBlock: _rewardEndBlock\n        }));\n    }\n\n    // Update the given pool's EVT allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Update the given pool's EVT allocation point. Can only be called by the owner.\n    function setRewardPerBlock(uint256 _amount) public onlyOwner {\n        rewardPerBlock = _amount;\n    }\n\n    // Set the migrator contract. Can only be called by the owner.\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\n        migrator = _migrator;\n    }\n\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\n    function migrate(uint256 _pid) public {\n        require(address(migrator) != address(0), \"migrate: no migrator\");\n        PoolInfo storage pool = poolInfo[_pid];\n        IERC20 lpToken = pool.lpToken;\n        uint256 bal = lpToken.balanceOf(address(this));\n        lpToken.safeApprove(address(migrator), bal);\n        IERC20 newLpToken = migrator.migrate(lpToken);\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\n        pool.lpToken = newLpToken;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _pid) public view returns (uint256) {\n        uint256 _rewardEndBlock = poolInfo[_pid].rewardEndBlock;\n        if (_rewardEndBlock <= _from) {\n            return 0;\n        }\n        if (_rewardEndBlock <= _to) {\n            return _rewardEndBlock.sub(_from);\n        }\n        return _to.sub(_from);\n    }\n\n    // View function to see pending EVTs on frontend.\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accEVTPerShare = pool.accEVTPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, _pid);\n            uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accEVTPerShare = accEVTPerShare.add(reward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accEVTPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, _pid);\n        uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        evtMaster.mintFromLP(reward);\n        pool.accEVTPerShare = pool.accEVTPerShare.add(reward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for EVT allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accEVTPerShare).div(1e12).sub(user.rewardDebt);\n            if(pending > 0) {\n                safeEVTTransfer(msg.sender, pending);\n            }\n        }\n        if(_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accEVTPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accEVTPerShare).div(1e12).sub(user.rewardDebt);\n        if(pending > 0) {\n            safeEVTTransfer(msg.sender, pending);\n        }\n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accEVTPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Safe evt transfer function, just in case if rounding error causes pool to not have enough EVTs.\n    function safeEVTTransfer(address _to, uint256 _amount) internal {\n        uint256 evtBal = evt.balanceOf(address(this));\n        if (_amount > evtBal) {\n            evt.transfer(_to, evtBal);\n        } else {\n            evt.transfer(_to, _amount);\n        }\n    }\n}"},"browser/EVTMaster.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./EVT.sol\";\nimport \"./Address.sol\";\n\ncontract EVTMaster is Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    EVT public rewardToken;\n    address public lpMiningContract;\n\n    uint256 private _lastMintTime;\n    uint256 private _totalStaked = 0;\n    uint256 private _platformFees = 0;\n    uint256 private _mintedCurrentLevel = 0;\n    uint256 private _mintedByLP = 0;\n    uint256 private _mintedByStaking = 0;\n    uint256 private _currentLevel = 0;\n\n    uint256 constant MIN_INVEST = 10000000000000000;\n    uint256 constant REWARD_INTERVAL = 1 days;\n\n    uint256 constant REF_REWARD_PERCENT = 10;\n\n    uint256 constant UNSTAKE_FEE = 10;\n\n    uint256 constant MAX_MINT_BY_LP = 800000 ether;\n    uint256 constant MAX_MINT_BY_STAKING = 2000000 ether;\n\n    uint256[8] public levelChangeTime;\n\n    uint256[] public LEVEL_LIMIT = [\n        700000 ether,\n        600000 ether,\n        500000 ether,\n        400000 ether,\n        300000 ether,\n        200000 ether,\n        100000 ether,\n        0\n    ];\n\n    uint256[] public LEVEL_YIELD = [\n        93,\n        78,\n        64,\n        50,\n        37,\n        24,\n        11,\n        0\n    ];\n\n    // Info of each user.\n    struct User {\n        uint256 investment;\n        uint256 lastClaim;\n        address referrer;\n        uint256 referralReward;\n        uint256 totalReferrals;\n        address addr;\n        bool exists;\n    }\n\n    mapping(address => User) private _users;\n\n    event Operation(\n        string _type,\n        address indexed _user,\n        address indexed _referrer,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event LevelChanged(uint256 newLevel, uint256 timestamp);\n    event NewReferral(\n        address indexed _user,\n        address referral,\n        uint256 timestamp\n    );\n    event ReferralReward(\n        address indexed _referrer,\n        address indexed _user,\n        uint256 amount,\n        uint256 timestamp\n    );\n    event ClaimStaked(\n        address indexed _user,\n        address indexed _referrer,\n        uint256 amount,\n        uint256 timestamp\n    );\n    event ClaimReferral(address indexed _user, uint256 _amount);\n\n    constructor(EVT _rewardToken) {\n        User storage user = _users[msg.sender];\n        user.exists = true;\n        user.addr = msg.sender;\n        user.totalReferrals = 1;\n        user.referrer = msg.sender;\n        user.lastClaim = block.timestamp;\n\n        _lastMintTime = block.timestamp;\n        rewardToken = _rewardToken;\n    }\n\n    function setLPContract(address _address) public onlyOwner {\n        lpMiningContract = _address;\n    }\n\n    receive() external payable {\n        if (msg.sender == owner() || msg.value < MIN_INVEST) {\n            _refund();\n        } else {\n            _stake(msg.sender, address(0x0), msg.value);\n        }\n    }\n\n    function stake() public payable {\n        stake(address(0x0));\n    }\n\n    function stake(address _referrer) public payable {\n        if (msg.sender == owner() || msg.value < MIN_INVEST) {\n            _refund();\n        } else {\n            _stake(msg.sender, _referrer, msg.value);\n        }\n    }\n\n    function _refund() private {\n        _mintTokens();\n        safeSendValue(msg.sender, msg.value);\n    }\n\n    function _stake(\n        address _address,\n        address _referrer,\n        uint256 _amount\n    ) private {\n        require(_amount >= MIN_INVEST, 'Too low value');\n        require(_address != owner(), \"Owner can't stake\");\n        _mintTokens();\n\n        address referrer = _referrer == address(0x0) ? owner() : _referrer;\n        if (!_users[referrer].exists) {\n            referrer = owner();\n        }\n\n        User storage user = _users[_address];\n        if (!user.exists) {\n            user.exists = true;\n            user.addr = _address;\n            user.referrer = referrer;\n            user.investment = _amount;\n            user.lastClaim = block.timestamp;\n\n            _users[referrer].totalReferrals = _users[referrer]\n                .totalReferrals\n                .add(1);\n\n            emit NewReferral(referrer, user.addr, block.timestamp);\n        } else {\n            _claimStaked(_address);\n            user.investment = user.investment.add(_amount);\n        }\n        _totalStaked = _totalStaked.add(_amount);\n        _platformFees = _platformFees.add(_amount.mul(UNSTAKE_FEE));\n        emit Operation('stake', user.addr, user.referrer, _amount, block.timestamp);\n    }\n\n    function unstake(uint256 _amount) public {\n        require(msg.sender != owner(), \"Owner can't unstake\");\n        _mintTokens();\n\n        User storage user = _users[msg.sender];\n\n        require(user.exists, 'Invalid User');\n\n        _claimStaked(msg.sender);\n\n        emit Operation('unstake', user.addr, user.referrer, _amount, block.timestamp);\n\n        _totalStaked = _totalStaked.sub(_amount);\n        user.investment = user.investment.sub(\n            _amount,\n            'EVTMaster::unstake: Insufficient funds'\n        );\n        _amount = _amount.mul(uint256(100).sub(UNSTAKE_FEE)).div(100);\n\n        safeSendValue(msg.sender, _amount);\n    }\n\n    function unstake() public {\n        unstake(_users[msg.sender].investment);\n    }\n\n    function claimStaked() public {\n        _mintTokens();\n        _claimStaked(msg.sender);\n    }\n\n    function claimReferralReward() public {\n        _mintTokens();\n        User storage user = _users[msg.sender];\n        uint256 refReward = user.referralReward;\n        user.referralReward = 0;\n        safeTokenTransfer(user.addr, refReward);\n        emit ClaimReferral(user.addr, refReward);\n    }\n\n    function _mintTokens() internal returns (uint256 mintedAmount) {\n        uint256 timePassed = block.timestamp.sub(_lastMintTime);\n        if (timePassed == 0) {\n            return 0;\n        }\n        if (_totalStaked != 0) {\n            uint256 toMint = _totalStaked\n                .mul(timePassed)\n                .div(REWARD_INTERVAL)\n                .mul(LEVEL_YIELD[_currentLevel])\n                .div(100);\n            // Add ref percent\n            toMint = toMint.add(toMint.mul(REF_REWARD_PERCENT).div(100));\n            if (_mintedByStaking.add(toMint) > MAX_MINT_BY_STAKING) {\n                toMint = MAX_MINT_BY_STAKING.sub(_mintedByStaking);\n            }\n            mintedAmount = safeMint(address(this), toMint);\n            _mintedByStaking = _mintedByStaking.add(mintedAmount);\n        }\n        _lastMintTime = block.timestamp;\n    }\n\n    function _claimStaked(address _address) internal {\n        require(_address != owner(), \"Owner can't unstake\");\n        User storage user = _users[_address];\n\n        require(user.exists, 'Invalid User');\n\n        uint256 reward = pendingReward(msg.sender);\n\n        user.lastClaim = block.timestamp;\n\n        uint256 referralReward = reward.mul(REF_REWARD_PERCENT).div(100);\n\n        safeTokenTransfer(user.addr, reward);\n\n        _users[user.referrer].referralReward = _users[user.referrer]\n            .referralReward\n            .add(referralReward);\n\n        emit ClaimStaked(user.addr, user.referrer, reward, block.timestamp);\n        emit ReferralReward(user.referrer, user.referrer, referralReward, block.timestamp);\n    }\n\n    function pendingReward() public view returns (uint256) {\n        return pendingReward(msg.sender);\n    }\n\n    function pendingReward(address _address)\n        public\n        view\n        returns (uint256 reward)\n    {\n        User memory user = _users[_address];\n        uint256 lastClaim = user.lastClaim;\n        for (uint256 lvl = 0; lvl <= _currentLevel; ++lvl) {\n            uint256 time = (levelChangeTime[lvl] == 0)\n                ? block.timestamp\n                : levelChangeTime[lvl];\n            if (_users[_address].lastClaim >= time) {\n                continue;\n            }\n            reward = reward.add(\n                user\n                    .investment\n                    .mul(time.sub(lastClaim))\n                    .div(REWARD_INTERVAL)\n                    .mul(LEVEL_YIELD[lvl])\n                    .div(100)\n            );\n            if (time == block.timestamp) {\n                break;\n            }\n            lastClaim = time;\n        }\n    }\n\n    // Function for owner to withdraw staking fees\n    function withdrawFees() public onlyOwner returns (uint256) {\n        return withdrawFees(payable(owner()), _platformFees);\n    }\n\n    // Function for owner to withdraw staking fees\n    function withdrawFees(address payable _address, uint256 _amount)\n        public\n        onlyOwner\n        returns (uint256)\n    {\n        _platformFees = _platformFees.sub(_amount, 'Not enough fees!');\n        return safeSendValue(_address, _amount);\n    }\n\n    // View function in order to optimize web UI\n    function stats() view public returns (\n        uint256 currentLevel,\n        uint256 currentLevelYield,\n        uint256 currentLevelSupply,\n        uint256 mintedCurrentLevel,\n        uint256 totalEVT,\n        uint256 totalStaked,\n        uint256 mintedByStaking,\n        uint256 mintedByLP\n    ) {\n        currentLevel = _currentLevel;\n        currentLevelYield = LEVEL_YIELD[_currentLevel];\n        currentLevelSupply = LEVEL_LIMIT[_currentLevel];\n        mintedCurrentLevel = _mintedCurrentLevel;\n        mintedByStaking = _mintedByStaking;\n        mintedByLP = _mintedByLP;\n        totalStaked = _totalStaked;\n        totalEVT = rewardToken.totalSupply();\n    }\n\n    // View function in order to optimize web UI\n    function userInfo() view public returns (\n        uint256, uint256, address, uint256, uint256, uint256, uint256, uint256\n    ) {\n        return userInfo(msg.sender);\n    }\n\n    // View function in order to optimize web UI\n    function userInfo(address _address) view public returns (\n        uint256 investment,\n        uint256 lastClaim,\n        address referrer,\n        uint256 referralReward,\n        uint256 totalReferrals,\n        uint256 pendingRewards,\n        uint256 tokenBalance,\n        uint256 balance\n    ) {\n        investment = _users[_address].investment;\n        lastClaim = _users[_address].lastClaim;\n        referrer = _users[_address].referrer;\n        referralReward = _users[_address].referralReward;\n        totalReferrals = _users[_address].totalReferrals;\n        pendingRewards = pendingReward(_address);\n        tokenBalance = rewardToken.balanceOf(_address);\n        balance = _address.balance;\n    }\n\n    // Don't care about rewards and stats (emergency only, in case if unexpected error occurs)\n    function emergencyWithdraw(address payable _user, uint256 _amount) public returns (uint256) {\n        _users[msg.sender].investment = _users[_user].investment.sub(_amount);\n        _totalStaked = _totalStaked.sub(_amount);\n\n        return safeSendValue(_user, _amount.mul(uint256(100).sub(UNSTAKE_FEE)).div(100));\n    }\n\n    // Don't care about rewards and stats (emergency only, in case if unexpected error occurs)\n    function emergencyWithdraw(address payable _user) public returns (uint256) {\n        return emergencyWithdraw(_user, _users[_user].investment);\n    }\n\n    // Mint EVT for LP stakers\n    // This is done through EVTMaster to keep traking minting levels\n    function mintFromLP(uint256 _amount) public returns (uint256 mintedAmount) {\n        require(msg.sender == lpMiningContract, 'Not the LP Master');\n        _mintTokens();\n        if (_amount >= MAX_MINT_BY_LP.sub(_mintedByLP)) {\n            _amount = MAX_MINT_BY_LP.sub(_mintedByLP);\n        }\n        mintedAmount = safeMint(msg.sender, _amount);\n        _mintedByLP = _mintedByLP.add(mintedAmount);\n    }\n\n    // Safe token transfer function to avoid rounding errors to cause ETH being locked\n    function safeTokenTransfer(address _to, uint256 _amount) internal returns (uint256) {\n        uint256 balance = rewardToken.balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        rewardToken.transfer(_to, _amount);\n        return _amount;\n    }\n\n    // Safe token mint function to avoid rounding and max supply errors to cause ETH being locked\n    function safeMint(address _to, uint256 _amount) internal returns (uint256) {\n        uint256 canBeMinted = rewardToken.maxSupply().sub(rewardToken.totalSupply());\n        if (_amount > canBeMinted) {\n            _amount = canBeMinted;\n        }\n\n        _mintedCurrentLevel = _mintedCurrentLevel.add(_amount);\n\n        rewardToken.mint(_to, _amount);\n\n        if (\n            _mintedCurrentLevel >= LEVEL_LIMIT[_currentLevel] &&\n            _currentLevel < (LEVEL_LIMIT.length - 1)\n        ) {\n            levelChangeTime[_currentLevel] = block.timestamp;\n            _currentLevel++;\n            _mintedCurrentLevel = 0;\n            emit LevelChanged(_currentLevel, block.timestamp);\n        }\n\n        return _amount;\n    }\n\n    function safeSendValue(address payable _to, uint256 _amount) internal returns (uint256) {\n        if (_amount > address(this).balance) {\n            _amount = address(this).balance;\n        }\n        _to.transfer(_amount);\n        return _amount;\n    }\n}\n"},"browser/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"browser/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"browser/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"browser/SafeMath.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.5;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return add(a, b, \"SafeMath: addition overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}}