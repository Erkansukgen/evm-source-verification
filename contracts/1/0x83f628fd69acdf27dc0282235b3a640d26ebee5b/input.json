{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"hpnew.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"err0x\");\n        _;\n    }\n\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"err1x\");\n        _owner = newOwner;\n    }\n}\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\ncontract Honeypot {\n    using SafeMath for uint256;\n    \n    uint256 constant public MAX_INT = type(uint256).max;\n    // BSC - 0x10ED43C718714eb63d5aA57B78B54704E256024E\n    // ETH mainnet - 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    \n    //address constant uniswapRouterAddress = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    \n    //address constant busdAddress = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n\n    bool receivingEth = true;\n    \n    uint256 busdBalance;\n\n    constructor () {\n    }\n\n    function buyShitCoinToken(IUniswapV2Router02 uniswapRouter, address tokenAddress, uint256 value, address pairtype) internal returns (uint256, uint256) {\n        address[] memory path = new address[](2);\n        path[0] = pairtype;\n        path[1] = tokenAddress;\n        \n        uint[] memory amountsBuy = uniswapRouter.getAmountsOut(value, path);\n        uint256 receiveTokensEstimate = amountsBuy[1];\n        \n        //uint256 gasStart = gasleft();\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            value,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n        //uint256 gasUsed = gasStart - gasleft();\n        \n        IERC20 token = IERC20(tokenAddress);\n        uint256 actualTokensReceived = token.balanceOf(address(this));\n        \n        return (receiveTokensEstimate, actualTokensReceived);\n    }\n    \n    function buyShitCoinETH(IUniswapV2Router02 uniswapRouter, address tokenAddress, uint256 value) internal returns (uint256, uint256) {\n        address[] memory path = new address[](2);\n        path[0] = uniswapRouter.WETH();\n        path[1] = tokenAddress;\n        \n        uint[] memory amountsBuy = uniswapRouter.getAmountsOut(value, path);\n        uint256 receiveTokensEstimate = amountsBuy[1];\n        \n        //uint256 gasStart = gasleft();\n        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: value}(\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n        //uint256 gasUsed = gasStart - gasleft();\n        \n        IERC20 token = IERC20(tokenAddress);\n        uint256 actualTokensReceived = token.balanceOf(address(this));\n        \n        return (receiveTokensEstimate, actualTokensReceived);\n    }\n    \n    function approveShitCoin(address tokenAddress, uint256 tokens, address router) internal {\n        IERC20 token = IERC20(tokenAddress);\n        try token.approve(router, MAX_INT) {} catch {\n            token.approve(router, tokens);\n        }\n    }\n    \n    function sellShitCoinToken(IUniswapV2Router02 uniswapRouter, address tokenAddress, uint256 tokens, address pairtype) internal returns (uint256, uint256) {\n        address[] memory sellPath = new address[](2);\n        sellPath[0] = tokenAddress;\n        sellPath[1] = pairtype;\n        \n        uint[] memory amountsSell = uniswapRouter.getAmountsOut(tokens, sellPath);\n        uint256 receiveETHEstimate = amountsSell[1];\n        \n        IERC20 busdToken = IERC20(pairtype);\n        \n        receivingEth = true;\n        uint256 initialBalance = busdToken.balanceOf(address(this));\n        //uint256 gasStart = gasleft();\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokens,\n            0,\n            sellPath,\n            address(this),\n            block.timestamp\n        );\n        //uint256 gasUsed = gasStart - gasleft();\n        receivingEth = false;\n        \n        uint256 actualETHReceived = busdToken.balanceOf(address(this)) - initialBalance;\n        return (receiveETHEstimate, actualETHReceived);\n    }\n    \n    function sellShitCoinETH(IUniswapV2Router02 uniswapRouter, address tokenAddress, uint256 tokens) internal returns (uint256, uint256) {\n        address[] memory sellPath = new address[](2);\n        sellPath[0] = tokenAddress;\n        sellPath[1] = uniswapRouter.WETH();\n        \n        uint[] memory amountsSell = uniswapRouter.getAmountsOut(tokens, sellPath);\n        uint256 receiveETHEstimate = amountsSell[1];\n        \n        //IERC20 busdToken = IERC20(pairtype);\n        \n        receivingEth = true;\n        uint256 initialBalance = address(this).balance;\n        //uint256 gasStart = gasleft();\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokens,\n            0,\n            sellPath,\n            address(this),\n            block.timestamp\n        );\n        //uint256 gasUsed = gasStart - gasleft();\n        //receivingEth = false;\n        \n        uint256 actualETHReceived = address(this).balance - initialBalance;\n        return (receiveETHEstimate, actualETHReceived);\n    }\n    \n    function buyBUSD(IUniswapV2Router02 uniswapRouter, uint256 value, address pairtype, address router) internal returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = uniswapRouter.WETH();\n        path[1] = pairtype;\n\n        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: value}(\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n        \n        IERC20 token = IERC20(pairtype);\n        token.approve(router, MAX_INT);\n        uint256 actualTokensReceived = token.balanceOf(address(this));\n        \n        return actualTokensReceived;\n    }\n\n    function isHoneypotETH(address tokenAddress, address router) external payable returns (uint256, uint256, uint256, uint256) {\n        \n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(router);\n        busdBalance = msg.value;\n        \n        uint256 receiveTokensEstimate;\n        uint256 actualTokensReceived;\n        //uint256 buyGasUsed;\n        {\n        (receiveTokensEstimate, actualTokensReceived) = buyShitCoinETH(uniswapRouter, tokenAddress, busdBalance);\n        }\n    \n        approveShitCoin(tokenAddress, actualTokensReceived, router);\n        \n        uint256 receiveETHEstimate;\n        uint256 actualETHReceived;\n        //uint256 sellGasUsed;\n        {\n            (receiveETHEstimate, actualETHReceived) = sellShitCoinETH(uniswapRouter, tokenAddress, actualTokensReceived);\n        }\n        \n        \n        return (receiveTokensEstimate, actualTokensReceived, receiveETHEstimate, actualETHReceived);\n    }\n    \n    function isHoneypotETHBuyOnly(address tokenAddress, address router) external payable returns (uint256, uint256) {\n        \n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(router);\n        busdBalance = msg.value;\n        \n        uint256 receiveTokensEstimate;\n        uint256 actualTokensReceived;\n        //uint256 buyGasUsed;\n        {\n        (receiveTokensEstimate, actualTokensReceived) = buyShitCoinETH(uniswapRouter, tokenAddress, busdBalance);\n        }\n    \n        //approveShitCoin(tokenAddress, actualTokensReceived, router);\n        \n        //uint256 receiveETHEstimate;\n        //uint256 actualETHReceived;\n        //uint256 sellGasUsed;\n        //{\n        //    (receiveETHEstimate, actualETHReceived) = sellShitCoinETH(uniswapRouter, tokenAddress, actualTokensReceived);\n        //}\n        \n        \n        return (receiveTokensEstimate, actualTokensReceived);\n    }\n    \n    function isHoneypotToken(address tokenAddress, address router, address pairtype) external payable returns (uint256, uint256, uint256, uint256) {\n        \n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(router);\n        busdBalance = buyBUSD(uniswapRouter, msg.value, pairtype, router);\n        \n        uint256 receiveTokensEstimate;\n        uint256 actualTokensReceived;\n        //uint256 buyGasUsed;\n        {\n        (receiveTokensEstimate, actualTokensReceived) = buyShitCoinToken(uniswapRouter, tokenAddress, busdBalance, pairtype);\n        }\n    \n        approveShitCoin(tokenAddress, actualTokensReceived, router);\n        \n        uint256 receiveETHEstimate;\n        uint256 actualETHReceived;\n        //uint256 sellGasUsed;\n        {\n            (receiveETHEstimate, actualETHReceived) = sellShitCoinToken(uniswapRouter, tokenAddress, actualTokensReceived, pairtype);\n        }\n        \n        \n        return (receiveTokensEstimate, actualTokensReceived, receiveETHEstimate, actualETHReceived);\n    }\n    \n    function isHoneypotTokenBuyOnly(address tokenAddress, address router, address pairtype) external payable returns (uint256, uint256) {\n        \n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(router);\n        busdBalance = buyBUSD(uniswapRouter, msg.value, pairtype, router);\n        \n        uint256 receiveTokensEstimate;\n        uint256 actualTokensReceived;\n        //uint256 buyGasUsed;\n        {\n        (receiveTokensEstimate, actualTokensReceived) = buyShitCoinToken(uniswapRouter, tokenAddress, busdBalance, pairtype);\n        }\n    \n        //approveShitCoin(tokenAddress, actualTokensReceived, router);\n        \n        //uint256 receiveETHEstimate;\n        //uint256 actualETHReceived;\n        //uint256 sellGasUsed;\n        //{\n        //    (receiveETHEstimate, actualETHReceived) = sellShitCoinToken(uniswapRouter, tokenAddress, actualTokensReceived, pairtype);\n        //}\n        \n        \n        return (receiveTokensEstimate, actualTokensReceived);\n    }\n    \n    receive() external payable {\n        require(receivingEth, \"why send bnbs?\");\n    }\n\n}"}}}