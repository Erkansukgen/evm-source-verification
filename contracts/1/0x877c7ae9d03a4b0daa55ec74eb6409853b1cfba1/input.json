{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ITorro.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity 0.6.6;\r\n\r\n/// @title Interface for ERC-20 Torro governing token.\r\n/// @notice ERC-20 token.\r\n/// @author ORayskiy - @robitnik_TorroDao\r\ninterface ITorro {\r\n\r\n  // Initializer.\r\n\r\n  /// @notice Initializes governing token.\r\n  /// @param dao_ address of cloned DAO.\r\n  /// @param factory_ address of factory.\r\n  /// @param supply_ total supply of tokens.\r\n  function initializeCustom(address dao_, address factory_, uint256 supply_) external;\r\n\r\n  // Public calls.\r\n\r\n  /// @notice Token's name.\r\n  /// @return string name of the token.\r\n  function name() external view returns (string memory);\r\n\r\n  /// @notice Token's symbol.\r\n  /// @return string symbol of the token.\r\n  function symbol() external view returns (string memory);\r\n\r\n  /// @notice Token's decimals.\r\n  /// @return uint8 demials of the token.\r\n  function decimals() external pure returns (uint8);\r\n\r\n  /// @notice Token's total supply.\r\n  /// @return uint256 total supply of the token.\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /// @notice Count of token holders.\r\n  /// @return uint256 number of token holders.\r\n  function holdersCount() external view returns (uint256);\r\n\r\n  /// @notice All token holders.\r\n  /// @return array of addresses of token holders.\r\n  function holders() external view returns (address[] memory);\r\n\r\n  /// @notice Available balance for address.\r\n  /// @param sender_ address to get available balance for.\r\n  /// @return uint256 amount of tokens available for given address.\r\n  function balanceOf(address sender_) external view returns (uint256);\r\n\r\n  /// @notice Staked balance for address.\r\n  /// @param sender_ address to get staked balance for.\r\n  /// @return uint256 amount of staked tokens for given address.\r\n  function stakedOf(address sender_) external view returns (uint256);\r\n\r\n  /// @notice Total balance for address = available + staked.\r\n  /// @param sender_ address to get total balance for.\r\n  /// @return uint256 total amount of tokens for given address.\r\n  function totalOf(address sender_) external view returns (uint256);\r\n\r\n  /// @notice Locked staked balance for address\r\n  /// @param sender_ address to get locked staked balance for.\r\n  /// @return uint256 amount of locked staked tokens for given address.\r\n  function lockedOf(address sender_) external view returns (uint256);\r\n\r\n  /// @notice Spending allowance.\r\n  /// @param owner_ token owner address.\r\n  /// @param spender_ token spender address.\r\n  /// @return uint256 amount of owner's tokens that spender can use.\r\n  function allowance(address owner_, address spender_) external view returns (uint256);\r\n\r\n  /// @notice Unstaked supply of token.\r\n  /// @return uint256 amount of tokens in circulation that are not staked.\r\n  function unstakedSupply() external view returns (uint256);\r\n\r\n  /// @notice Staked supply of token.\r\n  /// @return uint256 amount of tokens in circulation that are staked.\r\n  function stakedSupply() external view returns (uint256);\r\n\r\n  // Public transactions.\r\n\r\n  /// @notice Transfer tokens to recipient.\r\n  /// @param recipient_ address of tokens' recipient.\r\n  /// @param amount_ amount of tokens to transfer.\r\n  /// @return bool true if successful.\r\n  function transfer(address recipient_, uint256 amount_) external returns (bool);\r\n\r\n  /// @notice Approve spender to spend an allowance.\r\n  /// @param spender_ address that will be allowed to spend specified amount of tokens.\r\n  /// @param amount_ amount of tokens that spender can spend.\r\n  /// @return bool true if successful.\r\n  function approve(address spender_, uint256 amount_) external returns (bool);\r\n\r\n  /// @notice Approves DAO to spend tokens.\r\n  /// @param owner_ address whose tokens DAO can spend.\r\n  /// @param amount_ amount of tokens that DAO can spend.\r\n  /// @return bool true if successful.\r\n  function approveDao(address owner_, uint256 amount_) external returns (bool);\r\n\r\n  /// @notice Locks account's staked tokens.\r\n  /// @param owner_ address whose tokens should be locked.\r\n  /// @param amount_ amount of tokens to lock.\r\n  /// @param id_ lock id.\r\n  function lockStakesDao(address owner_, uint256 amount_, uint256 id_) external;\r\n\r\n  /// @notice Unlocks account's staked tokens.\r\n  /// @param owner_ address whose tokens should be unlocked.\r\n  /// @param id_ unlock id.\r\n  function unlockStakesDao(address owner_, uint256 id_) external;\r\n\r\n  /// @notice Transfers tokens from owner to recipient by approved spender.\r\n  /// @param owner_ address of tokens' owner whose tokens will be spent.\r\n  /// @param recipient_ address of recipient that will recieve tokens.\r\n  /// @param amount_ amount of tokens to be spent.\r\n  /// @return bool true if successful.\r\n  function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool);\r\n\r\n  /// @notice Increases allowance for given spender.\r\n  /// @param spender_ spender to increase allowance for.\r\n  /// @param addedValue_ extra amount that spender can spend.\r\n  /// @return bool true if successful.\r\n  function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool);\r\n\r\n  /// @notice Decreases allowance for given spender.\r\n  /// @param spender_ spender to decrease allowance for.\r\n  /// @param subtractedValue_ removed amount that spender can spend.\r\n  /// @return bool true if successful.\r\n  function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool);\r\n\r\n  /// @notice Stake tokens.\r\n  /// @param amount_ amount of tokens to be staked.\r\n  /// @return bool true if successful.\r\n  function stake(uint256 amount_) external returns (bool);\r\n\r\n  /// @notice Unstake tokens.\r\n  /// @param amount_ amount of tokens to be unstaked.\r\n  /// @return bool true if successful.\r\n  function unstake(uint256 amount_) external returns (bool);\r\n\r\n  /// @notice Functionality for DAO to add benefits for all stakers.\r\n  /// @param amount_ amount of wei to be shared among stakers.\r\n  function addBenefits(uint256 amount_) external;\r\n\r\n  /// @notice Sets DAO and Factory addresses.\r\n  /// @param dao_ DAO address that this token governs.\r\n  /// @param factory_ Factory address.\r\n  function setDaoFactoryAddresses(address dao_, address factory_) external;\r\n\r\n  /// @notice Functionality for owner to burn tokens.\r\n  /// @param amount_ amount of tokens to burn.\r\n  function burn(uint256 amount_) external;\r\n}\r\n"},"browser/TorroCollab.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity 0.6.6;\r\n\r\nimport \"./ITorro.sol\";\r\n\r\n/// @author ORayskiy - @robitnik_TorroDao\r\ncontract TorroCollab {\r\n\r\n  // Private data.\r\n\r\n  uint8 constant private _decimals = 18;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  ITorro private _token;\r\n  address private _owner;\r\n\r\n  // Events.\r\n\r\n  // Constructor.\r\n\r\n  constructor(address address_) public {\r\n    _name = \"Torro DAO Staked\";\r\n    _symbol = \"TORRO-COLLAB\";\r\n    _token = ITorro(address_);\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  // Public calls.\r\n\r\n  /// @notice Token's name.\r\n  /// @return string name of the token.\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /// @notice Token's symbol.\r\n  /// @return string symbol of the token.\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /// @notice Token's decimals.\r\n  /// @return uint8 demials of the token.\r\n  function decimals() public pure returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /// @notice Token's total supply.\r\n  /// @return uint256 total supply of the token.\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _token.stakedSupply();\r\n\t}\r\n\r\n  /// @notice Available balance for address.\r\n  /// @param sender_ address to get available balance for.\r\n  /// @return uint256 amount of tokens available for given address.\r\n  function balanceOf(address sender_) public view returns (uint256) {\r\n    return _token.stakedOf(sender_);\r\n  }\r\n\r\n  /// @notice Spending allowance.\r\n  /// @param owner_ token owner address.\r\n  /// @param spender_ token spender address.\r\n  /// @return uint256 amount of owner's tokens that spender can use.\r\n  function allowance(address owner_, address spender_) public view returns (uint256) {\r\n    return 0;\r\n  }\r\n\r\n  // Public transactions.\r\n\r\n  /// @notice Transfer tokens to recipient.\r\n  /// @param recipient_ address of tokens' recipient.\r\n  /// @param amount_ amount of tokens to transfer.\r\n  /// @return bool true if successful.\r\n  function transfer(address recipient_, uint256 amount_) public returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /// @notice Approve spender to spend an allowance.\r\n  /// @param spender_ address that will be allowed to spend specified amount of tokens.\r\n  /// @param amount_ amount of tokens that spender can spend.\r\n  /// @return bool true if successful.\r\n  function approve(address spender_, uint256 amount_) public returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /// @notice Transfers tokens from owner to recipient by approved spender.\r\n  /// @param owner_ address of tokens' owner whose tokens will be spent.\r\n  /// @param recipient_ address of recipient that will recieve tokens.\r\n  /// @param amount_ amount of tokens to be spent.\r\n  /// @return bool true if successful.\r\n  function transferFrom(address owner_, address recipient_, uint256 amount_) public returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /// @notice Increases allowance for given spender.\r\n  /// @param spender_ spender to increase allowance for.\r\n  /// @param addedValue_ extra amount that spender can spend.\r\n  /// @return bool true if successful.\r\n  function increaseAllowance(address spender_, uint256 addedValue_) public returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /// @notice Decreases allowance for given spender.\r\n  /// @param spender_ spender to decrease allowance for.\r\n  /// @param subtractedValue_ removed amount that spender can spend.\r\n  /// @return bool true if successful.\r\n  function decreaseAllowance(address spender_, uint256 subtractedValue_) public returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  function setNewToken(address address_) public {\r\n    require(msg.sender == _owner);\r\n    _token = ITorro(address_);\r\n  }\r\n}\r\n"}}}