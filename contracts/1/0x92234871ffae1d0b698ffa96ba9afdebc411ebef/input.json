{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"staking.sol":{"content":"pragma solidity ^0.8.10;\n\n// SPDX-License-Identifier: Unlicensed\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if(a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract Staking is Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => uint) private _userStakeDay;\n    mapping (address => uint256) private _userRewards;\n    mapping (address => uint256) private _userDailyReward;\n    mapping (address => uint256) private _usersAmountStaked;\n    mapping (address => uint256) private _usersStartTime;\n\n    address[] private _usersStaked;\n    bool private _stakingEnabled = true;\n\n    IERC20 private _PIXIEAddress = IERC20(0x856eE6A073386b2Dd440a8CFc9D961B64AA78fe0);\n    \n    uint256 private _totalStaked;\n\n    function totalBalanceWithoutStakes() public view returns (uint256) {\n        require (totalBalance() > 0, 'Balance is 0');\n        return _PIXIEAddress.balanceOf(address(this)).sub(_totalStaked);\n    }\n\n    function totalBalance() public view returns (uint256) {\n        return _PIXIEAddress.balanceOf(address(this));\n    }\n\n    function totalStaked() public view returns (uint256) {\n        return _totalStaked;\n    }\n\n    function getStakers() public view returns (address[] memory) {\n        return _usersStaked;\n    }\n\n    function getStakeDay(address staker) public view returns (uint256) {\n        return _userStakeDay[staker];\n    }\n\n    function getAmountsStaked(address staker) public view returns (uint256) {\n        return _usersAmountStaked[staker];\n    }\n\n    function getStakedTimes(address staker) public view returns (uint256) {\n        return _usersStartTime[staker];\n    }\n\n    function getTotalUserReward(address staker) public view returns (uint256) {\n        return _userRewards[staker];\n    }\n\n    function getDailyUserReward(address staker) public view returns (uint256) {\n        return _userDailyReward[staker];\n    }\n\n    function getEmission() public view returns(uint256) {\n        uint256 _totalPIXIE = totalBalanceWithoutStakes();\n        uint256 _totalEmissions = _totalPIXIE.div(2);\n        uint256 _totalSupply = 1e12 * 10**9;\n\n        if (_totalStaked > _totalSupply.div(100).mul(4) && _totalStaked < _totalSupply.div(100).mul(8)) {\n            _totalEmissions = _totalPIXIE.div(100).mul(60);\n        } else if (_totalStaked > _totalSupply.div(100).mul(8) && _totalStaked < _totalSupply.div(100).mul(12)) {\n            _totalEmissions = _totalPIXIE.div(100).mul(70);\n        } else if (_totalStaked > _totalSupply.div(100).mul(12) && _totalStaked < _totalSupply.div(100).mul(16)) {\n            _totalEmissions = _totalPIXIE.div(100).mul(80);\n        } else if (_totalStaked > _totalSupply.div(100).mul(16) && _totalStaked < _totalSupply.div(100).mul(20)) {\n            _totalEmissions = _totalPIXIE.div(100).mul(90);\n        } else if (_totalStaked > _totalSupply.div(100).mul(20)) {\n            _totalEmissions = _totalPIXIE;\n        }\n\n        return _totalEmissions.div(30);\n    }\n\n    function setDailyRewards() public {\n        uint256 _emission = getEmission();\n\n        for (uint i = 0; i < _usersStaked.length; i += 1) {\n            address _user = _usersStaked[i];\n\n            uint256 _userAmountStaked = _usersAmountStaked[_user];\n            uint _previousUserStakeDay = _userStakeDay[_user];\n\n            uint256 _userTimeStamp = _usersStartTime[_user];\n            uint256 _timestamp = block.timestamp;\n            uint _stakeDay;\n\n            if (_userTimeStamp == _timestamp) {\n                _stakeDay = 0;\n            } else {\n                uint256 _userStakeDayTimestamp = _timestamp.sub(_userTimeStamp);\n                _stakeDay = _userStakeDayTimestamp.div(1 days);\n\n            }\n\n            if (_userDailyReward[_user] <= 0) {\n                _userDailyReward[_user] = _emission.mul(_userAmountStaked).div(_totalStaked);\n            }\n            \n            if (_previousUserStakeDay != _stakeDay) {\n                _userRewards[_user] += _userDailyReward[_user];\n            }\n            \n            _userStakeDay[_user] = _stakeDay;\n            _userDailyReward[_user] = _emission.mul(_userAmountStaked).div(_totalStaked);\n        }\n    }\n\n    function stake(uint256 toStake) external {\n        require(_stakingEnabled, 'Staking has been disabled. Please contact staff to find out why.');\n        require(_PIXIEAddress.balanceOf(msg.sender) > toStake, \"Insufficient Funds in wallet\");\n        \n        bool _hasStaked = false;\n\n        for (uint i = 0; i < _usersStaked.length; i += 1) {\n            if (_usersStaked[i] == msg.sender) {\n                _hasStaked = true;\n            }\n        }\n\n        _usersAmountStaked[msg.sender] += toStake;\n        _usersStartTime[msg.sender] = block.timestamp;\n\n        if (!_hasStaked) _usersStaked.push(msg.sender);\n\n        _totalStaked += toStake;\n\n        // Calculate new daily rewards\n        setDailyRewards();\n\n        _PIXIEAddress.transferFrom(msg.sender, address(this), toStake);\n    }\n\n    function unStake() external {\n        require(_stakingEnabled, 'Staking has been disabled. Please contact staff to find out why and how to unstake your initial amount');\n        require(_userStakeDay[msg.sender] > 0, 'You must have staked your tokens for at least 24h');\n\n        uint256 _initial = _usersAmountStaked[msg.sender];\n        uint256 _reward = _userRewards[msg.sender];\n\n        // Remove from staking array\n        for (uint i = 0; i < _usersStaked.length; i += 1) {\n            if (_usersStaked[i] == msg.sender) {\n                delete _usersStaked[i];\n            }\n        }\n\n        // Reset all the vars\n        _userStakeDay[msg.sender] = 0;\n        _usersAmountStaked[msg.sender] = 0;\n        _userRewards[msg.sender] = 0;\n        _userDailyReward[msg.sender] = 0;\n        _usersStartTime[msg.sender] = 0;\n\n        _PIXIEAddress.transfer(msg.sender, _initial.add(_reward));\n        _totalStaked -= _initial;\n\n        // Calculate new daily rewards\n        if (_totalStaked > 0) setDailyRewards();\n    }\n\n    function unstakeInitial() external {\n        require(!_stakingEnabled, 'Staking is enabled, use the unStake function');\n\n        _PIXIEAddress.transfer(msg.sender, _usersAmountStaked[msg.sender]);\n    }\n\n    function withdrawAll() external onlyOwner() {\n        _PIXIEAddress.transfer(msg.sender, totalBalance());\n    }\n\n    function setStakingState(bool onoff) external onlyOwner() {\n        // In case of staking malfunctioning or amounts being totally off\n        _stakingEnabled = onoff;\n    }\n\n    receive() external payable {}\n}"}}}