{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MessageStorage.sol":{"content":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract MessageStorage {\r\n    address payable public owner_wallet = 0xE2d09A7Bb9cE29f1082A5d20c82971b86005d3F4;\r\n    uint256 public msgCount = 0;\r\n    mapping(uint256 => Message) public message;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner_wallet);\r\n        _;\r\n    }\r\n\r\n    struct Message{\r\n        uint256 id;\r\n        string text;\r\n        string fileName;\r\n        string fileType;\r\n        string fileHash;\r\n        string msgSize;\r\n        string datetime;\r\n    }\r\n\r\n    function addMessage(string memory text, string memory fileName, string memory fileType, string memory fileHash, string memory msgSize, string memory datetime) payable public {\r\n        message[msgCount] = Message(msgCount, text, fileName, fileType, fileHash, msgSize, datetime);\r\n        msgCount += 1;\r\n        sendCommission(owner_wallet);\r\n    }\r\n\r\n    function addMultipleMessages(string[] memory text, string[] memory fileName, string[] memory fileType, string[] memory fileHash, string[] memory msgSize, string memory datetime) public {\r\n        for(uint i = 0; i< text.length; i++)\r\n        {\r\n            message[msgCount] = Message(msgCount, text[i], fileName[i], fileType[i], fileHash[i], msgSize[i], datetime);\r\n            msgCount += 1;\r\n        }\r\n    }\r\n\r\n    function getMessageCount() public view returns (uint256) {\r\n        return msgCount;\r\n    }\r\n\r\n    function get(uint256 index) public view returns (Message memory){\r\n        return message[index];\r\n    }\r\n\r\n    function sendCommission(address payable _address) public payable {\r\n        _address.transfer(msg.value);\r\n    }\r\n\r\n    function setOwnerWallet(address payable _owner_wallet)  onlyOwner public {\r\n        owner_wallet = _owner_wallet;\r\n    }\r\n    \r\n    function getOwnerWallet() public view returns (address) {\r\n        return owner_wallet;\r\n    }\r\n}"}}}