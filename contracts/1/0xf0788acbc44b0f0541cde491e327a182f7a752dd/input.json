{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Cast.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-07-02\n*/\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ninterface CheckInterface {\n    function isOk() external view returns (bool);\n}\n\ncontract Cast {\n\n    function spell(address _target, bytes memory _data) public payable{\n        require(_target != address(0), \"target-invalid\");\n        assembly {\n            let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\n\n            switch iszero(succeeded)\n                case 1 {\n                    // throw if delegatecall failed\n                    let size := returndatasize()\n                    returndatacopy(0x00, 0x00, size)\n                    revert(0x00, size)\n                }\n        }\n    }\n    \n    function cast(\n        address[] memory _targets,\n        bytes[] memory _datas,\n        address _check\n    )\n    public\n    payable\n    {\n        for (uint i = 0; i < _targets.length; i++) {\n            address _target = _targets[i];\n            bytes memory _data = _datas[i];\n            require(_target != address(0), \"target-invalid\");\n            assembly {\n            let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\n\n            switch iszero(succeeded)\n                case 1 {\n                    // throw if delegatecall failed\n                    let size := returndatasize()\n                    returndatacopy(0x00, 0x00, size)\n                    revert(0x00, size)\n                }\n            }\n        }\n        // if(_check != address(0)) require(CheckInterface(_check).isOk(), \"not-ok\");\n       \n    }\n    receive() external payable {}\n    \n}"}}}