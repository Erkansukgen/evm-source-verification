{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"WLEVData.sol":{"content":"pragma solidity <=0.6.2;\n\ninterface ILeviathan {\n  function tokensOfOwner(address owner) external view returns (uint256[] memory);  \n}\n\ninterface IWLEV {\n    function checkClaim(uint ID) external view returns (uint256); \n}\n\ninterface IWhirlpool {\n    function getAllInfoFor(address _user) external view returns (bool isActive, uint256[12] memory info);\n}\n\ninterface IERC20 {\n    function balanceOf(address who) external view returns (uint);\n}\n\ncontract LeviathanRewardInfo {\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\n    address private constant _surf = 0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c;\n    address private constant _whirlpool = 0x999b1e6EDCb412b59ECF0C5e14c20948Ce81F40b;\n    address private constant _leviathanWhirlpool = 0x4f2CCc35F791e763779f711168424b766Ba3468F;\n\n    function futureRewardsPerNFT()\n    external view returns (uint) {\n         (, uint256[12] memory userData) = IWhirlpool(_whirlpool).getAllInfoFor(_leviathanWhirlpool);\n         uint256[] memory _IDs = ILeviathan(_leviathan).tokensOfOwner(_wlev);\n        \n        // how much SURF is held by the WLEV contract (forwarded to holders when a Leviathan is un/wrapped)\n        uint futureRewards = IERC20(_surf).balanceOf(_wlev);\n        \n        // how much SURF is pending withdrawal from the whirlpool? (forwarded to holders when the atlantiscore task is processed)\n        futureRewards += userData[10];\n        \n        //loop through every NFT ID held by the WLEV contract and query how much SURF is owed to it\n        for(uint x = 0;x < _IDs.length; x++)\n            futureRewards += IWLEV(_wlev).checkClaim(_IDs[x]);\n            \n        return futureRewards / 333;\n    }\n}"}}}