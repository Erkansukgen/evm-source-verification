{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/CzzRouter.sol":{"content":"pragma solidity =0.6.6;\r\n\r\nimport './IERC20.sol';\r\nimport './IWETH.sol';\r\nimport './ISwapFactory.sol';\r\nimport './IUniswapV2Router02.sol';\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ICzzSwap is IERC20 {\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(address _account, uint256 _amount) external;\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ncontract CzzRouter is Ownable {\r\n    \r\n    address czzToken;\r\n    uint private _convertType;\r\n\r\n    mapping (address => uint8) private managers;\r\n    mapping (address => uint8) private routerAddrs;\r\n\r\n    event MintToken(\r\n        address to,\r\n        uint256 mid,\r\n        uint256 gas,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n\r\n    event BurnToken(\r\n        address     from_,\r\n        uint256     amountIn,\r\n        uint256     amountOut,\r\n        uint256     convertType,\r\n        address[]   toPath,\r\n        address     toRouterAddr,\r\n        uint256     slippage,\r\n        bool        isInsurance,\r\n        bytes       extra\r\n    );\r\n\r\n    event SwapToken(\r\n        address indexed to,\r\n        uint256 inAmount,\r\n        uint256 outAmount,\r\n        string   flag\r\n    );\r\n    event TransferToken(\r\n        address  indexed to,\r\n        uint256  amount\r\n    );\r\n\r\n    modifier isManager {\r\n        require(\r\n            msg.sender == owner() || managers[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, uint convertType) public {\r\n        czzToken = _token;\r\n        _convertType = convertType;\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function addManager(address manager) public onlyOwner{\r\n        managers[manager] = 1;\r\n    }\r\n    \r\n    function removeManager(address manager) public onlyOwner{\r\n        managers[manager] = 0;\r\n    }\r\n\r\n    function addRouterAddr(address routerAddr) public isManager{\r\n        routerAddrs[routerAddr] = 1;\r\n    }\r\n    \r\n    function removeRouterAddr(address routerAddr) public isManager{\r\n        routerAddrs[routerAddr] = 0;\r\n    }\r\n\r\n    function HasRegistedRouteraddress(address routerAddr) public view isManager returns(uint8 ){\r\n        return routerAddrs[routerAddr];\r\n    }\r\n    \r\n    function setCzzTonkenAddress(address addr) public isManager {\r\n        czzToken = addr;\r\n    }\r\n\r\n    function getCzzTonkenAddress() public view isManager returns(address ){\r\n        return czzToken;\r\n    }\r\n\r\n    function approve(address token, address spender, uint256 _amount) public virtual returns (bool) {\r\n        require(address(token) != address(0), \"approve token is the zero address\");\r\n        require(address(spender) != address(0), \"approve spender is the zero address\");\r\n        require(_amount != 0, \"approve _amount is the zero \");\r\n        require(routerAddrs[spender] == 1, \"spender is not router address \");        \r\n        IERC20(token).approve(spender,_amount);\r\n        return true;\r\n    }\r\n    \r\n    function _swapMint(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal returns (uint[] memory amounts) {\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n       amounts = IUniswapV2Router02(routerAddr).swapExactTokensForTokens(amountIn, amountOutMin,path,to,deadline);\r\n    }\r\n\r\n    function _swapBurn(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal returns (uint[] memory amounts) {\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n        TransferHelper.safeTransferFrom(path[0], msg.sender, address(this), amountIn);\r\n        amounts = IUniswapV2Router02(routerAddr).swapExactTokensForTokens(amountIn, amountOutMin,path,to,deadline);\r\n    }\r\n\r\n    function _swapEthBurn(\r\n        uint256 amountInMin,\r\n        address[] memory path,\r\n        address to, \r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal returns (uint[] memory amounts) {\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < msg.value) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n        IWETH(path[0]).deposit{value: msg.value}();\r\n        amounts = IUniswapV2Router02(routerAddr).swapExactTokensForTokens(msg.value,amountInMin,path,to,deadline);\r\n    }\r\n    \r\n    function _swapEthMint(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to, \r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal returns (uint[] memory amounts) {\r\n      \r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n        amounts = IUniswapV2Router02(routerAddr).swapExactTokensForETH(amountIn, amountOutMin,path,to,deadline);\r\n    }\r\n    \r\n    function swap_burn_get_getReserves(address factory, address tokenA, address tokenB) public view isManager returns (uint reserveA, uint reserveB){\r\n        require(address(0) != factory);\r\n        return  ISwapFactory(factory).getReserves(tokenA, tokenB);\r\n    }\r\n    \r\n    function swapGetAmount(uint256 amountIn, address[] memory path, address routerAddr) public view returns (uint[] memory amounts){\r\n        require(address(0) != routerAddr); \r\n        return IUniswapV2Router02(routerAddr).getAmountsOut(amountIn,path);\r\n    }\r\n \r\n    function swapAndBurnWithPath(uint256 _amountIn, uint256 _amountInMin, uint convertType, address routerAddr, address[] memory fromPath, uint deadline, address[] memory toPath, address toRouterAddr, uint slippage, bool isInsurance, bytes memory extradata) payable public\r\n    {\r\n        require(address(0) != routerAddr); \r\n        require(fromPath[fromPath.length - 1] == czzToken, \"last fromPath is not czz\"); \r\n\r\n        uint[] memory amounts = _swapBurn(_amountIn, _amountInMin, fromPath, msg.sender, routerAddr, deadline);\r\n        if(convertType != _convertType){\r\n            ICzzSwap(czzToken).burn(msg.sender, amounts[amounts.length - 1]);\r\n            emit BurnToken(msg.sender, _amountIn, amounts[amounts.length - 1], convertType, toPath, toRouterAddr, slippage, isInsurance, extradata);\r\n        }\r\n    }\r\n\r\n    function swapAndBurnEthWithPath(uint256 _amountInMin, uint convertType, address routerAddr, address[] memory path, uint deadline, address[] memory toPath, address toRouterAddr, uint slippage, bool isInsurance, bytes memory extradata) payable public\r\n    {\r\n        require(address(0) != routerAddr); \r\n        require(path[path.length - 1] == czzToken, \"last path is not czz\"); \r\n        require(msg.value > 0);\r\n        uint[] memory amounts = _swapEthBurn(_amountInMin, path, msg.sender, routerAddr, deadline);\r\n        if(convertType != _convertType){\r\n            ICzzSwap(czzToken).burn(msg.sender, amounts[amounts.length - 1]);\r\n            emit BurnToken(msg.sender, 0, amounts[amounts.length - 1], convertType, toPath, toRouterAddr, slippage, isInsurance, extradata);\r\n\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _amountIn, uint convertType, address[] memory toPath, address toRouterAddr, uint slippage, bool isInsurance, bytes memory extradata) payable public \r\n    {\r\n        ICzzSwap(czzToken).burn(msg.sender, _amountIn);\r\n        emit BurnToken(msg.sender, _amountIn, 0, convertType, toPath, toRouterAddr, slippage, isInsurance, extradata);\r\n    }\r\n    \r\n    function swapAndMintTokenWithPath(address _to, uint256 _amountIn, uint256 _amountInMin, uint256 mid, uint256 gas, address routerAddr, address[] memory toPath, uint deadline) payable public isManager {\r\n        require(address(0) != _to);\r\n        require(address(0) != routerAddr); \r\n        require(_amountIn > 0);\r\n        require(_amountIn > gas, \"ROUTER: transfer amount exceeds gas\");\r\n        require(toPath[0] == czzToken, \"toPath 0 is not czz\");\r\n\r\n        ICzzSwap(czzToken).mint(address(this), _amountIn);    // mint to contract address   \r\n        if(gas > 0){\r\n            bool success = true;\r\n            (success) = ICzzSwap(czzToken).transfer(msg.sender, gas); \r\n            require(success, 'swapAndMintTokenWithPath gas Transfer error');\r\n        }\r\n        uint[] memory amounts = _swapMint(_amountIn-gas, _amountInMin, toPath, _to, routerAddr, deadline);\r\n        emit MintToken(_to, mid, gas, _amountIn, amounts[amounts.length - 1]);\r\n    }\r\n    \r\n    function swapAndMintTokenForEthWithPath(address _to, uint256 _amountIn, uint256 _amountInMin, uint256 mid, uint256 gas, address routerAddr, address[] memory toPath, uint deadline) payable public isManager {\r\n        require(address(0) != _to);\r\n        require(address(0) != routerAddr); \r\n        require(_amountIn > 0);\r\n        require(_amountIn > gas, \"ROUTER: transfer amount exceeds gas\");\r\n        require(toPath[0] == czzToken, \"path 0 is not czz\");\r\n\r\n        ICzzSwap(czzToken).mint(address(this), _amountIn);    // mint to contract address   \r\n        if(gas > 0){\r\n            bool success = true;\r\n            (success) = ICzzSwap(czzToken).transfer(msg.sender, gas); \r\n            require(success, 'swapAndMintTokenForEthWithPath gas Transfer error');\r\n        }\r\n        uint[] memory amounts = _swapEthMint(_amountIn - gas, _amountInMin, toPath, _to, routerAddr, deadline);\r\n        emit MintToken(_to, mid, gas, _amountIn, amounts[amounts.length - 1]);\r\n    }\r\n    \r\n    function mintWithGas(address _to, uint256 mid, uint256 _amountIn, uint256 gas)  payable public isManager \r\n    {\r\n        require(_amountIn > 0);\r\n        require(_amountIn >= gas, \"ROUTER: transfer amount exceeds gas\");\r\n\r\n        if(gas > 0){\r\n           ICzzSwap(czzToken).mint(msg.sender, gas);\r\n        }\r\n        ICzzSwap(czzToken).mint(_to, _amountIn-gas);\r\n        emit MintToken(_to, mid, gas, _amountIn, 0);\r\n    }\r\n\r\n    function mint(address _to, uint256 mid, uint256 _amountIn)  payable public isManager \r\n    {\r\n        ICzzSwap(czzToken).mint(_to, _amountIn);\r\n        emit MintToken(_to, mid, 0, _amountIn, 0);\r\n    }\r\n\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n"},"contracts/IERC20.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n"},"contracts/ISwapFactory.sol":{"content":"pragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface ISwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function feeToRate() external view returns (uint256);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setFeeToRate(uint256) external;\r\n\r\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\r\n\r\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n"},"contracts/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"},"contracts/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\nimport './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"},"contracts/IWETH.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n"}}}