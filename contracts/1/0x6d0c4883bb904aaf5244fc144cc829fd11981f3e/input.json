{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/safeMath.sol": {
      "content": "pragma solidity >=0.4.22 <0.7.0;\r\n\r\nlibrary SafeMath {\r\n    //加\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    //减\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    //乘\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    //除\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    //取余\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "browser/tool.sol": {
      "content": "pragma solidity >=0.6.0 <0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./safeMath.sol\";\n\n\ncontract Tool {\n    using SafeMath for uint256;\n\n    MyToken ticketAddress;\n\n    address payable public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier isOwn() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function init(address _ticketAddress) public isOwn {\n        ticketAddress = MyToken(_ticketAddress);\n    }\n\n    function _getNeedTicketNum(uint256 _balance) public view returns (uint256) {\n        uint256 _needTicketUSDT = _balance.div(1e6).div(10);\n\n        uint256 _ticketPrice = ticketAddress.getTokenPrice();\n        uint256 _needTicket = _needTicketUSDT.mul(_ticketPrice);\n        return _needTicket;\n    }\n\n    function _getRatio(uint256 _balance) public pure returns (uint256) {\n        require(_balance >= 100e6, \"amount <= 100e6\");\n        require(_balance.mod(1e6) == 0, \"amount != e6\");\n\n        uint256 _num = _balance.div(1e6);\n\n        if (_num < 3000) {\n            return uint256(3);\n        } else if (_num < 7000) {\n            return uint256(4);\n        } else {\n            return uint256(5);\n        }\n    }\n\n    function _createRandomNum(\n        uint256 _min,\n        uint256 _max,\n        uint256 _randNonce\n    ) public view returns (uint256) {\n        uint256 _random = uint256(\n            keccak256(abi.encode(now, tx.origin, _randNonce))\n        )\n            .mod(_max.sub(_min));\n\n        return _random.add(_min);\n    }\n\n    function _crateLuckCodeList(uint256 _max)\n        public\n        view\n        returns (uint256[25] memory)\n    {\n        uint256[25] memory _random;\n        for (uint256 i = 0; i < 25; i++) {\n            _random[i] = _createRandomNum(1, _max, i.add(now));\n        }\n        return _random;\n    }\n}\n\n\nabstract contract MyToken {\n    function getToken(address _own) public virtual returns (uint256);\n\n    function sendTokenToGame(address _to, uint256 _value)\n        public\n        virtual\n        returns (bool);\n\n    function getTokenPrice() public virtual view returns (uint256);\n\n    function price() public virtual view returns (uint256);\n}\n"
    }
  }
}