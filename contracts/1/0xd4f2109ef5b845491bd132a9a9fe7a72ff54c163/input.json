{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/pixel-manager.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n\r\ncontract pixel_manager{\r\n    address constant internal axionAddress = address(0xEd1199093b1aBd07a368Dd1C0Cdc77D8517BA2A0);\r\n    ERC20 Axion = ERC20(axionAddress);\r\n    uint256 public pixel_limit = 1000;\r\n    uint256 public price_per = 25000;\r\n    address payable administrator;\r\n    uint256 axion_dec = 1e18;\r\n    mapping(address => uint256) public pixel_credit;\r\n\r\n    constructor() {\r\n        administrator = msg.sender;\r\n    }\r\n    \r\n    function purchase(uint256 tl_y, uint256 tl_x, uint256 br_y, uint256 br_x) public {\r\n        require(tl_x <= br_x);\r\n        require(tl_y <= br_y);\r\n        uint256 pixels_to_purchase = SafeMath.mul(SafeMath.sub(br_y, tl_y)+1, SafeMath.sub(br_x, tl_x)+1);\r\n        require(pixels_to_purchase <= pixel_limit);\r\n\r\n        uint256 user_credit = pixel_credit[msg.sender];\r\n        if (pixels_to_purchase <= user_credit) {\r\n            pixel_credit[msg.sender] = SafeMath.sub(pixel_credit[msg.sender], pixels_to_purchase);\r\n        } else {\r\n            uint256 to_charge = SafeMath.mul(pixels_to_purchase, price_per) * axion_dec;\r\n            uint256 credit_discount = SafeMath.mul(pixel_credit[msg.sender], price_per) * axion_dec;\r\n            pixel_credit[msg.sender] = 0;\r\n            require(Axion.transferFrom(msg.sender, address(this), SafeMath.sub(to_charge, credit_discount)));\r\n        }\r\n        \r\n    }\r\n\r\n    function getCredit(address to_check) public view returns (uint256) {\r\n        uint256 address_credit = pixel_credit[to_check];\r\n        return address_credit;\r\n    }\r\n    \r\n    function getData(address to_check) public view returns (uint256, uint256) {\r\n        uint256 address_credit = pixel_credit[to_check];\r\n        uint256 allowance = Axion.allowance(to_check, address(this));\r\n        return (address_credit, allowance);\r\n    }\r\n\r\n    function setCredit(address to_credit, uint256 credited_pixels) public {\r\n        require(msg.sender == administrator);\r\n        pixel_credit[to_credit] = credited_pixels;\r\n    }\r\n\r\n    function addCredit(address to_credit, uint256 credited_pixels) public {\r\n        require(msg.sender == administrator);\r\n        pixel_credit[to_credit] = pixel_credit[to_credit] + credited_pixels;\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == administrator);\r\n        Axion.transfer(administrator, Axion.balanceOf(address(this)));\r\n    }\r\n    \r\n    function setLimit(uint256 new_pixel_limit) public {\r\n        require(msg.sender == administrator);\r\n        pixel_limit = new_pixel_limit;\r\n    }\r\n    \r\n    function setPrice(uint256 new_price_per) public {\r\n        require(msg.sender == administrator);\r\n        price_per = new_price_per;\r\n    }\r\n\r\n    function authSetImage(string calldata _sha) public {\r\n        // Okay!\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}}