{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/1_IsContractBatcher.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title IsContractBatcher\n * @dev Identifies whether an address is contract\n */\ncontract IsContractBatcher {\n    \n    /**\n     * @dev Check whether an address is a contract\n     * @param _addr an Ethereum address\n     * @return bool true if _addr is a contract\n     */\n    function isContract(address _addr) public view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(_addr) }\n        return size > 0;\n    }\n\n    /**\n     * @dev batch isContract\n     * @param _addrs an array of Ethereum addresses\n     * @return blockNumber block number \n     * @return areContracts an array of isContract calls corresponding to each address in _addrs\n     */\n    function isContractBatch(address[] memory _addrs) public view returns (uint256 blockNumber, bool[] memory areContracts) {\n        blockNumber = block.number;\n        \n        uint numberOfAddresses = _addrs.length;\n        areContracts = new bool[](numberOfAddresses);\n        \n        for(uint256 i = 0; i < numberOfAddresses; i++) {\n            areContracts[i] = isContract(_addrs[i]);\n        }\n    }\n}"
    }
  }
}