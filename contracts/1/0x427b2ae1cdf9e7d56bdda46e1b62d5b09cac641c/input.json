{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/bombfactory/contracts/BomberMan.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract ChildBombers {\r\n     function setTarget(address payable _to) virtual external;\r\n}\r\ncontract BombStorage {\r\n    uint256 private _nonce = 0;\r\n\r\n    function nonce() internal returns (uint256){\r\n        uint256 n = _nonce;\r\n        _nonce++;\r\n        return n;\r\n    }\r\n}\r\n\r\ncontract BomberMan is BombStorage {\r\n    address payable public  owner;\r\n    address master = 0x983e0FbD51b9dfcdb790A6a5e7DD99A61493ea86;\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n    receive()external payable{}\r\n    fallback()external payable{}\r\n    function sweep()public{\r\n        require(msg.sender == owner);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    function bomb(uint256 count,address payable target, uint256 amount) external payable {\r\n            for(uint256 o =0; o < count; o++) {\r\n                deployChild(target,amount);\r\n            }\r\n    }\r\n    function deployChild(address payable target, uint256 amount) public payable {\r\n           address payable bomber = createClone();\r\n            ChildBombers(bomber).setTarget(target);\r\n           (bool success,) = bomber.call{value:amount}(\"\");\r\n           require(success);\r\n\r\n    }\r\n    function createClone() internal returns (address payable result) {\r\n        address target = master;\r\n    bytes20 targetBytes = bytes20(target);\r\n      assembly {\r\n          let clone := mload(0x40)\r\n          mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n          mstore(add(clone, 0x14), targetBytes)\r\n          mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n          result := create(0, clone, 0x37)\r\n      }\r\n    }\r\n\r\n\r\n}"
    }
  }
}