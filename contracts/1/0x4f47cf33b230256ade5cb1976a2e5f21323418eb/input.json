{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Zod.sol": {
      "content": "//104 116 116 112 115 58 47 47 116 46 109 101 47 65 108 112 104 97 76 97 117 110 99 104 101 115 \n//ASCII\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n}\n\ncontract Zod is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n\n    string private constant _name = \"Zod\";\n    string private constant _symbol = \"ZOD\";\n    uint8 private constant _decimals = 9;\n\n    // RFI\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1000000000000 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    uint256 private _taxFee = 0; // 0%\n    uint256 private _teamFee = 10; // 10% Marketing and Development Fee\n    uint256 private _previousTaxFee = _taxFee;\n    uint256 private _previousteamFee = _teamFee;\n    uint256 private _numOfTokensToExchangeForTeam = 500000 * 10**9;\n    uint256 private _routermax = 5000000000 * 10**9;\n\n    // Bot detection\n    mapping(address => bool) private bots;\n    mapping(address => bool) private whitelist;\n    mapping(address => uint256) private cooldown;\n    address payable private _MarketTax;\n    address payable private _Zod;\n    address payable private _KryptonianTax;\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n    bool private publicsale = false;\n    uint256 private _maxTxAmount = _tTotal;\n    uint256 public launchBlock;\n\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor(address payable markettax, address payable kryptoniantax, address payable zod) {\n        _MarketTax = markettax;\n        _Zod = zod;\n        _KryptonianTax = kryptoniantax;\n        _rOwned[_msgSender()] = _rTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_MarketTax] = true;\n        _isExcludedFromFee[_KryptonianTax] = true;\n        _isExcludedFromFee[_Zod] = true;\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function tokenFromReflection(uint256 rAmount)\n        private\n        view\n        returns (uint256)\n    {\n        require(\n            rAmount <= _rTotal,\n            \"Amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function removeAllFee() private {\n        if(_taxFee == 0 && _teamFee == 0) return;\n\n        _previousTaxFee = _taxFee;\n        _previousteamFee = _teamFee;\n\n        _taxFee = 0;\n        _teamFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n        _teamFee = _previousteamFee;\n    }\n    \n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        \n        if (from != owner() && to != owner()) {\n\n            if(from != address(this)){\n                require(amount <= _maxTxAmount);\n            }\n            if(!publicsale){\n                require(whitelist[from] || whitelist[to] || whitelist[msg.sender]);\n            }\n            require(!bots[from] && !bots[to] && !bots[msg.sender]);\n            \n             uint256 contractTokenBalance = balanceOf(address(this));\n            \n            if(contractTokenBalance >= _routermax)\n            {\n                contractTokenBalance = _routermax;\n            }\n            bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForTeam;\n            if (!inSwap && swapEnabled && overMinTokenBalance && from != uniswapV2Pair && from != address(uniswapV2Router)\n            ) {\n                // We need to swap the current tokens to ETH and send to the team wallet\n                swapTokensForEth(contractTokenBalance);\n                \n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n        bool takeFee = true;\n\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            takeFee = false;\n        }\n\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function isBlackListed(address account) public view returns (bool) {\n        return bots[account];\n    }\n    function isWhiteListed(address account) public view returns (bool) {\n        return whitelist[account];\n    }\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{\n            // generate the uniswap pair path of token -> weth\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = uniswapV2Router.WETH();\n\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n            // make the swap\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0, // accept any amount of ETH\n                path,\n                address(this),\n                block.timestamp\n            );\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _MarketTax.transfer(amount.div(2));\n        _KryptonianTax.transfer(amount.div(2));\n    }\n\n    function openTrading() external onlyOwner() {\n        require(!tradingOpen, \"trading is already open\");\n        IUniswapV2Router02 _uniswapV2Router =\n            IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\n            address(this),\n            balanceOf(address(this)),\n            0,\n            0,\n            owner(),\n            block.timestamp\n        );\n        swapEnabled = true;\n        publicsale = false;\n        _maxTxAmount = 20000000000 * 10**9;\n        launchBlock = block.number;\n        tradingOpen = true;\n        IERC20(uniswapV2Pair).approve(\n            address(uniswapV2Router),\n            type(uint256).max\n        );\n    }\n    \n    function setSwapEnabled(bool enabled) external {\n        require(_msgSender() == _Zod);\n        swapEnabled = enabled;\n    }\n        \n\n    function manualswap() external {\n        require(_msgSender() == _Zod);\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    function manualsend() external {\n        require(_msgSender() == _Zod);\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n\n    function setBots(address[] memory bots_) public onlyOwner() {\n        for (uint256 i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n    function setWhitelist(address[] memory whitelist_) public onlyOwner() {\n        for (uint256 i = 0; i < whitelist_.length; i++) {\n            whitelist[whitelist_[i]] = true;\n        }\n    }\n    function delBot(address notbot) public onlyOwner() {\n        bots[notbot] = false;\n    }\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool takeFee\n    ) private {\n        if (!takeFee) removeAllFee();\n        _transferStandard(sender, recipient, amount);\n        if (!takeFee) restoreAllFee();\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tTeam\n        ) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate = _getRate();\n        uint256 rTeam = tTeam.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    receive() external payable {}\n\n    function _getValues(uint256 tAmount)\n        private\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\n            _getTValues(tAmount, _taxFee, _teamFee);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\n            _getRValues(tAmount, tFee, tTeam, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(\n        uint256 tAmount,\n        uint256 taxFee,\n        uint256 TeamFee\n    )\n        private\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 tFee = tAmount.mul(taxFee).div(100);\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRValues(\n        uint256 tAmount,\n        uint256 tFee,\n        uint256 tTeam,\n        uint256 currentRate\n    )\n        private\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTeam = tTeam.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\n        emit MaxTxAmountUpdated(_maxTxAmount);\n    }\n    function setRouterPercent(uint256 maxRouterPercent) external {\n        require(_msgSender() == _Zod);\n        require(maxRouterPercent > 0, \"Amount must be greater than 0\");\n        _routermax = _tTotal.mul(maxRouterPercent).div(10**4);\n    }\n    \n    function _setTeamFee(uint256 teamFee) external onlyOwner() {\n        require(teamFee >= 0 && teamFee <= 25, 'teamFee should be in 0 - 25');\n        _teamFee = teamFee;\n    }\n    \n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n    function setMarket(address payable account) external {\n        require(_msgSender() == _Zod);\n        _MarketTax = account;\n    }\n\n    function setZod(address payable account) external {\n        require(_msgSender() == _Zod);\n        _Zod = account;\n    }\n    function setKryptonian(address payable account) external {\n        require(_msgSender() == _Zod);\n        _KryptonianTax = account;\n    }\n    function OpenPublic() external onlyOwner() {\n        publicsale = true;\n    }\n}"
    }
  }
}