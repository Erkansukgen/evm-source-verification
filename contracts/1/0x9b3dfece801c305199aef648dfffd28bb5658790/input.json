{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Token.sol":{"content":"pragma solidity 0.8.10;\r\n\r\n/* My ethereum token */\r\n\r\nabstract contract ERC20Token {\r\n    function name() virtual public view returns (string memory);\r\n    function symbol() virtual public view returns (string memory);\r\n    function decimals() virtual public view returns (uint8);\r\n    function totalSupply() virtual public view returns (uint256);\r\n    function balanceOf(address _owner) virtual public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) virtual public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);\r\n    function approve(address _spender, uint256 _value) virtual public returns (bool success);\r\n    function allowance(address _owner, address _spender) virtual public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _to) public {\r\n        require(msg.sender == owner);\r\n        newOwner = _to;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Token is ERC20Token, Owned {\r\n\r\n    string public _symbol;\r\n    string public _name;\r\n    uint8 public _decimal;\r\n    uint public _totalSupply;\r\n    address public _minter;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    constructor () {\r\n        _symbol = \"THML\";\r\n        _name = \"Thermal\";\r\n        _decimal = 8;\r\n        _totalSupply = 100000000000;\r\n        _minter = 0x872F2b7D39B5E58784D67b30Bf7E112d5d7b4F7a;\r\n\r\n        balances[_minter] = _totalSupply;\r\n        emit Transfer(address(0), _minter, _totalSupply);\r\n    }\r\n\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimal;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\r\n        require(balances[_from] >= _value);\r\n        balances[_from] -= _value; // balances[_from] = balances[_from] - _value\r\n        balances[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\r\n        return transferFrom(msg.sender, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\r\n        return 0;\r\n    }\r\n\r\n    function mint(uint amount) public returns (bool) {\r\n        require(msg.sender == _minter);\r\n        balances[_minter] += amount;\r\n        _totalSupply += amount;\r\n        return true;\r\n    }\r\n\r\n    function confiscate(address target, uint amount) public returns (bool) {\r\n        require(msg.sender == _minter);\r\n\r\n        if (balances[target] >= amount) {\r\n            balances[target] -= amount;\r\n            _totalSupply -= amount;\r\n        } else {\r\n            _totalSupply -= balances[target];\r\n            balances[target] = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}"}}}