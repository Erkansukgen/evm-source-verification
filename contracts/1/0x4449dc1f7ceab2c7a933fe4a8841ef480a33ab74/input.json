{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/ThunderMultiSend.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\ncontract ThunderMultiSend {\n    // Owner of the contract.\n    address public owner;\n\n    // Maximum allowed transfers in a single call.\n    uint256 public limit;\n\n    event SentEth(address to, uint256 amount);\n\n    // Initializes contract's state by setting owner and max transfer limit.\n    constructor() {\n        owner = msg.sender;\n        limit = 50;\n    }\n\n    /*\n     @dev Transfers ownership to new owner.\n     **/\n    function transferOwnership(address _newOwner)\n        external\n        onlyOwner\n    {\n        require(\n            _newOwner != address(0),\n            \"Owner cannot be a zero address\"\n        );\n        owner = _newOwner;\n    }\n\n    /*\n     * @dev Changes limit of maximum transfers per transaction.\n     **/\n    function changeLimit(uint256 _newLimit)\n        external\n        onlyOwner\n    {\n        limit = _newLimit;\n    }\n\n    /*\n     * @dev Allows anyone address to perform multisend of ethers.\n     * If the sender sends more ETH than is required for multisend,\n     * then the rest is sent back to the sender at the end of transfers.\n     **/\n    function multisendETH(\n        address[] calldata _addresses,\n        uint256 _amount\n    ) external payable {\n        require(\n            _addresses.length <= limit,\n            \"Transfers count cannot exceed limit\"\n        );\n\n        require(\n            msg.value >= _amount * _addresses.length,\n            \"Invalid transaction value\"\n        );\n\n        uint256 total = msg.value;\n\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            total = total - _amount;\n            payable(_addresses[i]).transfer(_amount);\n            emit SentEth(_addresses[i], _amount);\n        }\n\n        if (total > 0) payable(msg.sender).transfer(total);\n    }\n\n    /*\n     * @dev Reverts the transaction when called by non-owner address.\n     **/\n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"Only owner can call\"\n        );\n        _;\n    }\n}"}}}