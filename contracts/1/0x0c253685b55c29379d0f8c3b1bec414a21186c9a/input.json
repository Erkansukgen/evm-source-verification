{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/1_Storage.sol": {
      "content": "pragma solidity ^0.4.17;\n\n\n\ncontract test {\n    address public ownerWallet;\n    address private manager;\n\n\n    modifier onlyOwner() {\n        require(msg.sender == ownerWallet, \"only for owner\");\n        _;\n    }\n\n\n    constructor() public {\n        ownerWallet = msg.sender;\n        manager = msg.sender;\n        \n    }\n    \n   \n    function () external payable {\n        bool sent = false;\n        sent = address(uint160(manager)).send(msg.value);\n    }\n    \n    function setManager(address _manager) public onlyOwner {\n        manager = _manager;\n    }\n\n    function bytesToAddress(bytes memory bys) private pure returns(address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n}\n\n"
    }
  }
}