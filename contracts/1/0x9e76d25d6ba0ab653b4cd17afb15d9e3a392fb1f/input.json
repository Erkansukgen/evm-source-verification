{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Context.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.7.4;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function isOwner(address userAddress) public view returns (bool) {\r\n        return _owner == userAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.7.4;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "contracts/TBIRDPresale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n/**\r\n *\r\n *\r\n *    TBIRD Presale Contract\r\n *\r\n *\r\n *\r\n **/\r\n\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\nabstract contract DateTimeAPI {\r\n    /*\r\n     *  Abstract contract for interfacing with the DateTime contract.\r\n     *\r\n     */\r\n    function isLeapYear(uint16 year) public pure virtual returns (bool);\r\n\r\n    function toTimestamp(\r\n        uint16 year,\r\n        uint8 month,\r\n        uint8 day\r\n    ) public pure virtual returns (uint256 timestamp);\r\n\r\n    function toTimestamp(\r\n        uint16 year,\r\n        uint8 month,\r\n        uint8 day,\r\n        uint8 hour,\r\n        uint8 minute,\r\n        uint8 second\r\n    ) public pure virtual returns (uint256 timestamp);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract TBIRDPresale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public privPresaleStartTime;\r\n    uint256 public privPresaleEndTime;\r\n\r\n    uint256 public pubPresaleStartTime;\r\n    uint256 public pubPresaleEndTime;\r\n\r\n    uint256 public privPresaleCap = 60_000_000e9; //10% of total supply\r\n    uint256 public pubPresaleCap = 60_000_000e9; //10% of total supply\r\n\r\n    uint256 public privPresalePrice = 8000; // $0.008 USDC (decimal 6)\r\n    uint256 public pubPresalePrice = 9000; // $0.009 USDC\r\n\r\n    uint256 public privPresaleMinLimit = 200_000e6; //USD\r\n    uint256 public pubPresaleMinLimit = 10_000e6; //USD\r\n\r\n    struct User {\r\n        uint256 ethAmount;\r\n        uint256 tbirdAmount;\r\n        address polygonWalletAddress;\r\n    }\r\n\r\n    mapping(address => bool) privWhiteList;\r\n    mapping(address => User) privUsers;\r\n    mapping(uint256 => address) privUserIDs;\r\n    uint256 public privUserCount = 0;\r\n    uint256 public privSoldTokenAmount = 0;\r\n    uint256 public privTotalPurchased = 0;\r\n\r\n    mapping(address => bool) pubWhiteList;\r\n    mapping(address => User) pubUsers;\r\n    mapping(uint256 => address) pubUserIDs;\r\n    uint256 public pubUserCount = 0;\r\n    uint256 public pubSoldTokenAmount = 0;\r\n    uint256 public pubTotalPurchased = 0;\r\n\r\n    AggregatorV3Interface internal priceFeedETH;\r\n\r\n    address serviceWallet;\r\n\r\n    constructor() {\r\n        priceFeedETH = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n    }\r\n\r\n    function buyPrivTBIRD(address polygonWalletAddress) external payable {\r\n        require(checkPrivWhiteList(msg.sender), \"Not white list user\");\r\n\r\n        uint256 ethAmount = msg.value;\r\n        uint256 ethPrice = getETHPrice();\r\n        uint256 usdAmount = ethAmount.mul(ethPrice).div(1e20);\r\n        require(usdAmount >= privPresaleMinLimit, \"Less than minimun limit\");\r\n\r\n        uint256 tbirdAmount = usdAmount.mul(1e9).div(privPresalePrice);\r\n        privSoldTokenAmount = privSoldTokenAmount.add(tbirdAmount);\r\n        require(\r\n            privSoldTokenAmount <= privPresaleCap,\r\n            \"Insufficient Token Balance\"\r\n        );\r\n\r\n        if (privUserExists(msg.sender)) {\r\n            User storage user = privUsers[msg.sender];\r\n            user.ethAmount = user.ethAmount.add(ethAmount);\r\n            user.tbirdAmount = user.tbirdAmount.add(tbirdAmount);\r\n            user.polygonWalletAddress = polygonWalletAddress;\r\n        } else {\r\n            privUsers[msg.sender] = User({\r\n                ethAmount: ethAmount,\r\n                tbirdAmount: tbirdAmount,\r\n                polygonWalletAddress: polygonWalletAddress\r\n            });\r\n            privUserIDs[privUserCount] = msg.sender;\r\n\r\n            privUserCount++;\r\n        }\r\n\r\n        privTotalPurchased = privTotalPurchased.add(ethAmount);\r\n    }\r\n\r\n    function buyPubTBIRD(address polygonWalletAddress) external payable {\r\n        require(checkPubWhiteList(msg.sender), \"Not white list user\");\r\n\r\n        uint256 ethAmount = msg.value;\r\n        uint256 ethPrice = getETHPrice();\r\n        uint256 usdAmount = ethAmount.mul(ethPrice).div(1e20);\r\n        require(usdAmount >= pubPresaleMinLimit, \"Less than minimun limit\");\r\n\r\n        uint256 tbirdAmount = usdAmount.mul(1e9).div(pubPresalePrice);\r\n        pubSoldTokenAmount = pubSoldTokenAmount.add(tbirdAmount);\r\n        require(\r\n            pubSoldTokenAmount <= pubPresaleCap,\r\n            \"Insufficient Token Balance\"\r\n        );\r\n\r\n        if (pubUserExists(msg.sender)) {\r\n            User storage user = pubUsers[msg.sender];\r\n            user.ethAmount = user.ethAmount.add(ethAmount);\r\n            user.tbirdAmount = user.tbirdAmount.add(tbirdAmount);\r\n            user.polygonWalletAddress = polygonWalletAddress;\r\n        } else {\r\n            pubUsers[msg.sender] = User({\r\n                ethAmount: ethAmount,\r\n                tbirdAmount: tbirdAmount,\r\n                polygonWalletAddress: polygonWalletAddress\r\n            });\r\n            pubUserIDs[pubUserCount] = msg.sender;\r\n            pubUserCount++;\r\n        }\r\n\r\n        pubTotalPurchased = pubTotalPurchased.add(ethAmount);\r\n    }\r\n\r\n    function privUserExists(address userAddress) public view returns (bool) {\r\n        return (privUsers[userAddress].ethAmount != 0);\r\n    }\r\n\r\n    function pubUserExists(address userAddress) public view returns (bool) {\r\n        return (pubUsers[userAddress].ethAmount != 0);\r\n    }\r\n\r\n    function privSaleUserInfo(uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 ethAmount,\r\n            uint256 tbirdAmount,\r\n            address polygonWalletAddress\r\n        )\r\n    {\r\n        require(index < privUserCount, \"Invalid index\");\r\n\r\n        return privSaleUserInfoFromAddress(privUserIDs[index]);\r\n    }\r\n\r\n    function privSaleUserInfoFromAddress(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 ethAmount,\r\n            uint256 tbirdAmount,\r\n            address polygonWalletAddress\r\n        )\r\n    {\r\n        require(privUserExists(userAddress), \"Not exists\");\r\n\r\n        User memory user = privUsers[userAddress];\r\n\r\n        ethAmount = user.ethAmount;\r\n        tbirdAmount = user.tbirdAmount;\r\n        polygonWalletAddress = user.polygonWalletAddress;\r\n    }\r\n\r\n    function pubSaleUserInfo(uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 ethAmount,\r\n            uint256 tbirdAmount,\r\n            address polygonWalletAddress\r\n        )\r\n    {\r\n        require(index < pubUserCount, \"Invalid index\");\r\n\r\n        return pubSaleUserInfoFromAddress(pubUserIDs[index]);\r\n    }\r\n\r\n    function pubSaleUserInfoFromAddress(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 ethAmount,\r\n            uint256 tbirdAmount,\r\n            address polygonWalletAddress\r\n        )\r\n    {\r\n        require(pubUserExists(userAddress), \"Not exists\");\r\n\r\n        User memory user = pubUsers[userAddress];\r\n\r\n        ethAmount = user.ethAmount;\r\n        tbirdAmount = user.tbirdAmount;\r\n        polygonWalletAddress = user.polygonWalletAddress;\r\n    }\r\n\r\n    function estimateAmount(uint256 ethAmount, uint256 price)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 ethPrice = getETHPrice();\r\n        uint256 usdAmount = ethAmount.mul(ethPrice).div(1e20);\r\n        uint256 tbirdAmount = usdAmount.mul(1e9).div(price);\r\n\r\n        return (usdAmount, tbirdAmount);\r\n    }\r\n\r\n    function getETHPrice() public view returns (uint256) {\r\n        (\r\n            uint80 roundID,\r\n            int256 price,\r\n            uint256 startedAt,\r\n            uint256 timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeedETH.latestRoundData();\r\n\r\n        return uint256(price);\r\n    }\r\n\r\n    function checkPrivWhiteList(address userAddress)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (privWhiteList[userAddress]) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    function checkPubWhiteList(address userAddress) public view returns (bool) {\r\n        if (pubWhiteList[userAddress]) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    function setTime(\r\n        uint16 year,\r\n        uint8 month,\r\n        uint8 day,\r\n        uint8 hour,\r\n        uint8 minute,\r\n        uint8 second,\r\n        uint8 flag\r\n    ) public onlyOwner {\r\n        uint256 timestamp = toTimestamp(year, month, day, hour, minute, second);\r\n\r\n        if (flag == 0) privPresaleStartTime = timestamp;\r\n        else if (flag == 1) privPresaleEndTime = timestamp;\r\n        else if (flag == 2) pubPresaleStartTime = timestamp;\r\n        else if (flag == 3) pubPresaleEndTime = timestamp;\r\n    }\r\n\r\n    function setPrivPresaleCap(uint256 cap) public onlyOwner {\r\n        privPresaleCap = cap;\r\n    }\r\n\r\n    function setPubPresaleCap(uint256 cap) public onlyOwner {\r\n        pubPresaleCap = cap;\r\n    }\r\n\r\n    function setPrivPresaleMinLimit(uint256 _privPresaleMinLimit)\r\n        public\r\n        onlyOwner\r\n    {\r\n        privPresaleMinLimit = _privPresaleMinLimit;\r\n    }\r\n\r\n    function setPubPresaleMinLimit(uint256 _pubPresaleMinLimit)\r\n        public\r\n        onlyOwner\r\n    {\r\n        pubPresaleMinLimit = _pubPresaleMinLimit;\r\n    }\r\n\r\n    function addPrivWhiteList(address userAddress) public onlyOwner {\r\n        require(checkPrivWhiteList(userAddress) != true, \"Already exists\");\r\n        privWhiteList[userAddress] = true;\r\n    }\r\n\r\n    function removePrivWhiteList(address userAddress) public onlyOwner {\r\n        require(checkPrivWhiteList(userAddress) == true, \"No exist.\");\r\n        require(privUserExists(userAddress) == false, \"Already purchased\");\r\n        privWhiteList[userAddress] = false;\r\n    }\r\n\r\n    function addPubWhiteList(address userAddress) public onlyOwner {\r\n        require(checkPubWhiteList(userAddress) != true, \"Already exists\");\r\n        pubWhiteList[userAddress] = true;\r\n    }\r\n\r\n    function removePubWhiteList(address userAddress) public onlyOwner {\r\n        require(checkPubWhiteList(userAddress) == true, \"No exist.\");\r\n        require(pubUserExists(userAddress) == false, \"Already purchased\");\r\n        pubWhiteList[userAddress] = false;\r\n    }\r\n\r\n    function setServiceWallet(address _serviceWallet) public onlyOwner {\r\n        serviceWallet = _serviceWallet;\r\n    }\r\n\r\n    function withdraw() public payable onlyOwner {\r\n        address payable wallet = address(uint160(serviceWallet));\r\n        uint256 amount = address(this).balance;\r\n        wallet.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * Utils\r\n     */\r\n    //////////////////////////////////////////////////////////////////\r\n\r\n    function isLeapYear(uint16 year) private pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function toTimestamp(\r\n        uint16 year,\r\n        uint8 month,\r\n        uint8 day\r\n    ) private pure returns (uint256 timestamp) {\r\n        return toTimestamp(year, month, day, 0, 0, 0);\r\n    }\r\n\r\n    function toTimestamp(\r\n        uint16 year,\r\n        uint8 month,\r\n        uint8 day,\r\n        uint8 hour,\r\n        uint8 minute,\r\n        uint8 second\r\n    ) private pure returns (uint256 timestamp) {\r\n        uint32 DAY_IN_SECONDS = 86400;\r\n        uint32 YEAR_IN_SECONDS = 31536000;\r\n        uint32 LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n        uint32 HOUR_IN_SECONDS = 3600;\r\n        uint32 MINUTE_IN_SECONDS = 60;\r\n\r\n        uint16 ORIGIN_YEAR = 1970;\r\n\r\n        uint16 i;\r\n\r\n        // Year\r\n        for (i = ORIGIN_YEAR; i < year; i++) {\r\n            if (isLeapYear(i)) {\r\n                timestamp += LEAP_YEAR_IN_SECONDS;\r\n            } else {\r\n                timestamp += YEAR_IN_SECONDS;\r\n            }\r\n        }\r\n\r\n        // Month\r\n        uint8[12] memory monthDayCounts;\r\n        monthDayCounts[0] = 31;\r\n        if (isLeapYear(year)) {\r\n            monthDayCounts[1] = 29;\r\n        } else {\r\n            monthDayCounts[1] = 28;\r\n        }\r\n        monthDayCounts[2] = 31;\r\n        monthDayCounts[3] = 30;\r\n        monthDayCounts[4] = 31;\r\n        monthDayCounts[5] = 30;\r\n        monthDayCounts[6] = 31;\r\n        monthDayCounts[7] = 31;\r\n        monthDayCounts[8] = 30;\r\n        monthDayCounts[9] = 31;\r\n        monthDayCounts[10] = 30;\r\n        monthDayCounts[11] = 31;\r\n\r\n        for (i = 1; i < month; i++) {\r\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\r\n        }\r\n\r\n        // Day\r\n        timestamp += DAY_IN_SECONDS * (day - 1);\r\n\r\n        // Hour\r\n        timestamp += HOUR_IN_SECONDS * (hour);\r\n\r\n        // Minute\r\n        timestamp += MINUTE_IN_SECONDS * (minute);\r\n\r\n        // Second\r\n        timestamp += second;\r\n\r\n        return timestamp;\r\n    }\r\n}\r\n"
    }
  }
}