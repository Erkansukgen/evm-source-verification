{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DSA/curve_staking.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface TokenInterface {\n    function approve(address, uint256) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}\n\ninterface EventInterface {\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n}\n\ncontract Stores {\n  /**\n   * @dev Return memory variable address\n   */\n  function getMemoryAddr() internal pure returns (address) {\n    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n  }\n\n  /**\n   * @dev Return InstaEvent Address.\n   */\n  function getEventAddr() internal pure returns (address) {\n    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n  }\n\n  /**\n   * @dev Get Uint value from InstaMemory Contract.\n   */\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n  }\n\n  /**\n  * @dev Set Uint value in InstaMemory Contract.\n  */\n  function setUint(uint setId, uint val) virtual internal {\n    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n  }\n\n  /**\n  * @dev emit event on event contract\n  */\n  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\n    (uint model, uint id) = connectorID();\n    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n  }\n\n  /**\n  * @dev Connector Details.\n  */\n  function connectorID() public view returns(uint model, uint id) {\n    (model, id) = (1, 39);\n  }\n\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n}\n\ncontract DSMath {\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\n    z = SafeMath.sub(x, y);\n  }\n}\n\ninterface ICurve {\n  function claim(address addr) external;\n}\n\ncontract CurveVestingHelpers is Stores, DSMath {\n  /**\n  * @dev Return Curve Token Address\n  */\n  function getCurveTokenAddr() internal pure returns (address) {\n    return 0xD533a949740bb3306d119CC777fa900bA034cd52;\n  }\n\n  /**\n  * @dev Return Curve Vesting Address\n  */\n  function getCurveVestingAddr() internal pure returns (address) {\n    return 0x575CCD8e2D300e2377B43478339E364000318E2c;\n  }\n}\n\ncontract CurveVestingProtocol is CurveVestingHelpers {\n  event LogClaim(address account, uint256 claimAmount, uint256 getId, uint256 setId);\n\n  /**\n  * @dev Claim Curve DAO Token.\n  * @param getId Get token amount at this ID from `InstaMemory` Contract.\n  * @param setId Set token amount at this ID in `InstaMemory` Contract.\n  */\n  function claim(uint getId, uint setId) external{\n    TokenInterface curveTokenContract = TokenInterface(getCurveTokenAddr());\n\n    uint initialCurveBal = curveTokenContract.balanceOf(address(this));\n    ICurve(getCurveVestingAddr()).claim(address(this));\n    uint finalCurveBal = curveTokenContract.balanceOf(address(this));\n\n    uint claimedAmt = sub(finalCurveBal, initialCurveBal);\n\n    setUint(setId, claimedAmt);\n\n    emit LogClaim(address(this), claimedAmt, getId, setId);\n    bytes32 _eventCode = keccak256(\"LogClaim(address,uint256,uint256,uint256)\");\n    bytes memory _eventParam = abi.encode(address(this), claimedAmt, getId, setId);\n    emitEvent(_eventCode, _eventParam);\n  }\n}\n\ncontract ConnectCurveVesting is CurveVestingProtocol {\n  string public name = \"Curve-vesting-v1\";\n}\n"}}}