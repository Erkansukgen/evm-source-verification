{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MAJORIS_Token.sol":{"content":"/**\r\n    * Dev. `Akena Ver.3.0.5: lockTime`\r\n    */\r\n\r\npragma solidity >=0.4.16 < 0.9.0;\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable{\r\n    event Paused(address account);\r\n   \r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Token{\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 9;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n   \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    constructor(uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\r\n        name = tokenName;                                       // Set the name for display purposes\r\n        symbol = tokenSymbol;                                   // Set the symbol for display purposes\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0));\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                              // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                                                  // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                                        // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);                // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);                                                  // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract MAJORIS_Token is ERC20Token, Ownable,Pausable{\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    mapping(address => uint256) public lockedAccount;\r\n\r\n    event FreezeAccount(address account, bool frozen);\r\n\r\n    event LockAccount(address account,uint256 unlockTime);\r\n\r\n    constructor() ERC20Token(500000000,\"MAJORIS\",\"MJT\") public {\r\n    }\r\n\r\n   /**\r\n    * Freeze of Account\r\n    */\r\n    function freezeAccount(address account) onlyOwner public {\r\n        frozenAccount[account] = true;\r\n        emit FreezeAccount(account, true);\r\n    }\r\n\r\n   /**\r\n    * unFreeze of Account\r\n    */\r\n    function unFreezeAccount(address account) onlyOwner public{\r\n        frozenAccount[account] = false;\r\n        emit FreezeAccount(account, false);\r\n    }\r\n\r\n   /**\r\n    * lock Account, if account is locked, fund can only transfer in but not transfer out.\r\n    * Can not unlockAccount, if need unlock account , pls call unlockAccount interface\r\n    * epoch time, not milliseconds\r\n    */\r\n    function lockAccount(address account, uint256 unlockTime) onlyOwner public{\r\n        require(unlockTime > now);\r\n        lockedAccount[account] = unlockTime;\r\n        emit LockAccount(account,unlockTime);\r\n    }\r\n\r\n   /**\r\n    * unlock of Account\r\n    */\r\n    function unlockAccount(address account) onlyOwner public{\r\n        lockedAccount[account] = 0;\r\n        emit LockAccount(account,0);\r\n    }\r\n\r\n    function changeName(string memory newName) public onlyOwner {\r\n        name = newName;\r\n    }\r\n\r\n    function changeSymbol(string memory newSymbol) public onlyOwner{\r\n        symbol = newSymbol;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal whenNotPaused {\r\n        //Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0));\r\n\r\n        //if account is frozen, then fund can not be transfer in or out.\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n\r\n        //if account is locked, then fund can only transfer in but can not transfer out.\r\n        require(!isAccountLocked(_from));\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function isAccountLocked(address account) public view returns (bool) {\r\n        return lockedAccount[account] > now;\r\n    }\r\n\r\n    function isAccountFrozen(address account) public view returns (bool){\r\n        return frozenAccount[account];\r\n    }\r\n}"}}}