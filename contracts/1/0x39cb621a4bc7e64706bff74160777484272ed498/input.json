{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/MyContract.sol":{"content":"pragma solidity ^0.6.7;\n\nimport \"https://github.com/smartcontractkit/chainlink/evm-contracts/src/v0.6/interfaces/AggregatorInterface.sol\";\n\ncontract MyContract {\n    AggregatorInterface internal priceFeed;\n\n    \n    function getOneDollarOfEth() public {\n        int256 price = getLatestPrice();\n        int256 amountToSend = 1 ether / price;\n        msg.sender.transfer(uint256(amountToSend));\n    }\n    \n    function getLatestPrice() private view returns (int256) {\n        return priceFeed.latestAnswer();\n    }\n    \n    function addMoney() public payable {}\n    \n    constructor() public {\n        priceFeed = AggregatorInterface(0xF79D6aFBb6dA890132F9D7c355e3015f15F3406F);\n    }\n\n}"},"https://github.com/smartcontractkit/chainlink/evm-contracts/src/v0.6/interfaces/AggregatorInterface.sol":{"content":"pragma solidity >=0.6.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"}}}