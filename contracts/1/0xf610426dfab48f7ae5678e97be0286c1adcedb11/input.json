{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DssExecFactory.sol":{"content":"\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.6.7 <0.7.0;\n\n// DssExecFactory v0.0.2\n// https://github.com/makerdao/dss-exec-lib/releases/tag/v0.0.2\n\n////// src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.7; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    string                  public description;\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        require(eta != 0, \"DssExec/spell-not-scheduled\");\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\n\n        if (SpellAction(action).officeHours()) {\n            uint256 day    = (castTime / 1 days + 3) % 7;\n            uint256 hour   = castTime / 1 hours % 24;\n            uint256 minute = castTime / 1 minutes % 60;\n            uint256 second = castTime % 60;\n\n            if (day >= 5) {\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\n            } else {\n                if (hour >= 21) {\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n                } else if (hour < 14) {\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n                }\n            }\n        }\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        description = _description;\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// src/DssExecFactory.sol\n//\n// DssExecFactory.sol -- MakerDAO Executive Spell Deployer\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.7; */\n\n/* import \"./DssExec.sol\"; */\n\ncontract DssExecFactory {\n\n    // An on-chain factory for creating new DssExec contracts.\n    //\n    // @param description  A string description of the spell\n    // @param expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param spellAction  The address of the spell action contract (DssAction)\n    function newExec(string memory description, uint256 expiration, address spellAction) public returns (address exec) {\n        exec = address(new DssExec(description, expiration, spellAction));\n    }\n\n    function newWeeklyExec(string memory description, address spellAction) public returns (address exec) {\n        exec = newExec(description, now + 30 days, spellAction);\n    }\n\n    function newMonthlyExec(string memory description, address spellAction) public returns (address exec) {\n        exec = newExec(description, now + 4 days, spellAction);\n    }\n}\n\n"}}}