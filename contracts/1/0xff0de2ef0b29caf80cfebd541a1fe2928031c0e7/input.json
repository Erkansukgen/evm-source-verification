{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/cc_v2_fin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0-only\npragma solidity >=0.4.22 <=0.7.0;\n\nabstract contract FiatContract {\n  function ETH(uint _id) public virtual view returns (uint256);\n  function USD(uint _id) public virtual view returns (uint256);\n  function EUR(uint _id) public virtual  view returns (uint256);\n  function GBP(uint _id) public virtual  view returns (uint256);\n  function updatedAt(uint _id) public virtual view returns (uint);\n}\n\n/**\n * @title CyberCash\n */\ncontract CyberCash {\n    address payable private APIOwner;\n    uint8 private APIOwnerCommision = 2; // percents\n    mapping(bytes32 => bool) private FPS;\n\n///////////////////////////////////////////////////////////\n    constructor() public {\n        APIOwner = msg.sender;\n    }\n\n    function Convert(uint ACurrencyFromID, uint ACurrencyToID) external view returns(uint) {\n        FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591);\n\n        if (ACurrencyFromID == 0) {\n            return price.ETH(ACurrencyToID);\n        } else {\n            if (ACurrencyFromID == 1) {\n                return price.USD(ACurrencyToID);\n            } else {\n                if (ACurrencyFromID == 2) {\n                    return price.EUR(ACurrencyToID);\n                } else {\n                    if (ACurrencyFromID == 3) {\n                        return price.GBP(ACurrencyToID);\n                    } else {\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n    \n    \n    function Pay(address payable ASeller, string memory AProductGUID, string memory AReference) public payable {\n        uint SellerAmount = msg.value - msg.value * APIOwnerCommision / 100;\n        uint APIOwnerCommisionAmount = msg.value - SellerAmount;\n\n        ASeller.transfer(SellerAmount);\n        APIOwner.transfer(APIOwnerCommisionAmount);\n        \n        FPS[keccak256(abi.encodePacked(msg.sender, AProductGUID, AReference, ASeller))] = true;\n    }\n    \n    function Check(address ASeller, address ABuyer, string memory AProductGUID, string memory AReference) public view returns(bool)\n    {\n        return FPS[keccak256(abi.encodePacked(ABuyer, AProductGUID, AReference, ASeller))];\n    }\n\n}"
    }
  }
}