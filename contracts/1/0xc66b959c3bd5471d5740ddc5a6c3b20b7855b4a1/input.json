{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"nft.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\npragma abicoder v2;\n/// @notice Minimalist NFT minter for Meowshi holders.\ncontract MeowshiNFT {\n    uint256 public totalSupply;\n    string constant public name = \"Meowshi NFT\";\n    string constant public symbol = \"mNFT\";\n    address constant public meowTimelock = 0x148E15fdBc6403F8A52F17Bdd4332efa79e04564;\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(uint256 => address) public getApproved;\n    mapping(uint256 => address) public ownerOf;\n    mapping(uint256 => string) public tokenURI;\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n    \n    event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed approver, address indexed operator, bool approved);\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    function supportsInterface(bytes4 sig) external pure returns (bool) {\n        return (sig == 0x80ac58cd || sig == 0x5b5e139f); // ERC-165\n    }\n    \n    function approve(address spender, uint256 tokenId) external {\n        address owner = ownerOf[tokenId];\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"!owner/operator\");\n        getApproved[tokenId] = spender;\n        emit Approval(msg.sender, spender, tokenId); \n    }\n    \n    function setApprovalForAll(address operator, bool approved) external {\n        isApprovedForAll[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function mint(uint256 tokenId, string calldata _tokenURI) external { \n        require(msg.sender == meowTimelock, '!meowDAO');\n        require(ownerOf[tokenId] == address(0), 'tokenId !unique');\n        totalSupply++;\n        balanceOf[msg.sender]++;\n        ownerOf[tokenId] = msg.sender;\n        tokenURI[tokenId] = _tokenURI;\n        emit Transfer(address(0), msg.sender, tokenId); \n    }\n\n    function transfer(address to, uint256 tokenId) external {\n        require(msg.sender == ownerOf[tokenId], '!owner');\n        balanceOf[msg.sender]--; \n        balanceOf[to]++; \n        getApproved[tokenId] = address(0);\n        ownerOf[tokenId] = to;\n        emit Transfer(msg.sender, to, tokenId); \n    }\n    \n    function transferFrom(address, address to, uint256 tokenId) external {\n        address owner = ownerOf[tokenId];\n        require(msg.sender == owner || getApproved[tokenId] == msg.sender || isApprovedForAll[owner][msg.sender], '!owner/spender/operator');\n        balanceOf[owner]--; \n        balanceOf[to]++; \n        getApproved[tokenId] = address(0);\n        ownerOf[tokenId] = to;\n        emit Transfer(owner, to, tokenId); \n    }\n}"}}}