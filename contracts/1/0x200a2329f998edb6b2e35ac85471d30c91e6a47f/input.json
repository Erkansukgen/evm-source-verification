{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/interfaces/IPriceFeeds.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\npragma solidity 0.8.0;\n\ninterface IPriceFeeds {\n\n    function getThePrice() external view returns (uint);\n}"
    },
    "contracts/network demand/DIAPriceFeeds.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\npragma solidity 0.8.0;\n\nimport \"../interfaces/IPriceFeeds.sol\";\n\ninterface IDIAOracle {\n    function getValue(string memory key) external view returns (uint128, uint128);\n}\n\n/*\n*   Wrapper contract to get the price feeds from oracles and provide it to other contracts\n*/\ncontract DIAPriceFeed is IPriceFeeds{\n\n    IDIAOracle private immutable ref;\n\n    /**\n     *  0x35b49eddb46dbc33336f3a0410008b7be98d4a3a - BSC\n     *  0x09B114dAC9b0848819a59E944D631B98E06CDfA3 - ETHEREUM\n     * */\n    constructor() {\n        ref = IDIAOracle(0x09B114dAC9b0848819a59E944D631B98E06CDfA3);\n    }\n\n    /**\n     *  Returns the price using 8 decimals\n     * */\n    function getThePrice() external view override returns (uint){\n        (uint value, ) = ref.getValue(\"DAFI/USD\");\n        return value;\n    }\n}"
    }
  }
}