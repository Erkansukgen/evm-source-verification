{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled1.sol":{"content":"pragma solidity ^0.5.12;\r\n\r\ncontract Token {\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {}\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardERC20Token is Token {\r\n    \r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    uint256 public totalSupply;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n   \r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n\r\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string  memory _tokenSymbol) public {\r\n        totalSupply = _initialAmount * 10 ** uint256(decimals);     // Update total supply with the decimal amount\r\n        balances[msg.sender] = totalSupply;                         // Give the creator all initial tokens\r\n        name = _tokenName;                                          // Set the name for display purposes\r\n        decimals = _decimalUnits;                                   // Amount of decimals for display purposes\r\n        symbol = _tokenSymbol;                                      // Set the symbol for display purposes\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n"}}}