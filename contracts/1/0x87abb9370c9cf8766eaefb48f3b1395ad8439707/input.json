{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Composite_Vaults/Eth_Wbtc/CompositeVaultController_BptEthWbtc.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface ILpPairStrategy {\n    function lpPair() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function deposit() external;\n    function withdraw(address _asset) external;\n    function withdraw(uint _amount) external returns (uint);\n    function withdrawToController(uint _amount) external;\n    function skim() external;\n    function harvest(address _mergedStrategy) external;\n    function withdrawAll() external returns (uint);\n    function balanceOf() external view returns (uint);\n    function withdrawFee(uint) external view returns (uint); // pJar: 0.5% (50/10000)\n}\n\ninterface ICompositeVault {\n    function cap() external view returns (uint);\n    function getConverter() external view returns (address);\n    function getVaultMaster() external view returns (address);\n    function balance() external view returns (uint);\n    function tvl() external view returns (uint); // total dollar value\n    function token() external view returns (address);\n    function available() external view returns (uint);\n    function accept(address _input) external view returns (bool);\n\n    function earn() external;\n    function harvest(address reserve, uint amount) external;\n    function addNewCompound(uint, uint) external;\n\n    function withdraw_fee(uint _shares) external view returns (uint);\n    function calc_token_amount_deposit(address _input, uint _amount) external view returns (uint);\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\n\n    function getPricePerFullShare() external view returns (uint);\n    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\n\n\n    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint);\n    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\n    function addLiquidity(uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint);\n    function addLiquidityFor(address _account, address _to, uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint _mint_amount);\n    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\n    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\n\n    function harvestStrategy(address _strategy) external;\n    function harvestAllStrategies() external;\n}\n\ninterface Converter {\n    function convert(address) external returns (uint);\n}\n\ncontract CompositeVaultController_BptEthWbtc {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint;\n\n    address public governance;\n    address public strategist;\n\n    struct StrategyInfo {\n        address strategy;\n        uint quota; // set = 0 to disable\n        uint percent;\n    }\n\n    ICompositeVault public vault;\n    string public name = \"CompositeVaultController:BptEthWbtc\";\n\n    address public want;\n    uint public strategyLength;\n\n    // stratId => StrategyInfo\n    mapping(uint => StrategyInfo) public strategies;\n\n    mapping(address => bool) public approvedStrategies;\n\n    bool public investDisabled;\n\n    address public lazySelectedBestStrategy; // we pre-set the best strategy to avoid gas cost of iterating the array\n\n    constructor(ICompositeVault _vault) public {\n        require(address(_vault) != address(0), \"!_vault\");\n        vault = _vault;\n        want = vault.token();\n        governance = msg.sender;\n        strategist = msg.sender;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    modifier onlyStrategist() {\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n        _;\n    }\n\n    modifier onlyAuthorized() {\n        require(msg.sender == address(vault) || msg.sender == strategist || msg.sender == governance, \"!authorized\");\n        _;\n    }\n    \n    function setName(string memory _name) external onlyGovernance {\n        name = _name;\n    }\n\n    function setGovernance(address _governance) external onlyGovernance {\n        governance = _governance;\n    }\n\n    function setStrategist(address _strategist) external onlyGovernance {\n        strategist = _strategist;\n    }\n\n    function approveStrategy(address _strategy) external onlyGovernance {\n        approvedStrategies[_strategy] = true;\n    }\n\n    function revokeStrategy(address _strategy) external onlyGovernance {\n        approvedStrategies[_strategy] = false;\n    }\n\n    function setStrategyLength(uint _length) external onlyStrategist {\n        strategyLength = _length;\n    }\n\n    // stratId => StrategyInfo\n    function setStrategyInfo(uint _sid, address _strategy, uint _quota, uint _percent) external onlyStrategist {\n        require(approvedStrategies[_strategy], \"!approved\");\n        strategies[_sid].strategy = _strategy;\n        strategies[_sid].quota = _quota;\n        strategies[_sid].percent = _percent;\n    }\n\n    function setInvestDisabled(bool _investDisabled) external onlyStrategist {\n        investDisabled = _investDisabled;\n    }\n\n    function setLazySelectedBestStrategy(address _strategy) external onlyStrategist {\n        require(approvedStrategies[_strategy], \"!approved\");\n        require(ILpPairStrategy(_strategy).lpPair() == want, \"!want\");\n        lazySelectedBestStrategy = _strategy;\n    }\n\n    function getStrategyCount() external view returns(uint _strategyCount) {\n        _strategyCount = strategyLength;\n    }\n\n    function getBestStrategy() public view returns (address _strategy) {\n        if (lazySelectedBestStrategy != address(0)) {\n            return lazySelectedBestStrategy;\n        }\n        _strategy = address(0);\n        if (strategyLength == 0) return _strategy;\n        uint _totalBal = balanceOf();\n        if (_totalBal == 0) return strategies[0].strategy; // first depositor, simply return the first strategy\n        uint _bestDiff = 201;\n        for (uint _sid = 0; _sid < strategyLength; _sid++) {\n            StrategyInfo storage sinfo = strategies[_sid];\n            uint _stratBal = ILpPairStrategy(sinfo.strategy).balanceOf();\n            if (_stratBal < sinfo.quota) {\n                uint _diff = _stratBal.add(_totalBal).mul(100).div(_totalBal).sub(sinfo.percent); // [100, 200] - [percent]\n                if (_diff < _bestDiff) {\n                    _bestDiff = _diff;\n                    _strategy = sinfo.strategy;\n                }\n            }\n        }\n        if (_strategy == address(0)) {\n            _strategy = strategies[0].strategy;\n        }\n    }\n\n    function earn(address _token, uint _amount) external onlyAuthorized {\n        address _strategy = getBestStrategy();\n        if (_strategy == address(0) || ILpPairStrategy(_strategy).lpPair() != _token) {\n            // forward to vault and then call earnExtra() by its governance\n            IERC20(_token).safeTransfer(address(vault), _amount);\n        } else {\n            IERC20(_token).safeTransfer(_strategy, _amount);\n            ILpPairStrategy(_strategy).deposit();\n        }\n    }\n\n    function withdraw_fee(uint _amount) external view returns (uint) {\n        address _strategy = getBestStrategy();\n        return (_strategy == address(0)) ? 0 : ILpPairStrategy(_strategy).withdrawFee(_amount);\n    }\n\n    function balanceOf() public view returns (uint _totalBal) {\n        for (uint _sid = 0; _sid < strategyLength; _sid++) {\n            _totalBal = _totalBal.add(ILpPairStrategy(strategies[_sid].strategy).balanceOf());\n        }\n    }\n\n    function withdrawAll(address _strategy) external onlyStrategist {\n        // WithdrawAll sends 'want' to 'vault'\n        ILpPairStrategy(_strategy).withdrawAll();\n    }\n\n    function inCaseTokensGetStuck(address _token, uint _amount) external onlyStrategist {\n        IERC20(_token).safeTransfer(address(vault), _amount);\n    }\n\n    function inCaseStrategyGetStuck(address _strategy, address _token) external onlyStrategist {\n        ILpPairStrategy(_strategy).withdraw(_token);\n        IERC20(_token).safeTransfer(address(vault), IERC20(_token).balanceOf(address(this)));\n    }\n\n    // note that some strategies do not allow controller to harvest\n    function harvestStrategy(address _strategy) external onlyAuthorized {\n        ILpPairStrategy(_strategy).harvest(address(0));\n    }\n\n    function harvestAllStrategies() external onlyAuthorized {\n        address _firstStrategy = address(0); // to send all harvested WETH and proceed the profit sharing all-in-one here\n        for (uint _sid = 0; _sid < strategyLength; _sid++) {\n            StrategyInfo storage sinfo = strategies[_sid];\n            if (_firstStrategy == address(0)) {\n                _firstStrategy = sinfo.strategy;\n            } else {\n                ILpPairStrategy(sinfo.strategy).harvest(_firstStrategy);\n            }\n        }\n        if (_firstStrategy != address(0)) {\n            ILpPairStrategy(_firstStrategy).harvest(address(0));\n        }\n    }\n\n    function switchFund(ILpPairStrategy _srcStrat, ILpPairStrategy _destStrat, uint _amount) external onlyStrategist {\n        require(approvedStrategies[address(_destStrat)], \"!approved\");\n        require(_srcStrat.lpPair() == want, \"!_srcStrat.lpPair\");\n        require(_destStrat.lpPair() == want, \"!_destStrat.lpPair\");\n        _srcStrat.withdrawToController(_amount);\n        IERC20(want).safeTransfer(address(_destStrat), IERC20(want).balanceOf(address(this)));\n        _destStrat.deposit();\n    }\n\n    function withdraw(uint _amount) external onlyAuthorized returns (uint _withdrawFee) {\n        _withdrawFee = 0;\n        uint _toWithdraw = _amount;\n        uint _received;\n        for (uint _sid = strategyLength; _sid > 0; _sid--) {\n            StrategyInfo storage sinfo = strategies[_sid - 1];\n            ILpPairStrategy _strategy = ILpPairStrategy(sinfo.strategy);\n            uint _stratBal = _strategy.balanceOf();\n            if (_toWithdraw < _stratBal) {\n                _received = _strategy.withdraw(_toWithdraw);\n                _withdrawFee = _withdrawFee.add(_strategy.withdrawFee(_received));\n                return _withdrawFee;\n            }\n            _received = _strategy.withdrawAll();\n            _withdrawFee = _withdrawFee.add(_strategy.withdrawFee(_received));\n            if (_received >= _toWithdraw) {\n                return _withdrawFee;\n            }\n            _toWithdraw = _toWithdraw.sub(_received);\n        }\n        return _withdrawFee;\n    }\n}\n"}}}