{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/chadogeairdrop.sol":{"content":"/**\r\n *SPDX-License-Identifier: Unlicensed\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ChadogeAirdrop {\r\n    uint256 public total;    \r\n    uint256 public airdrop = 1 * 10**9;\r\n    address public Token;\r\n    mapping(address => bool) public claimed;\r\n\t\r\n    event Claimed(address addr,uint256 n);\r\n    constructor(address _tokenAddress) public {  \r\n        Token = _tokenAddress;\r\n    }  \r\n    function claimAirdrop() external {\r\n\t\trequire(tx.gasprice>=30,\"not fair\");\r\n        require(!claimed[msg.sender],\"claimed\");\r\n        claimed[msg.sender]=true;\r\n        total++;\r\n        IERC20 token = IERC20(Token);\r\n        uint256 tb = token.balanceOf(address(this));\r\n        require(airdrop<=tb,\"not enough\");\r\n        token.transfer(msg.sender,airdrop);\r\n        emit Claimed(msg.sender,total);\r\n    }\r\n}\r\n\r\n"}}}