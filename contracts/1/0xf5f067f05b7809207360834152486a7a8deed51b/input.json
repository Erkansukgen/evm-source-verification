{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ERC20contract.sol": {
      "content": "pragma solidity ^0.6.0;\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\nabstract contract ERC20Interface {\n    function totalSupply() public virtual view returns (uint);\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}"
    },
    "browser/Maverick.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// ----------------------------------------------------------------------------\n// 'Maverick' token contract\n\n// Symbol      : Maverick\n// Name        : MAV\n// Total supply: 21,000,000,000 (21 billion)\n// Decimals    : 2\n// ----------------------------------------------------------------------------\n\nimport './SafeMath.sol';\nimport './ERC20contract.sol';\nimport './Owned.sol';\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract Token is ERC20Interface, Owned {\n    using SafeMath for uint256;\n    string public symbol = \"MAV\";\n    string public  name = \"Maverick\";\n    uint256 public decimals = 2;\n    uint256 _totalSupply = 21e9* 10 ** (decimals); \n    uint256 soldTokens;\n    \n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    \n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        owner = 0x93aD29093C3EdE3fa10188cee35d07dfe91A65b9;\n        balances[address(this)] = totalSupply();\n        \n        emit Transfer(address(0),address(this), totalSupply());\n    }\n    \n    receive() external payable{\n        // receive ethers\n        require(msg.value >= 0.01 ether);\n        uint tokens = getTokenAmount(msg.value);\n        _transfer(msg.sender, tokens);\n        // send received funds to the owner\n        owner.transfer(msg.value);\n    }\n    \n    function getTokenAmount(uint256 amount) internal pure returns(uint256){\n        return (amount*200000)/1e18;\n    }\n    \n    /** ERC20Interface function's implementation **/\n    \n    function totalSupply() public override view returns (uint256){\n       return _totalSupply; \n    }\n    \n    function totalTokensSold() public view returns(uint256){\n        return soldTokens;\n    }\n    \n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n        return balances[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\n        // prevent transfer to 0x0, use burn instead\n        require(address(to) != address(0));\n        require(balances[msg.sender] >= tokens );\n        require(balances[to] + tokens >= balances[to]);\n            \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender,to,tokens);\n        return true;\n    }\n    \n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint256 tokens) public override returns (bool success){\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender,spender,tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n        require(tokens <= allowed[from][msg.sender]); //check allowance\n        require(balances[from] >= tokens);\n            \n        balances[from] = balances[from].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        emit Transfer(from,to,tokens);\n        return true;\n    }\n    \n    function donations(address to, uint256 tokens) public onlyOwner {\n        _transfer(to, tokens);\n    }\n    \n    function _transfer(address to, uint256 tokens) internal {\n        // prevent transfer to 0x0, use burn instead\n        require(address(to) != address(0));\n        require(balances[address(this)] >= tokens );\n        require(balances[to] + tokens >= balances[to]);\n            \n        balances[address(this)] = balances[address(this)].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        soldTokens += tokens;\n        emit Transfer(address(this),to,tokens);\n    }\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    // ------------------------------------------------------------------------\n    // Burn the ``value` amount of tokens from the `account`\n    // ------------------------------------------------------------------------\n    function burnTokens(uint256 value) public onlyOwner {\n        _burn(value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * @param value The amount that will be burnt.\n     */\n    function _burn(uint256 value) internal {\n        require(_totalSupply - soldTokens >= value); // burn only unsold tokens\n        _totalSupply = _totalSupply.sub(value);\n        balances[address(this)] = balances[address(this)].sub(value);\n        emit Transfer(address(this), address(0), value);\n    }\n}"
    },
    "browser/Owned.sol": {
      "content": "pragma solidity ^0.6.0;\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}"
    },
    "browser/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}"
    }
  }
}