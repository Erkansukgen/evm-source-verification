{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/TokensTypeStorage.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n* Logic: Permitetd addresses can write to this contract types of converted tokens\n*\n* Motivation:\n* Due fact tokens can be different like Uniswap/Bancor pool, Synthetix, Compound ect\n* we need a certain method for convert a certain token.\n* so we flag type for new token once after success convert\n*/\n\n\n\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract TokensTypeStorage is Ownable {\n  // check if token alredy registred\n  mapping(address => bool) public isRegistred;\n  // tokens types\n  mapping(address => bytes32) public getType;\n  // return true if input type alredy exist\n  mapping(bytes32 => bool) public isTypeRegistred;\n  // addresses which can write to this contract\n  mapping(address => bool) public isPermittedAddress;\n\n  // all available types\n  bytes32[] public allTypes;\n\n  modifier onlyPermitted() {\n    require(isPermittedAddress[msg.sender], \"Sender not have permition for edit this contract\");\n    _;\n  }\n\n  // allow add new token type from trade portals\n  function addNewTokenType(address _token, string calldata _type) external onlyPermitted {\n    // Don't flag this token if this token alredy registred\n    if(isRegistred[_token])\n      return;\n\n    // convert string to bytes32\n    bytes32 typeToBytes = stringToBytes32(_type);\n\n    // flag new token\n    getType[_token] = typeToBytes;\n    isRegistred[_token] = true;\n\n    // Add new type\n    if(!isTypeRegistred[typeToBytes]){\n      isTypeRegistred[typeToBytes] = true;\n      allTypes.push(typeToBytes);\n    }\n  }\n\n\n  // allow update token type from owner wallet\n  function setTokenTypeAsOwner(address _token, string calldata _type) external onlyOwner{\n    // convert string to bytes32 \n    bytes32 typeToBytes = stringToBytes32(_type);\n\n    // flag token with new type\n    getType[_token] = typeToBytes;\n    isRegistred[_token] = true;\n\n    // if new type unique add it to the list\n    if(!isTypeRegistred[typeToBytes]){\n      isTypeRegistred[typeToBytes] = true;\n      allTypes.push(typeToBytes);\n    }\n  }\n\n\n\n  function addNewPermittedAddress(address _permitted) public onlyOwner {\n    isPermittedAddress[_permitted] = true;\n  }\n\n  function removePermittedAddress(address _permitted) public onlyOwner {\n    isPermittedAddress[_permitted] = false;\n  }\n\n  // helper for convert dynamic string size to fixed bytes32 size\n  function stringToBytes32(string memory source) private pure returns (bytes32 result) {\n    bytes memory tempEmptyStringTest = bytes(source);\n    if (tempEmptyStringTest.length == 0) {\n        return 0x0;\n    }\n\n    assembly {\n        result := mload(add(source, 32))\n    }\n   }\n}\n"
    }
  }
}