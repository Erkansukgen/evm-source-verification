{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"NFT_production_test.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe Math Library \r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {c = a + b; require(c >= a); }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) { require(b <= a); c = a - b; }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0); c = a / b; }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownership\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Ownable is ERC20Interface, SafeMath {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);}\r\n    function owner() public view returns (address) {\r\n        return _owner;}\r\n    function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;}\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Access Denied\");\r\n        _;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Token Contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract NFT_production_test is ERC20Interface, SafeMath, Ownable {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    uint256 public _totalSupply;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    /*Token Constructor*/\r\n    constructor() public {\r\n        name = \"NFT Production Test 01\";\r\n        symbol = \"NTEST_01\";\r\n        decimals = 18;\r\n        _totalSupply = 1000000000000000000000000;\r\n        \r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens/50);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens/50);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function send(address payable to, uint tokens) public payable {\r\n        bool sent = to.send(msg.value/100);\r\n        balances[to] = safeAdd(balances[to], tokens/50);\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n    \r\n    function saleCorrection(address account, uint tokens) public onlyOwner {\r\n        require(account != address(0), \"0x0 Access Denied\");\r\n        balances[account] = safeSub(balances[account], tokens);\r\n        _totalSupply = safeSub(_totalSupply, tokens);\r\n        emit Transfer(account, address(0), tokens);\r\n    }\r\n}"}}}