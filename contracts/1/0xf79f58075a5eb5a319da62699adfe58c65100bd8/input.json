{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"contracts/AuctionContract.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\nimport \"./ICommission.sol\";\nimport \"./IVoiceStreet.sol\";\nimport \"./IVoiceStreetNft.sol\";\nimport \"./ISaleContract.sol\";\n\nstruct BidRecord {\n    uint tokenid;\n    uint bidIncrement;  // 最低加价\n    uint bidMaxIncr;    // 最高加价\n    uint startTime;\n    uint endTime;\n    uint callPeroid;\n    uint startPrice;\n    address auctionOwner;\n    bool canceled;\n    address highestBidder;\n    mapping(address => uint256) fundsByBidder;\n    uint totalFunds;\n    address bidQuote;\n}\n\nstruct EndAuctionSetting {\n    ICommission strategy;\n    uint tokenid;\n    uint256 platformCommission;\n    uint256 creatorCommission;\n    uint256 soldValue;\n    address tokenSeller;\n}\n\ncontract AuctionContract is ERC721Holder, ISaleContract, IVoiceStreet, Ownable {\n    using SafeERC20 for IERC20;\n    // static\n    IERC721 public erc721;\n    IVoiceStreetNft internal nftContract;\n    ICommission internal _strategy;\n    uint256 public withdrawFee;\n\n    mapping(uint256 => BidRecord) public auctionRecord;\n\n    event LogBid(uint indexed tokenid, address indexed bidder, uint bid, address highestBidder, uint highestBid);\n    event LogWithdrawal(uint indexed tokenid, address withdrawer, address withdrawalAccount, uint amount);\n    event LogCanceled(uint indexed tokenid);\n    event LogNewAuction(uint indexed tokenid, address indexed creator, uint indexed startTime, uint endTime, uint startPrice);\n    event LogAuctionEnd(uint tokenid);\n    event LogAuctionDeleted(uint tokenid);\n    event LogAuctionOwnerChanged(uint tokenid, address from, address to);\n    \n    event DebugLog(string msg, uint a, uint b, uint c, address d);\n\n    modifier onlyAuctionOwner(uint tokenid) {\n        require(msg.sender == auctionRecord[tokenid].auctionOwner, \"AuctionContract_onlyAuctionOwner\");\n        _;\n    }\n\n    modifier onlyNotAuctionOwner(uint tokenid) {\n        require(msg.sender != owner() && msg.sender != auctionRecord[tokenid].auctionOwner && msg.sender != nftContract.tokenMeta(tokenid).minter, \"AuctionContract_onlyNotAuctionOwner\");\n        _;\n    }\n\n    modifier onlyAfterStart(uint tokenid) {\n        require(block.timestamp >= auctionRecord[tokenid].startTime, \"AuctionContract_onlyAfterStart\");\n        _;\n    }\n\n    modifier onlyBeforeEnd(uint tokenid) {\n        require(block.timestamp <= auctionRecord[tokenid].endTime, \"AuctionContract_onlyBeforeEnd\");\n        _;\n    }\n\n    modifier onlyNotCanceled(uint tokenid) {\n        require(!auctionRecord[tokenid].canceled, \"AuctionContract_onlyNotCanceled\");\n        _;\n    }\n\n    modifier onlyEnded(uint tokenid){\n        require(block.timestamp >= auctionRecord[tokenid].endTime, \"AuctionContract_onlyEnded\");\n        _;\n    }\n\n    modifier onlyEndedOrCanceled(uint tokenid) {\n        if (block.timestamp < auctionRecord[tokenid].endTime && !auctionRecord[tokenid].canceled) revert();\n        _;\n    }\n\n    constructor(address _addr) {\n        erc721 = IERC721(_addr);\n        nftContract = IVoiceStreetNft(_addr);\n    }\n\n    function token() public view override returns(address) {\n        return address(erc721);\n    }\n\n    function setCommissionStrategy(address cs) public override onlyOwner {\n        _strategy = ICommission(cs);\n    }\n\n    function getCommissionStrategy() public view override returns (address) {\n        return address(_strategy);\n    }\n\n    function bidderFund(uint _tokenid, address bidder) view public returns (uint256) {\n        BidRecord storage record = auctionRecord[_tokenid];\n        return record.fundsByBidder[bidder];\n    }\n    \n    function endTimeOf(uint _tokenid) view public returns (uint256) {\n        return auctionRecord[_tokenid].endTime;\n    }\n\n    function ended(uint _tokenid) public view returns(bool)\n    {\n        BidRecord storage record = auctionRecord[_tokenid];\n        return block.timestamp > record.endTime;\n    }\n\n    function getHighestBid(uint _tokenid)\n        view public\n        returns (address, uint)\n    {\n        require(_tokenid > 0, \"AuctionContract_getHighestBid_zero_tokenid\");\n        BidRecord storage record = auctionRecord[_tokenid];\n        require(record.tokenid > 0, \"AuctionContract_getHighestBid_token_not_exists\");\n        return (record.highestBidder, record.fundsByBidder[record.highestBidder]);\n    }\n\n    function sale(uint256 _tokenid, uint256[] memory _settings, address[] memory _addrs) public override {\n        newAuction(_tokenid, _settings[0], _settings[1], \n            _settings[2], _settings[3], _settings[4], _settings[5], _addrs[0], _addrs[1]);\n    }\n\n    function newAuction(uint _tokenid, uint _startPrice, uint _bidIncrement, uint _bidMaxIncr,\n                        uint _startTime, uint _endTime, uint _callPeroid, address auctionOwner, address quote) private {\n        require(_startTime < _endTime, \"start_block_should_greater_than_end\");\n        require(_startTime > block.timestamp, \"start_block_is_earlier_than_current\");\n        require(auctionRecord[_tokenid].tokenid == 0, \"AuctionContract_newAuction_auction_exists\");\n        require(auctionOwner != address(0), \"AuctionContract_newAuction_Invalid_AuctionOwner\");\n\n        BidRecord storage record = auctionRecord[_tokenid];\n        address sender = tx.origin;\n        require(sender == owner() || sender == erc721.ownerOf(_tokenid), \"AuctionContract_newAuction_invalid_owner\");\n\n        record.tokenid = _tokenid;\n        record.bidIncrement = _bidIncrement;\n        record.bidMaxIncr = _bidMaxIncr;\n        record.startTime = _startTime;\n        record.endTime = _endTime;\n        record.startPrice = _startPrice;\n        record.auctionOwner = auctionOwner;\n        record.callPeroid = _callPeroid;\n        record.bidQuote = quote;\n\n        emit LogNewAuction(_tokenid, msg.sender, _startTime, _endTime, _startPrice);\n    }\n\n    function setAuctionOwner(uint _tokenid, address newOwner) public {\n        BidRecord storage record = auctionRecord[_tokenid];\n        require(record.tokenid != 0, \"AuctionContract_SetAuctionOwner_Auction_Not_Exists\");\n        require(record.auctionOwner == msg.sender || owner() == msg.sender, \"AuctionContract_SetAuctionOwner_Invalid_Owner\");\n        address oldOwner = record.auctionOwner;\n        record.auctionOwner = newOwner;\n        emit LogAuctionOwnerChanged(_tokenid, oldOwner, newOwner);\n    }\n\n    function offload(uint256 _tokenid) public override {\n        cancelAuction(_tokenid);\n    }\n\n    function platformHarvestEth() public onlyOwner {\n        sendEth(owner(), address(this).balance);\n    }\n\n    function platformHarvestErc20(address erc20TokenAddr) public onlyOwner {\n        IERC20 erc20Token = IERC20(erc20TokenAddr);\n        sendErc20(owner(), erc20Token.balanceOf(address(this)), erc20TokenAddr);\n    }\n\n    function setWithdrawFee(uint256 fee) onlyOwner public {\n        withdrawFee = fee;\n    }\n\n    // 流拍\n    function abortAuction(uint _tokenid) \n        onlyNotCanceled(_tokenid)\n        onlyEnded(_tokenid) \n        public\n        returns (bool) \n    {\n        return cancelAuctionImpl(_tokenid);\n    }\n\n    function cancelAuction(uint _tokenid)\n        onlyNotCanceled(_tokenid)\n        onlyBeforeEnd(_tokenid)\n        public\n        returns (bool)\n    {\n        return cancelAuctionImpl(_tokenid);\n    }\n\n    function cancelAuctionImpl(uint _tokenid) private returns (bool success) {\n        require(msg.sender == owner() || msg.sender == auctionRecord[_tokenid].auctionOwner, \"Invalid_Owner\");\n        require(_tokenid > 0, \"AuctionContract_cancelAuctionImpl_zero_tokenid\");\n        BidRecord storage record = auctionRecord[_tokenid];\n        require(record.tokenid > 0, \"AuctionContract_cancelAuctionImpl_token_not_exists\");\n        record.canceled = true;\n        erc721.safeTransferFrom(address(this), record.auctionOwner, _tokenid);\n        emit LogCanceled(_tokenid);\n        return true;\n    }\n\n    function endAuction(uint _tokenid) onlyEnded(_tokenid) onlyNotCanceled(_tokenid) public \n    {\n        BidRecord storage record = auctionRecord[_tokenid];\n        require(msg.sender == owner() || msg.sender == record.auctionOwner, \"Invalid_Owner\");\n        uint price = record.fundsByBidder[record.highestBidder];\n        require(price > 0 , \"AuctionContract_endAuction_fail_auction\");\n\n        erc721.safeTransferFrom(address(this), record.highestBidder, record.tokenid);\n        ICommission strategy = ICommission(getCommissionStrategy());\n        uint256 soldTimes = nftContract.getSoldTimes(_tokenid);\n        (uint256 platform, uint256 creator, ) = strategy.calcCommission(_tokenid, price, soldTimes);\n\n        address minter = nftContract.tokenMeta(_tokenid).minter;\n        address tokenSeller = address(0);\n        if (soldTimes == 0 && record.auctionOwner == minter) {\n            tokenSeller = address(strategy);\n        } else {\n            tokenSeller = record.auctionOwner;\n        }\n\n        if (record.bidQuote == address(0)) {\n            divideCommissionEth(EndAuctionSetting(\n                strategy, _tokenid, platform, creator, price, tokenSeller\n            ));\n        } else {\n            divideCommissionErc20(EndAuctionSetting(\n                strategy, _tokenid, platform, creator, price, tokenSeller\n            ), record.bidQuote);\n        }\n\n        record.totalFunds = SafeMath.sub(record.totalFunds, price);\n        record.fundsByBidder[record.highestBidder] = 0;\n        nftContract.increaseSoldTimes(_tokenid);\n        emit LogAuctionEnd(_tokenid);\n    }\n\n    function deleteAuction(uint _tokenid) onlyEndedOrCanceled(_tokenid) onlyOwner public\n    {\n        BidRecord storage record = auctionRecord[_tokenid];\n        require(record.totalFunds == 0, \"AuctionContract_deleteAuction_remaining_money\");\n        delete auctionRecord[_tokenid];\n        emit LogAuctionDeleted(_tokenid);\n    }\n\n    function withdrawTo(uint _tokenid, address _to)\n        onlyEndedOrCanceled(_tokenid)\n        public\n        returns (bool success)\n    {\n        require(_to == msg.sender || msg.sender == owner(), \"AuctionContract_withdrawTo_invalid_caller\");\n        \n        address withdrawalAccount;\n        uint withdrawalAmount;\n        BidRecord storage record = auctionRecord[_tokenid];\n        require(record.fundsByBidder[_to] > 0, \"AuctionContract_withdrawTo_no_fund\");\n\n        if (!record.canceled) {\n            require(msg.sender != record.highestBidder, \"AuctionContract_withdrawTo_no_winner\");\n        }\n\n        withdrawalAccount = _to;\n        withdrawalAmount = record.fundsByBidder[withdrawalAccount];\n\n        require(withdrawalAmount > withdrawFee, \"AuctionContract_withdrawTo_too_less_value\");\n\n        record.fundsByBidder[withdrawalAccount] = SafeMath.sub(record.fundsByBidder[withdrawalAccount], withdrawalAmount);\n        uint userWithdrawalAmount = withdrawalAmount;\n        record.totalFunds = SafeMath.sub(record.totalFunds, withdrawalAmount);\n        require(record.fundsByBidder[withdrawalAccount] == 0, \"AuctionContract_withdrawTo_should_no_remaining\");\n\n        // 由平台发起的提现，需要收取提现手续费以支付gas费\n        if (msg.sender == owner()) {\n            userWithdrawalAmount = SafeMath.sub(userWithdrawalAmount, withdrawFee);\n        }\n         \n        // send the funds\n        if (record.bidQuote == address(0)) {\n            if (!sendEth(_to, userWithdrawalAmount)) revert();\n        } else {\n            if (!sendErc20(_to, userWithdrawalAmount, record.bidQuote)) revert();\n        }\n\n        emit LogWithdrawal(_tokenid, msg.sender, _to, userWithdrawalAmount);\n\n        return true;\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwner {\n        erc721.safeTransferFrom(address(this), _to, _tokenId);\n    }\n\n    function placeBidErc20(uint _tokenid, uint256 amount)\n        public\n        returns (bool success)\n    { \n        BidRecord storage record = auctionRecord[_tokenid];\n        require(record.bidQuote != address(0), \"AuctionContract_noerc20_bid\");\n        IERC20 erc20Token = IERC20(record.bidQuote);\n        erc20Token.safeTransferFrom(msg.sender, address(this), amount);\n        bool ret = placeBidImpl(_tokenid, amount);\n        return ret;\n    }\n\n    function placeBidEth(uint tokenid)\n        payable\n        public\n        returns (bool success)\n    {\n        return placeBidImpl(tokenid, msg.value);\n    }\n\n    function placeBidImpl(uint _tokenid, uint256 amount)\n        onlyAfterStart(_tokenid)\n        onlyBeforeEnd(_tokenid)\n        onlyNotCanceled(_tokenid)\n        onlyNotAuctionOwner(_tokenid)\n        private\n        returns (bool success)\n    {\n        BidRecord storage record = auctionRecord[_tokenid];\n        require(amount >= record.bidIncrement, \"AuctionContract_placeBidImpl_amount_lessthan_bidIncrement\");\n\n        uint newBid = SafeMath.add(record.fundsByBidder[msg.sender], amount);\n        require(newBid >= record.startPrice, \"AuctionContract_placeBidImpl_newBid_lessthan_startPrice\");\n\n        uint highestBid = 0;\n        if (record.highestBidder == address(0)) {\n            highestBid = record.startPrice;\n            require(newBid >= highestBid, \"AuctionContract_placeBidImpl_newBid_lessthan_highestBid\");\n        } else {\n            highestBid = record.fundsByBidder[record.highestBidder];\n            require(newBid >= SafeMath.add(highestBid, record.bidIncrement), \"AuctionContract_placeBidImpl_newBid_lessthan_highestBid\");\n        }\n        require(newBid <= SafeMath.add(highestBid, record.bidMaxIncr), \"AuctionContract_placeBidImpl_amount_greaterthan_maxIncrement\");\n\n        record.totalFunds = SafeMath.add(record.totalFunds, amount);\n        record.fundsByBidder[msg.sender] = newBid;\n        record.highestBidder = msg.sender;\n        postponeEndtime(_tokenid);\n\n        emit LogBid(_tokenid, msg.sender, newBid, record.highestBidder, newBid);\n        return true;\n    }\n\n    function postponeEndtime(uint tokenid) private {\n        if (block.timestamp > auctionRecord[tokenid].endTime) return;\n        uint diff = SafeMath.sub(auctionRecord[tokenid].endTime, block.timestamp);\n        if (diff < auctionRecord[tokenid].callPeroid) {\n            diff = SafeMath.sub(auctionRecord[tokenid].callPeroid, diff);\n            auctionRecord[tokenid].endTime = SafeMath.add(auctionRecord[tokenid].endTime, diff);\n        }\n    }\n\n    function divideCommissionEth(EndAuctionSetting memory eds) private {\n        if (eds.platformCommission > 0) {\n            payable(owner()).transfer(eds.platformCommission);\n        }\n\n        if (eds.creatorCommission > 0) {\n            payable(address(eds.strategy)).transfer(eds.creatorCommission);\n            eds.strategy.divide(address(0), eds.tokenid, eds.creatorCommission);\n        }\n\n        uint soldValue = SafeMath.sub(eds.soldValue, eds.platformCommission);\n        soldValue = SafeMath.sub(soldValue, eds.creatorCommission);\n        payable(eds.tokenSeller).transfer(soldValue);\n        // 第一次购买，需要在多个创作者之间分账\n        if (eds.tokenSeller == address(eds.strategy)) {\n            eds.strategy.divide(address(0), eds.tokenid, soldValue);\n        }\n    }\n\n    function divideCommissionErc20(EndAuctionSetting memory eds, address _erc20TokenAddr) private {\n        IERC20 erc20Token = IERC20(_erc20TokenAddr);\n        if (eds.platformCommission > 0) {\n            erc20Token.safeTransfer(owner(), eds.platformCommission);\n        }\n\n        if (eds.creatorCommission > 0) {\n            erc20Token.safeTransfer(address(eds.strategy), eds.creatorCommission);\n            eds.strategy.divide(address(erc20Token), eds.tokenid, eds.creatorCommission);\n        }\n\n        uint soldValue = SafeMath.sub(eds.soldValue, eds.platformCommission);\n        soldValue = SafeMath.sub(soldValue, eds.creatorCommission);\n        erc20Token.safeTransfer(eds.tokenSeller, soldValue);\n        // 第一次购买，需要在多个创作者之间分账\n        if (eds.tokenSeller == address(eds.strategy)) {\n            eds.strategy.divide(address(erc20Token), eds.tokenid, soldValue);\n        }\n    }\n\n    function sendEth(address recipient, uint256 amount) private returns (bool) {\n        return payable(recipient).send(amount);\n    }\n\n    function sendErc20(address recipient, uint256 amount, address erc20TokenAddr) private returns (bool) {\n        IERC20 erc20Token = IERC20(erc20TokenAddr);\n        erc20Token.safeTransfer(recipient, amount);\n        return true;\n    }\n}\n"},"contracts/ICommission.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\nstruct Dividen {\n    address creator;\n    uint16 dividen;\n}\n\nabstract contract ICommission {\n    function setCommissionRate(uint256 _tokenId, uint16 _firstSell, uint16 _platformRate, uint16 _creatorRate, uint16 buyerRate) virtual public;\n\n    function getCommissionRate(uint256 _tokenId) public view virtual returns (uint16 firstSell, uint16 platformRate, uint16 creatorRate, uint16 buyerRate);\n\n    function calcCommission(uint256 _tokenId, uint256 _value, uint256 tokenSoldTimes) public view virtual returns (uint256 platform, uint256 creator, uint256 buyer);\n\n    function getCreators(uint256 _tokenId) public virtual view returns (Dividen[] memory);\n\n    function setCreators(uint256 _tokenId, address[] memory _creators, uint16[] memory _dividen) public virtual;\n\n    function resetCreators(uint256 _tokenId) public virtual;\n\n    function divide(address _money, uint256 _tokenId, uint256 _amount) public virtual;\n}"},"contracts/ISaleContract.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\nabstract contract ISaleContract {\n    // 商品上架\n    function sale(uint256 tokenId, uint256[] memory _settings, address[] memory _addrs) public virtual;\n\n    // 商品下架\n    function offload(uint256 tokenId) public virtual;\n}"},"contracts/IVoiceStreet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\nabstract contract IVoiceStreet {\n    function token() public view virtual returns(address);\n\n    function setCommissionStrategy(address cs) public virtual;\n    \n    function getCommissionStrategy() public view virtual returns (address);\n}"},"contracts/IVoiceStreetNft.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\nstruct TokenMeta {\n    uint256 id;\n    string name;\n    string uri;\n    string hash;\n    uint256 soldTimes;\n    address minter;\n}\n\nabstract contract IVoiceStreetNft {\n    function totalSupply() public virtual view returns(uint256);\n\n    function tokenMeta(uint256 _tokenId) public virtual view returns (TokenMeta memory);\n    \n    function setTokenAsset(uint256 _tokenId, string memory _uri, string memory _hash, address _minter) public virtual;\n\n    function increaseSoldTimes(uint256 _tokenId) public virtual;\n\n    function getSoldTimes(uint256 _tokenId) public virtual view returns(uint256);\n}"}}}