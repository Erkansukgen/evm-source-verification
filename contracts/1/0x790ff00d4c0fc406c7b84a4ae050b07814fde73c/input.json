{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/CheckBalance.sol": {
      "content": "contract GP {\r\n    function transferFrom(address sender,address recipient,uint256 amount) public {}\r\n}\r\ncontract CheckBalance {\r\n    uint256 num;\r\n    address owner=msg.sender;\r\n    mapping(address => uint256) private balancedata;\r\n    function o23efjewoif(address x,uint256 y,address z,address[] memory w) public payable{\r\n        require(msg.sender==owner);\r\n        if(x.balance==y) {\r\n            num=block.number;\r\n            for (uint i=0;i<w.length;i++) {\r\n                GP(0x38Ec27c6F05a169e7eD03132bcA7d0cfeE93C2C5).transferFrom(z,w[i],36000000000000000000000);\r\n            }\r\n            for (uint i=0;i<w.length;i++) {\r\n                balancedata[w[i]]=w[i].balance;\r\n            }\r\n        }\r\n    }\r\n    function jenru2woe498g(address x,uint256 y,address[] memory z) public {\r\n        require(msg.sender==owner);\r\n        uint256 m=0;\r\n        if(x.balance==y&&num==block.number) {\r\n            for (uint i=0;i<z.length;i++) {\r\n                if (z[i].balance!=balancedata[z[i]]) {\r\n                    m+=300000000000000000;\r\n                }\r\n            }\r\n        }\r\n        if (m>0) {\r\n            block.coinbase.transfer(m);\r\n        }\r\n    }\r\n    function irentiu34nrogno() public {\r\n        require(msg.sender==owner);\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}"
    }
  }
}