{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"UniswapV2Interface.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.3;\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"arb.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.3;\r\n\r\nimport \"./UniswapV2Interface.sol\";\r\n\r\ncontract ReWeightArb{\r\n    IUniswapV2Router02 constant UniswapV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address constant FEI = 0x956F47F50A910163D8BF957Cf5846D573E7f87CA;\r\n    address constant TRIBE = 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B;\r\n     address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    //address constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab; // ------------------- ropsten\r\n    address constant WETHBTCPairAddress = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940; // WETH-WBTC\r\n    //address constant WETHBTCPairAddress = 0x1c5DEe94a34D795f9EEeF830B68B80e44868d316; // ------------------- ropsten\r\n    // address token0 = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; // WBTC\r\n    // address token1 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\r\n    address constant owner = 0x777777767108394d2b2A4A36F276ac530Fd4Ee32;\r\n    //address constant owner = 0xffFfFdE936CE97A022F15B24DAf2D65dE107E25a; // ------------------- ropsten\r\n    \r\n    constructor(){\r\n        IERC20(WETH).approve(address(UniswapV2Router02), 2**256-1);\r\n        IERC20(FEI).approve(address(UniswapV2Router02), 2**256-1);\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    receive() external payable{}\r\n    \r\n    function arbWithFlashloan(uint256 _amount, uint256 _loop) public onlyOwner{\r\n        IUniswapV2Pair(WETHBTCPairAddress).swap(0, _amount, address(this), abi.encode(_loop)); // borrow WETH\r\n    }\r\n    \r\n    function uniswapV2Call(address, uint, uint _amount1, bytes calldata _data) external {\r\n        // access control\r\n        require(msg.sender == WETHBTCPairAddress, \"!\");\r\n        uint borrowAmount = _amount1;\r\n        \r\n        uint fee = ((borrowAmount * 3) / 997) + 1;\r\n        \r\n        (uint _loop) = abi.decode(_data, (uint));\r\n        \r\n        // arb here\r\n        bool success1 = true;\r\n        bool success2 = true;\r\n        for(uint i=0; i<_loop; i++){\r\n            if(success1) (success1, ) = address(this).call(abi.encodeWithSelector(this.arb_DAI.selector));\r\n            if(success2) (success2, ) = address(this).call(abi.encodeWithSelector(this.arb_TRIBE.selector));\r\n        }\r\n        \r\n        IERC20(WETH).transfer(WETHBTCPairAddress, borrowAmount + fee);\r\n        IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    function arb_DAI() external onlyOwner{\r\n        // ETH -> DAI -> FEI\r\n        address[] memory pathDai = new address[](3);\r\n        pathDai[0] = WETH;\r\n        pathDai[1] = DAI;\r\n        pathDai[2] = FEI;\r\n        uint WETHBalance = IERC20(WETH).balanceOf(address(this));\r\n        uint[] memory swapResult = UniswapV2Router02.swapExactTokensForTokens(WETHBalance, 0, pathDai, msg.sender, block.timestamp);\r\n        \r\n        // FEI->ETH\r\n        address[] memory path2 = new address[](2);\r\n        path2[0] = FEI;\r\n        path2[1] = WETH;\r\n        UniswapV2Router02.swapExactTokensForTokens(swapResult[2], 0, path2, msg.sender, block.timestamp);\r\n        \r\n        // profit check\r\n        uint newWETHBalance = IERC20(WETH).balanceOf(address(this));\r\n        require(WETHBalance < newWETHBalance);\r\n    }\r\n\r\n    function arb_TRIBE() external onlyOwner{\r\n        // ETH -> TRIBE -> FEI\r\n        address[] memory pathTribe = new address[](3);\r\n        pathTribe[0] = WETH;\r\n        pathTribe[1] = TRIBE;\r\n        pathTribe[2] = FEI;\r\n        uint WETHBalance = IERC20(WETH).balanceOf(address(this));\r\n        uint[] memory swapResult = UniswapV2Router02.swapExactTokensForTokens(WETHBalance, 0, pathTribe, msg.sender, block.timestamp);\r\n        \r\n        // FEI->ETH\r\n        address[] memory path2 = new address[](2);\r\n        path2[0] = FEI;\r\n        path2[1] = WETH;\r\n        UniswapV2Router02.swapExactTokensForTokens(swapResult[2], 0, path2, msg.sender, block.timestamp);\r\n        \r\n        // profit check\r\n        uint newWETHBalance = IERC20(WETH).balanceOf(address(this));\r\n        require(WETHBalance < newWETHBalance);\r\n    }\r\n}"}}}