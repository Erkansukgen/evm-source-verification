{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/eLira.sol": {
      "content": "\npragma solidity >=0.5.16 <0.6.9;\npragma experimental ABIEncoderV2;\n//YOUWILLNEVERWALKALONE\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n}\n\ncontract maho {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    address payable public fundsWallet;\n    uint256 public maximumTarget;\n    uint256 public lastBlock;\n    uint256 public rewardTimes;\n    uint256 public genesisReward;\n    uint256 public premined;\n    uint256 public nRewarMod;\n    uint256 public nWtime;\n\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n\n    constructor(\n        uint256 initialSupply,\n        string memory tokenName,\n        string memory tokenSymbol\n    ) public {\n        initialSupply = 8923155  * 10 ** uint256(decimals);\n        tokenName = \"Maho\";\n        tokenSymbol = \"MAHO\";\n        lastBlock = 0;\n        nRewarMod = 7700;\n        //nRewarMod = 6;\n        //nWtime = 7776000;        \n        nWtime = 172800;    // 2 Gün Stake Süresi    \n        genesisReward = (10**uint256(decimals)); // Ödül Miktarı\n        maximumTarget = 100  * 10 ** uint256(decimals);\n        fundsWallet = msg.sender;\n        premined = 35850 * 10 ** uint256(decimals);\n        balanceOf[msg.sender] = premined;\n        balanceOf[address(this)] = initialSupply;\n        totalSupply =  initialSupply + premined;\n        name = tokenName;\n        symbol = tokenSymbol;\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\n    function uintToString(uint256 v) internal pure returns(string memory str) {\n        uint maxlength = 100;\n        bytes memory reversed = new bytes(maxlength);\n        uint i = 0;\n        while (v != 0) {\n            uint remainder = v % 10;\n            v = v / 10;\n            reversed[i++] = byte(uint8(48 + remainder));\n        }\n        bytes memory s = new bytes(i + 1);\n        for (uint j = 0; j <= i; j++) {\n            s[j] = reversed[i - j];\n        }\n        str = string(s);\n    }\n\n    function append(string memory a, string memory b) internal pure returns (string memory) {\n        return string(abi.encodePacked(a,\"-\",b));\n    }\n   \n\n    function getCurrentBlockHash() public view returns (uint256) {\n            return uint256(blockhash(block.number-1));\n    }\n\n    function getBlockHashAlgoritm(uint256 _blocknumber) public view returns(uint256, uint256){\n        uint256 crew = uint256(blockhash(_blocknumber)) % nRewarMod;\n        return (crew, block.number-1);\n    }\n\n    function checkBlockReward() public view returns (uint256, uint256) {\n        uint256 crew = uint256(blockhash(block.number-1)) % nRewarMod;\n        return (crew, block.number-1);\n    }\n\n    struct stakeInfo {\n      uint256 _stocktime;\n      uint256 _stockamount;\n    }\n\n    address[] totalminers;\n\n    mapping (address => stakeInfo) nStockDetails;\n\n    struct rewarddetails {\n        uint256 _artyr;\n        bool _didGetReward;\n        bool _didisign;\n    }\n\n    mapping (string => rewarddetails) nRewardDetails;\n\n    struct nBlockDetails {\n        uint256 _bTime;\n        uint256 _tInvest;\n    }\n\n    mapping (uint256 => nBlockDetails) bBlockIteration;\n\n    struct activeMiners {\n        address bUser;\n    }\n\n    mapping(uint256 => activeMiners[]) aMiners;\n\n\n    function totalMinerCount() view public returns (uint256) {\n        return totalminers.length;\n    }\n\n\n    function addressHashs() view public returns (uint256) {\n        return uint256(msg.sender) % 10000000000;\n    }    \n\n\n    function stakerStatus(address _addr) view public returns(bool){\n\n        if(nStockDetails[_addr]._stocktime == 0)\n        {\n            return false;\n        }\n        else \n        {\n            return true;\n        }\n    }\n\n    function stakerAmount(address _addr) view public returns(uint256){\n\n        if(nStockDetails[_addr]._stocktime == 0)\n        {\n            return 0;\n        } \n        else \n        {\n            return nStockDetails[_addr]._stockamount;\n        }\n    }\n\n\n    function stakerActiveTotal() view public returns(uint256) {\n        return aMiners[lastBlock].length; \n    }\n   \n   \n    function generalCheckPoint()  private view returns(string memory) {\n       return append(uintToString(addressHashs()),uintToString(lastBlock));\n    }  \n    \n   \n    function necessarySignForReward(uint256 _bnumber) public returns (uint256)  { \n       require(stakerStatus(msg.sender) == true);\n       require((block.number-1) - _bnumber  <= 100);        \n       require(nStockDetails[msg.sender]._stocktime + nWtime > now);   \n       require(uint256(blockhash(_bnumber)) % nRewarMod == 1);\n       \n       if(bBlockIteration[lastBlock]._bTime + 1800 < now)       \n       {\n           lastBlock += 1;\n           bBlockIteration[lastBlock]._bTime = now;\n       }\n       require(nRewardDetails[generalCheckPoint()]._artyr == 0);\n\n       bBlockIteration[lastBlock]._tInvest += nStockDetails[msg.sender]._stockamount;\n       nRewardDetails[generalCheckPoint()]._artyr = now;\n       nRewardDetails[generalCheckPoint()]._didGetReward = false;\n       nRewardDetails[generalCheckPoint()]._didisign = true;\n       aMiners[lastBlock].push(activeMiners(msg.sender));\n       return 200;\n   }\n\n   \n   function rewardGet(uint256 _bnumber) public returns(uint256) { \n       require(stakerStatus(msg.sender) == true);\n       require((block.number-1) - _bnumber  > 100);        \n       require(uint256(blockhash(_bnumber)) % nRewarMod == 1);\n       require(nStockDetails[msg.sender]._stocktime + nWtime > now  ); \n       require(nRewardDetails[generalCheckPoint()]._didGetReward == false);\n       require(nRewardDetails[generalCheckPoint()]._didisign == true);\n       \n       uint256 halving = lastBlock / 365;   \n       \n\n       uint256 totalRA = 128 * genesisReward;\n       \n       if(halving==0)\n       {\n           totalRA = 128 * genesisReward;\n       }\n       else if(halving==1)\n       {\n           totalRA = 256 * genesisReward;\n       }\n       else if(halving==2)\n       {\n           totalRA = 512 * genesisReward;\n       }\n       else if(halving==3)\n       {\n           totalRA = 1024 * genesisReward;\n       }\n       else if(halving==4)\n       {\n           totalRA = 2048 * genesisReward;\n       }\n       else if(halving==5)\n       {\n           totalRA = 4096 * genesisReward;\n       }\n       else if(halving==6)\n       {\n           totalRA = 8192 * genesisReward;\n       }\n       else if(halving==7)\n       {\n           totalRA = 4096 * genesisReward;\n       }\n       else if(halving==8)\n       {\n           totalRA = 2048 * genesisReward;\n       }\n       else if(halving==9)\n       {\n           totalRA = 1024 * genesisReward;\n       }\n       else if(halving==10)\n       {\n           totalRA = 512 * genesisReward;\n       }\n       else if(halving==11)\n       {\n           totalRA = 256 * genesisReward;\n       }\n       else if(halving==12)\n       {\n           totalRA = 128 * genesisReward;\n       }\n       else if(halving==13)\n       {\n           totalRA = 64 * genesisReward;\n       }\n       else if(halving==14)\n       {\n           totalRA = 32 * genesisReward;\n       }\n       else if(halving==15)\n       {\n           totalRA = 16 * genesisReward;\n       }\n       else if(halving==16)\n       {\n           totalRA = 8 * genesisReward;\n       }\n       else if(halving==17)\n       {\n           totalRA = 4 * genesisReward;\n       }\n       else if(halving==18)\n       {\n           totalRA = 2 * genesisReward;\n       }\n       else if(halving==19)\n       {\n           totalRA = 1 * genesisReward;\n       }\n       else if(halving>19)\n       {\n           totalRA = 1 * genesisReward;\n       }\n\n       uint256 usersReward = (totalRA * (nStockDetails[msg.sender]._stockamount * 100) / bBlockIteration[lastBlock]._tInvest) /  100;\n       nRewardDetails[generalCheckPoint()]._didGetReward = true;\n       _transfer(address(this), msg.sender, usersReward);\n       return usersReward;\n   }\n\n   function startMining(uint256 mineamount) public returns (uint256) {\n\n      uint256 realMineAmount = mineamount * 10 ** uint256(decimals);     \n      require(realMineAmount >= 10 * 10 ** uint256(decimals)); \n      require(nStockDetails[msg.sender]._stocktime == 0);     \n      maximumTarget +=  realMineAmount;\n      nStockDetails[msg.sender]._stocktime = now;\n      nStockDetails[msg.sender]._stockamount = realMineAmount;\n      totalminers.push(msg.sender);\n      _transfer(msg.sender, address(this), realMineAmount);\n      return 200;\n   }\n\n   function tokenPayBack() public returns(uint256) {\n       require(stakerStatus(msg.sender) == true);\n       require(nStockDetails[msg.sender]._stocktime + nWtime < now  );\n       nStockDetails[msg.sender]._stocktime = 0;\n       _transfer(address(this),msg.sender,nStockDetails[msg.sender]._stockamount);\n       return nStockDetails[msg.sender]._stockamount;\n   }\n\n   struct memoInfo {\n       uint256 _receiveTime;\n       uint256 _receiveAmount;\n       address _senderAddr;\n       string _senderMemo;\n   }\n\n  mapping(address => memoInfo[]) memoGetProcess;\n\n  function sendMemoToken(uint256 _amount, address _to, string memory _memo)  public returns(uint256) {\n      memoGetProcess[_to].push(memoInfo(now, _amount, msg.sender, _memo));\n      _transfer(msg.sender, _to, _amount);\n      return 200;\n  }\n\n  function sendMemoOnly(address _to, string memory _memo)  public returns(uint256) {\n      memoGetProcess[_to].push(memoInfo(now,0, msg.sender, _memo));\n      _transfer(msg.sender, _to, 0);\n      return 200;\n  }\n\n\n  function yourMemos(address _addr, uint256 _index) view public returns(uint256,\n   uint256,\n   string memory,\n   address) {\n\n       uint256 rTime = memoGetProcess[_addr][_index]._receiveTime;\n       uint256 rAmount = memoGetProcess[_addr][_index]._receiveAmount;\n       string memory sMemo = memoGetProcess[_addr][_index]._senderMemo;\n       address sAddr = memoGetProcess[_addr][_index]._senderAddr;\n       if(memoGetProcess[_addr][_index]._receiveTime == 0){\n            return (0, 0,\"0\", _addr);\n       }else {\n            return (rTime, rAmount,sMemo, sAddr);\n       }\n  }\n\n\n   function yourMemosCount(address _addr) view public returns(uint256) {\n       return  memoGetProcess[_addr].length;\n   }\n\n   function appendMemos(string memory a, string memory b,string memory c,string memory d) internal pure returns (string memory) {\n        return string(abi.encodePacked(a,\"#\",b,\"#\",c,\"#\",d));\n   }\n\n   function addressToString(address _addr) public pure returns(string memory) {\n    bytes32 value = bytes32(uint256(_addr));\n    bytes memory alphabet = \"0123456789abcdef\";\n\n    bytes memory str = new bytes(51);\n    str[0] = \"0\";\n    str[1] = \"x\";\n    for (uint i = 0; i < 20; i++) {\n        str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n        str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n    }\n    return string(str);\n}\n\n   function getYourMemosOnly(address _addr) view public returns(string[] memory) {\n       \n       uint total =  memoGetProcess[_addr].length;\n       string[] memory messages = new string[](total);\n      \n       for (uint i=0; i < total; i++) {\n             \n            messages[i] = appendMemos(uintToString(memoGetProcess[_addr][i]._receiveTime),memoGetProcess[_addr][i]._senderMemo,uintToString(memoGetProcess[_addr][i]._receiveAmount),addressToString(memoGetProcess[_addr][i]._senderAddr));\n       }\n\n       return messages;\n   }\n\n}"
    }
  }
}