{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/TriangularArbitrageProduction.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath\r\n{\r\n    function add(uint x, uint y) internal pure returns (uint z)\r\n    {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z)\r\n    {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z)\r\n    {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair\r\n{\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract TriangularArbitrageContract {\r\n    using SafeMath for uint;\r\n    uint private constant WETH_MIN = 1e16;\r\n    bytes4 private constant ERC20_TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    address public owner;\r\n    mapping(address => bool) public allow_list;\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner, \"OOW\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWorker\r\n    {\r\n        require(allow_list[msg.sender], \"OWR\");\r\n        _;\r\n    }\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n        allow_list[owner] = true;\r\n    }\r\n\r\n    function set_owner_x666x(address new_owner) public onlyOwner\r\n    {\r\n        owner = new_owner;\r\n        allow_list[owner] = true;\r\n    }\r\n\r\n    function allow_addresses(address[] memory array) public onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < array.length; i++) allow_list[array[i]] = true;\r\n    }\r\n\r\n    function cancel_addresses(address[] memory array) public onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < array.length; i++) delete allow_list[array[i]];\r\n    }\r\n\r\n    function do_direct_call(uint256 _value, address _target, bytes memory _data) public payable onlyWorker returns (bytes memory response)\r\n    {\r\n        (bool success, bytes memory ret) = _target.call{value : _value}(_data);\r\n        require(success);\r\n        response = ret;\r\n    }\r\n\r\n    function pickup_eth_76550374(address payable receiver, uint256 value) public onlyOwner\r\n    {\r\n        receiver.transfer(value);\r\n    }\r\n\r\n    function pickup_tok_18796546(address receiver, address token, uint256 value) public onlyOwner\r\n    {\r\n        _safeTransfer(token, receiver, value);\r\n    }\r\n\r\n    //l WETH->token1, token1->token0, token0->WETH\r\n    //l                      pairWETHToken1 pairToken1Token0 pairToken0WETH\r\n    function taswap(uint a1, address pair1, address pair2, address pair3) external onlyWorker {\r\n        uint ethBalance = IERC20(WETH).balanceOf(address(this));\r\n\r\n        if (a1 <= ethBalance) {\r\n            //l reserves\r\n            address token1 = getOtherToken(IUniswapV2Pair(pair1), WETH);\r\n            address token0 = getOtherToken(IUniswapV2Pair(pair2), token1);\r\n\r\n            //l (reserveWETH, reserveToken1)\r\n            (uint112 reserve1, uint112 reserve2) = getReserves(IUniswapV2Pair(pair1), WETH);\r\n            //l (reserveToken1, reserveToken0)\r\n            (uint112 reserve3, uint112 reserve4) = getReserves(IUniswapV2Pair(pair2), token1);\r\n            //l (reserveToken0, reserveWETH)\r\n            (uint112 reserve5, uint112 reserve6) = getReserves(IUniswapV2Pair(pair3), token0);\r\n\r\n            uint pnl = calcPnl(a1, reserve1, reserve2, reserve3, reserve4, reserve5, reserve6);\r\n\r\n            if (pnl >= WETH_MIN) {\r\n                //l weth->token (reserve1,reserve2)\r\n                //l uint256 t0 = value * 997;\r\n                //l uint256 e0 = (t0 * reserve2) / (reserve1 * 1000 + t0);\r\n\r\n                //l 1. WETH->token1\r\n                swapPair(pair1, reserve1, reserve2, WETH);\r\n\r\n                //l 2. token1->token0\r\n                swapPair(pair2, reserve3, reserve4, token1);\r\n\r\n                //l 3. token0->tokenWETH\r\n                swapPair(pair3, reserve5, reserve6, token0);\r\n            }\r\n        }\r\n    }\r\n\r\n    //l token0->token1\r\n    function swapPair(address pair, uint reserve1, uint reserve2, address token0) private {\r\n        uint amount = IERC20(token0).balanceOf(address(this));\r\n\r\n        uint e0 = swapTokens(amount, reserve1, reserve2);\r\n\r\n        _safeTransfer(token0, pair, amount);\r\n\r\n        if (IUniswapV2Pair(pair).token0() == token0) IUniswapV2Pair(pair).swap(0, e0, address(this), \"\");\r\n        else IUniswapV2Pair(pair).swap(e0, 0, address(this), \"\");\r\n    }\r\n\r\n    function getReserves(IUniswapV2Pair pair, address token0) private view returns (uint112 r1, uint112 r2) {\r\n        (uint112 reserve1, uint112 reserve2,) = IUniswapV2Pair(pair).getReserves();\r\n        if (pair.token0() != token0) (reserve1, reserve2) = (reserve2, reserve1);\r\n        return (reserve1, reserve2);\r\n    }\r\n\r\n    function getOtherToken(IUniswapV2Pair pair, address token) private view returns (address) {\r\n        return pair.token0() == token ? pair.token1() : pair.token0();\r\n    }\r\n\r\n    function charge_addresses(uint256 limit, address[] memory array) public payable onlyOwner\r\n    {\r\n        uint256 avail = msg.value;\r\n\r\n        for(uint256 i = 0; i < array.length; i++)\r\n        {\r\n            if(avail == 0) break;\r\n\r\n            address payable worker = payable(array[i]);\r\n            if(worker.balance < limit)\r\n            {\r\n                uint256 need = limit - worker.balance;\r\n                if(need > avail) need = avail;\r\n\r\n                worker.transfer(need);\r\n\r\n                avail -= need;\r\n            }\r\n        }\r\n\r\n        if(avail > 0) msg.sender.transfer(avail);\r\n    }\r\n\r\n    function charge_addresses_weth(uint256 limit, address[] memory array) public payable onlyOwner\r\n    {\r\n        uint256 need = 0;\r\n        for(uint256 i = 0; i < array.length; i++)\r\n        {\r\n            if(array[i].balance < limit) need += limit - array[i].balance;\r\n        }\r\n\r\n        uint256 avail = IERC20(WETH).balanceOf(address(this));\r\n        require(avail >= need, \"low weth balance\");\r\n\r\n        IWETH(WETH).withdraw(need);\r\n\r\n        for(uint256 i = 0; i < array.length; i++)\r\n        {\r\n            address payable worker = payable(array[i]);\r\n            if(worker.balance < limit) worker.transfer(limit - worker.balance);\r\n        }\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(ERC20_TRANSFER_SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    //l r1*amount*997/(r0*1000 + amount*997)\r\n    function swapTokens(uint amount, uint reserve0, uint reserve1) private pure returns (uint)\r\n    {\r\n        uint eth_with_fee = amount.mul(997);\r\n        uint numerator = eth_with_fee.mul(reserve1);\r\n        uint denominator = reserve0.mul(1000).add(eth_with_fee);\r\n        return numerator / denominator;\r\n    }\r\n\r\n    //l                       p1ethR  p1token1R p2token1R p2token0R p3token0R  p3ethR\r\n    function calcPnl(uint a1, uint r1, uint r2, uint r3, uint r4, uint r5, uint r6) private pure returns (uint) {\r\n        if (a1 >= r1) return 0;\r\n        uint bypassValue = swapTokens(a1, r1, r2);\r\n\r\n        if (bypassValue >= r3) return 0;\r\n        uint targetValue = swapTokens(bypassValue, r3, r4);\r\n\r\n        if (targetValue >= r5) return 0;\r\n\r\n        uint ethAfter = swapTokens(targetValue, r5, r6);\r\n        return ethAfter.sub(a1);\r\n    }\r\n}"
    }
  }
}