{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/TransactionManager.sol":{"content":"\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface ITransactionManager {\n  // Structs\n\n  // Holds all data that is constant between sending and\n  // receiving chains. The hash of this is what gets signed\n  // to ensure the signature can be used on both chains.\n  struct InvariantTransactionData {\n    address user;\n    address router;\n    address sendingAssetId;\n    address receivingAssetId;\n    address sendingChainFallback; // funds sent here on cancel\n    address receivingAddress;\n    uint256 sendingChainId;\n    uint256 receivingChainId;\n    bytes32 transactionId;\n  }\n\n  // Holds all data that varies between sending and receiving\n  // chains. The hash of this is stored onchain to ensure the\n  // information passed in is valid.\n  struct VariantTransactionData {\n    address stableAssetId;\n    uint256 amount;\n    uint256 assetAmount;\n    uint256 expiry;\n    uint256 preparedBlockNumber;\n  }\n\n  // All Transaction data, constant and variable\n  struct TransactionData {\n    address user;\n    address router;\n    address sendingAssetId;\n    address receivingAssetId;\n    address stableAssetId;\n    address sendingChainFallback;\n    address receivingAddress;\n    bytes32 transactionId;\n    uint256 sendingChainId;\n    uint256 receivingChainId;\n    uint256 amount;\n    uint256 assetAmount;\n    uint256 expiry;\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\n  }\n\n  // The structure of the signed data for fulfill\n  struct SignedData {\n    bytes32 transactionId;\n    uint256 relayerFee;\n    string functionIdentifier; // \"fulfill\" or \"cancel\"\n  }\n\n  // Set price swappet event\n  event NewSwapper(address indexed swapper);\n\n  // Set New Normal and Special Fee percent\n  event NewFeePercent(uint256 feePercent);\n\n  // Adding/removing asset events\n  event RouterAdded(address indexed addedRouter);\n\n  event RouterRemoved(address indexed removedRouter);\n\n  // Liquidity events\n  event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount);\n\n  event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\n\n  // Transaction events\n  event TransactionPrepared(\n    address indexed user,\n    address indexed router,\n    bytes32 indexed transactionId,\n    TransactionData txData,\n    bytes encodedBid,\n    bytes bidSignature\n  );\n\n  event TransactionFulfilled(\n    address indexed user,\n    address indexed router,\n    bytes32 indexed transactionId,\n    TransactionData txData,\n    uint256 relayerFee,\n    uint256 assetAmount,\n    bytes signature\n  );\n\n  event TransactionCancelled(\n    address indexed user,\n    address indexed router,\n    bytes32 indexed transactionId,\n    TransactionData txData\n  );\n\n  // Helper methods\n  function renounced() external returns (bool);\n\n  // Owner only methods\n  function addRouter(address router) external;\n\n  function removeRouter(address router) external;\n\n  // Router only methods\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable;\n\n  function addLiquidity(uint256 amount, address assetId) external payable;\n\n  function removeLiquidity(\n    uint256 amount,\n    address assetId,\n    address payable recipient\n  ) external;\n\n  // Methods for crosschain transfers\n  // called in the following order (in happy case)\n  // 1. prepare by user on sending chain\n  // 2. prepare by router on receiving chain\n  // 3. fulfill by user on receiving chain\n  // 4. fulfill by router on sending chain\n  function prepare(\n    InvariantTransactionData calldata txData,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata encodedBid,\n    bytes calldata bidSignature\n  ) external payable returns (TransactionData memory);\n\n  function fulfill(\n    TransactionData calldata txData,\n    uint256 relayerFee,\n    bytes calldata signature\n  ) external returns (TransactionData memory);\n\n  function cancel(\n    TransactionData calldata txData, \n    bytes calldata signature\n  ) external returns (TransactionData memory);\n\n\n  // Methods for fee management\n  function getChainId() external view returns(uint256);\n\n  function getStableAssetLiquidity(address router) external view returns(uint256, uint256);\n  \n  function getTokenPrice(address asset) external view returns(uint256, uint256);\n}\n\n\n// File contracts/interfaces/IERC20Minimal.sol\n\n\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n\n    /// @notice Returns the decimals of a token\n    /// @return The number of tokens held by the account\n    function decimals() external view returns (uint8);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File contracts/interfaces/IUniswapV2Router01.sol\n\n\npragma solidity 0.8.4;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n// File contracts/interfaces/IUniswapV2Router02.sol\n\n\npragma solidity 0.8.4;\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n// File contracts/interfaces/ISwapper.sol\n\n\npragma solidity ^0.8.4;\n\ninterface ISwapper {\n  function getPath(address _asset, bool isReverse) external view returns(address[] memory);\n  function getUniswapV2Router02() external view returns(address);\n  function getWETH() external view returns(address) ;\n  function getStableToken() external view returns(address);\n  function getAmountsOut(uint amountIn, address asset, bool fromStable) external view returns (uint[] memory amounts);\n  function getAmountsIn(uint amountOut, address asset, bool fromStable) external view returns (uint[] memory amounts);\n  function getAmountOut(uint amountIn, address asset, bool fromStable) external view returns (uint);\n  function getTokenPrice(address asset) external view returns(uint256, uint256);\n}\n\n\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n\n// File contracts/ProposedOwnable.sol\n\n\npragma solidity 0.8.4;\n/**\n * @title ProposedOwnable\n * @notice Contract module which provides a basic access control mechanism, \n * where there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed via a two step process:\n * 1. Call `proposeOwner`\n * 2. Wait out the delay period\n * 3. Call `acceptOwner`\n *\n * @dev This module is used through inheritance. It will make available the \n * modifier `onlyOwner`, which can be applied to your functions to restrict \n * their use to the owner.\n * \n * @dev The majority of this code was taken from the openzeppelin Ownable \n * contract\n *\n */\nabstract contract ProposedOwnable is Initializable{\n  address private _owner;\n\n  address private _proposed;\n\n  uint256 private _proposedTimestamp;\n\n  uint256 private constant _delay = 7 days;\n\n  event OwnershipProposed(address indexed proposedOwner);\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n    * @notice Initializes the contract setting the deployer as the initial \n    * owner.\n    */\n  function __ProposedOwnable_init_unchained() internal initializer {\n    _setOwner(msg.sender);\n  }\n\n  /**\n    * @notice Returns the address of the current owner.\n    */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n    * @notice Returns the address of the proposed owner.\n    */\n  function proposed() public view virtual returns (address) {\n    return _proposed;\n  }\n\n  /**\n    * @notice Returns the address of the proposed owner.\n    */\n  function proposedTimestamp() public view virtual returns (uint256) {\n    return _proposedTimestamp;\n  }\n\n  /**\n    * @notice Returns the delay period before a new owner can be accepted.\n    */\n  function delay() public view virtual returns (uint256) {\n    return _delay;\n  }\n\n  /**\n    * @notice Throws if called by any account other than the owner.\n    */\n  modifier onlyOwner() {\n      require(owner() == msg.sender, \"#OO:029\");\n      _;\n  }\n\n  /**\n    * @notice Sets the timestamp for an owner to be proposed, and sets the\n    * newly proposed owner as step 1 in a 2-step process\n   */\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\n    _setProposed(newlyProposed);\n  }\n\n  /**\n    * @notice Transfers ownership of the contract to a new account (`newOwner`).\n    * Can only be called by the current owner.\n    */\n  function acceptProposedOwner() public virtual onlyOwner {\n    require((block.timestamp - _proposedTimestamp) > _delay, \"#APO:030\");\n    _setOwner(_proposed);\n  }\n\n  function _setOwner(address newOwner) private {\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n\n  function _setProposed(address newlyProposed) private {\n    _proposedTimestamp = block.timestamp;\n    _proposed = newlyProposed;\n    emit OwnershipProposed(_proposed);\n  }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File contracts/lib/LibAsset.sol\n\n\npragma solidity 0.8.4;\n/// @title LibAsset\n/// @author Connext <support@connext.network>\n/// @notice This library contains helpers for dealing with onchain transfers\n///         of assets, including accounting for the native asset `assetId`\n///         conventions and any noncompliant ERC20 transfers\n\nlibrary LibAsset {\n    /// @dev All native assets use the empty address for their asset id\n    ///      by convention\n    address constant NATIVE_ASSETID = address(0);\n\n    /// @notice Determines whether the given assetId is the native asset\n    /// @param assetId The asset identifier to evaluate\n    function isEther(address assetId) internal pure returns (bool) {\n      return assetId == NATIVE_ASSETID;\n    }\n\n    /// @notice Gets the balance of the inheriting contract for the given asset\n    /// @param assetId The asset identifier to get the balance of\n    function getOwnBalance(address assetId) internal view returns (uint256) {\n      return\n        isEther(assetId)\n          ? address(this).balance\n          : IERC20Upgradeable(assetId).balanceOf(address(this));\n    }\n\n    /// @notice Transfers ether from the inheriting contract to a given\n    ///         recipient\n    /// @param recipient Address to send ether to\n    /// @param amount Amount to send to given recipient\n    function transferEther(address payable recipient, uint256 amount)\n        internal\n    {\n      (bool success,) = recipient.call{value: amount}(\"\");\n      require(success, \"#TE:028\");\n    }\n\n    /// @notice Transfers tokens from the inheriting contract to a given\n    ///         recipient\n    /// @param assetId Token address to transfer\n    /// @param recipient Address to send ether to\n    /// @param amount Amount to send to given recipient\n    function transferERC20(\n        address assetId,\n        address recipient,\n        uint256 amount\n    ) internal {\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(assetId), recipient, amount);\n    }\n\n    /// @notice Transfers tokens from a sender to a given recipient\n    /// @param assetId Token address to transfer\n    /// @param from Address of sender/owner\n    /// @param to Address of recipient/spender\n    /// @param amount Amount to transfer from owner to spender\n    function transferFromERC20(\n      address assetId,\n      address from,\n      address to,\n      uint256 amount\n    ) internal {\n      SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(assetId), from, to, amount);\n    }\n\n    /// @notice Increases the allowance of a token to a spender\n    /// @param assetId Token address of asset to increase allowance of\n    /// @param spender Account whos allowance is increased\n    /// @param amount Amount to increase allowance by\n    function increaseERC20Allowance(\n      address assetId,\n      address spender,\n      uint256 amount\n    ) internal {\n      require(!isEther(assetId), \"#IA:034\");\n      SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable(assetId), spender, amount);\n    }\n\n    /// @notice Decreases the allowance of a token to a spender\n    /// @param assetId Token address of asset to decrease allowance of\n    /// @param spender Account whos allowance is decreased\n    /// @param amount Amount to decrease allowance by\n    function decreaseERC20Allowance(\n      address assetId,\n      address spender,\n      uint256 amount\n    ) internal {\n      require(!isEther(assetId), \"#DA:034\");\n      SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable(assetId), spender, amount);\n    }\n\n    /// @notice Wrapper function to transfer a given asset (native or erc20) to\n    ///         some recipient. Should handle all non-compliant return value\n    ///         tokens as well by using the SafeERC20 contract by open zeppelin.\n    /// @param assetId Asset id for transfer (address(0) for native asset, \n    ///                token address for erc20s)\n    /// @param recipient Address to send asset to\n    /// @param amount Amount to send to given recipient\n    function transferAsset(\n        address assetId,\n        address payable recipient,\n        uint256 amount\n    ) internal {\n      isEther(assetId)\n        ? transferEther(recipient, amount)\n        : transferERC20(assetId, recipient, amount);\n    }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.2;\n\n\n\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal initializer {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n\n\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n\n\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n\n\n// File @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n\n\n// File @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n\n\n// File @openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol@v4.3.1\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n\n// File contracts/TransactionManager.sol\n\n\npragma solidity 0.8.4;\n/// @title TransactionManager\n/// @author Connext <support@connext.network>\n/// @notice This contract holds the logic to facilitate crosschain transactions.\n///         Transactions go through three phases:\n///\n///         1. Route Auction: User broadcasts to our network signalling their \n///         desired route. Routers respond with sealed bids containing \n///         commitments to fulfilling the transaction within a certain time and \n///         price range.\n///\n///         2. Prepare: Once the auction is completed, the transaction can be \n///         prepared. The user submits a transaction to `TransactionManager` \n///         contract on sender-side chain containing router's signed bid. This \n///         transaction locks up the users funds on the sending chiain. Upon \n///         detecting an event containing their signed bid from the chain, \n///         router submits the same transaction to `TransactionManager` on the \n///         receiver-side chain, and locks up a corresponding amount of \n///         liquidity. The amount locked on the receiving chain is `sending \n///         amount - auction fee` so the router is incentivized to complete the \n///         transaction.\n///\n///         3. Fulfill: Upon detecting the `TransactionPrepared` event on the \n///         receiver-side chain, the user signs a message and sends it to a \n///         relayer, who will earn a fee for submission. The relayer (which may \n///         be the router) then submits the message to the `TransactionManager` \n///         to complete their transaction on receiver-side chain and claim the \n///         funds locked by the router. A relayer is used here to allow users \n///         to submit transactions with arbitrary calldata on the receiving \n///         chain without needing gas to do so. The router then submits the \n///         same signed message and completes transaction on sender-side, \n///         unlocking the original `amount`.\n///\n///         If a transaction is not fulfilled within a fixed timeout, it \n///         reverts and can be reclaimed by the party that called `prepare` on \n///         each chain (initiator). Additionally, transactions can be cancelled \n///         unilaterally by the person owed funds on that chain (router for \n///         sending chain, user for receiving chain) prior to expiry.\n\ncontract TransactionManager is UUPSUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, ProposedOwnable, ITransactionManager {\n  using SafeMathUpgradeable for uint256;\n\n  /// @dev Mapping of router to balance specific to asset\n  mapping(address => mapping(address => uint256)) public routerBalances;\n\n  /// @dev Mapping of allowed router addresses\n  mapping(address => bool) public approvedRouters;\n\n  /// @dev Mapping of hash of `InvariantTransactionData` to the hash\n  //       of the `VariantTransactionData`\n  mapping(bytes32 => bytes32) public variantTransactionData;\n  \n  uint256 public chainId;\n  /// @dev The chain id of the contract, is passed in to avoid any evm issues\n\n  /// @dev Minimum timeout (will be the lowest on the receiving chain)\n  uint256 public constant MIN_TIMEOUT = 2 hours; // 2 hours\n\n  /// @dev Maximum timeout\n  uint256 public constant MAX_TIMEOUT = 12 hours; // 12 hours\n\n  /// @dev Swapper\n  ISwapper public swapper;\n\n  /// @dev Normal Service Fee percent\n  uint256 constant public PERCENTS_DIVIDER = 10000;\n\n  uint256 public feePercent;\n\n  function initialize(uint256 _chainId) initializer public {\n    __Pausable_init_unchained();\n    __ReentrancyGuard_init_unchained();\n    __ProposedOwnable_init_unchained();\n\n    chainId = _chainId;\n  \n    // feePercent = 50;  // 0.5 %\n    setFeePercent(50);\n  }\n\n  function _authorizeUpgrade(address) internal override onlyOwner {}\n\n\n  /** \n   * @notice Gets the chainId for this contract. If not specified during init\n   *         will use the block.chainId\n   */\n  function getChainId() public view override returns (uint256 _chainId) {\n    // Hold in memory to reduce sload calls\n    uint256 chain = chainId;\n    if (chain == 0) {\n      // If not provided, pull from block\n      assembly {\n        _chainId := chainid()\n      }\n    } else {\n      // Use provided override\n      _chainId = chain;\n    }\n  }\n\n  /// @notice Indicates if the ownership has been renounced() by\n  ///         checking if current owner is address(0)\n  function renounced() public view override returns (bool) {\n    return owner() == address(0);\n  }\n\n\n  /// @notice Owner can set swapper address\n  /// @param _swapper Swapper address\n  function setSwapper(address _swapper) external onlyOwner whenNotPaused {\n    require(_swapper != address(0x0), \"invalid swapper address\");\n    swapper = ISwapper(_swapper);\n\n    emit NewSwapper(_swapper);\n  }\n\n\n  /// @notice Owner can set  normal fee percent\n  /// @param _percent normal fee percentage\n  function setFeePercent(uint256 _percent) public onlyOwner whenNotPaused{\n    require(_percent < PERCENTS_DIVIDER.div(5), \"too big fee\");\n    \n    feePercent = _percent;\n\n    // Emit event\n    emit NewFeePercent(_percent);\n  }\n\n  /// @notice Used to add routers that can transact crosschain\n  /// @param router Router address to add\n  function addRouter(address router) external override onlyOwner whenNotPaused {\n    // Sanity check: not empty\n    require(router != address(0), \"#AR:001\");\n\n    // Sanity check: needs approval\n    require(approvedRouters[router] == false, \"#AR:032\");\n\n    // Update mapping\n    approvedRouters[router] = true;\n\n    // Emit event\n    emit RouterAdded(router);\n  }\n\n  /// @notice Used to remove routers that can transact crosschain\n  /// @param router Router address to remove\n  function removeRouter(address router) external override onlyOwner whenNotPaused {\n    // Sanity check: not empty\n    require(router != address(0), \"#RR:001\");\n\n    // Sanity check: needs removal\n    require(approvedRouters[router] == true, \"#RR:033\");\n\n    // Update mapping\n    approvedRouters[router] = false;\n\n    // Emit event\n    emit RouterRemoved(router);\n  }\n\n\n  /// @notice This is used by any one to increase the available\n  ///         liquidity for a given asset on behalf of a router\n  /// @param amount The amount of liquidity to add for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're adding liquidity for\n  /// @param router The router you are adding liquidity on behalf of\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable override whenNotPaused {\n    _addLiquidityForRouter(amount, assetId, router);\n  }\n\n  /// @notice This is used by any router to increase their available\n  ///         liquidity for a given asset.\n  /// @param amount The amount of liquidity to add for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're adding liquidity for\n  function addLiquidity(uint256 amount, address assetId) external payable override whenNotPaused {\n    _addLiquidityForRouter(amount, assetId, msg.sender);\n  }\n\n  /// @notice Remove liquidity For router\n  /// @param amount The amount of liquidity to add for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're adding liquidity for\n  /// @param router The router you are adding liquidity on behalf of\n  function removeLiquidityFor(uint256 amount, address assetId, address router, address payable recipient) external onlyOwner whenNotPaused {\n    _removeLiquidityForRouter(amount, assetId, router, recipient);\n  }\n\n  /// @notice This is used by any router to increase their available\n  ///         liquidity for a given asset.\n  /// @param amount The amount of liquidity to add for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're adding liquidity for\n  function removeLiquidity(uint256 amount, address assetId, address payable recipient) external override whenNotPaused {\n    _removeLiquidityForRouter(amount, assetId, msg.sender, recipient);\n  }\n\n  \n  /// @notice This function creates a crosschain transaction. When called on\n  ///         the sending chain, the user is expected to lock up funds. When\n  ///         called on the receiving chain, the router deducts the transfer\n  ///         amount from the available liquidity. The majority of the\n  ///         information about a given transfer does not change between chains,\n  ///         with three notable exceptions: `amount`, `expiry`, and \n  ///         `preparedBlock`. The `amount` and `expiry` are decremented\n  ///         between sending and receiving chains to provide an incentive for \n  ///         the router to complete the transaction and time for the router to\n  ///         fulfill the transaction on the sending chain after the unlocking\n  ///         signature is revealed, respectively.\n  /// @param invariantData The data for a crosschain transaction that will\n  ///                      not change between sending and receiving chains.\n  ///                      The hash of this data is used as the key to store \n  ///                      the inforamtion that does change between chains \n  ///                      (amount, expiry,preparedBlock) for verification\n  /// @param amount The amount of the transaction on this chain\n  /// @param expiry The block.timestamp when the transaction will no longer be\n  ///               fulfillable and is freely cancellable on this chain\n  /// @param encodedBid The encoded bid that was accepted by the user for this\n  ///                   crosschain transfer. It is supplied as a param to the\n  ///                   function but is only used in event emission\n  /// @param bidSignature The signature of the bidder on the encoded bid for\n  ///                     this transaction. Only used within the function for\n  ///                     event emission. The validity of the bid and\n  ///                     bidSignature are enforced offchain\n  function prepare(\n    InvariantTransactionData calldata invariantData,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata encodedBid,\n    bytes calldata bidSignature\n  ) external payable override whenNotPaused returns (TransactionData memory) {\n    // Sanity check: user is sensible\n    require(invariantData.user != address(0), \"#P:009\");\n\n    // Sanity check: router is sensible\n    require(invariantData.router != address(0), \"#P:001\");\n\n    // Router is approved *on both chains*\n    require(renounced() || approvedRouters[invariantData.router], \"#P:003\");\n\n    // Sanity check: sendingChainFallback is sensible\n    require(invariantData.sendingChainFallback != address(0), \"#P:010\");\n\n    // Sanity check: valid fallback\n    require(invariantData.receivingAddress != address(0), \"#P:026\");\n\n    // Make sure the chains are different\n    require(invariantData.sendingChainId != invariantData.receivingChainId, \"#P:011\");\n\n    // Make sure the chains are relevant\n    uint256 _chainId = getChainId();\n    require(invariantData.sendingChainId == _chainId || invariantData.receivingChainId == _chainId, \"#P:012\");\n\n    // Make sure the expiry is greater than min\n    require((expiry - block.timestamp) >= MIN_TIMEOUT, \"#P:013\");\n\n    // Make sure the expiry is lower than max\n    require((expiry - block.timestamp) <= MAX_TIMEOUT, \"#P:014\");\n\n\n    // Emit event\n    TransactionData memory txData = _prepare(invariantData, amount, expiry);\n    \n    emit TransactionPrepared(txData.user, txData.router, txData.transactionId, txData, encodedBid, bidSignature);\n    return txData;\n  }\n\n  /// @notice This function creates a crosschain transaction. When called on\n  ///         the sending chain, the user is expected to lock up funds. When\n  ///         called on the receiving chain, the router deducts the transfer\n  ///         amount from the available liquidity. The majority of the\n  ///         information about a given transfer does not change between chains,\n  ///         with three notable exceptions: `amount`, `expiry`, and \n  ///         `preparedBlock`. The `amount` and `expiry` are decremented\n  ///         between sending and receiving chains to provide an incentive for \n  ///         the router to complete the transaction and time for the router to\n  ///         fulfill the transaction on the sending chain after the unlocking\n  ///         signature is revealed, respectively.\n  /// @param invariantData The data for a crosschain transaction that will\n  ///                      not change between sending and receiving chains.\n  ///                      The hash of this data is used as the key to store \n  ///                      the inforamtion that does change between chains \n  ///                      (amount, expiry,preparedBlock) for verification\n  /// @param amount The amount of the transaction on this chain\n  /// @param expiry The block.timestamp when the transaction will no longer be\n  ///               fulfillable and is freely cancellable on this chain\n  function _prepare(\n    InvariantTransactionData calldata invariantData,\n    uint256 amount,\n    uint256 expiry\n  ) internal returns (TransactionData memory) {\n\n    uint256 _chainId = getChainId();\n\n    // Make sure the hash is not a duplicate\n    bytes32 digest = keccak256(abi.encode(invariantData));\n    require(variantTransactionData[digest] == bytes32(0), \"#P:015\");\n    \n    address stableToken = getStableToken();\n    require(stableToken != address(0x0), \"#P:020\");\n  \n    uint256 stableAmount = 0;\n    // First determine if this is sender side or receiver side\n    if (invariantData.sendingChainId == _chainId) {\n      // Sanity check: amount is sensible\n      // Only check on sending chain to enforce router fees. Transactions could\n      // be 0-valued on receiving chain if it is just a value-less call to some\n      // `IFulfillHelper`\n      require(amount > 0, \"#P:002\");\n\n\n      // This is sender side prepare. The user is beginning the process of \n      // submitting an onchain tx after accepting some bid. They should\n      // lock their funds in the contract for the router to claim after\n      // they have revealed their signature on the receiving chain via\n      // submitting a corresponding `fulfill` tx\n\n      // Validate correct amounts on msg and transfer from user to\n      // contract\n      \n      // Swap sending asset to stable token\n      // Calculate Fee amount and fee token\n      stableAmount = transferAssetToContractWithFee(invariantData, amount);\n\n      // Store the transaction variants\n      variantTransactionData[digest] = hashVariantTransactionData(stableToken, stableAmount, amount, expiry, block.number);\n\n    } else {\n      // This is receiver side prepare. The router has proposed a bid on the\n      // transfer which the user has accepted. They can now lock up their\n      // own liquidity on th receiving chain, which the user can unlock by\n      // calling `fulfill`. When creating the `amount` and `expiry` on the\n      // receiving chain, the router should have decremented both. The\n      // expiry should be decremented to ensure the router has time to\n      // complete the sender-side transaction after the user completes the\n      // receiver-side transactoin. The amount should be decremented to act as\n      // a fee to incentivize the router to complete the transaction properly.\n\n\n      // Check that the caller is the router\n      require(msg.sender == invariantData.router, \"#P:016\");\n\n      // Check that the router isnt accidentally locking funds in the contract\n      require(msg.value == 0, \"#P:017\");\n\n\n      stableAmount = amount;\n      amount = 0;\n      \n      // Check that router has liquidity\n      uint256 balance = routerBalances[invariantData.router][stableToken];\n      require(balance >= stableAmount, \"#P:018\");\n\n      // Store the transaction variants\n      variantTransactionData[digest] = hashVariantTransactionData(stableToken, stableAmount, amount, expiry, block.number);\n\n      // Decrement the router liquidity\n      // using unchecked because underflow protected against with require\n      unchecked {\n        routerBalances[invariantData.router][stableToken] = balance - stableAmount;\n      }\n    }\n\n    // Emit event\n    TransactionData memory txData = TransactionData({\n      user: invariantData.user,\n      router: invariantData.router,\n      stableAssetId: stableToken,\n      sendingAssetId: invariantData.sendingAssetId,\n      receivingAssetId: invariantData.receivingAssetId,\n      sendingChainFallback: invariantData.sendingChainFallback,\n      receivingAddress: invariantData.receivingAddress,\n      transactionId: invariantData.transactionId,\n      sendingChainId: invariantData.sendingChainId,\n      receivingChainId: invariantData.receivingChainId,\n      amount: stableAmount,\n      assetAmount: amount,\n      expiry: expiry,\n      preparedBlockNumber: block.number\n    });\n  \n    return txData;\n  }\n\n  /// @notice This function completes a crosschain transaction. When called on\n  ///         the receiving chain, the user reveals their signature on the\n  ///         invariant parts of the transaction data and is sent the \n  ///         appropriate amount. The router then uses this signature to\n  ///         unlock the corresponding funds on the receiving chain, which are\n  ///         then added back to their available liquidity. The user includes a\n  ///         relayer fee since it is not assumed they will have gas on the\n  ///         receiving chain. This function *must* be called before the\n  ///         transaction expiry has elapsed.\n  /// @param txData All of the data (invariant and variant) for a crosschain\n  ///               transaction. The variant data provided is checked against\n  ///               what was stored when the `prepare` function was called.\n  /// @param relayerFee The fee that should go to the relayer when they are\n  ///                   calling the function on the receiving chain for the user\n  /// @param signature The users signature on the invariant data + fee that\n  ///                  can be used by the router to unlock the transaction on \n  ///                  the sending chain\n  function fulfill(\n    TransactionData calldata txData,\n    uint256 relayerFee,\n    bytes calldata signature // signature on fee + digest\n  ) external override nonReentrant whenNotPaused returns (TransactionData memory) {\n    // Get the hash of the invariant tx data. This hash is the same\n    // between sending and receiving chains. The variant data is stored\n    // in the contract when `prepare` is called within the mapping.\n    bytes32 digest = hashInvariantTransactionData(txData);\n\n    address stableToken = txData.stableAssetId;\n    require(stableToken != address(0x0), \"#F:030\");\n\n    // Make sure that the variant data matches what was stored\n    require(variantTransactionData[digest] == hashVariantTransactionData(stableToken, txData.amount, txData.assetAmount, txData.expiry, txData.preparedBlockNumber), \"#F:019\");\n\n    \n\n    // Make sure the transaction wasn't already completed\n    require(txData.preparedBlockNumber > 0, \"#F:021\");\n\n    // Validate the user has signed\n    require(recoverSignature(txData.transactionId, relayerFee, \"fulfill\", signature) == txData.user, \"#F:022\");\n\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\n    // mapping is explicitly *not* zeroed out so users who come online without\n    // a store can tell the difference between a transaction that has not been\n    // prepared, and a transaction that was already completed on the receiver\n    // chain.\n    variantTransactionData[digest] = hashVariantTransactionData(stableToken, txData.amount, txData.assetAmount, txData.expiry, 0);\n\n    uint256 assetAmount = 0;\n    if (txData.sendingChainId == chainId) {\n      // The router is completing the transaction, they should get the\n      // amount that the user deposited credited to their liquidity\n      // reserves.\n\n      // Make sure that the user is not accidentally fulfilling the transaction\n      // on the sending chain\n      require(msg.sender == txData.router, \"#F:016\");\n\n      // Complete tx to router for original sending amount\n      routerBalances[txData.router][stableToken] += txData.amount;\n      \n    } else {\n      // Make sure the expiry has not elapsed\n      require(txData.expiry >= block.timestamp, \"#F:020\");\n    \n      // Sanity check: fee <= amount. Allow `=` in case of only wanting to execute\n      // 0-value crosschain tx, so only providing the fee amount\n      require(relayerFee <= txData.amount, \"#F:023\");\n\n      // The user is completing the transaction, they should get the\n      // amount that the router deposited less fees for relayer.\n\n      // Swap stable token to asset => Transfer to receiver return asset amount\n      assetAmount = transferAssetToReceiver(txData, relayerFee);\n    }\n\n    // Emit event\n    emit TransactionFulfilled(txData.user, txData.router, txData.transactionId, txData, relayerFee, assetAmount, signature);\n\n    return txData;\n  }\n\n  /// @notice Any crosschain transaction can be cancelled after it has been\n  ///         created to prevent indefinite lock up of funds. After the\n  ///         transaction has expired, anyone can cancel it. Before the\n  ///         expiry, only the recipient of the funds on the given chain is\n  ///         able to cancel. On the sending chain, this means only the router\n  ///         is able to cancel before the expiry, while only the user can\n  ///         prematurely cancel on the receiving chain.\n  /// @param txData All of the data (invariant and variant) for a crosschain\n  ///               transaction. The variant data provided is checked against\n  ///               what was stored when the `prepare` function was called.\n  /// @param signature The user's signature that allows a transaction to be\n  ///                  cancelled on the receiving chain.\n  function cancel(TransactionData calldata txData,  bytes calldata signature)\n    external\n    override\n    nonReentrant\n    whenNotPaused\n    returns (TransactionData memory)\n  {\n    // Make sure params match against stored data\n    // Also checks that there is an active transfer here\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\n\n    // Get the hash of the invariant tx data. This hash is the same\n    // between sending and receiving chains. The variant data is stored\n    // in the contract when `prepare` is called within the mapping.\n    bytes32 digest = hashInvariantTransactionData(txData);\n\n    address stableToken = txData.stableAssetId;\n    require(stableToken != address(0x0), \"#C:030\");\n\n    // Verify the variant data is correct\n    require(variantTransactionData[digest] == hashVariantTransactionData(stableToken, txData.amount, txData.assetAmount, txData.expiry, txData.preparedBlockNumber), \"#C:019\");\n\n    // Make sure the transaction wasn't already completed\n    require(txData.preparedBlockNumber > 0, \"#C:021\");\n\n\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\n    // mapping is explicitly *not* zeroed out so users who come online without\n    // a store can tell the difference between a transaction that has not been\n    // prepared, and a transaction that was already completed on the receiver\n    // chain.\n    variantTransactionData[digest] = hashVariantTransactionData(stableToken, txData.amount, txData.assetAmount, txData.expiry, 0);\n\n\n    // Return the appropriate locked funds\n    if (txData.sendingChainId == chainId) {\n      // Sender side, funds must be returned to the user\n      if (txData.expiry >= block.timestamp) {\n        // Timeout has not expired and tx may only be cancelled by router\n        // NOTE: no need to validate the signature here, since you are requiring\n        // the router must be the sender when the cancellation is during the\n        // fulfill-able window\n        require(msg.sender == txData.router, \"#C:025\");\n\n        // Return totality of locked funds to provided fallback\n        uint256 toRefund = swapAssetWithStable(txData.sendingAssetId, txData.amount, false);\n        LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), toRefund);\n      } else {\n        \n        // Get the amount to refund the user\n        uint256 toRefund = txData.amount;\n\n        // Return locked funds to sending chain fallback\n        if (toRefund > 0) {\n          toRefund = swapAssetWithStable(txData.sendingAssetId, toRefund, false);\n          LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), toRefund);\n        }\n      }\n\n    } else {\n      // Receiver side, router liquidity is returned\n      if (txData.expiry >= block.timestamp) {\n        // Timeout has not expired and tx may only be cancelled by user\n        // Validate signature\n        require(msg.sender == txData.user || recoverSignature(txData.transactionId, 0, \"cancel\", signature) == txData.user, \"#C:022\");\n\n        // NOTE: there is no incentive here for relayers to submit this on\n        // behalf of the user (i.e. fee not respected) because the user has not\n        // locked funds on this contract.\n      }\n\n      // Return liquidity to router\n      routerBalances[txData.router][stableToken] += txData.amount;\n    }\n\n    // Emit event\n    emit TransactionCancelled(txData.user, txData.router, txData.transactionId, txData);\n\n    // Return\n    return txData;\n  }\n\n  //////////////////////////\n  /// Private functions ///\n  //////////////////////////\n\n  /// @notice Contains logic to add liquidity for a given router\n  /// @param amount The amount of liquidity to add for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're adding liquidity for\n  /// @param router The router you are adding liquidity on behalf of\n  function _addLiquidityForRouter(\n    uint256 amount,\n    address assetId,\n    address router\n  ) internal {\n    // Sanity check: router is sensible\n    require(router != address(0), \"#AL:001\");\n\n    // Sanity check: nonzero amounts\n    require(amount > 0, \"#AL:002\");\n\n    // Store renounced() result in memory for gas\n    bool isRenounced = renounced();\n\n    // Router is approved\n    require(isRenounced || approvedRouters[router], \"#AL:003\");\n\n    // Validate correct amounts are transferred\n    // Transfer funds to contract\n    amount = transferAssetToContract(assetId, amount);\n\n    // Update the router balances\n    routerBalances[router][assetId] += amount;\n\n    // Emit event\n    emit LiquidityAdded(router, assetId, amount);\n  }\n\n\n  /// @notice This is used by any router to decrease their available\n  ///         liquidity for a given asset.\n  /// @param amount The amount of liquidity to remove for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're removing liquidity for\n  /// @param router The router address to remove\n  /// @param recipient The address that will receive the liquidity being removed\n  function _removeLiquidityForRouter(\n    uint256 amount,\n    address assetId,\n    address router,\n    address payable recipient\n  ) internal {\n    // Sanity check: recipient is sensible\n    require(recipient != address(0), \"#RL:007\");\n\n    // Sanity check: nonzero amounts\n    require(amount > 0, \"#RL:002\");\n\n    uint256 routerBalance = routerBalances[router][assetId];\n    // Sanity check: amount can be deducted for the router\n    require(routerBalance >= amount, \"#RL:008\");\n\n    // Update router balances\n    unchecked {\n      routerBalances[router][assetId] = routerBalance - amount;\n    }\n\n    // Transfer from contract to specified recipient\n    LibAsset.transferAsset(assetId, recipient, amount);\n\n    // Emit event\n    emit LiquidityRemoved(router, assetId, amount, recipient);\n  }\n\n  /// @notice Swap asset - stable token\n  /// @param _assetId Asset Address\n  /// @param _amount The amount for swap: sending Chain: asset, receiving chain: Stable token\n  /// @param _toStable Asset to stable or stable to asset\n  function swapAssetWithStable(\n    address _assetId,\n    uint256 _amount,\n    bool _toStable\n    ) \n    internal returns (uint256){\n      IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(swapper.getUniswapV2Router02());\n      address stableToken = getStableToken();\n\n      if(_assetId == stableToken) {\n        return _amount;\n      }\n\n      bool isEther = LibAsset.isEther(_assetId);\n      uint256 returnAmount = 0;\n\n      if(_toStable) {\n        // Sender Side\n        // Swap sending asset to stable token\n        uint256 senderStarting = LibAsset.getOwnBalance(stableToken);\n        if (!isEther) {\n          LibAsset.increaseERC20Allowance(_assetId, address(uniswapV2Router), _amount);\n          uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            _amount,\n            0, // accept any amount of stable token\n            swapper.getPath(_assetId, false),\n            address(this),\n            block.timestamp\n          );\n        } else {\n          uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\n            value: _amount\n          }(\n            0,\n            swapper.getPath(_assetId, false),\n            address(this),\n            block.timestamp\n          );\n        }\n        returnAmount = LibAsset.getOwnBalance(stableToken) - senderStarting;\n      } else {\n        // Receiver Side\n        // Swap stable token to receiving asset\n        uint256 receiverStarting = LibAsset.getOwnBalance(_assetId);\n        LibAsset.increaseERC20Allowance(stableToken, address(uniswapV2Router), _amount);\n        if (!isEther) {\n          uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            _amount,\n            0, // accept any amount of receiving token\n            swapper.getPath(_assetId, true),\n            address(this),\n            block.timestamp\n          );\n        } else {\n          uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            _amount,\n            0, // accept any amount of ETH\n            swapper.getPath(_assetId, true),\n            address(this),\n            block.timestamp\n          );\n        }\n        returnAmount = LibAsset.getOwnBalance(_assetId) - receiverStarting;\n      }\n\n      return returnAmount;\n  }\n\n  /// @notice Transfer asset and fee to contract and fee address\n  /// @param invariantData The data for a crosschain transaction that will\n  ///                      not change between sending and receiving chains.\n  ///                      The hash of this data is used as the key to store \n  ///                      the inforamtion that does change between chains \n  ///                      (amount, expiry,preparedBlock) for verification\n  /// @param _amount The amount for swap: sending Chain: asset, receiving chain: Stable token\n  function transferAssetToContractWithFee(\n    InvariantTransactionData calldata invariantData,\n    uint256 _amount) \n    internal returns(uint256) {\n      uint256 amount = _amount;\n      \n      // Pay Router Gas Fee\n      bool isEther = LibAsset.isEther(invariantData.sendingAssetId);\n      require(msg.value > (isEther ? amount : 0), \"#P: 081\");\n\n      uint256 gasFee = isEther ? (msg.value - amount) : msg.value;\n      LibAsset.transferEther(payable(invariantData.router), gasFee);\n\n       // Sending Token to contract(Consider fee token)\n      amount = transferAssetToContract(invariantData.sendingAssetId, amount);\n\n      // Swap Sending token to stable token\n      amount = swapAssetWithStable(invariantData.sendingAssetId, amount, true);\n\n      // Transfer fee\n      uint256 fee = amount.mul(feePercent).div(PERCENTS_DIVIDER);\n      require(amount > fee, \"#P:080\");\n      \n      // Fee amount from sending token to fee address\n      LibAsset.transferAsset(getStableToken(), payable(invariantData.router), fee);\n      amount = amount.sub(fee);\n      \n      return amount;\n  }\n\n\n  /// @notice  Transfer Asset to Receiver after swpping stable token to asset\n  /// @param txData All of the data (invariant and variant) for a crosschain\n  ///               transaction. The variant data provided is checked against\n  ///               what was stored when the `prepare` function was called.\n  /// @param relayerFee The fee that should go to the relayer when they are\n  ///                   calling the function for the user\n  function transferAssetToReceiver(TransactionData calldata txData, uint256 relayerFee)\n    internal returns(uint256)\n  {\n    uint256 toSend;\n    unchecked {\n      toSend = txData.amount - relayerFee;\n    }\n    \n    address stableToken = getStableToken();\n\n    // Send the relayer the fee\n    if (relayerFee > 0) {\n      LibAsset.transferAsset(stableToken, payable(msg.sender), relayerFee);\n    }\n\n    // Swap Stable token to receiving token\n    toSend = swapAssetWithStable(txData.receivingAssetId, toSend, false);\n\n    if (toSend > 0) {\n      LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend);\n    }\n\n    return toSend;\n  }\n  /**\n   * @notice Handles transferring funds from msg.sender to the\n   *         transaction manager contract. Used in prepare, addLiquidity\n   * @param assetId The address to transfer\n   * @param specifiedAmount The specified amount to transfer. May not be the \n   *                        actual amount transferred (i.e. fee on transfer \n   *                        tokens)\n   */\n  function transferAssetToContract(address assetId, uint256 specifiedAmount) internal returns (uint256) {\n  uint256 trueAmount = specifiedAmount;\n\n    // Validate correct amounts are transferred\n    if (LibAsset.isEther(assetId)) {\n      require(msg.value >= specifiedAmount, \"#TA:005\");\n    } else {\n      uint256 starting = LibAsset.getOwnBalance(assetId);\n      // require(msg.value == 0, \"#TA:006\"); // consider relayer fee for prepare\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), specifiedAmount);\n      // Calculate the *actual* amount that was sent here\n      trueAmount = LibAsset.getOwnBalance(assetId) - starting;\n    }\n\n    return trueAmount;\n  }\n\n  /// @notice Recovers the signer from the signature provided by the user\n  /// @param transactionId Transaction identifier of tx being recovered\n  /// @param relayerFee The fee paid to the relayer for submitting the\n  ///                   tx on behalf of the user.\n  /// @param functionIdentifier The function the signature is being used for.\n  ///                           Either `fulfill` or `cancel`\n  /// @param signature The signature you are recovering the signer from\n  function recoverSignature(\n    bytes32 transactionId,\n    uint256 relayerFee,\n    string memory functionIdentifier,\n    bytes calldata signature\n  ) internal pure returns (address) {\n    // Create the signed payload\n    SignedData memory payload = SignedData({\n      transactionId: transactionId,\n      relayerFee: relayerFee,\n      functionIdentifier: functionIdentifier\n    });\n\n    // Recover\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);\n  }\n\n  /// @notice Returns the hash of only the invariant portions of a given\n  ///         crosschain transaction\n  /// @param txData TransactionData to hash\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\n    InvariantTransactionData memory invariant = InvariantTransactionData({\n      user: txData.user,\n      router: txData.router,\n      sendingAssetId: txData.sendingAssetId,\n      receivingAssetId: txData.receivingAssetId,\n      sendingChainFallback: txData.sendingChainFallback,\n      receivingAddress: txData.receivingAddress,\n      sendingChainId: txData.sendingChainId,\n      receivingChainId: txData.receivingChainId,\n      transactionId: txData.transactionId\n    });\n    return keccak256(abi.encode(invariant));\n  }\n\n  /// @notice Returns the hash of only the variant portions of a given\n  ///         crosschain transaction\n  /// @param stableAssetId stable token address to hash\n  /// @param stableAmount amount to hash\n  /// @param assetAmount amount to hash\n  /// @param expiry expiry to hash\n  /// @param preparedBlockNumber preparedBlockNumber to hash\n  function hashVariantTransactionData(\n    address stableAssetId,\n    uint256 stableAmount,\n    uint256 assetAmount, \n    uint256 expiry, \n    uint256 preparedBlockNumber\n  ) internal pure returns (bytes32) {\n    VariantTransactionData memory variant = VariantTransactionData({\n      stableAssetId: stableAssetId,\n      amount: stableAmount,\n      assetAmount: assetAmount,\n      expiry: expiry,\n      preparedBlockNumber: preparedBlockNumber\n    });\n    return keccak256(abi.encode(variant));\n  }\n\n  /// @notice Returns the fee Percent\n  ///\n  function getFeePercent() public view returns(uint256) {\n    return feePercent;\n  }\n\n  /// @notice Returns the token price from price oracle\n  /// @param token Sending token address\n  /// (Price for 1 wei) * 10 ^ 36\n  function getTokenPrice(address token) public override view returns(uint256, uint256) {\n    if(address(swapper) == address(0x0)) {\n      return (0, 0);\n    }\n\n    return swapper.getTokenPrice(token);\n  }\n\n  function getStableToken() public view returns(address) {\n    return swapper.getStableToken();\n  }\n  \n  function getStableAssetLiquidity(address router) public override view returns(uint256, uint256) {\n    address stableToken = getStableToken();\n    return (routerBalances[router][stableToken], IERC20Minimal(stableToken).decimals());\n  }\n\n  \n  function getStableAmountForAsset(uint amountIn, address assetId) public view returns (uint256, uint256) {\n    return (\n      swapper.getAmountOut(amountIn, assetId, false),\n      IERC20Minimal(getStableToken()).decimals()\n    );\n  }\n\n  function getAssetAmountForStable(uint amountIn, address assetId) public view returns (uint256, uint256) {\n    return (\n      swapper.getAmountOut(amountIn, assetId, true),\n      IERC20Minimal(assetId).decimals()\n    );\n  }\n  \n  function getAmountsOut(uint amountIn, address assetId, bool fromStable) public view returns (uint[] memory amounts) {\n    return swapper.getAmountsOut(amountIn, assetId, fromStable);\n  }\n\n  function getAmountsIn(uint amountOut, address assetId, bool fromStable) public view returns (uint[] memory amounts) {\n    return swapper.getAmountsIn(amountOut, assetId, fromStable);\n  }\n\n  function isContract(address _addr) view private returns (bool){\n    uint32 size;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return (size > 0);\n  }\n\n  //to recieve ETH from uniswapV2Router when swaping\n  receive() external payable {}\n}\n"}}}