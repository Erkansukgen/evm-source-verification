{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "GoElevateCertificates.sol": {
      "content": "//  Created by: Ingenia - URL: https://ingenia.la\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract GoElevateCertificates is Ownable {\r\n\r\n\tenum Status {Active, Inactive }\r\n\tbytes32 constant NULL = \"\";\r\n\r\n\tstruct Course{\r\n\t\tbytes32 courseId;\r\n\t\tstring courseName;\r\n\t\tuint256 startDate;\r\n\t\tuint256 endDate;\r\n\t\tStatus status;\r\n\t}\r\n\r\n\tstruct Certificate {\r\n\t\tbytes32 certId;\r\n\t\tbytes32 courseId;\r\n\t\tuint256 score;\r\n\t\tuint256 studentId;\r\n\t\tstring studentName;\r\n\t\tStatus status;\r\n\t}\r\n\r\n\tmapping (bytes32 => Course) courses;\r\n\tmapping (bytes32 => Certificate) certificates;\r\n\r\n\tstring public name;     \r\n\r\n\tevent CourseCreated(bytes32 indexed courseId, string courseName, uint256 startDate, uint256 endDate);\r\n\tevent CourseDisabled(bytes32 indexed courseId);\r\n\tevent CourseEnabled(bytes32 indexed courseId);\r\n\tevent CertificateIssued(bytes32 indexed certificateId, bytes32 indexed courseId, string studentName, uint256 score);\r\n\tevent CertificateDisabled(bytes32 indexed certificateId);\r\n\tevent CertificateEnabled(bytes32 indexed certificateId);\r\n\r\n    constructor(string memory contractName) {\r\n        name = contractName;\r\n    }\r\n\r\n\tfunction createCourse( bytes32 courseId, string memory courseName, uint256 startDate, uint256 endDate) public onlyOwner returns (bool) {\r\n\t\trequire(courseId.length  > 0 , \"Invalid course id\");\r\n\t\trequire(startDate  > 0, \"Invalid start date\");\r\n\t\trequire(endDate > startDate, \"Invalid end date\");\r\n\t\tbytes memory courseNameTest = bytes(courseName);\r\n\t\trequire(courseNameTest.length > 0, \"Course name should be provided\");\r\n\r\n\t\trequire(courses[courseId].courseId == NULL, \"Duplicated Key\");\r\n\r\n\t\tcourses[courseId] = Course(courseId,courseName, startDate, endDate, Status.Active);\r\n\t\temit CourseCreated(courseId,courseName, startDate, endDate);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction issueCertificate( bytes32 certificateId, bytes32 courseId, uint256 score, uint256 studentId, string memory studentName) public onlyOwner returns (bool) {\r\n\t\trequire(certificateId.length  > 0  , \"Invalid certificate id\");\r\n\t\trequire(courseId  > 0 && courses[courseId].startDate  > 0 && courses[courseId].status == Status.Active, \"Invalid course id\");\r\n\t\tbytes memory studentNameTest = bytes(studentName);\r\n\t\trequire(studentNameTest.length > 2, \"Student name should be provided\");\r\n\t\trequire(certificates[certificateId].certId == NULL , \"Duplicated Key\");\r\n\t\t\r\n\t\tcertificates[certificateId] = Certificate(certificateId, courseId, score, studentId, studentName, Status.Active);\r\n\t\temit CertificateIssued(certificateId, courseId, studentName, score);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction changeCertStatus( bytes32 certId, Status status) public onlyOwner returns (bool) {\r\n\t\trequire(certificates[certId].status != status , \"No change\");\r\n\t\tcertificates[certId].status = status;\r\n\t\tif(status == Status.Active){\r\n\t\t\temit CertificateEnabled(certId);\r\n\t\t} else {\r\n\t\t\temit CertificateDisabled(certId);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction changeCourseStatus( bytes32 courseId, Status status) public onlyOwner returns (bool) {\r\n\t\trequire(courses[courseId].status != status , \"No change\");\r\n\t\tcourses[courseId].status = status;\r\n\t\t\tif(status == Status.Active){\r\n\t\t\temit CourseEnabled(courseId);\r\n\t\t} else {\r\n\t\t\temit CourseDisabled(courseId);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getCourse(bytes32 courseId) public view returns(\r\n\t\tstring memory courseName,\r\n\t\tStatus courseStatus,\r\n\t\tuint256 startDate,\r\n\t\tuint256 endDate)\r\n\t{\r\n\t\tcourseName = courses[courseId].courseName;\r\n\t\tcourseStatus = courses[courseId].status;\r\n\t\tstartDate = courses[courseId].startDate;\r\n\t\tendDate = courses[courseId].endDate;\r\n\t}\r\n\r\n\tfunction getCertificateInfo(bytes32 certId) public view  \r\n\t\treturns(\r\n\t\t\tstring memory courseName,\r\n\t\t\tStatus courseStatus,\r\n\t\t\tuint256 startDate,\r\n\t\t\tuint256 endDate,\r\n\t\t\tbytes32 courseId,\r\n\t\t\tuint256 score,\r\n\t\t\tuint256 studentId,\r\n\t\t\tstring memory studentName,\r\n\t\t\tStatus certificateStatus) {\r\n\t\t\r\n\t\t\tcourseName = courses[certificates[certId].courseId].courseName;\r\n\t\t\tcourseStatus = courses[certificates[certId].courseId].status;\r\n\t\t\tstartDate = courses[certificates[certId].courseId].startDate;\r\n\t\t\tendDate = courses[certificates[certId].courseId].endDate;\r\n\t\t\tcourseId = certificates[certId].courseId;\r\n\t\t\tscore = certificates[certId].score;\r\n\t\t\tstudentId = certificates[certId].studentId;\r\n\t\t\tstudentName = certificates[certId].studentName;\r\n\t\t\tcertificateStatus = certificates[certId].status;\r\n\t\t}\r\n}"
    }
  }
}