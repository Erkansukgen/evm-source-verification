{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "flash.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IERC20{\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n\n}\n\ninterface TroveManager{\n     function batchLiquidateTroves(address[] memory _troveArray) external;\n}\n\ninterface UniV2{\n    function swapExactTokensForETH(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external returns (uint[] memory amounts);\n}\n\n\ncontract flash{\n    address constant LUSD = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address constant UNIV2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address constant TM = 0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2;\n    address immutable owner1;\n    constructor(){\n        IERC20(LUSD).approve(UNIV2, 2**254);\n        owner1 = msg.sender;\n    }\n    function SewndMeTowkensUwU42069(address addr) external{\n        require(msg.sender == owner1);\n        uint balance = IERC20(addr).balanceOf(address(this));\n        IERC20(addr).transfer(owner1, balance);\n    }\n    function SewndMeMoneyOwO69420() external{\n        require(msg.sender == owner1);\n        payable(owner1).transfer(address(this).balance);\n    }\n    function LiqwidateMeHawrderUwU69420(address[] calldata borrower, uint LUSDamt, uint minTokenOut, uint minerFee) external{\n        TroveManager(TM).batchLiquidateTroves(borrower);\n        address[] memory path = new address[](2);\n        path[0] = LUSD;\n        path[1] = WETH;\n        UniV2(UNIV2).swapExactTokensForETH(LUSDamt, minTokenOut, path, address(this), block.timestamp);\n        block.coinbase.transfer(minerFee);\n        payable(owner1).transfer(address(this).balance);\n    }\n    receive() external payable{}\n}"
    }
  }
}