{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/proof_2_1_4.sol":{"content":"/*\n! proof.sol\n(c) 2020 Krasava Digital Solutions\nDevelop by BelovITLab LLC (smartcontract.ru) & Krasava Digital Solutions (krasava.pro)\nauthors @stupidlovejoy, @sergeytyan\nLicense: MIT \n*/\n\npragma solidity 0.6.6;\n\nabstract contract Context {\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _beforeTokenTransfer(sender, recipient, amount);\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _beforeTokenTransfer(account, address(0), amount);\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\ncontract ERC20DecimalsMock is ERC20 {\n    constructor (string memory name, string memory symbol, uint8 decimals) public ERC20(name, symbol) {\n        _setupDecimals(decimals);\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary EnumerableSet {\n    struct Set {\n        bytes32[] _values;\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n            bytes32 lastvalue = set._values[lastIndex];\n            set._values[toDeleteIndex] = lastvalue;\n            set._indexes[lastvalue] = toDeleteIndex + 1;\n            set._values.pop();\n            delete set._indexes[value];\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n        _grantRole(role, account);\n    }\n\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n        _revokeRole(role, account);\n    }\n\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n        _revokeRole(role, account);\n    }\n\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\ncontract Pausable is Context {\n    event Paused(address account);\n    event Unpaused(address account);\n    bool private _paused;\n    constructor () internal {\n        _paused = false;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\ninterface OrFeed {\n    function getExchangeRate(string calldata from, string calldata to, string calldata venue, uint256 amount) external view returns(uint256);\n}\n\ncontract Token is ERC20DecimalsMock(\"PROOF\", \"PRF\", 6), Ownable, AccessControl, Pausable {\n    using SafeERC20 for IERC20;\n    struct KeyVal {uint256 key; uint256 val;}\n    struct User {address referrer; uint32 last_transaction;}\n    bytes32 public constant contract_admin = keccak256(\"CONTRACT_ADMIN\");\n    bool public ethBuySwitch = true;\n    bool public usdtBuySwitch = true;\n    address[] public founders;\n    address[] public cashiers;\n    address[] public managers;\n    uint256 private eth_custom_rate;\n    uint256 private tether_rate = 1;\n    uint256 private project_reward;\n    KeyVal[] private days_percent;\n    KeyVal[] private refs_percent;\n    KeyVal[] private refs_multiply;\n    IERC20 public tether = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n    OrFeed public orfeed = OrFeed(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\n    mapping(address => User) public users;\n    event Buy(address indexed addr, uint32 datetime, uint256 balance, uint256 amount);\n    event DayPayout(address indexed addr, uint32 datetime, uint256 balance, uint256 amount);\n    event RefPayout(address indexed addr, uint32 datetime, uint256 amount);\n\n    modifier onlyFounders() {\n        for(uint256 i = 0; i < founders.length; i++) {\n            if(founders[i] == msg.sender) {\n                _;\n                return;\n            }\n        }\n        revert(\"Access denied\");\n    }\n\n    constructor() public {    \n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(contract_admin, msg.sender);\n        founders.push(0x2589171E72A4aaa7b0e7Cc493DB6db7e32aC97d4);\n        founders.push(0x3d027e252A275650643cE83934f492B6914D3341);\n        founders.push(0xe74400179854ca60bCD0d3dA3BB0A2BA9028FB76);\n        founders.push(0x30517CaE41977fc9d4a21e2423b7D5Ce8D19d0cb);\n        cashiers.push(0x1411B85AaE2Dc11927566042401a6DE158cE4413);\n        managers.push(0x5e646586E572D5D6B44153e81224D26F23B00651);\n        days_percent.push(KeyVal(1e6, 10));\n        days_percent.push(KeyVal(1e8, 13));\n        days_percent.push(KeyVal(5e8, 17));\n        days_percent.push(KeyVal(1e9, 22));\n        days_percent.push(KeyVal(5e9, 28));\n        days_percent.push(KeyVal(1e10, 35));\n        days_percent.push(KeyVal(5e10, 43));\n        days_percent.push(KeyVal(1e11, 52));\n        days_percent.push(KeyVal(5e11, 62));\n        days_percent.push(KeyVal(1e12, 0));\n        refs_percent.push(KeyVal(1e6, 100));\n        refs_percent.push(KeyVal(1e8, 200));\n        refs_percent.push(KeyVal(1e9, 300));\n        refs_percent.push(KeyVal(1e10, 400));\n        refs_percent.push(KeyVal(1e11, 500));\n        refs_multiply.push(KeyVal(1e6, 100));\n        refs_multiply.push(KeyVal(1e8, 150));\n        refs_multiply.push(KeyVal(1e9, 210));\n        refs_multiply.push(KeyVal(1e10, 310));\n        refs_multiply.push(KeyVal(1e11, 460));\n    }\n  \n    receive() payable external whenNotPaused {\n        require(ethBuySwitch, \"ETH buy is off\");\n        _buy(msg.sender, msg.value * this.eth_rate() / tether_rate / 1e12);\n    }\n\n    function _findInKeyVal(KeyVal[] memory _arr, uint256 _val) private pure returns(uint256) {\n        for(uint8 i = uint8(_arr.length); i > 0; i--) {\n            if(_val >= _arr[i - 1].key) {\n                return _arr[i - 1].val;\n            }\n        }\n    }\n    \n    function mintcomp(uint256 _amount) external view returns(uint256) {\n        return _amount * this.totalSupply() / 1e15;\n    }\n\n    function _timeProfit(address _account) private returns(uint256 value) {\n        uint256 balance = this.balanceOf(_account);\n        uint256 percent = _findInKeyVal(days_percent, balance);\n        value = balance > 0 && percent > 0 ? (block.timestamp - users[_account].last_transaction) * balance * percent / 10000 / 1 days : 0;\n        if(value > 0 && users[_account].last_transaction > 0) {\n            value -= this.mintcomp(value);\n            uint256 min = (block.timestamp - users[_account].last_transaction) * balance * 100 / 10000 / 30 days;\n            if(value < min) value = min;\n            users[_account].last_transaction = uint32(block.timestamp);\n            _mint(_account, value);\n            emit DayPayout(_account, users[_account].last_transaction, balance, value);\n        }\n    }\n\n    function _refReward(address _referal, address _referrer, uint256 _amount) private returns(uint256 value) {\n        uint256 percent = _findInKeyVal(refs_percent, this.balanceOf(_referal));\n        uint256 multiply = _findInKeyVal(refs_multiply, this.balanceOf(_referrer));\n        if(percent > 0 && multiply > 0) {\n            value = _amount * percent * multiply / 1000000;\n            value -= this.mintcomp(value);\n            uint256 min = _amount / 100;            \n            if(value < min) value = min;            \n            _mint(_referrer, value);\n            emit RefPayout(_referrer, uint32(block.timestamp), value);\n        }\n    }\n\n    function _beforeTokenTransfer(address _from, address _to, uint256) internal override {\n        if(_from != address(0)) {\n            uint256 f_profit = _timeProfit(_from);\n            if(f_profit > 0 && users[_from].referrer != address(0)) {\n                _refReward(_from, users[_from].referrer, f_profit);\n            }            \n        }\n        if(_from != _to) {\n            uint256 t_profit = _timeProfit(_to);\n            if(t_profit > 0 && users[_to].referrer != address(0)) {\n                _refReward(_to, users[_to].referrer, t_profit);\n            }\n            if(users[_to].referrer == address(0) && _from != address(0)) {\n                users[_to].referrer = _from;\n            }\n            if(users[_to].last_transaction == 0) users[_to].last_transaction = uint32(block.timestamp);\n        }\n    }\n    \n    function _buy(address _to, uint256 _amount) private {\n        require(_amount > 0, \"Zero amount\");\n        _mint(_to, _amount);\n        emit Buy(_to, uint32(block.timestamp), this.balanceOf(_to), _amount);\n    }\n\n    function eth_buy_switch(bool _value) external {\n        require(hasRole(contract_admin, msg.sender), \"Caller is not a CONTRACT ADMIN\");\n        ethBuySwitch = _value;\n    }\n\n    function usd_buy_switch(bool _value) external {\n        require(hasRole(contract_admin, msg.sender), \"Caller is not a CONTRACT ADMIN\");\n        usdtBuySwitch = _value;\n    }\n\n    function eth_buy() external payable whenNotPaused {\n        require(ethBuySwitch, \"ETH buy is off\");\n        _buy(msg.sender, msg.value * this.eth_rate() / tether_rate / 1e12);\n    }\n\n    function usdt_buy(uint256 _value) external whenNotPaused {\n        require(usdtBuySwitch, \"Tether buy is off\");\n        tether.safeTransferFrom(msg.sender, address(this), _value);\n        _buy(msg.sender, _value / tether_rate);\n    }\n\n    function eth_rate_set(uint256 _value) external onlyFounders {\n        eth_custom_rate = _value;\n    }\n\n    function usdt_rate_set(uint256 _value) external onlyFounders {\n        tether_rate = _value;\n    }\n\n    function eth_rate_up(uint256 _value) external {\n        require(hasRole(contract_admin, msg.sender), \"Caller is not a CONTRACT ADMIN\");\n        eth_custom_rate = _value > eth_custom_rate ? _value : eth_custom_rate;\n    }\n\n    function usdt_rate_up(uint256 _value) external {\n        require(hasRole(contract_admin, msg.sender), \"Caller is not a CONTRACT ADMIN\");\n        tether_rate = _value > tether_rate ? _value : tether_rate;\n    }\n\n    function eth_rate() external view returns(uint256) {\n        return eth_custom_rate > 0 ? eth_custom_rate : orfeed.getExchangeRate(\"ETH\", \"USDC\", \"DEFAULT\", 1e12);\n    }\n\n    function usdt_rate() external view returns(uint256) {\n        return tether_rate;\n    }\n\n    function eth_balance() external view returns(uint256) {\n        return address(this).balance;\n    }\n\n    function usdt_balance() external view returns(uint256) {\n        return tether.balanceOf(address(this));\n    }\n    \n    function balance() external view returns(uint256, uint256) {\n        return (address(this).balance, tether.balanceOf(address(this)));\n    }\n\n    function managers_set(uint256 _index, address _account) external onlyFounders {\n        if(managers.length > _index) {\n            if(_account == address(0)) {\n                for(uint256 i = 0; i < managers.length - 1; i++) {\n                    if(i < _index) {\n                        managers[i] = managers[i];\n                    }\n                    else managers[i] = managers[i + 1];\n                }\n                managers.pop();\n            }\n            else managers[_index] = _account;\n        }\n        else {\n            require(_account != address(0), \"Zero address\");\n            managers.push(_account);\n        }\n    }\n\n    function cashiers_set(uint256 _index, address _account) external onlyFounders {\n        if(cashiers.length > _index) {\n            if(_account == address(0)) {\n                for(uint256 i = 0; i < cashiers.length - 1; i++) {\n                    if(i < _index) {\n                        cashiers[i] = cashiers[i];\n                    }\n                    else cashiers[i] = cashiers[i + 1];\n                }\n                cashiers.pop();\n            }\n            else cashiers[_index] = _account;\n        }\n        else {\n            require(_account != address(0), \"Zero address\");\n            cashiers.push(_account);\n        }\n    }\n    \n    function prf_reward() external onlyFounders {\n        require(this.totalSupply() - project_reward >= 1e6, \"Not enough totalSuply\");\n        uint256 value = (this.totalSupply() - project_reward) / 200;\n        for(uint8 i = 0; i < founders.length; i++) {\n            _mint(founders[i], value / founders.length);\n        }\n        for(uint8 i = 0; i < managers.length; i++) {\n            _mint(managers[i], value / managers.length);\n        }\n        project_reward = this.totalSupply();\n    }\n\n    function eth_withdraw(uint256 _value) external onlyFounders {\n        require(address(this).balance >= 1e6, \"Not enough ETH\");\n        uint256 value = (_value > 0 ? _value : address(this).balance) / 2;\n        for(uint8 i = 0; i < founders.length; i++) {\n            payable(founders[i]).transfer(value / founders.length);\n        }\n        for(uint8 i = 0; i < cashiers.length; i++) {\n            payable(cashiers[i]).transfer(value / cashiers.length);\n        }\n    }\n    \n    function usdt_withdraw(uint256 _value) external onlyFounders {\n        require(tether.balanceOf(address(this)) >= 1e6, \"Not enough USDT\");\n        uint256 value = (_value > 0 ? _value : tether.balanceOf(address(this))) / 2;\n        for(uint8 i = 0; i < founders.length; i++) {\n            tether.safeTransfer(founders[i], value / founders.length);\n        }\n        for(uint8 i = 0; i < cashiers.length; i++) {\n            tether.safeTransfer(cashiers[i], value / cashiers.length);\n        }\n    }\n    \n    function pause() external onlyFounders {\n        _pause();\n    }\n\n    function unpause() external onlyFounders {\n        _unpause();\n    }\n    \n    function burn(uint256 _amount) external{\n        _burn(msg.sender, _amount);\n    }\n}"}}}