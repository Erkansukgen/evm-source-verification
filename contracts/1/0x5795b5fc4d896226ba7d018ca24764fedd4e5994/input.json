{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AAAAOtherConfig.sol": {
      "content": "// Dependency file: contracts/modules/Ownable.sol\n\n//SPDX-License-Identifier: MIT\n// pragma solidity >=0.5.16;\n\ncontract Ownable {\n    address public owner;\n\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\n        _;\n    }\n\n    function changeOwner(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\n        emit OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n}\n\n\n// Root file: contracts/AAAAOtherConfig.sol\n\npragma solidity >=0.5.16;\n// import \"contracts/modules/Ownable.sol\";\n\ncontract AAAAOtherConfig is Ownable {\n    mapping(address=>bool) public isToken;\n    mapping(address=>bool) public disabledToken;\n\n    function setToken(address _token, bool _value) onlyOwner external {\n        isToken[_token] = _value;\n    }\n\n    function setDisabledToken(address _token, bool _value) onlyOwner external {\n        disabledToken[_token] = _value;\n    }\n\n}"
    }
  }
}