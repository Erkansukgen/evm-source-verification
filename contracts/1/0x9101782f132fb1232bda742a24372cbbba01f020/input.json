{"language":"Solidity","settings":{"evmVersion":"istanbul","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/AAAAMint.sol":{"content":"// Dependency file: contracts/libraries/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/libraries/TransferHelper.sol\n\n\n// pragma solidity >=0.6.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// Dependency file: contracts/modules/Configable.sol\n\n// pragma solidity >=0.5.16;\npragma experimental ABIEncoderV2;\n\ninterface IConfig {\n    function developer() external view returns (address);\n    function platform() external view returns (address);\n    function factory() external view returns (address);\n    function mint() external view returns (address);\n    function token() external view returns (address);\n    function developPercent() external view returns (uint);\n    function share() external view returns (address);\n    function base() external view returns (address); \n    function governor() external view returns (address);\n    function getPoolValue(address pool, bytes32 key) external view returns (uint);\n    function getValue(bytes32 key) external view returns(uint);\n    function getParams(bytes32 key) external view returns(uint, uint, uint, uint); \n    function getPoolParams(address pool, bytes32 key) external view returns(uint, uint, uint, uint); \n    function wallets(bytes32 key) external view returns(address);\n    function setValue(bytes32 key, uint value) external;\n    function setPoolValue(address pool, bytes32 key, uint value) external;\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function setPoolParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function initPoolParams(address _pool) external;\n    function isMintToken(address _token) external returns (bool);\n    function prices(address _token) external returns (uint);\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);\n    function DAY() external view returns (uint);\n    function WETH() external view returns (address);\n}\n\ncontract Configable {\n    address public config;\n    address public owner;\n\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setupConfig(address _config) external onlyOwner {\n        config = _config;\n        owner = IConfig(config).developer();\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyDeveloper() {\n        require(msg.sender == IConfig(config).developer(), 'DEVELOPER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyPlatform() {\n        require(msg.sender == IConfig(config).platform(), 'PLATFORM FORBIDDEN');\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == IConfig(config).factory(), 'FACTORY FORBIDDEN');\n        _;\n    }\n\n    modifier onlyGovernor() {\n        require(msg.sender == IConfig(config).governor(), 'Governor FORBIDDEN');\n        _;\n    }\n}\n\n// Dependency file: contracts/modules/ConfigNames.sol\n\n// pragma solidity >=0.5.16;\n\nlibrary ConfigNames {\n    //GOVERNANCE\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\n\n    // POOL\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\n    \n    //NOT GOVERNANCE\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\n\n    //POOL\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\n\n    //wallet\n    bytes32 public constant TEAM = bytes32('team'); \n    bytes32 public constant SPARE = bytes32('spare');\n    bytes32 public constant REWARD = bytes32('reward');\n}\n\n// Root file: contracts/AAAAMint.sol\n\npragma solidity >=0.5.16;\n// import \"contracts/libraries/SafeMath.sol\";\n// import \"contracts/libraries/TransferHelper.sol\";\n// import \"contracts/modules/Configable.sol\";\n// import \"contracts/modules/ConfigNames.sol\";\n\ncontract AAAAMint is Configable {\n    using SafeMath for uint;\n\n    uint public mintCumulation;\n    uint public amountPerBlock;\n    \n    uint public lastRewardBlock;\n    uint public totalProductivity;\n    uint public totalSupply;\n    uint public accAmountPerShare;\n    uint public maxSupply;\n\n    struct UserInfo {\n        uint amount;     // How many LP tokens the user has provided.\n        uint rewardDebt; // Reward debt. \n        uint rewardEarn; // Reward earn and not minted\n    }\n\n    mapping(address => UserInfo) public users;\n    \n    event InterestsPerBlockChanged (uint oldValue, uint newValue);\n    event ProductivityIncreased (address indexed user, uint value);\n    event ProductivityDecreased (address indexed user, uint value);\n    event Mint(address indexed user, uint userAmount, uint teamAmount, uint rewardAmount, uint spareAmount);\n\n    function addMintAmount(uint _amount) external virtual {\n        TransferHelper.safeTransferFrom(IConfig(config).token(), msg.sender, address(this), _amount);\n        maxSupply = maxSupply.add(_amount);\n    }\n \n    // External function call\n    // This function adjust how many token will be produced by each block, eg:\n    // changeAmountPerBlock(100)\n    // will set the produce rate to 100/block.\n    function sync() public virtual returns (bool) {\n        uint value = IConfig(config).getValue(ConfigNames.MINT_AMOUNT_PER_BLOCK);\n        uint old = amountPerBlock;\n        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\n        require(maxSupply > totalSupply, 'NO_BALANCE_TO_MINT');\n        \n        _update();\n        amountPerBlock = value;\n\n        emit InterestsPerBlockChanged(old, value);\n        return true;\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function _update() internal virtual {\n        if (block.number <= lastRewardBlock) {\n            return;\n        }\n\n        if (totalProductivity == 0) {\n            lastRewardBlock = block.number;\n            return;\n        }\n        \n        uint256 reward = _currentReward();\n        if(reward == 0) {\n            amountPerBlock = 0;\n        } else {\n            totalSupply = totalSupply.add(reward);\n\n            accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n            lastRewardBlock = block.number;\n        }\n    }\n    \n    function _currentReward() internal virtual view returns (uint){\n        uint256 multiplier = block.number.sub(lastRewardBlock);\n        uint reward = multiplier.mul(amountPerBlock);\n        if(totalSupply.add(reward) > maxSupply) {\n            reward = maxSupply.sub(totalSupply);\n        }\n        \n        return reward;\n    }\n    \n    // Audit user's reward to be up-to-date\n    function _audit(address user) internal virtual {\n        UserInfo storage userInfo = users[user];\n        if (userInfo.amount > 0) {\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\n            mintCumulation = mintCumulation.add(pending);\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        }\n    }\n\n    // External function call\n    // This function increase user's productivity and updates the global productivity.\n    // the users' actual share percentage will calculated by:\n    // Formula:     user_productivity / global_productivity\n    function increaseProductivity(address user, uint value) external virtual onlyPlatform returns (bool) {\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n\n        UserInfo storage userInfo = users[user];\n        _update();\n        _audit(user);\n\n        totalProductivity = totalProductivity.add(value);\n\n        userInfo.amount = userInfo.amount.add(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        emit ProductivityIncreased(user, value);\n        return true;\n    }\n\n    // External function call \n    // This function will decreases user's productivity by value, and updates the global productivity\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\n    function decreaseProductivity(address user, uint value) external virtual onlyPlatform returns (bool) {\n        UserInfo storage userInfo = users[user];\n        require(value > 0 && userInfo.amount >= value, \"INSUFFICIENT_PRODUCTIVITY\");\n        _update();\n        _audit(user);\n        \n        userInfo.amount = userInfo.amount.sub(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        totalProductivity = totalProductivity.sub(value);\n\n        emit ProductivityDecreased(user, value);\n        return true;\n    }\n    \n    function takeWithAddress(address user) public view returns (uint) {\n        UserInfo storage userInfo = users[user];\n        uint _accAmountPerShare = accAmountPerShare;\n        // uint256 lpSupply = totalProductivity;\n        if (totalProductivity != 0) {\n            uint reward = _currentReward();\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n        }\n        uint amount = userInfo.amount.mul(_accAmountPerShare).div(1e12).sub(userInfo.rewardDebt).add(userInfo.rewardEarn);\n        return amount.mul(IConfig(config).getValue(ConfigNames.AAAA_USER_MINT)).div(10000);\n    }\n\n    function take() external virtual view returns (uint) {\n        return takeWithAddress(msg.sender);\n    }\n\n    // Returns how much a user could earn plus the giving block number.\n    function takeWithBlock() external virtual view returns (uint, uint) {\n        uint earn = takeWithAddress(msg.sender);\n        return (earn, block.number);\n    }\n\n\n    // External function call\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\n    // Also it calculates global token supply from last time the user mint to this time.\n    function mint() external virtual returns (uint) {\n        _update();\n        _audit(msg.sender);\n        require(users[msg.sender].rewardEarn > 0, \"NOTHING_TO_MINT\");\n        uint amount = users[msg.sender].rewardEarn;\n        _mintDistribution(msg.sender, amount);\n        users[msg.sender].rewardEarn = 0;\n        return amount;\n    }\n\n    // Returns how many productivity a user has and global has.\n    function getProductivity(address user) external virtual view returns (uint, uint) {\n        return (users[user].amount, totalProductivity);\n    }\n\n    // Returns the current gorss product rate.\n    function interestsPerBlock() external virtual view returns (uint) {\n        return accAmountPerShare;\n    }\n    \n    function _mintDistribution(address user, uint amount) internal {\n        uint userAmount = amount.mul(IConfig(config).getValue(ConfigNames.AAAA_USER_MINT)).div(10000);\n        uint remainAmount = amount.sub(userAmount);\n        uint teamAmount = remainAmount.mul(IConfig(config).getValue(ConfigNames.AAAA_TEAM_MINT)).div(10000);\n        if(teamAmount > 0) {\n            TransferHelper.safeTransfer(IConfig(config).token(), IConfig(config).wallets(ConfigNames.TEAM), teamAmount);\n        }\n        \n        remainAmount = remainAmount.sub(teamAmount);\n        uint rewardAmount = remainAmount.mul(IConfig(config).getValue(ConfigNames.AAAA_REWAED_MINT)).div(10000);\n        if(rewardAmount > 0) {\n            TransferHelper.safeTransfer(IConfig(config).token(), IConfig(config).wallets(ConfigNames.REWARD), rewardAmount);\n        }  \n\n        uint spareAmount = remainAmount.sub(rewardAmount);\n        if(spareAmount > 0) {\n            TransferHelper.safeTransfer(IConfig(config).token(), IConfig(config).wallets(ConfigNames.SPARE), spareAmount);\n        }\n        \n        if(userAmount > 0) {\n           TransferHelper.safeTransfer(IConfig(config).token(), user, userAmount); \n        }\n        emit Mint(user, userAmount, teamAmount, rewardAmount, spareAmount);\n    }\n}"}}}