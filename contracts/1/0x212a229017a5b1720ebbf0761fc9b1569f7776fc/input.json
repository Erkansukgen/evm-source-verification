{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/feeCalc.sol": {
      "content": "pragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n    \n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n        \n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev Initializes the contract setting the deployer as the initial owner.\n    */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n    * @dev Returns the address of the current owner.\n    */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n    * @dev Leaves the contract without owner. It will not be possible to call\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\n    *\n    * NOTE: Renouncing ownership will leave the contract without an owner,\n    * thereby removing any functionality that is only available to the owner.\n    */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n    * Can only be called by the current owner.\n    */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract FeeCalc is Context, Ownable {\n    using SafeMath for uint256;\n    \n    uint256 private constant MAX = ~uint256(0);\n    IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    \n    constructor() {\n        \n    }\n    \n    function calc(address token, uint256 tokenAmount) external payable returns (uint buyEthSpent, uint buyTokenReceived, uint sellTokenSpent, uint sellEthReceived) {\n        uint ethBalBeforeBuy = address(this).balance;\n        uint tokenBalBeforeBuy = IERC20(token).balanceOf(address(this));\n        \n        swapETHForExactTokens(token, tokenAmount); // step 1\n        \n        uint ethBalAfterBuy = address(this).balance;\n        uint tokenBalAfterBuy = IERC20(token).balanceOf(address(this));\n        buyEthSpent = ethBalBeforeBuy.sub(ethBalAfterBuy);\n        buyTokenReceived = tokenBalAfterBuy.sub(tokenBalBeforeBuy);\n        \n        approve(token); // step 2\n        \n        uint ethBalBeforeSell = address(this).balance;\n        uint tokenBalBeforeSell = IERC20(token).balanceOf(address(this));\n        \n        swapTokensForETH(token, IERC20(token).balanceOf(address(this))); // step 3\n        \n        uint ethBalAfterSell = address(this).balance;\n        uint tokenBalAfterSell = IERC20(token).balanceOf(address(this));\n        sellTokenSpent = tokenBalBeforeSell.sub(tokenBalAfterSell);\n        sellEthReceived = ethBalAfterSell.sub(ethBalBeforeSell);\n    }\n    \n    function approve(address token) private {\n        bool approved = IERC20(token).approve(address(uniswapV2Router), MAX);\n        require(approved, 'failed approve');\n    }\n    \n    function swapETHForExactTokens(address token, uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = token;\n        uint256 v = address(this).balance;\n        uniswapV2Router.swapETHForExactTokens{value: v}(\n            tokenAmount,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    function swapTokensForETH(address token, uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = uniswapV2Router.WETH();\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function withdrawETH() external onlyOwner {\n        uint256 contractETHBalance = address(this).balance;\n        payable(owner()).transfer(contractETHBalance);\n    }\n    \n    receive() payable external {}\n}"
    }
  }
}