{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/KatDataStore.sol":{"content":"//SPDX-License-Identifier: UNLICENSED1\npragma solidity >=0.4.22 <0.7.0;\n\ncontract KatDataStore {\n    address public owner;\n    address payable public devAddr;\n    address public katAddr;\n    address public usdtAddr;\n    address public katMan;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    \n    uint public curEpoch = 1;\n    uint public oneEth = 1 ether ;\n    uint public buyBackMin ;\n    uint public priceFirst;\n    uint public priceSecond;\n    uint public communitylen = 0;\n    bool public isInit;\n\n    \n    constructor() public {\n        owner = msg.sender;\n        devAddr = msg.sender;\n        userInfo[devAddr].registBlock = block.number;\n        \n    }\n    fallback() payable external {}\n    receive() payable external {}\n    \n    struct UserInfo {\n        address invitor;\n        uint registBlock;\n        uint totalInvest;\n        uint cid;\n    }\n    \n    struct DepositInfo {\n        uint depositVal;\n        uint depositTimes;\n        uint personReward;\n        uint dynamicReward;\n        bool isWithdraw;\n        \n    }\n    struct EpochInfo {\n        uint totalAmountToken;\n        uint totalLimitEth;\n        uint totalDeposit;\n        bool isOver;\n    }\n    \n    struct CommunityInfo{\n        uint totalDeposit;\n        uint totalUserCount;\n        uint registBlock;\n        string cname;\n        address cowner;\n    }\n    \n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    modifier onlyKat(){\n        require(msg.sender == katMan);\n        _;\n    }\n    \n    mapping(address => address[]) public referArr;\n    mapping(address => mapping(uint => DepositInfo)) public depositInfo;\n    mapping(address => UserInfo) public userInfo;\n    mapping(uint => EpochInfo) public epochInfo;\n    mapping(uint => CommunityInfo) public communityInfo;\n    mapping(string => bool) public cnameRegisted;\n\n    function transferOwnerShip(address _owner) public onlyOwner {\n        owner = _owner;\n    }\n    function setBuyBackMin(uint _minNum) public onlyOwner {\n        buyBackMin = _minNum;\n    }\n    function setPriceFirst(uint _priceFirst) public onlyOwner {\n        priceFirst = _priceFirst;\n    }\n    function setPriceSecond(uint _priceSecond) public onlyOwner {\n        priceSecond = _priceSecond;\n    }\n    function setDevAddr(address payable _devAddr) public onlyOwner {\n        devAddr = _devAddr;\n    }\n    function setKatManager(address _katMan) public onlyOwner {\n        katMan = _katMan;\n    }\n    function initializeEpoch(address _katAddr,address _usdtAddr) public onlyOwner {\n        require(!isInit);\n        katAddr = _katAddr;\n        usdtAddr = _usdtAddr;\n        epochInfo[1] = EpochInfo(oneEth.mul(300_000),oneEth.mul(10_000),0,false );\n        epochInfo[2] = EpochInfo(oneEth.mul(800_000),oneEth.mul(100_000),0,false );\n        epochInfo[3] = EpochInfo(oneEth.mul(2200_000),oneEth.mul(1_000_000),0,false );\n        isInit = true;\n    }\n    function getOutUsdt(address _to,uint _amount) public onlyOwner {\n        safeTransferToken(usdtAddr,_to,_amount);\n    }\n    function getOutKat(address _to,uint _amount) public onlyOwner {\n        safeTransferToken(katAddr,_to,_amount);\n    }\n    function sellKatForUsdt(uint _amount) public  {\n        require(_amount >= buyBackMin);\n        IERC20(katAddr).safeTransferFrom(msg.sender,devAddr,_amount);\n        uint backUsdt = viewKatForUsdtAmount(_amount);\n        safeTransferToken(usdtAddr , msg.sender, backUsdt);\n    }\n    function createCommunity(address _user,string memory _cname) public onlyOwner{\n        require(!cnameRegisted[_cname]);\n        communitylen = communitylen.add(1);\n        communityInfo[communitylen] = CommunityInfo(0,0,block.number,_cname,_user);\n        cnameRegisted[_cname] = true;\n    }\n    function depositTodo(address _user,address _invitor,uint _cid,uint depositVal,bool isNew) public onlyKat{\n        EpochInfo storage epoch = epochInfo[curEpoch];\n        UserInfo storage user = userInfo[_user];\n        DepositInfo storage deposit = depositInfo[_user][curEpoch];\n        CommunityInfo storage comm = communityInfo[_cid];\n        epoch.totalDeposit = epoch.totalDeposit.add(depositVal);\n        \n        if(epoch.totalDeposit >= epoch.totalLimitEth){\n            curEpoch = curEpoch.add(1);\n            epoch.isOver = true;\n        }\n        \n        user.totalInvest = user.totalInvest.add(depositVal);\n        \n        deposit.depositVal = deposit.depositVal.add(depositVal);\n        deposit.depositTimes = deposit.depositTimes.add(1);\n        \n        comm.totalDeposit = comm.totalDeposit.add(depositVal);\n        // devAddr.transfer(depositVal.mul(1000).div(10000));\n        safeTransferEth(devAddr,depositVal.mul(1000).div(10000));\n        if(isNew){\n            user.invitor = _invitor;\n            user.registBlock = block.number;\n            user.cid = _cid;\n            comm.totalUserCount = comm.totalUserCount.add(1);\n            if(!findIsReffer(_invitor,_user)){\n                referArr[_invitor].push(_user);\n            }\n        }\n    }\n    function findIsReffer(address _user,address _invitor) public view returns(bool isInsert){\n        for(uint i;i< referArr[_user].length;i++){\n            if(_invitor == referArr[_user][i]){\n                isInsert = true;\n                break;\n            }\n        }\n    }\n    function getEthTodo(address payable _user,uint _amount) public onlyKat{\n        EpochInfo storage epoch = epochInfo[curEpoch];\n        UserInfo storage user = userInfo[_user];\n        DepositInfo storage deposit = depositInfo[_user][curEpoch];\n        CommunityInfo storage comm = communityInfo[user.cid];\n        require(deposit.depositVal >= _amount);\n        require(user.totalInvest >= _amount);\n        deposit.depositVal = deposit.depositVal.sub(_amount);\n        epoch.totalDeposit = epoch.totalDeposit.sub(_amount);\n        user.totalInvest = user.totalInvest.sub(_amount);\n        comm.totalDeposit = comm.totalDeposit.sub(_amount);\n        \n        safeTransferEth(_user,_amount.mul(9000).div(10000));\n        if(user.totalInvest == 0){\n            user.cid = 0;\n            user.registBlock = 0;\n            user.invitor = address(0);\n            comm.totalUserCount = comm.totalUserCount.sub(1);\n        }\n    }\n    function getRewardTodo(address payable _user,uint _epoch) public onlyKat {\n        \n        DepositInfo storage deposit = depositInfo[_user][_epoch];\n        uint reward = calReward(deposit.depositVal,_epoch);\n        safeTransferEth(_user,deposit.depositVal.mul(9000).div(10000));\n        safeTransferToken(katAddr ,_user, reward);\n        deposit.personReward = reward;\n        deposit.isWithdraw = true;\n        execute(userInfo[_user].invitor, 1 ,reward.mul(5000).div(10000), _epoch);\n    }\n    function execute(address invitor,uint runtimes,uint _staticAm,uint epoch) private returns(uint) {\n        if(runtimes <= 8 && invitor != address(0) && invitor != address(devAddr) && IERC20(katAddr).balanceOf(address(this))>0){\n            DepositInfo storage deposit = depositInfo[invitor][epoch];\n            if(deposit.depositVal > 0){\n                safeTransferToken(katAddr , invitor, _staticAm);\n                deposit.dynamicReward = deposit.dynamicReward.add(_staticAm);\n            }\n            return execute(userInfo[invitor].invitor,runtimes+1,_staticAm.mul(5000).div(10000),epoch);\n        }\n        return uint(0);\n    }\n    function viewContractEth() public view returns(uint){\n        return address(this).balance;\n    }\n    function viewReward(address _user,uint _epoch) public view returns(uint){\n        if(epochInfo[_epoch].isOver){\n            DepositInfo memory deposit = depositInfo[_user][_epoch];\n            if(deposit.isWithdraw){\n                return deposit.dynamicReward.add(deposit.personReward);\n            }\n            uint reward = calReward(deposit.depositVal,_epoch);\n            return reward.add(deposit.dynamicReward);\n        }\n        return uint(0);\n    }\n    function viewKatForUsdtAmount(uint amount) public view returns(uint){\n        return uint(amount.mul(priceSecond).div(oneEth));\n    }\n    function calReward(uint amount,uint _epoch) public view returns(uint){\n        return epochInfo[_epoch].totalAmountToken.mul(amount).mul(5000).div(10000).div(epochInfo[_epoch].totalDeposit);\n    }\n    function isRegisted(address _user) public view returns(bool){\n        return userInfo[_user].registBlock > 0 ;\n    }\n    function safeTransferToken(address _token,address _user,uint _amount) private {\n        uint contBalToken = IERC20(_token).balanceOf(address(this));\n        if(contBalToken > _amount){\n            IERC20(_token).safeTransfer(_user,_amount);\n        }else{\n            IERC20(_token).safeTransfer(_user,contBalToken);\n        }\n    }\n    function safeTransferEth(address payable _user,uint _amount) private {\n        if(address(this).balance > _amount){\n            _user.transfer(_amount);\n        }else{\n            _user.transfer(address(this).balance);\n        }\n    }\n    \n}\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external ;\n    function transfer(address to, uint value) external ;\n    function transferFrom(address from, address to, uint value) external ;\n    function mint(address,uint) external;\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"}}}