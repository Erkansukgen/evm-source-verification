{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/PiraAdmin.sol":{"content":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./interfaces/IPiraAdmin.sol\";\r\n\r\ncontract PiraAdmin is IPiraAdmin {\r\n    address[] private _admins;\r\n\r\n    constructor() {\r\n        _admins.push(msg.sender);\r\n    }\r\n\r\n    function grant(address admin) public override returns (bool) {\r\n        require(exists(msg.sender), \"Caller must be admin.\");\r\n        _admins.push(admin);\r\n        return true;\r\n    }\r\n\r\n    function revoke(address admin) public override returns (bool) {\r\n        require(exists(msg.sender), \"Caller must be admin.\");\r\n        require(admin != msg.sender, \"Admin cannot revoke itself\");\r\n\r\n        for (uint256 i = 0; i < _admins.length; i++) {\r\n            if (_admins[i] == admin) {\r\n                _admins[i] = address(0);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isAdmin(address admin) public view override returns (bool) {\r\n        return exists(admin);\r\n    }\r\n\r\n    function getAdmins() public view override returns (address[] memory) {\r\n        return _admins;\r\n    }\r\n\r\n    function exists(address admin) private view returns (bool) {\r\n        for (uint256 i = 0; i < _admins.length; i++) {\r\n            if (_admins[i] == admin) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function push(address admin) private returns (bool) {\r\n        bool inserted = false;\r\n        for (uint256 i = 0; i < _admins.length; i++) {\r\n            if (_admins[i] == address(0)) {\r\n                _admins[i] = admin;\r\n                inserted = true;\r\n            }\r\n        }\r\n        if (!inserted) {\r\n            _admins.push(admin);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"},"contracts/interfaces/IPiraAdmin.sol":{"content":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPiraAdmin {\r\n\r\n    function grant(address admin) external returns(bool);\r\n\r\n    function revoke(address admin) external returns(bool);\r\n\r\n    function isAdmin(address admin) external view returns(bool);\r\n\r\n    function getAdmins() external view returns(address[] memory);\r\n}"}}}