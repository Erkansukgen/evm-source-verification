{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/FundMe.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.6 <0.9.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ncontract FundMe {\r\n    \r\n    mapping(address => uint256) public addressToAmountFunded;\r\n    \r\n    function fund() public payable {\r\n        addressToAmountFunded[msg.sender] += msg.value;\r\n        // what the ETH => USDT conversion rate\r\n    }\r\n\r\n    function getVersion() public view returns (uint256){\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46);\r\n        return priceFeed.version();\r\n    }   \r\n\r\n    function getPrice() public view returns (uint256){\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46);\r\n        (,int256 answer,,,) = priceFeed.latestRoundData();\r\n        return uint256(answer);\r\n    }  \r\n    \r\n}"}}}