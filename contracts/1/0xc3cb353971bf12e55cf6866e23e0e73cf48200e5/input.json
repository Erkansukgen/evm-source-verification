{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Ay.sol": {
      "content": "pragma solidity =0.6.6;\n\ncontract UniswapV2Router02 {\n  address public WETH;\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external {}\n}\n\ncontract ChiToken {\n  function mint(uint256 value) public {}\n  function approve(address spender, uint256 amount) public returns (bool) {}\n}\n\ncontract Ay {\n  UniswapV2Router02 router = UniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n  ChiToken chi = ChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n  address owner;\n  \n  receive() external payable {}\n  \n  constructor () public {\n    owner = msg.sender;\n  }\n  \n  function go(uint256 amount, uint256 perc) external {\n    require(msg.sender == owner);\n    uint256 amountIn = amount;\n    uint256 amountOutMin = 0;\n    \n    chi.mint(amountIn);\n    \n    require(chi.approve(address(router), amountIn), 'approve failed.');\n    \n    address[] memory path = new address[](2);\n    path[0] = address(chi);\n    path[1] = router.WETH();\n    router.swapExactTokensForETH(amountIn, amountOutMin, path, address(this), block.timestamp);\n    \n    // total earned\n    uint256 total = address(this).balance;\n    \n    // miner fee\n    uint256 minerFee = total / 100 * perc;\n    \n    // caller fee\n    uint256 callerFee = total - minerFee;\n    \n    // pay miner\n    block.coinbase.transfer(minerFee);\n    \n    // pay caller\n    msg.sender.transfer(callerFee);\n  }\n}"
    }
  }
}