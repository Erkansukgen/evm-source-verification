{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ValueLiquid-newcore/ProtocolFeeRemover.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\n\npragma solidity 0.7.6;\n\ninterface IValueLiquidPair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\n\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\n\n    function getSwapFee() external view returns (uint32);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(\n        address,\n        address,\n        uint32,\n        uint32\n    ) external;\n}\n\ncontract ProtocolFeeRemover {\n    address public receiver = address(0xEbC44681c125d63210a33D30C55FD3d37762675B);\n    address public governance;\n\n    event RemoveLiquidity(address indexed pair, uint256 token0, uint256 token1);\n\n    constructor() {\n        governance = msg.sender;\n    }\n\n    function setReceiver(address _receiver) external {\n        require(msg.sender == governance, \"ProtocolFeeRemover: FORBIDDEN\");\n        receiver = _receiver;\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"ProtocolFeeRemover: FORBIDDEN\");\n        governance = _governance;\n    }\n\n    function remove(address[] calldata pairs) external {\n        address _receiver = receiver;\n        // save gas\n        require(_receiver != address(0), \"ProtocolFeeRemover: Invalid Receiver address\");\n        for (uint256 i = 0; i < pairs.length; i++) {\n            IValueLiquidPair pair = IValueLiquidPair(pairs[i]);\n            uint256 liquidity = pair.balanceOf(address(this));\n            if (liquidity > 0) {\n                pair.transfer(address(pair), liquidity);\n                (uint256 amount0, uint256 amount1) = pair.burn(_receiver);\n                emit RemoveLiquidity(address(pair), amount0, amount1);\n            }\n        }\n    }\n}\n"}}}