{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/test.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface VaultPool{\n    function available(address _singleToken) external view returns (uint256); \n    function getPoolTotalDeposit(address _singleToken) external view returns (uint256 totaldeposit);\n    function poolInfoExist(address _singleToken) external view returns (bool);\n\n    function setPaused(bool _paused)external  ;\n    \n    function grantRole(bytes32 role, address account) external; \n}\n\ncontract TestFun{\n    constructor(){\n    }   \n\n    function test(address _vaultpool, bool _paused) public {\n        VaultPool( _vaultpool ).setPaused(_paused);\n    }\n\n    function grantRole(address _vaultpool, bytes32 role, address account) public {\n            VaultPool( _vaultpool ).grantRole( role , account);\n    }\n    \n\n} "
    }
  }
}