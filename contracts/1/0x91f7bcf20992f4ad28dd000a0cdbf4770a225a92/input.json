{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/FlashLoaner.sol": {
      "content": "\npragma solidity =0.6.6;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function totalFee() external view returns (uint256);\n\n    function alpha() external view returns (uint256);\n\n    function beta() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint256\n    ) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n}\n\nlibrary SafeMathUniswap {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\ncontract FlashLoaner {\n    using SafeMathUniswap for uint256;\n\n\n    address public uniFactory;\n\n    address public sushiFactory;\n\n    address public uniRouter;\n\n    address public sushiRouter;\n\n    address public wEth;\n\n    bool private _isSuShi;\n\n    address private recvice;\n\n     constructor(address _uniFactory, address _sushiFactory,address _uniRouter,address _sushiRouter) public{\n        \n        wEth = IUniswapV2Router01(_uniRouter).WETH();\n        uniFactory = _uniFactory;\n        sushiFactory = _sushiFactory;\n        uniRouter = _uniRouter;\n        sushiRouter = _sushiRouter;\n    }\n\n    function univ2(\n        address tokenAddress,\n        uint256 amount,\n        bool isSuShi\n    ) external view returns (uint256,int256) {\n        address sushiPair = IUniswapV2Factory(sushiFactory).getPair(\n            tokenAddress,\n            wEth\n        );\n        address uniPair = IUniswapV2Factory(uniFactory).getPair(\n            tokenAddress,\n            wEth\n        );\n        if (uniPair == address(0) || sushiPair == address(0)) {\n            return (0,0);\n        }\n        if (wEth < tokenAddress) {\n            if (isSuShi) {\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveSushi0,\n                    reserveSushi1\n                );\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveUni1,\n                    reserveUni0\n                );\n                return (amountIn,int256(amountOut) - int256(amountIn));\n            } else {\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveUni0,\n                    reserveUni1\n                );\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveSushi1,\n                    reserveSushi0\n                );\n                return (amountIn,int256(amountOut) - int256(amountIn));\n            }\n        } else {\n            if (isSuShi) {\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveSushi1,\n                    reserveSushi0\n                );\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveUni0,\n                    reserveUni1\n                );\n                return (amountIn,int256(amountOut) - int256(amountIn));\n            } else {\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveUni1,\n                    reserveUni0\n                );\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveSushi0,\n                    reserveSushi1\n                );\n                return (amountIn,int256(amountOut) - int256(amountIn));\n            }\n        }\n    }\n    function univ3(\n        address tokenAddress,\n        uint256 amount,\n        bool isSuShi\n    ) external view returns (int256) {\n        address sushiPair = IUniswapV2Factory(sushiFactory).getPair(\n            tokenAddress,\n            wEth\n        );\n        address uniPair = IUniswapV2Factory(uniFactory).getPair(\n            tokenAddress,\n            wEth\n        );\n        if (uniPair == address(0) || sushiPair == address(0)) {\n            return 0;\n        }\n        if (wEth < tokenAddress) {\n            if (isSuShi) {\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveSushi0,\n                    reserveSushi1\n                );\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveUni1,\n                    reserveUni0\n                );\n                return int256(amountOut) - int256(amountIn);\n            } else {\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveUni0,\n                    reserveUni1\n                );\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveSushi1,\n                    reserveSushi0\n                );\n                return int256(amountOut) - int256(amountIn);\n            }\n        } else {\n            if (isSuShi) {\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveSushi1,\n                    reserveSushi0\n                );\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveUni0,\n                    reserveUni1\n                );\n                return int256(amountOut) - int256(amountIn);\n            } else {\n                (uint256 reserveUni0, uint256 reserveUni1, ) = IUniswapV2Pair(\n                    uniPair\n                ).getReserves();\n                uint256 amountIn = getAmountIn(\n                    amount,\n                    reserveUni1,\n                    reserveUni0\n                );\n                (\n                    uint256 reserveSushi0,\n                    uint256 reserveSushi1,\n\n                ) = IUniswapV2Pair(sushiPair).getReserves();\n                uint256 amountOut = getAmountOut(\n                    amount,\n                    reserveSushi0,\n                    reserveSushi1\n                );\n                return int256(amountOut) - int256(amountIn);\n            }\n        }\n    }\n    function falshSwap(address token,uint256 amount,bool isSuShi) external returns (bool){\n        recvice = msg.sender;\n        _isSuShi = isSuShi;\n        if(isSuShi){\n             address sushiPair = IUniswapV2Factory(sushiFactory).getPair(\n                token,\n                wEth\n            );\n            if (wEth < token) {\n                IUniswapV2Pair(sushiPair).swap(0, amount, address(this), bytes('1'));\n            }else{\n                IUniswapV2Pair(sushiPair).swap(amount, 0, address(this), bytes('1'));\n            }\n        }else{\n            address sushiPair = IUniswapV2Factory(uniFactory).getPair(\n                token,\n                wEth\n            );\n            if (wEth < token) {\n                IUniswapV2Pair(sushiPair).swap(0, amount, address(this), bytes('1'));\n            }else{\n                IUniswapV2Pair(sushiPair).swap(amount, 0, address(this), bytes('1'));\n            }\n        }\n    }\n    function uniswapV2Call(\n        address _sender,\n        uint256 _amount0,\n        uint256 _amount1,\n        bytes calldata _data\n    ) external {\n        address[] memory path = new address[](2);\n        uint256 amountToken = _amount0 == 0 ? _amount1 : _amount0;\n\n        address token0 = IUniswapV2Pair(msg.sender).token0();\n        address token1 = IUniswapV2Pair(msg.sender).token1();\n\n        require(_amount0 == 0 || _amount1 == 0);\n\n        path[0] = _amount0 == 0 ? token1 : token0;\n        path[1] = _amount0 == 0 ? token0 : token1;\n\n        IUniswapV2Pair token = IUniswapV2Pair(_amount0 == 0 ? token1 : token0);\n\n        if (_isSuShi) {\n            token.approve(address(uniRouter), amountToken);\n\n            // no need for require() check, if amount required is not sent sushiRouter will revert\n            (uint256 amountRequired,) = this.univ2(\n                _amount0 == 0 ? token1 : token0,\n                amountToken,\n                _isSuShi\n            );\n            uint256 amountReceived = IUniswapV2Router01(uniRouter).swapExactTokensForTokens(\n                amountToken,\n                amountRequired,\n                path,\n                address(this),\n                block.timestamp.add(1 days)\n            )[1];\n\n            TransferHelper.safeTransfer(wEth, msg.sender, amountRequired);\n            IWETH(wEth).withdraw(amountReceived - amountRequired);\n            // YEAHH PROFIT\n            TransferHelper.safeTransferETH(recvice, amountReceived - amountRequired);\n        } else {\n            token.approve(address(sushiRouter), amountToken);\n\n            // no need for require() check, if amount required is not sent sushiRouter will revert\n            (uint256 amountRequired,) = this.univ2(\n                _amount0 == 0 ? token1 : token0,\n                amountToken,\n                _isSuShi\n            );\n            uint256 amountReceived = IUniswapV2Router01(sushiRouter).swapExactTokensForTokens(\n                amountToken,\n                amountRequired,\n                path,\n                address(this),\n                block.timestamp.add(1 days)\n            )[1];\n            TransferHelper.safeTransfer(wEth, msg.sender, amountRequired);\n            IWETH(wEth).withdraw(amountReceived - amountRequired);\n            // YEAHH PROFIT\n            TransferHelper.safeTransferETH(recvice, amountReceived - amountRequired);\n        }\n    }\n     // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n     // fetches and sorts the reserves for a pair\n    function getReserves(address pair, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address pair, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(pair, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address pair, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(pair, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n    receive() external payable { }\n\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\n"
    }
  }
}