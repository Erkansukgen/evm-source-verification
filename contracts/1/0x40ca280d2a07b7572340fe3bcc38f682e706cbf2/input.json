{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/onesplit.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-01-22\n*/\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/IOneSplit.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract IOneSplit {\n\n    // disableFlags = FLAG_UNISWAP + FLAG_KYBER + ...\n    uint256 constant public FLAG_UNISWAP = 0x01;\n    uint256 constant public FLAG_KYBER = 0x02;\n    uint256 constant public FLAG_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\n    uint256 constant public FLAG_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\n    uint256 constant public FLAG_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\n    uint256 constant public FLAG_BANCOR = 0x04;\n    uint256 constant public FLAG_OASIS = 0x08;\n    uint256 constant public FLAG_COMPOUND = 0x10;\n    uint256 constant public FLAG_FULCRUM = 0x20;\n    uint256 constant public FLAG_CHAI = 0x40;\n    uint256 constant public FLAG_AAVE = 0x80;\n    uint256 constant public FLAG_SMART_TOKEN = 0x100;\n    uint256 constant public FLAG_MULTI_PATH_ETH = 0x200; // Turned off by default\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution // [Uniswap, Kyber, Bancor, Oasis]\n        );\n\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    )\n        public\n        payable;\n\n    function goodSwap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256 parts,\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    )\n        public\n        payable;\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/interface/IUniswapExchange.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IUniswapExchange {\n\n    function getEthToTokenInputPrice(uint256 ethSold)\n        external view returns(uint256 tokensBought);\n\n    function getTokenToEthInputPrice(uint256 tokensSold)\n        external view returns (uint256 ethBought);\n\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline)\n        external payable returns (uint256 tokensBought);\n\n    function tokenToEthSwapInput(uint256 tokensSold, uint256 minEth, uint256 deadline)\n        external returns (uint256 ethBought);\n\n    function tokenToTokenSwapInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, address tokenAddr)\n        external returns (uint256 tokensBought);\n\n}\n\n// File: contracts/interface/IUniswapFactory.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IUniswapFactory {\n\n    function getExchange(IERC20 token)\n        external view returns(IUniswapExchange exchange);\n}\n\n// File: contracts/interface/IKyberNetworkContract.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IKyberNetworkContract {\n\n    function searchBestRate(\n        IERC20 src,\n        IERC20 dest,\n        uint256 srcAmount,\n        bool usePermissionless\n    ) external view returns(address reserve, uint256 rate);\n}\n\n// File: contracts/interface/IKyberNetworkProxy.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRate(\n        IERC20 src,\n        IERC20 dest,\n        uint256 srcQty\n    ) external view returns(uint256 expectedRate, uint256 slippageRate);\n\n    function tradeWithHint(\n        IERC20 src,\n        uint256 srcAmount,\n        IERC20 dest,\n        address destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address walletId,\n        bytes calldata hint\n    ) external payable returns(uint256);\n\n    function kyberNetworkContract() external view returns (IKyberNetworkContract);\n\n    // TODO: Limit usage by tx.gasPrice\n    // function maxGasPrice() external view returns (uint256);\n\n    // TODO: Limit usage by user cap\n    // function getUserCapInWei(address user) external view returns (uint256);\n    // function getUserCapInTokenWei(address user, IERC20 token) external view returns (uint256);\n}\n\n// File: contracts/interface/IKyberUniswapReserve.sol\n\npragma solidity ^0.5.0;\n\n\ninterface IKyberUniswapReserve {\n    function uniswapFactory() external view returns(address);\n}\n\n// File: contracts/interface/IKyberOasisReserve.sol\n\npragma solidity ^0.5.0;\n\n\ninterface IKyberOasisReserve {\n    function otc() external view returns(address);\n}\n\n// File: contracts/interface/IKyberBancorReserve.sol\n\npragma solidity ^0.5.0;\n\n\ncontract IKyberBancorReserve {\n    function bancorEth() public view returns(address);\n}\n\n// File: contracts/interface/IBancorNetwork.sol\n\npragma solidity ^0.5.0;\n\n\ninterface IBancorNetwork {\n\n    function getReturnByPath(\n        address[] calldata path,\n        uint256 amount\n    ) external view returns(\n        uint256 returnAmount,\n        uint256 conversionFee\n    );\n\n    function claimAndConvert(\n        address[] calldata path,\n        uint256 amount,\n        uint256 minReturn\n    ) external returns(uint256);\n\n    function convert(\n        address[] calldata path,\n        uint256 amount,\n        uint256 minReturn\n    ) external payable returns(uint256);\n}\n\n// File: contracts/interface/IBancorContractRegistry.sol\n\npragma solidity ^0.5.0;\n\n\ncontract IBancorContractRegistry {\n\n    function addressOf(bytes32 contractName)\n        external view returns (address);\n}\n\n// File: contracts/interface/IBancorNetworkPathFinder.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IBancorNetworkPathFinder {\n\n    function generatePath(IERC20 sourceToken, IERC20 targetToken)\n        external view returns(address[] memory);\n}\n\n// File: contracts/interface/IBancorEtherToken.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract IBancorEtherToken is IERC20 {\n\n    function deposit()\n        external payable;\n\n    function withdraw(uint256 amount)\n        external;\n}\n\n// File: contracts/interface/IOasisExchange.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IOasisExchange {\n\n    function getBuyAmount(IERC20 buyGem, IERC20 payGem, uint256 payAmt)\n        external view returns(uint256 fillAmt);\n\n    function sellAllAmount(IERC20 payGem, uint payAmt, IERC20 buyGem, uint256 minFillAmount)\n        external returns(uint256 fillAmt);\n}\n\n// File: contracts/interface/IWETH.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract IWETH is IERC20 {\n\n    function deposit()\n        external payable;\n\n    function withdraw(uint256 amount)\n        external;\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/UniversalERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\nlibrary UniversalERC20 {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (isETH(token)) {\n            address(uint160(to)).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n            return true;\n        }\n    }\n\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (isETH(token)) {\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(msg.value.sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\n        if (!isETH(token)) {\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\n                token.safeApprove(to, 0);\n            }\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n        if (isETH(token)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\n\n        if (isETH(token)) {\n            return 18;\n        }\n\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(\n            abi.encodeWithSignature(\"decimals()\")\n        );\n        if (!success) {\n            (success, data) = address(token).staticcall.gas(5000)(\n                abi.encodeWithSignature(\"DECIMALS()\")\n            );\n        }\n\n        return success ? abi.decode(data, (uint256)) : 18;\n    }\n\n    function isETH(IERC20 token) internal pure returns(bool) {\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\n    }\n}\n\n// File: contracts/OneSplitBase.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary DisableFlags {\n    function enabled(uint256 disableFlags, uint256 flag) internal pure returns(bool) {\n        return (disableFlags & flag) == 0;\n    }\n\n    function disabledReserve(uint256 disableFlags, uint256 flag) internal pure returns(bool) {\n        // For flag disabled by default (Kyber reserves)\n        return enabled(disableFlags, flag);\n    }\n\n    function disabled(uint256 disableFlags, uint256 flag) internal pure returns(bool) {\n        return (disableFlags & flag) != 0;\n    }\n}\n\n\ncontract OneSplitBase is IOneSplit {\n    using SafeMath for uint256;\n    using DisableFlags for uint256;\n\n    using UniversalERC20 for IERC20;\n    using UniversalERC20 for IWETH;\n    using UniversalERC20 for IBancorEtherToken;\n\n    IERC20 constant public ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    IERC20 public dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    IWETH public wethToken = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    IBancorEtherToken public bancorEtherToken = IBancorEtherToken(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n\n    IKyberNetworkProxy public kyberNetworkProxy = IKyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\n    IUniswapFactory public uniswapFactory = IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\n    IBancorContractRegistry public bancorContractRegistry = IBancorContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\n    IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\n    IOasisExchange public oasisExchange = IOasisExchange(0x39755357759cE0d7f32dC8dC45414CCa409AE24e);\n\n    function() external payable {\n        // solium-disable-next-line security/no-tx-origin\n        require(msg.sender != tx.origin);\n    }\n\n    function log(uint256) external view {\n    }\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution // [Uniswap, Kyber, Bancor, Oasis]\n        )\n    {\n        distribution = new uint256[](4);\n\n        if (fromToken == toToken) {\n            return (amount, distribution);\n        }\n\n        function(IERC20,IERC20,uint256,uint256) view returns(uint256)[4] memory reserves = [\n            disableFlags.disabled(FLAG_UNISWAP) ? _calculateNoReturn : calculateUniswapReturn,\n            disableFlags.disabled(FLAG_KYBER)   ? _calculateNoReturn : calculateKyberReturn,\n            disableFlags.disabled(FLAG_BANCOR)  ? _calculateNoReturn : calculateBancorReturn,\n            disableFlags.disabled(FLAG_OASIS)   ? _calculateNoReturn : calculateOasisReturn\n        ];\n\n        uint256[4] memory rates;\n        uint256[4] memory fullRates;\n        for (uint i = 0; i < rates.length; i++) {\n            rates[i] = reserves[i](fromToken, toToken, amount.div(parts), disableFlags);\n            this.log(rates[i]);\n            fullRates[i] = rates[i];\n        }\n\n        for (uint j = 0; j < parts; j++) {\n            // Find best part\n            uint256 bestIndex = 0;\n            for (uint i = 1; i < rates.length; i++) {\n                if (rates[i] > rates[bestIndex]) {\n                    bestIndex = i;\n                }\n            }\n\n            // Add best part\n            returnAmount = returnAmount.add(rates[bestIndex]);\n            distribution[bestIndex]++;\n\n            // Avoid CompilerError: Stack too deep\n            uint256 srcAmount = amount;\n\n            // Recalc part if needed\n            if (j + 1 < parts) {\n                uint256 newRate = reserves[bestIndex](\n                    fromToken,\n                    toToken,\n                    srcAmount.mul(distribution[bestIndex] + 1).div(parts),\n                    disableFlags\n                );\n                if (newRate > fullRates[bestIndex]) {\n                    rates[bestIndex] = newRate.sub(fullRates[bestIndex]);\n                } else {\n                    rates[bestIndex] = 0;\n                }\n                this.log(rates[bestIndex]);\n                fullRates[bestIndex] = newRate;\n            }\n        }\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\n        uint256 /*disableFlags*/ // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    ) internal {\n        if (fromToken == toToken) {\n            return;\n        }\n\n        function(IERC20,IERC20,uint256) returns(uint256)[4] memory reserves = [\n            _swapOnUniswap,\n            _swapOnKyber,\n            _swapOnBancor,\n            _swapOnOasis\n        ];\n\n        uint256 parts = 0;\n        uint256 lastNonZeroIndex = 0;\n        for (uint i = 0; i < reserves.length; i++) {\n            if (distribution[i] > 0) {\n                parts = parts.add(distribution[i]);\n                lastNonZeroIndex = i;\n            }\n        }\n\n        require(parts > 0, \"OneSplit: distribution should contain non-zeros\");\n\n        uint256 remainingAmount = amount;\n        for (uint i = 0; i < reserves.length; i++) {\n            if (distribution[i] == 0) {\n                continue;\n            }\n\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\n            if (i == lastNonZeroIndex) {\n                swapAmount = remainingAmount;\n            }\n            remainingAmount -= swapAmount;\n            reserves[i](fromToken, toToken, swapAmount);\n        }\n    }\n\n    // View Helpers\n\n    function calculateUniswapReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 /*disableFlags*/\n    ) public view returns(uint256) {\n        uint256 returnAmount = amount;\n\n        if (!fromToken.isETH()) {\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\n            if (fromExchange != IUniswapExchange(0)) {\n                (bool success, bytes memory data) = address(fromExchange).staticcall.gas(200000)(\n                    abi.encodeWithSelector(\n                        fromExchange.getTokenToEthInputPrice.selector,\n                        returnAmount\n                    )\n                );\n                if (success) {\n                    returnAmount = abi.decode(data, (uint256));\n                } else {\n                    returnAmount = 0;\n                }\n            } else {\n                returnAmount = 0;\n            }\n        }\n\n        if (!toToken.isETH()) {\n            IUniswapExchange toExchange = uniswapFactory.getExchange(toToken);\n            if (toExchange != IUniswapExchange(0)) {\n                (bool success, bytes memory data) = address(toExchange).staticcall.gas(200000)(\n                    abi.encodeWithSelector(\n                        toExchange.getEthToTokenInputPrice.selector,\n                        returnAmount\n                    )\n                );\n                if (success) {\n                    returnAmount = abi.decode(data, (uint256));\n                } else {\n                    returnAmount = 0;\n                }\n            } else {\n                returnAmount = 0;\n            }\n        }\n\n        return returnAmount;\n    }\n\n    function calculateKyberReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 disableFlags\n    ) public view returns(uint256) {\n        (bool success, bytes memory data) = address(kyberNetworkProxy).staticcall.gas(2300)(abi.encodeWithSelector(\n            kyberNetworkProxy.kyberNetworkContract.selector\n        ));\n        if (!success) {\n            return 0;\n        }\n\n        IKyberNetworkContract kyberNetworkContract = IKyberNetworkContract(abi.decode(data, (address)));\n\n        if (fromToken.isETH() || toToken.isETH()) {\n            return _calculateKyberReturnWithEth(kyberNetworkContract, fromToken, toToken, amount, disableFlags);\n        }\n\n        uint256 value = _calculateKyberReturnWithEth(kyberNetworkContract, fromToken, ETH_ADDRESS, amount, disableFlags);\n        if (value == 0) {\n            return 0;\n        }\n\n        return _calculateKyberReturnWithEth(kyberNetworkContract, ETH_ADDRESS, toToken, value, disableFlags);\n    }\n\n    function _calculateKyberReturnWithEth(\n        IKyberNetworkContract kyberNetworkContract,\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 disableFlags\n    ) public view returns(uint256) {\n        require(fromToken.isETH() || toToken.isETH(), \"One of the tokens should be ETH\");\n\n        (bool success, bytes memory data) = address(kyberNetworkContract).staticcall.gas(1500000)(abi.encodeWithSelector(\n            kyberNetworkContract.searchBestRate.selector,\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\n            toToken.isETH() ? ETH_ADDRESS : toToken,\n            amount,\n            true\n        ));\n        if (!success) {\n            return 0;\n        }\n\n        (address reserve, uint256 rate) = abi.decode(data, (address,uint256));\n\n        if ((reserve == 0x31E085Afd48a1d6e51Cc193153d625e8f0514C7F && disableFlags.disabledReserve(FLAG_KYBER_UNISWAP_RESERVE)) ||\n            (reserve == 0xCf1394C5e2e879969fdB1f464cE1487147863dCb && disableFlags.disabledReserve(FLAG_KYBER_OASIS_RESERVE)) ||\n            (reserve == 0x053AA84FCC676113a57e0EbB0bD1913839874bE4 && disableFlags.disabledReserve(FLAG_KYBER_BANCOR_RESERVE)))\n        {\n            return 0;\n        }\n\n        if (disableFlags.disabledReserve(FLAG_KYBER_UNISWAP_RESERVE)) {\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\n                IKyberUniswapReserve(reserve).uniswapFactory.selector\n            ));\n            if (success) {\n                return 0;\n            }\n        }\n\n        if (disableFlags.disabledReserve(FLAG_KYBER_OASIS_RESERVE)) {\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\n                IKyberOasisReserve(reserve).otc.selector\n            ));\n            if (success) {\n                return 0;\n            }\n        }\n\n        if (disableFlags.disabledReserve(FLAG_KYBER_BANCOR_RESERVE)) {\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\n                IKyberBancorReserve(reserve).bancorEth.selector\n            ));\n            if (success) {\n                return 0;\n            }\n        }\n\n        return rate.mul(amount)\n            .mul(10 ** IERC20(toToken).universalDecimals())\n            .div(10 ** IERC20(fromToken).universalDecimals())\n            .div(1e18);\n    }\n\n    function calculateBancorReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 /*disableFlags*/\n    ) public view returns(uint256) {\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\n        address[] memory path = bancorNetworkPathFinder.generatePath(\n            fromToken.isETH() ? bancorEtherToken : fromToken,\n            toToken.isETH() ? bancorEtherToken : toToken\n        );\n\n        (bool success, bytes memory data) = address(bancorNetwork).staticcall.gas(500000)(\n            abi.encodeWithSelector(\n                bancorNetwork.getReturnByPath.selector,\n                path,\n                amount\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n\n        (uint256 returnAmount,) = abi.decode(data, (uint256,uint256));\n        return returnAmount;\n    }\n\n    function calculateOasisReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 /*disableFlags*/\n    ) public view returns(uint256) {\n        (bool success, bytes memory data) = address(oasisExchange).staticcall.gas(500000)(\n            abi.encodeWithSelector(\n                oasisExchange.getBuyAmount.selector,\n                toToken.isETH() ? wethToken : toToken,\n                fromToken.isETH() ? wethToken : fromToken,\n                amount\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n\n        return abi.decode(data, (uint256));\n    }\n\n    function _calculateNoReturn(\n        IERC20 /*fromToken*/,\n        IERC20 /*toToken*/,\n        uint256 /*amount*/,\n        uint256 /*disableFlags*/\n    ) internal view returns(uint256) {\n        this;\n    }\n\n    // Swap helpers\n\n    function _swapOnUniswap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) internal returns(uint256) {\n\n        uint256 returnAmount = amount;\n\n        if (!fromToken.isETH()) {\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\n            if (fromExchange != IUniswapExchange(0)) {\n                _infiniteApproveIfNeeded(fromToken, address(fromExchange));\n                returnAmount = fromExchange.tokenToEthSwapInput(returnAmount, 1, now);\n            }\n        }\n\n        if (!toToken.isETH()) {\n            IUniswapExchange toExchange = uniswapFactory.getExchange(toToken);\n            if (toExchange != IUniswapExchange(0)) {\n                returnAmount = toExchange.ethToTokenSwapInput.value(returnAmount)(1, now);\n            }\n        }\n\n        return returnAmount;\n    }\n\n    function _swapOnKyber(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) internal returns(uint256) {\n        _infiniteApproveIfNeeded(fromToken, address(kyberNetworkProxy));\n        return kyberNetworkProxy.tradeWithHint.value(fromToken.isETH() ? amount : 0)(\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\n            amount,\n            toToken.isETH() ? ETH_ADDRESS : toToken,\n            address(this),\n            1 << 255,\n            0,\n            0x4D37f28D2db99e8d35A6C725a5f1749A085850a3,\n            \"\"\n        );\n    }\n\n    function _swapOnBancor(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) internal returns(uint256) {\n        if (fromToken.isETH()) {\n            bancorEtherToken.deposit.value(amount)();\n        }\n\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\n        address[] memory path = bancorNetworkPathFinder.generatePath(\n            fromToken.isETH() ? bancorEtherToken : fromToken,\n            toToken.isETH() ? bancorEtherToken : toToken\n        );\n\n        _infiniteApproveIfNeeded(fromToken.isETH() ? bancorEtherToken : fromToken, address(bancorNetwork));\n        uint256 returnAmount = bancorNetwork.claimAndConvert(path, amount, 1);\n\n        if (toToken.isETH()) {\n            bancorEtherToken.withdraw(bancorEtherToken.balanceOf(address(this)));\n        }\n\n        return returnAmount;\n    }\n\n    function _swapOnOasis(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) internal returns(uint256) {\n        if (fromToken.isETH()) {\n            wethToken.deposit.value(amount)();\n        }\n\n        _infiniteApproveIfNeeded(fromToken.isETH() ? wethToken : fromToken, address(oasisExchange));\n        uint256 returnAmount = oasisExchange.sellAllAmount(\n            fromToken.isETH() ? wethToken : fromToken,\n            amount,\n            toToken.isETH() ? wethToken : toToken,\n            1\n        );\n\n        if (toToken.isETH()) {\n            wethToken.withdraw(wethToken.balanceOf(address(this)));\n        }\n\n        return returnAmount;\n    }\n\n    // Helpers\n\n    function _infiniteApproveIfNeeded(IERC20 token, address to) internal {\n        if (!token.isETH()) {\n            if ((token.allowance(address(this), to) >> 255) == 0) {\n                token.universalApprove(to, uint256(- 1));\n            }\n        }\n    }\n}\n\n// File: contracts/OneSplitMultiPath.sol\n\npragma solidity ^0.5.0;\n\n\ncontract OneSplitMultiPath is OneSplitBase {\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    )\n        public\n        view\n        returns (\n            uint256 returnAmount,\n            uint256[] memory distribution\n        )\n    {\n        if (fromToken == toToken) {\n            return (amount, new uint256[](4));\n        }\n\n        if (!fromToken.isETH() && !toToken.isETH() && !disableFlags.disabledReserve(FLAG_MULTI_PATH_ETH)) {\n            (returnAmount, distribution) = super.getExpectedReturn(\n                fromToken,\n                ETH_ADDRESS,\n                amount,\n                parts,\n                disableFlags | FLAG_BANCOR\n            );\n\n            uint256[] memory dist;\n            (returnAmount, dist) = super.getExpectedReturn(\n                ETH_ADDRESS,\n                toToken,\n                returnAmount,\n                parts,\n                disableFlags | FLAG_BANCOR\n            );\n            for (uint i = 0; i < distribution.length; i++) {\n                distribution[i] = distribution[i].add(dist[i] << 8);\n            }\n            return (returnAmount, distribution);\n        }\n\n        return super.getExpectedReturn(\n            fromToken,\n            toToken,\n            amount,\n            parts,\n            disableFlags\n        );\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution,\n        uint256 disableFlags\n    ) internal {\n        if (!fromToken.isETH() && !toToken.isETH() && !disableFlags.disabledReserve(FLAG_MULTI_PATH_ETH)) {\n            uint256[] memory dist = new uint256[](distribution.length);\n            for (uint i = 0; i < distribution.length; i++) {\n                dist[i] = distribution[i] & 0xFF;\n            }\n            super._swap(\n                fromToken,\n                ETH_ADDRESS,\n                amount,\n                dist,\n                disableFlags\n            );\n\n            for (uint i = 0; i < distribution.length; i++) {\n                dist[i] = (distribution[i] >> 8) & 0xFF;\n            }\n            super._swap(\n                ETH_ADDRESS,\n                toToken,\n                address(this).balance,\n                dist,\n                disableFlags\n            );\n            return;\n        }\n\n        super._swap(\n            fromToken,\n            toToken,\n            amount,\n            distribution,\n            disableFlags\n        );\n    }\n}\n\n// File: contracts/interface/ICompound.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract ICompound {\n    function markets(address cToken)\n        external\n        view\n        returns(bool isListed, uint256 collateralFactorMantissa);\n}\n\n\ncontract ICompoundToken is IERC20 {\n    function underlying() external view returns(address);\n    function exchangeRateStored() external view returns(uint256);\n\n    function mint(uint256 mintAmount) external returns(uint256);\n    function redeem(uint256 redeemTokens) external returns(uint256);\n}\n\n\ncontract ICompoundEther is IERC20 {\n    function mint() external payable;\n    function redeem(uint256 redeemTokens) external returns(uint256);\n}\n\n// File: contracts/OneSplitCompound.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract OneSplitCompound is OneSplitBase {\n    ICompound public compound = ICompound(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n    ICompoundEther public cETH = ICompoundEther(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution\n        )\n    {\n        if (fromToken == toToken) {\n            return (amount, new uint256[](4));\n        }\n\n        if (disableFlags.enabled(FLAG_COMPOUND)) {\n            if (_isCompoundToken(fromToken)) {\n                IERC20 underlying = _compoundUnderlyingAsset(fromToken);\n                if (underlying != IERC20(-1)) {\n                    uint256 compoundRate = ICompoundToken(address(fromToken)).exchangeRateStored();\n\n                    return super.getExpectedReturn(\n                        underlying,\n                        toToken,\n                        amount.mul(compoundRate).div(1e18),\n                        parts,\n                        disableFlags\n                    );\n                }\n            }\n\n            if (_isCompoundToken(toToken)) {\n                IERC20 underlying = _compoundUnderlyingAsset(toToken);\n                if (underlying != IERC20(-1)) {\n                    uint256 compoundRate = ICompoundToken(address(toToken)).exchangeRateStored();\n\n                    (returnAmount, distribution) = super.getExpectedReturn(\n                        fromToken,\n                        underlying,\n                        amount,\n                        parts,\n                        disableFlags\n                    );\n\n                    returnAmount = returnAmount.mul(1e18).div(compoundRate);\n                    return (returnAmount, distribution);\n                }\n            }\n        }\n\n        return super.getExpectedReturn(\n            fromToken,\n            toToken,\n            amount,\n            parts,\n            disableFlags\n        );\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution,\n        uint256 disableFlags\n    ) internal {\n        if (fromToken == toToken) {\n            return;\n        }\n\n        if (disableFlags.enabled(FLAG_COMPOUND)) {\n            if (_isCompoundToken(fromToken)) {\n                IERC20 underlying = _compoundUnderlyingAsset(fromToken);\n\n                ICompoundToken(address(fromToken)).redeem(amount);\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\n\n                return super._swap(\n                    underlying,\n                    toToken,\n                    underlyingAmount,\n                    distribution,\n                    disableFlags\n                );\n            }\n\n            if (_isCompoundToken(toToken)) {\n                IERC20 underlying = _compoundUnderlyingAsset(toToken);\n\n                super._swap(\n                    fromToken,\n                    underlying,\n                    amount,\n                    distribution,\n                    disableFlags\n                );\n\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\n\n                if (underlying.isETH()) {\n                    cETH.mint.value(underlyingAmount)();\n                } else {\n                    _infiniteApproveIfNeeded(underlying, address(toToken));\n                    ICompoundToken(address(toToken)).mint(underlyingAmount);\n                }\n                return;\n            }\n        }\n\n        return super._swap(\n            fromToken,\n            toToken,\n            amount,\n            distribution,\n            disableFlags\n        );\n    }\n\n    function _isCompoundToken(IERC20 token) internal view returns(bool) {\n        if (token == cETH) {\n            return true;\n        }\n\n        (bool success, bytes memory data) = address(compound).staticcall.gas(5000)(abi.encodeWithSelector(\n            compound.markets.selector,\n            token\n        ));\n        if (!success) {\n            return false;\n        }\n\n        (bool isListed,) = abi.decode(data, (bool,uint256));\n        return isListed;\n    }\n\n    function _compoundUnderlyingAsset(IERC20 asset) internal view returns(IERC20) {\n        if (asset == cETH) {\n            return IERC20(address(0));\n        }\n\n        (bool success, bytes memory data) = address(asset).staticcall.gas(5000)(abi.encodeWithSelector(\n            ICompoundToken(address(asset)).underlying.selector\n        ));\n        if (!success) {\n            return IERC20(-1);\n        }\n\n        return abi.decode(data, (IERC20));\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/interface/IFulcrum.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract IFulcrumToken is IERC20 {\n\n    function tokenPrice() external view returns(uint256);\n    function loanTokenAddress() external view returns(address);\n\n    function mintWithEther(address receiver)\n        external payable returns (uint256 mintAmount);\n\n    function mint(address receiver, uint256 depositAmount)\n        external returns (uint256 mintAmount);\n\n    function burnToEther(address receiver, uint256 burnAmount)\n        external returns (uint256 loanAmountPaid);\n\n    function burn(address receiver, uint256 burnAmount)\n        external returns (uint256 loanAmountPaid);\n}\n\n// File: contracts/OneSplitFulcrum.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\ncontract OneSplitFulcrum is OneSplitBase {\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution\n        )\n    {\n        if (fromToken == toToken) {\n            return (amount, new uint256[](4));\n        }\n\n        if (disableFlags.enabled(FLAG_FULCRUM)) {\n            IERC20 underlying = _isFulcrumToken(fromToken);\n            if (underlying != IERC20(-1)) {\n                uint256 fulcrumRate = IFulcrumToken(address(fromToken)).tokenPrice();\n\n                return super.getExpectedReturn(\n                    underlying,\n                    toToken,\n                    amount.mul(fulcrumRate).div(1e18),\n                    parts,\n                    disableFlags\n                );\n            }\n\n            underlying = _isFulcrumToken(toToken);\n            if (underlying != IERC20(-1)) {\n                uint256 fulcrumRate = IFulcrumToken(address(toToken)).tokenPrice();\n\n                (returnAmount, distribution) = super.getExpectedReturn(\n                    fromToken,\n                    underlying,\n                    amount,\n                    parts,\n                    disableFlags\n                );\n\n                returnAmount = returnAmount.mul(1e18).div(fulcrumRate);\n                return (returnAmount, distribution);\n            }\n        }\n\n        return super.getExpectedReturn(\n            fromToken,\n            toToken,\n            amount,\n            parts,\n            disableFlags\n        );\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution,\n        uint256 disableFlags\n    ) internal {\n        if (fromToken == toToken) {\n            return;\n        }\n\n        if (disableFlags.enabled(FLAG_FULCRUM)) {\n            IERC20 underlying = _isFulcrumToken(fromToken);\n            if (underlying != IERC20(-1)) {\n                if (underlying.isETH()) {\n                    IFulcrumToken(address(fromToken)).burnToEther(address(this), amount);\n                } else {\n                    IFulcrumToken(address(fromToken)).burn(address(this), amount);\n                }\n\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\n\n                return super._swap(\n                    underlying,\n                    toToken,\n                    underlyingAmount,\n                    distribution,\n                    disableFlags\n                );\n            }\n\n            underlying = _isFulcrumToken(toToken);\n            if (underlying != IERC20(-1)) {\n                super._swap(\n                    fromToken,\n                    underlying,\n                    amount,\n                    distribution,\n                    disableFlags\n                );\n\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\n\n                if (underlying.isETH()) {\n                    IFulcrumToken(address(toToken)).mintWithEther.value(underlyingAmount)(address(this));\n                } else {\n                    _infiniteApproveIfNeeded(underlying, address(toToken));\n                    IFulcrumToken(address(toToken)).mint(address(this), underlyingAmount);\n                }\n                return;\n            }\n        }\n\n        return super._swap(\n            fromToken,\n            toToken,\n            amount,\n            distribution,\n            disableFlags\n        );\n    }\n\n    function _isFulcrumToken(IERC20 token) public view returns(IERC20) {\n        if (token.isETH()) {\n            return IERC20(-1);\n        }\n\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\n            ERC20Detailed(address(token)).name.selector\n        ));\n        if (!success) {\n            return IERC20(-1);\n        }\n\n        bool foundBZX = false;\n        for (uint i = 0; i < data.length - 7; i++) {\n            if (data[i + 0] == \"F\" &&\n                data[i + 1] == \"u\" &&\n                data[i + 2] == \"l\" &&\n                data[i + 3] == \"c\" &&\n                data[i + 4] == \"r\" &&\n                data[i + 5] == \"u\" &&\n                data[i + 6] == \"m\")\n            {\n                foundBZX = true;\n                break;\n            }\n        }\n        if (!foundBZX) {\n            return IERC20(-1);\n        }\n\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\n            IFulcrumToken(address(token)).loanTokenAddress.selector\n        ));\n        if (!success) {\n            return IERC20(-1);\n        }\n\n        return abi.decode(data, (IERC20));\n    }\n\n}\n\n// File: contracts/interface/IChai.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IPot {\n    function dsr() external view returns (uint256);\n    function chi() external view returns (uint256);\n    function rho() external view returns (uint256);\n    function drip() external returns (uint256);\n    function join(uint256) external;\n    function exit(uint256) external;\n}\n\n\ncontract IChai is IERC20 {\n\n    function POT() public view returns(IPot);\n\n    function join(address dst, uint wad) external;\n\n    function exit(address src, uint wad) external;\n}\n\n\nlibrary ChaiHelper {\n\n    IPot private constant POT = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\n    uint256 private constant RAY = 10 ** 27;\n\n    function _mul(uint x, uint y) private pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function _rmul(uint x, uint y) private pure returns (uint z) {\n        // always rounds down\n        z = _mul(x, y) / RAY;\n    }\n\n    function _rdiv(uint x, uint y) private pure returns (uint z) {\n        // always rounds down\n        z = _mul(x, RAY) / y;\n    }\n\n    function rpow(uint x, uint n, uint base) private pure returns (uint z) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n            default {\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n                let half := div(base, 2)  // for rounding.\n                for { n := div(n, 2) } n { n := div(n,2) } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) { revert(0,0) }\n                    x := div(xxRound, base)\n                    if mod(n,2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) { revert(0,0) }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n\n    function potDrip() private view returns(uint256) {\n        return _rmul(rpow(POT.dsr(), now - POT.rho(), RAY), POT.chi());\n    }\n\n    function daiToChai(IChai /*chai*/, uint256 amount) internal view returns(uint256) {\n        uint chi = (now > POT.rho()) ? potDrip() : POT.chi();\n        return _rdiv(amount, chi);\n    }\n\n    function chaiToDai(IChai /*chai*/, uint256 amount) internal view returns(uint256) {\n        uint chi = (now > POT.rho()) ? potDrip() : POT.chi();\n        return _rmul(chi, amount);\n    }\n}\n\n// File: contracts/OneSplitChai.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract OneSplitChai is OneSplitBase {\n    using ChaiHelper for IChai;\n\n    IChai public chai = IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution\n        )\n    {\n        if (fromToken == toToken) {\n            return (amount, new uint256[](4));\n        }\n\n        if (disableFlags.enabled(FLAG_CHAI)) {\n            if (fromToken == IERC20(chai)) {\n                return super.getExpectedReturn(\n                    dai,\n                    toToken,\n                    chai.chaiToDai(amount),\n                    parts,\n                    disableFlags\n                );\n            }\n\n            if (toToken == IERC20(chai)) {\n                (returnAmount, distribution) = super.getExpectedReturn(\n                    fromToken,\n                    dai,\n                    amount,\n                    parts,\n                    disableFlags\n                );\n                return (chai.daiToChai(returnAmount), distribution);\n            }\n        }\n\n        return super.getExpectedReturn(\n            fromToken,\n            toToken,\n            amount,\n            parts,\n            disableFlags\n        );\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution,\n        uint256 disableFlags\n    ) internal {\n        if (fromToken == toToken) {\n            return;\n        }\n\n        if (disableFlags.enabled(FLAG_CHAI)) {\n            if (fromToken == IERC20(chai)) {\n                chai.exit(address(this), amount);\n\n                return super._swap(\n                    dai,\n                    toToken,\n                    dai.balanceOf(address(this)),\n                    distribution,\n                    disableFlags\n                );\n            }\n\n            if (toToken == IERC20(chai)) {\n                super._swap(\n                    fromToken,\n                    dai,\n                    amount,\n                    distribution,\n                    disableFlags\n                );\n\n                _infiniteApproveIfNeeded(dai, address(chai));\n                chai.join(address(this), dai.balanceOf(address(this)));\n                return;\n            }\n        }\n\n        return super._swap(\n            fromToken,\n            toToken,\n            amount,\n            distribution,\n            disableFlags\n        );\n    }\n}\n\n// File: contracts/interface/IAaveToken.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface IAaveToken {\n\n    function underlyingAssetAddress() external view returns(IERC20);\n\n    function redeem(uint256 amount) external;\n}\n\ninterface IAaveLendingPool {\n\n    function core() external view returns(address);\n\n    function deposit(IERC20 token, uint256 amount, uint16 refCode) external payable;\n}\n\n// File: contracts/OneSplitAave.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\ncontract OneSplitAave is OneSplitBase {\n    IAaveLendingPool public aave = IAaveLendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution\n        )\n    {\n        if (fromToken == toToken) {\n            return (amount, distribution);\n        }\n\n        if (disableFlags.enabled(FLAG_AAVE)) {\n            IERC20 underlying = _isAaveToken(fromToken);\n            if (underlying != IERC20(-1)) {\n                return super.getExpectedReturn(\n                    underlying,\n                    toToken,\n                    amount,\n                    parts,\n                    disableFlags\n                );\n            }\n\n            underlying = _isAaveToken(toToken);\n            if (underlying != IERC20(-1)) {\n                return super.getExpectedReturn(\n                    fromToken,\n                    underlying,\n                    amount,\n                    parts,\n                    disableFlags\n                );\n            }\n        }\n\n        return super.getExpectedReturn(\n            fromToken,\n            toToken,\n            amount,\n            parts,\n            disableFlags\n        );\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution,\n        uint256 disableFlags\n    ) internal {\n        if (fromToken == toToken) {\n            return;\n        }\n\n        if (disableFlags.enabled(FLAG_AAVE)) {\n            IERC20 underlying = _isAaveToken(fromToken);\n            if (underlying != IERC20(-1)) {\n                IAaveToken(address(fromToken)).redeem(amount);\n\n                return super._swap(\n                    underlying,\n                    toToken,\n                    amount,\n                    distribution,\n                    disableFlags\n                );\n            }\n\n            underlying = _isAaveToken(toToken);\n            if (underlying != IERC20(-1)) {\n                super._swap(\n                    fromToken,\n                    underlying,\n                    amount,\n                    distribution,\n                    disableFlags\n                );\n\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\n\n                _infiniteApproveIfNeeded(underlying, aave.core());\n                aave.deposit.value(underlying.isETH() ? underlyingAmount : 0)(\n                    underlying.isETH() ? ETH_ADDRESS : underlying,\n                    underlyingAmount,\n                    1101\n                );\n                return;\n            }\n        }\n\n        return super._swap(\n            fromToken,\n            toToken,\n            amount,\n            distribution,\n            disableFlags\n        );\n    }\n\n    function _isAaveToken(IERC20 token) public view returns(IERC20) {\n        if (token.isETH()) {\n            return IERC20(-1);\n        }\n\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\n            ERC20Detailed(address(token)).name.selector\n        ));\n        if (!success) {\n            return IERC20(-1);\n        }\n\n        bool foundAave = false;\n        for (uint i = 0; i < data.length - 4; i++) {\n            if (data[i + 0] == \"A\" &&\n                data[i + 1] == \"a\" &&\n                data[i + 2] == \"v\" &&\n                data[i + 3] == \"e\")\n            {\n                foundAave = true;\n                break;\n            }\n        }\n        if (!foundAave) {\n            return IERC20(-1);\n        }\n\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\n            IAaveToken(address(token)).underlyingAssetAddress.selector\n        ));\n        if (!success) {\n            return IERC20(-1);\n        }\n\n        return abi.decode(data, (IERC20));\n    }\n}\n\n// File: contracts/interface/ISmartTokenConverter.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface ISmartTokenConverter {\n\n    function getReserveRatio(IERC20 token)\n        external view returns(uint32);\n\n    function connectorTokenCount()\n        external view returns(uint256);\n\n    function connectorTokens(uint256 i)\n        external view returns(IERC20);\n}\n\n// File: contracts/interface/ISmartToken.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ninterface ISmartToken {\n\n    function owner() external view returns(ISmartTokenConverter);\n}\n\n// File: contracts/interface/ISmartTokenRegistry.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface ISmartTokenRegistry {\n\n    function isSmartToken(IERC20 token)\n        external view returns(bool);\n}\n\n// File: contracts/interface/ISmartTokenFormula.sol\n\npragma solidity ^0.5.0;\n\n\n\ninterface ISmartTokenFormula {\n\n    function calculateLiquidateReturn(\n        uint256 supply,\n        uint256 reserveBalance,\n        uint32 totalRatio,\n        uint256 amount\n    ) external view returns (uint256);\n\n    function calculatePurchaseReturn(\n        uint256 supply,\n        uint256 reserveBalance,\n        uint32 totalRatio,\n        uint256 amount\n    ) external view returns (uint256);\n}\n\n// File: contracts/OneSplitSmartToken.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\ncontract OneSplitSmartToken is OneSplitBase {\n    ISmartTokenRegistry smartTokenRegistry = ISmartTokenRegistry(0xf6E2D7F616B67E46D708e4410746E9AAb3a4C518);\n    ISmartTokenFormula smartTokenFormula = ISmartTokenFormula(0x524619EB9b4cdFFa7DA13029b33f24635478AFc0);\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution\n        )\n    {\n        if (fromToken == toToken) {\n            return (amount, new uint256[](4));\n        }\n\n        if (disableFlags.enabled(FLAG_SMART_TOKEN)) {\n            distribution = new uint256[](4);\n            if (smartTokenRegistry.isSmartToken(fromToken)) {\n                // ISmartTokenConverter converter = ISmartToken(address(fromToken)).owner();\n\n                // TokensWithRatio memory tokens = _getTokens(converter);\n\n                // for (uint256 i = 0; i < tokens.tokens.length; i++) {\n                //     uint256 srcAmount = smartTokenFormula.calculateLiquidateReturn(\n                //         toToken.totalSupply(),\n                //         tokens.tokens[i].balanceOf(address(converter)),\n                //         uint32(tokens.totalRatio),\n                //         amount\n                //     );\n\n                //     (uint256 ret, uint256[] memory dist) = super.getExpectedReturn(\n                //         tokens.tokens[i],\n                //         toToken,\n                //         srcAmount,\n                //         parts,\n                //         disableFlags\n                //     );\n\n                //     returnAmount = returnAmount.add(ret);\n                //     for (uint j = 0; j < distribution.length; j++) {\n                //         distribution[j] = distribution[j].add(dist[j] << (i * 8));\n                //     }\n                // }\n                // return (returnAmount, distribution);\n            }\n\n            if (smartTokenRegistry.isSmartToken(toToken)) {\n                // ISmartTokenConverter converter = ISmartToken(address(fromToken)).owner();\n\n                // TokensWithRatio memory tokens = _getTokens(converter);\n\n                // uint256 minFundAmount = uint256(-1);\n                // uint256[] memory fundAmounts = new uint256[](tokens.tokens.length);\n                // for (uint256 i = 0; i < tokens.tokens.length; i++) {\n                //     (uint256 tokenAmount, uint256[] memory dist) = super.getExpectedReturn(\n                //         fromToken,\n                //         tokens.tokens[i],\n                //         amount.mul(tokens.ratios[i]).div(tokens.totalRatio),\n                //         parts,\n                //         disableFlags | FLAG_BANCOR\n                //     );\n                //     for (uint j = 0; j < distribution.length; j++) {\n                //         distribution[j] = distribution[j].add(dist[j] << (i * 8));\n                //     }\n\n                //     fundAmounts[i] = toToken.totalSupply()\n                //         .mul(tokenAmount)\n                //         .div(tokens.tokens[i].balanceOf(address(converter)));\n\n                //     if (fundAmounts[i] < minFundAmount) {\n                //         minFundAmount = fundAmounts[i];\n                //     }\n                // }\n\n                // // Swap leftovers for SmartToken\n                // for (uint256 i = 0; i < tokens.tokens.length; i++) {\n                //     uint256 leftover = fundAmounts[i].sub(minFundAmount)\n                //         .mul(tokens.tokens[i].balanceOf(address(converter)))\n                //         .div(toToken.totalSupply());\n\n                //     if (leftover > 0) {\n                //         minFundAmount = minFundAmount.add(\n                //             smartTokenFormula.calculatePurchaseReturn(\n                //                 toToken.totalSupply(),\n                //                 tokens.tokens[i].balanceOf(address(converter)),\n                //                 uint32(tokens.totalRatio),\n                //                 leftover\n                //             )\n                //         );\n                //     }\n                // }\n\n                // return (minFundAmount, distribution);\n            }\n        }\n\n        return super.getExpectedReturn(\n            fromToken,\n            toToken,\n            amount,\n            parts,\n            disableFlags\n        );\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution,\n        uint256 disableFlags\n    ) internal {\n        if (fromToken == toToken) {\n            return;\n        }\n\n\n\n        return super._swap(\n            fromToken,\n            toToken,\n            amount,\n            distribution,\n            disableFlags\n        );\n    }\n\n    struct TokensWithRatio {\n        IERC20[] tokens;\n        uint256[] ratios;\n        uint256 totalRatio;\n    }\n\n    function _getTokens(\n        ISmartTokenConverter converter\n    )\n        private\n        view\n        returns(TokensWithRatio memory tokens)\n    {\n        tokens.tokens = new IERC20[](converter.connectorTokenCount());\n        tokens.ratios = new uint256[](tokens.tokens.length);\n        for (uint256 i = 0; i < tokens.tokens.length; i++) {\n            tokens.tokens[i] = converter.connectorTokens(i);\n            tokens.ratios[i] = converter.getReserveRatio(tokens.tokens[i]);\n            tokens.totalRatio = tokens.totalRatio.add(tokens.ratios[i]);\n        }\n    }\n}\n\n// File: contracts/OneSplit.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\n\n\n\ncontract OneSplit is\n    IOneSplit,\n    OneSplitBase,\n    OneSplitMultiPath,\n    OneSplitChai,\n    OneSplitAave,\n    OneSplitFulcrum,\n    OneSplitCompound,\n    OneSplitSmartToken\n{\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    )\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution // [Uniswap, Kyber, Bancor, Oasis]\n        )\n    {\n        if (fromToken == toToken) {\n            return (amount, new uint256[](4));\n        }\n\n        return super.getExpectedReturn(\n            fromToken,\n            toToken,\n            amount,\n            parts,\n            disableFlags\n        );\n    }\n\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    ) public payable {\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\n\n        _swap(fromToken, toToken, amount, distribution, disableFlags);\n\n        uint256 returnAmount = toToken.universalBalanceOf(address(this));\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\n        toToken.universalTransfer(msg.sender, returnAmount);\n        fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\n    }\n\n    function _swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    ) internal {\n        if (fromToken == toToken) {\n            return;\n        }\n\n        return super._swap(\n            fromToken,\n            toToken,\n            amount,\n            distribution,\n            disableFlags\n        );\n    }\n\n    function goodSwap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256 parts,\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\n    ) public payable {\n        (, uint256[] memory distribution) = getExpectedReturn(fromToken, toToken, amount, parts, disableFlags);\n        swap(\n            fromToken,\n            toToken,\n            amount,\n            minReturn,\n            distribution,\n            disableFlags\n        );\n    }\n\n    // DEPERECATED:\n\n    function getAllRatesForDEX(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    ) public view returns(uint256[] memory results) {\n        results = new uint256[](parts);\n        for (uint i = 0; i < parts; i++) {\n            (results[i],) = getExpectedReturn(\n                fromToken,\n                toToken,\n                amount.mul(i + 1).div(parts),\n                1,\n                disableFlags\n            );\n        }\n    }\n}"
    }
  }
}