{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/RHAsset.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n * Created on 2020-12-21\n * @summary: Asset contract\n * @author: RealHouse Team\n */\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\ninterface IRHFund {\n    function setPhysicalAddressOfOperation(string calldata _newPhysicalAddressOfOperation) external;\n\n    function isAdmin(address account) external view returns (bool);\n    function addAdmin(address account) external;\n    function removeAdmin(address account) external;\n    function renounceAdmin() external;\n\n    function addWLManagers(address) external;\n    function removeWLManagers(address) external;\n    function isWLManager(address) external view returns (bool);\n    function renounceWLManager() external;\n\n    function addFundWL(address _newWL) external;\n    function getFundWLAddress() external view returns (address);\n    function addNewAsset(address _newAsset) external;\n    function getDeployedAssets(uint256 index) external view returns (address, bool, address);\n    function getTotalDeployedAssets() external view returns (uint256);\n    function addNewDocument(string calldata uri, bytes32 documentHash) external;\n    function getDocInfos(uint256 _num) external view returns (string memory, bytes32, uint256);\n    function getDocsCount() external view returns (uint256);\n}\n\n\ninterface IRHWhitelist {\n    function isWhitelisted(address) external view returns(bool);\n    function getWLLength() external view returns(uint256);\n    function addToWhitelist(address) external;\n    function addToWhitelistMassive(address[] calldata) external returns (bool);\n    function removeFromWhitelist(address) external;\n}\n\n\ninterface IRHAsset {\n    function getAllTokens() external view returns (address[] memory);\n    function addNewToken(address _newToken) external;\n    function isTransferAgent(address account) external view returns (bool);\n    function addTransferAgent(address account) external;\n    function removeTransferAgent(address account) external;\n    function renounceTransferAgent() external;\n    function getTACounter() external view returns (uint256);\n    function getIssuanceNumber() external view returns (uint256);\n    function getWLAssetAddress() external view returns (address);\n    function addNewDocument(string calldata uri, bytes32 documentHash) external;\n    function getDocInfos(uint256 _num) external view returns (string memory, bytes32, uint256);\n    function getDocsCount() external view returns (uint256);\n    function writeSummary (string calldata _tmpSummary) external returns (bool);\n    function getSummary () external view returns (string memory);\n    function getOwner() external view returns (address);\n}\n\n\ncontract RHAsset is Ownable, ReentrancyGuard, IRHAsset {\n    using SafeMath for uint256;\n\n    struct Doc {\n        string docURI;          // URI of the document that exist off-chain\n        bytes32 docHash;        // Hash of the document\n        uint256 lastModified;   // Timestamp at which document details was last modified\n    }\n\n    string public name;\n    string public assetType;\n    string public assetID;\n    address public assetWLAddress;\n    address[] private tokens; // all asset tokens\n    uint256 private _issuanceNumber;\n    uint256 private docsCounter;\n    string private _summary;\n    bytes32 private _hashSummary;\n    uint256 private taCounter;\n\n    IRHFund private fundContract;\n\n    mapping (address => bool) private _transferAgents;\n    mapping(uint256 => Doc) internal _documents;\n\n    event DocHashAdded(uint256 indexed num,\n        string docuri,\n        bytes32 dochash);\n    event TokenDeployed(\n        address indexed newToken,\n        uint256 issuanceNumber\n    );\n\n    constructor (address _fund,\n            address _wlAddr,\n            string memory _assetID,\n            string memory _assetName,\n            string memory _type) {\n        fundContract = IRHFund(_fund);\n        assetWLAddress = _wlAddr;\n        assetID = _assetID;\n        name = _assetName;\n        assetType = _type;\n        transferOwnership(_fund);\n    }\n\n    modifier onlyTransferAgents() {\n        require(isTransferAgent(msg.sender), \"Not a Transfer Agent!\");\n        _;\n    }\n\n    modifier onlyAdmins() {\n        require(fundContract.isAdmin(msg.sender), \"Not an Administrator!\");\n        _;\n    }\n\n    /*   Transfer Agents Roles Mngmt  */\n    function _addTransferAgent(address account) internal {\n        taCounter = taCounter.add(1);\n        _transferAgents[account] = true;\n    }\n\n    function _removeTransferAgent(address account) internal {\n        taCounter = taCounter.sub(1);\n        _transferAgents[account] = false;\n    }\n\n    function isTransferAgent(address account) public override view returns (bool) {\n        return _transferAgents[account];\n    }\n\n    function addTransferAgent(address account) external override onlyAdmins {\n        require(account != address(0), \"Not valid Transfer Agent address!\");\n        require(!isTransferAgent(account), \"Address is already a Transfer Agent\");\n        _addTransferAgent(account);\n    }\n\n    function removeTransferAgent(address account) external override onlyAdmins {\n        _removeTransferAgent(account);\n    }\n\n    function renounceTransferAgent() external override onlyTransferAgents {\n        _removeTransferAgent(msg.sender);\n    }\n\n    function getTACounter() external override view returns (uint256){\n        return taCounter;\n    }\n\n    /**\n    * @dev get number of token issuance\n    * @return uint256 total issuance number\n    */\n    function getIssuanceNumber() external override view returns (uint256) {\n        return _issuanceNumber;\n    }\n\n    /**\n    * @dev get asset tokens contract addresses already deployed\n    * @return address array of deployed token contracts\n    */\n    function getAllTokens() external override view returns (address[] memory) {\n        return tokens;\n    }\n\n    /**\n    * @dev get the WL contract for this asset contract\n    * @return asset WL contract address\n    */\n    function getWLAssetAddress() external override view returns (address) {\n        return assetWLAddress;\n    }\n\n    /**\n    * @dev deploy new token contract calling the token deployer, adding it to deployed token array and increasing issuance number\n    * @dev assetWLAddress can be restored to fund WL if a dedicated WL was previously deployed (only once)\n    * @param _newToken, new token address\n    */\n    function addNewToken(address _newToken) external override nonReentrant onlyAdmins {\n        //address newToken = tokenDeplContract.deployToken(address(fundContract), address(this), assetWLAddress,\n                            //_name, _ticker, _tokenType, _couponType, _decimals, _tokenRoi, _hardCap, _issuanceNumber);\n        address newToken = _newToken;\n        tokens.push(newToken);\n        emit TokenDeployed(newToken, _issuanceNumber);\n        _issuanceNumber = _issuanceNumber.add(1);\n    }\n\n    /**\n     * @dev set a new document structure to store in the list, queueing it if others exist and incremetning documents counter\n     * @param uri string for document URL\n     * @param documentHash bytes32 Hash to add to list\n     */\n    function addNewDocument(string memory uri, bytes32 documentHash) external override onlyAdmins{\n        _documents[docsCounter] = Doc({docURI: uri, docHash: documentHash, lastModified: block.timestamp});\n        docsCounter = docsCounter.add(1); //ptrepare for next doc to add\n        emit DocHashAdded(docsCounter, uri, documentHash);\n    }\n\n    /**\n     * @dev get a hash in the _num place\n     * @param _num uint256 Place of the hash to return\n     * @return string name, bytes32 hash, uint256 datetime\n     */\n    function getDocInfos(uint256 _num) external override view returns (string memory, bytes32, uint256) {\n        return (_documents[_num].docURI, _documents[_num].docHash, _documents[_num].lastModified);\n    }\n\n    /**\n     * @dev get the hash list length\n     */\n    function getDocsCount() external override view returns (uint256) {\n        return docsCounter;\n    }\n\n    /**\n     * @dev write operation summary on blockchain\n     * @param _tmpSummary bytes with info\n     * @return bool success\n     */\n    function writeSummary (string calldata _tmpSummary) external override onlyAdmins returns (bool) {\n        _summary = _tmpSummary;\n        return true;\n    }\n\n    /**\n     * @dev get summary info\n     * @return string summary\n     */\n    function getSummary () external override view returns (string memory) {\n        return _summary;\n    }\n\n    /**\n     * @dev get owner address\n     * @return address owner\n     */\n    function getOwner() external override view returns (address) {\n        return owner();\n    }\n\n}\n"}}}