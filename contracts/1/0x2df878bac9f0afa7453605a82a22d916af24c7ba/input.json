{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity >=0.6.11;\n\ninterface ICurve {\n    function get_dy(int128 i, int128 j, uint256 dx) external returns (uint256);\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\n}\n\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n}\n\n\ncontract CureveDemo {\n\n    address private usdtContract = 0xdAC17F958D2ee523a2206206994597C13D831ec7;     \n    address private daiContract = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address private curvePoolContract = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address private owner;\n    int128 private curveUsdtIndex = 2;\n    int128 private curveDaiIndex = 0;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function _withdrawAllDai() private {\n        IERC20 erc = IERC20(daiContract);\n        uint amount = erc.balanceOf(address(this));\n        erc.transfer(msg.sender, amount);\n    }\n    \n    function withdrawAllDai() external onlyOwner() { \n        _withdrawAllDai();\n    }\n\n    function withdrawAllUsdt() external onlyOwner() {\n        IERC20 erc = IERC20(usdtContract);\n        uint amount = erc.balanceOf(address(this));\n        erc.transfer(msg.sender, amount);\n    }\n    \n    function swapAllUsdt() external onlyOwner() {\n        IERC20 erc = IERC20(usdtContract);\n        uint amount = erc.balanceOf(address(this));\n        erc.approve(curvePoolContract, amount);\n        ICurve curve = ICurve(curvePoolContract);\n        uint256 min_dy = curve.get_dy(curveUsdtIndex, curveDaiIndex, amount);\n        curve.exchange(curveUsdtIndex, curveDaiIndex, amount, min_dy);\n        _withdrawAllDai();\n    }\n    \n    function setCurveInfo(address _poolAddr, int128 _usdtIndex, int128 _daiIndex) external onlyOwner() {\n        curvePoolContract = _poolAddr;\n        curveUsdtIndex = _usdtIndex;\n        curveDaiIndex = _daiIndex;\n    }\n}"
    }
  }
}