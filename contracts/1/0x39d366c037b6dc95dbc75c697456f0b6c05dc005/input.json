{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DSA_test/curveY.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface TokenInterface {\n    function approve(address, uint256) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}\n\ninterface EventInterface {\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n}\n\ncontract Stores {\n\n    /**\n     * @dev Return ethereum address\n     */\n    function getEthAddr() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n    }\n\n    /**\n     * @dev Return memory variable address\n     */\n    function getMemoryAddr() internal pure returns (address) {\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n    }\n\n    /**\n     * @dev Return InstaEvent Address.\n     */\n    function getEventAddr() internal pure returns (address) {\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n    }\n\n    /**\n     * @dev Get Uint value from InstaMemory Contract.\n     */\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n    }\n\n    /**\n     * @dev Set Uint value in InstaMemory Contract.\n     */\n    function setUint(uint setId, uint val) internal {\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n    }\n\n    /**\n     * @dev emit event on event contract\n     */\n    function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\n        (uint model, uint id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n    }\n\n    /**\n     * @dev Connector Details.\n     */\n    function connectorID() public pure returns(uint model, uint id) {\n        (model, id) = (1, 30);\n    }\n\n}\n\ncontract DSMath {\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n}\n\ninterface ICurve {\n  function underlying_coins(int128 tokenId) external view returns (address token);\n  function calc_token_amount(uint256[4] calldata amounts, bool deposit) external returns (uint256 amount);\n  function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external returns (uint256 buyTokenAmt);\n  function exchange_underlying(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt, uint256 minBuyToken) external;\n}\n\ninterface ICurveZap {\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external returns (uint256 amount);\n  function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\n  function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\n}\n\n\ncontract CurveHelpers is Stores, DSMath {\n  /**\n  * @dev Return ycurve Swap Address\n  */\n  function getCurveSwapAddr() internal pure returns (address) {\n    return 0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51;\n  }\n\n  /**\n  * @dev Return ycurve zap Address\n  */\n  function getCurveZapAddr() internal pure returns (address) {\n    return 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\n  }\n\n  /**\n  * @dev Return Curve Token Address\n  */\n  function getCurveTokenAddr() internal pure returns (address) {\n    return 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\n  }\n\n  function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n    amt = (_amt / 10 ** (18 - _dec));\n  }\n\n  function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n    amt = mul(_amt, 10 ** (18 - _dec));\n  }\n\n  function getTokenI(address token) internal pure returns (int128 i) {\n    if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\n      // DAI Token\n      i = 0;\n    } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\n      // USDC Token\n      i = 1;\n    } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\n      // USDT Token\n      i = 2;\n    } else if (token == address(0x0000000000085d4780B73119b644AE5ecd22b376)) {\n      // USDT Token\n      i = 3;\n    } else {\n      revert(\"token-not-found.\");\n    }\n  }\n}\n\ncontract CurveProtocol is CurveHelpers {\n\n  event LogSell(\n    address indexed buyToken,\n    address indexed sellToken,\n    uint256 buyAmt,\n    uint256 sellAmt,\n    uint256 getId,\n    uint256 setId\n  );\n  event LogDeposit(address token, uint256 amt, uint256 mintAmt, uint256 getId, uint256 setId);\n  event LogWithdraw(address token, uint256 amt, uint256 burnAmt, uint256 getId,  uint256 setId);\n\n  /**\n  * @dev Sell Stable ERC20_Token.\n  * @param buyAddr buying token address.\n    * @param sellAddr selling token amount.\n    * @param sellAmt selling token amount.\n    * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\n    * @param getId Get token amount at this ID from `InstaMemory` Contract.\n    * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n  function sell(\n    address buyAddr,\n    address sellAddr,\n    uint sellAmt,\n    uint unitAmt,\n    uint getId,\n    uint setId\n  ) external payable {\n    uint _sellAmt = getUint(getId, sellAmt);\n    ICurve curve = ICurve(getCurveSwapAddr());\n    TokenInterface _buyToken = TokenInterface(buyAddr);\n    TokenInterface _sellToken = TokenInterface(sellAddr);\n    _sellAmt = _sellAmt == uint(-1) ? _sellToken.balanceOf(address(this)) : _sellAmt;\n    _sellToken.approve(address(curve), _sellAmt);\n\n    uint _slippageAmt = convert18ToDec(_buyToken.decimals(), wmul(unitAmt, convertTo18(_sellToken.decimals(), _sellAmt)));\n\n    uint intialBal = _buyToken.balanceOf(address(this));\n    curve.exchange_underlying(getTokenI(sellAddr), getTokenI(buyAddr), _sellAmt, _slippageAmt);\n    uint finalBal = _buyToken.balanceOf(address(this));\n\n    uint _buyAmt = sub(finalBal, intialBal);\n\n    setUint(setId, _buyAmt);\n\n    emit LogSell(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\n    bytes32 _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\n    bytes memory _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\n    // emitEvent(_eventCode, _eventParam);\n\n  }\n\n  /**\n  * @dev Deposit Token.\n  * @param token token address.\n    * @param amt token amount.\n    * @param unitAmt unit amount of curve_amt/token_amt with slippage.\n    * @param getId Get token amount at this ID from `InstaMemory` Contract.\n    * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n  function deposit(\n    address token,\n    uint amt,\n    uint unitAmt,\n    uint getId,\n    uint setId\n  ) external payable {\n    uint256 _amt = getUint(getId, amt);\n    TokenInterface tokenContract = TokenInterface(token);\n\n    _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\n    uint[4] memory _amts;\n    _amts[uint(getTokenI(token))] = _amt;\n\n    tokenContract.approve(getCurveSwapAddr(), _amt);\n\n    uint _amt18 = convertTo18(tokenContract.decimals(), _amt);\n    uint _slippageAmt = wmul(unitAmt, _amt18);\n\n    TokenInterface curveTokenContract = TokenInterface(getCurveTokenAddr());\n    uint initialCurveBal = curveTokenContract.balanceOf(address(this));\n\n    ICurveZap(getCurveZapAddr()).add_liquidity(_amts, _slippageAmt);\n\n    uint finalCurveBal = curveTokenContract.balanceOf(address(this));\n\n    uint mintAmt = sub(finalCurveBal, initialCurveBal);\n\n    setUint(setId, mintAmt);\n\n    emit LogDeposit(token, _amt, mintAmt, getId, setId);\n    bytes32 _eventCode = keccak256(\"LogDeposit(address,uint256,uint256,uint256,uint256)\");\n    bytes memory _eventParam = abi.encode(token, _amt, mintAmt, getId, setId);\n    // emitEvent(_eventCode, _eventParam);\n  }\n\n  /**\n  * @dev Withdraw Token.\n  * @param token token address.\n    * @param amt token amount.\n    * @param unitAmt unit amount of curve_amt/token_amt with slippage.\n    * @param getId Get token amount at this ID from `InstaMemory` Contract.\n    * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n  function withdraw(\n    address token,\n    uint256 amt,\n    uint256 unitAmt,\n    uint getId,\n    uint setId\n  ) external payable {\n    uint _amt = getUint(getId, amt);\n    int128 tokenId = getTokenI(token);\n\n    TokenInterface curveTokenContract = TokenInterface(getCurveTokenAddr());\n    ICurveZap curveZap = ICurveZap(getCurveZapAddr());\n    ICurve curveSwap = ICurve(getCurveSwapAddr());\n\n    uint _curveAmt;\n    uint[4] memory _amts;\n    if (_amt == uint(-1)) {\n      _curveAmt = curveTokenContract.balanceOf(address(this));\n      _amt = curveZap.calc_withdraw_one_coin(_curveAmt, tokenId);\n      _amts[uint(tokenId)] = _amt;\n    } else {\n      _amts[uint(tokenId)] = _amt;\n      _curveAmt = curveSwap.calc_token_amount(_amts, false);\n    }\n\n\n    uint _amt18 = convertTo18(TokenInterface(token).decimals(), _amt);\n    uint _slippageAmt = wmul(unitAmt, _amt18);\n\n    curveTokenContract.approve(address(curveZap), 0);\n    curveTokenContract.approve(address(curveZap), _slippageAmt);\n\n    curveZap.remove_liquidity_imbalance(_amts, _slippageAmt);\n\n    setUint(setId, _amt);\n\n    emit LogWithdraw(token, _amt, _curveAmt, getId, setId);\n    bytes32 _eventCode = keccak256(\"LogWithdraw(address,uint256,uint256,uint256,uint256)\");\n    bytes memory _eventParam = abi.encode(token, _amt, _curveAmt, getId, setId);\n    // emitEvent(_eventCode, _eventParam);\n  }\n\n}\n\ncontract ConnectCurveY is CurveProtocol {\n  string public name = \"Curve-y-v1\";\n}\n"
    }
  }
}