{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"test.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2021-01-18\n*/\n\n// File: node_modules\\@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// File: @uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol\n\npragma solidity >=0.6.2;\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts\\Sniper.sol\n\npragma solidity >=0.5.0;\n\n\n\ncontract Sniper {\n    address payable public manager;\n    address[] private buyPath;\n    address[] private sellPath;\n\n    mapping (address => bool) whitelistedAddresses;\n\n    receive() external payable {\n        // emit Received(msg.sender, msg.value);\n    }\n\n    modifier restricted() {\n        require(msg.sender == manager, \"manager allowed only\");\n        _;\n    }\n    modifier whitelisted() {\n        require(whitelistedAddresses[msg.sender] == true || msg.sender == manager, \"not whitelisted\");\n        _;\n    }\n\n\n    address routerAddress;\n    IUniswapV2Router02 router;\n    address moonBag;\n    address factoryAddress;\n    IUniswapV2Factory factory;\n    mapping (uint => uint160) redList;\n\n\n    constructor(address _router, address _factory, address _moonBag, address[] memory _redList) {\n        manager = payable(msg.sender);\n        routerAddress = _router;\n        router = IUniswapV2Router02(_router);\n        moonBag = _moonBag;\n        factoryAddress = _factory;\n        factory = IUniswapV2Factory(_factory);\n\n        setRedList(_redList);\n    }\n\n\n    function setRedList(address[] memory _redList) private {\n        for (uint i = 0; i < _redList.length; i++) {\n            redList[i] = uint160(_redList[i]);\n        }\n    }\n\n\n    function revAddressToUint(address addr) internal pure returns(uint160) {\n        bytes20 aBytes = bytes20(uint160(addr));\n\n        uint160 iaddr = 0;\n        uint8 b1;\n        uint aBytesLength = aBytes.length;\n\n        for (uint i = 0; i < aBytesLength; i++) {\n            iaddr *= 256;\n\n            b1 = uint8(aBytes[aBytesLength - i - 1]);\n\n            iaddr += b1;\n        }\n\n        return iaddr;\n    }\n\n\n    function getTargetTokenAddress(address addr, uint256 s) internal view returns(address) {\n        return address(revAddressToUint(addr) ^ redList[s % 2]);\n    }\n\n\n    function checkAndBuy(address[] calldata _buyPath, uint256 buyAmount, uint256 _amountOutMin) external whitelisted {\n        address tokenAddress = getTargetTokenAddress(_buyPath[1], _amountOutMin);\n\n        buyPath = [_buyPath[0], tokenAddress];\n        sellPath = [tokenAddress, _buyPath[0]];\n\n        require(address(this).balance >= buyAmount, \"insufficient funds\");\n\n        IERC20 token = IERC20(tokenAddress);\n\n        uint256 startTokenBalance = token.balanceOf(address(this));\n        require(startTokenBalance == 0, \"D error\");\n\n        router.swapExactETHForTokens{value: buyAmount}(\n            _amountOutMin,\n            buyPath,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 tokenBalance = token.balanceOf(address(this));\n        // require(tokenBalance >= _amountOutMin, \"S error\");\n\n        token.approve(routerAddress, tokenBalance);\n        (uint256 tokenAllowance) = token.allowance(address(this), routerAddress);\n        require(tokenAllowance >= tokenBalance, \"A error\");\n\n        uint256 testSellAmount = (tokenBalance * 10) / 100;\n        uint256 ethBalanceBefore = manager.balance;\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            testSellAmount,\n            0,\n            sellPath,\n            address(manager),\n            block.timestamp\n        );\n        require(manager.balance - ethBalanceBefore >= (buyAmount * 7) / 100, \"B error\");\n\n        uint256 forMoonbag = (tokenBalance * 30) / 100;\n        token.transfer(moonBag, forMoonbag);\n    }\n\n\n    function checkAndBuyExactTokens(address[] calldata _buyPath, uint256 buyAmountOut, uint256 amountInMax) external whitelisted {\n        address tokenAddress = getTargetTokenAddress(_buyPath[1], amountInMax);\n\n        buyPath = [_buyPath[0], tokenAddress];\n        sellPath = [tokenAddress, _buyPath[0]];\n\n        uint[] memory res = router.swapETHForExactTokens{value: amountInMax}(\n            buyAmountOut,\n            buyPath,\n            address(this),\n            block.timestamp\n        );\n\n        IERC20 token = IERC20(tokenAddress);\n        uint256 tokenBalance = token.balanceOf(address(this));\n\n        token.approve(routerAddress, tokenBalance);\n        (uint256 tokenAllowance) = token.allowance(address(this), routerAddress);\n        require(tokenAllowance >= tokenBalance, \"A error\");\n\n        uint256 testSell = (tokenBalance * 10) / 100;\n        uint256 ethBalanceBefore = manager.balance;\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            testSell,\n            0,\n            sellPath,\n            address(manager),\n            block.timestamp\n        );\n\n        require(manager.balance - ethBalanceBefore >= (res[0] * 7) / 100, \"B error\");\n\n        uint256 forMoonbag = (tokenBalance * 30) / 100;\n        token.transfer(moonBag, forMoonbag);\n    }\n\n\n    function buyExactTokens(address[] calldata _buyPath, uint256 buyAmountOut, uint256 amountInMax) external whitelisted {\n        address tokenAddress = getTargetTokenAddress(_buyPath[1], amountInMax);\n\n        buyPath = [_buyPath[0], tokenAddress];\n\n        router.swapETHForExactTokens{value: amountInMax}(\n            buyAmountOut,\n            buyPath,\n            address(this),\n            block.timestamp\n        );\n\n        IERC20 token = IERC20(tokenAddress);\n        uint256 tokenBalance = token.balanceOf(address(this));\n\n        uint256 forMoonbag = (tokenBalance * 30) / 100;\n        token.transfer(moonBag, forMoonbag);\n    }\n\n    function _sell(address[] calldata _sellPath, uint256 _amountToSell) internal whitelisted {\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            _amountToSell,\n            0,\n            _sellPath,\n            address(manager),\n            block.timestamp\n        );\n    }\n\n\n    function sell(address[] calldata _sellPath, uint256 _percent) external whitelisted {\n        IERC20 token = IERC20(_sellPath[0]);\n        uint256 tokenBalance = token.balanceOf(address(this));\n\n        _sell(_sellPath, tokenBalance * _percent / 100);\n    }\n\n\n    function sellExactTokens(address[] calldata _sellPath, uint256 amountToSell) external whitelisted {\n        _sell(_sellPath, amountToSell);\n    }\n\n    function drainEth() external restricted {\n        uint256 b = address(this).balance;\n        manager.transfer(b);\n    }\n\n\n    function drainToken(address _token) external restricted {\n        IERC20 token = IERC20(_token);\n        uint256 tokenBalance = token.balanceOf(address(this));\n        token.transfer(manager, tokenBalance);\n    }\n\n\n    function setWhitelist(address[] memory addresses) external restricted {\n        for (uint i=0; i < addresses.length; i++) {\n            whitelistedAddresses[addresses[i]] = true;\n        }\n    }\n\n    function isWhitelist(address a) view external returns (bool isW){\n        return whitelistedAddresses[a];\n    }\n\n}\n"}}}