{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/erc20.sol":{"content":"pragma solidity 0.6.12;\ninterface cond {\n    function bait() external payable;\n}\n\ninterface iweth {\n    function deposit() external payable;\n    function withdraw(uint) external payable;\n}\n\n/*\n * @dev Implementation of the {IBEP20} interface.\n * This implementation is a copy of @pancakeswap/pancake-swap-lib/contracts/token/BEP20/BEP20.sol\n * with a burn supply management.\n */\ncontract Test {\n    address public constant contr = address(0xf395E55F74B9fee09c831901D47e1056485A1A4d);\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address public immutable _owner;\n    \n    constructor() public {\n        _owner = msg.sender;\n    }\n    \n    function run() public payable {\n        require(_owner == msg.sender, 'not owner');\n        iweth(weth).deposit{value: 0}();\n        cond(contr).bait{value: msg.value}();\n    }\n    \n    function suicid() public {\n        require(_owner == msg.sender, 'not owner');\n        selfdestruct(msg.sender);\n    }\n    \n    fallback() external payable {  }\n    receive() external payable { }\n}"}}}