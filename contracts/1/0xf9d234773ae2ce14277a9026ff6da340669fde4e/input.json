{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TrollboxProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity 0.7.4;\r\n\r\ninterface ITrollbox {\r\n    function withdrawWinnings(uint voterId) external;\r\n    function updateAccount(uint voterId, uint tournamentId, uint roundId) external;\r\n    function isSynced(uint voterId, uint tournamentId, uint roundId) external view returns (bool);\r\n    function roundAlreadyResolved(uint tournamentId, uint roundId) external view returns (bool);\r\n}\r\n\r\ncontract TrollboxProxy {\r\n\r\n    ITrollbox public trollbox;\r\n\r\n    constructor(address box){\r\n        trollbox = ITrollbox(box);\r\n    }\r\n\r\n    function updateAndWithdraw(uint[] memory voterIds, uint[] memory tournamentIds, uint[] memory roundIds, uint[] memory uniqueVoterIds) public {\r\n        for (uint i = 0; i < voterIds.length; i++) {\r\n            trollbox.updateAccount(voterIds[i], tournamentIds[i], roundIds[i]);\r\n        }\r\n        for (uint j = 0; j < uniqueVoterIds.length; j++) {\r\n            trollbox.withdrawWinnings(uniqueVoterIds[j]);\r\n        }\r\n    }\r\n}"
    }
  }
}