{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "artrix/bid.sol": {
      "content": "pragma solidity ^0.6.12;\n\n//import \"@openzeppelin/contracts/access/Ownable.sol\";\n/* openzeppelin*/\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n/* openzeppelin*/\n\nlibrary TransferHelper {\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n\n    \n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n\tfunction approve(address guy, uint256 wad) external returns (bool);\n\tfunction transferFrom(\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 wad\n\t) external returns (bool);\n}\n\ncontract bid  is Ownable ,Pausable {\n\n    using SafeMath for uint256;\n\n    uint256 maintainerPayment;\n    uint256 creatorPayment;\n    uint256 ownerPayment;\n\n    address private aart;\n    address private platformAddress;\n    //address private weth;\n\n    // Percentage to owner of SupeRare. (* 10) to allow for < 1% \n    uint256 public maintainerPercentage = 150;\n\n    // Percentage to creator of artwork. (* 10) to allow for tens decimal. \n    uint256 public creatorPercentage = 100;\n\n    \n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n    \n    struct currentbidder{\n        address   token;\n        address   curr;\n        uint256   price;\n        uint256   lastbid;\n        uint256   addpercentage;\n        bool      status;\n    }\n\n    receive() external payable {}\n\n    //fallback() external payable {}\n\n    //constructor(address _aart,address _platformAddress,address _weth) public {\n      constructor(address _aart,address _platformAddress) public {  \n        require(_aart != address(0),\"_aart is zero\");\n        aart = _aart;\n        platformAddress = _platformAddress;\n        //weth = _weth;\n    }\n    \n\n    event PlatformAddressUpdated (address platformAddress);\n    event AcceptBid(address from,address to, uint256 id,uint256 value);\n    event Bid(address bidder,uint256 value,uint256 id);\n    //event Bid2(address from,address owner ,uint256 id);\n    event SaleBidSet(address token,uint256 tokenId, uint256 salePrice);\n    event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price);\n    event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId);\n   \n    mapping(uint256 => currentbidder) public cb;\n\n    // Mapping from token ID to the owner sale price\n    mapping(uint256 => uint256) private tokenSalePrice;\n\n\n    //Check that the sender is the owner or maintainer\n    modifier ownerOrtokenof(uint256 _tokenid) {\n        require( msg.sender == IERC721(aart).ownerOf(_tokenid) || owner() == msg.sender,\"must be owner or admin\" );\n        _;      \n    }\n\n    //Check that the sender is the token of owner\n    modifier onlyOwnerOf(uint256 _tokenid) {\n        require( msg.sender == IERC721(aart).ownerOf(_tokenid) ,\"must be token of owner\" );\n        _;\n    }\n\n    /**\n     * @dev Guarantees msg.sender is not the owner of the given token\n     * @param _tokenid uint256 ID of the token to validate its ownership does not belongs to msg.sender\n     */\n    modifier notOwnerOf(uint256 _tokenid) {\n        require(IERC721(aart).ownerOf(_tokenid) != msg.sender,\"only other accounts are allowed\");\n        _;\n    }\n\n    \n    function pause() public onlyOwner() {\n        _pause();\n    }\n\n    function unpause() public onlyOwner() {\n        _unpause();\n    }\n\n    /**\n     * @dev Set the bid price of the token\n     * @param _tokenid uint256 ID of the token with the standing bid\n     */\n    function setbid(address _token,uint256 _tokenid,uint256 _price,uint256 _addpercentage) public onlyOwnerOf(_tokenid) whenNotPaused() {\n        require(cb[_tokenid].status != true,\"Repeat setting\");\n        require(_price > 0,\"must gt zero\");\n        require(_addpercentage > 0,\"must gt zero\");\n        cb[_tokenid].token = _token;\n        cb[_tokenid].price = _price;\n        cb[_tokenid].addpercentage = _addpercentage;\n        cb[_tokenid].status = true;\n        emit SaleBidSet(_token,_tokenid, _price);\n    }\n\n    // update the Platform Address\n    function updatePlatformAddress(address newPlatformAddress) public onlyOwner() {\n        require(newPlatformAddress != address(0));\n        platformAddress = newPlatformAddress;\n\n        emit PlatformAddressUpdated(newPlatformAddress);\n    }\n\n    /**\n    * @dev Gets the sale price of the token\n    * @param _tokenid uint256 ID of the token\n    * @return sale price of the token\n    */\n    function SalePriceOfToken(uint256 _tokenid) public view returns (uint256) {\n        return tokenSalePrice[_tokenid];\n    }\n\n     /**\n    * @dev Gets the current bid and bidder of the token\n    * @param _tokenid uint256 ID of the token to get bid details\n    * @return bid amount and last bid amount and bidder address of token\n    */\n    function currentBidDetailsOfToken(uint256 _tokenid) public view returns (uint256, address,uint256) {\n        //require(cb[_tokenid] == true,\"status is false\");\n        return (cb[_tokenid].price, cb[_tokenid].curr,cb[_tokenid].lastbid);\n    }\n\n\n    /**\n     * @dev Cancels the bid on the token, returning the bid amount to the bidder.\n     * @param _tokenid uint256 ID of the token with a bid\n     */\n    function cacelbid(uint256 _tokenid) public ownerOrtokenof(_tokenid) whenNotPaused() {\n        require(cb[_tokenid].status,\"status is not true\");\n\n        address tk = cb[_tokenid].token;\n        address cur = cb[_tokenid].curr;\n        uint value = cb[_tokenid].lastbid;\n\n        returnCurrentBid(tk,cur,0,value,_tokenid);\n\n        // add 210615 delete\n        delete cb[_tokenid];\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'AART BID: TRANSFER_FAILED');\n    }\n\n     /**\n     * @dev Set the maintainer Percentage. Needs to be 10 * target percentage\n     * @param _percentage uint256 percentage * 10.\n     */\n    function setMaintainerPercentage(uint256 _percentage) public onlyOwner() {\n       maintainerPercentage = _percentage;\n    }\n\n    /**\n     * @dev Set the creator Percentage. Needs to be 10 * target percentage\n     * @param _percentage uint256 percentage * 10.\n     */\n    function setCreatorPercentage(uint256 _percentage) public onlyOwner() {\n       creatorPercentage = _percentage;\n    }\n\n    /**\n     * @dev Set the sale price of the token\n     * @param _tokenid uint256 ID of the token with the standing bid\n     */\n    function setSalePrice(uint256 _tokenid, uint256 _salePrice) public onlyOwnerOf(_tokenid) {\n        //uint256 currentBid = tokenCurrentBid[_tokenid];\n        //require(_salePrice > currentBid);\n        tokenSalePrice[_tokenid] = _salePrice;\n        emit SalePriceSet(_tokenid, _salePrice);\n    }\n\n     /**\n     * @dev Purchase the token if there is a sale price; transfers ownership to buyer and pays out owner.\n     * @param _tokenid uint256 ID of the token to be purchased\n     */\n    function buy(uint256 _tokenid) public payable whenNotPaused() notOwnerOf(_tokenid) {\n        uint256 salePrice = tokenSalePrice[_tokenid];\n        uint256 sentPrice = msg.value;\n        address buyer = msg.sender;\n        require(salePrice > 0);\n        require(sentPrice >= salePrice);\n\n        maintainerPayment = sentPrice.mul(maintainerPercentage).div(1000);\n        ownerPayment = sentPrice.sub(maintainerPayment);\n\n        address tokenOwner = IERC721(aart).ownerOf(_tokenid);\n\n        TransferHelper.safeTransferETH(platformAddress,maintainerPayment);\n        TransferHelper.safeTransferETH(tokenOwner,ownerPayment);\n\n        IERC721(aart).transferFrom(tokenOwner,buyer,_tokenid);\n\n        tokenSalePrice[_tokenid] = 0;\n        emit Sold(buyer, tokenOwner, sentPrice, _tokenid);\n    }\n\n     /**\n    * @dev Internal function to check that the bid is larger than current bid\n    * @param _tokenid uint256 ID of the token with the standing bid\n    */\n    function isGreaterBid(address _token,uint256 _tokenid,uint256 _value) private view returns (bool) {\n    \n        uint256  addbid = cb[_tokenid].lastbid.mul(cb[_tokenid].addpercentage ).div(1000);  \n        uint256  currbid = cb[_tokenid].lastbid.add(addbid);\n\n          //Check bid amount\n        if (_token == address(0)) {\n            //require(msg.value > cb[_tokenid].price && msg.value > cb[_tokenid].lastbid,\"Bid must be greater than price or lastbid \");\n            require(msg.value > cb[_tokenid].price && msg.value >= currbid,\"Bid must be greater than price or lastbid\");\n        } else {\n            //require(_value > cb[_tokenid].price && _value > cb[_tokenid].lastbid,\"Bid must be greater than price or lastbid\");\n            require(_value > cb[_tokenid].price && _value >= currbid,\"Bid must be greater than price or lastbid\");\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Accept the bid on the token, transferring ownership to the current bidder and paying out the owner.\n     * @param _tokenid uint256 ID of the token with the standing bid\n     */\n    function acceptbid(uint256 _tokenid) public payable ownerOrtokenof(_tokenid) whenNotPaused() {\n        // Get the nft token of owner\n        address own = IERC721(aart).ownerOf(_tokenid);\n\n        address tk = cb[_tokenid].token;\n        address to = cb[_tokenid].curr;\n        uint256 value  = cb[_tokenid].lastbid;\n\n        //transfer nft to the last bidder\n        IERC721(aart).transferFrom(own,to,_tokenid);\n\n        maintainerPayment = value.mul(maintainerPercentage).div(1000);\n        //creatorPayment = value.mul(creatorPercentage).div(1000);\n        //ownerPayment = value.sub(creatorPayment).sub(maintainerPayment); \n        ownerPayment = value.sub(maintainerPayment);       \n\n        //transfer token\n        if (tk == address(0)) {\n            TransferHelper.safeTransferETH(platformAddress,maintainerPayment);\n            TransferHelper.safeTransferETH(own,ownerPayment);\n        } else {\n            // token transfer to the receiver\n            //TransferHelper.safeTransferFrom(tk, address(this), lastbidder, cp);\n            _safeTransfer(tk, platformAddress, maintainerPayment);\n            _safeTransfer(tk, own, ownerPayment);\n        }\n\n        // add 210615 delete\n        delete cb[_tokenid];\n\n        emit AcceptBid(msg.sender,to,_tokenid,value);\n    }\n\n\n    /**\n    * @dev Internal function to return funds to current bidder.\n    * @param _tokenid uint256 ID of the token with the standing bid\n    */\n    function returnCurrentBid(address _token,address _receiver,uint256 _value,uint256 _rvalue,uint256 _tokenid) private returns(uint256) {\n\n        uint256  value;       \n        if (_token == address(0)) {\n            //require(msg.value > cp,\"msg.value must be greater than\");\n            TransferHelper.safeTransferETH(_receiver,_rvalue);\n            cb[_tokenid].lastbid = msg.value;\n            value = msg.value;\n        } else {\n            //require(_value > cp,\"token must be greater than\");\n            // token transfer to this contract\n            if (_value > 0){\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _value);\n            }\n            // token refund to ths last bider\n            //TransferHelper.safeTransferFrom(tk, address(this), lastbidder, cp);\n            if (_rvalue > 0){\n                _safeTransfer(_token, _receiver, _rvalue);\n            }\n            \n            cb[_tokenid].lastbid = _value;\n            value = _value;\n        }\n        return value;\n\n    }\n\n    /**\n    * @dev Bids on the token, replacing the bid if the bid is higher than the current bid. You cannot bid on a token you already own.\n    * @param _tokenid uint256 ID of the token to bid on\n    * @param _token erc20 token contract address\n    * @param _value \berc20 token current bid,others is 0\n    */\n    function bid1(address _token,uint256 _value,uint256 _tokenid) public payable whenNotPaused()  notOwnerOf(_tokenid) returns(bool) {\n\n        // check nft token status\n        require(cb[_tokenid].status,\"status is false\");\n        require(cb[_tokenid].token == _token,\"token check failed\");\n        require(IERC721(aart).ownerOf(_tokenid) != msg.sender,\"only other accounts are allowed\");\n        \n        //Check bid amount\n        require(isGreaterBid(_token,_tokenid,_value),\"check bid amount failed\");\n\n        // last bidder\n        //address  tk = cb[_tokenid].token;\n        address  lastbidder = cb[_tokenid].curr;\n        uint256  cp = cb[_tokenid].lastbid;\n\n        //return funds to current bidder\n        uint256 value = returnCurrentBid(_token,lastbidder,_value,cp,_tokenid);\n\n        //是否每笔拍卖支持任意币种\n        cb[_tokenid].token = _token;\n        cb[_tokenid].curr = msg.sender;\n        \n        // emit event\n        emit Bid(msg.sender,value,_tokenid);\n        return true;\n    }\n\n \n}\n\n// aart 0xd47ac9ba97493034f10d1193dce8e322ade8d919\n// platformAddress  0x91D3AD4c9c95e857F80D7Acf79FcCddE54D9884A"
    }
  }
}