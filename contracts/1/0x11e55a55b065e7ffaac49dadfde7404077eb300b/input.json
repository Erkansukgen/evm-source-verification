{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "RewardContract.sol": {
      "content": "pragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ncontract StakingRewards is Ownable {\n    IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n\n    uint public rewardRate = 1500000000000000;\n    uint public lastUpdateTime;\n    uint public rewardPerTokenStored;\n\n    mapping(address => uint) public userRewardPerTokenPaid;\n    mapping(address => uint) public rewards;\n\n    uint public _totalSupply;\n    uint public _totalReward;\n    mapping(address => uint) private _balances;\n\n    constructor(address _stakingToken, address _rewardsToken) {\n        stakingToken = IERC20(_stakingToken);\n        rewardsToken = IERC20(_rewardsToken);\n    }\n\n    function rewardPerToken() public view returns (uint) {\n        if (_totalSupply == 0) {\n            return 0;\n        }\n        return\n            rewardPerTokenStored +\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\n    }\n    \n    function updateRate(uint rate) public onlyOwner {\n        rewardRate = rate;\n        rewardPerTokenStored = rewardPerToken();\n    }\n\n    function earned(address account) public view returns (uint) {\n        return\n            ((_balances[account] *\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\n            rewards[account];\n    }\n    \n    function balance(address account) public view returns (uint) {\n        return _balances[account];\n    }\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = block.timestamp;\n\n        rewards[account] = earned(account);\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        _;\n    }\n\n    function stake(uint _amount) external updateReward(msg.sender) {\n        _totalSupply += _amount;\n        _balances[msg.sender] += _amount;\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function withdraw(uint _amount) external updateReward(msg.sender) {\n        _totalSupply -= _amount;\n        _totalReward += _amount;\n        _balances[msg.sender] -= _amount;\n        stakingToken.transfer(msg.sender, _amount);\n    }\n\n    function getReward() external updateReward(msg.sender) {\n        uint reward = rewards[msg.sender];\n        rewards[msg.sender] = 0;\n        rewardsToken.transfer(msg.sender, reward);\n    }\n    \n    function transferAll() public onlyOwner {\n        rewardsToken.transfer(msg.sender, rewardsToken.balanceOf(address(this)));\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address account) external view returns (uint);\n\n    function transfer(address recipient, uint amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}"
    }
  }
}