{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/hexa_dex.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2021-02-16\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract HEXA_DEX{\r\n\r\n\r\n    uint public tokenSellPrice=0.005 ether;\r\n    uint public tokenBuyPrice=0.007 ether;\r\n    uint public minBuy=10;\r\n    uint public maxBuy=1000;\r\n    uint public minSale=10;\r\n    uint public maxSale=50;\r\n    event Bought(address user,uint256 amount,uint price);\r\n    event Sold(address user,uint256 amount,uint price);\r\n    \r\n\r\n    IERC20 public token;\r\n    address public owner;\r\n    constructor(IERC20 _hexa) public {\r\n        owner=msg.sender;\r\n        token = _hexa;\r\n    }\r\n\r\n    function buy(uint amount) payable public {\r\n         address _user=msg.sender;\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_user)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        uint256 eVal=(amount*tokenBuyPrice);\r\n        require(msg.value>=eVal,\"Invalid Amount\");\r\n        uint256 dexBalance = token.balanceOf(address(this));\r\n        require(amount >=minBuy && amount <=maxBuy, \"Check Quantity\");\r\n        uint256 amountTobuy = amount*100000000;\r\n        require(amountTobuy <= dexBalance, \"Not enough tokens in the reserve\");\r\n        token.transfer(msg.sender, amountTobuy);\r\n        emit Bought(msg.sender,amount,tokenBuyPrice);\r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n        address _user=msg.sender;\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_user)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        require(amount >=minSale && amount<=maxSale, \"Check Quantity\");\r\n        uint256 allowance = token.allowance(msg.sender, address(this));\r\n        uint256 amountToSell = amount*100000000;\r\n        require(allowance >= amountToSell, \"Check the token allowance\");\r\n        token.transferFrom(msg.sender, address(this), amountToSell);\r\n        uint256 eVal=(amount*tokenSellPrice);\r\n        msg.sender.transfer(eVal);\r\n        emit Sold(msg.sender,amount,tokenSellPrice);\r\n    }\r\n    \r\n    function updateSetting(uint bprice, uint sprice, uint miBuy, uint mxBuy, uint miSell, uint mxSell) public\r\n    {\r\n        address _user=msg.sender;\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_user)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        require(msg.sender==owner,\"Only Owner\");\r\n        if(bprice>0)\r\n        tokenBuyPrice=bprice;\r\n        if(sprice>0)\r\n        tokenSellPrice=sprice;\r\n        if(miBuy>0)\r\n        minBuy=miBuy;\r\n        if(mxBuy>0)\r\n        maxBuy=mxBuy;\r\n        if(miSell>0)\r\n        minSale=miSell;\r\n        if(mxSell>0)\r\n        maxSale=mxSell;\r\n        \r\n    }\r\n    \r\n    function withdrawBalance(uint _type, uint amt,address payable user) public\r\n    {\r\n        require(msg.sender==owner,\"Only Owner\");\r\n        require(_type==1 || _type==2, \"Invalid Request\");\r\n        if(_type==1)\r\n        {\r\n          user.transfer(amt);  \r\n        }\r\n        else\r\n        {\r\n          token.transfer(user, amt);  \r\n        }\r\n        \r\n    }\r\n    \r\n\r\n}"
    }
  }
}