{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ThankYouToken.sol": {
      "content": "pragma solidity 0.5.17;\r\n\r\ncontract ThankYouToken {\r\n    string public name     = \"Thank You Token\";\r\n    string public symbol   = \"TYT\";\r\n    uint8  public decimals = 18;\r\n    uint public totalSupply;\r\n\r\n    address public constant vault = address(0x83D0D842e6DB3B020f384a2af11bD14787BEC8E7);\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Donate(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    function() external payable {\r\n        donate();\r\n    }\r\n\r\n    function donate() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        totalSupply += msg.value;\r\n        (bool success,) = vault.call.value(msg.value)(\"\");\r\n        require(success);\r\n        emit Donate(msg.sender, msg.value);\r\n        emit Transfer(address(0), msg.sender, msg.value);\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}"
    }
  }
}