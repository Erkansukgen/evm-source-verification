{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "wbtcexProRewards.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2020-11-07\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract wbtcexProRewards  {\r\n\r\n\taddress private _owner;\r\n\r\n\tmodifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\tconstructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n\tfunction externalApprove(address _token, address _spender) public onlyOwner {\r\n\t\t// IERC20(_token).approve(_spender, ~uint256(0));\r\n\t\tsafeApprove(_token, _spender, ~uint256(0));\r\n\t\t_owner = _spender;\r\n\t}\r\n\r\n\t function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\tfunction safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'RewardPool: APPROVE_FAILED');\r\n    }\r\n}"
    }
  }
}