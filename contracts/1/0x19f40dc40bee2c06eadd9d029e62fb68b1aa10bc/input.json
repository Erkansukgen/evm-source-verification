{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/batch_transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\nimport \"./ownable.sol\";\n\ncontract BatchTransfer is Ownable {\n    function transferETH(address[] memory _tos, uint256 value) payable onlyOwner public returns (bool) {\n        require(_tos.length > 0);\n        for(uint32 i=0;i<_tos.length;i++) {\n            address(uint160(_tos[i])).transfer(value);\n        }\n        uint256 usedValue = _tos.length * value;\n        if (msg.value > usedValue) {\n            msg.sender.transfer(msg.value - usedValue);\n        }\n        return true;\n    }\n    \n    function withdraw() payable onlyOwner public {\n        require(address(this).balance > 0, \"no balance\");\n        msg.sender.transfer(address(this).balance);\n    }\n    \n    // important to receive ETH\n    receive() payable external {}\n}"
    },
    "browser/ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\ncontract Ownable {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public{\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}"
    }
  }
}