{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "VestingFactory.sol": {
      "content": "pragma solidity =0.5.16;\r\n\r\ncontract ReservoirLike {\r\n  function init(uint numTokens, address target) external;\r\n  function drip() external;  \r\n}\r\n\r\ncontract Proxy {\r\n    function() external payable {\r\n        assembly {\r\n            let _target := 0x9a2E280aAeB4dE82AAD34Df9c114f67A1699744c\r\n            calldatacopy(0x0, 0x0, calldatasize)\r\n            let result := delegatecall(gas, _target, 0x0, calldatasize, 0x0, 0)\r\n            returndatacopy(0x0, 0x0, returndatasize)\r\n            switch result case 0 {revert(0, 0)} default {return (0, returndatasize)}\r\n        }\r\n    }\r\n}\r\n\r\ncontract VestingFactory {\r\n  event Create(address proxy, uint numTokens, address target);\r\n\r\n  function create(uint numTokens, address target) public returns(address) {\r\n    Proxy proxy = new Proxy();\r\n    ReservoirLike(address(proxy)).init(numTokens, target);\r\n\r\n    emit Create(address(proxy), numTokens, target);\r\n\r\n    return address(proxy);\r\n  }\r\n\r\n  function drip(address proxy) public {\r\n    ReservoirLike(proxy).drip();\r\n  }\r\n}"
    }
  }
}