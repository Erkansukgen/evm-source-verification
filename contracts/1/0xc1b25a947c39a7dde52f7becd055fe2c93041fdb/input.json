{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "AccessPool.sol": {
      "content": "\r\n\r\n\r\n//address token 0xf8f0bA8CCACdD45dAD6f04cc775ac0FB069eF000\r\n// SPDX-License-Identifier: MIT\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nimport \"./IERC20.sol\";\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////Safe Math Library Smart Contract////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////Genisis_Shards Staking Contract Start////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\ncontract GS_AccessPool {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    address public owner ;\r\n\r\n\r\n    address public admin=0x0c3c52CeA1f315b1544d0dD72f46d8EbD2C2BAC9 ;        //change the admin acc        \r\n\r\n    IERC20 public GSContractAddress = IERC20(0xe0B9a2C3E9f40CF74B2C7F591B2b0CCa055c3112); //gs token contract bsc\r\n    \r\n    IERC20 public GSKContractAddress = IERC20(0x2ec76424f62CEb8403fc6729D0C807Dde71E3303);  //gsk token contract bsc\r\n\r\n\r\n    //original gs token address 0xe0b9a2c3e9f40cf74b2c7f591b2b0cca055c3112 on eth\r\n    \r\n\r\n    \r\n    uint256 public APR = 3805;                                    // Actual value\r\n    uint256 public APR_ACCURACY_RATIO = 1000000000000 ;\r\n\r\n    \r\n    bool stopContract = false ;\r\n      \r\n\r\n    uint256 public deployTime = now;\r\n  \r\n   \r\n    struct Stake{\r\n        address user;//address of the user\r\n        uint256 amount;//total amount currently the user has staked\r\n        uint256 since; // time at which the user has\r\n        uint256 claimed;  // already claimed by the user\r\n        uint256 claimable;// This claimable field is new and used to tell how big of a reward is currently available\r\n    }\r\n    \r\n    mapping(address=>Stake) private stakers;\r\n    \r\n    uint256 public totalGenisis_ShardsStaked ;           // Total Genisis_Shards Staked\r\n    \r\n    mapping(address => bool) public isStaking;\r\n     \r\n    //////////////////////////////////////////////////////////////////////////////EVENT DECLERATION//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n      event Staked(address indexed _from, uint256 _value);\r\n      \r\n      event ClaimedReward(address indexed _from, uint256 _value);\r\n\r\n      event UnStaked(address indexed _from, uint256 _value);\r\n      \r\n      \r\n      event ClaimAndWithdraw(address indexed _from, uint256 _value);\r\n\r\n      event OwnershipTransferred(address _owner,address newOwner);\r\n \r\n    \r\n     //////////////////////////////////////////////////////////////////////////////Constructor Function///////////////////////////////////////////////////////////////////////////////////////////////////\r\n     \r\n\r\n     \r\n      constructor() public {\r\n\r\n        owner  = msg.sender;\r\n\r\n    }\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////Modifier Definitations////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner , 'Only owner has right to execute this function');\r\n        _;\r\n        \r\n    }\r\n    \r\n    modifier currentlyStaked {\r\n        require (isStaking [msg.sender] == true , 'Only staked user has right to execute this function');\r\n        _;\r\n        \r\n    }\r\n\r\n    modifier poolStatus {\r\n        require (stopContract == false , 'Only when the pool is running user has right to execute this function');\r\n        _;\r\n        \r\n    }\r\n    \r\n    \r\n\r\n//////////////////////////////////////////////////////////////////////////////////////Staking Function//////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        \r\n    }\r\n\r\n     function stakeTokens(uint256 _amount) external poolStatus {\r\n       require(IERC20(GSContractAddress).transferFrom(msg.sender, address(this), _amount));\r\n       totalGenisis_ShardsStaked=totalGenisis_ShardsStaked.add(_amount);\r\n\r\n       if (isStaking[msg.sender] == false)\r\n       {\r\n           stakers[msg.sender]=Stake(msg.sender,_amount,now,stakers[msg.sender].claimed,0);\r\n           isStaking[msg.sender] = true;\r\n           \r\n       }\r\n       else\r\n       {\r\n           uint256 totalReward=_calculateReward(stakers[msg.sender]);\r\n           uint256 totalAmount=stakers[msg.sender].amount.add(_amount);\r\n           stakers[msg.sender]=Stake(msg.sender,totalAmount,now,stakers[msg.sender].claimed,totalReward);\r\n       }\r\n\r\n         emit Staked(msg.sender, _amount);\r\n    }\r\n    \r\n    \r\n    //////////////////////////////////////////////////////////////////////////////////////Reward Generation Function //////////////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    function _calculateReward(Stake memory _currentUser) internal view returns(uint256) {\r\n        \r\n        uint256 totalTime=now.sub(_currentUser.since);\r\n        uint256 reward=_currentUser.amount.mul(totalTime).mul(APR).div(APR_ACCURACY_RATIO);\r\n        uint256 totalReward=_currentUser.claimable.add(reward);\r\n        return totalReward;\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////Claim Rewards///////////////////////////////////////////////////////////////////////////////////////////////\r\n    function claimReward() external currentlyStaked poolStatus  {\r\n\r\n        uint256 reward=_calculateReward(stakers[msg.sender]);\r\n        stakers[msg.sender].since=now;\r\n        stakers[msg.sender].claimable=0;\r\n        stakers[msg.sender].claimed=stakers[msg.sender].claimed+reward;\r\n        require(IERC20(GSKContractAddress).transferFrom(admin, msg.sender, reward));\r\n        \r\n        emit ClaimedReward(msg.sender, reward);\r\n\r\n        \r\n    }\r\n\r\n\r\n      //////////////////////////////////////////////////Claim and Withdraw All  /////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n      function claimAndWithdrawAll() external currentlyStaked poolStatus {\r\n        \r\n      \r\n        // Fetch staking balance\r\n        uint256 balance = stakers[msg.sender].amount;\r\n        \r\n        // Fetch Reward balance\r\n        uint256 totalReward = _calculateReward(stakers[msg.sender]);\r\n\r\n        // Require amount greater than 0\r\n        require((balance+totalReward > 0 ) , \"staking balance cannot be 0 \");\r\n        \r\n        \r\n        totalGenisis_ShardsStaked=totalGenisis_ShardsStaked.sub(balance);\r\n         \r\n        stakers[msg.sender]=Stake(msg.sender,0,0,stakers[msg.sender].claimed+totalReward,0);\r\n\r\n        // Update staking status\r\n        isStaking[msg.sender] = false;\r\n        \r\n        if(totalReward==0)\r\n        {\r\n            require(IERC20(GSContractAddress).transfer(msg.sender,balance));\r\n        \r\n        }\r\n        else if(balance==0)\r\n        {\r\n            require(IERC20(GSKContractAddress).transferFrom(admin, msg.sender, totalReward));\r\n        \r\n        }\r\n        else\r\n        {\r\n            require(IERC20(GSContractAddress).transfer(msg.sender,balance));\r\n            require(IERC20(GSKContractAddress).transferFrom(admin, msg.sender, totalReward));\r\n        }\r\n                \r\n         emit ClaimAndWithdraw(msg.sender, totalReward);\r\n         \r\n    } \r\n    \r\n  \r\n      \r\n\r\n    \r\n     //////////////////////////////////////////////////////////////////////////////////////Unstaking the GS Tokens Function //////////////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    \r\n    // Unstaking Tokens (Withdraw)\r\n    function unstakeTokens(uint _amount) external currentlyStaked poolStatus {\r\n        \r\n        \r\n        \r\n        // Fetch staking balance\r\n        uint256 balance = stakers[msg.sender].amount;\r\n\r\n\r\n        require((balance>= _amount ) , \"unstaking balance cannot be more\");\r\n\r\n        \r\n           uint256 totalReward=_calculateReward(stakers[msg.sender]);\r\n           uint256 totalAmount=balance.sub(_amount);\r\n           stakers[msg.sender]=Stake(msg.sender,totalAmount,now,stakers[msg.sender].claimed,totalReward);\r\n\r\n           \r\n           totalGenisis_ShardsStaked=totalGenisis_ShardsStaked.sub(_amount);\r\n\r\n        require(IERC20(GSContractAddress).transfer(msg.sender,_amount));\r\n \r\n         emit UnStaked(msg.sender, _amount);\r\n    } \r\n    \r\n    \r\n    \r\n    \r\n    ///////////////////////////////////////////////////////////////////staking Information functions/////////////////////////////////////////////////////////////////////////////////////////////////\r\n     function stakeInfo_totalAmount() external view returns(uint256){\r\n       \r\n        require(msg.sender!=address(0) , \"Invalid Address\");\r\n               \r\n         Stake memory currentUser=stakers[msg.sender];\r\n       \r\n       uint256 totalAmount=stakers[msg.sender].amount.add(_calculateReward(currentUser));\r\n        return totalAmount;\r\n    \r\n         \r\n\r\n    }\r\n    \r\n     function stakeInfo_totalBalance() external view returns(uint256){\r\n         \r\n        require(msg.sender!=address(0) , \"Invalid Address\");\r\n        return stakers[msg.sender].amount;\r\n        \r\n    }\r\n    \r\n    function stakeInfo_totalClaimed() external view returns(uint256){\r\n         \r\n        require(msg.sender!=address(0) , \"Invalid Address\");\r\n        return stakers[msg.sender].claimed;\r\n        \r\n    }\r\n    \r\n    \r\n    function stakeInfo_totalReward() external view returns(uint256){\r\n       \r\n      require(msg.sender!=address(0) , \"Invalid Address\");\r\n          \r\n      Stake memory currentUser=stakers[msg.sender];\r\n      uint256 totalReward=_calculateReward(currentUser);\r\n      return totalReward;\r\n       \r\n         \r\n\r\n    }\r\n      \r\n\r\n   \r\n       ///////////////////////////////////////////////////////////////////Implement Circuit Breaker Start///////////////////////////////////////////////////////////////////////////////////////////////// \r\n    \r\n\r\n    function stopPoolContractInEmergencySituation() external onlyOwner {\r\n        \r\n        require(stopContract == false , 'Contract has been already stoped in Emergency Situation') ;\r\n        \r\n        stopContract = true ;\r\n        \r\n    }\r\n    \r\n    \r\n \r\n\r\n    function startPoolContractAfterEmergencySituationEnds() external onlyOwner {\r\n        \r\n        require(stopContract == true , 'Contract is already running ') ;\r\n        \r\n        stopContract = false ;\r\n        \r\n    }\r\n    \r\n\r\n  \r\n}"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    }
  }
}