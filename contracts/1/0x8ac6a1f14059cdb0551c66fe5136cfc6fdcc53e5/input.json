{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Context.sol":{"content":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"browser/DataStorage.sol":{"content":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\nimport \"./ExternalAccessible.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract DataStorage is ExternalAccessible {\r\n    using SafeMath for *;\r\n    uint256 public _totalSupply;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) public _allowed;\r\n    \r\n    constructor(address m) {\r\n        masterContract = m;\r\n        // 200k - 50k giveaway, 150k staking bonus\r\n        _balances[address(0x7FB4eCD5b8E234fA5863bFa2799EA25D8819F42d)] = 200000.mul(10.pow(18));\r\n        _totalSupply = 200000.mul(10.pow(18));\r\n    }\r\n    \r\n     function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function updateSupply(uint256 val) external hasAccess {\r\n        _totalSupply = val;\r\n    }\r\n    \r\n    function updateBalance(address user, uint256 balances) external hasAccess {\r\n        _balances[user] = balances;\r\n    }\r\n    \r\n    function updateAllowed(address _from, address to, uint256 allowed) external hasAccess {\r\n        _allowed[_from][to] = allowed;\r\n    }\r\n}\r\n"},"browser/ExternalAccessible.sol":{"content":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\ncontract HasMaster {\r\n    address public masterContract;\r\n    \r\n    function newMaster(address addy) external view returns (bool) {\r\n        require(msg.sender == masterContract);\r\n        masterContract == addy;\r\n        assert(addy == masterContract);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ExternalAccessible is HasMaster {\r\n\r\n    function checkAccess() public returns (bool) {\r\n        bytes memory payload = abi.encodeWithSignature(\"checkAccessAddy(address)\", msg.sender);\r\n        (bool success, bytes memory returnData) = masterContract.call(payload);\r\n        bool data = abi.decode(returnData, (bool));\r\n        require(data);\r\n        return true;\r\n    }\r\n\r\n//    function checkAccess() public view returns (bool) {\r\n//        bytes memory payload = abi.encodeWithSignature(\"checkAccessAddy\", msg.sender);\r\n//        (bool success, bytes memory returnData) = masterContract.call(payload);\r\n//        require(success);\r\n//        return true;\r\n//    }\r\n\r\n    modifier hasAccess() {\r\n        require(checkAccess());\r\n        _;\r\n    }\r\n}"},"browser/Ownable.sol":{"content":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address public contractCreator;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        contractCreator = msg.sender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, contractCreator);\r\n        _owner = contractCreator;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"browser/SafeMath.sol":{"content":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\n/** Taken from the OpenZeppelin github\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n       \r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n    \r\n    function pow(uint256 base, uint256 exponent) internal pure returns (uint256) {\r\n    if (exponent == 0) {\r\n        return 1;\r\n    }\r\n    else if (exponent == 1) {\r\n        return base;\r\n    }\r\n    else if (base == 0 && exponent != 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        uint256 z = base;\r\n        for (uint256 i = 1; i < exponent; i++)\r\n            z = mul(z, base);\r\n        return z;\r\n    }\r\n}\r\n}"},"browser/wXEQ.sol":{"content":"pragma solidity >=0.4.22 <0.8.0;\r\nimport \"https://github.com/smartcontractkit/chainlink/blob/develop/evm-contracts/src/v0.7/interfaces/AggregatorInterface.sol\";\r\nimport \"./DataStorage.sol\";\r\nimport \"./ExternalAccessible.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract wXEQ is ExternalAccessible {\r\n\r\n    using SafeMath for *;\r\n\r\n    struct mintXEQStruct {\r\n        address addr;\r\n        uint amount;\r\n        string xeqAddress;\r\n    }\r\n\r\n    struct TxStorage {\r\n        string hash;\r\n        uint amountMinted;\r\n    }\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n    address public contractCreator;\r\n    uint8 public _decimals;\r\n    DataStorage dataStorage;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) _allowed;\r\n    mapping(address => bool) haveSynced;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor (address d, address _masterContract) {\r\n        dataStorage = DataStorage(d);\r\n        _decimals = 18;\r\n        _name = \"Wrapped Equilibria\";\r\n        _symbol = \"wXEQ\";\r\n        contractCreator = msg.sender;\r\n        masterContract = _masterContract;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return dataStorage.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return dataStorage.balanceOf(_owner);\r\n    }\r\n    \r\n    function allowanceOf(address _owner, address _spender) public view returns (uint256) {\r\n        return dataStorage.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= dataStorage.balanceOf(msg.sender));\r\n        require(to != address(0));\r\n        uint256 bal = dataStorage.balanceOf(msg.sender);\r\n        dataStorage.updateBalance(msg.sender, bal.sub(value));\r\n        assert(dataStorage.balanceOf(msg.sender).add(value) == bal);\r\n        bal = dataStorage.balanceOf(to);\r\n        dataStorage.updateBalance(to, bal.add(value));\r\n        assert(dataStorage.balanceOf(to).sub(value) == bal);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        require(dataStorage.balanceOf(msg.sender) >= value);\r\n        dataStorage.updateAllowed(msg.sender, spender, value);\r\n        assert(allowanceOf(msg.sender, spender) == value);\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner,address spender) public view returns (uint256) {\r\n        return dataStorage.allowance(owner, spender);\r\n    }\r\n\r\n    function decreaseAllowance(address spender,uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        uint256 allow = dataStorage.allowance(msg.sender, spender);\r\n        dataStorage.updateAllowed(msg.sender, spender, allow.sub(subtractedValue));\r\n        assert(allow.sub(subtractedValue) == dataStorage.allowance(msg.sender, spender));\r\n        emit Approval(msg.sender, spender, dataStorage.allowance(msg.sender, spender));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from,address to,uint256 value) public returns (bool){\r\n        require(to != address(0));\r\n        require(value <= dataStorage.balanceOf(_from));\r\n        require(value <= dataStorage.allowance(_from, msg.sender));\r\n\r\n        dataStorage.updateBalance(_from, dataStorage.balanceOf(_from).sub(value));\r\n        dataStorage.updateBalance(to, dataStorage.balanceOf(to).add(value));\r\n        dataStorage.updateAllowed(_from, msg.sender, dataStorage.allowance(_from, msg.sender).sub(value));\r\n        emit Transfer(_from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender,uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        uint256 allow = dataStorage.allowance(msg.sender, spender);\r\n        require(allow.add(addedValue) <= dataStorage.balanceOf(msg.sender));\r\n        dataStorage.updateAllowed(msg.sender, spender, allow.add(addedValue));\r\n        assert(allow.add(addedValue) == dataStorage.allowance(msg.sender, spender));\r\n        emit Approval(msg.sender, spender, dataStorage.allowance(msg.sender, spender));\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) public hasAccess {\r\n        require(amount <= dataStorage.balanceOf(account));\r\n        uint256 supply = dataStorage.totalSupply();\r\n        dataStorage.updateSupply(supply.sub(amount));\r\n        assert(supply == dataStorage.totalSupply().add(amount));\r\n        uint256 bal = dataStorage.balanceOf(account);\r\n        dataStorage.updateBalance(account, bal.sub(amount));\r\n        assert(bal == dataStorage.balanceOf(account).add(amount));\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) public {\r\n        require(amount <= dataStorage.allowance(account, msg.sender));\r\n        uint256 allow = dataStorage.allowance(account, msg.sender);\r\n        dataStorage.updateAllowed(account, msg.sender, allow.sub(amount));\r\n        assert(allow.sub(amount) == dataStorage.allowance(account, msg.sender));\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public hasAccess {\r\n        uint256 supp = dataStorage.totalSupply();\r\n        dataStorage.updateSupply(supp.add(amount));\r\n        assert(dataStorage.totalSupply().sub(amount) == supp);\r\n        uint256 bal = dataStorage.balanceOf(account);\r\n        dataStorage.updateBalance(account, bal.add(amount));\r\n        assert(dataStorage.balanceOf(account).sub(amount) == bal);\r\n        emit Transfer(msg.sender, account, amount);\r\n    }\r\n\r\n}"},"browser/wXEQSwaps.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.8.0;\r\n\r\nimport \"./ExternalAccessible.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./wXEQ.sol\";\r\n\r\ncontract XEQSwaps is ExternalAccessible, Ownable {\r\n    using SafeMath for *;\r\n    \r\n    wXEQ wXEQContract;\r\n    DataStorage dataStorage;\r\n\r\n    uint256 public wXEQMinted;\r\n    uint256 public wXEQBurned;\r\n    uint256 public teamFees;\r\n\r\n    uint256 teamAmount;\r\n    uint256 burntAmount;\r\n    uint256 devFeePercent;\r\n\r\n    //txHash -> eth address of tx mint\r\n    \r\n    mapping(string => bool) xeq_complete;\r\n    mapping(string => uint256) xeq_amounts;\r\n    mapping(string => address) eth_addresses;\r\n\r\n    \r\n    constructor(address w, address d, address _master) {\r\n        wXEQContract = wXEQ(w);\r\n        dataStorage = DataStorage(d);\r\n        masterContract = _master;\r\n        wXEQMinted = 0;\r\n        transferOwnership(msg.sender);\r\n        teamAmount = 4000;\r\n        burntAmount = 6000;\r\n        devFeePercent = 100;\r\n        \r\n    }\r\n    \r\n    event NewMint(address indexed account, uint256 amount, uint256 devFee, uint256 amountBurnt);\r\n    \r\n    function devFee(uint256 _value, uint256 devFeeVal1) public pure returns (uint256) {\r\n        return ((_value.mul(devFeeVal1)).div(10000));\r\n    }\r\n    \r\n    function claim_wxeq(string memory tx_hash) public returns (bool) {\r\n        require(xeq_amounts[tx_hash] != 0);\r\n        require(eth_addresses[tx_hash] != address(0));\r\n        require(!xeq_complete[tx_hash]);\r\n        xeq_complete[tx_hash] = true;\r\n        uint256 fee = devFee(xeq_amounts[tx_hash], devFeePercent);\r\n        uint256 teamFee = devFee(fee, teamAmount);\r\n        uint256 burnt = devFee(fee, burntAmount);\r\n        wXEQContract.mint(msg.sender, xeq_amounts[tx_hash]);\r\n        wXEQContract.mint(owner(), teamFee);\r\n        wXEQBurned = wXEQBurned.add(burnt);\r\n        wXEQMinted = wXEQMinted.add(xeq_amounts[tx_hash]);\r\n        teamFees = teamFees.add(teamFee);\r\n        emit NewMint(msg.sender, xeq_amounts[tx_hash], teamFee, burnt);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function register_transaction(address account, string memory tx_hash, uint256 amount) public onlyOwner returns (bool) {\r\n        require(!xeq_complete[tx_hash]);\r\n        require(xeq_amounts[tx_hash] == 0);\r\n        require(eth_addresses[tx_hash] == address(0));\r\n        \r\n        eth_addresses[tx_hash] = account;\r\n        xeq_amounts[tx_hash] = amount;\r\n        return true;\r\n    }\r\n    \r\n    function isSwapRegistered(string memory tx_hash) public view returns (bool) {\r\n        if(xeq_amounts[tx_hash] == 0) \r\n        {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function testDevFeeVals(uint256 _value, uint256 val1, uint256 val2) public pure returns (uint256) {\r\n        return (_value.mul(val1)).div(val2);\r\n    }\r\n    \r\n    function setDevFee(uint256 val) public onlyOwner returns (bool) {\r\n        devFeePercent = val;\r\n        assert(devFeePercent == val);\r\n        return true;\r\n    }\r\n\r\n     function setBurntAmount(uint256 val) public onlyOwner returns (bool) {\r\n        burntAmount = val;\r\n        assert(burntAmount == val);\r\n        return true;\r\n    }\r\n\r\n    function setTeamAmount(uint256 val) public onlyOwner returns (bool) {\r\n        teamAmount = val;\r\n        assert(teamAmount == val);\r\n        return true;\r\n    }\r\n\r\n    function devFee(uint _value) public view returns (uint256) {\r\n        return ((_value.mul(devFeePercent)).div(10000));\r\n    }\r\n}"},"https://github.com/smartcontractkit/chainlink/blob/develop/evm-contracts/src/v0.7/interfaces/AggregatorInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"}}}