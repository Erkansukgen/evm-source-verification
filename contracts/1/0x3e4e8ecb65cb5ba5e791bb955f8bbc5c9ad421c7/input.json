{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/ERC165/IERC165.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}"
    },
    "contracts/IERC20.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    /**\r\n     * TODO: Add comment\r\n     */\r\n    function burn(uint256 burnQuantity) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    },
    "contracts/IERC721.sol": {
      "content": "import \"./ERC165/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}"
    },
    "contracts/IERC721Enumerable.sol": {
      "content": "import \"./IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}"
    },
    "contracts/ISPT.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface ISPT is IERC20 {\r\n    \r\n    function totalBurned() external view returns (uint256);\r\n    function totalFromSpirits() external view returns (uint256);\r\n    function totalFromAddons() external view returns (uint256);\r\n    function totalAccumulatedSupply() external view returns (uint256);\r\n    \r\n    function accumulated(uint256 tokenIndex) external view returns (uint256);\r\n    function totalAccumulated(uint256 tokenIndex, bool useRewardMultiplier) external view returns (uint256);\r\n    function totalClaimed(uint256 tokenIndex) external view returns (uint256);\r\n    \r\n    function accumulatedNode(uint256 nodeId) external view returns (uint256);\r\n    function totalAccumulatedNode(uint256 nodeId) external view returns (uint256);\r\n    function lastClaimNode(uint256 nodeId) external view returns (uint256);\r\n    function timeSinceLastClaimNode(uint256 nodeId) external view returns (uint256);\r\n    function nodeEmissionMultiplier(uint256 nodeType) external view returns (uint256);\r\n    function nodeEmissionRate(uint256 regTime) external view returns (uint256);\r\n    function totalClaimedNode(uint256 nodeId) external view returns (uint256);\r\n    function nodeEmissionEnds() external pure returns (uint256);\r\n    function canClaimFromNode(uint256 nodeId) external view returns (bool);\r\n    \r\n    function totalAccumulatedDevFund() external view returns (uint256);\r\n    function totalClaimableDevFund() external view returns (uint256);\r\n    function totalClaimedDevFund() external view returns (uint256);\r\n}"
    },
    "contracts/ISpirits.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\nimport \"./IERC721Enumerable.sol\";\r\n\r\ninterface ISpirits is IERC721Enumerable {\r\n    \r\n    function revealStageByIndex(uint256 index) external view returns (uint256);\r\n    function mintedTimestampByIndex(uint256 index) external view returns (uint256);\r\n    \r\n    function nodeInfo(uint256 nodeId) external view returns (address, string memory, uint256, uint256, uint256, bool, uint256[] memory);\r\n    function nodeBalanceOf(address owner) external view returns (uint256);\r\n    function ownerOfNode(uint256 nodeId) external view returns (address);\r\n    function nodeOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n    function totalNodes() external view returns (uint256);\r\n    function totalActiveNodes() external view returns (uint256);\r\n    function nodeType(uint256 nodeId) external view returns (uint256);\r\n    function nodeSize(uint256 nodeId) external view returns (uint256);\r\n    function nodeValid(uint256 nodeId) external view returns (bool);\r\n    function nodeRegTime(uint256 nodeId) external view returns (uint256);\r\n    function nodeUnregTime(uint256 nodeId) external view returns (uint256);\r\n    function nodeName(uint256 nodeId) external view returns (string memory);\r\n    function nodeActive(uint256 nodeId) external view returns (bool);\r\n    function nodeTokenIds(uint256 nodeId) external view returns (uint256[] memory);\r\n    function isNodeNameReserved(string memory nameString) external view returns (bool);\r\n    function nodeIdFromTokenId(uint256 tokenId) external view returns (uint256);\r\n    function nodeExists(uint256 nodeId) external view returns (bool);\r\n    function isUserNameReserved(string memory nameString) external view returns (bool);\r\n    function username(address owner) external view returns (string memory);\r\n    function tokenRewardMultiplier(uint256 tokenId) external view returns (uint256, uint256);\r\n    function testTokenRewardMultiplier(uint256 newNum, uint256 newDen) external pure returns (uint256);\r\n}"
    },
    "contracts/SPT.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\nimport \"./ERC165/IERC165.sol\";\r\nimport \"./utils/SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./ISPT.sol\";\r\nimport \"./ISpirits.sol\";\r\nimport \"./utils/Context.sol\";\r\nimport \"./utils/Ownable.sol\";\r\n\r\n/**\r\n *\r\n * SPT Contract (The native token of CryptoSpirits)\r\n * @dev Extends standard ERC20 contract\r\n */\r\ncontract SPT is Context, Ownable, ISPT {\r\n    using SafeMath for uint256;\r\n\r\n    // Constants\r\n    uint256 public constant SECONDS_IN_A_DAY = 86400;\r\n    uint256 public constant SECONDS_IN_2_WEEKS = SECONDS_IN_A_DAY * 14;\r\n    uint256 public constant SECONDS_IN_A_YEAR = SECONDS_IN_A_DAY * 365;\r\n    \r\n    uint256 public constant INITIAL_ALLOTMENT = 100 * (10 ** 18);\r\n\r\n    // Public variables\r\n    uint256 public constant EMISSION_START = 1625245200; // Friday, July 2, 2021 6:00:00 PM BST\r\n    uint256 public constant EMISSION_END = EMISSION_START + (SECONDS_IN_A_YEAR * 3); // 3 years\r\n    uint256 public constant EMISSION_END_NODE = EMISSION_START + (SECONDS_IN_A_YEAR * 6); // 6 years\r\n    \r\n    // emission rate decreases with a reduction of 50% per year\r\n    uint256 public constant EMISSION_PER_DAY_YEAR_0 = 1.00 * (10 ** 18);\r\n    uint256 public constant EMISSION_PER_DAY_YEAR_1 = 0.50 * (10 ** 18);\r\n    uint256 public constant EMISSION_PER_DAY_YEAR_2 = 0.25 * (10 ** 18);\r\n    \r\n    uint256[3] public EMISSION_PER_DAY_YEARS = [EMISSION_PER_DAY_YEAR_0, \r\n                                                EMISSION_PER_DAY_YEAR_1, \r\n                                                EMISSION_PER_DAY_YEAR_2];\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    mapping(uint256 => uint256) private _lastClaim;\r\n    mapping(uint256 => uint256) private _claimedAmount;\r\n    \r\n    mapping(uint256 => uint256) private _lastClaimNode;\r\n    mapping(uint256 => uint256) private _claimedAmountNode;\r\n    \r\n    // node multipliers\r\n    uint256 public nodeEmissionMultiplierType1 = 1;\r\n    uint256 public nodeEmissionMultiplierType2 = 5;\r\n    uint256 public nodeEmissionMultiplierType3 = 3;\r\n    uint256 public nodeEmissionMultiplierType4 = 12;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalBurned;\r\n    \r\n    uint256 private _totalFromSpirits = 0;\r\n    uint256 private _totalFromAddons = 0;\r\n    \r\n    uint256 private _claimedAmountDevFund = 0;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    address private _spiritsAddress;\r\n    address private _addonsAddress;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor () {\r\n        _name = \"SpiritToken\";\r\n        _symbol = \"SPT\";\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    /**\r\n     *  total number of tokens sent to the burn address\r\n     */\r\n    function totalBurned() public view override returns (uint256) {\r\n        return _totalBurned;\r\n    }\r\n    \r\n    /**\r\n     *  total number of tokens sent to the SPT address via the Spirits contract (name change utility etc)\r\n     */\r\n    function totalFromSpirits() public view override returns (uint256) {\r\n        return _totalFromSpirits;\r\n    }\r\n    \r\n    /**\r\n     *  total number of tokens sent to the SPT address via the Addons contract (extra utility etc)\r\n     */\r\n    function totalFromAddons() public view override returns (uint256) {\r\n        return _totalFromAddons;\r\n    }\r\n    \r\n    /**\r\n     * @dev When accumulated SPTs have last been claimed for a CryptoSpirits index\r\n     */\r\n    function lastClaim(uint256 tokenIndex) public view returns (uint256) {\r\n        require(ISpirits(_spiritsAddress).ownerOf(tokenIndex) != address(0), \"Owner cannot be 0 address\");\r\n        require(tokenIndex < ISpirits(_spiritsAddress).totalSupply(), \"NFT at index has not been minted yet\");\r\n\r\n        uint256 lastClaimed = uint256(_lastClaim[tokenIndex]) != 0 ? uint256(_lastClaim[tokenIndex]) : EMISSION_START;\r\n        return lastClaimed;\r\n    }\r\n    \r\n    /**\r\n     * @dev Total accumulated SPT tokens for all existing CryptoSpirits NFTs - ignores reward multipliers\r\n     */\r\n    function totalAccumulatedSupply() public view override returns (uint256) {\r\n        require(block.timestamp > EMISSION_START, \"Emission has not started yet\");\r\n        require(ISpirits(_spiritsAddress).ownerOf(0) != address(0), \"Owner of NFT #0 cannot be 0 address\");\r\n        uint256 nftSupply = ISpirits(_spiritsAddress).totalSupply();\r\n        require(nftSupply > 0, \"No NFTs have been minted yet\");\r\n        return nftSupply.mul(totalAccumulated(0, false));\r\n    }\r\n    \r\n    /**\r\n     * @dev Accumulated SPT tokens for a CryptoSpirits token index.\r\n     */\r\n    function accumulated(uint256 tokenIndex) public view override returns (uint256) {\r\n        require(block.timestamp > EMISSION_START, \"Emission has not started yet\");\r\n        require(ISpirits(_spiritsAddress).ownerOf(tokenIndex) != address(0), \"Owner cannot be 0 address\");\r\n        require(tokenIndex < ISpirits(_spiritsAddress).totalSupply(), \"NFT at index has not been minted yet\");\r\n\r\n        uint256 lastClaimed = lastClaim(tokenIndex);\r\n\r\n        // sanity check if last claim was on or after emission end\r\n        if (lastClaimed >= EMISSION_END) return 0;\r\n\r\n        uint256 accumulatedQty = totalAccumulated(tokenIndex, true).sub(totalClaimed(tokenIndex));\r\n        return accumulatedQty;\r\n    }\r\n    \r\n    /**\r\n     * @dev Lifetime Accumulated SPT tokens for a CryptoSpirits token index.\r\n     */\r\n    function totalAccumulated(uint256 tokenIndex, bool useRewardMultiplier) public view override returns (uint256) {\r\n        require(block.timestamp > EMISSION_START, \"Emission has not started yet\");\r\n        require(ISpirits(_spiritsAddress).ownerOf(tokenIndex) != address(0), \"Owner cannot be 0 address\");\r\n        require(tokenIndex < ISpirits(_spiritsAddress).totalSupply(), \"NFT at index has not been minted yet\");\r\n        \r\n        uint256 nowTime = block.timestamp < EMISSION_END ? block.timestamp : EMISSION_END;\r\n        uint256 elapsedTime = nowTime.sub(EMISSION_START);\r\n        uint256 yearsElapsed = elapsedTime.div(SECONDS_IN_A_YEAR);\r\n        uint256 totalAmountAccumulated = 0;\r\n        uint256 timeAccountedFor = 0;\r\n        \r\n        // amount accumulated in each year\r\n        for(uint year = 0; year < yearsElapsed; year++) {\r\n            uint256 emissionPerDayForYear = EMISSION_PER_DAY_YEARS[year];\r\n            uint256 yearAccumulated = emissionPerDayForYear.mul(365);\r\n            totalAmountAccumulated = totalAmountAccumulated.add(yearAccumulated);\r\n            timeAccountedFor = timeAccountedFor.add(SECONDS_IN_A_YEAR);\r\n        }\r\n        // amount accumulated since last full year\r\n        if(elapsedTime > timeAccountedFor && yearsElapsed < 3) {\r\n            uint256 remainingTime = elapsedTime.sub(timeAccountedFor);\r\n            uint256 currentEmissionRate = EMISSION_PER_DAY_YEARS[yearsElapsed];\r\n            uint256 remainingAccumulated = remainingTime.mul(currentEmissionRate).div(SECONDS_IN_A_DAY);\r\n            totalAmountAccumulated = totalAmountAccumulated.add(remainingAccumulated);\r\n        }\r\n        if(useRewardMultiplier) {\r\n            // reward multiplier\r\n            uint256 rewardNum;\r\n            uint256 rewardDen;\r\n            (rewardNum, rewardDen) = ISpirits(_spiritsAddress).tokenRewardMultiplier(tokenIndex);\r\n            totalAmountAccumulated = (totalAmountAccumulated.mul(rewardNum)).div(rewardDen);\r\n        }\r\n        // add initial allotment\r\n        totalAmountAccumulated = totalAmountAccumulated.add(INITIAL_ALLOTMENT);\r\n        \r\n        return totalAmountAccumulated;\r\n    }\r\n    \r\n    /**\r\n     * @dev Lifetime SPT tokens claimed from a token index CryptoSpirits NFT\r\n     */\r\n    function totalClaimed(uint256 tokenIndex) public view override returns (uint256) {\r\n        require(ISpirits(_spiritsAddress).ownerOf(tokenIndex) != address(0), \"Owner cannot be 0 address\");\r\n        require(tokenIndex < ISpirits(_spiritsAddress).totalSupply(), \"NFT at index has not been minted yet\");\r\n        \r\n        uint256 claimed = uint256(_claimedAmount[tokenIndex]) >= 0 ? uint256(_claimedAmount[tokenIndex]) : 0;\r\n        return claimed;\r\n    }\r\n\r\n    /**\r\n     * @dev Set right after deployment and verified\r\n     */\r\n    function setSpiritsAddress(address spiritsAddress) onlyOwner public {\r\n        require(_spiritsAddress == address(0), \"Already set\");\r\n        _spiritsAddress = spiritsAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev To be set at a later date when the platform is developed\r\n     */\r\n    function setAddonsAddress(address addonsAddress) onlyOwner public {\r\n        _addonsAddress = addonsAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Claim mints SPTs and supports multiple CryptoSpirits token indices at once.\r\n     */\r\n    function claim(uint256[] memory tokenIndices) public returns (uint256) {\r\n        require(block.timestamp > EMISSION_START, \"Emission has not started yet\");\r\n\r\n        uint256 totalClaimQty = 0;\r\n        for (uint i = 0; i < tokenIndices.length; i++) {\r\n            // Sanity check for non-minted index\r\n            require(tokenIndices[i] < ISpirits(_spiritsAddress).totalSupply(), \"NFT at index has not been minted yet\");\r\n            // Duplicate token index check\r\n            for (uint j = i + 1; j < tokenIndices.length; j++) {\r\n                require(tokenIndices[i] != tokenIndices[j], \"Duplicate token index\");\r\n            }\r\n\r\n            uint tokenIndex = tokenIndices[i];\r\n            require(ISpirits(_spiritsAddress).ownerOf(tokenIndex) == msg.sender, \"Sender is not the owner\");\r\n\r\n            uint256 claimQty = accumulated(tokenIndex);\r\n            if (claimQty != 0) {\r\n                _lastClaim[tokenIndex] = block.timestamp;\r\n                uint256 alreadyClaimed = _claimedAmount[tokenIndex];\r\n                _claimedAmount[tokenIndex] = alreadyClaimed.add(claimQty);\r\n                totalClaimQty = totalClaimQty.add(claimQty);\r\n            }\r\n        }\r\n\r\n        require(totalClaimQty != 0, \"No accumulated SPT\");\r\n        _mint(msg.sender, totalClaimQty); \r\n        return totalClaimQty;\r\n    }\r\n    \r\n    /* Dev Fund */\r\n    /* Claim mints SPTs allocated to the dev fund (5% of the amount generated by all minted Spirits) (callable by Owner only */\r\n    function claimDev() onlyOwner public returns (uint256) {\r\n        require(block.timestamp > EMISSION_START, \"Emission has not started yet\");\r\n\r\n        uint256 claimQty = totalClaimableDevFund();\r\n        require(claimQty != 0, \"No accumulated SPT\");\r\n        _claimedAmountDevFund = _claimedAmountDevFund.add(claimQty);\r\n        _mint(msg.sender, claimQty); \r\n        return claimQty;\r\n    }\r\n    function totalAccumulatedDevFund() public view override returns (uint256) {\r\n        // dev fund is 5% of the total accumulated by the minted Spirits\r\n        return totalAccumulatedSupply().div(20);\r\n    }\r\n    \r\n    function totalClaimableDevFund() public view override returns (uint256) {\r\n        return totalAccumulatedDevFund().sub(totalClaimedDevFund());\r\n    }\r\n    \r\n    function totalClaimedDevFund() public view override returns (uint256) {\r\n        return _claimedAmountDevFund;\r\n    }\r\n    \r\n    /* Nodes */\r\n    \r\n    /**\r\n     * @dev canClaimFromNode - the owner can make a claim from this node\r\n     */\r\n    function canClaimFromNode(uint256 nodeId) public view override returns (bool) {\r\n        if(ISpirits(_spiritsAddress).nodeActive(nodeId) && ISpirits(_spiritsAddress).nodeValid(nodeId) && timeSinceLastClaimNode(nodeId) >= SECONDS_IN_2_WEEKS) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * @dev claimNode mints SPTs earned from nodes\r\n     */\r\n    function claimNode(uint256 nodeId) public returns (uint256) {\r\n        require(block.timestamp > EMISSION_START, \"Emission has not started yet\");\r\n        require(ISpirits(_spiritsAddress).nodeActive(nodeId), \"Node does not exist or has been unregistered\");\r\n        require(ISpirits(_spiritsAddress).nodeValid(nodeId), \"Node is not valid (pending approval by admin)\");\r\n        require(ISpirits(_spiritsAddress).ownerOfNode(nodeId) == msg.sender, \"Sender is not the node owner\");\r\n        \r\n        require(timeSinceLastClaimNode(nodeId) >= SECONDS_IN_2_WEEKS, \"Must wait 14 days between claims\");\r\n\r\n        uint256 claimQty = accumulatedNode(nodeId);\r\n\r\n        require(claimQty != 0, \"No accumulated SPT\");\r\n        _lastClaimNode[nodeId] = block.timestamp;\r\n        uint256 alreadyClaimed = _claimedAmountNode[nodeId];\r\n        _claimedAmountNode[nodeId] = alreadyClaimed.add(claimQty);\r\n        _mint(msg.sender, claimQty); \r\n        return claimQty;\r\n    }\r\n    \r\n    /**\r\n     * @dev Accumulated SPT tokens for a Spirit node.\r\n     */\r\n    function accumulatedNode(uint256 nodeId) public view override returns (uint256) {\r\n        require(ISpirits(_spiritsAddress).nodeExists(nodeId), \"Node with specified id does not exist\");\r\n        uint256 regTime = ISpirits(_spiritsAddress).nodeRegTime(nodeId);\r\n        require(regTime > 0 && block.timestamp > regTime, \"Emission has not started yet\");\r\n\r\n        uint256 lastClaimed = lastClaimNode(nodeId);\r\n\r\n        // sanity check if last claim was on or after emission end\r\n        if (lastClaimed >= EMISSION_END_NODE) return 0;\r\n\r\n        uint256 accumulatedQty = totalAccumulatedNode(nodeId).sub(totalClaimedNode(nodeId));\r\n        return accumulatedQty;\r\n    }\r\n    \r\n    /**\r\n     * @dev lifetime Accumulated SPT tokens for a node.\r\n     */\r\n    function totalAccumulatedNode(uint256 nodeId) public view override returns (uint256) {\r\n        require(ISpirits(_spiritsAddress).nodeExists(nodeId), \"Node with specified id does not exist\");\r\n        uint256 regTime = ISpirits(_spiritsAddress).nodeRegTime(nodeId);\r\n        uint256 unregTime = ISpirits(_spiritsAddress).nodeUnregTime(nodeId);\r\n        uint256 nodeType = ISpirits(_spiritsAddress).nodeType(nodeId);\r\n        require(regTime > 0 && block.timestamp > regTime, \"Emission has not started yet\");\r\n        \r\n        // node is still registered then current time, else unreg time\r\n        uint256 nowTime = block.timestamp;\r\n        if(unregTime > 0) {\r\n            nowTime = unregTime;\r\n        }\r\n        // cap at node emission end time\r\n        if(nowTime > EMISSION_END_NODE) {\r\n            nowTime = EMISSION_END_NODE;\r\n        }\r\n        \r\n        // node registered after node emission end\r\n        if(nowTime <= regTime) {\r\n            return 0;\r\n        }\r\n        \r\n        // time active\r\n        uint256 elapsedTime = nowTime.sub(regTime);\r\n        \r\n        // emission rate for node\r\n        uint256 emissionRatePerDay = nodeEmissionRate(regTime).mul(nodeEmissionMultiplier(nodeType));\r\n        \r\n        uint256 totalAmountAccumulated = elapsedTime.mul(emissionRatePerDay).div(SECONDS_IN_A_DAY);\r\n        return totalAmountAccumulated;\r\n    }\r\n    \r\n    /**\r\n     * @dev When accumulated SPTs have last been claimed for a node\r\n     */\r\n    function lastClaimNode(uint256 nodeId) public view override returns (uint256) {\r\n        require(ISpirits(_spiritsAddress).nodeExists(nodeId), \"Node with specified id does not exist\");\r\n        uint256 regTime = ISpirits(_spiritsAddress).nodeRegTime(nodeId);\r\n        uint256 lastClaimed = uint256(_lastClaimNode[nodeId]) != 0 ? uint256(_lastClaimNode[nodeId]) : regTime;\r\n        return lastClaimed;\r\n    }\r\n    \r\n    function timeSinceLastClaimNode(uint256 nodeId) public view override returns (uint256) {\r\n        require(ISpirits(_spiritsAddress).nodeExists(nodeId), \"Node with specified id does not exist\");\r\n        return block.timestamp - lastClaimNode(nodeId);\r\n    }\r\n    \r\n    function nodeEmissionEnds() public pure override returns (uint256) {\r\n        return EMISSION_END_NODE;\r\n    }\r\n    \r\n    function nodeEmissionMultiplier(uint256 nodeType) public view override returns (uint256) {\r\n        require(nodeType >= 1 && nodeType <= 4, \"Invalid node type\");\r\n        if(nodeType == 1) {\r\n            return nodeEmissionMultiplierType1;\r\n        }\r\n        if(nodeType == 2) {\r\n            return nodeEmissionMultiplierType2;\r\n        }\r\n        if(nodeType == 3) {\r\n            return nodeEmissionMultiplierType3;\r\n        }\r\n        if(nodeType == 4) {\r\n            return nodeEmissionMultiplierType4;\r\n        }\r\n        return nodeEmissionMultiplierType1;\r\n    }\r\n    \r\n    /* changes the emission rewards for a given node type */\r\n    function changeNodeEmissionMultiplier(uint256 nodeType, uint256 newMultiplier) onlyOwner public {\r\n        require(nodeType >= 1 && nodeType <= 4, \"Invalid node type\");\r\n        if(nodeType == 1) {\r\n            nodeEmissionMultiplierType1 = newMultiplier;\r\n        }\r\n        if(nodeType == 2) {\r\n            nodeEmissionMultiplierType2 = newMultiplier;\r\n        }\r\n        if(nodeType == 3) {\r\n            nodeEmissionMultiplierType3 = newMultiplier;\r\n        }\r\n        if(nodeType == 4) {\r\n            nodeEmissionMultiplierType4 = newMultiplier;\r\n        }\r\n    }\r\n    \r\n    // gets the SPT emission rate for a node - nodes are locked into the emission rate that was active at the time of registration \r\n    function nodeEmissionRate(uint256 regTime) public view override returns (uint256) {\r\n        uint256 band1 = EMISSION_START + (SECONDS_IN_A_YEAR * 1);\r\n        if(regTime <= band1) {\r\n            return EMISSION_PER_DAY_YEARS[0];\r\n        }\r\n        uint256 band2 = EMISSION_START + (SECONDS_IN_A_YEAR * 2);\r\n        if(regTime <= band2) {\r\n            return EMISSION_PER_DAY_YEARS[1];\r\n        }\r\n        return EMISSION_PER_DAY_YEARS[2];\r\n    }\r\n    \r\n    /**\r\n     * @dev lifetime SPT tokens claimed from a node\r\n     */\r\n    function totalClaimedNode(uint256 nodeId) public view override returns (uint256) {\r\n        require(ISpirits(_spiritsAddress).nodeExists(nodeId), \"Node with specified id does not exist\");\r\n        uint256 claimed = uint256(_claimedAmountNode[nodeId]) >= 0 ? uint256(_claimedAmountNode[nodeId]) : 0;\r\n        return claimed;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        // Approval check is skipped if the caller of transferFrom is the CryptoSpirits or CryptoSpirits Addons contract. For better UX.\r\n        if (msg.sender == _spiritsAddress) {\r\n            // caller of transferFrom is the CryptoSpirits contract\r\n            _totalFromSpirits = _totalFromSpirits.add(amount);\r\n        }\r\n        else if(_addonsAddress != address(0) && msg.sender == _addonsAddress) {\r\n            // addons contract address is set and caller is from the CryptoSpirits Addons contract\r\n            _totalFromAddons = _totalFromAddons.add(amount);\r\n        }\r\n        else {\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    // ++\r\n    /**\r\n     * @dev Burns a quantity of tokens held by the caller.\r\n     *\r\n     * Emits an {Transfer} event to 0 address\r\n     *\r\n     */\r\n    function burn(uint256 burnQuantity) public virtual override returns (bool) {\r\n        _burn(msg.sender, burnQuantity);\r\n        return true;\r\n    }\r\n    // ++\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _totalBurned = _totalBurned.add(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}"
    },
    "contracts/utils/Context.sol": {
      "content": "/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
    },
    "contracts/utils/Ownable.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
    },
    "contracts/utils/SafeMath.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    }
  }
}