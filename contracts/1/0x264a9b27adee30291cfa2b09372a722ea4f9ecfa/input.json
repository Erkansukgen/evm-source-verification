{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/flasharb.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n// File: @uniswap/lib/contracts/libraries/FixedPoint.sol\n\npragma solidity >=0.4.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n        uint z;\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n}\n\n// File: @uniswap/lib/contracts/libraries/Babylonian.sol\n\npragma solidity >=0.4.0;\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\nlibrary Babylonian {\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n}\n\n// File: contracts/interfaces/V1/IUniswapV1Factory.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV1Factory {\n    function getExchange(address) external view returns (address);\n}\n\n// File: contracts/interfaces/V1/IUniswapV1Exchange.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV1Exchange {\n    function balanceOf(address owner) external view returns (uint);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function removeLiquidity(uint, uint, uint, uint) external returns (uint, uint);\n    function tokenToEthSwapInput(uint, uint, uint) external returns (uint);\n    function ethToTokenSwapInput(uint, uint) external payable returns (uint);\n}\n\n// File: contracts/interfaces/IERC20.sol\n\npragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\n// File: contracts/interfaces/IWETH.sol\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\n// File: contracts/libraries/UniswapV2Library.sol\n\npragma solidity >=0.5.0;\n\n\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n// File: contracts/examples/ExampleFlashArbitrage.sol\n\npragma solidity >=0.6.2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// uses flash swaps in UniswapV2 to arbitrage against UniswapV1 with zero price risk\n// i.e. any caller can provide a token pair and the liquidity in UniswapV2 will be used to move the marginal price in V1\n// to be the same as the marginal price in V2, and forward any resulting profits\n// all the caller pays for is gas. gas and gas prices are not considered in the arbitrage profitability.\ncontract ExampleFlashArbitrage is IUniswapV2Callee {\n    using SafeMath for uint;\n\n    IUniswapV1Factory public immutable v1Factory;\n    IUniswapV2Factory public immutable v2Factory;\n    IWETH public immutable weth;\n\n    // this is temporarily set during the callback so we can prevent ETH from accidentally being sent to this contract\n    address private pendingReceiveAddress;\n\n    constructor(IUniswapV1Factory v1Factory_, IUniswapV2Factory v2Factory_, IWETH weth_) public {\n        v1Factory = v1Factory_;\n        v2Factory = v2Factory_;\n        weth = weth_;\n    }\n\n    // receives ETH from V1 exchanges. must first be prepared to receive via pendingReceiveAddress.\n    receive() external payable {\n        require(msg.sender == pendingReceiveAddress, \"FlashArbitrage: RECEIVE_NOT_PENDING\");\n    }\n\n    // this is necessary to avoid multiplication overflow.\n    uint private constant PROFIT_DERIVATIVE_DOWNSCALING_BITS_STEP = 8;\n\n    // compute whether profit increases if we withdraw more from v2 to sell on v1\n    // used in order to do a binary search and find the maximally profitable withdraw amount\n    function profitDerivativePositive(uint x0, uint y0, uint x1, uint y1, uint withdrawX1) pure public returns (bool) {\n        uint leftTop = x1.mul(y1); // 224 bits\n        uint leftBottom = x1.sub(withdrawX1).mul(x1.sub(withdrawX1)); // 224 bits\n\n        uint rightTop = x0.mul(y0).mul(994009); // assumed not to exceed 224 bits\n        // probably < 256 bits\n        uint rightBottom = withdrawX1.mul(997).add(x0.mul(1000)).mul(withdrawX1.mul(997).add(x0.mul(1000)));\n\n        // while left and right variables are both greater than max, scale them down\n        while (leftTop > uint128(-1) || rightTop > uint128(-1)) {\n            leftTop >>= PROFIT_DERIVATIVE_DOWNSCALING_BITS_STEP;\n            rightTop >>= PROFIT_DERIVATIVE_DOWNSCALING_BITS_STEP;\n        }\n        while (rightBottom > uint128(-1) || leftBottom > uint128(-1)) {\n            rightBottom >>= PROFIT_DERIVATIVE_DOWNSCALING_BITS_STEP;\n            leftBottom >>= PROFIT_DERIVATIVE_DOWNSCALING_BITS_STEP;\n        }\n\n        return leftTop.mul(rightBottom) < rightTop.mul(leftBottom);\n    }\n\n    uint private constant NUM_ITERATIONS_BINARY_SEARCH = 12;\n\n    // computes the withdraw amount to arbitrage between v1 and v2 eth/token pairs\n    // cannot be used for token/token pairs because token/token pairs must make multiple hops in v1\n    function computeWithdrawAmountETH(uint v1Eth, uint v1Token, uint v2Eth, uint v2Token) private pure returns (uint withdrawAmount, bool withdrawETH) {\n        require(v1Eth > 0 && v1Eth > 0 && v2Eth > 0 && v2Token > 0, 'FlashArbitrage: ALL_INPUTS_NONZERO');\n\n        {\n            uint left = v2Token.mul(v1Eth) / v2Eth;\n            uint right = v1Token;\n            require(left != right, 'FlashArbitrage: EQUIVALENT_PRICE');\n            // if the tokens to eth is less in v2 than v1, eth is cheaper in v2 in terms of token.\n            // that means we should withdraw eth from v2 and sell it on v1 for tokens.\n            // otherwise we should withdraw tokens from v2 and sell it on v1 for eth.\n            // division by zero not possible\n            withdrawETH = left < right;\n        }\n\n        if (withdrawETH) {\n            uint lo = 0;\n            uint hi = v2Eth - 1;\n            for (uint i = 0; i < NUM_ITERATIONS_BINARY_SEARCH; i++) {\n                withdrawAmount = (lo + hi) >> 1;\n                if (profitDerivativePositive(v1Eth, v1Token, v2Eth, v2Token, withdrawAmount)) {\n                    lo = withdrawAmount + 1;\n                } else {\n                    hi = withdrawAmount;\n                }\n            }\n        } else {\n            uint lo = 0;\n            uint hi = v2Token - 1;\n            for (uint i = 0; i < NUM_ITERATIONS_BINARY_SEARCH; i++) {\n                withdrawAmount = (lo + hi) >> 1;\n                if (profitDerivativePositive(v1Token, v1Eth, v2Token, v2Eth, withdrawAmount)) {\n                    lo = withdrawAmount + 1;\n                } else {\n                    hi = withdrawAmount;\n                }\n            }\n        }\n    }\n\n    // emitted when a successful arbitrage occurs\n    event Arbitrage(address token0, uint profit0, address token1, uint profit1);\n\n    // arbitrages the token/ETH pair between Uniswap V1 and V2\n    // this function deliberately excludes the possibility that you want to arbitrage weth against eth.\n    // to do that you should use the WETH contract\n    // the computation for optimal token/ETH pairs arbitrage amounts is simpler because it only requires one v1 swap\n    function arbitrageETH(address token, address recipient) public {\n        require(token != address(weth), 'FlashArbitrage: INVALID_TOKEN');\n        address v1Exchange = v1Factory.getExchange(token);\n        require(v1Exchange != address(0), 'FlashArbitrage: V1_EXCHANGE_NOT_EXIST');\n\n        uint256 tokenBalanceV1 = IERC20(token).balanceOf(v1Exchange);\n        uint256 ethBalanceV1 = v1Exchange.balance;\n        require(tokenBalanceV1 > 0 && ethBalanceV1 > 0, 'FlashArbitrage: V1_NO_LIQUIDITY');\n\n        address v2Pair = UniswapV2Library.pairFor(address(v2Factory), token, address(weth));\n        IUniswapV2Pair(v2Pair).sync();\n\n        uint256 tokenBalanceV2;\n        uint256 ethBalanceV2;\n        bool isToken0Eth = (IUniswapV2Pair(v2Pair).token0() == address(weth));\n        {\n            (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(v2Pair).getReserves();\n            (ethBalanceV2, tokenBalanceV2) = isToken0Eth ?\n                (uint256(reserve0), uint256(reserve1)) :\n                (uint256(reserve1), uint256(reserve0));\n        }\n\n        require(tokenBalanceV2 > 0 && ethBalanceV2 > 0, 'FlashArbitrage: V2_NO_LIQUIDITY');\n\n        (uint withdrawAmount, bool withdrawETH) =\n        computeWithdrawAmountETH(ethBalanceV1, tokenBalanceV1, ethBalanceV2, tokenBalanceV2);\n\n        // the amount of eth we withdraw should be the amount that moves the marginal price of the token in ETH to be\n        // the same in both V1 and V2.\n        if (withdrawETH) {\n            bytes memory callback_data = abi.encode(\n                isToken0Eth ? address(weth) : token,\n                isToken0Eth ? token : address(weth),\n                UniswapV2Library.getAmountIn(withdrawAmount, tokenBalanceV2, ethBalanceV2)\n            );\n\n            IUniswapV2Pair(v2Pair)\n            .swap(isToken0Eth ? withdrawAmount : 0, isToken0Eth ? 0 : withdrawAmount, address(this), callback_data);\n\n            // just forward the whole balance of the token we ended up with\n            uint profit = IERC20(token).balanceOf(address(this));\n            TransferHelper.safeTransfer(token, recipient, profit);\n            emit Arbitrage(\n                isToken0Eth ? address(weth) : token,\n                isToken0Eth ? 0 : profit,\n                isToken0Eth ? token : address(weth),\n                isToken0Eth ? profit : 0\n            );\n        } else {\n            bytes memory callback_data = abi.encode(\n                isToken0Eth ? address(weth) : token,\n                isToken0Eth ? token : address(weth),\n                UniswapV2Library.getAmountIn(withdrawAmount, ethBalanceV2, tokenBalanceV2)\n            );\n\n            IUniswapV2Pair(v2Pair)\n            .swap(isToken0Eth ? 0 : withdrawAmount, isToken0Eth ? withdrawAmount : 0, address(this), callback_data);\n\n            uint profit = IERC20(address(weth)).balanceOf(address(this));\n            // just forward the whole balance of ETH we ended up with\n            TransferHelper.safeTransfer(address(weth), recipient, profit);\n            emit Arbitrage(\n                isToken0Eth ? address(weth) : token,\n                isToken0Eth ? profit : 0,\n                isToken0Eth ? token : address(weth),\n                isToken0Eth ? 0 : profit\n            );\n        }\n    }\n\n    // arbitrage any two tokens. if token0 or token1 are WETH, falls back to arbitrageETH\n    function arbitrage(address token0, address token1, address recipient) external {\n        require(recipient != address(0), 'FlashArbitrage: INVALID_TO');\n\n        if (token0 == address(weth)) {\n            arbitrageETH(token1, recipient);\n            return;\n        } else if (token1 == address(weth)) {\n            arbitrageETH(token0, recipient);\n            return;\n        }\n\n        revert('FlashArbitrage: TODO_MULTIHOP_ARBITRAGE');\n    }\n\n    // this callback takes any amount received of token0 and token1 and exchanges the entire amount on uniswap v1 for\n    // the other token.\n    // it has special case handling for weth to wrap/unwrap the token when interacting with V1.\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) override external {\n        // this contract should initiate all flash swaps\n        require(sender == address(this), 'FlashArbitrage: FLASH_SWAP_FROM_OTHER');\n\n        // only trades in a single direction\n        require((amount0 > 0 && amount1 == 0) || (amount0 == 0 && amount1 > 0), 'FlashArbitrage: CALLBACK_AMOUNT_XOR');\n\n        // at this point we have received the loan to this contract and we must trade the full amount to\n        // uniswap v1 and complete the swap\n        (address token0, address token1, uint returnAmount) = abi.decode(data, (address, address, uint));\n\n        // the token we receive from v2 vs. the token we send back to v2\n        (address tokenReceived, uint amountReceived, address tokenReturn) = amount0 > 0 ?\n            (token0, amount0, token1) :\n            (token1, amount1, token0);\n\n        // do the v1 swap\n        if (tokenReceived == address(weth)) {\n            pendingReceiveAddress = address(weth);\n            weth.withdraw(amountReceived);\n            // refund most of the gas from the temporary set\n            delete pendingReceiveAddress;\n\n            IUniswapV1Exchange returnExchange = IUniswapV1Exchange(v1Factory.getExchange(tokenReturn));\n            returnExchange.ethToTokenSwapInput{value : amountReceived}(1, block.timestamp);\n        } else if (tokenReturn == address(weth)) {\n            IUniswapV1Exchange receivedExchange = IUniswapV1Exchange(v1Factory.getExchange(tokenReceived));\n            TransferHelper.safeApprove(tokenReceived, address(receivedExchange), amountReceived);\n\n            // prepare to get ETH from the v1 exchange\n            pendingReceiveAddress = address(receivedExchange);\n            uint ethReceived = receivedExchange.tokenToEthSwapInput(amountReceived, 1, block.timestamp);\n            // refund most of the gas from the temporary set\n            delete pendingReceiveAddress;\n\n            weth.deposit{value : ethReceived}();\n        } else {\n            IUniswapV1Exchange receivedExchange = IUniswapV1Exchange(v1Factory.getExchange(tokenReceived));\n            IUniswapV1Exchange returnExchange = IUniswapV1Exchange(v1Factory.getExchange(tokenReturn));\n\n            // prepare to get ETH from the first exchange\n            TransferHelper.safeApprove(tokenReceived, address(receivedExchange), amountReceived);\n            pendingReceiveAddress = address(receivedExchange);\n            uint ethReceived = receivedExchange.tokenToEthSwapInput(amountReceived, 1, block.timestamp);\n            // refund most of the gas from the temporary set\n            delete pendingReceiveAddress;\n\n            returnExchange.ethToTokenSwapInput{value : ethReceived}(1, block.timestamp);\n        }\n\n        // now pay back v2 what is owed\n        TransferHelper.safeTransfer(tokenReturn, msg.sender, returnAmount);\n    }\n}\n"
    }
  }
}