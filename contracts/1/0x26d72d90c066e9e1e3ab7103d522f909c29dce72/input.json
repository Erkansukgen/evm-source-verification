{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/MrFlipper.sol":{"content":" pragma solidity ^0.7.5;\r\n // SPDX-License-Identifier: UNLICENCED\r\n\r\n// Generic owner and whitelist functionality ---------------------------------------------------------\r\ncontract Managed {\r\n\r\n    address payable public owner;\r\n    mapping(address => bool) public isWorker;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        isWorker[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWorker(){\r\n         require(isWorker[msg.sender] || msg.sender == owner, \"Caller is neither the owner nor a whitelisted worker\");\r\n        _;\r\n    }\r\n\r\n    function addWorker(address w) public onlyOwner {\r\n        isWorker[w] = true;\r\n    }\r\n\r\n    function removeWorker(address w) public onlyOwner {\r\n        isWorker[w] = false;\r\n    }\r\n\r\n    function transferOwnership(address payable new_owner) public virtual onlyOwner {\r\n        owner = new_owner;\r\n    }\r\n}\r\n\r\n// Interfaces to external contracts -----------------------------------------------\r\ninterface Join {\r\n    function join(address, uint) external;\r\n    function exit(address, uint) external;\r\n\r\n}\r\n\r\ninterface Vat {\r\n    function hope(address) external;\r\n    function dai(address) external view returns (uint);\r\n    function gem(bytes32, address) external view returns (uint);\r\n\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface Flipper {\r\n    function tend(uint id, uint lot, uint bid) external;\r\n    function dent(uint id, uint lot, uint bid) external;\r\n    function deal(uint256 id) external;\r\n}\r\n\r\n// main contract -------------------------------------------------------------------------------\r\n\r\ncontract MrFlipper is Managed {\r\n\r\n\r\n    constructor() {\r\n        isWorker[0x008Ca3a9C52e0F0d9Ee94d310D20d67399d44f6C] = true;\r\n        ERC20(DAI).approve(msg.sender, 1e77); // Owner can withdraw WETH and DAI manually if necessary using transferFrom\r\n        ERC20(WETH).approve(msg.sender, 1e77);\r\n        \r\n        ERC20(DAI).approve(DAI_JOIN, 1e77);\r\n        ERC20(WETH).approve(ETH_A_JOIN, 1e77);\r\n        ERC20(WETH).approve(ETH_B_JOIN, 1e77);\r\n        \r\n        Vat(VAT).hope(DAI_JOIN);\r\n        Vat(VAT).hope(ETH_A_JOIN);\r\n        Vat(VAT).hope(ETH_B_JOIN);\r\n        Vat(VAT).hope(ETH_A_FLIPPER);\r\n        Vat(VAT).hope(ETH_B_FLIPPER);\r\n\r\n    }\r\n\r\n    // Addresses ---\r\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address constant VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant FLAPPER = 0xC4269cC7acDEdC3794b221aA4D9205F564e27f0d;\r\n    address constant ETH_A_FLIPPER = 0xF32836B9E1f47a0515c6Ec431592D5EbC276407f;\r\n    address constant ETH_B_FLIPPER = 0xD499d71bE9e9E5D236A07ac562F7B6CeacCa624c;\r\n    address constant DAI_JOIN = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address constant ETH_A_JOIN = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    address constant ETH_B_JOIN = 0x08638eF1A205bE6762A8b935F5da9b700Cf7322c;\r\n\r\n\r\n    function join(uint which, uint amount) public onlyWorker {\r\n        address JOINER; \r\n        \r\n        if (which == 0) {\r\n            JOINER = DAI_JOIN;\r\n        }\r\n        else if (which == 1) {\r\n            JOINER = ETH_A_JOIN;\r\n        }\r\n        else if (which == 2) {\r\n            JOINER = ETH_B_JOIN;\r\n        }\r\n        \r\n        Join(JOINER).join(address(this), amount);\r\n    }\r\n    \r\n    function withdrawToken(address token) public onlyOwner {\r\n        uint balance = ERC20(token).balanceOf(address(this));\r\n        ERC20(token).transfer(msg.sender, balance);\r\n    }\r\n\r\n    function exit(uint which, uint amount) public onlyWorker {\r\n        address JOINER;\r\n\r\n        if (which == 0) {\r\n            JOINER = DAI_JOIN;\r\n            if (amount == 0) {amount = Vat(VAT).dai(address(this)) / (10**27);}\r\n        }\r\n        else if (which == 1) {\r\n            JOINER = ETH_A_JOIN;\r\n            if (amount == 0) {amount = Vat(VAT).gem(bytes32('ETH-A'), address(this));}\r\n        }\r\n        else if (which == 2) {\r\n            JOINER = ETH_B_JOIN;\r\n            if (amount == 0) {amount = Vat(VAT).gem(bytes32('ETH-B'), address(this));}\r\n        }\r\n        \r\n        Join(JOINER).exit(address(this), amount);\r\n    }\r\n\r\n\r\n    function exitAndWithdraw(uint which, uint amount) public onlyOwner {\r\n        exit(which, amount);\r\n        if (which == 0) {\r\n            withdrawToken(DAI);\r\n        }\r\n        else {\r\n            withdrawToken(WETH);\r\n        }\r\n    }\r\n    \r\n    function multiDeal(uint[] memory eth_a, uint[] memory eth_b, uint[] memory flaps) public onlyWorker {\r\n        for (uint i=0; i<eth_a.length; i++) {\r\n            Flipper(ETH_A_FLIPPER).deal(eth_a[i]);\r\n            }\r\n        for (uint i=0; i<eth_b.length; i++) {\r\n            Flipper(ETH_B_FLIPPER).deal(eth_b[i]);\r\n        }\r\n        for (uint i=0; i<flaps.length; i++) {\r\n            Flipper(FLAPPER).deal(flaps[i]);\r\n        }\r\n    }\r\n    \r\n\r\n    function execute1(uint which, uint phase, uint id, uint lot, uint bid) public onlyWorker {\r\n        address FLIPPER;\r\n        \r\n        if (which == 1) {\r\n            FLIPPER = ETH_A_FLIPPER;\r\n        }\r\n        else if (which == 2) {\r\n            FLIPPER = ETH_B_FLIPPER;\r\n        }\r\n        \r\n        if (phase == 1) {\r\n            Flipper(FLIPPER).tend(id, lot, bid);\r\n        }\r\n        else if (phase == 2) {\r\n            Flipper(FLIPPER).dent(id, lot, bid);\r\n        }\r\n    }\r\n    \r\n\r\n    // Contract-specific transferOwnership override -------------------------------------------------------\r\n    function transferOwnership(address payable new_owner) public override onlyOwner {\r\n        Managed.transferOwnership(new_owner);\r\n        ERC20(DAI).approve(msg.sender, 0); // Revoke DAI/WETH withdrawal access from old owner\r\n        ERC20(WETH).approve(msg.sender, 0);\r\n        \r\n        ERC20(DAI).approve(new_owner, 1e77); // Give new owner access to the contract's DAI/WETH\r\n        ERC20(WETH).approve(new_owner, 1e77);\r\n\r\n    }\r\n}\r\n"}}}