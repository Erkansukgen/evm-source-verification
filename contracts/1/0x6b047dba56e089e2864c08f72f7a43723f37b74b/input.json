{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/bac.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.6.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\n\ninterface IBoardroom {\n        function claimReward() external;\n        \n        function stake(uint256 amount) external virtual;\n        \n        function exit() external;\n}\n\n\n/**\n * @title Storage\n * @dev Store & retrieve value in a variable\n */\ncontract makemoni {\n\n    IUniswapV2Router02 public uni = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    IBoardroom public boardroom = IBoardroom(0xa01fFb759C94539e1c89A6fffAfc409EaB154a65);\n    \n    IERC20 public BAS = IERC20(0xa7ED29B253D8B4E3109ce07c80fc570f81B63696);\n    IERC20 public BAC = IERC20(0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a);\n    \n    address payable public besitzer;\n    \n    constructor() public payable{\n        besitzer=msg.sender;\n    }\n    \n    \n    function stakeAllBas() public{\n        require(msg.sender == besitzer);\n        BAS.approve(address(boardroom),115792089237316195423570985008687907853269984665640564039457584007913129639935);\n        uint256 basBalance = BAS.balanceOf(address(besitzer));\n        BAS.transferFrom(address(besitzer),address(this),basBalance);\n        boardroom.stake(basBalance);\n    }\n    \n    function sellNow() public {\n        require(msg.sender==besitzer);\n        boardroom.claimReward();\n        uint256 bacBalance = BAC.balanceOf(address(this));\n        require(bacBalance > 0);\n        \n        BAC.approve(address(uni),115792089237316195423570985008687907853269984665640564039457584007913129639935);\n        \n        address[] memory routeToTake = new address[](2);\n        routeToTake[0]=address(0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a);\n        routeToTake[2]=address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n        \n        uni.swapExactTokensForTokens(bacBalance,0,routeToTake,besitzer,now+1);\n   \n    }\n    \n    function withDrawAllBas() public {\n        require(msg.sender==besitzer);\n        boardroom.exit();\n        uint256 basBalance=BAS.balanceOf(address(this));\n        BAS.transfer(besitzer,basBalance);\n    }\n    \n}"}}}