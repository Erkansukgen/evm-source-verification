{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Math.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\r\n    z = SafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.mul(x, y);\r\n  }\r\n\r\n  function div(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.div(x, y);\r\n  }\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n}\r\n"},"browser/Mubaris.sol":{"content":"pragma solidity 0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { DSMath } from \"./Math.sol\";\r\n\r\ninterface PoolInterface {\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint maxAmountIn,\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountIn);\r\n\r\n    function getNormalizedWeight(address token) external view returns (uint);\r\n    function getBalance(address token) external view returns (uint);\r\n    function getSwapFee() external view returns (uint);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external returns (uint);\r\n    function allowance(address, address) external returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function burn(uint) external;\r\n    function mint(uint) external payable;\r\n    function mintWithSnx(uint) external;\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface TradeAccounting {\r\n    function calculateRedemptionValue(\r\n        uint totalSupply,\r\n        uint tokensToRedeem\r\n    ) external view returns (uint256);\r\n\r\n    function calculateTokensToMintWithSnx(\r\n        uint256 snxBalanceBefore,\r\n        uint256 snxAddedToBalance,\r\n        uint256 totalSupply\r\n    ) external view returns (uint256);\r\n\r\n    function calculateTokensToMintWithEth(\r\n        uint256 snxBalanceBefore,\r\n        uint256 ethContributed,\r\n        uint256 nonSnxAssetValue,\r\n        uint256 totalSupply,\r\n        bool allocateToEth\r\n    ) external view returns (uint256);\r\n\r\n    function getMintWithEthUtils(\r\n        uint256 totalSupply\r\n    ) external view returns (bool allocateToEth, uint256 nonSnxAssetValue);\r\n\r\n    function getSnxBalance() external view returns (uint256);\r\n}\r\n\r\ncontract Arbitrageur is DSMath {\r\n    address private owner;\r\n\r\n    address private constant xsnxAddr = 0x2367012aB9c3da91290F71590D5ce217721eEfE4;\r\n    address private constant snxAddr = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\r\n    address private constant wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address private constant balPoolAddr = 0xE3f9cF7D44488715361581DD8B3a15379953eB4C;\r\n    address private constant accountingAddr = 0x6461E964D687E7ca3082bECC595D079C6c775Ac8;\r\n\r\n    PoolInterface private constant balPool = PoolInterface(balPoolAddr);\r\n    TokenInterface private constant xsnx = TokenInterface(xsnxAddr);\r\n    TokenInterface private constant snx = TokenInterface(snxAddr);\r\n    TokenInterface private constant weth = TokenInterface(wethAddr);\r\n    TradeAccounting private constant accounting = TradeAccounting(accountingAddr);\r\n\r\n    uint public burnFee;\r\n    uint public mintFee;\r\n\r\n    struct Result {\r\n        bool success;\r\n        uint gain;\r\n    }\r\n\r\n    // Inits\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n\r\n        mintFee = 500;\r\n        burnFee = 500;\r\n    }\r\n\r\n    function changeFees(uint _mint, uint _burn) public {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        mintFee = _mint;\r\n        burnFee = _burn;\r\n    }\r\n\r\n    // End Inits\r\n\r\n    // Read only funtions\r\n\r\n    function _getAmountOut(address _from, address _to, uint _amt) private view returns (uint) {\r\n        return balPool.calcOutGivenIn(\r\n            balPool.getBalance(_from),\r\n            balPool.getNormalizedWeight(_from),\r\n            balPool.getBalance(_to),\r\n            balPool.getNormalizedWeight(_to),\r\n            _amt,\r\n            balPool.getSwapFee()\r\n        );\r\n    }\r\n\r\n    function _getFees(bool _isBurn, uint _value) private view returns (uint fee) {\r\n        if (_isBurn) {\r\n            fee = div(_value, burnFee);\r\n        } else {\r\n            fee = div(_value, mintFee);\r\n        }\r\n    }\r\n\r\n    function verifyEtherMintSwap(uint amt) public view returns (Result memory res) {\r\n        uint _ethAmt = sub(amt, _getFees(false, amt));\r\n        uint _xsnxSupply = xsnx.totalSupply();\r\n        uint snxBalanceBefore = accounting.getSnxBalance();\r\n        (bool allocateToEth, uint256 nonSnxAssetValue) = accounting.getMintWithEthUtils(_xsnxSupply);\r\n        uint _mintAmt = accounting.calculateTokensToMintWithEth(\r\n            snxBalanceBefore,\r\n            _ethAmt,\r\n            nonSnxAssetValue,\r\n            _xsnxSupply,\r\n            allocateToEth\r\n        );\r\n\r\n        uint _swapAmt = _getAmountOut(xsnxAddr, wethAddr, _mintAmt);\r\n\r\n        if (_swapAmt > amt) {\r\n            res.success = true;\r\n            res.gain = sub(_swapAmt, amt);\r\n        } else {\r\n            res.success = false;\r\n        }\r\n    }\r\n\r\n    function verifyEtherSwapBurn(uint amt) public view returns (Result memory res) {\r\n        uint _swapAmt = _getAmountOut(wethAddr, xsnxAddr, amt);\r\n\r\n        uint _xsnxSupply = xsnx.totalSupply();\r\n        uint _valueToRedeem = accounting.calculateRedemptionValue(_xsnxSupply, _swapAmt);\r\n\r\n        uint _valueAfterBurn = sub(_valueToRedeem, _getFees(true, _valueToRedeem));\r\n\r\n        if (_valueAfterBurn > amt) {\r\n            res.success = true;\r\n            res.gain = sub(_valueAfterBurn, amt);\r\n        } else {\r\n            res.success = false;\r\n        }\r\n    }\r\n\r\n    function verifySnxMintSwap(uint amt) public view returns (Result memory res) {\r\n        uint _snxBalance = accounting.getSnxBalance();\r\n        uint _snxAmt = sub(amt, _getFees(false, amt));\r\n        uint _xsnxSupply = xsnx.totalSupply();\r\n\r\n        uint _mintAmt = accounting.calculateTokensToMintWithSnx(\r\n            _snxBalance,\r\n            _snxAmt,\r\n            _xsnxSupply\r\n        );\r\n\r\n        uint _swapAmt = _getAmountOut(xsnxAddr, snxAddr, _mintAmt);\r\n\r\n        if (_swapAmt > amt) {\r\n            res.success = true;\r\n            res.gain = sub(_swapAmt, amt);\r\n        } else {\r\n            res.success = false;\r\n        }\r\n    }\r\n\r\n    function verifyXtokenBurnSwap(uint amt) public view returns (Result memory res) {\r\n        uint _xsnxSupply = xsnx.totalSupply();\r\n        uint _valueToRedeem = accounting.calculateRedemptionValue(_xsnxSupply, amt);\r\n\r\n        uint _valueAfterBurn = sub(_valueToRedeem, _getFees(true, _valueToRedeem));\r\n\r\n        uint _swapAmt = _getAmountOut(wethAddr, xsnxAddr, _valueAfterBurn);\r\n\r\n        if (_swapAmt > amt) {\r\n            res.success = true;\r\n            res.gain = sub(_swapAmt, amt);\r\n        } else {\r\n            res.success = false;\r\n        }\r\n    }\r\n\r\n    function verifyXtokenSwapMint(uint amt) public view returns (Result memory res) {\r\n        uint _swapAmt = _getAmountOut(xsnxAddr, wethAddr, amt);\r\n\r\n        uint _ethAmt = sub(_swapAmt, _getFees(false, _swapAmt));\r\n        uint _xsnxSupply = xsnx.totalSupply();\r\n        uint snxBalanceBefore = accounting.getSnxBalance();\r\n        (bool allocateToEth, uint256 nonSnxAssetValue) = accounting.getMintWithEthUtils(_xsnxSupply);\r\n        uint _mintAmt = accounting.calculateTokensToMintWithEth(\r\n            snxBalanceBefore,\r\n            _ethAmt,\r\n            nonSnxAssetValue,\r\n            _xsnxSupply,\r\n            allocateToEth\r\n        );\r\n\r\n        if (_mintAmt > amt) {\r\n            res.success = true;\r\n            res.gain = sub(_mintAmt, amt);\r\n        } else {\r\n            res.success = false;\r\n        }\r\n    }\r\n\r\n    function verifyXtokenSwapSynMint(uint amt) public view returns (Result memory res) {\r\n        uint _swapAmt = _getAmountOut(xsnxAddr, snxAddr, amt);\r\n\r\n        uint _snxBalance = accounting.getSnxBalance();\r\n        uint _snxAmt = sub(_swapAmt, _getFees(false, _swapAmt));\r\n        uint _xsnxSupply = xsnx.totalSupply();\r\n\r\n        uint _mintAmt = accounting.calculateTokensToMintWithSnx(\r\n            _snxBalance,\r\n            _snxAmt,\r\n            _xsnxSupply\r\n        );\r\n\r\n        if (_mintAmt > amt) {\r\n            res.success = true;\r\n            res.gain = sub(_mintAmt, amt);\r\n        } else {\r\n            res.success = false;\r\n        }\r\n    }\r\n\r\n    function verifyAll(\r\n        uint ethAmt, uint snxAmt, uint xsnxAmt\r\n    ) public view returns (Result[] memory) {\r\n        Result[] memory results = new Result[](6);\r\n\r\n        results[0] = verifyEtherMintSwap(ethAmt);\r\n        results[1] = verifyEtherSwapBurn(ethAmt);\r\n\r\n        results[2] = verifySnxMintSwap(snxAmt);\r\n\r\n        results[3] = verifyXtokenBurnSwap(xsnxAmt);\r\n        results[4] = verifyXtokenSwapMint(xsnxAmt);\r\n        results[5] = verifyXtokenSwapSynMint(xsnxAmt);\r\n\r\n        return results;\r\n    }\r\n\r\n    // End Read only\r\n\r\n    // Helper Write Functions\r\n\r\n    function _mint() private {\r\n        uint _amt = address(this).balance;\r\n\r\n        xsnx.mint.value(_amt)(0);\r\n    }\r\n\r\n    function _mintWithSnx() private {\r\n        uint _amt = snx.balanceOf(address(this));\r\n\r\n        xsnx.approve(xsnxAddr, _amt);\r\n        xsnx.mintWithSnx(_amt);\r\n    }\r\n\r\n    function _burn() private {\r\n        uint _xAmt = xsnx.balanceOf(address(this));\r\n\r\n        xsnx.burn(_xAmt);\r\n    }\r\n\r\n    function _swap(address _from, address _to, uint _amt) private {\r\n        balPool.swapExactAmountIn(_from, _amt, _to, 0, uint(-1));\r\n    }\r\n\r\n    function _wrapEth(bool toApprove) private {\r\n        weth.deposit.value(msg.value)();\r\n\r\n        if (toApprove) weth.approve(balPoolAddr, msg.value);\r\n    }\r\n\r\n    function _unwrapEth() private {\r\n        weth.approve(wethAddr, weth.balanceOf(address(this)));\r\n\r\n        weth.withdraw(weth.balanceOf(address(this)));\r\n    }\r\n\r\n    function _transferEth() private {\r\n        uint _amt = address(this).balance;\r\n\r\n        msg.sender.transfer(_amt);\r\n    }\r\n\r\n    // End Helpers\r\n\r\n    // ETH -> xsnx (Mint) -> ETH (Swap)\r\n    function etherMintSwap() public payable {\r\n        _mint();\r\n\r\n        uint _amt = xsnx.balanceOf(address(this));\r\n\r\n        xsnx.approve(balPoolAddr, _amt);\r\n        _swap(xsnxAddr, wethAddr, _amt);\r\n        _unwrapEth();\r\n        _transferEth();\r\n    }\r\n\r\n    // ETH -> xsnx (Swap) -> ETH (Burn)\r\n    function etherSwapBurn() public payable {\r\n        _wrapEth(true);\r\n        _swap(wethAddr, xsnxAddr, msg.value);\r\n        _burn();\r\n        _transferEth();\r\n    }\r\n\r\n    // snx -> xsnx (Mint) -> snx (Swap)\r\n    function snxMintSwap(uint amt) public {\r\n        snx.transferFrom(msg.sender, address(this), amt);\r\n        snx.approve(xsnxAddr, amt);\r\n\r\n        _mintWithSnx();\r\n\r\n        uint _amt = xsnx.balanceOf(address(this));\r\n        xsnx.approve(balPoolAddr, _amt);\r\n\r\n        _swap(xsnxAddr, snxAddr, _amt);\r\n\r\n        _amt = snx.balanceOf(address(this));\r\n\r\n        snx.transfer(msg.sender, _amt);\r\n    }\r\n\r\n    // xsnx -> ETH (Burn) -> xsnx (Mint)\r\n    function xtokenBurnSwap(uint amt) public {\r\n        xsnx.transferFrom(msg.sender, address(this), amt);\r\n\r\n        _burn();\r\n\r\n        uint _amt = address(this).balance;\r\n\r\n        _wrapEth(true);\r\n        _swap(wethAddr, xsnxAddr, _amt);\r\n\r\n        _amt = xsnx.balanceOf(address(this));\r\n\r\n        xsnx.transfer(msg.sender, _amt);\r\n    }\r\n\r\n    // xsnx -> ETH (Swap) -> xsnx (Mint)\r\n    function xtokenSwapMint(uint amt) public {\r\n        xsnx.transferFrom(msg.sender, address(this), amt);\r\n        xsnx.approve(balPoolAddr, amt);\r\n\r\n        _swap(xsnxAddr, wethAddr, amt);\r\n        _unwrapEth();\r\n        _mint();\r\n\r\n        uint _amt = xsnx.balanceOf(address(this));\r\n\r\n        xsnx.transfer(msg.sender, _amt);\r\n    }\r\n\r\n    // xsnx -> snx (Swap) -> xsnx (Mint)\r\n    function xtokenSwapSynMint(uint amt) public {\r\n        xsnx.transferFrom(msg.sender, address(this), amt);\r\n        xsnx.approve(balPoolAddr, amt);\r\n\r\n        _swap(xsnxAddr, snxAddr, amt);\r\n\r\n        uint _amt = snx.balanceOf(address(this));\r\n        snx.approve(xsnxAddr, _amt);\r\n\r\n        _mintWithSnx();\r\n\r\n        _amt = xsnx.balanceOf(address(this));\r\n\r\n        xsnx.transfer(msg.sender, _amt);\r\n    }\r\n}\r\n"}}}