{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/TA.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n}\n\n\n// ERC20-style token metadata\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\nstruct TokenMetadata {\n    address token;\n    string name;\n    string symbol;\n    uint8 decimals;\n}\n\n\nstruct Component {\n    address token;    // Address of token contract\n    string tokenType; // Token type (\"ERC20\" by default)\n    uint256 rate;     // Price per share (1e18)\n}\n\n\n/**\n * @title Token adapter interface.\n * @dev getMetadata() and getComponents() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface TokenAdapter {\n\n    /**\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n     * struct TokenMetadata {\n     *     address token;\n     *     string name;\n     *     string symbol;\n     *     uint8 decimals;\n     * }\n     */\n    function getMetadata(address token) external view returns (TokenMetadata memory);\n\n    /**\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n    * struct Component {\n    *     address token;    // Address of token contract\n    *     string tokenType; // Token type (\"ERC20\" by default)\n    *     uint256 rate;     // Price per share (1e18)\n    * }\n    */\n    function getComponents(address token) external view returns (Component[] memory);\n}\n\n\n/**\n * @dev PieSmartPool contract interface.\n * Only the functions required for UniswapAdapter contract are added.\n * The BPool contract is available here\n * github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\n */\ninterface IPieSmartPool {\n    function getTokens() external view returns (address[] memory);\n    function getBPool() external view returns (address);\n}\n\n\n/**\n * @dev BPool contract interface.\n * Only the functions required for UniswapAdapter contract are added.\n * The BPool contract is available here\n * github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\n */\ninterface BPool {\n    function getFinalTokens() external view returns (address[] memory);\n    function getBalance(address) external view returns (uint256);\n    function getNormalizedWeight(address) external view returns (uint256);\n}\n\n\n/**\n * @title Token adapter for Pie pool tokens.\n * @dev Implementation of TokenAdapter interface.\n * @author Mick de Graaf <mick@dexlab.io>\n */\ncontract PieDAOPieTokenAdapter is TokenAdapter {\n\n    /**\n     * @return TokenMetadata struct with ERC20-style token info.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n        return TokenMetadata({\n            token: token,\n            name: ERC20(token).name(),\n            symbol: ERC20(token).symbol(),\n            decimals: ERC20(token).decimals()\n        });\n    }\n\n    /**\n     * @return Array of Component structs with underlying tokens rates for the given asset.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getComponents(address token) external view override returns (Component[] memory) {\n        address[] memory underlyingTokensAddresses = IPieSmartPool(token).getTokens();\n        uint256 totalSupply = ERC20(token).totalSupply();\n        BPool bPool = BPool(IPieSmartPool(token).getBPool());\n\n        Component[] memory underlyingTokens = new Component[](underlyingTokensAddresses.length);\n        address underlyingToken;\n\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\n            underlyingToken = underlyingTokensAddresses[i];\n            underlyingTokens[i] = Component({\n                token: underlyingToken,\n                tokenType: \"ERC20\",\n                rate: bPool.getBalance(underlyingToken) * 1e18 / totalSupply\n            });\n        }\n\n        return underlyingTokens;\n    }\n}\n"
    }
  }
}