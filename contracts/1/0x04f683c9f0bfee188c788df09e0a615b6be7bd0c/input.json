{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/testpay21.sol": {
      "content": "pragma solidity ^0.6.7;\n// SPDX-License-Identifier: SimPL-2.0\n\ncontract QTTest{\n    \n    bytes32 public hashLock = 0xdb5cb01306b4f93936b4328c8f6106756ef774ea64acdf7c834b9e613d4689ee;\n    \n    function pay() public payable{\n        require(msg.value<300000000000000000000);\n        require(msg.value>100000000000000000);\n        \n    }\n    \n    function getBalance() public view returns (uint){\n        //return this.balance;\n        return address(this).balance;\n    }\n    \n    function withdraw(address payable who,uint amount,string memory _srcvalue) public{\n        require(sha256(bytes(_srcvalue))==hashLock);\n        require(amount<300000000000000000000);\n        require(amount>100000000000000000);\n        who.transfer(amount);\n    }\n}"
    }
  }
}