{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/IUniswapV2.sol":{"content":"// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"contracts/UniswapV2Migrator.sol":{"content":"// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"./oz-0.8.0/Ownable.sol\";\nimport \"./oz-0.8.0/SafeERC20.sol\";\n\nimport \"./IUniswapV2.sol\";\n\n\ncontract UniswapV2Migrator is Ownable {\n    using SafeERC20 for IERC20;\n\n    // Incoming router selector\n    enum RouterVersion {\n        UniswapV2, \n        Sushiswap\n    }\n\n    // Router addresses\n    IUniswapV2Router02 private constant uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    IUniswapV2Router02 private constant sushiswapRouter = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);\n    IUniswapV2Router02 private constant nowswapRouter = IUniswapV2Router02(0x34E1F74e0786d18C08061B3C99b5D416060c55b4);\n\n    // canonical WETH address (obtained from Uniswap router)\n    address private immutable wethTokenAddress;\n    \n    // token holdings of each user: user => token => amount\n    mapping(address => mapping(address => uint256)) public userBalance;\n    // total tokens held by all users: token => amount\n    mapping(address => uint256) public totalUserBalance;\n\n    // stop certain functionality in emergencies   \n    bool public stopped = false;\n\n    // modifier for stopping in emergencies\n    modifier stoppable {\n        if (stopped) {\n            revert(\"Temporarily stopped\");\n        } else {\n            _;\n        }\n    }\n\n    event migratedOut(\n        address indexed sender,\n        address indexed token,\n        uint256 tokenAmt\n    );\n\n    event migratedIn(\n        address indexed sender,\n        address indexed token,\n        uint256 tokenAmt\n    );\n    \n    constructor()\n    {\n        wethTokenAddress = uniswapV2Router.WETH();        \n    }\n\n    function toggleContractActivity() \n        external \n        onlyOwner\n    {\n        stopped = !stopped;\n    }\n\n\n// ---------------------------------------------------------------------------------------------------------------------------\n// Liquidity migrate function\n// ---------------------------------------------------------------------------------------------------------------------------\n\n    /**\n        @notice Migrate liquidity in both tokens from an existing pair\n        @param fromTokenPair Token pair from which to remove liquidity\n        @param incomingLP Amount of liquidity (LP token) to remove from pair, type(uint256).max to remove all\n        @param deadline Unix timestamp after which the transaction will revert\n        @return sentAmountA Amount of tokenA provided as new liquidity\n        @return sentAmountB Amount of tokenB provided as new liquidity\n        @return outgoingLP Amount of new liquidity token received\n    */\n    function migrateTokenPair(\n        RouterVersion fromRouterVer,\n        address fromTokenPair,\n        uint256 incomingLP,\n        uint256 deadline\n    ) \n        external\n        payable\n        stoppable \n        returns (uint256 sentAmountA, uint256 sentAmountB, uint256 outgoingLP) \n    {\n        require(fromTokenPair != address(0), \"Invalid token pair\");\n        \n        address tokenA;\n        address tokenB;\n        uint256 recdAmountA;\n        uint256 recdAmountB;\n\n        // remove liquidity from Uniswap\n        {\n            IERC20 tokenLP = IERC20(fromTokenPair);\n            if (incomingLP == type(uint256).max)\n                incomingLP = tokenLP.balanceOf(msg.sender);\n            require(tokenLP.allowance(msg.sender, address(this)) >= incomingLP, \"Insufficient LP allowance\");\n            require(incomingLP > 0, \"Incoming LP must be > 0\");\n    \n            IUniswapV2Pair pair = IUniswapV2Pair(fromTokenPair);\n            tokenA = pair.token0();\n            tokenB = pair.token1();\n            require(fromTokenPair == IUniswapV2Factory(_getRouter(fromRouterVer).factory()).getPair(tokenA, tokenB), \"Invalid token pair for this router\");\n    \n            tokenLP.safeTransferFrom(msg.sender, address(this), incomingLP);\n            (recdAmountA, recdAmountB) = _removeLiquidity(_getRouter(fromRouterVer), fromTokenPair, tokenA, tokenB, incomingLP, deadline);\n    \n            emit migratedOut(msg.sender, tokenA, recdAmountA);\n            emit migratedOut(msg.sender, tokenB, recdAmountB);\n        }\n\n        require(recdAmountA > 0 && recdAmountB > 0, \"Token amounts must not be zero\");\n\n        // add liquidity (as much as possible) to nowswap (Note: ratio determined by nowswap)\n        (sentAmountA, sentAmountB, outgoingLP) = _addNowswapLiquidity(tokenA, tokenB, recdAmountA, recdAmountB, deadline);\n\n        emit migratedIn(msg.sender, tokenA, sentAmountA);\n        emit migratedIn(msg.sender, tokenB, sentAmountB);\n\n        // keep any remaining token safe for later use by the sender. Can be withdrawn using withdrawUserTokens()\n        if (recdAmountA > sentAmountA) {\n            userBalance[msg.sender][tokenA] += (recdAmountA - sentAmountA);\n            totalUserBalance[tokenA] += (recdAmountA - sentAmountA);\n        }\n        if (recdAmountB > sentAmountB) {\n            userBalance[msg.sender][tokenB] += (recdAmountB - sentAmountB);\n            totalUserBalance[tokenB] +=(recdAmountB - sentAmountB);\n        }\n    }\n    \n    // convenience function for debugging\n    function getPairs(\n        RouterVersion fromRouter,\n        address tokenA,\n        address tokenB\n    )\n        external\n        view\n        returns (address uniPair, uint uniReserveA, uint uniReserveB, address nowPair, uint nowReserveA, uint nowReserveB)\n    {\n        uniPair = IUniswapV2Factory(_getRouter(fromRouter).factory()).getPair(tokenA, tokenB);\n        if (uniPair != address(0))\n            (uniReserveA, uniReserveB, ) = IUniswapV2Pair(uniPair).getReserves();\n        nowPair = IUniswapV2Factory(nowswapRouter.factory()).getPair(tokenA, tokenB);\n        if (nowPair != address(0))\n            (nowReserveA, nowReserveB, ) = IUniswapV2Pair(nowPair).getReserves();\n    }\n\n// ---------------------------------------------------------------------------------------------------------------------------\n// Token / ETH withdrawal functions\n// ---------------------------------------------------------------------------------------------------------------------------\n\n    function getUserBalance(address token)\n        external\n        view\n        returns (uint256)\n    {\n        require(token != address(0), \"Zero token address\");\n        return userBalance[msg.sender][token];\n    }\n\n    function withdrawUserTokens(address[] calldata tokens) \n        external \n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 amount;\n            require(tokens[i] != address(0), \"Zero token address\");\n\n            amount = userBalance[msg.sender][tokens[i]];\n            if (amount > 0) {\n                userBalance[msg.sender][tokens[i]] = 0;\n                totalUserBalance[tokens[i]] -= amount;\n\n                if (tokens[i] == wethTokenAddress) {\n                    Address.sendValue(payable(msg.sender), amount);\n                } else {\n                    IERC20(tokens[i]).safeTransfer(msg.sender, amount);\n                }\n            }\n        }\n    }\n\n    function withdrawOwnerTokens(address[] calldata tokens) \n        external \n        onlyOwner\n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 amount;\n            require(tokens[i] != address(0), \"Zero token address\");\n\n            if ((tokens[i] == wethTokenAddress) && (address(this).balance > totalUserBalance[wethTokenAddress])) {\n                amount = address(this).balance - totalUserBalance[wethTokenAddress];\n                Address.sendValue(payable(owner()), amount);\n            } else if (IERC20(tokens[i]).balanceOf(address(this)) > totalUserBalance[tokens[i]]) {\n                amount = IERC20(tokens[i]).balanceOf(address(this)) - totalUserBalance[tokens[i]];\n                IERC20(tokens[i]).safeTransfer(owner(), amount);\n            }\n        }\n    }\n\n    receive() external payable {\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\n    }\n\n\n// ---------------------------------------------------------------------------------------------------------------------------\n// Internal functions\n// ---------------------------------------------------------------------------------------------------------------------------\n\n    function _getRouter(RouterVersion routerVer) internal pure returns (IUniswapV2Router02) {\n        if (routerVer == RouterVersion.Sushiswap)\n            return sushiswapRouter;\n        else\n            return uniswapV2Router;\n    }\n    \n    function _approveToken(\n        address token, \n        address spender\n    ) \n        internal \n    {\n        require(token != address(0), \"Zero token address\");\n        IERC20 _token = IERC20(token);\n        if (_token.allowance(address(this), spender) > 0) \n            return;\n        else {\n            _token.safeApprove(spender, type(uint256).max);\n        }\n    }\n\n    function _approveToken(\n        address token,\n        address spender,\n        uint256 amount\n    ) \n        internal \n    {\n        require(token != address(0), \"Zero token address\");\n        IERC20 _token = IERC20(token);\n        if (_token.allowance(address(this), spender) != 0)\n            _token.safeApprove(spender, 0);\n        _token.safeApprove(spender, amount);\n    }\n\n    function _removeLiquidity(\n        IUniswapV2Router02 fromRouter,\n        address fromTokenPair,\n        address tokenA,\n        address tokenB,\n        uint256 incomingLP,\n        uint256 deadline\n    )\n        internal\n        returns (uint256 recdAmountA, uint256 recdAmountB)\n    {\n        _approveToken(fromTokenPair, address(fromRouter), incomingLP);\n\n        if (tokenA == wethTokenAddress)\n            (recdAmountB, recdAmountA) = fromRouter.removeLiquidityETH(tokenB, incomingLP, 1, 1, address(this), deadline);\n        else if (tokenB == wethTokenAddress)\n            (recdAmountA, recdAmountB) = fromRouter.removeLiquidityETH(tokenA, incomingLP, 1, 1, address(this), deadline);\n        else\n            (recdAmountA, recdAmountB) = fromRouter.removeLiquidity(tokenA, tokenB, incomingLP, 1, 1, address(this), deadline);\n    }\n    \n    function _addNowswapLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 desiredAmountA,\n        uint256 desiredAmountB,\n        uint256 deadline\n    )\n        internal\n        returns (uint256 sentAmountA, uint256 sentAmountB, uint256 outgoingLP)\n    {\n        _approveToken(tokenA, address(nowswapRouter), desiredAmountA);\n        _approveToken(tokenB, address(nowswapRouter), desiredAmountB);\n\n        if (tokenA == wethTokenAddress)\n            (sentAmountB, sentAmountA, outgoingLP) = nowswapRouter.addLiquidityETH{ value: desiredAmountA }(tokenB, desiredAmountB, 1, 1, msg.sender, deadline);\n        else if (tokenB == wethTokenAddress)\n            (sentAmountA, sentAmountB, outgoingLP) = nowswapRouter.addLiquidityETH{ value: desiredAmountB }(tokenA, desiredAmountA, 1, 1, msg.sender, deadline);\n        else\n            (sentAmountA, sentAmountB, outgoingLP) = nowswapRouter.addLiquidity(tokenA, tokenB, desiredAmountA, desiredAmountB, 1, 1, msg.sender, deadline);\n    }\n}\n"},"contracts/oz-0.8.0/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"contracts/oz-0.8.0/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/oz-0.8.0/IERC20.sol":{"content":"// SPDX-License-Identifier: GPL-2.0\npragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"contracts/oz-0.8.0/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"contracts/oz-0.8.0/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}}}