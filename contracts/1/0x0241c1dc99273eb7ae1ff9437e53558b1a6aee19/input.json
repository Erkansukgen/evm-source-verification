{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"check.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n  Copyright 2021 Flashbots: Scott Bigelow (scott@flashbots.net).\n*/\n\ncontract CheckAndSend {\n    address private immutable owner;\n\n    constructor() payable {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    receive() external payable {}\n\n    function rescue() external payable onlyOwner {\n        require(msg.value == 0);\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function _check32Bytes (\n        address _target,\n        bytes memory _payload,\n        bytes32 _resultMatch,\n        uint256 tipAmount\n    ) external payable {\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\n        require(_success, \"!success\");\n        require(_response.length >= 32, \"response less than 32 bytes\");\n        bytes32 _responseScalar;\n        assembly {\n            _responseScalar := mload(add(_response, 0x20))\n        }\n        require(_responseScalar > _resultMatch, \"response not increase\");\n        block.coinbase.call{value: tipAmount}(\"\");\n    }\n}"}}}