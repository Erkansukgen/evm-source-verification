{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "rvlvr.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.0 <0.9.0;\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n  function decimals() external view returns (uint8);\n  function symbol() external view returns (string memory);\n  function name() external view returns (string memory);\n  function getOwner() external view returns (address);\n  function balanceOf(address account) external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function allowance(address _owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\n    function allPairs(uint) external view returns (address lpPair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface AntiSnipe {\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp) external;\n    function setLpPair(address pair, bool enabled) external;\n    function setProtections(bool _as, bool _algo) external;\n    function setGasPriceLimit(uint256 gas) external;\n    function removeSniper(address account) external;\n    function getSniperAmt() external view returns (uint256);\n    function removeBlacklisted(address account) external;\n    function isBlacklisted(address account) external view returns (bool);\n    function setBlacklistEnabled(address account, bool enabled) external;\n}\n\ncontract TigerQueen is Context, IERC20 {\n    // Ownership moved to in-contract for customizability.\n    address private _owner;\n\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => bool) lpPairs;\n    uint256 private timeSinceLastPair = 0;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    mapping (address => bool) private _isExcludedFromFees;\n    mapping (address => bool) private _isExcluded;\n    address[] private _excluded;\n\n    mapping (address => bool) private presaleAddresses;\n    bool private allowedPresaleExclusion = true;\n    mapping (address => bool) private _liquidityHolders;\n\n    uint256 private startingSupply = 100_000_000_000_000;\n\n    string constant private _name = \"Tiger Queen\";\n    string constant private _symbol = \"TQUEEN\";\n\n    struct FeesStruct {\n        uint16 reflect;\n        uint16 liquidity;\n        uint16 marketing;\n    }\n\n    struct StaticValuesStruct {\n        uint16 maxReflect;\n        uint16 maxLiquidity;\n        uint16 maxMarketing;\n        uint16 masterTaxDivisor;\n    }\n\n    struct Ratios {\n        uint16 liquidity;\n        uint16 marketing;\n        uint16 total;\n    }\n\n    FeesStruct private currentTaxes = FeesStruct({\n        reflect: 0,\n        liquidity: 0,\n        marketing: 0\n        });\n\n    FeesStruct public _buyTaxes = FeesStruct({\n        reflect: 0,\n        liquidity: 250,\n        marketing: 750\n        });\n\n    FeesStruct public _sellTaxes = FeesStruct({\n        reflect: 0,\n        liquidity: 250,\n        marketing: 750\n        });\n\n    FeesStruct public _transferTaxes = FeesStruct({\n        reflect: 0,\n        liquidity: 0,\n        marketing: 0\n        });\n\n    Ratios public _ratios = Ratios({\n        liquidity: 250,\n        marketing: 750,\n        total: 1000\n        });\n\n    StaticValuesStruct public staticVals = StaticValuesStruct({\n        maxReflect: 0,\n        maxLiquidity: 250,\n        maxMarketing: 750,\n        masterTaxDivisor: 1000\n        });\n\n    uint256 private constant MAX = ~uint256(0);\n    uint8 private _decimals = 9;\n    uint256 private _tTotal = startingSupply * 10**_decimals;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n\n    IUniswapV2Router02 public dexRouter;\n    address public lpPair;\n\n    // PCS2 DEVNET ROUTER\n    //address constant private _routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\n    // UNI ROUTER\n    address constant private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\n    address payable private _marketingWallet = payable(0x22f350646C505c7FA33F9bDaC841950179B47Ca3);\n    \n    bool inSwap;\n    bool public contractSwapEnabled = false;\n\n    uint256 private maxTPercent = 15;\n    uint256 private maxTDivisor = 1000;\n    uint256 private maxWPercent = 1;\n    uint256 private maxWDivisor = 100;\n    uint256 private _maxTxAmount = (_tTotal * maxTPercent) / maxTDivisor;\n    uint256 public maxTxAmountUI = (startingSupply * maxTPercent) / maxTDivisor;\n    uint256 private _maxWalletSize = (_tTotal * maxWPercent) / maxWDivisor;\n    uint256 public maxWalletSizeUI = (startingSupply * maxWPercent) / maxWDivisor;\n\n    uint256 private swapThreshold = (_tTotal * 5) / 10000;\n    uint256 private swapAmount = (_tTotal * 5) / 1000;\n\n    bool public tradingEnabled = false;\n    bool public _hasLiqBeenAdded = false;\n    AntiSnipe antiSnipe;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event ContractSwapEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event SniperCaught(address sniperAddress);\n    \n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Caller =/= owner.\");\n        _;\n    }\n    \n    constructor () payable {\n        _rOwned[_msgSender()] = _rTotal;\n\n        // Set the owner.\n        _owner = msg.sender;\n\n        _approve(msg.sender, _routerAddress, type(uint256).max);\n        _approve(address(this), _routerAddress, type(uint256).max);\n\n        _isExcludedFromFees[owner()] = true;\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[DEAD] = true;\n        _liquidityHolders[owner()] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    receive() external payable {}\n\n//===============================================================================================================\n//===============================================================================================================\n//===============================================================================================================\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function transferOwner(address newOwner) external onlyOwner() {\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\n        setExcludedFromFees(_owner, false);\n        setExcludedFromFees(newOwner, true);\n        \n        if (_marketingWallet == payable(_owner))\n            _marketingWallet = payable(newOwner);\n        \n        if(balanceOf(_owner) > 0) {\n            _transfer(_owner, newOwner, balanceOf(_owner));\n        }\n        \n        _owner = newOwner;\n        emit OwnershipTransferred(_owner, newOwner);\n        \n    }\n\n    function renounceOwnership() public virtual onlyOwner() {\n        setExcludedFromFees(_owner, false);\n        _owner = address(0);\n        emit OwnershipTransferred(_owner, address(0));\n    }\n//===============================================================================================================\n//===============================================================================================================\n//===============================================================================================================\n\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\n    function decimals() external view override returns (uint8) { return _decimals; }\n    function symbol() external pure override returns (string memory) { return _symbol; }\n    function name() external pure override returns (string memory) { return _name; }\n    function getOwner() external view override returns (address) { return owner(); }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address sender, address spender, uint256 amount) private {\n        require(sender != address(0), \"ERC20: Zero Address\");\n        require(spender != address(0), \"ERC20: Zero Address\");\n\n        _allowances[sender][spender] = amount;\n        emit Approval(sender, spender, amount);\n    }\n\n    function approveContractContingency() public onlyOwner returns (bool) {\n        _approve(address(this), address(dexRouter), type(uint256).max);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] -= amount;\n        }\n\n        return _transfer(sender, recipient, amount);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\n        return true;\n    }\n\n    function setNewRouter(address newRouter) public onlyOwner() {\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\n        if (get_pair == address(0)) {\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\n        }\n        else {\n            lpPair = get_pair;\n        }\n        dexRouter = _newRouter;\n        _approve(address(this), address(dexRouter), type(uint256).max);\n    }\n\n    function setLpPair(address pair, bool enabled) external onlyOwner {\n        if (enabled == false) {\n            lpPairs[pair] = false;\n            antiSnipe.setLpPair(pair, false);\n        } else {\n            if (timeSinceLastPair != 0) {\n                require(block.timestamp - timeSinceLastPair > 3 days, \"Cannot set a new pair this week!\");\n            }\n            lpPairs[pair] = true;\n            timeSinceLastPair = block.timestamp;\n            antiSnipe.setLpPair(pair, true);\n        }\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return (_tTotal - (balanceOf(DEAD) + balanceOf(address(0))));\n    }\n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\n        _isExcludedFromFees[account] = enabled;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function setExcludedFromReward(address account, bool enabled) public onlyOwner {\n        if (enabled == true) {\n            require(!_isExcluded[account], \"Account is already excluded.\");\n            if(_rOwned[account] > 0) {\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\n            }\n            _isExcluded[account] = true;\n            _excluded.push(account);\n        } else if (enabled == false) {\n            require(_isExcluded[account], \"Account is already included.\");\n            if(_excluded.length == 1){\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n            } else {\n                for (uint256 i = 0; i < _excluded.length; i++) {\n                    if (_excluded[i] == account) {\n                        _excluded[i] = _excluded[_excluded.length - 1];\n                        _tOwned[account] = 0;\n                        _isExcluded[account] = false;\n                        _excluded.pop();\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    function setInitializer(address initializer) external onlyOwner {\n        require(!_hasLiqBeenAdded, \"Liquidity is already in.\");\n        require(initializer != address(this), \"Can't be self.\");\n        antiSnipe = AntiSnipe(initializer);\n    }\n\n    function setBlacklistEnabled(address account, bool enabled) external onlyOwner {\n        antiSnipe.setBlacklistEnabled(account, enabled);\n    }\n\n    function removeSniper(address account) external onlyOwner {\n        antiSnipe.removeSniper(account);\n    }\n\n    function isBlacklisted(address account) public view returns (bool) {\n        return antiSnipe.isBlacklisted(account);\n    }\n\n    function getSniperAmt() public view returns (uint256) {\n        return antiSnipe.getSniperAmt();\n    }\n\n    function setProtectionSettings(bool _antiSnipe, bool _antiSpecial) external onlyOwner {\n        antiSnipe.setProtections(_antiSnipe, _antiSpecial);\n    }\n    \n    function setTaxesBuy(uint16 reflect, uint16 liquidity, uint16 marketing) external onlyOwner {\n        require(reflect <= staticVals.maxReflect\n                && liquidity <= staticVals.maxLiquidity\n                && marketing <= staticVals.maxMarketing);\n        require(liquidity + reflect + marketing <= 3450);\n        _buyTaxes.liquidity = liquidity;\n        _buyTaxes.reflect = reflect;\n        _buyTaxes.marketing = marketing;\n    }\n\n    function setTaxesSell(uint16 reflect, uint16 liquidity, uint16 marketing) external onlyOwner {\n        require(reflect <= staticVals.maxReflect\n                && liquidity <= staticVals.maxLiquidity\n                && marketing <= staticVals.maxMarketing);\n        require(liquidity + reflect + marketing <= 3450);\n        _sellTaxes.liquidity = liquidity;\n        _sellTaxes.reflect = reflect;\n        _sellTaxes.marketing = marketing;\n    }\n\n    function setTaxesTransfer(uint16 reflect, uint16 liquidity, uint16 marketing) external onlyOwner {\n        require(reflect <= staticVals.maxReflect\n                && liquidity <= staticVals.maxLiquidity\n                && marketing <= staticVals.maxMarketing);\n        require(liquidity + reflect + marketing <= 3450);\n        _transferTaxes.liquidity = liquidity;\n        _transferTaxes.reflect = reflect;\n        _transferTaxes.marketing = marketing;\n    }\n\n    function setRatios(uint16 liquidity, uint16 marketing) external onlyOwner {\n        require (liquidity + marketing >= 99, \"Must add up to 100% or 99%.\");\n        _ratios.liquidity = liquidity;\n        _ratios.marketing = marketing;\n        _ratios.total = liquidity + marketing;\n    }\n\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\n        uint256 check = (_tTotal * percent) / divisor;\n        require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\n        _maxTxAmount = check;\n        maxTxAmountUI = (startingSupply * percent) / divisor;\n    }\n\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\n        uint256 check = (_tTotal * percent) / divisor;\n        require(check >= (_tTotal / 1000), \"Max Wallet amt must be above 0.1% of total supply.\");\n        _maxWalletSize = check;\n        maxWalletSizeUI = (startingSupply * percent) / divisor;\n    }\n\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\n    }\n\n    function setWallets(address payable marketingWallet) external onlyOwner {\n        _marketingWallet = payable(marketingWallet);\n    }\n\n    function setContractSwapEnabled(bool _enabled) public onlyOwner {\n        contractSwapEnabled = _enabled;\n        emit ContractSwapEnabledUpdated(_enabled);\n    }\n\n    function _hasLimits(address from, address to) private view returns (bool) {\n        return from != owner()\n            && to != owner()\n            && !_liquidityHolders[to]\n            && !_liquidityHolders[from]\n            && to != DEAD\n            && to != address(0)\n            && from != address(this);\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount / currentRate;\n    }\n\n    bool public pausedOnce;\n    bool public oneTimePause;\n\n    function pauseTrading(bool enabled) external onlyOwner {\n        if(enabled){\n            require(!pausedOnce, \"Can only pause once.\");\n            oneTimePause = enabled;\n            pausedOnce = true;\n        } else {\n            oneTimePause = enabled;\n        }\n    }\n\n    function createLP() external onlyOwner {\n        dexRouter = IUniswapV2Router02(_routerAddress);\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\n        lpPairs[lpPair] = true;\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(!oneTimePause, \"Trading is currently paused.\");\n        if(_hasLimits(from, to)) {\n            if(!tradingEnabled) {\n                revert(\"Trading not yet enabled!\");\n            }\n            if(lpPairs[from] || lpPairs[to]){\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n            }\n            if(to != _routerAddress && !lpPairs[to]) {\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\n            }\n        }\n\n        bool takeFee = true;\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\n            takeFee = false;\n        }\n\n        if (lpPairs[to]) {\n            if (!inSwap\n                && contractSwapEnabled\n                && !presaleAddresses[to]\n                && !presaleAddresses[from]\n            ) {\n                uint256 contractTokenBalance = balanceOf(address(this));\n                if (contractTokenBalance >= swapThreshold) {\n                    if(contractTokenBalance >= swapAmount) { contractTokenBalance = swapAmount; }\n                    contractSwap(contractTokenBalance);\n                }\n            }      \n        } \n        return _finalizeTransfer(from, to, amount, takeFee);\n    }\n\n    function contractSwap(uint256 contractTokenBalance) private lockTheSwap {\n        if (_ratios.total == 0)\n            return;\n\n        if(_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\n        }\n\n        uint256 toLiquify = ((contractTokenBalance * _ratios.liquidity) / _ratios.total) / 2;\n\n        uint256 toSwapForEth = contractTokenBalance - toLiquify;\n        \n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            toSwapForEth,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 liquidityBalance = ((address(this).balance * _ratios.liquidity) / _ratios.total) / 2;\n\n        if (toLiquify > 0) {\n            dexRouter.addLiquidityETH{value: liquidityBalance}(\n                address(this),\n                toLiquify,\n                0, // slippage is unavoidable\n                0, // slippage is unavoidable\n                DEAD,\n                block.timestamp\n            );\n            emit SwapAndLiquify(toLiquify, liquidityBalance, toLiquify);\n        }\n        if (contractTokenBalance - toLiquify > 0) {\n            _marketingWallet.transfer(address(this).balance);\n        }\n    }\n\n    function _checkLiquidityAdd(address from, address to) private {\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\n        if (!_hasLimits(from, to) && to == lpPair) {\n            _liquidityHolders[from] = true;\n            _hasLiqBeenAdded = true;\n            if(address(antiSnipe) == address(0)){\n                antiSnipe = AntiSnipe(address(this));\n            }\n            contractSwapEnabled = true;\n            emit ContractSwapEnabledUpdated(true);\n        }\n    }\n\n    function enableTrading() public onlyOwner {\n        require(!tradingEnabled, \"Trading already enabled!\");\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\n        setExcludedFromReward(address(this), true);\n        setExcludedFromReward(lpPair, true);\n        if(address(antiSnipe) == address(0)){\n            antiSnipe = AntiSnipe(address(this));\n        }\n        try antiSnipe.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp)) {} catch {}\n        tradingEnabled = true;\n    }\n\n    function sweepContingency() external onlyOwner {\n        require(!_hasLiqBeenAdded, \"Cannot call after liquidity.\");\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    struct ExtraValues {\n        uint256 tTransferAmount;\n        uint256 tFee;\n        uint256 tLiquidity;\n\n        uint256 rTransferAmount;\n        uint256 rAmount;\n        uint256 rFee;\n    }\n\n    function _finalizeTransfer(address from, address to, uint256 tAmount, bool takeFee) private returns (bool) {\n        if (!_hasLiqBeenAdded) {\n            _checkLiquidityAdd(from, to);\n            if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\n                revert(\"Only owner can transfer at this time.\");\n            }\n        }\n\n        ExtraValues memory values = _getValues(from, to, tAmount, takeFee);\n\n        _rOwned[from] = _rOwned[from] - values.rAmount;\n        _rOwned[to] = _rOwned[to] + values.rTransferAmount;\n\n        if (_isExcluded[from] && !_isExcluded[to]) {\n            _tOwned[from] = _tOwned[from] - tAmount;\n        } else if (!_isExcluded[from] && _isExcluded[to]) {\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;  \n        } else if (_isExcluded[from] && _isExcluded[to]) {\n            _tOwned[from] = _tOwned[from] - tAmount;\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;\n        }\n\n        if (values.tLiquidity > 0)\n            _takeLiquidity(from, values.tLiquidity);\n        if (values.rFee > 0 || values.tFee > 0)\n            _rTotal -= values.rFee;\n            _tFeeTotal += values.tFee;\n\n        emit Transfer(from, to, values.tTransferAmount);\n        return true;\n    }\n\n    function _getValues(address from, address to, uint256 tAmount, bool takeFee) private returns (ExtraValues memory) {\n        ExtraValues memory values;\n        uint256 currentRate = _getRate();\n\n        values.rAmount = tAmount * currentRate;\n\n        if (_hasLimits(from, to)) {\n            bool checked;\n            try antiSnipe.checkUser(from, to, tAmount) returns (bool check) {\n                checked = check;\n            } catch {\n                revert();\n            }\n\n            if(!checked) {\n                revert();\n            }\n        }\n\n        if(takeFee) {\n            if (lpPairs[to]) {\n                currentTaxes.reflect = _sellTaxes.reflect;\n                currentTaxes.liquidity = _sellTaxes.liquidity;\n                currentTaxes.marketing = _sellTaxes.marketing;\n            } else if (lpPairs[from]) {\n                currentTaxes.reflect = _buyTaxes.reflect;\n                currentTaxes.liquidity = _buyTaxes.liquidity;\n                currentTaxes.marketing = _buyTaxes.marketing;\n            } else {\n                currentTaxes.reflect = _transferTaxes.reflect;\n                currentTaxes.liquidity = _transferTaxes.liquidity;\n                currentTaxes.marketing = _transferTaxes.marketing;\n            }\n\n            values.tFee = (tAmount * currentTaxes.reflect) / staticVals.masterTaxDivisor;\n            values.tLiquidity = (tAmount * (currentTaxes.liquidity + currentTaxes.marketing)) / staticVals.masterTaxDivisor;\n            values.tTransferAmount = tAmount - (values.tFee + values.tLiquidity);\n\n            values.rFee = values.tFee * currentRate;\n        } else {\n            values.tFee = 0;\n            values.tLiquidity = 0;\n            values.tTransferAmount = tAmount;\n\n            values.rFee = 0;\n        }\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tLiquidity * currentRate));\n        return values;\n    }\n\n    function _getRate() internal view returns(uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return _rTotal / _tTotal;\n            rSupply = rSupply - _rOwned[_excluded[i]];\n            tSupply = tSupply - _tOwned[_excluded[i]];\n        }\n        if (rSupply < _rTotal / _tTotal) return _rTotal / _tTotal;\n        return rSupply / tSupply;\n    }\n\n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\n        _rOwned[address(this)] = _rOwned[address(this)] + (tLiquidity * _getRate());\n        if(_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\n        emit Transfer(sender, address(this), tLiquidity); // Transparency is the key to success.\n    }\n}"
    }
  }
}