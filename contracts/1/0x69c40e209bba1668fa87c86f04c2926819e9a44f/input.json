{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/arb-bot/contracts/ArbBot.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\nimport \"../../import/github/Uniswap/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"../../import/github/Uniswap/uniswap-v1/IUniswapExchangeInterface.sol\";\nimport \"../../import/github/KyberNetwork/smart-contracts/contracts/sol6/IKyberNetworkProxy.sol\";\nimport \"../../import/github/Balancer/exchange-proxy/contracts/ExchangeProxy.sol\";\nimport \"../../import/github/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\n\ncontract ArbBot {\n\n\n    //\n    // Chain config\n    //\n    \n    uint internal constant MAINNET = 1;\n    uint internal constant ROPSTEN = 2;\n    uint internal constant KOVAN = 3;\n\n    //\n    // Exch config\n    //\n    \n    address internal constant UNISWAP_V2_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n  \n    address internal constant SUSHISWAP_V1_MAINNET_ROUTER_ADDRESS = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n\n    address internal constant KYBER_V1_MAINNET_NETWORK_PROXY = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    address internal constant KYBER_V1_ROPSTEN_NETWORK_PROXY = 0xd719c34261e099Fdb33030ac8909d5788D3039C4;\n    address internal constant KYBER_V1_KOVAN_NETWORK_PROXY = 0xc153eeAD19e0DBbDb3462Dcc2B703cC6D738A37c;\n\n    address payable internal constant BALANCER_V1_MAINNET_EXCHANGE_ADDRESS = 0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21;\n    address payable internal constant BALANCER_V1_KOVAN_EXCHANGE_ADDRESS = 0x4e67bf5bD28Dd4b570FBAFe11D0633eCbA2754Ec;\n    \n    //\n    // Trade config\n    //\n    \n    uint internal constant UNISWAP_V2 = 1;\n    uint internal constant SUSHISWAP_V1 = 2;\n    uint internal constant UNISWAP_V1 = 3;\n    uint internal constant KYBER_V1 = 4;\n    uint internal constant BALANCER_V1 = 5;\n    \n    //\n    // Misc\n    //\n    \n    address internal constant WETH_ADDRESS_MAINNET = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address internal constant WETH_ADDRESS_ROPSTEN = address(0xbCA556c912754Bc8E7D4Aad20Ad69a1B1444F42d);\n    address internal constant WETH_ADDRESS_KOVAN = address(0xd0A1E359811322d97991E03f863a0C30C2cF029C);\n\n    address internal constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    ERC20 internal constant ETH_TOKEN = ERC20(ETH_ADDRESS);\n    \n    uint internal constant MAX_BALANCER_V1_POOLS = 1;\n    \n    uint internal constant MAX_QTY = (10**28); // 10B tokens\n    uint internal constant DEADLINE_OFFSET_SECS = 15;\n\n\n    uint private chainId;\n    address private owner;\n    address private wethAddress;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    IUniswapV2Router02 private sushiswapV1Router;\n    IKyberNetworkProxy private kyberV1NetworkProxy;\n    ExchangeProxy private balancerV1ExchangeProxy;\n    \n    // modifier to check if caller is owner\n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n\n    constructor(uint _chainId) public {\n        require(((_chainId == MAINNET) || (_chainId == ROPSTEN) || (_chainId == KOVAN)), 'chainId must be MAINNET, ROPSTEN or KOVAN');\n        chainId = _chainId;\n        \n        owner = msg.sender;\n        \n        // 3. Uniswap V1 is done on individual exchanges\n\n        // 1. Uniswap V2 addresses consistent across chains\n        uniswapV2Router = IUniswapV2Router02(UNISWAP_V2_ROUTER_ADDRESS);\n        \n        if (chainId == MAINNET) {\n            wethAddress = WETH_ADDRESS_MAINNET;\n            \n            // 2. Sushiswap V1\n            sushiswapV1Router = IUniswapV2Router02(SUSHISWAP_V1_MAINNET_ROUTER_ADDRESS);\n            // 4. Kyber V1\n            kyberV1NetworkProxy = IKyberNetworkProxy(KYBER_V1_MAINNET_NETWORK_PROXY);\n            // 5. Balancer V1\n            balancerV1ExchangeProxy = ExchangeProxy(BALANCER_V1_MAINNET_EXCHANGE_ADDRESS);\n        }\n        else if (chainId == ROPSTEN) {\n            wethAddress = WETH_ADDRESS_ROPSTEN;\n            \n            // 2. Sushiswap V1 - not on ROPSTEN\n            // 5. Balancer V1 - not on ROPSTEN\n            // 4. Kyber V1\n            kyberV1NetworkProxy = IKyberNetworkProxy(KYBER_V1_ROPSTEN_NETWORK_PROXY);\n        }\n        else if (chainId == KOVAN) {\n            wethAddress = WETH_ADDRESS_KOVAN;\n                        \n            // 2. Sushiswap V1 - not on KOVAN\n            // 4. Kyber V1\n            kyberV1NetworkProxy = IKyberNetworkProxy(KYBER_V1_KOVAN_NETWORK_PROXY);\n            // 5. Balancer V1\n            balancerV1ExchangeProxy = ExchangeProxy(BALANCER_V1_KOVAN_EXCHANGE_ADDRESS);\n        }\n    }\n    \n    \n    //\n    // Public trade functions\n    //\n\n    \t\n    function doTrade(\n        bool isDebug,\n        uint buyExch, \n    \tuint sellExch, \n    \taddress targetAddress, \n    \tuint minTokenAmountOut, \n    \tuint minBaseTotalOut, \n    \taddress exchAddress, // Uniswap v1\n    \tuint buyExchangeRate, // Kyber v1\n    \tuint sellExchangeRate // Kyber v1\n    \t) public isOwner payable {\n    \t  \n    \t    require((msg.value > 0), 'msg.value must be > 0');\n            require(_isValidExch(buyExch), _concatStrVal1('buyExch invalid, buyExch: ', buyExch));\n            require(_isValidExch(sellExch), _concatStrVal1('sellExch invalid, sellExch: ', sellExch));\n            require((buyExch != sellExch), _concatStrVal2('buy and sell exch can not be the same, buyExch: ', buyExch, ', sellExch: ', sellExch));\n            require((targetAddress != address(0)), 'targetAddress can not be null');\n            require(_isValidTargetAddress(targetAddress), 'targetAddress can not be ETH or WETH');\n            require((minTokenAmountOut > 0), _concatStrVal1('minTokenAmountOut must be > 0, minTokenAmountOut: ', minTokenAmountOut));\n            // require((minBaseTotalOut > msg.value), 'minBaseTotalOut must be > eth in');\n\n            if ((buyExch == UNISWAP_V1) || (sellExch == UNISWAP_V1)) {\n                require((exchAddress != address(0)), 'exchAddress can not be null');\n            }\n\n    \t    if (buyExch == KYBER_V1) {\n                require((buyExchangeRate > 0), _concatStrVal1('buyExchangeRate must be > 0, buyExchangeRate: ', buyExchangeRate));\n            }   \n    \t        \n    \t    if (sellExch == KYBER_V1) {\n                require((sellExchangeRate > 0), _concatStrVal1('sellExchangeRate must be > 0, sellExchangeRate: ', sellExchangeRate));\n            } \n            \n            // Make the buy\n            \n            uint tokenAmountOut;\n            \n            if (buyExch == UNISWAP_V2) {\n                \n                if (isDebug) {\n                    uint expUniswapV2TokenAmountOut = _getUniswapV2AmountOut(true, targetAddress, msg.value);\n                    require((expUniswapV2TokenAmountOut >= minTokenAmountOut), _concatStr2(_concatStrVal2('expUniswapV2TokenAmountOut [', expUniswapV2TokenAmountOut, '] must be >= minTokenAmountOut [', minTokenAmountOut), ']'));\n                }\n                \n                tokenAmountOut = _doUniswapV2Buy(targetAddress, minTokenAmountOut);\n                \n            }\n            else if (buyExch == SUSHISWAP_V1) {\n                \n                if (isDebug) {\n                    uint expSushiswapV1TokenAmountOut = _getSushiswapV1AmountOut(true, targetAddress, msg.value);\n                    require((expSushiswapV1TokenAmountOut >= minTokenAmountOut), _concatStr2(_concatStrVal2('expSushiswapV1TokenAmountOut [', expSushiswapV1TokenAmountOut, '] must be >= minTokenAmountOut [', minTokenAmountOut), ']'));\n                }\n                \n                tokenAmountOut = _doSushiswapV1Buy(targetAddress, minTokenAmountOut);\n                \n            }\n            else if (buyExch == UNISWAP_V1) {\n\n                if (isDebug) {\n                    uint expUniswapV1TokenAmountOut = _getUniswapV1AmountOut(true, exchAddress, msg.value);\n                    require((expUniswapV1TokenAmountOut >= minTokenAmountOut), _concatStr2(_concatStrVal2('expUniswapV1TokenAmountOut [', expUniswapV1TokenAmountOut, '] must be >= minTokenAmountOut [', minTokenAmountOut), ']'));\n                }\n                \n                tokenAmountOut = _doUniswapV1Buy(exchAddress, minTokenAmountOut);\n                \n            }\n            else if (buyExch == KYBER_V1) {\n                \n                if (isDebug) {\n                    uint expBuyExchangeRate = _getKyberV1ExpectedRate(true, targetAddress, msg.value);\n                    require((expBuyExchangeRate >= buyExchangeRate), _concatStr2(_concatStrVal2('expBuyExchangeRate [', expBuyExchangeRate, '] must be >= buyExchangeRate [', buyExchangeRate), ']'));\n                }\n                \n                tokenAmountOut = _doKyberV1Buy(targetAddress, buyExchangeRate);\n                \n            } \n            else if (buyExch == BALANCER_V1) {\n                \n                if (isDebug) {\n                    uint expBalancerV1TokenAmountOut = _getBalancerV1AmountOut(true, targetAddress, msg.value);\n                    require((expBalancerV1TokenAmountOut >= minTokenAmountOut), _concatStr2(_concatStrVal2('expBalancerV1TokenAmountOut [', expBalancerV1TokenAmountOut, '] must be >= minTokenAmountOut [', minTokenAmountOut), ']'));\n                }\n                \n                tokenAmountOut = _doBalancerV1Buy(targetAddress, minTokenAmountOut);\n                \n            }\n            \n            require((tokenAmountOut >= minTokenAmountOut), _concatStr2(_concatStrVal2('tokenAmountOut [', tokenAmountOut, '] must be >= minTokenAmountOut [', minTokenAmountOut), ']'));\n\n            // Make the sell\n            \n            uint baseTotalOut;\n            \n            if (sellExch == UNISWAP_V2) {\n                \n                if (isDebug) {\n                    uint expUniswapV2BaseTotalOut = _getUniswapV2AmountOut(false, targetAddress, tokenAmountOut);\n                    require((expUniswapV2BaseTotalOut >= minBaseTotalOut), _concatStr2(_concatStrVal2('expUniswapV2BaseTotalOut [', expUniswapV2BaseTotalOut, '] must be >= minBaseTotalOut [', minBaseTotalOut), ']'));\n                }\n                \n                baseTotalOut = _doUniswapV2Sell(targetAddress, tokenAmountOut, minBaseTotalOut);\n                \n            }\n            else if (sellExch == SUSHISWAP_V1) {\n                \n                if (isDebug) {\n                    uint expSushiswapV1BaseTotalOut = _getSushiswapV1AmountOut(false, targetAddress, tokenAmountOut);\n                    require((expSushiswapV1BaseTotalOut >= minBaseTotalOut), _concatStr2(_concatStrVal2('expSushiswapV1BaseTotalOut [', expSushiswapV1BaseTotalOut, '] must be >= minBaseTotalOut [', minBaseTotalOut), ']'));\n                }\n                \n                baseTotalOut = _doSushiswapV1Sell(targetAddress, tokenAmountOut, minBaseTotalOut);\n                \n            }\n            else if (sellExch == UNISWAP_V1) {\n                \n                if (isDebug) {\n                    uint expUniswapV1BaseTotalOut = _getUniswapV1AmountOut(false, exchAddress, tokenAmountOut);\n                    require((expUniswapV1BaseTotalOut >= minBaseTotalOut), _concatStr2(_concatStrVal2('expUniswapV1BaseTotalOut [', expUniswapV1BaseTotalOut, '] must be >= minBaseTotalOut [', minBaseTotalOut), ']'));\n                }\n                \n                baseTotalOut = _doUniswapV1Sell(targetAddress, tokenAmountOut, minBaseTotalOut, exchAddress);\n                \n            }\n            else if (sellExch == KYBER_V1) {\n                \n                if (isDebug) {\n                    uint expSellExchangeRate = _getKyberV1ExpectedRate(false, targetAddress, minTokenAmountOut);\n                    require((expSellExchangeRate >= sellExchangeRate), _concatStr2(_concatStrVal2('expSellExchangeRate [', expSellExchangeRate, '] must be >= sellExchangeRate [', sellExchangeRate), ']'));\n                }\n                \n                baseTotalOut = _doKyberV1Sell(targetAddress, tokenAmountOut, sellExchangeRate);\n                \n            }\n            else if (sellExch == BALANCER_V1) {\n                \n                if (isDebug) {\n                    uint expBalancerV1BaseTotalOut = _getBalancerV1AmountOut(false, targetAddress, tokenAmountOut);\n                    require((expBalancerV1BaseTotalOut >= minBaseTotalOut), _concatStr2(_concatStrVal2('expBalancerV1BaseTotalOut [', expBalancerV1BaseTotalOut, '] must be >= minBaseTotalOut [', minBaseTotalOut), ']'));\n                }\n                \n                baseTotalOut = _doBalancerV1Sell(targetAddress, tokenAmountOut, minBaseTotalOut);\n                \n            }\n            \n            require((baseTotalOut >= minBaseTotalOut), _concatStr2(_concatStrVal2('baseTotalOut [', baseTotalOut, '] must be >= minBaseTotalOut [', minBaseTotalOut), ']'));\n\n    }\n\n    \n    //\n    // Public exchange functions\n    //\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function doUniswapV1Buy(address exchAddress, uint minTokenAmountOut) public isOwner payable {\n        _doUniswapV1Buy(exchAddress, minTokenAmountOut);\n    }\n\n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function doUniswapV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut, address exchAddress) public isOwner {\n        _doUniswapV1Sell(targetAddress, tokenAmountIn, minBaseTotalOut, exchAddress);\n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function doUniswapV2Buy(address targetAddress, uint minTokenAmountOut) public isOwner payable {\n        _doUniswapV2Buy(targetAddress, minTokenAmountOut);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function doUniswapV2Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) public isOwner {\n        _doUniswapV2Sell(targetAddress, tokenAmountIn, minBaseTotalOut);\n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function doSushiswapV1Buy(address targetAddress, uint minTokenAmountOut) public isOwner payable {\n        _doSushiswapV1Buy(targetAddress, minTokenAmountOut);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function doSushiswapV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) public isOwner {\n        _doSushiswapV1Sell(targetAddress, tokenAmountIn, minBaseTotalOut);\n    }\n\n\n    // Input: eth from wallet; output: tokens to contract\n    // buyExchangeRate - must be decimalised\n    function doKyberV1Buy(address targetAddress, uint buyExchangeRate) public isOwner payable {\n        _doKyberV1Buy(targetAddress, buyExchangeRate);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, sellExchangeRate - must be decimalised\n    function doKyberV1Sell(address targetAddress, uint tokenAmountIn, uint sellExchangeRate) public isOwner {\n        _doKyberV1Sell(targetAddress, tokenAmountIn, sellExchangeRate);\n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function doBalancerV1Buy(address targetAddress, uint minTokenAmountOut) public isOwner payable {\n        _doBalancerV1Buy(targetAddress, minTokenAmountOut);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function doBalancerV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) public isOwner {\n        _doBalancerV1Sell(targetAddress, tokenAmountIn, minBaseTotalOut);\n    }\n\n    \n    //\n    // Public trade prediction\n    //\n    \n    \n    function getUniswapV1AmountOut(bool isBuy, address exchAddress, uint amountIn) public isOwner view returns (uint) {\n        return _getUniswapV1AmountOut(isBuy, exchAddress, amountIn);\n    }\n    \n    \n    function getUniswapV2AmountOut(bool isBuy, address targetAddress, uint amountIn) public isOwner view returns (uint) {\n        return _getUniswapV2AmountOut(isBuy, targetAddress, amountIn);\n    }\n    \n    \n    function getSushiswapV1AmountOut(bool isBuy, address targetAddress, uint amountIn) public isOwner view returns (uint) {\n        return _getSushiswapV1AmountOut(isBuy, targetAddress, amountIn);\n    }\n    \n    \n    function getKyberV1ExpectedRate(bool isBuy, address targetAddress, uint amountIn) public isOwner view returns (uint) {\n        return _getKyberV1ExpectedRate(isBuy, targetAddress, amountIn);\n    }\n    \n    \n    function getBalancerV1AmountOut(bool isBuy, address targetAddress, uint amountIn) public isOwner view returns (uint) {\n        return _getBalancerV1AmountOut(isBuy, targetAddress, amountIn);\n    }\n    \n    \n    //\n    // Public eth/token in/out functions\n    //\n\n\n    // Get contract's token balance\n    function getTokenBalance(address targetAddress) public isOwner view returns (uint _balance) {\n        ERC20 targetToken = ERC20(targetAddress);\n        uint balance = targetToken.balanceOf(address(this));\n        return balance;\n    }\n    \n\n    // Transfer tokens from contract to wallet -\n    // this requires approving this contract on the token before calling this function\n    function doTokenOut(address targetAddress, uint tokenAmountOut) public isOwner returns (bool) {\n        ERC20 targetToken = ERC20(targetAddress);\n        targetToken.transfer(owner, tokenAmountOut);\n        return true;\n    }\n    \n    \n    // Transfer eth to wallet\n    function doEthOut(uint ethOut) public isOwner {\n        payable(owner).transfer(ethOut);\n    }\n    \n    \n    //\n    // Public contract functions\n    //\n    \n    \n    function selfDestruct() public isOwner {\n        selfdestruct(payable(owner));\n    }\n\n\n    // important to receive ETH\n    receive() payable external {}\n    \n    \n    //\n    // Private exchange functions\n    //\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function _doUniswapV1Buy(address exchAddress, uint minTokenAmountOut) private returns (uint) {\n        \n        UniswapExchangeInterface uniswapV1Exchange = UniswapExchangeInterface(exchAddress);\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n        \n        uint tokenAmountOut = uniswapV1Exchange.ethToTokenSwapInput{ value: msg.value }(minTokenAmountOut, deadline);\n        \n        return tokenAmountOut;\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function _doUniswapV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut, address exchAddress) private returns (uint) {\n        \n        _doExchangeApproval(targetAddress, tokenAmountIn, exchAddress);\n\n        UniswapExchangeInterface uniswapV1Exchange = UniswapExchangeInterface(exchAddress);\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n        \n        uint baseTotalOut = uniswapV1Exchange.tokenToEthTransferInput(tokenAmountIn, minBaseTotalOut, deadline, msg.sender);\n        \n        return baseTotalOut;\n    }\n\n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function _doUniswapV2Buy(address targetAddress, uint minTokenAmountOut) private returns (uint) {\n        return _doUniswapV2BuyCommon(targetAddress, minTokenAmountOut, uniswapV2Router);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function _doUniswapV2Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) private returns (uint) {\n        return _doUniswapV2SellCommon(targetAddress, tokenAmountIn, minBaseTotalOut, uniswapV2Router);\n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function _doSushiswapV1Buy(address targetAddress, uint minTokenAmountOut) private returns (uint) {\n        return _doUniswapV2BuyCommon(targetAddress, minTokenAmountOut, sushiswapV1Router);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function _doSushiswapV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) private returns (uint) {\n        return _doUniswapV2SellCommon(targetAddress, tokenAmountIn, minBaseTotalOut, sushiswapV1Router);\n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function _doUniswapV2BuyCommon(address targetAddress, uint minTokenAmountOut, IUniswapV2Router02 _uniswapV2Router) private returns (uint) {\n        \n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = targetAddress;\n    \n        address to = address(this);\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n\n        uint[] memory amounts = _uniswapV2Router.swapExactETHForTokens{ value: msg.value }(minTokenAmountOut, path, to, deadline);\n        \n        // amounts[1] will contain token amount out\n        uint tokenAmountOut = amounts[1];\n        \n        return tokenAmountOut;\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function _doUniswapV2SellCommon(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut, IUniswapV2Router02 _uniswapV2Router) private returns (uint) {\n\n        _doExchangeApproval(targetAddress, tokenAmountIn, address(_uniswapV2Router));\n\n        address[] memory path = new address[](2);\n        path[0] = targetAddress;\n        path[1] = uniswapV2Router.WETH();\n    \n        address to = msg.sender;\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n\n        uint[] memory amounts = _uniswapV2Router.swapExactTokensForETH(tokenAmountIn, minBaseTotalOut, path, to, deadline);\n\n        // amounts[1] will contain base total out\n        uint baseTotalOut = amounts[1];\n        \n        return baseTotalOut;\n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // buyExchangeRate - must be decimalised\n    function _doKyberV1Buy(address targetAddress, uint buyExchangeRate) private returns (uint) {\n        \n        ERC20 targetToken = ERC20(targetAddress);\n        \n        bytes memory hint;\n        \n        uint tokenAmountOut = kyberV1NetworkProxy.tradeWithHintAndFee{value: msg.value}(\n            ETH_TOKEN,\n            msg.value,\n            targetToken,\n            address(this),\n            MAX_QTY,\n            buyExchangeRate,\n            address(0),\n            0,\n            hint);\n       \n       return tokenAmountOut;     \n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, sellExchangeRate - must be decimalised\n    function _doKyberV1Sell(address targetAddress, uint tokenAmountIn, uint sellExchangeRate) private returns (uint) {\n        \n        _doExchangeApproval(targetAddress, tokenAmountIn, address(kyberV1NetworkProxy));\n\n        ERC20 targetToken = ERC20(targetAddress);\n        \n        bytes memory hint;\n        \n        uint baseTotalOut = kyberV1NetworkProxy.tradeWithHintAndFee(\n            targetToken,\n            tokenAmountIn,\n            ETH_TOKEN,\n            msg.sender,\n            MAX_QTY,\n            sellExchangeRate,\n            address(0),\n            0,\n            hint);\n        \n        return baseTotalOut;  \n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function _doBalancerV1Buy(address targetAddress, uint minTokenAmountOut) private returns (uint) {\n        TokenInterface tokenIn = TokenInterface(ETH_ADDRESS);\n        TokenInterface tokenOut = TokenInterface(targetAddress);\n        \n        uint tokenAmountOut = balancerV1ExchangeProxy.smartSwapExactIn{ value: msg.value }(tokenIn, tokenOut, msg.value, minTokenAmountOut, MAX_BALANCER_V1_POOLS);\n        \n        return tokenAmountOut;\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function _doBalancerV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) private returns (uint) {\n        \n        _doExchangeApproval(targetAddress, tokenAmountIn, address(balancerV1ExchangeProxy));\n\n        TokenInterface tokenIn = TokenInterface(targetAddress);\n        TokenInterface tokenOut = TokenInterface(ETH_ADDRESS);\n        \n        uint baseTotalOut = balancerV1ExchangeProxy.smartSwapExactIn(tokenIn, tokenOut, tokenAmountIn, minBaseTotalOut, MAX_BALANCER_V1_POOLS);\n        \n        // Manually transfer eth back out to wallet\n        payable(owner).transfer(baseTotalOut);\n\n        return baseTotalOut;\n    }\n    \n    \n    //\n    // Private trade prediction\n    //\n   \n    \n    function _getUniswapV1AmountOut(bool isBuy, address exchAddress, uint amountIn) private view returns (uint) {\n        UniswapExchangeInterface uniswapV1Exchange = UniswapExchangeInterface(exchAddress);\n        \n        if (isBuy) {\n            return uniswapV1Exchange.getEthToTokenInputPrice(amountIn);\n        }\n        else {\n            return uniswapV1Exchange.getTokenToEthInputPrice(amountIn);\n        }\n    }\n\n    \n    function _getUniswapV2AmountOut(bool isBuy, address targetAddress, uint amountIn) private view returns (uint) {\n        return _getUniswapV2AmountOutCommon(isBuy, targetAddress, amountIn, uniswapV2Router);\n    }\n\n\n    function _getSushiswapV1AmountOut(bool isBuy, address targetAddress, uint amountIn) private view returns (uint) {\n        return _getUniswapV2AmountOutCommon(isBuy, targetAddress, amountIn, sushiswapV1Router);\n    } \n    \n    \n    function _getUniswapV2AmountOutCommon(bool isBuy, address targetAddress, uint amountIn, IUniswapV2Router02 _uniswapV2Router) private view returns (uint) {\n        \n        address[] memory path = new address[](2);\n        \n        if (isBuy) {\n            path[0] = uniswapV2Router.WETH();\n            path[1] = targetAddress;\n        }\n        else {\n            path[0] = targetAddress;\n            path[1] = uniswapV2Router.WETH();\n        }\n\n        uint[] memory amounts = _uniswapV2Router.getAmountsOut(amountIn, path);\n        \n        // amounts[1] is the final output amount\n        return amounts[1];\n    }\n\n    \n    function _getKyberV1ExpectedRate(bool isBuy, address targetAddress, uint amountIn) private view returns (uint) {\n        ERC20 targetToken = ERC20(targetAddress);\n        uint expectedRate;\n        \n        if (isBuy) {\n            (expectedRate,) = kyberV1NetworkProxy.getExpectedRate(ETH_TOKEN, targetToken, amountIn);\n        }\n        else {\n            (expectedRate,) = kyberV1NetworkProxy.getExpectedRate(targetToken, ETH_TOKEN, amountIn);\n        }\n        \n        return expectedRate;\n    }\n    \n    \n    function _getBalancerV1AmountOut(bool isBuy, address targetAddress, uint amountIn) private view returns (uint) {\n        if (isBuy) {\n            (ExchangeProxy.Swap[] memory swaps, uint tokenAmountOut) = balancerV1ExchangeProxy.viewSplitExactIn(wethAddress, targetAddress, amountIn, MAX_BALANCER_V1_POOLS);\n            return tokenAmountOut;\n        }\n        else {\n            (ExchangeProxy.Swap[] memory swaps, uint baseTotalOut) = balancerV1ExchangeProxy.viewSplitExactIn(targetAddress, wethAddress, amountIn, MAX_BALANCER_V1_POOLS);\n            return baseTotalOut;\n        }\n    }\n\n    \n    //\n    // Helpers\n    //\n\n\n    // Contract approve use of the exchange for the token\n    function _doExchangeApproval(address targetAddress, uint tokenAmountIn, address exchAddress) private returns (bool) {\n        ERC20 targetToken = ERC20(targetAddress);\n        require(targetToken.approve(address(exchAddress), tokenAmountIn), 'doExchangeApproval failed for exchange');\n        return true;\n    }\n    \n    \n    function _isValidExch(uint exch) private view returns (bool) {\n        \n        //\n        // Mainnet: all\n        // Ropsten: Uniswap V2, Uniswap V1, Kyber V1\n        // Kovan: Uniswap V2, Uniswap V1, Kyber V1, Balancer V1\n        //\n        \n        if (chainId == MAINNET) {\n            if ((exch == UNISWAP_V2) || (exch == UNISWAP_V1) || (exch == SUSHISWAP_V1) || (exch == KYBER_V1) || (exch == BALANCER_V1)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (chainId == ROPSTEN) {\n            if ((exch == UNISWAP_V2) || (exch == UNISWAP_V1) || (exch == KYBER_V1)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (chainId == KOVAN) {\n            if ((exch == UNISWAP_V2) || (exch == UNISWAP_V1) || (exch == KYBER_V1) || (exch == BALANCER_V1)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        \n        return false;\n    }\n    \n    \n    function _isValidTargetAddress(address targetAddress) private view returns (bool) {\n        if ((targetAddress == ETH_ADDRESS) || (targetAddress == wethAddress)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    \n    \n    //\n    // String functions\n    // \n    \n    \n    function _concatStrVal1(string memory str, uint val) private pure returns (string memory) {\n        return _concatStr2(str, _uint2Str(val));\n    }\n    \n    \n    function _concatStrVal2(string memory str1, uint val1, string memory str2, uint val2) private pure returns (string memory) {\n        return _concatStr4(str1, _uint2Str(val1), str2, _uint2Str(val2));\n    }\n    \n    \n    function _concatStr2(string memory a, string memory b) private pure returns (string memory) {\n        string memory _concatStr = string(abi.encodePacked(a, b));\n        return _concatStr;\n    }\n    \n    \n    function _concatStr3(string memory a, string memory b, string memory c) private pure returns (string memory) {\n        string memory _concatStr = string(abi.encodePacked(a, b, c));\n        return _concatStr;\n    }\n    \n    \n    function _concatStr4(string memory a, string memory b, string memory c, string memory d) private pure returns (string memory) {\n        string memory _concatStr = string(abi.encodePacked(a, b, c, d));\n        return _concatStr;\n    }\n    \n    \n    function _uint2Str(uint val) private pure returns (string memory _uintAsStr) {\n        \n        if (val == 0) {\n            return \"0\";\n        }\n        \n        uint j = val;\n        uint len;\n        \n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        \n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        \n        while (val != 0) {\n            bstr[k--] = byte(uint8(48 + val % 10));\n            val /= 10;\n        }\n        \n        return string(bstr);\n    }\n\n}\n"},"localhost/import/github/Balancer/exchange-proxy/contracts/ExchangeProxy.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-08-25\n*/\n// SPDX-License-Identifier: UNLICENSED\n\nimport \"../../../openzeppelin-contracts/contracts/math/SafeMath.sol\";\nimport \"../../../openzeppelin-contracts/contracts/GSN/Context.sol\";\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.5.12;\npragma experimental ABIEncoderV2;\n\n// /**\n//  * @dev Wrappers over Solidity's arithmetic operations with added overflow\n//  * checks.\n//  *\n//  * Arithmetic operations in Solidity wrap on overflow. This can easily result\n//  * in bugs, because programmers usually assume that an overflow raises an\n//  * error, which is the standard behavior in high level programming languages.\n//  * `SafeMath` restores this intuition by reverting the transaction when an\n//  * operation overflows.\n//  *\n//  * Using this library instead of the unchecked operations eliminates an entire\n//  * class of bugs, so it's recommended to use it always.\n//  */\n// library SafeMath {\n//     /**\n//      * @dev Returns the addition of two unsigned integers, reverting on\n//      * overflow.\n//      *\n//      * Counterpart to Solidity's `+` operator.\n//      *\n//      * Requirements:\n//      * - Addition cannot overflow.\n//      */\n//     function add(uint256 a, uint256 b) internal pure returns (uint256) {\n//         uint256 c = a + b;\n//         require(c >= a, \"SafeMath: addition overflow\");\n\n//         return c;\n//     }\n\n//     /**\n//      * @dev Returns the subtraction of two unsigned integers, reverting on\n//      * overflow (when the result is negative).\n//      *\n//      * Counterpart to Solidity's `-` operator.\n//      *\n//      * Requirements:\n//      * - Subtraction cannot overflow.\n//      */\n//     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n//         return sub(a, b, \"SafeMath: subtraction overflow\");\n//     }\n\n//     /**\n//      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n//      * overflow (when the result is negative).\n//      *\n//      * Counterpart to Solidity's `-` operator.\n//      *\n//      * Requirements:\n//      * - Subtraction cannot overflow.\n//      *\n//      * _Available since v2.4.0._\n//      */\n//     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n//         require(b <= a, errorMessage);\n//         uint256 c = a - b;\n\n//         return c;\n//     }\n\n//     /**\n//      * @dev Returns the multiplication of two unsigned integers, reverting on\n//      * overflow.\n//      *\n//      * Counterpart to Solidity's `*` operator.\n//      *\n//      * Requirements:\n//      * - Multiplication cannot overflow.\n//      */\n//     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n//         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n//         // benefit is lost if 'b' is also tested.\n//         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n//         if (a == 0) {\n//             return 0;\n//         }\n\n//         uint256 c = a * b;\n//         require(c / a == b, \"SafeMath: multiplication overflow\");\n\n//         return c;\n//     }\n\n//     /**\n//      * @dev Returns the integer division of two unsigned integers. Reverts on\n//      * division by zero. The result is rounded towards zero.\n//      *\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\n//      * uses an invalid opcode to revert (consuming all remaining gas).\n//      *\n//      * Requirements:\n//      * - The divisor cannot be zero.\n//      */\n//     function div(uint256 a, uint256 b) internal pure returns (uint256) {\n//         return div(a, b, \"SafeMath: division by zero\");\n//     }\n\n//     /**\n//      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n//      * division by zero. The result is rounded towards zero.\n//      *\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\n//      * uses an invalid opcode to revert (consuming all remaining gas).\n//      *\n//      * Requirements:\n//      * - The divisor cannot be zero.\n//      *\n//      * _Available since v2.4.0._\n//      */\n//     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n//         // Solidity only automatically asserts when dividing by 0\n//         require(b > 0, errorMessage);\n//         uint256 c = a / b;\n//         // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n//         return c;\n//     }\n\n//     /**\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n//      * Reverts when dividing by zero.\n//      *\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\n//      * invalid opcode to revert (consuming all remaining gas).\n//      *\n//      * Requirements:\n//      * - The divisor cannot be zero.\n//      */\n//     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n//         return mod(a, b, \"SafeMath: modulo by zero\");\n//     }\n\n//     /**\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n//      * Reverts with custom message when dividing by zero.\n//      *\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\n//      * invalid opcode to revert (consuming all remaining gas).\n//      *\n//      * Requirements:\n//      * - The divisor cannot be zero.\n//      *\n//      * _Available since v2.4.0._\n//      */\n//     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n//         require(b != 0, errorMessage);\n//         return a % b;\n//     }\n// }\n\n// /*\n//  * @dev Provides information about the current execution context, including the\n//  * sender of the transaction and its data. While these are generally available\n//  * via msg.sender and msg.data, they should not be accessed in such a direct\n//  * manner, since when dealing with GSN meta-transactions the account sending and\n//  * paying for execution may not be the actual sender (as far as an application\n//  * is concerned).\n//  *\n//  * This contract is only required for intermediate, library-like contracts.\n//  */\n// contract Context {\n//     // Empty internal constructor, to prevent people from mistakenly deploying\n//     // an instance of this contract, which should be used via inheritance.\n//     constructor ()  { }\n//     // solhint-disable-previous-line no-empty-blocks\n\n//     function _msgSender() internal view returns (address payable) {\n//         return msg.sender;\n//     }\n\n//     function _msgData() internal view returns (bytes memory) {\n//         this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n//         return msg.data;\n//     }\n// }\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface PoolInterface {\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n    function getDenormalizedWeight(address) external view returns (uint);\n    function getBalance(address) external view returns (uint);\n    function getSwapFee() external view returns (uint);\n}\n\ninterface TokenInterface {\n    function balanceOf(address) external view returns (uint);\n    function allowance(address, address) external view returns (uint);\n    function approve(address, uint) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface RegistryInterface {\n    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\n}\n\ncontract ExchangeProxy is Ownable {\n\n    using SafeMath for uint256;\n\n    struct Pool {\n        address pool;\n        uint    tokenBalanceIn;\n        uint    tokenWeightIn;\n        uint    tokenBalanceOut;\n        uint    tokenWeightOut;\n        uint    swapFee;\n        uint    effectiveLiquidity;\n    }\n\n    struct Swap {\n        address pool;\n        address tokenIn;\n        address tokenOut;\n        uint    swapAmount; // tokenInAmount / tokenOutAmount\n        uint    limitReturnAmount; // minAmountOut / maxAmountIn\n        uint    maxPrice;\n    }\n\n    TokenInterface weth;\n    RegistryInterface registry;\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    uint private constant BONE = 10**18;\n\n    constructor(address _weth) public {\n        weth = TokenInterface(_weth);\n    }\n\n    function setRegistry(address _registry) external onlyOwner {\n        registry = RegistryInterface(_registry);\n    }\n\n    function batchSwapExactIn(\n        Swap[] memory swaps,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountIn,\n        uint minTotalAmountOut\n    )\n        public payable\n        returns (uint totalAmountOut)\n    {\n        transferFromAll(tokenIn, totalAmountIn);\n\n        for (uint i = 0; i < swaps.length; i++) {\n            Swap memory swap = swaps[i];\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n            PoolInterface pool = PoolInterface(swap.pool);\n\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                SwapTokenIn.approve(swap.pool, 0);\n            }\n            SwapTokenIn.approve(swap.pool, swap.swapAmount);\n\n            (uint tokenAmountOut,) = pool.swapExactAmountIn(\n                                        swap.tokenIn,\n                                        swap.swapAmount,\n                                        swap.tokenOut,\n                                        swap.limitReturnAmount,\n                                        swap.maxPrice\n                                    );\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n        }\n\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\n\n        transferAll(tokenOut, totalAmountOut);\n        transferAll(tokenIn, getBalance(tokenIn));\n    }\n\n    function batchSwapExactOut(\n        Swap[] memory swaps,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint maxTotalAmountIn\n    )\n        public payable\n        returns (uint totalAmountIn)\n    {\n        transferFromAll(tokenIn, maxTotalAmountIn);\n\n        for (uint i = 0; i < swaps.length; i++) {\n            Swap memory swap = swaps[i];\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n            PoolInterface pool = PoolInterface(swap.pool);\n\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                SwapTokenIn.approve(swap.pool, 0);\n            }\n            SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\n\n            (uint tokenAmountIn,) = pool.swapExactAmountOut(\n                                        swap.tokenIn,\n                                        swap.limitReturnAmount,\n                                        swap.tokenOut,\n                                        swap.swapAmount,\n                                        swap.maxPrice\n                                    );\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\n        }\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\n\n        transferAll(tokenOut, getBalance(tokenOut));\n        transferAll(tokenIn, getBalance(tokenIn));\n\n    }\n\n    function multihopBatchSwapExactIn(\n        Swap[][] memory swapSequences,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountIn,\n        uint minTotalAmountOut\n    )\n        public payable\n        returns (uint totalAmountOut)\n    {\n\n        transferFromAll(tokenIn, totalAmountIn);\n\n        for (uint i = 0; i < swapSequences.length; i++) {\n            uint tokenAmountOut;\n            for (uint k = 0; k < swapSequences[i].length; k++) {\n                Swap memory swap = swapSequences[i][k];\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n                if (k == 1) {\n                    // Makes sure that on the second swap the output of the first was used\n                    // so there is not intermediate token leftover\n                    swap.swapAmount = tokenAmountOut;\n                }\n\n                PoolInterface pool = PoolInterface(swap.pool);\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                    SwapTokenIn.approve(swap.pool, 0);\n                }\n                SwapTokenIn.approve(swap.pool, swap.swapAmount);\n                (tokenAmountOut,) = pool.swapExactAmountIn(\n                                            swap.tokenIn,\n                                            swap.swapAmount,\n                                            swap.tokenOut,\n                                            swap.limitReturnAmount,\n                                            swap.maxPrice\n                                        );\n            }\n            // This takes the amountOut of the last swap\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n        }\n\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\n\n        transferAll(tokenOut, totalAmountOut);\n        transferAll(tokenIn, getBalance(tokenIn));\n\n    }\n\n    function multihopBatchSwapExactOut(\n        Swap[][] memory swapSequences,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint maxTotalAmountIn\n    )\n        public payable\n        returns (uint totalAmountIn)\n    {\n\n        transferFromAll(tokenIn, maxTotalAmountIn);\n\n        for (uint i = 0; i < swapSequences.length; i++) {\n            uint tokenAmountInFirstSwap;\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\n            if (swapSequences[i].length == 1) {\n                Swap memory swap = swapSequences[i][0];\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n\n                PoolInterface pool = PoolInterface(swap.pool);\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                    SwapTokenIn.approve(swap.pool, 0);\n                }\n                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\n\n                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\n                                        swap.tokenIn,\n                                        swap.limitReturnAmount,\n                                        swap.tokenOut,\n                                        swap.swapAmount,\n                                        swap.maxPrice\n                                    );\n            } else {\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\n                // of token C. But first we need to buy B with A so we can then buy C with B\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\n                uint intermediateTokenAmount; // This would be token B as described above\n                Swap memory secondSwap = swapSequences[i][1];\n                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\n                                        poolSecondSwap.getBalance(secondSwap.tokenIn),\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\n                                        poolSecondSwap.getBalance(secondSwap.tokenOut),\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\n                                        secondSwap.swapAmount,\n                                        poolSecondSwap.getSwapFee()\n                                    );\n\n                //// Buy intermediateTokenAmount of token B with A in the first pool\n                Swap memory firstSwap = swapSequences[i][0];\n                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\n                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\n                    FirstSwapTokenIn.approve(firstSwap.pool, uint(-1));\n                }\n\n                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\n                                        firstSwap.tokenIn,\n                                        firstSwap.limitReturnAmount,\n                                        firstSwap.tokenOut,\n                                        intermediateTokenAmount, // This is the amount of token B we need\n                                        firstSwap.maxPrice\n                                    );\n\n                //// Buy the final amount of token C desired\n                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\n                    SecondSwapTokenIn.approve(secondSwap.pool, uint(-1));\n                }\n\n                poolSecondSwap.swapExactAmountOut(\n                                        secondSwap.tokenIn,\n                                        secondSwap.limitReturnAmount,\n                                        secondSwap.tokenOut,\n                                        secondSwap.swapAmount,\n                                        secondSwap.maxPrice\n                                    );\n            }\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\n        }\n\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\n\n        transferAll(tokenOut, getBalance(tokenOut));\n        transferAll(tokenIn, getBalance(tokenIn));\n\n    }\n\n    function smartSwapExactIn(\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountIn,\n        uint minTotalAmountOut,\n        uint nPools\n    )\n        public payable\n        returns (uint totalAmountOut)\n    {\n        Swap[] memory swaps;\n        if (isETH(tokenIn)) {\n          (swaps,) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\n        } else if (isETH(tokenOut)){\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\n        } else {\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\n        }\n\n        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut);\n    }\n\n    function smartSwapExactOut(\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountOut,\n        uint maxTotalAmountIn,\n        uint nPools\n    )\n        public payable\n        returns (uint totalAmountIn)\n    {\n        Swap[] memory swaps;\n        if (isETH(tokenIn)) {\n          (swaps,) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\n        } else if (isETH(tokenOut)){\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\n        } else {\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\n        }\n\n        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn);\n    }\n\n    function viewSplitExactIn(\n        address tokenIn,\n        address tokenOut,\n        uint swapAmount,\n        uint nPools\n    )\n        public view\n        returns (Swap[] memory swaps, uint totalOutput)\n    {\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n\n        Pool[] memory pools = new Pool[](poolAddresses.length);\n        uint sumEffectiveLiquidity;\n        for (uint i = 0; i < poolAddresses.length; i++) {\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n        }\n\n        uint[] memory bestInputAmounts = new uint[](pools.length);\n        uint totalInputAmount;\n        for (uint i = 0; i < pools.length; i++) {\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n        }\n\n        if (totalInputAmount < swapAmount) {\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n        } else {\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n        }\n\n        swaps = new Swap[](pools.length);\n\n        for (uint i = 0; i < pools.length; i++) {\n            swaps[i] = Swap({\n                        pool: pools[i].pool,\n                        tokenIn: tokenIn,\n                        tokenOut: tokenOut,\n                        swapAmount: bestInputAmounts[i],\n                        limitReturnAmount: 0,\n                        maxPrice: uint(-1)\n                    });\n        }\n\n        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\n\n        return (swaps, totalOutput);\n    }\n\n    function viewSplitExactOut(\n        address tokenIn,\n        address tokenOut,\n        uint swapAmount,\n        uint nPools\n    )\n        public view\n        returns (Swap[] memory swaps, uint totalOutput)\n    {\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n\n        Pool[] memory pools = new Pool[](poolAddresses.length);\n        uint sumEffectiveLiquidity;\n        for (uint i = 0; i < poolAddresses.length; i++) {\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n        }\n\n        uint[] memory bestInputAmounts = new uint[](pools.length);\n        uint totalInputAmount;\n        for (uint i = 0; i < pools.length; i++) {\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n        }\n        \n         if (totalInputAmount < swapAmount) {\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n        } else {\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n        }\n\n        swaps = new Swap[](pools.length);\n\n        for (uint i = 0; i < pools.length; i++) {\n            swaps[i] = Swap({\n                        pool: pools[i].pool,\n                        tokenIn: tokenIn,\n                        tokenOut: tokenOut,\n                        swapAmount: bestInputAmounts[i],\n                        limitReturnAmount: uint(-1),\n                        maxPrice: uint(-1)\n                    });\n        }\n\n        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\n\n        return (swaps, totalOutput);\n    }\n\n    function getPoolData(\n        address tokenIn,\n        address tokenOut,\n        address poolAddress\n    )\n        internal view\n        returns (Pool memory)\n    {\n        PoolInterface pool = PoolInterface(poolAddress);\n        uint tokenBalanceIn = pool.getBalance(tokenIn);\n        uint tokenBalanceOut = pool.getBalance(tokenOut);\n        uint tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\n        uint tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\n        uint swapFee = pool.getSwapFee();\n\n        uint effectiveLiquidity = calcEffectiveLiquidity(\n                                            tokenWeightIn,\n                                            tokenBalanceOut,\n                                            tokenWeightOut\n                                        );\n        Pool memory returnPool = Pool({\n            pool: poolAddress,\n            tokenBalanceIn: tokenBalanceIn,\n            tokenWeightIn: tokenWeightIn,\n            tokenBalanceOut: tokenBalanceOut,\n            tokenWeightOut: tokenWeightOut,\n            swapFee: swapFee,\n            effectiveLiquidity: effectiveLiquidity\n        });\n\n        return returnPool;\n    }\n\n    function calcEffectiveLiquidity(\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut\n    )\n        internal pure\n        returns (uint effectiveLiquidity)\n    {\n\n        // Bo * wi/(wi+wo)\n        effectiveLiquidity = \n            tokenWeightIn.mul(BONE).div(\n                tokenWeightOut.add(tokenWeightIn)\n            ).mul(tokenBalanceOut).div(BONE);\n\n        return effectiveLiquidity;\n    }\n\n    function calcTotalOutExactIn(\n        uint[] memory bestInputAmounts,\n        Pool[] memory bestPools\n    )\n        internal pure\n        returns (uint totalOutput)\n    {\n        totalOutput = 0;\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\n            uint output = PoolInterface(bestPools[i].pool).calcOutGivenIn(\n                                bestPools[i].tokenBalanceIn,\n                                bestPools[i].tokenWeightIn,\n                                bestPools[i].tokenBalanceOut,\n                                bestPools[i].tokenWeightOut,\n                                bestInputAmounts[i],\n                                bestPools[i].swapFee\n                            );\n\n            totalOutput = totalOutput.add(output);\n        }\n        return totalOutput;\n    }\n\n    function calcTotalOutExactOut(\n        uint[] memory bestInputAmounts,\n        Pool[] memory bestPools\n    )\n        internal pure\n        returns (uint totalOutput)\n    {\n        totalOutput = 0;\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\n            uint output = PoolInterface(bestPools[i].pool).calcInGivenOut(\n                                bestPools[i].tokenBalanceIn,\n                                bestPools[i].tokenWeightIn,\n                                bestPools[i].tokenBalanceOut,\n                                bestPools[i].tokenWeightOut,\n                                bestInputAmounts[i],\n                                bestPools[i].swapFee\n                            );\n\n            totalOutput = totalOutput.add(output);\n        }\n        return totalOutput;\n    }\n\n    function transferFromAll(TokenInterface token, uint amount) internal returns(bool) {\n        if (isETH(token)) {\n            weth.deposit{value: msg.value}();\n        } else {\n            require(token.transferFrom(msg.sender, address(this), amount), \"ERR_TRANSFER_FAILED\");\n        }\n    }\n\n    function getBalance(TokenInterface token) internal view returns (uint) {\n        if (isETH(token)) {\n            return weth.balanceOf(address(this));\n        } else {\n            return token.balanceOf(address(this));\n        }\n    }\n\n    function transferAll(TokenInterface token, uint amount) internal returns(bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (isETH(token)) {\n            weth.withdraw(amount);\n            (bool xfer,) = msg.sender.call{value: amount}(\"\");\n            require(xfer, \"ERR_ETH_FAILED\");\n        } else {\n            require(token.transfer(msg.sender, amount), \"ERR_TRANSFER_FAILED\");\n        }\n    }\n\n    function isETH(TokenInterface token) internal pure returns(bool) {\n        return (address(token) == ETH_ADDRESS);\n    }\n\n    fallback() external payable {}\n    receive() payable external {}\n\n}"},"localhost/import/github/KyberNetwork/smart-contracts/contracts/sol6/IKyberNetworkProxy.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.6;\n\nimport \"../../../../openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\n\ninterface IKyberNetworkProxy {\n\n    event ExecuteTrade(\n        address indexed trader,\n        IERC20 src,\n        IERC20 dest,\n        address destAddress,\n        uint256 actualSrcAmount,\n        uint256 actualDestAmount,\n        address platformWallet,\n        uint256 platformFeeBps\n    );\n\n    /// @notice backward compatible\n    function tradeWithHint(\n        ERC20 src,\n        uint256 srcAmount,\n        ERC20 dest,\n        address payable destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    ) external payable returns (uint256);\n\n    function tradeWithHintAndFee(\n        IERC20 src,\n        uint256 srcAmount,\n        IERC20 dest,\n        address payable destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address payable platformWallet,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    ) external payable returns (uint256 destAmount);\n\n    function trade(\n        IERC20 src,\n        uint256 srcAmount,\n        IERC20 dest,\n        address payable destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address payable platformWallet\n    ) external payable returns (uint256);\n\n    /// @notice backward compatible\n    /// @notice Rate units (10 ** 18) => destQty (twei) / srcQty (twei) * 10 ** 18\n    function getExpectedRate(\n        ERC20 src,\n        ERC20 dest,\n        uint256 srcQty\n    ) external view returns (uint256 expectedRate, uint256 worstRate);\n\n    function getExpectedRateAfterFee(\n        IERC20 src,\n        IERC20 dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    ) external view returns (uint256 expectedRate);\n}\n"},"localhost/import/github/Uniswap/uniswap-v1/IUniswapExchangeInterface.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n\ninterface UniswapExchangeInterface {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    // bytes32 public name;\n    // bytes32 public symbol;\n    // uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}"},"localhost/import/github/Uniswap/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"localhost/import/github/Uniswap/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"localhost/import/github/openzeppelin-contracts/contracts/GSN/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"localhost/import/github/openzeppelin-contracts/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"localhost/import/github/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"},"localhost/import/github/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}}}