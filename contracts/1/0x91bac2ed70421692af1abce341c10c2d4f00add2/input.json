{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/PetraAndChrisWeddingContract.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title PetraAndChrisWeddingContract\n * \n *       .....           .....\n *   ,ad8PPPP88b,     ,d88PPPP8ba,\n *  d8P\"      \"Y8b, ,d8P\"      \"Y8b\n * dP'           \"8a8\"           `Yd\n * 8(              \"              )8\n * I8                             8I\n *  Yb,                         ,dP\n *   \"8a,                     ,a8\"\n *     \"8a,                 ,a8\"\n *       \"Yba             adP\" \n *         `Y8a         a8P'\n *           `88,     ,88'\n *            \"8b   d8\"\n *             \"8b d8\"\n *              `888'\n *                \"\n * \n * @notice this contract was developed on the journey \n * to the wedding and there was no time for a divorce function\n * so you better stay happily married - otherwise you need to \n * stop or fork Ethereum's MainNet ;-)\n *\n * I wish you all the best for the time ahead! \n * \n * \n * @author ligi@ligi.de\n * \n * Heart ASCII art by Norman Veilleux and Ryan Harding\n * \n */\ncontract PetraAndChrisWeddingContract {\n\n    // optimistic approach - think with these 2 people \n    // we can be optimistic about things\n    bool ceremonyCompletedWithSuccess = true; \n\n    // ceremony starts 30.09.2021 11:30 and last ~20 min\n    // adding 20 seconds to have it end on 420\n    uint256 ceremonyEndTime = 1632995420;\n\n    // give ligi a maximum 7 hours after the ceremony ended to report a problem\n    uint256 lastPossibleTimeForProblemReport = ceremonyEndTime + 420 minutes;\n    \n    /**\n     * @notice should never be called\n     * can only be called by ligi in case of ceremony problems\n     */\n    function reportCeremonyProblem() public {\n         // ligi will attend the ceremony and can call this function \n         // if one of them got cold feet or anything else went wrong \n        require(msg.sender == 0x0402c3407dcBD476C3d2Bbd80d1b375144bAF4a2);\n        \n        require(block.timestamp <= lastPossibleTimeForProblemReport);\n \n        // hope we do not reach this point\n        ceremonyCompletedWithSuccess = false; \n    }\n    \n    /**\n     * @return whether Chris and Petra are married\n     */\n    function arePetraAndChrisMarried() public view returns (bool) {\n        return (block.timestamp > ceremonyEndTime) && ceremonyCompletedWithSuccess;\n    }\n}"}}}