{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DiamondDawgsV2/NewGeneration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\n\ninterface nftContract {\n   function balanceOf(address) external view returns(uint);\n}\n\ncontract TraitGeneration is Ownable{\n    bool promotionActive  = true;\n    function random(bytes32 t, bytes32 _input, uint8 _mod) private pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(t, _input)))%_mod;\n    }\n    \n    function useWeight(uint8[3] memory _split, uint8 _saltI,  bytes32 _pepper) private pure returns(uint8){\n        uint8[3] memory _weights = [75,95,100];\n        bytes32 salt = \"308fd119edae5f1309aafade64147\";\n        uint256 ran1 = random(salt[_saltI], _pepper, 100);\n        uint8 traitIndex;\n        uint8 i;\n        while (_weights[i] < ran1) {\n            traitIndex += _split[i];\n            i++;\n        }\n        uint256 ran2 = random(salt[_saltI + 2], _pepper, _split[i]);\n        return uint8(traitIndex + ran2);\n    }\n    function useWeightTwo(uint8[2] memory _split, uint8 _saltI,  bytes32 _pepper) private pure returns(uint8){\n        uint8[2] memory _weights = [50,100];\n        bytes32 salt = \"308fd119edae5f1309aafade64147\";\n        uint256 ran1 = random(salt[_saltI], _pepper, 100);\n        uint8 traitIndex;\n        uint8 i;\n        while (_weights[i] < ran1) {\n            traitIndex += _split[i];\n            i++;\n        }\n        uint256 ran2 = random(salt[_saltI + 2], _pepper, _split[i]);\n        return uint8(traitIndex + ran2);\n    }\n    function useWeightFour(uint8[4] memory _split, uint8 _saltI,  bytes32 _pepper) private pure returns(uint8){\n        uint8[4] memory _weights = [30,70,95,101];\n        bytes32 salt = \"308fd119edae5f1309aafade64147bhs\";\n        uint256 ran1 = random(salt[_saltI], _pepper, 100);\n        uint8 traitIndex;\n        uint8 i;\n        while (_weights[i] < ran1) {\n            traitIndex += _split[i];\n            i++;\n        }\n        uint256 ran2 = random(salt[_saltI + 1], _pepper, _split[i]);\n        return uint8(traitIndex + ran2);\n    }\n    \n    function generateTraits(bytes32 _pepper) public view returns (uint256[9] memory) {\n        \n        uint8[3] memory bgSplit = [4,3,2];\n        uint8[3] memory brSplit = [5,4,2];  \n        uint8[3] memory eySplit = [9,5,3];  \n        \n        uint8[3] memory moSplit = [6,7,4];  //added one more eyes (was 3, now 4) updated to 7 2nd\n        uint8[2] memory unSplit = [1,10];  \n        uint8[3] memory jeSplit = [20,8,5];  \n        \n        uint8[3] memory heSplit = [20,15,8]; \n        uint8[4] memory acSplit = [1,6,8,3]; \n        \n        uint256[9] memory attributeIndexArray;\n        attributeIndexArray[0] = useWeight(bgSplit, 0, _pepper);\n        attributeIndexArray[1] = useWeight(brSplit, 2, _pepper);\n        attributeIndexArray[2] = useWeight(eySplit, 4, _pepper);\n        \n        attributeIndexArray[3] = useWeight(moSplit, 6, _pepper);\n        attributeIndexArray[4] = useWeightTwo(unSplit, 7, _pepper);\n        attributeIndexArray[5] = useWeight(jeSplit, 8, _pepper);\n        \n        attributeIndexArray[6] = useWeight(heSplit, 12, _pepper);\n        attributeIndexArray[7] = useWeightFour(acSplit, 3, _pepper);\n        attributeIndexArray[8] = uint256(uint256(keccak256(abi.encodePacked(_pepper)))%2);\n        if(promotionActive == true){\n            attributeIndexArray = getPromotions(attributeIndexArray, _pepper);\n        }\n        return attributeIndexArray;\n    }\n    function getPromotions(uint256[9] memory attributeIndexArray, bytes32 _pepper) public view returns(uint256[9] memory){\n        bytes32 salt = \"abcfd119edae5f1309aafade64147bhs\";\n        uint percentage = 15; //5\n        \n        if(ownsNFT(address(0xECDD2F733bD20E56865750eBcE33f17Da0bEE461))){\n            //CryptoDads 0xecdd2f733bd20e56865750ebce33f17da0bee461\n            uint num = random(salt[0], _pepper, 100);\n            if(num < percentage){\n                attributeIndexArray[6] = 43;\n            }\n        }\n        if(ownsNFT(address(0x88091012eedF8Dba59D08e27Ed7B22008F5d6fe5))){\n            //SSoW 0x88091012eedf8dba59d08e27ed7b22008f5d6fe5\n            uint num = random(salt[1], _pepper, 100);\n            if(num < percentage){\n                attributeIndexArray[3] = 12;\n            }\n        }\n        if(ownsNFT(address(0x821043B51Bd384f2CaA0d09dc136181870B2beA2))){\n            //Hornets 0x821043b51bd384f2caa0d09dc136181870b2bea2\n            uint num = random(salt[2], _pepper, 100);\n            if(num < percentage){\n                attributeIndexArray[3] = 17;\n            }\n        }\n\n        return attributeIndexArray;\n    }\n    function ownsNFT(address _tokenAddress) public view returns(bool) {\n        uint tmp = nftContract(_tokenAddress).balanceOf(tx.origin);\n        if(tmp > 0){\n            return true;\n        }\n    }\n    function flipPromotion() public onlyOwner{\n        promotionActive = !promotionActive;\n    }\n}"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  }
}