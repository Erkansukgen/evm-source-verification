{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"INSA.sol":{"content":"pragma solidity 0.4.26;\r\n\r\ninterface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    function transferTo(address _to, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    event Burn(address indexed _burner, uint256 _value);\r\n}\r\n\r\ncontract ERC677 is ERC20 {\r\n    function transferAndCall(address to, uint value, bytes data) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\ncontract ERC677Receiver {\r\n    function onTokenTransfer(address _sender, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract ERC20Token is ERC20 {\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    uint public supply;\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferTo(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return supply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address _burner, uint256 _value) internal returns (bool) {\r\n        require(_value > 0);\r\n        require(balances[_burner] > 0);\r\n        balances[_burner] -= _value;\r\n        supply -= _value;\r\n        emit Burn(_burner, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\ncontract INSA is owned, ERC20Token {\r\n\r\n    string public name = \"INSA (INS)\";\r\n    string public symbol = \"INS\";\r\n    string public website = \"insa.vip\";\r\n    uint public decimals = 18;\r\n\r\n    uint256 public totalSupplied;\r\n    uint256 public totalBurned;\r\n\r\n    constructor() public {\r\n        supply = 812500000 * (1 ether / 1 wei);\r\n        totalBurned = 0;\r\n        totalSupplied = 0;\r\n        balances[address(this)] = supply;\r\n    }\r\n\r\n    function changeWebsite(string _website) public onlyOwner returns (bool) {\r\n        website = _website;\r\n        return true;\r\n    }\r\n\r\n    function changeName(string _name) public onlyOwner returns (bool) {\r\n        name = _name;\r\n        return true;\r\n    }\r\n\r\n    function transferTo(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        totalSupplied += _value;\r\n        _transfer(address(this), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnByValue(uint256 _value) public onlyOwner returns (bool) {\r\n        totalBurned += _value;\r\n        _burn(address(this), _value);\r\n        return true;\r\n    }\r\n}"}}}