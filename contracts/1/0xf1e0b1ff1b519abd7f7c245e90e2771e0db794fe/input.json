{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TokenERC20.sol": {
      "content": "pragma solidity ^0.4.16;\r\n\r\n \r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\n \r\ncontract TokenERC20 {\r\n\r\nstring public name;\r\n\r\nstring public symbol;\r\n\r\nuint8 public decimals = 18; // 18 是建议的默认值\r\n\r\nuint256 public totalSupply;\r\n\r\n \r\nmapping (address => uint256) public balanceOf; //\r\n\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n \r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\nevent Burn(address indexed from, uint256 value);\r\n\r\n \r\n \r\nfunction TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\r\ntotalSupply = initialSupply * 10 ** uint256(decimals);\r\n\r\nbalanceOf[msg.sender] = totalSupply;\r\n\r\nname = tokenName;\r\n\r\nsymbol = tokenSymbol;\r\n\r\n}\r\n\r\n \r\n \r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\n\r\nrequire(_to != 0x0);\r\n\r\nrequire(balanceOf[_from] >= _value);\r\n\r\nrequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\nbalanceOf[_from] -= _value;\r\n\r\nbalanceOf[_to] += _value;\r\n\r\nTransfer(_from, _to, _value);\r\n\r\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n}\r\n\r\n \r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n_transfer(msg.sender, _to, _value);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\n\r\nallowance[_from][msg.sender] -= _value;\r\n\r\n_transfer(_from, _to, _value);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\nfunction approve(address _spender, uint256 _value) public\r\n\r\nreturns (bool success) {\r\n\r\nallowance[msg.sender][_spender] = _value;\r\n\r\nApproval(msg.sender, _spender, _value);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n\r\ntokenRecipient spender = tokenRecipient(_spender);\r\n\r\nif (approve(_spender, _value)) {\r\n\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n}\r\n\r\n \r\nfunction burn(uint256 _value) public returns (bool success) {\r\n\r\nrequire(balanceOf[msg.sender] >= _value);\r\n\r\nbalanceOf[msg.sender] -= _value;\r\n\r\ntotalSupply -= _value;\r\n\r\nBurn(msg.sender, _value);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\nrequire(balanceOf[_from] >= _value);\r\n\r\nrequire(_value <= allowance[_from][msg.sender]);\r\n\r\nbalanceOf[_from] -= _value;\r\n\r\nallowance[_from][msg.sender] -= _value;\r\n\r\ntotalSupply -= _value;\r\n\r\nBurn(_from, _value);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n}"
    }
  }
}