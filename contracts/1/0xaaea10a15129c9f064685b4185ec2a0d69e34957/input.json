{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ito.sol":{"content":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\n// File: contracts/IQLF.sol\n\n/**\n * @author          Yisi Liu\n * @contact         yisiliu@gmail.com\n * @author_time     01/06/2021\n**/\n\npragma solidity >= 0.6.0;\n\ninterface IQLF {\n    /**\n     * @dev Returns if the given address is qualified, implemented on demand.\n     */\n    function ifQualified (address testee) external view returns (bool);\n\n    /**\n     * @dev Logs if the given address is qualified, implemented on demand.\n     */\n    function logQualified (address testee) external;\n\n    /**\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\n     * is `qualified` according to the preset rule by the contract creator and \n     * the current block `number` and the current block `timestamp`.\n     */\n    event Qualification(bool qualified, uint256 number, uint256 timestamp);\n}\n\n// File: contracts/ito.sol\n\n/**\n * @author          Yisi Liu\n * @contact         yisiliu@gmail.com\n * @author_time     01/06/2021\n**/\n\npragma solidity >= 0.6.0;\n\n\n\n\n\n\ncontract HappyTokenPool {\n\n    struct Pool {\n        uint256 packed1;            // total_address(160) hash(48) start_time_delta(24) \n                                    // expiration_time_delta(24) BIG ENDIAN\n        uint256 packed2;            // total_tokens(128) limit(128)\n        address creator;\n        address qualification;\n        address[] exchange_addrs;\n        uint128[] exchanged_tokens;\n        uint128[] ratios;\n        mapping(address => uint256) swapped_map;\n    }\n\n    event FillSuccess (\n        uint256 total,\n        bytes32 id,\n        address creator,\n        uint256 creation_time,\n        address token_address,\n        string name,\n        string message\n    );\n\n    event SwapSuccess (\n        bytes32 id,\n        address swapper,\n        address from_address,\n        address to_address,\n        uint256 from_value,\n        uint256 to_value\n    );\n\n    event DestructSuccess (\n        bytes32 id,\n        address token_address,\n        uint256 remaining_balance,\n        uint128[] exchanged_values\n    );\n\n    event WithdrawSuccess (\n        bytes32 id,\n        address token_address,\n        uint256 withdraw_balance\n    );\n\n    using SafeERC20 for IERC20;\n    uint32 nonce;\n    uint256 base_timestamp;\n    address public contract_creator;\n    mapping(bytes32 => Pool) pool_by_id;\n    string constant private magic = \"Anthony Quinn Warner, 63, was identified as the bomber. Warner, \\\n    a 63-year-old described by one neighbor as a loner, died when his recreational vehicle exploded \\\n    on 2nd Avenue North in the city's downtown. The blast injured at least eight people and damaged-\";\n    bytes32 private seed;\n    address DEFAULT_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    constructor() public {\n        contract_creator = msg.sender;\n        seed = keccak256(abi.encodePacked(magic, now, contract_creator));\n        base_timestamp = 1609372800;                                    // 00:00:00 01/01/2021 GMT(UTC+0)\n    }\n\n    function fill_pool (bytes32 _hash, uint256 _start, uint256 _end, string memory name, string memory message,\n                        address[] memory _exchange_addrs, uint128[] memory _ratios,\n                        address _token_addr, uint256 _total_tokens, uint256 _limit, address _qualification)\n    public payable {\n        nonce ++;\n        require(_start < _end, \"Start time should be earlier than end time.\");\n        require(_limit <= _total_tokens, \"Limit needs to be less than or equal to the total supply\");\n        require(_total_tokens < 2 ** 128, \"No more than 2^128 tokens(incluidng decimals) allowed\");\n        require(IERC20(_token_addr).allowance(msg.sender, address(this)) >= _total_tokens, \"Insuffcient allowance\");\n        require(_exchange_addrs.length > 0, \"Exchange token addresses need to be set\");\n        require(_ratios.length == 2 * _exchange_addrs.length, \"Size of ratios = 2 * size of exchange_addrs\");\n\n        bytes32 _id = keccak256(abi.encodePacked(msg.sender, now, nonce, seed));\n        Pool storage pool = pool_by_id[_id];\n        pool.packed1 = wrap1(_token_addr, _hash, _start, _end);         // 256 bytes\n        pool.packed2 = wrap2(_total_tokens, _limit);                    // 256 bytes\n        pool.creator = msg.sender;                                      // 160 bytes\n        pool.exchange_addrs = _exchange_addrs;                          // 160 bytes\n        pool.qualification = _qualification;                            // 160 bytes\n        for (uint256 i = 0; i < _exchange_addrs.length; i++) {\n            if (_exchange_addrs[i] != DEFAULT_ADDRESS) {\n                require(IERC20(_exchange_addrs[i]).totalSupply() > 0, \"Not a valid ERC20\");\n            }\n            pool.exchanged_tokens.push(0); \n        }\n\n        for (uint256 i = 0; i < _ratios.length; i+= 2) {\n            uint256 divA = SafeMath.div(_ratios[i], _ratios[i+1]);      // Non-zero checked by SafteMath.div\n            uint256 divB = SafeMath.div(_ratios[i+1], _ratios[i]);\n            \n            if (_ratios[i] == 1) {\n                require(divB == _ratios[i+1]);\n            } else if (_ratios[i+1] == 1) {\n                require(divA == _ratios[i]);\n            } else {\n                require(divA * _ratios[i+1] != _ratios[i]);\n                require(divB * _ratios[i] != _ratios[i+1]);\n            }\n        }\n        pool.ratios = _ratios;                                          // 256 * k\n        IERC20(_token_addr).safeTransferFrom(msg.sender, address(this), _total_tokens);\n\n        emit FillSuccess(_total_tokens, _id, msg.sender, now, _token_addr, name, message);\n    }\n\n    // It takes the unhashed password and a hashed random seed generated from the user\n    function swap (bytes32 id, bytes32 verification, address _recipient, \n                   bytes32 validation, uint256 exchange_addr_i, uint128 input_total) \n    public payable returns (uint256 swapped) {\n\n        Pool storage pool = pool_by_id[id];\n        address payable recipient = address(uint160(_recipient));\n        require (IQLF(pool.qualification).ifQualified(msg.sender) == true, \"Not Qualified\");\n        require (unbox(pool.packed1, 208, 24) + base_timestamp < now, \"Not started.\");\n        require (unbox(pool.packed1, 232, 24) + base_timestamp > now, \"Expired.\");\n        require (verification == keccak256(abi.encodePacked(unbox(pool.packed1, 160, 48), msg.sender)), \n                 'Wrong Password');\n        require (validation == keccak256(toBytes(msg.sender)), \"Validation Failed\");\n\n        uint256 total_tokens = unbox(pool.packed2, 0, 128);\n\n        address exchange_addr = pool.exchange_addrs[exchange_addr_i];\n        uint256 ratioA = pool.ratios[exchange_addr_i*2];\n        uint256 ratioB = pool.ratios[exchange_addr_i*2 + 1];\n        if (exchange_addr == DEFAULT_ADDRESS) {\n            require(msg.value == input_total, 'No enough ether.');\n        } else {\n            uint256 allowance = IERC20(exchange_addr).allowance(msg.sender, address(this));\n            require(allowance >= input_total, 'No enough allowance.');\n        }\n\n        uint256 swapped_tokens;\n        swapped_tokens = SafeMath.div(SafeMath.mul(input_total, ratioB), ratioA);       // 2^256=10e77 >> 10e18 * 10e18\n        require(swapped_tokens > 0, \"Better not draw water with a sieve\");\n\n        // Don't be greedy\n        uint256 limit = unbox(pool.packed2, 128, 128);\n        if (swapped_tokens > limit) {\n            swapped_tokens = limit;\n        } else if (swapped_tokens > total_tokens) {\n            swapped_tokens = total_tokens;\n            input_total = uint128(SafeMath.div(SafeMath.mul(swapped_tokens, ratioB), ratioA));   // same\n        }\n        require(swapped_tokens <= limit);                                               // make sure\n        pool.exchanged_tokens[exchange_addr_i] = uint128(SafeMath.add(pool.exchanged_tokens[exchange_addr_i], input_total));\n\n        // Penalize greedy attackers by placing duplication check at the very last\n        require (pool.swapped_map[_recipient] == 0, \"Already swapped\");\n\n        pool.packed2 = rewriteBox(pool.packed2, 0, 128, SafeMath.sub(total_tokens, swapped_tokens));\n        pool.swapped_map[_recipient] = swapped_tokens;\n\n        // Transfer the token after state changing\n        if (exchange_addr != DEFAULT_ADDRESS) {\n            IERC20(exchange_addr).safeTransferFrom(msg.sender, address(this), input_total);\n        }\n        transfer_token(address(unbox(pool.packed1, 0, 160)), address(this), recipient, swapped_tokens);\n\n        // Swap success event\n        emit SwapSuccess(id, recipient, exchange_addr, address(unbox(pool.packed1, 0, 160)), \n                          input_total, swapped_tokens);\n        return swapped_tokens;\n    }\n\n    // Returns 0. exchange_addrs in the given pool 1. remaining tokens 2. if expired 3. if swapped\n    function check_availability (bytes32 id) external view returns (address[] memory exchange_addrs, uint256 remaining, \n                                                                    bool started, bool expired, uint256 swapped,\n                                                                    uint128[] memory exchanged_tokens) {\n        Pool storage pool = pool_by_id[id];\n        return (\n            pool.exchange_addrs,                                    // exchange_addrs if 0x0 then destructed\n            unbox(pool.packed2, 0, 128),                            // remaining\n            now > unbox(pool.packed1, 208, 24) + base_timestamp,    // started\n            now > unbox(pool.packed1, 232, 24) + base_timestamp,    // expired\n            pool.swapped_map[msg.sender],                           // swapped number \n            pool.exchanged_tokens                                   // exchanged tokens\n        );\n    }\n\n    function destruct (bytes32 id) public {\n        Pool storage pool = pool_by_id[id];\n        require(msg.sender == pool.creator, \"Only the pool creator can destruct.\");\n\n        address token_address = address(unbox(pool.packed1, 0, 160));\n        uint256 expiration = unbox(pool.packed1, 232, 24) + base_timestamp;\n        uint256 remaining_tokens = unbox(pool.packed2, 0, 128);\n        require(expiration <= now || remaining_tokens == 0, \"Not expired yet\");\n\n        if (remaining_tokens != 0) {\n            transfer_token(token_address, address(this), msg.sender, remaining_tokens);\n        }\n\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\n            if (pool.exchanged_tokens[i] > 0) {\n                if (pool.exchange_addrs[i] != DEFAULT_ADDRESS)\n                    transfer_token(pool.exchange_addrs[i], address(this), msg.sender, pool.exchanged_tokens[i]);\n                else\n                    msg.sender.transfer(pool.exchanged_tokens[i]);\n            }\n        }\n        emit DestructSuccess(id, token_address, remaining_tokens, pool.exchanged_tokens);\n\n        // Gas Refund\n        pool.packed1 = 0;\n        pool.packed2 = 0;\n        pool.creator = DEFAULT_ADDRESS;\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\n            pool.exchange_addrs[i] = DEFAULT_ADDRESS;\n            pool.exchanged_tokens[i] = 0;\n            pool.ratios[i*2] = 0;\n            pool.ratios[i*2+1] = 0;\n        }\n    }\n\n    function withdraw (bytes32 id, uint256 addr_i) public {\n        Pool storage pool = pool_by_id[id];\n        require(msg.sender == pool.creator, \"Only the pool creator can destruct.\");\n\n        uint256 withdraw_balance = pool.exchanged_tokens[addr_i];\n        require(withdraw_balance > 0, \"None of this token left\");\n        uint256 expiration = unbox(pool.packed1, 232, 24) + base_timestamp;\n        uint256 remaining_tokens = unbox(pool.packed2, 0, 128);\n        require(expiration <= now || remaining_tokens == 0, \"Not expired yet\");\n        address token_address = pool.exchange_addrs[addr_i];\n\n        if (token_address != DEFAULT_ADDRESS)\n            transfer_token(token_address, address(this), msg.sender, withdraw_balance);\n        else\n            msg.sender.transfer(withdraw_balance);\n        pool.exchanged_tokens[addr_i] = 0;\n        emit WithdrawSuccess(id, token_address, withdraw_balance);\n    }\n\n    // helper functions\n    function wrap1 (address _token_addr, bytes32 _hash, uint256 _start, uint256 _end) internal pure \n                    returns (uint256 packed1) {\n        uint256 _packed1 = 0;\n        _packed1 |= box(0, 160,  uint256(_token_addr));     // token_addr = 160 bits\n        _packed1 |= box(160, 48, uint256(_hash) >> 208);    // hash = 48 bits (safe?)\n        _packed1 |= box(208, 24, _start);                   // start_time = 24 bits \n        _packed1 |= box(232, 24, _end);                     // expiration_time = 24 bits\n        return _packed1;\n    }\n\n    function wrap2 (uint256 _total_tokens, uint256 _limit) internal pure returns (uint256 packed2) {\n        uint256 _packed2 = 0;\n        _packed2 |= box(0, 128, _total_tokens);             // total_tokens = 128 bits ~= 3.4e38\n        _packed2 |= box(128, 128, _limit);                  // limit = 128 bits\n        return _packed2;\n    }\n\n    function box (uint16 position, uint16 size, uint256 data) internal pure returns (uint256 boxed) {\n        require(validRange(size, data), \"Value out of range BOX\");\n        return data << (256 - size - position);\n    }\n\n    function unbox (uint256 base, uint16 position, uint16 size) internal pure returns (uint256 unboxed) {\n        require(validRange(256, base), \"Value out of range UNBOX\");\n        return (base << position) >> (256 - size);\n    }\n\n    function validRange (uint16 size, uint256 data) internal pure returns(bool) { \n        if (data > 2 ** uint256(size) - 1) {\n            return false;\n        }\n        return true;\n    }\n\n    function rewriteBox (uint256 _box, uint16 position, uint16 size, uint256 data) \n    internal pure returns (uint256 boxed) {\n        uint256 _boxData = box(position, size, data);\n        uint256 _mask = box(position, size, uint256(-1) >> (256 - size));\n        _box = (_box & ~_mask) | _boxData;\n        return _box;\n    }\n\n    function transfer_token (address token_address, address sender_address,\n                             address recipient_address, uint256 amount) internal {\n        require(IERC20(token_address).balanceOf(sender_address) >= amount, \"Balance not enough\");\n        IERC20(token_address).safeTransfer(recipient_address, amount);\n    }\n    \n    // https://ethereum.stackexchange.com/questions/884/how-to-convert-an-address-to-bytes-in-solidity\n    // 695 gas consumed\n    function toBytes (address a) internal pure returns (bytes memory b) {\n        assembly {\n            let m := mload(0x40)\n            a := and(a, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, a))\n            mstore(0x40, add(m, 52))\n            b := m\n        }\n    }\n}\n"}}}