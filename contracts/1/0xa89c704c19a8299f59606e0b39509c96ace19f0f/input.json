{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/UniswapPreApprove.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n* @title Uniswap Quick Approve\n* @dev  Just a simple contract to quickly pre-approve\n*       a contract without waiting for listing\n*\n* @author @CryptoBender\n*/\ncontract UniswapPreApprove {\n    function GetUNIPairFunction(address yourDesiredTokenAddress) public pure returns(address) { \n        require(yourDesiredTokenAddress != address(0), 'no token address set'); \n        \n        address wethAddress     =   0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; \n        require(yourDesiredTokenAddress != wethAddress, 'weth - weth is not possible.'); \n    \n        (address tokenA, address tokenB) = (wethAddress < yourDesiredTokenAddress) ? (wethAddress, yourDesiredTokenAddress) : (yourDesiredTokenAddress, wethAddress); \n        \n        return  address(uint256(keccak256(abi.encodePacked( \n            hex'ff', \n            0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, \n            keccak256(abi.encodePacked(tokenA,tokenB)), \n            hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' \n        )))); \n    }\n}"}}}