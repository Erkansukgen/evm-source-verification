{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IAAVEDepositWithdraw {\r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n    function withdraw(address token, uint256 amount, address destination) external;\r\n    function getReservesList() external view returns (address[] memory);\r\n}\r\n\r\ninterface IERC20ApproveTransferFrom { \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// tester contract for aave protocol deposit / withdraw \r\ncontract AaveDepositWithdrawTest {\r\n    address aave;\r\n    address owner;\r\n    \r\n    constructor(address[] memory approvedAssets) public {\r\n        for (uint256 i = 0; i < approvedAssets.length; i++) {\r\n            IERC20ApproveTransferFrom(approvedAssets[i]).approve(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9, type(uint256).max); // max approve aave for deposit into aToken \r\n        }\r\n        \r\n        aave = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\r\n        owner = msg.sender; // set deployer as owner of contract\r\n    }\r\n    \r\n    function deposit(address token, uint256 amount) external {\r\n        IERC20ApproveTransferFrom(token).transferFrom(msg.sender, address(this), amount);\r\n        IAAVEDepositWithdraw(aave).deposit(token, amount, address(this), 0);\r\n    }\r\n    \r\n    function withdraw(address token, uint256 amount) external {\r\n        IAAVEDepositWithdraw(aave).withdraw(token, amount, msg.sender);\r\n    }\r\n    \r\n    function getAaveReserves() external view returns (address[] memory) {\r\n        address[] memory reserves = IAAVEDepositWithdraw(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9).getReservesList();\r\n        return reserves;\r\n    }\r\n}\r\n\r\n"
    }
  }
}