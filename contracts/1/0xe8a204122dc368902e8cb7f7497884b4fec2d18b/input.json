{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MultiStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IStakingRewards {\r\n    function stakeTransferWithBalance(uint256 amount, address useraddress, uint256 lockingPeriod) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract MultiStaking {\r\n    address public stakingRewardsAddress = 0x2a16bBD6f197BF245EbB23EC4664c8A354Ff5f1F;\r\n    \r\n    function stakeTransferWithBalance(IERC20 token, uint256[] memory amounts, address[] memory userAddresses, uint256[] memory lockingPeriods) external {\r\n        IStakingRewards stakingRewardsContract = IStakingRewards(stakingRewardsAddress);\r\n        uint256 totalBalance = 0;\r\n        \r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            totalBalance = totalBalance + amounts[i];\r\n        }\r\n        \r\n        require(token.transferFrom(msg.sender, address(this), totalBalance));\r\n        require(token.approve(stakingRewardsAddress, totalBalance));\r\n        \r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            stakingRewardsContract.stakeTransferWithBalance(amounts[i], userAddresses[i], lockingPeriods[i]);\r\n        }\r\n    }\r\n    \r\n}"
    }
  }
}