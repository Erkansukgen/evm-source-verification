{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DSA/InstaPool.sol":{"content":"\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface CTokenInterface {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n\n    function borrowBalanceCurrent(address) external returns (uint);\n    function redeemUnderlying(uint) external returns (uint);\n    function borrow(uint) external returns (uint);\n    function underlying() external view returns (address);\n    function borrowBalanceStored(address) external view returns (uint);\n}\n\ninterface CETHInterface {\n    function mint() external payable;\n    function repayBorrow() external payable;\n}\n\ninterface ComptrollerInterface {\n    function getAssetsIn(address account) external view returns (address[] memory);\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cTokenAddress) external returns (uint);\n}\n\ninterface AccountInterface {\t\n    function version() external view returns (uint);\t\n}\n\ninterface ListInterface {\n    function accountID(address) external view returns (uint64);\n}\n\ninterface IndexInterface {\n    function master() external view returns (address);\n    function list() external view returns (address);\n    function isClone(uint, address) external view returns (bool);\n}\n\ninterface CheckInterface {\n    function isOk() external view returns (bool);\n}\n\ncontract DSMath {\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n}\n\ncontract Helpers is DSMath {\n    using SafeERC20 for IERC20;\n\n    address constant internal instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\n    address constant internal oldInstaPool = 0x1879BEE186BFfBA9A8b1cAD8181bBFb218A5Aa61;\n    \n    address constant internal comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n\n    address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address constant internal cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n\n    mapping (address => bool) public isTknAllowed;\n    mapping (address => address) public tknToCTkn;\n\n    mapping (address => uint) public borrowedToken;\n    address[] public tokensAllowed;\n\n    bool public checkOldPool = true;\n\n    IndexInterface indexContract = IndexInterface(instaIndex);\n    ListInterface listContract = ListInterface(indexContract.list());\n    CheckInterface oldInstaPoolContract = CheckInterface(oldInstaPool);\n\n    /**\n     * FOR SECURITY PURPOSE\n     * only Smart DEFI Account can access the liquidity pool contract\n     */\n    modifier isDSA {\n        uint64 id = listContract.accountID(msg.sender);\n        require(id != 0, \"not-dsa-id\");\n        require(indexContract.isClone(AccountInterface(msg.sender).version(), msg.sender), \"not-dsa-clone\");\n        _;\n    }\n\n    function tokenBal(address token) internal view returns (uint _bal) {\n        _bal = token == ethAddr ? address(this).balance : IERC20(token).balanceOf(address(this));\n    }\n\n    function _transfer(address token, uint _amt) internal {\n        token == ethAddr ?\n            msg.sender.transfer(_amt) :\n            IERC20(token).safeTransfer(msg.sender, _amt);\n    }\n}\n\n\ncontract CompoundResolver is Helpers {\n\n    function borrowAndSend(address[] memory tokens, uint[] memory tknAmt) internal {\n        if (tokens.length > 0) {\n            for (uint i = 0; i < tokens.length; i++) {\n                address token = tokens[i];\n                address cToken = tknToCTkn[token];\n                require(isTknAllowed[token], \"token-not-listed\");\n                if (cToken != address(0) && tknAmt[i] > 0) {\n                    require(CTokenInterface(cToken).borrow(tknAmt[i]) == 0, \"borrow-failed\");\n                    borrowedToken[token] += tknAmt[i];\n                    _transfer(token, tknAmt[i]);\n                }\n            }\n        }\n    }\n\n    function payback(address[] memory tokens) internal {\n        if (tokens.length > 0) {\n            for (uint i = 0; i < tokens.length; i++) {\n                address token = tokens[i];\n                address cToken = tknToCTkn[token];\n                if (cToken != address(0)) {\n                    CTokenInterface ctknContract = CTokenInterface(cToken);\n                    if(token != ethAddr) {\n                        require(ctknContract.repayBorrow(uint(-1)) == 0, \"payback-failed\");\n                    } else {\n                        CETHInterface(cToken).repayBorrow.value(ctknContract.borrowBalanceCurrent(address(this)))();\n                        require(ctknContract.borrowBalanceCurrent(address(this)) == 0, \"ETH-flashloan-not-paid\");\n                    }\n                    delete borrowedToken[token];\n                }\n            }\n        }\n    }\n}\n\ncontract AccessLiquidity is CompoundResolver {\n    event LogPoolBorrow(address indexed user, address[] tknAddr, uint[] amt);\n    event LogPoolPayback(address indexed user, address[] tknAddr);\n\n    /**\n     * @dev borrow tokens and use them on DSA.\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amounts Array of tokens amount.\n    */\n    function accessLiquidity(address[] calldata tokens, uint[] calldata amounts) external isDSA {\n        require(tokens.length == amounts.length, \"length-not-equal\");\n        borrowAndSend(tokens, amounts);\n        emit LogPoolBorrow(\n            msg.sender,\n            tokens,\n            amounts\n        );\n    }\n   \n    /**\n     * @dev Payback borrowed tokens.\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n    */\n    function returnLiquidity(address[] calldata tokens) external payable isDSA {\n        payback(tokens);\n        emit LogPoolPayback(msg.sender, tokens);\n    }\n    \n    function isOk() public view returns(bool ok) {\n        ok = true;\n        for (uint i = 0; i < tokensAllowed.length; i++) {\n            uint tknBorrowed = borrowedToken[tokensAllowed[i]];\n            if(tknBorrowed > 0){\n                ok = false;\n                break;\n            }\n        }\n        if(checkOldPool && ok) {\n            bool isOldPoolOk = oldInstaPoolContract.isOk();\n            ok = isOldPoolOk;\n        }\n    }\n}\n\n\ncontract ProvideLiquidity is  AccessLiquidity {\n    event LogDeposit(address indexed user, address indexed token, uint amount, uint cAmount);\n    event LogWithdraw(address indexed user, address indexed token, uint amount, uint cAmount);\n\n    mapping (address => mapping (address => uint)) public liquidityBalance;\n\n    /**\n     * @dev Deposit Liquidity.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n    */\n    function deposit(address token, uint amt) external payable returns (uint _amt) {\n        require(isTknAllowed[token], \"token-not-listed\");\n        require(amt > 0 || msg.value > 0, \"amt-not-valid\");\n\n        if (msg.value > 0) require(token == ethAddr, \"not-eth-addr\");\n\n        address cErc20 = tknToCTkn[token];\n        uint initalBal = tokenBal(cErc20);\n        if (token == ethAddr) {\n            _amt = msg.value;\n            CETHInterface(cErc20).mint.value(_amt)();\n        } else {\n            _amt = amt == (uint(-1)) ? IERC20(token).balanceOf(msg.sender) : amt;\n            IERC20(token).safeTransferFrom(msg.sender, address(this), _amt);\n            require(CTokenInterface(cErc20).mint(_amt) == 0, \"mint-failed\");\n        }\n        uint finalBal = tokenBal(cErc20);\n        uint ctokenAmt = sub(finalBal, initalBal);\n\n        liquidityBalance[token][msg.sender] += ctokenAmt;\n\n        emit LogDeposit(msg.sender, token, _amt, ctokenAmt);\n    }\n\n    \n    /**\n     * @dev Withdraw Liquidity.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n    */\n    function withdraw(address token, uint amt) external returns (uint _amt) {\n        uint _userLiq = liquidityBalance[token][msg.sender];\n        require(_userLiq > 0, \"nothing-to-withdraw\");\n\n        uint _cAmt;\n\n        address ctoken = tknToCTkn[token];\n        if (amt == uint(-1)) {\n            uint initknBal = tokenBal(token);\n            require(CTokenInterface(ctoken).redeem(_userLiq) == 0, \"redeem-failed\");\n            uint finTknBal = tokenBal(token);\n            _cAmt = _userLiq;\n            delete liquidityBalance[token][msg.sender];\n            _amt = sub(finTknBal, initknBal);\n        } else {\n            uint iniCtknBal = tokenBal(ctoken);\n            require(CTokenInterface(ctoken).redeemUnderlying(amt) == 0, \"redeemUnderlying-failed\");\n            uint finCtknBal = tokenBal(ctoken);\n            _cAmt = sub(iniCtknBal, finCtknBal);\n            require(_cAmt <= _userLiq, \"not-enough-to-withdraw\");\n            liquidityBalance[token][msg.sender] -= _cAmt;\n            _amt = amt;\n        }\n        \n        _transfer(token, _amt);\n       \n        emit LogWithdraw(msg.sender, token, _amt, _cAmt);\n    }\n\n}\n\n\ncontract Controllers is ProvideLiquidity {\n    event LogEnterMarket(address[] token, address[] ctoken);\n    event LogExitMarket(address indexed token, address indexed ctoken);\n\n    event LogWithdrawMaster(address indexed user, address indexed token, uint amount);\n\n    modifier isMaster {\n        require(msg.sender == indexContract.master(), \"not-master\");\n        _;\n    }\n\n    function switchOldPoolCheck() external isMaster {\n        checkOldPool = !checkOldPool;\n    }\n\n    function _enterMarket(address[] memory cTknAddrs) internal {\n        ComptrollerInterface(comptrollerAddr).enterMarkets(cTknAddrs);\n        address[] memory tknAddrs = new address[](cTknAddrs.length);\n        for (uint i = 0; i < cTknAddrs.length; i++) {\n            if (cTknAddrs[i] != cEth) {\n                tknAddrs[i] = CTokenInterface(cTknAddrs[i]).underlying();\n                IERC20(tknAddrs[i]).safeApprove(cTknAddrs[i], uint(-1));\n            } else {\n                tknAddrs[i] = ethAddr;\n            }\n            tknToCTkn[tknAddrs[i]] = cTknAddrs[i];\n            require(!isTknAllowed[tknAddrs[i]], \"tkn-already-allowed\");\n            isTknAllowed[tknAddrs[i]] = true;\n            tokensAllowed.push(tknAddrs[i]);\n        }\n        emit LogEnterMarket(tknAddrs, cTknAddrs);\n    }\n\n    /**\n     * @dev Enter compound market to enable borrowing.\n     * @param cTknAddrs Array Ctoken addresses.\n    */\n    function enterMarket(address[] calldata cTknAddrs) external isMaster {\n        _enterMarket(cTknAddrs);\n    }\n\n    /**\n     * @dev Exit compound market to disable borrowing.\n     * @param cTkn Ctoken address.\n    */\n    function exitMarket(address cTkn) external isMaster {\n        address tkn;\n        if (cTkn != cEth) {\n            tkn = CTokenInterface(cTkn).underlying();\n            IERC20(tkn).safeApprove(cTkn, 0);\n        } else {\n            tkn = ethAddr;\n        }\n        require(isTknAllowed[tkn], \"tkn-not-allowed\");\n\n        ComptrollerInterface(comptrollerAddr).exitMarket(cTkn);\n\n        delete isTknAllowed[tkn];\n\n        bool isFound = false;\n        uint _length = tokensAllowed.length;\n        uint _id;\n        for (uint i = 0; i < _length; i++) {\n            if (tkn == tokensAllowed[i]) {\n                isFound = true;\n                _id = i;\n                break;\n            }\n        }\n        if (isFound) {\n            address _last = tokensAllowed[_length - 1];\n            tokensAllowed[_length - 1] = tokensAllowed[_id];\n            tokensAllowed[_id] = _last;\n            tokensAllowed.pop();\n        }\n        emit LogExitMarket(tkn, cTkn);\n    }\n\n    /**\n     * @dev Withdraw Liquidity.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n    */\n    function withdrawMaster(address token, uint amt) external isMaster {\n        _transfer(token, amt);\n        emit LogWithdrawMaster(msg.sender, token, amt);\n    }\n\n    function spell(address _target, bytes calldata _data) external isMaster {\n        require(_target != address(0), \"target-invalid\");\n        bytes memory _callData = _data;\n        assembly {\n            let succeeded := delegatecall(gas(), _target, add(_callData, 0x20), mload(_callData), 0, 0)\n\n            switch iszero(succeeded)\n                case 1 {\n                    // throw if delegatecall failed\n                    let size := returndatasize()\n                    returndatacopy(0x00, 0x00, size)\n                    revert(0x00, size)\n                }\n        }\n    }\n\n}\n\n\ncontract InstaPool is Controllers {\n    constructor (address[] memory ctkns) public {\n        _enterMarket(ctkns);\n    }\n\n    receive() external payable {}\n}\n"}}}