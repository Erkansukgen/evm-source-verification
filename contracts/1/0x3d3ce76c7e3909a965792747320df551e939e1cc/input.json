{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"RedeemHelper.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IBarter {\r\n    function redeem( address _recipient, bool _stake ) external returns ( uint );\r\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ );\r\n}\r\n\r\ncontract RedeemHelper is Ownable {\r\n\r\n    address[] public barters;\r\n\r\n    function redeemAll( address _recipient, bool _stake ) external {\r\n        for( uint i = 0; i < barters.length; i++ ) {\r\n            if ( barters[i] != address(0) ) {\r\n                if ( IBarter( barters[i] ).pendingPayoutFor( _recipient ) > 0 ) {\r\n                    IBarter( barters[i] ).redeem( _recipient, _stake );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function addBarterContract( address _barter ) external onlyPolicy() {\r\n        require( _barter != address(0) );\r\n        barters.push( _barter );\r\n    }\r\n\r\n    function removeBarterContract( uint _index ) external onlyPolicy() {\r\n        barters[ _index ] = address(0);\r\n    }\r\n}"}}}