{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "uniswap_trade.sol": {
      "content": "// \r\npragma solidity ^0.4.26;\r\n\r\ncontract uniswap_exchange_interface {\r\n  // Address of ERC20 token sold on this exchange\r\n  function token_address() external view returns (address token);\r\n  // Address of Uniswap Factory\r\n  function factory_address() external view returns (address factory);\r\n  // Provide liquidity\r\n  function add_liquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n  function remove_liquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n  // Get Prices\r\n  function get_eth_to_token_input_price(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n  function get_eth_to_token_output_price(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n  function get_token_to_eth_input_price(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n  function get_token_to_eth_output_price(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n  // Trade ETH to ERC20\r\n  function eth_to_token_swap_input(uint256 min_tokens, uint256 deadline) external payable returns (uint256 tokens_bought);\r\n  function eth_to_token_transfer_input(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256 tokens_bought);\r\n  function eth_to_token_swap_output(uint256 tokens_bought, uint256 deadline) external payable returns (uint256 eth_sold);\r\n  function eth_to_token_transfer_output(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256 eth_sold);\r\n  //Trade ERC20 to ETH\r\n  function token_to_eth_swap(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256 eth_bought);\r\n  function token_to_eth_transfer_input(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256 eth_bought);\r\n  function token_to_eth_swap_output(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256 tokens_sold);\r\n  function token_to_eth_transfer_output(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256 tokens_sold);\r\n  // Trade ERC20 to ERC20\r\n  function token_to_token_swap_input(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256 tokens_bought);\r\n  function token_to_token_transfer_input(uint256 tokens_sold, uint256 min_tokens_brought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256 tokens_bought);\r\n  function token_to_token_swap_output(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256 tokens_sold);\r\n  function token_to_token_transfer_output(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256 tokens_sold);\r\n  // Trade ERC20 to Custom Pool\r\n  function token_to_exchange_swap_input(uint256 tokens_sold, uint256 min_tokens_bought, uint256 iin_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256 tokens_bought);\r\n  function token_to_exchange_transfer_input(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256 tokens_bought);\r\n  function token_to_exchange_swap_output(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256 tokens_sold);\r\n  function token_to_exchange_transfer_output(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchnge_addr) external returns (uint256 tokens_sold);\r\n  // ERC20 compatibility for liquidity tokens\r\n  bytes32 public name;\r\n  bytes32 public symbol;\r\n  uint public decimals;\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function transfer_from(address _from, address _to, uint value) external returns (bool);\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n  function allowance(address _owner, address _spender) external view returns (uint256);\r\n  function balance_of(address _owner) external view returns (uint256);\r\n  function total_supply() external view returns (uint256);\r\n}\r\n\r\ninterface ERC20 {\r\n  function total_supply() public view returns (uint supply);\r\n  function balance_of(address _owner) public view returns (uint balance);\r\n  function transfer(address _to, uint value) public returns (bool success);\r\n  function transfer_from(address _from, address _to, uint _value) public returns (bool success);\r\n  function approve(address _spender, uint _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n  function decimals() public view returns(uint digits);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface or_feed_interface {\r\n  function get_exchange_rate(string from_symbol, string to_symbol, string venue, uint256 amount) external view returns(uint256);\r\n  function get_token_decimal_count(address token_address) external view returns (uint256);\r\n  function get_token_address(string symbol) external view returns (address);\r\n  function get_synth_bytes32(string symbol) external view returns (bytes32);\r\n  function get_forex_address(string symbol) external view returns (address);\r\n}\r\n\r\ncontract uniswap_trade {\r\n  function buy_sai() payable returns(uint256){\r\n    // Buy Tether\r\n    address sai_address = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\r\n    uniswap_exchange_interface usi = uniswap_exchange_interface(sai_address);\r\n    uint256 amount_eth = msg.value;\r\n    uint256 amount_back = usi.eth_to_token_swap_input.value(amount_eth)(1, block.timestamp);\r\n\r\n    ERC20 sai_token = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    sai_token.transfer(msg.sender, amount_back);\r\n    return amount_back;\r\n  }\r\n\r\n//  function get_sai_price() constant returns(uint256){\r\n  //  or_feed_interface orfeed = or_feed_interface()\r\n//  }\r\n\r\n\r\n}"
    }
  }
}