{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/trb-proxy.sol":{"content":"/**\n *SPDX-License-Identifier: UNLICENSED\n*/\n\npragma solidity >=0.6.8 <0.8.0;\n\n\ncontract Ownable {\n    address private _owner;\n\n    constructor() internal {\n        _owner = msg.sender;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _owner = newOwner;\n    }\n}\n\ninterface ITellor {\n    function addTip(uint256 _requestId, uint256 _tip) external;\n    function submitMiningSolution(string calldata _nonce, uint256[5] calldata _requestId, uint256[5] calldata _value) external;\n    function depositStake() external;\n\n    function requestStakingWithdraw() external;\n\n    function withdrawStake() external;\n\n    function getUintVar(bytes32 _data) external view returns (uint256);\n\n    function vote(uint256 _disputeId, bool _supportsDispute) external;\n\n    function transfer(address _to, uint256 _amount) external returns (bool);\n}\n\ncontract TellorProxy is Ownable {\n    address tellorAddress;\n\n    constructor(address _tellorAddress)\n        public\n    {\n        tellorAddress = _tellorAddress;\n    }\n\n    function addTip(uint256 _requestId, uint256 _tip) external onlyOwner {\n        ITellor(tellorAddress).addTip(_requestId, _tip);\n    }\n\n    function submitMiningSolution(\n        string calldata _nonce,\n        uint256[5] calldata _requestId,\n        uint256[5] calldata _value,\n        uint256 _pass\n    ) external onlyOwner {\n        if (_pass == 0) {\n            bytes32 slotProgress =\n                0x6c505cb2db6644f57b42d87bd9407b0f66788b07d0617a2bc1356a0e69e66f9a;\n            uint256 _soltNum = ITellor(tellorAddress).getUintVar(slotProgress);\n            require(_soltNum < 4, \"out-ooff-gas\");\n        }\n        ITellor(tellorAddress).submitMiningSolution(_nonce, _requestId, _value);\n    }\n\n    function depositStake() external onlyOwner {\n        ITellor(tellorAddress).depositStake();\n    }\n\n    function requestStakingWithdraw() external onlyOwner {\n        ITellor(tellorAddress).requestStakingWithdraw();\n    }\n\n    function payment(address _to, uint256 _amount) external onlyOwner {\n        ITellor(tellorAddress).transfer(_to, _amount);\n    }\n\n    function getSlotProgress() external view returns (uint256) {\n        bytes32 slotProgress =\n            0x6c505cb2db6644f57b42d87bd9407b0f66788b07d0617a2bc1356a0e69e66f9a;\n        return ITellor(tellorAddress).getUintVar(slotProgress);\n    }\n\n    function withdrawStake() external onlyOwner {\n        ITellor(tellorAddress).withdrawStake();\n    }\n\n    function vote(uint256 _disputeId, bool _supportsDispute)\n        external\n        onlyOwner\n    {\n        ITellor(tellorAddress).vote(_disputeId, _supportsDispute);\n    }\n}"}}}