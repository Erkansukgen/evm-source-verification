{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MintAndBurnAuthority.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2020-07-08\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract MintAndBurnAuthority {\r\n\r\n    mapping (address => bool) public allowList;\r\n\r\n    constructor(address[] _allowlists) public {\r\n        for (uint i = 0; i < _allowlists.length; i ++) {\r\n            allowList[_allowlists[i]] = true;\r\n        }\r\n    }\r\n\r\n    function canCall(\r\n        address _src, address _dst, bytes4 _sig\r\n    ) public view returns (bool) {\r\n        return ( allowList[_src] && _sig == bytes4(keccak256(\"mint(address,uint256)\")) ) ||\r\n        ( allowList[_src] && _sig == bytes4(keccak256(\"burn(address,uint256)\")) );\r\n    }\r\n}"
    }
  }
}