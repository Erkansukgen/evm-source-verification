{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/SurplusAuctionTrigger.sol": {
      "content": "/// SurplusAuctionTrigger.sol\n\n// Copyright (C) 2021 Reflexer Labs, INC\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.7;\n\nabstract contract SAFEEngineLike {\n    function approveSAFEModification(address) virtual external;\n    function coinBalance(address) virtual public view returns (uint256);\n    function transferInternalCoins(address,address,uint256) virtual external;\n}\nabstract contract SurplusAuctionHouseLike {\n    function startAuction(uint256, uint256) virtual public returns (uint256);\n    function contractEnabled() virtual public returns (uint256);\n}\nabstract contract AccountingEngineLike {\n    function contractEnabled() virtual public returns (uint256);\n}\n\ncontract SurplusAuctionTrigger {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"SurplusAuctionTrigger/account-not-authorized\");\n        _;\n    }\n\n    // --- Variables ---\n    // Amount of surplus stability fees sold in one surplus auction\n    uint256                    public surplusAuctionAmountToSell; // [rad]\n\n    // SAFE database\n    SAFEEngineLike             public safeEngine;\n    // Contract that handles auctions for surplus stability fees\n    SurplusAuctionHouseLike    public surplusAuctionHouse;\n    // Accounting engine contract\n    AccountingEngineLike       public accountingEngine;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event AuctionSurplus(uint256 indexed id, uint256 coinBalance);\n    event TransferSurplus(address dst, uint256 surplusAmount);\n\n    constructor(\n      address safeEngine_,\n      address surplusAuctionHouse_,\n      address accountingEngine_,\n      uint256 surplusAuctionAmountToSell_\n    ) public {\n        require(safeEngine_ != address(0), \"SurplusAuctionTrigger/null-safe-engine\");\n        require(surplusAuctionHouse_ != address(0), \"SurplusAuctionTrigger/null-surplus-auction-house\");\n        require(accountingEngine_ != address(0), \"SurplusAuctionTrigger/null-accounting-engine\");\n\n        authorizedAccounts[msg.sender] = 1;\n\n        safeEngine                 = SAFEEngineLike(safeEngine_);\n        surplusAuctionHouse        = SurplusAuctionHouseLike(surplusAuctionHouse_);\n        accountingEngine           = AccountingEngineLike(accountingEngine_);\n        surplusAuctionAmountToSell = surplusAuctionAmountToSell_;\n\n        safeEngine.approveSAFEModification(surplusAuctionHouse_);\n    }\n\n    // --- Boolean Logic ---\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n\n    /**\n     * @notice Start a new surplus auction\n    **/\n    function auctionSurplus() external returns (uint256 id) {\n        require(\n          safeEngine.coinBalance(address(this)) >= surplusAuctionAmountToSell, \"SurplusAuctionTrigger/insufficient-surplus\"\n        );\n        id = surplusAuctionHouse.startAuction(surplusAuctionAmountToSell, 0);\n        emit AuctionSurplus(id, safeEngine.coinBalance(address(this)));\n    }\n    /**\n    * @notice Transfer surplus out of this contract if you're an authed address\n    * @param dst Destination address\n    * @param surplusAmount Amount of surplus to transfer\n    **/\n    function transferSurplus(address dst, uint256 surplusAmount) external isAuthorized {\n        require(\n          either(accountingEngine.contractEnabled() == 0, surplusAuctionHouse.contractEnabled() == 0),\n          \"SurplusAuctionTrigger/cannot-transfer-surplus\"\n        );\n\n        surplusAuctionHouse.contractEnabled() == 0;\n        safeEngine.transferInternalCoins(address(this), dst, surplusAmount);\n        emit TransferSurplus(dst, surplusAmount);\n    }\n}"
    }
  }
}