{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/0701/testpay_unlimit.sol": {
      "content": "pragma solidity ^0.6.7;\r\n// SPDX-License-Identifier: SimPL-2.0\r\n\r\ncontract testpay_local_unlimit{\r\n    \r\n    bytes32 private hashLock = 0xdb5cb01306b4f93936b4328c8f6106756ef774ea64acdf7c834b9e613d4689ee;\r\n    mapping(address=>uint) private ub;\r\n    mapping(address=>uint) private uc;\r\n    uint private ucc = 2000;\r\n    \r\n    \r\n    function s3(bytes memory s) internal pure returns(bytes32 ){\r\n      return keccak256(s);\r\n    }\r\n    \r\n    function gnonce() public view returns(uint){\r\n        require(!isc(msg.sender));\r\n        require(ub[msg.sender]>0);\r\n        return ucc;\r\n    }\r\n    \r\n    function attend() public payable{\r\n        require(msg.value<=100000000000000000000);\r\n        require(msg.value>=10000000000000000);\r\n        require(!isc(msg.sender));\r\n        ub[msg.sender]+=msg.value;\r\n        uc[msg.sender]++;\r\n    }\r\n    \r\n    function getattend() public view returns (uint){\r\n        require(!isc(msg.sender));\r\n        require(ub[msg.sender]>0);\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function unattend(address payable who,uint amount,string memory _srcvalue, bytes memory c1) public {\r\n        require(sha256(bytes(_srcvalue))==hashLock);\r\n        //require(msg.sender == 0x2D93F1d9cAa01044CF40B30092Ccde129DEeB575);\r\n        require(!isc(msg.sender));\r\n        require(ub[msg.sender]>0);\r\n        require(decode(c1,s3(bytes(uint2str(ucc))))==msg.sender);\r\n        who.transfer(amount);\r\n        ucc++;\r\n    }\r\n    \r\n    function decode(bytes memory b1,bytes32 b2)internal pure returns (address){\r\n      bytes32 r=bytesToBytes32(slice(b1,0,32));\r\n      bytes32 s=bytesToBytes32(slice(b1,32,32));\r\n      byte v = slice(b1,64,1)[0];\r\n      return ecrecoverDecode(r,s,v,b2);\r\n      \r\n  }\r\n  \r\n  function slice(bytes memory data,uint start,uint len) internal pure returns(bytes memory){\r\n      bytes memory b=new bytes(len);\r\n      for(uint i=0;i<len;i++){\r\n          b[i]=data[i+start];\r\n      }\r\n      return b;\r\n  }\r\n  \r\n  function ecrecoverDecode(bytes32 r,bytes32 s, byte v1,bytes32 b2) internal pure returns(address addr){\r\n      uint8 v=uint8(v1)+27;\r\n      addr=ecrecover(b2, v, r, s);\r\n  }\r\n  \r\n  function bytesToBytes32(bytes memory source) internal pure returns(bytes32 result){\r\n      assembly{\r\n          result :=mload(add(source,32))\r\n      }\r\n  }\r\n  \r\n  function isc(address addr)internal view returns(bool){\r\n      uint256 size;\r\n      assembly{ size:= extcodesize(addr) }\r\n      return size>0;\r\n  }\r\n  \r\n  \r\n  function addressToString(address _addr) internal pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n    \r\n        bytes memory str = new bytes(51);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n    \r\n    function strConcat(string  memory _a, string memory _b) internal pure returns (string memory){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ret = new string(_ba.length + _bb.length );\r\n        bytes memory bret = bytes(ret);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++)bret[k++] = _ba[i];\r\n        for (uint j = 0; j < _bb.length; j++) bret[k++] = _bb[j];\r\n        return string(ret);\r\n   }\r\n    \r\n    \r\n    function uint2str(uint i) internal pure returns (string memory d) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint length;\r\n        while (j != 0){\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(uint8(48 + i % 10));\r\n            i /= 10;\r\n        }\r\n        d = string(bstr);\r\n    }\r\n\r\n}"
    }
  }
}