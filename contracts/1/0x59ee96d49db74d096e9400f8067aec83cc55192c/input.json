{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "MunchLPContract.sol": {
      "content": "/*\n * Munch LP staking contract.\n *\n * Visit https://munchproject.io\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Uniswap functions required to allow to provide liquidity directly from this contract.\ninterface IUniswapV2Router02 {\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidityETH(\n            address token,\n            uint liquidity,\n            uint amountTokenMin,\n            uint amountETHMin,\n            address to,\n            uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n}\n\ninterface IUniswapV2Pair is IERC20 {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\n\n\n// Stake LP tokens to earn Munch tokens.\n//\n// Cloned from https://github.com/SashimiProject/sashimiswap/blob/master/contracts/MasterChef.sol\n// Modified by DEOR to work for non-mintable ERC20.\n// Modified by Munch to simplify it: only one pool.\ncontract MunchLPStaking is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IUniswapV2Pair;\n\n    // Address of the ERC20 Token contract.\n    IERC20 _munchToken;\n    // Address of LP token contract.\n    IUniswapV2Pair _lpToken;\n    // Uniswap router.\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    // Address where the sell of the tokens for charity will happen\n    address charityAddress;\n\n    // Last block number where we updated the pool reward stats.\n    uint256 _lastRewardBlock;\n\n    // Accumulated ERC20s per share, times 1e36.\n    uint256 _accERC20PerShare = 0;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;             // How many LP tokens the user has provided.\n        uint256 rewardDebt;         // Reward debt. See explanation below.\n        uint lastDepositTime;\n        uint percentToCharity;      // as an int: 50% is stored as 50\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of ERC20s\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * accERC20PerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accERC20PerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // The total amount of Munch that's paid out as reward.\n    uint256 public paidOut = 0;\n    // ERC20 tokens rewarded per block.\n    uint256 public rewardPerBlock;\n\n    // Minimum staking time\n    uint public constant cliffTime = 1 minutes;\n\n    // Info of each user that stakes LP tokens.\n    mapping (address => UserInfo) public userInfo;\n\n    // minimum % of rewards being given to charity - 50% is stored as 50\n    uint public minPercentToCharity;\n\n    // The block number when farming starts.\n    uint public startBlock;\n    // The block number when farming ends.\n    uint public endBlock;\n\n    uint256 public fundsAdded;\n\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n\n    constructor(address lpToken, address munchToken, uint rewards) {\n        _munchToken = IERC20(munchToken);\n        _lpToken = IUniswapV2Pair(lpToken);\n        rewardPerBlock = rewards;\n        startBlock = 0;\n        endBlock = 0;\n        minPercentToCharity = 50;\n\n        charityAddress = address(_munchToken);\n        \n        _lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        \n        // Prepare supply and removal of LP through this contract\n        _munchToken.approve(address(_uniswapV2Router), type(uint).max);\n        _lpToken.approve(address(_uniswapV2Router), type(uint).max);\n    }\n\n    function setMinPercentToCharity(uint percent) public onlyOwner {\n        minPercentToCharity = percent;\n    }\n\n    function setCharityAddress(address addy) public onlyOwner {\n        charityAddress = addy;\n    }\n\n    // Fund the farm: starts it if not already started, increases the end block\n    function fund(uint256 amount) public onlyOwner {\n        require(startBlock == 0 || block.number < endBlock, \"fund: too late, the farm is closed\");\n\n        _munchToken.safeTransferFrom(address(msg.sender), address(this), amount);\n        if (startBlock == 0) {\n            startBlock = block.number;\n            endBlock = startBlock;\n        }\n        endBlock += amount.div(rewardPerBlock);\n\n        fundsAdded = fundsAdded.add(amount);\n    }\n\n    // Fund the farm and change rewards rate, increase the end block\n    function fund(uint256 amount, uint256 rewards) public onlyOwner {\n        require(startBlock > 0 && block.number < endBlock, \"fund: Farm is closed or not yet started\");\n        _munchToken.safeTransferFrom(address(msg.sender), address(this), amount);\n        changeReward(rewards);\n\n        fundsAdded = fundsAdded.add(amount);\n    }\n\n    // Change rewards rate, increase the end block\n    function changeReward(uint256 rewards) public onlyOwner {\n        require(startBlock > 0, \"Not started yet\");\n        updatePool();\n        rewardPerBlock = rewards;\n        uint256 amount = _munchToken.balanceOf(address(this));\n        \n        // new end block to be computed based on new reward rate and remaining rewards\n        uint refBlock = block.number > startBlock ? block.number : startBlock;\n        endBlock = refBlock + amount.div(rewardPerBlock);\n    }\n\n    // View function to see pending ERC20s for a user.\n    function pending(address _user) external view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        uint256 lpSupply = _lpToken.balanceOf(address(this));\n        uint256 accERC20PerShare = _accERC20PerShare;\n\n        if (block.number > _lastRewardBlock && lpSupply != 0) {\n            uint256 lastBlock = block.number < endBlock ? block.number : endBlock;\n            uint256 nrOfBlocks = lastBlock.sub(_lastRewardBlock);\n            accERC20PerShare = accERC20PerShare.add(nrOfBlocks.mul(rewardPerBlock).mul(1e36).div(lpSupply));\n        }\n\n        return user.amount.mul(accERC20PerShare).div(1e36).sub(user.rewardDebt);\n    }\n\n    // View function for total reward the farm has yet to pay out.\n    function totalPending() external view returns (uint256) {\n        if (block.number <= startBlock) {\n            return 0;\n        }\n\n        uint256 lastBlock = block.number < endBlock ? block.number : endBlock;\n        return rewardPerBlock.mul(lastBlock - startBlock).sub(paidOut);\n    }\n\n    // Update reward variables of the pool to be up-to-date.\n    function updatePool() public {\n        uint256 lastBlock = block.number < endBlock ? block.number : endBlock;\n\n        if (lastBlock <= _lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = _lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            _lastRewardBlock = lastBlock;\n            return;\n        }\n\n        uint256 nrOfBlocks = lastBlock.sub(_lastRewardBlock);\n        uint256 erc20Reward = nrOfBlocks.mul(rewardPerBlock);\n\n        _accERC20PerShare = _accERC20PerShare.add(erc20Reward.mul(1e36).div(lpSupply));\n        _lastRewardBlock = lastBlock;\n    }\n\n    // Deposit LP tokens to Farm for ERC20 allocation.\n    // Can be called with amount = 0 to change the percent to charity.\n    function deposit(uint256 amount, uint percentToCharity) public {\n        require(block.number < endBlock, 'Farm is now closed');\n        require(percentToCharity >= minPercentToCharity && minPercentToCharity <= 100, 'Invalid charity value');\n        UserInfo storage user = userInfo[msg.sender];\n        updatePool();\n        if (user.amount > 0) {\n            uint256 pendingAmount = user.amount.mul(_accERC20PerShare).div(1e36).sub(user.rewardDebt);\n            erc20Transfer(msg.sender, pendingAmount, user.percentToCharity);\n        }\n        _lpToken.safeTransferFrom(address(msg.sender), address(this), amount);\n        user.amount = user.amount.add(amount);\n        user.rewardDebt = user.amount.mul(_accERC20PerShare).div(1e36);\n        user.lastDepositTime = block.timestamp;\n        user.percentToCharity = percentToCharity;\n        emit Deposit(msg.sender, amount);\n    }\n\n    // Withdraw LP tokens from Farm.\n    // Can be called with amount = 0 to claim rewards.\n    function withdraw(uint256 amount) public {\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.amount >= amount, \"withdraw: can't withdraw more than deposit\");\n        // allow to claim anytime, but withdrawal needs to be after cliff time\n        require(amount == 0 || block.timestamp.sub(user.lastDepositTime) > cliffTime, \"You recently staked, please wait before withdrawing.\");\n        updatePool();\n        uint256 pendingAmount = user.amount.mul(_accERC20PerShare).div(1e36).sub(user.rewardDebt);\n        erc20Transfer(msg.sender, pendingAmount, user.percentToCharity);\n        user.amount = user.amount.sub(amount);\n        user.rewardDebt = user.amount.mul(_accERC20PerShare).div(1e36);\n        _lpToken.safeTransfer(address(msg.sender), amount);\n        emit Withdraw(msg.sender, amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public {\n        UserInfo storage user = userInfo[msg.sender];\n        _lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Transfer MUNCH and update the required MUNCH to payout all rewards\n    function erc20Transfer(address to, uint256 amount, uint percentToCharity) internal {\n        uint256 toCharity = amount.mul(percentToCharity).div(100);\n        uint256 toHolder = amount.sub(toCharity);\n        if (toCharity > 0) {\n            // send share to charity\n            _munchToken.transfer(charityAddress, toCharity);\n        }\n        if (toHolder > 0) {\n            // send share to holder\n            _munchToken.transfer(to, toHolder);\n        }\n\n        paidOut += amount;\n    }\n\n    // Withdraw MUNCH tokens after end block\n    // Can only be called 4 weeks after end block to avoid\n    // withdrawing rewards not yet claimed.\n    function erc20Withdraw(address to) onlyOwner public {\n        require(block.timestamp >= endBlock + 6 * 7 days, \"Not allowed until 6 weeks after end of farming.\");\n        uint256 amount = _munchToken.balanceOf(address(this));\n        _munchToken.transfer(to, amount);\n    }\n\n    // Allow owner to withdraw any ETH sent to contract\n    function ethWithdraw(address payable to) onlyOwner public {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"Balance is zero.\");\n        to.transfer(balance);\n    }\n\n    // Required to remove liq since ETH goes through this contract\n    receive() external payable {}\n    \n    // Used to provide liq through this contract so we can waive transaction fees \n    function provideLiquidity(uint256 amount) external payable {\n        _munchToken.transferFrom(msg.sender, address(this), amount);\n        _uniswapV2Router.addLiquidityETH{value: msg.value}(address(_munchToken), amount, amount.mul(99).div(100), msg.value.mul(99).div(100), msg.sender, block.timestamp);\n    }\n\n    // Used to remove liq through this contract so we can waive transaction fees \n    function removeLiquidity(uint256 amount) external {\n        _lpToken.transferFrom(msg.sender, address(this), amount);\n        (uint256 munchBal, uint256 ethBal,) = _lpToken.getReserves();\n        uint256 share = amount.div(_lpToken.totalSupply());\n        (uint256 munchWithdrawn, uint256 ethWithdrawn) = _uniswapV2Router.removeLiquidityETH(address(_munchToken), amount, share.mul(munchBal).mul(99).div(100), share.mul(ethBal).mul(99).div(100), address(this), block.timestamp);\n        _munchToken.transfer(msg.sender, munchWithdrawn);\n        (bool success, ) = msg.sender.call{value: ethWithdrawn}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n}"
    }
  }
}