{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MarketPriceOracle.sol":{"content":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: market-oracle/contracts/MedianOracle.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ninterface IOracle {\r\n    function getData() external returns (uint256, bool);\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Median Oracle\r\n *\r\n * @notice Provides a value onchain that's aggregated from a whitelisted set of\r\n *         providers.\r\n */\r\ncontract MarketPriceOracle is Ownable, IOracle {\r\n    \r\n    uint256 public currentMarketPrice;\r\n    /**\r\n     * @notice Pushes a targetPrice\r\n     * @param currentMarketPrice_ is expected to be 18 decimal fixed point number in WEI\r\n     */\r\n    function pushReport(uint256 currentMarketPrice_) external onlyOwner\r\n    {\r\n        //\r\n        currentMarketPrice = currentMarketPrice_;\r\n    }\r\n\r\n    /**\r\n    * @return AggregatedValue: return the reported values.\r\n    *         valid: Boolean indicating an aggregated value was computed successfully.\r\n    */\r\n    function getData()\r\n        external\r\n        returns (uint256, bool)\r\n    {\r\n        \r\n        return (currentMarketPrice, true);\r\n    }\r\n\r\n}"}}}