{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Arbys.sol": {
      "content": "// Sources flattened with hardhat v2.0.3 https://hardhat.org\n\n// File contracts/utils/Ownable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File contracts/interfaces/IERC20.sol\n\n// SPDX-License-Identifier: No License\n\npragma solidity 0.6.6;\n\n/**\n * @title Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function symbol() external view returns (string memory);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function totalSupply() external view returns (uint256);\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n}\n\n\n// File contracts/interfaces/IProtocolFactory.sol\n\n// SPDX-License-Identifier: No License\n\npragma solidity 0.6.6;\n\n/**\n * @dev ProtocolFactory contract interface. See {ProtocolFactory}.\n * @author crypto-pumpkin@github\n */\ninterface IProtocolFactory {\n  /// @notice emit when a new protocol is supported in COVER\n  event ProtocolInitiation(address protocolAddress);\n\n  function getAllProtocolAddresses() external view returns (address[] memory);\n  function getRedeemFees() external view returns (uint16 _numerator, uint16 _denominator);\n  function redeemFeeNumerator() external view returns (uint16);\n  function redeemFeeDenominator() external view returns (uint16);\n  function protocolImplementation() external view returns (address);\n  function coverImplementation() external view returns (address);\n  function coverERC20Implementation() external view returns (address);\n  function treasury() external view returns (address);\n  function governance() external view returns (address);\n  function claimManager() external view returns (address);\n  function protocols(bytes32 _protocolName) external view returns (address);\n\n  function getProtocolsLength() external view returns (uint256);\n  function getProtocolNameAndAddress(uint256 _index) external view returns (bytes32, address);\n  /// @notice return contract address, the contract may not be deployed yet\n  function getProtocolAddress(bytes32 _name) external view returns (address);\n  /// @notice return contract address, the contract may not be deployed yet\n  function getCoverAddress(bytes32 _protocolName, uint48 _timestamp, address _collateral, uint256 _claimNonce) external view returns (address);\n  /// @notice return contract address, the contract may not be deployed yet\n  function getCovTokenAddress(bytes32 _protocolName, uint48 _timestamp, address _collateral, uint256 _claimNonce, bool _isClaimCovToken) external view returns (address);\n\n  /// @notice access restriction - owner (dev)\n  /// @dev update this will only affect contracts deployed after\n  function updateProtocolImplementation(address _newImplementation) external returns (bool);\n  /// @dev update this will only affect contracts deployed after\n  function updateCoverImplementation(address _newImplementation) external returns (bool);\n  /// @dev update this will only affect contracts deployed after\n  function updateCoverERC20Implementation(address _newImplementation) external returns (bool);\n  function assignClaimManager(address _address) external returns (bool);\n  function addProtocol(\n    bytes32 _name,\n    bool _active,\n    address _collateral,\n    uint48[] calldata _timestamps,\n    bytes32[] calldata _timestampNames\n  ) external returns (address);\n\n  /// @notice access restriction - governance\n  function updateClaimManager(address _address) external returns (bool);\n  function updateFees(uint16 _redeemFeeNumerator, uint16 _redeemFeeDenominator) external returns (bool);\n  function updateGovernance(address _address) external returns (bool);\n  function updateTreasury(address _address) external returns (bool);\n}\n\n\n// File contracts/interfaces/IProtocol.sol\n\n// SPDX-License-Identifier: No License\n\npragma solidity 0.6.6;\n\n/**\n * @dev Protocol contract interface. See {Protocol}.\n * @author crypto-pumpkin@github\n */\ninterface IProtocol {\n  /// @notice emit when a claim against the protocol is accepted\n  event ClaimAccepted(uint256 newClaimNonce);\n\n  function getProtocolDetails()\n    external view returns (\n      bytes32 _name,\n      bool _active,\n      uint256 _claimNonce,\n      uint256 _claimRedeemDelay,\n      uint256 _noclaimRedeemDelay,\n      address[] memory _collaterals,\n      uint48[] memory _expirationTimestamps,\n      address[] memory _allCovers,\n      address[] memory _allActiveCovers\n    );\n  function active() external view returns (bool);\n  function name() external view returns (bytes32);\n  function claimNonce() external view returns (uint256);\n  /// @notice delay # of seconds for redeem with accepted claim, redeemCollateral is not affected\n  function claimRedeemDelay() external view returns (uint256);\n  /// @notice delay # of seconds for redeem without accepted claim, redeemCollateral is not affected\n  function noclaimRedeemDelay() external view returns (uint256);\n  function activeCovers(uint256 _index) external view returns (address);\n  function claimDetails(uint256 _claimNonce) external view returns (uint16 _payoutNumerator, uint16 _payoutDenominator, uint48 _incidentTimestamp, uint48 _timestamp);\n  function collateralStatusMap(address _collateral) external view returns (uint8 _status);\n  function expirationTimestampMap(uint48 _expirationTimestamp) external view returns (bytes32 _name, uint8 _status);\n  function coverMap(address _collateral, uint48 _expirationTimestamp) external view returns (address);\n\n  function collaterals(uint256 _index) external view returns (address);\n  function collateralsLength() external view returns (uint256);\n  function expirationTimestamps(uint256 _index) external view returns (uint48);\n  function expirationTimestampsLength() external view returns (uint256);\n  function activeCoversLength() external view returns (uint256);\n  function claimsLength() external view returns (uint256);\n  function addCover(address _collateral, uint48 _timestamp, uint256 _amount)\n    external returns (bool);\n\n  /// @notice access restriction - claimManager\n  function enactClaim(uint16 _payoutNumerator, uint16 _payoutDenominator, uint48 _incidentTimestamp, uint256 _protocolNonce) external returns (bool);\n\n  /// @notice access restriction - dev\n  function setActive(bool _active) external returns (bool);\n  function updateExpirationTimestamp(uint48 _expirationTimestamp, bytes32 _expirationTimestampName, uint8 _status) external returns (bool);\n  function updateCollateral(address _collateral, uint8 _status) external returns (bool);\n\n  /// @notice access restriction - governance\n  function updateClaimRedeemDelay(uint256 _claimRedeemDelay) external returns (bool);\n  function updateNoclaimRedeemDelay(uint256 _noclaimRedeemDelay) external returns (bool);\n}\n\n\n// File contracts/interfaces/IBalancerPool.sol\n\n// SPDX-License-Identifier: No License\n\npragma solidity 0.6.6;\n\ninterface IBalancerPool {\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n}\n\n\n// File contracts/Minter.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\n\n\n\n\ncontract Arbys is Ownable {\n    IProtocolFactory public factory;\n    IERC20 public daiToken;\n    uint48 public expirationTime;\n\n    // Initialize, called once\n    constructor (\n      IProtocolFactory _factory,\n      IERC20 daiToken_\n    )\n      public Ownable()\n    {\n      factory = _factory;\n      daiToken = daiToken_;\n    }\n\n    function arbitrageSell(IBalancerPool _bPool, IProtocol _protocol, uint48 _expiration, uint _daiAmount) external {\n      daiToken.transferFrom(msg.sender, address(this), _daiAmount);\n      if (daiToken.allowance(address(this), address(_protocol)) < _daiAmount) {\n        daiToken.approve(address(_protocol), _daiAmount);\n      }\n      _protocol.addCover(address(daiToken), _expiration, _daiAmount);\n\n      address noclaimTokenAddr = factory.getCovTokenAddress(_protocol.name(), _expiration, address(daiToken), _protocol.claimNonce(), false);\n      address claimTokenAddr = factory.getCovTokenAddress(_protocol.name(), _expiration, address(daiToken), _protocol.claimNonce(), false);\n\n      _swapTokenForDai(_bPool, IERC20(noclaimTokenAddr), _daiAmount);\n      _swapTokenForDai(_bPool, IERC20(claimTokenAddr), _daiAmount);\n\n      uint256 bal = daiToken.balanceOf(address(this));\n      require(bal > _daiAmount, \"No arbys\");\n      require(daiToken.transfer(msg.sender, bal), \"ERR_TRANSFER_FAILED\");\n    }\n\n    function _swapTokenForDai(IBalancerPool _bPool, IERC20 token, uint _sellAmount) private {\n        if (token.allowance(address(this), address(_bPool)) < _sellAmount) {\n          token.approve(address(_bPool), _sellAmount);\n        }\n        IBalancerPool(_bPool).swapExactAmountIn(\n            address(token),\n            _sellAmount,\n            address(daiToken),\n            0, // minAmountOut, set to 0 -> sell no matter how low the price of CLAIM tokens are\n            2**256 - 1 // maxPrice, set to max -> accept any swap prices\n        );\n    }\n\n    function destroy() external onlyOwner {\n        selfdestruct(msg.sender);\n    }\n\n    receive() external payable {}\n}\n"
    }
  }
}