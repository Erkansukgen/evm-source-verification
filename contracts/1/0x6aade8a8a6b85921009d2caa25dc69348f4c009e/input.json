{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/contracts/helpers/SafeMath.sol":{"content":"// SPDX-License-Identifier: bsl-1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.7.1;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n"},"localhost/contracts/test-helpers/DummyToken.sol":{"content":"// SPDX-License-Identifier: bsl-1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.7.1;\n\nimport \"./EmptyToken.sol\";\n\n\ncontract DummyToken is EmptyToken {\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8         _decimals,\n        uint          _totalSupply\n    ) EmptyToken(\n        _name,\n        _symbol,\n        _decimals,\n        _totalSupply,\n        msg.sender\n    )\n    public {}\n}\n"},"localhost/contracts/test-helpers/EmptyToken.sol":{"content":"// SPDX-License-Identifier: bsl-1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.7.1;\n\nimport \"../helpers/SafeMath.sol\";\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\nabstract contract ERC20Basic {\n    function totalSupply() public view virtual returns (uint);\n    function balanceOf(address who) public view virtual returns (uint);\n    function transfer(address to, uint value) public virtual returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint;\n    mapping(address => uint) balances;\n    uint totalSupply_;\n    /**\n     * @dev total number of tokens in existence\n     */\n    function totalSupply() public view override virtual returns (uint) {\n        return totalSupply_;\n    }\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint _value) public override virtual returns (bool) {\n        // require(_to != address(0), \"ZERO_ADDRESS\");\n        require(_value <= balances[msg.sender], \"TRANSFER_INSUFFICIENT_BALANCE\");\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return balance An uint representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view override virtual returns (uint balance) {\n        return balances[_owner];\n    }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\nabstract contract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view virtual returns (uint);\n    function transferFrom(address from, address to, uint value) public virtual returns (bool);\n    function approve(address spender, uint value) public virtual returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n    using SafeMath for uint;\n\n    mapping (address => mapping (address => uint)) internal allowed;\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint _value) public override virtual returns (bool) {\n        // require(_to != address(0), \"ZERO_ADDRESS\");\n        require(_value <= balances[_from], \"TRANSFERFROM_INSUFFICIENT_BALANCE\");\n        require(_value <= allowed[_from][msg.sender], \"TRANSFERFROM_INSUFFICIENT_ALLOWANCE\");\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint _value) public override returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view override returns (uint) {\n        return allowed[_owner][_spender];\n    }\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract EmptyToken is StandardToken {\n    using SafeMath for uint;\n\n    string     public name = \"Some token on ethereum\";\n    string     public symbol = \"STE\";\n    uint8      public decimals = 18;\n\n    event Burn(address indexed burner, uint value);\n\n    function burn(uint _value) public returns (bool) {\n        require(_value <= balances[msg.sender], \"BURN_INSUFFICIENT_BALANCE\");\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n        return true;\n    }\n\n    function burnFrom(address _owner, uint _value) public returns (bool) {\n        require(_owner != address(0), \"ZERO_ADDRESS\");\n        require(_value <= balances[_owner], \"BURNFROM_INSUFFICIENT_BALANCE\");\n        require(_value <= allowed[_owner][msg.sender], \"BURNFROM_INSUFFICIENT_ALLOWANCE\");\n\n        balances[_owner] = balances[_owner].sub(_value);\n        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n\n        emit Burn(_owner, _value);\n        emit Transfer(_owner, address(0), _value);\n        return true;\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8         _decimals,\n        uint          _totalSupply,\n        address       _firstHolder\n    )\n    public\n    {\n        require(_firstHolder != address(0), \"ZERO_ADDRESS\");\n        checkSymbolAndName(_symbol,_name);\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply_ = _totalSupply;\n\n        balances[_firstHolder] = totalSupply_;\n    }\n\n    // Make sure symbol has 3-8 chars in [A-Za-z._] and name has up to 128 chars.\n    function checkSymbolAndName(\n        string memory _symbol,\n        string memory _name\n    )\n    internal\n    pure\n    {\n        bytes memory s = bytes(_symbol);\n        require(s.length >= 3 && s.length <= 8, \"INVALID_SIZE\");\n        for (uint i = 0; i < s.length; i++) {\n            // make sure symbol contains only [A-Za-z._]\n            require(\n                s[i] == 0x2E || (\n            s[i] == 0x5F) || (\n            s[i] >= 0x41 && s[i] <= 0x5A) || (\n            s[i] >= 0x61 && s[i] <= 0x7A), \"INVALID_VALUE\");\n        }\n        bytes memory n = bytes(_name);\n        require(n.length >= s.length && n.length <= 128, \"INVALID_SIZE\");\n        for (uint i = 0; i < n.length; i++) {\n            require(n[i] >= 0x20 && n[i] <= 0x7E, \"INVALID_VALUE\");\n        }\n    }\n}\n"}}}