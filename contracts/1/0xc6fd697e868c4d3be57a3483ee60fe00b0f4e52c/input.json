{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/DistroDualSplit.sol": {
      "content": "pragma solidity 0.6.7;\n\nabstract contract DSTokenLike {\n    function balanceOf(address) virtual view public returns (uint256);\n    function transfer(address, uint256) virtual public;\n}\n\ncontract DistroDualSplit {\n    // --- Structs ---\n    struct TokenReceiver {\n        address who;\n        uint256 allocation;\n    }\n\n    // --- Variables ---\n    DSTokenLike   public token;\n    TokenReceiver public firstReceiver;\n    TokenReceiver public secondReceiver;\n\n    constructor(\n      address token_,\n      address receiver1,\n      address receiver2,\n      uint256 allocation1\n    ) public {\n        require(token_ != address(0), \"DistroDualSplit/null-token\");\n        require(receiver1 != address(0), \"DistroDualSplit/null-receiver-1\");\n        require(receiver2 != address(0), \"DistroDualSplit/null-receiver-2\");\n        require(both(allocation1 > 0, allocation1 < 100), \"DistroDualSplit/invalid-allocation-1\");\n\n        token          = DSTokenLike(token_);\n\n        firstReceiver  = TokenReceiver(receiver1, allocation1);\n        secondReceiver = TokenReceiver(receiver2, 100 - allocation1);\n    }\n\n    // --- Boolean Logic ---\n    function both(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n\n    // --- Math ---\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"DistroDualSplit/multiply-uint-uint-overflow\");\n    }\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"DistroDualSplit/sub-uint-uint-underflow\");\n    }\n\n    // --- Core Logic ---\n    /*\n    * @notice Distribute tokens to the two receivers\n    */\n    function distribute() public {\n        uint256 firstAllocation  = multiply(firstReceiver.allocation, token.balanceOf(address(this))) / 100;\n        uint256 secondAllocation = subtract(token.balanceOf(address(this)), firstAllocation);\n\n        token.transfer(firstReceiver.who, firstAllocation);\n        token.transfer(secondReceiver.who, secondAllocation);\n    }\n}"
    }
  }
}