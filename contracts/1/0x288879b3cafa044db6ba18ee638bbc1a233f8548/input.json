{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"DXswapFeeSetter.sol":{"content":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-15\r\n*/\r\n\r\n// File: contracts/interfaces/IDXswapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDXswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\r\n    function feeTo() external view returns (address);\r\n    function protocolFeeDenominator() external view returns (uint8);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setProtocolFee(uint8 _protocolFee) external;\r\n    function setSwapFee(address pair, uint32 swapFee) external;\r\n}\r\n\r\n// File: contracts/DXswapFeeSetter.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract DXswapFeeSetter {\r\n    address public owner;\r\n    mapping(address => address) public pairOwners;\r\n    IDXswapFactory public factory;\r\n  \r\n    constructor(address _owner, address _factory) public {\r\n        owner = _owner;\r\n        factory = IDXswapFactory(_factory);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function transferPairOwnership(address pair, address newOwner) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        pairOwners[pair] = newOwner;\r\n    }\r\n\r\n    function setFeeTo(address feeTo) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setFeeTo(feeTo);\r\n    }\r\n\r\n    function setFeeToSetter(address feeToSetter) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setFeeToSetter(feeToSetter);\r\n    }\r\n    \r\n    function setProtocolFee(uint8 protocolFeeDenominator) external {\r\n        require(msg.sender == owner, 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setProtocolFee(protocolFeeDenominator);\r\n    }\r\n    \r\n    function setSwapFee(address pair, uint32 swapFee) external {\r\n        require((msg.sender == owner) || ((msg.sender == pairOwners[pair])), 'DXswapFeeSetter: FORBIDDEN');\r\n        factory.setSwapFee(pair, swapFee);\r\n    }\r\n}"}}}