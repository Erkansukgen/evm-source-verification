{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Delegaror.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n// Modified version of: https://etherscan.io/address/0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446#code\npragma solidity >=0.7.0 <0.8.0;\n\ncontract DoughStakingDelegateRegistry {\n    address public owner;\n\n    // The value is the address of the delegate\n    mapping(address => address) public delegation;\n\n    // Using these events it is possible to process the events to build up reverse lookups.\n    // The indeces allow it to be very partial about how to build this lookup (e.g. only for a specific delegate).\n    event SetDelegate(address indexed delegator, address indexed delegate);\n    event ClearDelegate(address indexed delegator, address indexed delegate);\n    event OwnershipChange(address indexed oldOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    /// @param delegator address of the delegator\n    /// @param delegate Address of the delegate\n    function setDelegate(address delegator, address delegate) public onlyOwner {\n        require(delegate != address(0), \"ZERO_ADDRESS\");\n        address currentDelegate = delegation[delegator];\n        require(delegate != currentDelegate, \"Already delegated to this address\");\n\n        // Update delegation mapping\n        delegation[delegator] = delegate;\n\n        emit SetDelegate(delegator, delegate);\n    }\n\n    function clearDelegate(address delegator) public onlyOwner {\n        address currentDelegate = delegation[delegator];\n        require(currentDelegate != address(0), \"No delegate set\");\n\n        // update delegation mapping\n        delegation[delegator] = address(0);\n\n        emit ClearDelegate(delegator, currentDelegate);\n    }\n\n    function changeOwner(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\n\n        emit OwnershipChange(owner, newOwner);\n\n        owner = newOwner;\n    }\n}"}}}