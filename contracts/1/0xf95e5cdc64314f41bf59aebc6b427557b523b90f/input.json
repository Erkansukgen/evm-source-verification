{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"portContract.sol":{"content":"pragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * \r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/IUniswapV2Router.sol\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.8.4;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function setOwnableConstructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    \r\n}\r\n\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n\r\n    function updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly { // solium-disable-line\r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\r\n        }\r\n    }\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n    }\r\n}\r\n\r\ncontract LibraryLockDataLayout {\r\n  bool public initialized = false;\r\n}\r\n\r\ncontract LibraryLock is LibraryLockDataLayout {\r\n    // Ensures no one can manipulate the Logic Contract once it is deployed.\r\n    // PARITY WALLET HACK PREVENTION\r\n\r\n    modifier delegatedOnly() {\r\n        require(initialized == true, \"The library is locked. No direct 'call' is allowed\");\r\n        _;\r\n    }\r\n    function initialize() internal {\r\n        initialized = true;\r\n    }\r\n}\r\n\r\ncontract DataLayout is LibraryLock {\r\n    string public startChain;\r\n    uint public chainId;\r\n    uint256 public nonce;\r\n    uint public threshold;\r\n    mapping(address => bool) public isValidSigner;\r\n    address[] public signersArr;\r\n    \r\n    //transactions being sent to contracts on external chains\r\n    uint256 public outboundIndex;\r\n    struct outboundTransactions {\r\n        address sender;\r\n        uint256 amount;\r\n        uint256 feeAmount;\r\n        address recipient;\r\n        address destination;\r\n        string chain;\r\n        string preferredNode;\r\n        address startContract;\r\n    }\r\n    mapping(uint256 => outboundTransactions) public outboundHistory;\r\n    \r\n    //transactions being sent to contracts on local chain\r\n    uint256 public inboundIndex;\r\n    struct inboundTransactions {\r\n        uint256 amount;\r\n        address sender;\r\n        address recipient;\r\n        string chain;\r\n    }\r\n    mapping(uint256 => inboundTransactions) public inboundHistory;\r\n    \r\n    mapping(address => bool) public allowedContracts;\r\n    \r\n    address public bridgeAddress;\r\n    \r\n    IUniswapV2Router02 public router;\r\n    address public localStableToken;\r\n    mapping(uint256 => mapping(address => bool)) public signHistory;\r\n    address public foundationWallet;\r\n    mapping(string => uint256) public priceMapping;\r\n    mapping(bytes32 => bool) public usedHashes;\r\n}\r\n\r\ncontract PortContract is Ownable, Proxiable, DataLayout {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint32;\r\n    \r\n    constructor () {\r\n \r\n    }\r\n\r\n    function proxyConstructor(string memory _startChain, uint _threshold, uint _chainId) public {\r\n        require(!initialized, \"Contract is already initialized\");\r\n        setOwnableConstructor();\r\n        startChain = _startChain;\r\n        threshold = _threshold;\r\n        chainId = _chainId;\r\n        initialize();\r\n    }\r\n\r\n    function updateCode(address newCode) public onlyOwner delegatedOnly  {\r\n        updateCodeAddress(newCode);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n  \t}\r\n    \r\n    event BridgeSwapOut(\r\n        address sender,\r\n        address recipient,\r\n        address destination,\r\n        uint256 amount,\r\n        string startChain,\r\n        string endChain,\r\n        string preferredNode,\r\n        uint256 feeAmount,\r\n        address startContract\r\n        \r\n    );\r\n\r\n    event BridgeSwapIn(\r\n        string startChain,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier onlyBridge {\r\n        require(msg.sender == bridgeAddress);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAllowed {\r\n        require(allowedContracts[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    function setThreshold(uint _threshold) public onlyOwner {\r\n        threshold = _threshold;\r\n    }\r\n    \r\n    function setBridgeAddress(address _address) public onlyOwner {\r\n        bridgeAddress = _address;\r\n    }\r\n    \r\n    function setChainId(uint _chainId) public onlyOwner {\r\n        chainId = _chainId;\r\n    }\r\n    \r\n    function setContractStatus(address _contract, bool status) public onlyOwner {\r\n        allowedContracts[_contract] = status;\r\n    }\r\n    \r\n    function setFoundationWallet(address _wallet) public onlyOwner {\r\n        foundationWallet = _wallet;\r\n    }\r\n    \r\n    \r\n    function setPriceMapping(string memory chain, uint256 price) public onlyOwner {\r\n        priceMapping[chain] = price;\r\n    }\r\n        \r\n    function addSigner(address[] memory _signers) public onlyOwner {\r\n        for (uint i = 0; i < _signers.length; i++) {\r\n            require(_signers[i] != address(0), \"0 Address cannot be a signer\");\r\n            require(!isValidSigner[_signers[i]], \"New signer cannot be an existing signer\");\r\n            isValidSigner[_signers[i]] = true;\r\n            signersArr.push(_signers[i]);\r\n        }\r\n    }\r\n    \r\n    function outboundSwap(\r\n        address sender, \r\n        address recipient,\r\n        uint256 amount,\r\n        address destination,\r\n        string memory endChain,\r\n        string memory preferredNode) public payable onlyAllowed {\r\n        require(msg.value > 0, \"Fee amount must be greater than 0\");\r\n        outboundIndex = outboundIndex.add(1);\r\n        outboundHistory[outboundIndex].sender = sender;\r\n        outboundHistory[outboundIndex].amount = amount;\r\n        outboundHistory[outboundIndex].feeAmount = msg.value;\r\n        outboundHistory[outboundIndex].startContract = msg.sender;\r\n        outboundHistory[outboundIndex].destination = destination;\r\n        outboundHistory[outboundIndex].recipient = recipient;\r\n        outboundHistory[outboundIndex].chain = endChain;\r\n        outboundHistory[outboundIndex].preferredNode = preferredNode;\r\n        require(msg.value >= priceMapping[endChain], \"Minimum bridge fee required\");\r\n        payable(foundationWallet).transfer(msg.value);\r\n        \r\n        emit BridgeSwapOut(sender, recipient, destination, amount, startChain, endChain, preferredNode, msg.value, msg.sender);\r\n    }\r\n    \r\n    function determineFeeInCoin(string memory endChain) public view returns(uint256) {\r\n        //return getEstimatedStableforCoin(priceMapping[endChain])[0];\r\n        return priceMapping[endChain];\r\n    }\r\n    \r\n    function getEstimatedStableforCoin(uint coinAmount) public view returns (uint[] memory) {\r\n        return router.getAmountsIn(coinAmount, getPathForCointoStable());\r\n    }\r\n\r\n    function getPathForCointoStable() private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = localStableToken;\r\n        \r\n        return path;\r\n    }\r\n    \r\n    function inboundSwap(\r\n        string memory _startChain,\r\n        address sender,\r\n        address recipient,\r\n        address destination,\r\n        uint256 amount) internal {\r\n        \r\n        inboundIndex = inboundIndex.add(1);\r\n        inboundHistory[inboundIndex].amount = amount;\r\n        inboundHistory[inboundIndex].sender = sender;\r\n        inboundHistory[inboundIndex].recipient = recipient;\r\n        inboundHistory[inboundIndex].chain = _startChain;\r\n        \r\n        HokkContract(destination).portMessage(recipient, amount);\r\n        emit BridgeSwapIn(startChain, sender, recipient, amount);\r\n    }\r\n    \r\n\r\n    // Note that address recovered from signatures must be strictly increasing, in order to prevent duplicates\r\n    function execute(\r\n        string memory _startChain,\r\n        address sender,\r\n        address recipient,\r\n        address destination,\r\n        uint256 amount,\r\n        uint8[] memory sigV, bytes32[] memory sigR, bytes32[] memory sigS, bytes32[] memory hashes) public {\r\n        require(sigR.length >= threshold, \"sigR must meet or exceed threshold\");\r\n        require(sigR.length == sigS.length && sigR.length == sigV.length, \"sigR length must equal sigS\");\r\n        require(isValidSigner[msg.sender], \"Caller must be a valid signer\");\r\n        require(!usedHashes[hashes[0]], \"Invalid hash\");\r\n\r\n  \r\n        for (uint i = 0; i < threshold; i++) {\r\n            address recovered = ecrecover(hashes[0], sigV[i], sigR[i], sigS[i]);\r\n            require(!signHistory[nonce][recovered] && isValidSigner[recovered], \"Invalid signer\");\r\n            signHistory[nonce][recovered] = true;\r\n        }\r\n\r\n        usedHashes[hashes[0]] = true;\r\n        nonce = nonce + 1;\r\n        inboundSwap(_startChain, sender, recipient, destination, amount);\r\n    }\r\n    \r\n}\r\n\r\ninterface HokkContract {\r\n    function portMessage(address recipient, uint256 amount) external;\r\n}"}}}