{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Hotfries.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/// @title Hotfricoin for Loot holders!\r\n/// @author Hotfricoin <https://twitter.com/Hotfriescoin>\r\n/// @notice This contract mints Hotfriescoin for Loot holders and provides\r\n/// administrative functions to the Loot DAO. It allows:\r\n/// * Loot holders to claim Hotfriescoin\r\n/// * A DAO to set seasons for new opportunities to claim Hotfriescoin\r\n/// * A DAO to mint Hotfriescoin for use within the Loot ecosystem\r\ncontract Hotfriescoin is Context, Ownable, ERC20 {\r\n // Loot contract is available at https://etherscan.io/address/0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7\r\n address public lootContractAddress =\r\n 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\r\n IERC721Enumerable public lootContract;\r\n // Give out 1243 Hotfriescoin for every Loot Bag that a user holds\r\n uint256 public HotfriescoinPerTokenId = 1243 * (10**decimals());\r\n // tokenIdStart of 1 is based on the following lines in the Loot contract:\r\n /**\r\n function claim(uint256 tokenId) public nonReentrant {\r\n require(tokenId > 0 && tokenId < 7778, \"Token ID invalid\");\r\n _safeMint(_msgSender(), tokenId);\r\n }\r\n */\r\n uint256 public tokenIdStart = 1;\r\n // tokenIdEnd of 8000 is based on the following lines in the Loot contract: \r\n /**\r\n function ownerClaim(uint256 tokenId) public nonReentrant onlyOwner {\r\n require(tokenId > 7777 && tokenId < 8001, \"Token ID invalid\");\r\n _safeMint(owner(), tokenId);\r\n }\r\n */\r\n \r\n uint256 public tokenIdEnd = 8000;\r\n uint256 public PUBLIC_MINT_PRICE = 200000000000000; // 0.0002000000 eth\r\n uint public MAX_SUPPLY = 40000000;\r\n uint public MAX_FREE_SUPPLY = 9944000;\r\n uint public MAX_PAID_SUPPLY = 29836000;\r\n uint public totalFreeClaims = 0;\r\n uint public totalPaidClaims = 0;\r\n address private devWallet = 0x482e57C86D0eA19d7756Ea863fB8E58E6c69f0E9;\r\n // Seasons are used to allow users to claim tokens regularly. Seasons are\r\n // decided by the DAO.\r\n uint256 public season = 0;\r\n uint256 public contractorToken = 220000;\r\n \r\n // 220,000 will be reserved for contratc creater\r\n \r\n // Track claimed tokens within a season \r\n // IMPORTANT: The format of the mapping is:\r\n // claimedForSeason[season][tokenId][claimed]\r\n mapping(uint256 => mapping(uint256 => bool)) public seasonClaimedByTokenId;\r\n constructor() Ownable() ERC20(\"Hotfries\", \"HF\") {\r\n // Transfer ownership to the Loot DAO\r\n // Ownable by OpenZeppelin automatically sets owner to msg.sender, but\r\n // we're going to be using a separate wallet for deployment\r\n transferOwnership(0x482e57C86D0eA19d7756Ea863fB8E58E6c69f0E9);\r\n lootContract = IERC721Enumerable(lootContractAddress);\r\n _mint(lootContractAddress,MAX_SUPPLY - contractorToken);\r\n _mint(msg.sender, contractorToken);\r\n \r\n//  payable(devWallet).transfer(contractorToken);\r\n \r\n\r\n \r\n//  transfer(msg.sender, contractorToken);\r\n\r\n }\r\n \r\n /// @notice Claim Hotfriescoin for a given Loot ID\r\n /// @param tokenId The tokenId of the Loot NFT\r\n function claimById(uint256 tokenId) external {\r\n // Follow the Checks-Effects-Interactions pattern to prevent reentrancy\r\n // attacks\r\n // Checks\r\n // Check that the msgSender owns the token that is being claimed\r\n require(\r\n _msgSender() == lootContract.ownerOf(tokenId),\r\n \"MUST_OWN_TOKEN_ID\"\r\n );\r\n // Further Checks, Effects, and Interactions are contained within the\r\n // _claim() function\r\n _claim(tokenId, _msgSender());\r\n \r\n \r\n }\r\n /// @notice Claim Hotfriescoin for all tokens owned by the sender\r\n /// @notice This function will run out of gas if you have too much loot! If\r\n /// this is a concern, you should use claimRangeForOwner and claim Hotfries\r\n /// coin in batches.\r\n function claimAllForOwner() payable public {\r\n uint256 tokenBalanceOwner = lootContract.balanceOf(_msgSender());\r\n // Checks\r\n require( tokenBalanceOwner <= HotfriescoinPerTokenId); // Each loot bag owner claim 1243 HFC Maximum.\r\n \r\n require(tokenBalanceOwner > 0, \"NO_TOKENS_OWNED\"); \r\n // i < tokenBalanceOwner because tokenBalanceOwner is 1-indexed\r\n for (uint256 i = 0; i < tokenBalanceOwner; i++) {\r\n // Further Checks, Effects, and Interactions are contained within\r\n // the _claim() function\r\n _claim(\r\n lootContract.tokenOfOwnerByIndex(_msgSender(), i),\r\n _msgSender()\r\n );\r\n }\r\n }\r\n //1243\r\n function claimAllToken() external{\r\n     uint256 tokenBalanceOwner = lootContract.balanceOf(_msgSender());\r\n // Checks\r\n require(tokenBalanceOwner == HotfriescoinPerTokenId , \"1243 HFC Claimed by each user\"); \r\n // if all token is claimed then 1HFC = 0.0016 eth minimum value of reselling tokens.\r\n PUBLIC_MINT_PRICE = 1600000000000000;\r\n  }\r\n\r\n /// @notice Claim Hotfriescoin for all tokens owned by the sender within a\r\n /// given range\r\n /// @notice This function is useful if you own too much Loot to claim all at\r\n /// once or if you want to leave some Loot unclaimed. If you leave Loot\r\n /// unclaimed, however, you cannot claim it once the next season starts.\r\n function claimRangeForOwner(uint256 ownerIndexStart, uint256 ownerIndexEnd)\r\n external\r\n {\r\n uint256 tokenBalanceOwner = lootContract.balanceOf(_msgSender());\r\n // Checks\r\n require(tokenBalanceOwner > 0, \"NO_TOKENS_OWNED\");\r\n // We use < for ownerIndexEnd and tokenBalanceOwner because\r\n // tokenOfOwnerByIndex is 0-indexed while the token balance is 1-indexed\r\n require(\r\n ownerIndexStart >= 0 && ownerIndexEnd < tokenBalanceOwner,\r\n \"INDEX_OUT_OF_RANGE\"\r\n );\r\n // i <= ownerIndexEnd because ownerIndexEnd is 0-indexed\r\n for (uint256 i = ownerIndexStart; i <= ownerIndexEnd; i++) {\r\n // Further Checks, Effects, and Interactions are contained within\r\n // the _claim() function\r\n _claim(\r\n lootContract.tokenOfOwnerByIndex(_msgSender(), i),\r\n _msgSender()\r\n );\r\n }\r\n }\r\n /// @dev Internal function to mint Loot upon claiming\r\n function _claim(uint256 tokenId, address tokenOwner) internal {\r\n // Checks\r\n // Check that the token ID is in range\r\n // We use >= and <= to here because all of the token IDs are 0-indexed\r\n require(\r\n tokenId >= tokenIdStart && tokenId <= tokenIdEnd,\r\n \"TOKEN_ID_OUT_OF_RANGE\"\r\n );\r\n\r\n // Check thatHotfriescoin have not already been claimed this season\r\n // for a given tokenId\r\n require(\r\n !seasonClaimedByTokenId[season][tokenId],\r\n \"GOLD_CLAIMED_FOR_TOKEN_ID\"\r\n );\r\n \r\n // Effects\r\n // Mark that Hotfriescoin has been claimed for this season for the\r\n // given tokenId\r\n seasonClaimedByTokenId[season][tokenId] = true;\r\n // Interactions\r\n // Send Hotfriescoin to the owner of the token ID\r\n _mint(tokenOwner, HotfriescoinPerTokenId);\r\n\r\n }\r\n \r\n \r\n /// @notice Allows the DAO to mint new tokens for use within the Loot\r\n /// Ecosystem\r\n /// @param amountDisplayValue The amount of Loot to mint. This should be\r\n /// input as the display value, not in raw decimals. If you want to mint\r\n /// 100 Loot, you should enter \"100\" rather than the value of 100 * 10^18.\r\n function daoMint(uint256 amountDisplayValue) external onlyOwner {\r\n _mint(owner(), amountDisplayValue * (10**decimals()));\r\n }\r\n /// @notice Allows the DAO to set a new contract address for Loot. This is\r\n /// relevant in the event that Loot migrates to a new contract.\r\n /// @param lootContractAddress_ The new contract address for Loot\r\n function daoSetLootContractAddress(address lootContractAddress_)\r\n external\r\n onlyOwner\r\n {\r\n lootContractAddress = lootContractAddress_;\r\n lootContract = IERC721Enumerable(lootContractAddress);\r\n }\r\n /// @notice Allows the DAO to set the token IDs that are eligible to claim\r\n /// Loot\r\n /// @param tokenIdStart_ The start of the eligible token range\r\n /// @param tokenIdEnd_ The end of the eligible token range\r\n /// @dev This is relevant in case a future Loot contract has a different\r\n /// total supply of Loot\r\n function daoSetTokenIdRange(uint256 tokenIdStart_, uint256 tokenIdEnd_)\r\n external\r\n onlyOwner\r\n {\r\n tokenIdStart = tokenIdStart_;\r\n tokenIdEnd = tokenIdEnd_;\r\n }\r\n /// @notice Allows the DAO to set a season for new Hotfriescoin claims\r\n /// @param season_ The season to use for claiming Loot\r\n function daoSetSeason(uint256 season_) public onlyOwner {\r\n season = season_;\r\n }\r\n /// @notice Allows the DAO to set the amount of Hotfriescoin that is\r\n /// claimed per token ID\r\n /// @param HotfriescoinDisplayValue The amount of Loot a user can claim.\r\n /// This should be input as the display value, not in raw decimals. If you\r\n /// want to mint 100 Loot, you should enter \"100\" rather than the value of\r\n /// 100 * 10^18.\r\n function daoSetHotfriescoinPerTokenId(uint256 HotfriescoinDisplayValue)\r\n public\r\n onlyOwner\r\n {\r\n HotfriescoinDisplayValue = 1243;\r\n HotfriescoinPerTokenId = HotfriescoinDisplayValue * (10**decimals());\r\n }\r\n /// @notice Allows the DAO to set the season and Hotfriescoin per token ID\r\n /// in one transaction. This ensures that there is not a gap where a user\r\n /// can claim more Hotfriescoin than others\r\n /// @param season_ The season to use for claiming loot\r\n /// @param HotfriescoinDisplayValue The amount of Loot a user can claim.\r\n /// This should be input as the display value, not in raw decimals. If you\r\n /// want to mint 100 Loot, you should enter \"100\" rather than the value of\r\n /// 100 * 10^18.\r\n /// @dev We would save a tiny amount of gas by modifying the season and\r\n /// Hotfriescoin variables directly. It is better practice for security,\r\n /// however, to avoid repeating code. This function is so rarely used that\r\n /// it's not worth moving these values into their own internal function to\r\n /// skip the gas used on the modifier check.\r\n function daoSetSeasonAndHotfriescoinPerTokenID(\r\n uint256 season_,\r\n uint256 HotfriescoinDisplayValue\r\n ) external onlyOwner {\r\n daoSetSeason(season_);\r\n daoSetHotfriescoinPerTokenId(HotfriescoinDisplayValue);\r\n }\r\n}"
    }
  }
}