{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ETH_RUNE.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\n/**\n* Ownable, Mintable, Burnable ERC20. \n* Max Supply of 500m (BNB.RUNE Supply)\n* 10m RUNE minted on construction. Owner can mint more if needed to control supply. \n* ETH.RUNE is intended only to be a transitionary asset to be upgraded to native THOR.RUNE. \n* Users should not hold ETH.RUNE indefinitely. \n* Owner will be renounced when ETH.RUNE can be upgraded. \n*/\n\ninterface iERC20 {\n  function totalSupply() external view returns (uint256);\n  function decimals() external view returns (uint8);\n  function symbol() external view returns (string memory);\n  function name() external view returns (string memory);\n  function getOwner() external view returns (address);\n  function balanceOf(address account) external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function allowance(address _owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n    return c;\n  }\n}\n\ncontract Context {\n  constructor () { }\n  function _msgSender() internal view returns (address payable) {\n    return msg.sender;\n  }\n}\n\ncontract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor () {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract ETH_RUNE is iERC20, Context, Ownable {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n  uint8 public _decimals;\n  string public _symbol;\n  string public _name;\n  uint256 public maxSupply;\n\n  constructor() {\n    _name = 'THORChain ETH.RUNE';\n    _symbol = 'RUNE';\n    _decimals = 18;\n    maxSupply = 500*10**6 * 10**18; //500m\n    _totalSupply = 10*10**6 * 10**18; //10m\n    _balances[msg.sender] = _totalSupply;\n    emit Transfer(address(0), msg.sender, _totalSupply);\n  }\n\n  function getOwner() external view virtual override returns (address) {\n    return owner();\n  }\n\n  function decimals() external view virtual override returns (uint8) {\n    return _decimals;\n  }\n\n  function symbol() external view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  function name() external view virtual override returns (string memory) {\n    return _name;\n  }\n\n  function totalSupply() external view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address account) external view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n  function allowance(address owner, address spender) external view override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  function approve(address spender, uint256 amount) external override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n    return true;\n  }\n\n  /**\n   * Queries the origin of the tx to enable approval-less transactions, such as for upgrading ETH.RUNE to THOR.RUNE. \n   * Beware phishing contracts that could steal tokens by intercepting tx.origin.\n   * The risks of this are the same as infinite-approved contracts which are widespread.  \n   * Acknowledge it is non-standard, but the ERC-20 standard is less-than-desired. (Hi 0xEther).\n   */\n  function transferTo(address recipient, uint256 amount) public returns (bool) {\n    _transfer(tx.origin, recipient, amount);\n    return true;\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n    return true;\n  }\n\n  function mint(uint256 amount) public onlyOwner returns (bool) {\n    _mint(_msgSender(), amount);\n    return true;\n  }\n  \n  function burn(uint256 amount) public virtual {\n    _burn(_msgSender(), amount);\n  }\n\n  function burnFrom(address account, uint256 amount) public virtual {\n    uint256 decreasedAllowance = _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\");\n    _approve(account, _msgSender(), decreasedAllowance);\n    _burn(account, amount);\n  }\n\n  function _transfer(address sender, address recipient, uint256 amount) internal {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n    _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n  function _mint(address account, uint256 amount) internal {\n    require(account != address(0), \"ERC20: mint to the zero address\");\n    require(_totalSupply.add(amount) <= maxSupply, \"Must be less than maxSupply\");\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  function _burn(address account, uint256 amount) internal {\n    require(account != address(0), \"ERC20: burn from the zero address\");\n    _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  function _approve(address owner, address spender, uint256 amount) internal {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n}"
    }
  }
}