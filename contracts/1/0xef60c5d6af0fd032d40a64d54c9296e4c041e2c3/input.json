{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/esd_alpha.sol":{"content":"pragma solidity 0.7.4;\n// SPDX-License-Identifier: MIT\n\n\ninterface DDDD {\n     function redeem(address _user, uint256 _epoch, uint256 _couponAmount) external;\n     \n     function myMoney(uint256 amount) external;\n  \n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\n\ninterface IESDS{\n    \n    function advance() external;\n}\n\ncontract Alpha {\n    \n    IESDS public ESDS = IESDS(0x443D2f2755DB5942601fa062Cc248aAA153313D3);\n     \n    IERC20 public ESD = IERC20(0x36F3FD68E7325a35EB768F1AedaAe9EA0689d723);\n        \n    DDDD public red = DDDD(0xF176D56b9B5fB458AE9A223aCc5C3e35402deD12);\n    \n    \n    function alphaLeak(address _user, uint256 _epoch, uint256 _couponAmount) external{\n        ESDS.advance();\n        red.redeem(_user,_epoch,_couponAmount);\n    }\n    \n    function alphaDD(uint256 amount) external {\n        red.myMoney(amount);\n    }\n    \n    function getMyMoney(uint256 amount) public {\n         ESD.transfer(msg.sender,amount);\n    }\n    \n    \n    function setESD(address addr) public {\n        ESD = IERC20(addr);\n    }\n    \n    function setRed(address addr) public {\n        red = DDDD(addr);\n    }\n    \n    function setESDS(address addr) public {\n        ESDS = IESDS(addr);\n    }\n        \n}"}}}