{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/soldier.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0 <0.9.0;\r\n\r\ncontract killRich{\r\n\r\n    // declaring the state variables\r\n    address manager;\r\n    //address payable[] public players; //dynamic array of type address payable\r\n        uint256 x;\r\n        uint256 y;\r\n        uint256 z;\r\n        uint256 a;\r\n        uint256 b;\r\n        uint256 c;\r\n        uint256 d;\r\n        uint256 e;\r\n        uint256 g;\r\n\r\n    // declaring the constructor\r\n    constructor(){\r\n        // initializing the owner to the address that deploys the contract\r\n        manager = msg.sender;\r\n\r\n        x = 0;\r\n        y = 21;\r\n        z = 43;\r\n        a = 48;\r\n        b = 102;\r\n        c = 3006;\r\n        d = 43566;\r\n        e = 23049;\r\n        g = 11400;\r\n    }\r\n\r\n\r\n    // declaring the receive() function that is necessary to receive ETH\r\n    receive () payable external{\r\n        require(msg.value>=1000000000000000);\r\n\r\n        if(msg.sender!=manager){\r\n        require(address(this).balance>=msg.value);\r\n        }\r\n        uint bolen = 47;\r\n               uint yuzde = 0;\r\n        for(uint cz=0;cz<5;cz++){\r\n\r\n\r\n    x =x+1;\r\n    y =y+1;\r\n    z =z+1;\r\n    a =a+1;\r\n    b =b+1;\r\n    c =c+1;\r\n    d =d+1;\r\n    e =e+1;\r\n    g =g+1;\r\n     if(random() % 100 < bolen){\r\n     yuzde = yuzde + 40;\r\n        }\r\n        }\r\n       if(msg.sender!=manager){\r\n        payable(msg.sender).transfer(msg.value*yuzde/100);\r\n        }\r\n\r\n        if(address(this).balance>2000000000000000000){\r\n        payable(manager).transfer(200000000000000000);\r\n        }\r\n    }\r\n/*\r\n    // returning the contract's balance in wei\r\n    function getBalance() public view returns(uint){\r\n        // only the manager is allowed to call it\r\n        //require(msg.sender == manager);\r\n        return address(this).balance;\r\n        //return players.length;\r\n    }\r\n*/\r\n    // helper function that returns a big random integer\r\n    function random() internal view returns(uint){\r\n\r\n      return uint(keccak256(abi.encodePacked(b,c,e,a,d,g,x,y,e,z,x,g)));\r\n    }\r\n\r\n\r\n\r\n}\r\n"
    }
  }
}