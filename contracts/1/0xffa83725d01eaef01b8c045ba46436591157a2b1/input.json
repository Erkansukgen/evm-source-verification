{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n"
    },
    "contracts/Multisend.sol": {
      "content": "\npragma solidity >=0.5.0;\n\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n\ncontract Multisend is Ownable {\n    \n    using Counters for Counters.Counter;\n    Counters.Counter private _inversorId;\n    \n    //address payable tokenAddress;\n    IERC20 public associatedToken;\n    \n\n    struct Inversor {\n        address payable addressInversor;\n        uint256 tokenAmount;\n    }\n\n    Inversor[] public inversors;\n    mapping (uint256 => Inversor) public inversorsTable;\n  \n    event TokenSend(address, uint);\n    event WithdrawEvent(address payable, uint);\n    event Received(address, uint);\n\n\n    constructor(address _tokenAddress) public {\n        associatedToken = IERC20(_tokenAddress);\n    }\n    \n    \n    /*\n    @notice Adding inversor information inside the smart contract\n    @param _addressesArray Array with the addresses\n    @param _amounts Array with the ERC20 token amounts\n    */\n    function createInversors(address payable[] memory _addressesArray, uint256[] memory _amounts) public onlyOwner returns (bool) {\n        for (uint i=0; i < _addressesArray.length; i++) {\n            _inversorId.increment();\n            uint256 newInversorId = _inversorId.current();\n            inversors.push(Inversor(_addressesArray[i], _amounts[i]));\n            inversorsTable[newInversorId] = Inversor(_addressesArray[i], _amounts[i]);\n         }\n        return true;\n    }\n\n    /*\n    @notice Adding inversor information inside the smart contract\n    @param _addressesArray Array with the addresses\n    @param _amounts Array with the ERC20 token amounts. The amounts are set to 18 decimal.\n    */\n    function createInversorsDecimal(address payable[] memory _addressesArray, uint256[] memory _amounts) public onlyOwner returns (bool) {\n        for (uint i=0; i < _addressesArray.length; i++) {\n            _inversorId.increment();\n            uint256 newInversorId = _inversorId.current();\n            uint256 amountWithDecimal = _amounts[i] * 10**uint256(18);\n            inversors.push(Inversor(_addressesArray[i], amountWithDecimal));\n            inversorsTable[newInversorId] = Inversor(_addressesArray[i], amountWithDecimal);\n         }\n        return true;\n    }\n    \n    /*\n    @notice Multisend ERC20 token with data in smart contract. Prior add data with createInversors functions.\n    */\n    function multisendWithData() public onlyOwner returns (bool) {\n        for (uint i=0; i < inversors.length; i++) {\n            associatedToken.transfer(inversors[i].addressInversor, inversors[i].tokenAmount);\n            emit TokenSend(inversors[i].addressInversor, inversors[i].tokenAmount);\n        }\n        return true;\n    }\n  \n  \n    /*\n    @notice Multisend passing arrays of address and amounts. The data has not been inside the contract\n    @param _addressesArray Array with the addresses\n    @param _amounts Array with the ERC20 token amounts\n    */\n    function multisend(address payable[] memory _addressesArray, uint256[] memory _amounts) public onlyOwner returns (bool) {\n        for (uint i=0; i < _addressesArray.length; i++) {\n            associatedToken.transfer(_addressesArray[i], _amounts[i]);\n            emit TokenSend(_addressesArray[i], _amounts[i]);\n        }\n        return true;\n    }\n\n    /*\n    @notice Multisend passing arrays of address and amounts. The data has not been inside the contract\n    @param _addressesArray Array with the addresses\n    @param _amounts Array with the ERC20 token amounts. The amounts are set to 18 decimal.\n    */\n    function multisendDecimal(address payable[] memory _addressesArray, uint256[] memory _amounts) public onlyOwner returns (bool) {\n        for (uint i=0; i < _addressesArray.length; i++) {\n            uint256 amountWithDecimal = _amounts[i] * 10**uint256(18);\n            associatedToken.transfer(_addressesArray[i], amountWithDecimal);\n            emit TokenSend(_addressesArray[i], _amounts[i]);\n        }\n        return true;\n    }\n    \n\n     /*\n    @notice Set token ERC20\n    @param _tokenAddress Address of the ERC20 token.\n    */\n    function setTokenERC20(address payable _tokenAddress) public onlyOwner returns (address) {\n        associatedToken = IERC20(_tokenAddress);\n        return _tokenAddress;\n    }\n    \n    /*\n    @notice Check ERC20 contract balance\n    */\n    function checkTokenContractBalance() public view onlyOwner returns (uint256) {\n        return associatedToken.balanceOf(address(this));\n    }\n    \n\n    /*\n    @notice Withdraw ERC20 of the contract\n    @param _withdrawAccount Accound address to send the tokens\n    @param _amount Amount of tokens to send\n    */\n    function withdrawERC20(address payable _withdrawAccount, uint256 _amount) public onlyOwner returns (bool) {\n        associatedToken.transfer(_withdrawAccount, _amount);\n        emit WithdrawEvent(_withdrawAccount, _amount);\n        return true;\n    }\n    \n    \n     /*\n    @notice Withdraw Ether of inside the smart conctract\n    @param _withdrawAccount Accound address to send the ether\n    */\n    function withdraw(address payable _withdrawAccount) public onlyOwner returns (bool) {\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > 0, 'Not sufficient ether in the contract');\n        _withdrawAccount.transfer(contractBalance);\n        emit WithdrawEvent(_withdrawAccount, address(this).balance);\n        return true;\n    }\n    \n    \n\n    /*\n    @notice For empty call data (and any value)\n    */\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n    \n    /*\n    @notice When no other function matches (not even the receive function).\n    */\n    fallback() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n    \n}"
    }
  }
}