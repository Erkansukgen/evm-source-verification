{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ActionRelayer.sol": {
      "content": "pragma solidity 0.7.0;\npragma experimental ABIEncoderV2;\n\n\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n}\n\ncontract ActionRelayer {\n   \n    address public owner = 0x08EEc580AD41e9994599BaD7d2a74A9874A2852c;\n    \n    uint256 MAX_INT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n    \n    receive() external payable {}\n\n\n    function execute(\n      address[] memory to, bytes[] memory callData, uint256[] memory value\n    ) public {\n        require(msg.sender == owner);\n        bool callSuccess = false;\n        for (uint256 i = 0; i < to.length; i++) {\n            (callSuccess, ) = address(to[i]).call{value: value[i]}(callData[i]);\n            require(callSuccess);\n        }\n    }\n    \n    function approve(\n      address[] memory tokens, address to\n    ) public {\n        require(msg.sender == owner);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(IERC20(tokens[i]).approve(to, MAX_INT));\n        }\n    }\n    \n    function takeTokens(\n      address[] memory tokens\n    ) public {\n        require(msg.sender == owner);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(IERC20(tokens[i]).transfer(owner, IERC20(tokens[i]).balanceOf(address(this))));\n        }\n    }\n\n  \n}\n"
    }
  }
}