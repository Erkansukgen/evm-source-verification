{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":9999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/FaasPool/ExchangeProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IBPool is IERC20 {\n    function version() external view returns (uint256);\n\n    function swapExactAmountIn(\n        address,\n        uint256,\n        address,\n        uint256,\n        uint256\n    ) external returns (uint256, uint256);\n\n    function swapExactAmountOut(\n        address,\n        uint256,\n        address,\n        uint256,\n        uint256\n    ) external returns (uint256, uint256);\n\n    function calcInGivenOut(\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external pure returns (uint256);\n\n    function calcOutGivenIn(\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external pure returns (uint256);\n\n    function getDenormalizedWeight(address) external view returns (uint256);\n\n    function swapFee() external view returns (uint256);\n\n    function setSwapFee(uint256 _swapFee) external;\n\n    function bind(\n        address token,\n        uint256 balance,\n        uint256 denorm\n    ) external;\n\n    function rebind(\n        address token,\n        uint256 balance,\n        uint256 denorm\n    ) external;\n\n    function finalize(\n        uint256 _swapFee,\n        uint256 _initPoolSupply,\n        address[] calldata _bindTokens,\n        uint256[] calldata _bindDenorms\n    ) external;\n\n    function setPublicSwap(bool _publicSwap) external;\n\n    function setController(address _controller) external;\n\n    function setExchangeProxy(address _exchangeProxy) external;\n\n    function getFinalTokens() external view returns (address[] memory tokens);\n\n    function getTotalDenormalizedWeight() external view returns (uint256);\n\n    function getBalance(address token) external view returns (uint256);\n\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\n\n    function joinPoolFor(\n        address account,\n        uint256 rewardAmountOut,\n        uint256[] calldata maxAmountsIn\n    ) external;\n\n    function joinswapPoolAmountOut(\n        address tokenIn,\n        uint256 poolAmountOut,\n        uint256 maxAmountIn\n    ) external returns (uint256 tokenAmountIn);\n\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\n\n    function exitswapPoolAmountIn(\n        address tokenOut,\n        uint256 poolAmountIn,\n        uint256 minAmountOut\n    ) external returns (uint256 tokenAmountOut);\n\n    function exitswapExternAmountOut(\n        address tokenOut,\n        uint256 tokenAmountOut,\n        uint256 maxPoolAmountIn\n    ) external returns (uint256 poolAmountIn);\n\n    function joinswapExternAmountIn(\n        address tokenIn,\n        uint256 tokenAmountIn,\n        uint256 minPoolAmountOut\n    ) external returns (uint256 poolAmountOut);\n\n    function finalizeRewardFundInfo(address _rewardFund, uint256 _unstakingFrozenTime) external;\n\n    function addRewardPool(\n        IERC20 _rewardToken,\n        uint256 _startBlock,\n        uint256 _endRewardBlock,\n        uint256 _rewardPerBlock,\n        uint256 _lockRewardPercent,\n        uint256 _startVestingBlock,\n        uint256 _endVestingBlock\n    ) external;\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\ninterface IBFactory {\n    function newBPool() external returns (IBPool);\n\n    function collect(address _token) external;\n}\n\ninterface IValueLiquidRegistry {\n    function getBestPoolsWithLimit(\n        address,\n        address,\n        uint256\n    ) external view returns (address[] memory);\n}\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract ExchangeProxy {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    modifier discountCHI(uint8 flag) {\n        if ((flag & 0x1) == 0) {\n            _;\n        } else {\n            uint256 gasStart = gasleft();\n            _;\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n        }\n    }\n\n    struct Pool {\n        address pool;\n        uint256 tokenBalanceIn;\n        uint256 tokenWeightIn;\n        uint256 tokenBalanceOut;\n        uint256 tokenWeightOut;\n        uint256 swapFee;\n        uint256 effectiveLiquidity;\n    }\n\n    struct Swap {\n        address pool;\n        address tokenIn;\n        address tokenOut;\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\n        uint256 maxPrice;\n    }\n\n    IWETH weth;\n    IValueLiquidRegistry registry;\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    uint256 private constant BONE = 10**18;\n\n    address public governance;\n\n    constructor(address _weth) public {\n        weth = IWETH(_weth);\n        governance = tx.origin;\n    }\n\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function setRegistry(address _registry) external {\n        require(msg.sender == governance, \"!governance\");\n        registry = IValueLiquidRegistry(_registry);\n    }\n\n    function batchSwapExactIn(\n        Swap[] memory swaps,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut,\n        uint8 flag\n    ) public payable discountCHI(flag) returns (uint256 totalAmountOut) {\n        transferFromAll(tokenIn, totalAmountIn);\n\n        for (uint256 i = 0; i < swaps.length; i++) {\n            Swap memory swap = swaps[i];\n            IERC20 SwapTokenIn = IERC20(swap.tokenIn);\n            IBPool pool = IBPool(swap.pool);\n\n            safeApprove(address(SwapTokenIn), swap.pool, swap.swapAmount);\n\n            (uint256 tokenAmountOut, ) = pool.swapExactAmountIn(swap.tokenIn, swap.swapAmount, swap.tokenOut, swap.limitReturnAmount, swap.maxPrice);\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n        }\n\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\n\n        transferAll(tokenOut, totalAmountOut);\n        transferAll(tokenIn, getBalance(tokenIn));\n    }\n\n    function batchSwapExactOut(\n        Swap[] memory swaps,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 maxTotalAmountIn,\n        uint8 flag\n    ) public payable discountCHI(flag) returns (uint256 totalAmountIn) {\n        transferFromAll(tokenIn, maxTotalAmountIn);\n\n        for (uint256 i = 0; i < swaps.length; i++) {\n            Swap memory swap = swaps[i];\n            IERC20 SwapTokenIn = IERC20(swap.tokenIn);\n            IBPool pool = IBPool(swap.pool);\n\n            safeApprove(address(SwapTokenIn), swap.pool, swap.limitReturnAmount);\n\n            (uint256 tokenAmountIn, ) = pool.swapExactAmountOut(swap.tokenIn, swap.limitReturnAmount, swap.tokenOut, swap.swapAmount, swap.maxPrice);\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\n        }\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\n\n        transferAll(tokenOut, getBalance(tokenOut));\n        transferAll(tokenIn, getBalance(tokenIn));\n    }\n\n    function multihopBatchSwapExactIn(\n        Swap[][] memory swapSequences,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut,\n        uint8 flag\n    ) public payable discountCHI(flag) returns (uint256 totalAmountOut) {\n        transferFromAll(tokenIn, totalAmountIn);\n\n        for (uint256 i = 0; i < swapSequences.length; i++) {\n            uint256 tokenAmountOut;\n            for (uint256 k = 0; k < swapSequences[i].length; k++) {\n                Swap memory swap = swapSequences[i][k];\n                IERC20 SwapTokenIn = IERC20(swap.tokenIn);\n                if (k == 1) {\n                    // Makes sure that on the second swap the output of the first was used\n                    // so there is not intermediate token leftover\n                    swap.swapAmount = tokenAmountOut;\n                }\n\n                IBPool pool = IBPool(swap.pool);\n                safeApprove(address(SwapTokenIn), swap.pool, swap.swapAmount);\n                (tokenAmountOut, ) = pool.swapExactAmountIn(swap.tokenIn, swap.swapAmount, swap.tokenOut, swap.limitReturnAmount, swap.maxPrice);\n            }\n            // This takes the amountOut of the last swap\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n        }\n\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\n\n        transferAll(tokenOut, totalAmountOut);\n        transferAll(tokenIn, getBalance(tokenIn));\n    }\n\n    function multihopBatchSwapExactOut(\n        Swap[][] memory swapSequences,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 maxTotalAmountIn,\n        uint8 flag\n    ) public payable discountCHI(flag) returns (uint256 totalAmountIn) {\n        transferFromAll(tokenIn, maxTotalAmountIn);\n\n        for (uint256 i = 0; i < swapSequences.length; i++) {\n            uint256 tokenAmountInFirstSwap;\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\n            if (swapSequences[i].length == 1) {\n                Swap memory swap = swapSequences[i][0];\n                IERC20 SwapTokenIn = IERC20(swap.tokenIn);\n\n                IBPool pool = IBPool(swap.pool);\n                safeApprove(address(SwapTokenIn), swap.pool, swap.limitReturnAmount);\n\n                (tokenAmountInFirstSwap, ) = pool.swapExactAmountOut(swap.tokenIn, swap.limitReturnAmount, swap.tokenOut, swap.swapAmount, swap.maxPrice);\n            } else {\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\n                // of token C. But first we need to buy B with A so we can then buy C with B\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\n                uint256 intermediateTokenAmount;\n                // This would be token B as described above\n                Swap memory secondSwap = swapSequences[i][1];\n                IBPool poolSecondSwap = IBPool(secondSwap.pool);\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\n                    poolSecondSwap.getBalance(secondSwap.tokenIn),\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\n                    poolSecondSwap.getBalance(secondSwap.tokenOut),\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\n                    secondSwap.swapAmount,\n                    poolSecondSwap.swapFee()\n                );\n\n                //// Buy intermediateTokenAmount of token B with A in the first pool\n                Swap memory firstSwap = swapSequences[i][0];\n                IERC20 FirstSwapTokenIn = IERC20(firstSwap.tokenIn);\n                IBPool poolFirstSwap = IBPool(firstSwap.pool);\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint256(-1)) {\n                    safeApprove(address(FirstSwapTokenIn), firstSwap.pool, uint256(-1));\n                }\n\n                (tokenAmountInFirstSwap, ) = poolFirstSwap.swapExactAmountOut(\n                    firstSwap.tokenIn,\n                    firstSwap.limitReturnAmount,\n                    firstSwap.tokenOut,\n                    intermediateTokenAmount, // This is the amount of token B we need\n                    firstSwap.maxPrice\n                );\n\n                //// Buy the final amount of token C desired\n                IERC20 SecondSwapTokenIn = IERC20(secondSwap.tokenIn);\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint256(-1)) {\n                    safeApprove(address(SecondSwapTokenIn), secondSwap.pool, uint256(-1));\n                }\n\n                poolSecondSwap.swapExactAmountOut(\n                    secondSwap.tokenIn,\n                    secondSwap.limitReturnAmount,\n                    secondSwap.tokenOut,\n                    secondSwap.swapAmount,\n                    secondSwap.maxPrice\n                );\n            }\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\n        }\n\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\n\n        transferAll(tokenOut, getBalance(tokenOut));\n        transferAll(tokenIn, getBalance(tokenIn));\n    }\n\n    function smartSwapExactIn(\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 totalAmountIn,\n        uint256 minTotalAmountOut,\n        uint256 nPools,\n        uint8 flag\n    ) public payable discountCHI(flag) returns (uint256 totalAmountOut) {\n        Swap[] memory swaps;\n        if (isETH(tokenIn)) {\n            (swaps, ) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\n        } else if (isETH(tokenOut)) {\n            (swaps, ) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\n        } else {\n            (swaps, ) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\n        }\n\n        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut, 0x0);\n    }\n\n    function smartSwapExactOut(\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 totalAmountOut,\n        uint256 maxTotalAmountIn,\n        uint256 nPools,\n        uint8 flag\n    ) public payable discountCHI(flag) returns (uint256 totalAmountIn) {\n        Swap[] memory swaps;\n        if (isETH(tokenIn)) {\n            (swaps, ) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\n        } else if (isETH(tokenOut)) {\n            (swaps, ) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\n        } else {\n            (swaps, ) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\n        }\n\n        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn, 0x0);\n    }\n\n    function viewSplitExactIn(\n        address tokenIn,\n        address tokenOut,\n        uint256 swapAmount,\n        uint256 nPools\n    ) public view returns (Swap[] memory swaps, uint256 totalOutput) {\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n\n        Pool[] memory pools = new Pool[](poolAddresses.length);\n        uint256 sumEffectiveLiquidity;\n        for (uint256 i = 0; i < poolAddresses.length; i++) {\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n        }\n\n        uint256[] memory bestInputAmounts = new uint256[](pools.length);\n        uint256 totalInputAmount;\n        for (uint256 i = 0; i < pools.length; i++) {\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n        }\n\n        if (totalInputAmount < swapAmount) {\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n        } else {\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n        }\n\n        swaps = new Swap[](pools.length);\n\n        for (uint256 i = 0; i < pools.length; i++) {\n            swaps[i] = Swap({\n                pool: pools[i].pool,\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                swapAmount: bestInputAmounts[i],\n                limitReturnAmount: 0,\n                maxPrice: uint256(-1)\n            });\n        }\n\n        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\n\n        return (swaps, totalOutput);\n    }\n\n    function viewSplitExactOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 swapAmount,\n        uint256 nPools\n    ) public view returns (Swap[] memory swaps, uint256 totalOutput) {\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n\n        Pool[] memory pools = new Pool[](poolAddresses.length);\n        uint256 sumEffectiveLiquidity;\n        for (uint256 i = 0; i < poolAddresses.length; i++) {\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n        }\n\n        uint256[] memory bestInputAmounts = new uint256[](pools.length);\n        uint256 totalInputAmount;\n        for (uint256 i = 0; i < pools.length; i++) {\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n        }\n\n        if (totalInputAmount < swapAmount) {\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n        } else {\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n        }\n\n        swaps = new Swap[](pools.length);\n\n        for (uint256 i = 0; i < pools.length; i++) {\n            swaps[i] = Swap({\n                pool: pools[i].pool,\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                swapAmount: bestInputAmounts[i],\n                limitReturnAmount: uint256(-1),\n                maxPrice: uint256(-1)\n            });\n        }\n\n        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\n\n        return (swaps, totalOutput);\n    }\n\n    function getPoolData(\n        address tokenIn,\n        address tokenOut,\n        address poolAddress\n    ) internal view returns (Pool memory) {\n        IBPool pool = IBPool(poolAddress);\n        uint256 tokenBalanceIn = pool.getBalance(tokenIn);\n        uint256 tokenBalanceOut = pool.getBalance(tokenOut);\n        uint256 tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\n        uint256 tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\n        uint256 swapFee = pool.swapFee();\n\n        uint256 effectiveLiquidity = calcEffectiveLiquidity(tokenWeightIn, tokenBalanceOut, tokenWeightOut);\n        Pool memory returnPool =\n            Pool({\n                pool: poolAddress,\n                tokenBalanceIn: tokenBalanceIn,\n                tokenWeightIn: tokenWeightIn,\n                tokenBalanceOut: tokenBalanceOut,\n                tokenWeightOut: tokenWeightOut,\n                swapFee: swapFee,\n                effectiveLiquidity: effectiveLiquidity\n            });\n\n        return returnPool;\n    }\n\n    function calcEffectiveLiquidity(\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut\n    ) internal pure returns (uint256 effectiveLiquidity) {\n        // Bo * wi/(wi+wo)\n        effectiveLiquidity = tokenWeightIn.mul(BONE).div(tokenWeightOut.add(tokenWeightIn)).mul(tokenBalanceOut).div(BONE);\n\n        return effectiveLiquidity;\n    }\n\n    function calcTotalOutExactIn(uint256[] memory bestInputAmounts, Pool[] memory bestPools) internal pure returns (uint256 totalOutput) {\n        totalOutput = 0;\n        for (uint256 i = 0; i < bestInputAmounts.length; i++) {\n            uint256 output =\n                IBPool(bestPools[i].pool).calcOutGivenIn(\n                    bestPools[i].tokenBalanceIn,\n                    bestPools[i].tokenWeightIn,\n                    bestPools[i].tokenBalanceOut,\n                    bestPools[i].tokenWeightOut,\n                    bestInputAmounts[i],\n                    bestPools[i].swapFee\n                );\n\n            totalOutput = totalOutput.add(output);\n        }\n        return totalOutput;\n    }\n\n    function calcTotalOutExactOut(uint256[] memory bestInputAmounts, Pool[] memory bestPools) internal pure returns (uint256 totalOutput) {\n        totalOutput = 0;\n        for (uint256 i = 0; i < bestInputAmounts.length; i++) {\n            uint256 output =\n                IBPool(bestPools[i].pool).calcInGivenOut(\n                    bestPools[i].tokenBalanceIn,\n                    bestPools[i].tokenWeightIn,\n                    bestPools[i].tokenBalanceOut,\n                    bestPools[i].tokenWeightOut,\n                    bestInputAmounts[i],\n                    bestPools[i].swapFee\n                );\n\n            totalOutput = totalOutput.add(output);\n        }\n        return totalOutput;\n    }\n\n    function transferFromAll(IERC20 token, uint256 amount) internal returns (bool) {\n        if (isETH(token)) {\n            weth.deposit{value: msg.value}();\n        } else {\n            token.safeTransferFrom(msg.sender, address(this), amount);\n        }\n        return true;\n    }\n\n    function getBalance(IERC20 token) internal view returns (uint256) {\n        if (isETH(token)) {\n            return weth.balanceOf(address(this));\n        } else {\n            return token.balanceOf(address(this));\n        }\n    }\n\n    function transferAll(IERC20 token, uint256 amount) internal returns (bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (isETH(token)) {\n            weth.withdraw(amount);\n            (bool xfer, ) = msg.sender.call{value: amount}(\"\");\n            require(xfer, \"ERR_ETH_FAILED\");\n        } else {\n            token.safeTransfer(msg.sender, amount);\n        }\n        return true;\n    }\n\n    function isETH(IERC20 token) internal pure returns (bool) {\n        return (address(token) == ETH_ADDRESS);\n    }\n\n    /**\n     * This function allows governance to take unsupported tokens out of the contract.\n     * This is in an effort to make someone whole, should they seriously mess up.\n     * There is no guarantee governance will vote to return these.\n     * It also allows for removal of airdropped tokens.\n     */\n    function governanceRecoverUnsupported(\n        IERC20 _token,\n        uint256 _amount,\n        address _to\n    ) external {\n        require(msg.sender == governance, \"!governance\");\n        if (isETH(_token)) {\n            (bool xfer, ) = _to.call{value: _amount}(\"\");\n            require(xfer, \"ERR_ETH_FAILED\");\n        } else {\n            _token.safeTransfer(_to, _amount);\n        }\n    }\n\n    receive() external payable {}\n\n    function create(\n        IBFactory factory,\n        address[] memory tokens,\n        uint256[] calldata balances,\n        uint256[] calldata denorms,\n        uint256 swapFee,\n        uint256 initPoolSupply,\n        uint8 flag\n    ) external payable discountCHI(flag) returns (IBPool pool) {\n        require(tokens.length == balances.length, \"ERR_LENGTH_MISMATCH\");\n        require(tokens.length == denorms.length, \"ERR_LENGTH_MISMATCH\");\n        pool = factory.newBPool();\n        bool containsETH = false;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (transferFromAllTo(tokens[i], balances[i], address(pool))) {\n                containsETH = true;\n                tokens[i] = address(weth);\n            }\n        }\n        require(msg.value == 0 || containsETH, \"!invalid payable\");\n        pool.finalize(swapFee, initPoolSupply, tokens, denorms);\n        pool.setExchangeProxy(address(this));\n        pool.setController(msg.sender);\n        uint256 lpAmount = pool.balanceOf(address(this));\n        if (lpAmount > 0) {\n            IERC20(pool).safeTransfer(msg.sender, lpAmount);\n        }\n    }\n\n    function joinPool(\n        IBPool pool,\n        uint256 poolAmountOut,\n        uint256[] calldata maxAmountsIn,\n        uint8 flag\n    ) external payable discountCHI(flag) {\n        address[] memory tokens = pool.getFinalTokens();\n        require(maxAmountsIn.length == tokens.length, \"ERR_LENGTH_MISMATCH\");\n        bool containsETH = false;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (msg.value > 0 && tokens[i] == address(weth)) {\n                transferFromAllAndApprove(ETH_ADDRESS, maxAmountsIn[i], address(pool));\n                containsETH = true;\n            } else {\n                transferFromAllAndApprove(tokens[i], maxAmountsIn[i], address(pool));\n            }\n        }\n        require(msg.value == 0 || containsETH, \"!invalid payable\");\n        if (pool.version() == 1001) {\n            pool.joinPool(poolAmountOut, maxAmountsIn);\n        } else {\n            pool.joinPoolFor(msg.sender, poolAmountOut, maxAmountsIn);\n        }\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (containsETH && tokens[i] == address(weth)) {\n                transferAll(IERC20(ETH_ADDRESS), getBalance(IERC20(ETH_ADDRESS)));\n            } else {\n                transferAll(IERC20(tokens[i]), getBalance(IERC20(tokens[i])));\n            }\n        }\n        uint256 lpAmount = pool.balanceOf(address(this));\n        transferAll(pool, lpAmount);\n    }\n\n    function joinswapExternAmountIn(\n        IBPool pool,\n        address tokenIn,\n        uint256 tokenAmountIn,\n        uint256 minPoolAmountOut,\n        uint8 flag\n    ) external payable discountCHI(flag) {\n        bool containsETH = false;\n        if (transferFromAllAndApprove(tokenIn, tokenAmountIn, address(pool))) {\n            containsETH = true;\n        }\n        require(msg.value == 0 || containsETH, \"!invalid payable\");\n        if (containsETH) {\n            uint256 poolAmountOut = pool.joinswapExternAmountIn(address(weth), tokenAmountIn, minPoolAmountOut);\n            IERC20(pool).safeTransfer(msg.sender, poolAmountOut);\n        } else {\n            uint256 poolAmountOut = pool.joinswapExternAmountIn(tokenIn, tokenAmountIn, minPoolAmountOut);\n            IERC20(pool).safeTransfer(msg.sender, poolAmountOut);\n        }\n    }\n\n    function transferFromAllTo(\n        address token,\n        uint256 amount,\n        address to\n    ) internal returns (bool containsETH) {\n        if (isETH(IERC20(token))) {\n            require(amount == msg.value, \"!invalid amount\");\n            weth.deposit{value: amount}();\n            weth.transfer(to, amount);\n            containsETH = true;\n        } else {\n            IERC20(token).safeTransferFrom(msg.sender, to, amount);\n        }\n        return containsETH;\n    }\n\n    function transferFromAllAndApprove(\n        address token,\n        uint256 amount,\n        address spender\n    ) internal returns (bool containsETH) {\n        if (isETH(IERC20(token))) {\n            require(amount == msg.value, \"!invalid amount\");\n            weth.deposit{value: amount}();\n            safeApprove(address(weth), spender, amount);\n            containsETH = true;\n        } else {\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n            safeApprove(token, spender, amount);\n        }\n        return containsETH;\n    }\n}\n"}}}