{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Flopper.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-07-22\n*/\n\n/// flop.sol -- Debt auction\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity >=0.5.12;\n\ncontract LibNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  usr,\n        bytes32  indexed  arg1,\n        bytes32  indexed  arg2,\n        bytes             data\n    ) anonymous;\n\n    modifier note {\n        _;\n        assembly {\n            // log an 'anonymous' event with a constant 6 words of calldata\n            // and four indexed topics: selector, caller, arg1 and arg2\n            let mark := msize()                       // end of memory ensures zero\n            mstore(0x40, add(mark, 288))              // update free memory pointer\n            mstore(mark, 0x20)                        // bytes type data offset\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n            log4(mark, 288,                           // calldata\n                 shl(224, shr(224, calldataload(0))), // msg.sig\n                 caller(),                            // msg.sender\n                 calldataload(4),                     // arg1\n                 calldataload(36)                     // arg2\n                )\n        }\n    }\n}\n\ninterface VatLike {\n    function move(address,address,uint) external;\n    function suck(address,address,uint) external;\n}\ninterface GemLike {\n    function mint(address,uint) external;\n}\ninterface VowLike {\n    function Ash() external returns (uint);\n    function kiss(uint) external;\n}\n\n/*\n   This thing creates gems on demand in return for dai.\n\n - `lot` gems in return for bid\n - `bid` dai paid\n - `gal` receives dai income\n - `ttl` single bid lifetime\n - `beg` minimum bid increase\n - `end` max auction duration\n*/\n\ncontract Flopper is LibNote {\n    // --- Auth ---\n    mapping (address => uint) public wards;\n    function rely(address usr) external note auth { wards[usr] = 1; }\n    function deny(address usr) external note auth { wards[usr] = 0; }\n    modifier auth {\n        require(wards[msg.sender] == 1, \"Flopper/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        uint256 bid;  // dai paid                [rad]\n        uint256 lot;  // gems in return for bid  [wad]\n        address guy;  // high bidder\n        uint48  tic;  // bid expiry time         [unix epoch time]\n        uint48  end;  // auction expiry time     [unix epoch time]\n    }\n\n    mapping (uint => Bid) public bids;\n\n    VatLike  public   vat;  // CDP Engine\n    GemLike  public   gem;\n\n    uint256  constant ONE = 1.00E18;\n    uint256  public   beg = 1.05E18;  // 5% minimum bid increase\n    uint256  public   pad = 1.50E18;  // 50% lot increase for tick\n    uint48   public   ttl = 3 hours;  // 3 hours bid lifetime         [seconds]\n    uint48   public   tau = 2 days;   // 2 days total auction length  [seconds]\n    uint256  public kicks = 0;\n    uint256  public live;             // Active Flag\n    address  public vow;              // not used until shutdown\n\n    // --- Events ---\n    event Kick(\n      uint256 id,\n      uint256 lot,\n      uint256 bid,\n      address indexed gal\n    );\n\n    // --- Init ---\n    constructor(address vat_, address gem_) public {\n        wards[msg.sender] = 1;\n        vat = VatLike(vat_);\n        gem = GemLike(gem_);\n        live = 1;\n    }\n\n    // --- Math ---\n    function add(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function min(uint x, uint y) internal pure returns (uint z) {\n        if (x > y) { z = y; } else { z = x; }\n    }\n\n    // --- Admin ---\n    function file(bytes32 what, uint data) external note auth {\n        if (what == \"beg\") beg = data;\n        else if (what == \"pad\") pad = data;\n        else if (what == \"ttl\") ttl = uint48(data);\n        else if (what == \"tau\") tau = uint48(data);\n        else revert(\"Flopper/file-unrecognized-param\");\n    }\n\n    // --- Auction ---\n    function kick(address gal, uint lot, uint bid) external auth returns (uint id) {\n        require(live == 1, \"Flopper/not-live\");\n        require(kicks < uint(-1), \"Flopper/overflow\");\n        id = ++kicks;\n\n        bids[id].bid = bid;\n        bids[id].lot = lot;\n        bids[id].guy = gal;\n        bids[id].end = add(uint48(now), tau);\n\n        emit Kick(id, lot, bid, gal);\n    }\n    function tick(uint id) external note {\n        require(bids[id].end < now, \"Flopper/not-finished\");\n        require(bids[id].tic == 0, \"Flopper/bid-already-placed\");\n        bids[id].lot = mul(pad, bids[id].lot) / ONE;\n        bids[id].end = add(uint48(now), tau);\n    }\n    function dent(uint id, uint lot, uint bid) external note {\n        require(live == 1, \"Flopper/not-live\");\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flopper/already-finished-tic\");\n        require(bids[id].end > now, \"Flopper/already-finished-end\");\n\n        require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\n        require(lot <  bids[id].lot, \"Flopper/lot-not-lower\");\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flopper/insufficient-decrease\");\n\n        if (msg.sender != bids[id].guy) {\n            vat.move(msg.sender, bids[id].guy, bid);\n\n            // on first dent, clear as much Ash as possible\n            if (bids[id].tic == 0) {\n                uint Ash = VowLike(bids[id].guy).Ash();\n                VowLike(bids[id].guy).kiss(min(bid, Ash));\n            }\n\n            bids[id].guy = msg.sender;\n        }\n\n        bids[id].lot = lot;\n        bids[id].tic = add(uint48(now), ttl);\n    }\n    function deal(uint id) external note {\n        require(live == 1, \"Flopper/not-live\");\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\n        gem.mint(bids[id].guy, bids[id].lot);\n        delete bids[id];\n    }\n\n    // --- Shutdown ---\n    function cage() external note auth {\n       live = 0;\n       vow = msg.sender;\n    }\n    function yank(uint id) external note {\n        require(live == 0, \"Flopper/still-live\");\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n        vat.suck(vow, bids[id].guy, bids[id].bid);\n        delete bids[id];\n    }\n}\n"
    }
  }
}