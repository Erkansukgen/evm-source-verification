{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ChangeDutySpell.sol": {
      "content": "pragma solidity 0.5.12;\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\ncontract JugLike {\r\n    function file(bytes32 ilk, bytes32 what, uint data) external;\r\n    function drip(bytes32 ilk) external;\r\n}\r\n\r\ncontract SpellAction {\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    string constant public description = \"2020-12-14 Change Jut duty value (4% -> 0.1%)\";\r\n\r\n    address constant public MCD_JUG             = 0xF38d987939084c68a2078Ff6FC8804a994197eBC;\r\n    function execute() external {\r\n        JugLike(MCD_JUG).drip(\"ETH-A\");\r\n        JugLike(MCD_JUG).file(\"ETH-A\", \"duty\", 1000000000031693947650284507);\r\n        JugLike(MCD_JUG).drip(\"ETH-A\");\r\n        \r\n        JugLike(MCD_JUG).drip(\"WBTC-A\");\r\n        JugLike(MCD_JUG).file(\"WBTC-A\", \"duty\", 1000000000031693947650284507);\r\n        JugLike(MCD_JUG).drip(\"WBTC-A\");\r\n    }\r\n}\r\ncontract ChangeDutySpell {\r\n    DSPauseAbstract  public pause = DSPauseAbstract(0xD4A71B333607549386aDCf528bAd2D096122F31c);\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    uint256          public expiration;\r\n    bool             public done;\r\n    \r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n    function description() public view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + pause.delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}"
    }
  }
}