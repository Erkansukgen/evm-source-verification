{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "sav2.sol": {
      "content": "pragma solidity ^0.8.0;\n// SPDX-License-Identifier: UNLICENSED\n\ninterface IWETH {\n    /*\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    */\n    function withdraw(uint) external;\n}\n\ninterface IPAIR {\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\ninterface IERC20 {\n    /*\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    */\n    function balanceOf(address owner) external view returns (uint);\n    //function approve(address spender, uint value) external returns (bool);\n}\n\n// https://gastoken.io/\ninterface Gastoken {\n    function free(uint256 value) external returns (bool success);\n    // function freeUpTo(uint256 value) public returns (uint256 freed);\n    // function freeFrom(address from, uint256 value) public returns (bool success);\n    // function freeFromUpTo(address from, uint256 value) public returns (uint256 freed);\n}\n\ncontract Sandwich {\n    // 用来看版本号\n    string public constant name = \"0x33-v2.0\";\n\n    // 固定owner，不然就要从storage中读取，浪费gas\n    address private constant OWNER = 0x3376EBC8DCE3453a045A145Ab7b1e728b2ED581e;\n\n    // WETH\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    // GST2\n    address private constant GST2 = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n\n    //\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    address private constant EMPT = 0x0000000000000000000000000000000000000000;\n\n    // 构造函数，空的\n    constructor() {\n    }    \n\n    // receive ETH，空的\n    receive() external payable {}\n\n    // OWNER\n    modifier onlyOwner() {\n        require(msg.sender == OWNER, \"SaV2: sender not owner\");\n        _;\n    }\n\n    //万一有token，提现\n    // 这些都是偶尔调用，因此应该不会在正常使用的时候浪费gas的\n    // token是ERC20 token address\n    function withdrawToken(address token) external onlyOwner returns (uint balance) {\n        balance = IERC20(token).balanceOf(address(this));\n        if(balance > 0) {\n            _safeTransfer(token, msg.sender, balance);\n        }\n    }\n\n    function withdrawTokenWithAmount(address token, uint amount) external onlyOwner returns (uint balance) {\n        balance = IERC20(token).balanceOf(address(this));\n        require(balance >= amount);\n        _safeTransfer(token, msg.sender, amount);\n    }\n\n    function withdrawETH() external onlyOwner returns (uint balance) {\n        balance = address(this).balance;\n        if(balance > 0) {\n            _safeTransferETH(msg.sender, balance);\n        }\n    }\n\n    function _safeTransferETH(address to, uint256 value) private {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'SaV2: ETH transfer failed');\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SaV2: TRANSFER_FAILED');\n    }\n\n    // 下面是正式的函数\n\n    // buy: 用ETH buy token\n    function buy(\n        uint gst2_to_use, \n        address pair_addr, \n        uint token_pos, \n        uint eth_amount_in, \n        uint token_amount_out,\n        bytes32 parent_hash\n    ) external onlyOwner {\n        bytes32 real_parent_hash = blockhash(block.number - 1);\n        require(parent_hash == real_parent_hash, 'SaV2: invalid parent_hash');\n\n        if(gst2_to_use > 0) {\n            require(Gastoken(GST2).free(gst2_to_use));\n        }\n\n        _safeTransfer(WETH, pair_addr, eth_amount_in);\n\n        bytes memory data = new bytes(0);\n\n        if(token_pos == 0) {\n            IPAIR(pair_addr).swap(token_amount_out, 0, address(this), data);\n        } else {\n            IPAIR(pair_addr).swap(0, token_amount_out, address(this), data);\n        }\n\n        // done\n    }\n\n    // sell: \n    function sell(\n        uint gst2_to_use, \n        address pair_addr, \n        address token_addr, \n        uint token_pos, \n        uint token_amount_in, \n        uint eth_amout_out, \n        uint amount_to_coinbase,\n        address coinbase_addr,\n        bytes32 parent_hash\n        ) external onlyOwner {\n\n        bytes32 real_parent_hash = blockhash(block.number - 1);\n        require(parent_hash == real_parent_hash, 'SaV2: invalid parent_hash' );\n\n        if(gst2_to_use > 0) {\n            require(Gastoken(GST2).free(gst2_to_use));\n        }\n\n        _safeTransfer(token_addr, pair_addr, token_amount_in);\n\n        bytes memory data = new bytes(0);\n\n        if(token_pos == 0) {\n            IPAIR(pair_addr).swap(0, eth_amout_out, address(this), data);\n        } else {\n            IPAIR(pair_addr).swap(eth_amout_out, 0, address(this), data);\n        }\n\n        if(amount_to_coinbase > 0) {\n            IWETH(WETH).withdraw(amount_to_coinbase);\n\n            if(coinbase_addr == EMPT) {\n                block.coinbase.transfer(amount_to_coinbase);\n            } else {\n                _safeTransferETH(coinbase_addr, amount_to_coinbase);\n            }\n        }\n    }\n}\n"
    }
  }
}