{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Pot.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2019-11-14\n*/\n\n// hevm: flattened sources of /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/pot.sol\npragma solidity =0.5.12;\n\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/lib.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\ncontract LibNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  usr,\n        bytes32  indexed  arg1,\n        bytes32  indexed  arg2,\n        bytes             data\n    ) anonymous;\n\n    modifier note {\n        _;\n        assembly {\n            // log an 'anonymous' event with a constant 6 words of calldata\n            // and four indexed topics: selector, caller, arg1 and arg2\n            let mark := msize                         // end of memory ensures zero\n            mstore(0x40, add(mark, 288))              // update free memory pointer\n            mstore(mark, 0x20)                        // bytes type data offset\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n            log4(mark, 288,                           // calldata\n                 shl(224, shr(224, calldataload(0))), // msg.sig\n                 caller,                              // msg.sender\n                 calldataload(4),                     // arg1\n                 calldataload(36)                     // arg2\n                )\n        }\n    }\n}\n\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/pot.sol\n/// pot.sol -- Dai Savings Rate\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\n/* import \"./lib.sol\"; */\n\n/*\n   \"Savings Dai\" is obtained when Dai is deposited into\n   this contract. Each \"Savings Dai\" accrues Dai interest\n   at the \"Dai Savings Rate\".\n\n   This contract does not implement a user tradeable token\n   and is intended to be used with adapters.\n\n         --- `save` your `dai` in the `pot` ---\n\n   - `dsr`: the Dai Savings Rate\n   - `pie`: user balance of Savings Dai\n\n   - `join`: start saving some dai\n   - `exit`: remove some dai\n   - `drip`: perform rate collection\n\n*/\n\ncontract VatLike {\n    function move(address,address,uint256) external;\n    function suck(address,address,uint256) external;\n}\n\ncontract Pot is LibNote {\n    // --- Auth ---\n    mapping (address => uint) public wards;\n    function rely(address guy) external note auth { wards[guy] = 1; }\n    function deny(address guy) external note auth { wards[guy] = 0; }\n    modifier auth {\n        require(wards[msg.sender] == 1, \"Pot/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    mapping (address => uint256) public pie;  // user Savings Dai\n\n    uint256 public Pie;  // total Savings Dai\n    uint256 public dsr;  // the Dai Savings Rate\n    uint256 public chi;  // the Rate Accumulator\n\n    VatLike public vat;  // CDP engine\n    address public vow;  // debt engine\n    uint256 public rho;  // time of last drip\n\n    uint256 public live;  // Access Flag\n\n    // --- Init ---\n    constructor(address vat_) public {\n        wards[msg.sender] = 1;\n        vat = VatLike(vat_);\n        dsr = ONE;\n        chi = ONE;\n        rho = now;\n        live = 1;\n    }\n\n    // --- Math ---\n    uint256 constant ONE = 10 ** 27;\n    function rpow(uint x, uint n, uint base) internal pure returns (uint z) {\n        assembly {\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n            default {\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n                let half := div(base, 2)  // for rounding.\n                for { n := div(n, 2) } n { n := div(n,2) } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) { revert(0,0) }\n                    x := div(xxRound, base)\n                    if mod(n,2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) { revert(0,0) }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = mul(x, y) / ONE;\n    }\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    // --- Administration ---\n    function file(bytes32 what, uint256 data) external note auth {\n        require(live == 1, \"Pot/not-live\");\n        require(now == rho, \"Pot/rho-not-updated\");\n        if (what == \"dsr\") dsr = data;\n        else revert(\"Pot/file-unrecognized-param\");\n    }\n\n    function file(bytes32 what, address addr) external note auth {\n        if (what == \"vow\") vow = addr;\n        else revert(\"Pot/file-unrecognized-param\");\n    }\n\n    function cage() external note auth {\n        live = 0;\n        dsr = ONE;\n    }\n\n    // --- Savings Rate Accumulation ---\n    function drip() external note returns (uint tmp) {\n        require(now >= rho, \"Pot/invalid-now\");\n        tmp = rmul(rpow(dsr, now - rho, ONE), chi);\n        uint chi_ = sub(tmp, chi);\n        chi = tmp;\n        rho = now;\n        vat.suck(address(vow), address(this), mul(Pie, chi_));\n    }\n\n    // --- Savings Dai Management ---\n    function join(uint wad) external note {\n        require(now == rho, \"Pot/rho-not-updated\");\n        pie[msg.sender] = add(pie[msg.sender], wad);\n        Pie             = add(Pie,             wad);\n        vat.move(msg.sender, address(this), mul(chi, wad));\n    }\n\n    function exit(uint wad) external note {\n        pie[msg.sender] = sub(pie[msg.sender], wad);\n        Pie             = sub(Pie,             wad);\n        vat.move(address(this), msg.sender, mul(chi, wad));\n    }\n}\n"}}}