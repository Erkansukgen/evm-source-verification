{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ePING.sol": {
      "content": "/**\t\n * \n$$$$$$$\\        $$$$$$\\       $$\\   $$\\        $$$$$$\\  \n$$  __$$\\       \\_$$  _|      $$$\\  $$ |      $$  __$$\\ \n$$ |  $$ |        $$ |        $$$$\\ $$ |      $$ /  \\__|\n$$$$$$$  |        $$ |        $$ $$\\$$ |      $$ |$$$$\\ \n$$  ____/         $$ |        $$ \\$$$$ |      $$ |\\_$$ |\n$$ |              $$ |        $$ |\\$$$ |      $$ |  $$ |\n$$ |            $$$$$$\\       $$ | \\$$ |      \\$$$$$$  |\n\\__|            \\______|      \\__|  \\__|       \\______/ \n                                                        \n*                                                   \n*/  \n/* PING\n*\n* Taxes structure:\n*\n* 3% taxes for Liquidity\n* 2% reflected to HODLERS\n* 3% operation/dev/marketing wallet\n* 2% research wallet\n*\n* Total supply: 4 billion tokens.\n\nhttps://www.sonarplatform.io/\n\nWorld's first crypto metatracker - AI-driven data aggregation platform\n\n*\n*/\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n     function mint(address from, uint256 value) external;\n     function burn(address from, uint256 value) external;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        address addr = msg.sender;\n        address payable Sender = payable(addr);\n        return Sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n\n//pragma solidity >=0.6.2;\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n// File: contracts/PING.sol\n\npragma solidity ^0.8.0;\n// SPDX-License-Identifier: None\n\n/* PING\n*\n* Taxes structure:\n*\n* 3% taxes for Liquidity\n* 2% reflected to HODLERS\n* 3% operation/dev/marketing wallet\n* 2% research wallet\n*\n*\n*/\n\ncontract ePING is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isExcluded;\n    mapping(address => bool) public adminAddresses;\n    address[] private _excluded;\n    bool public isWalletTransferFeeEnabled = false;\n    bool public isContractTransferFeeEnabled = true;\n\n    string private constant _name = \"ePING\";\n    string private constant _symbol = \"ePING\";\n    uint8 private constant _decimals = 9;\n\n    uint256 private constant MAX = 16 * 10**36 * 10**_decimals;\n    uint256 private  _tTotal = 1 * 10**0 * 10**_decimals;\n    \n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tRfiTotal;\n    uint256 public numOfHODLers;\n    uint256 private _tDevelopmentTotal;\n    uint256 private _tResearchTotal;\n    \n    //@dev enable optimisation to pack this in 32b\n    struct feeRatesStruct {\n      uint8 rfi;\n      uint8 liquidity;\n      uint8 research;\n      uint8 dev;\n    }\n\n    feeRatesStruct public feeRates = feeRatesStruct(\n     {rfi: 2,\n      liquidity: 3,\n      research: 2,\n      dev: 3}); //32 bytes - perfect, as it should be\n\n    struct valuesFromGetValues{\n      uint256 rAmount;\n      uint256 rTransferAmount;\n      uint256 rRfi;\n      uint256 tTransferAmount;\n      uint256 tRfi;\n      uint256 tLiquidity;\n      uint256 tResearch;\n      uint256 tDev;\n    }\n\n    address public researchWallet;\n    address public devWallet;\n    mapping (address => bool) public isPresaleWallet;//exclude presaleWallet from max transaction limit, so that public can claim tokens.\n    \n    IUniswapV2Router02 public  PancakeSwapV2Router;\n    address public  pancakeswapV2Pair;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n\n    uint256 public _maxTxAmount = 4 * 10**9  * 10**_decimals;  \n    uint256 public numTokensSellToAddToLiquidity = 4 * 10**6 * 10**_decimals;   //0.1%\n\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiquidity);\n    event BalanceWithdrawn(address withdrawer, uint256 amount);\n    event LiquidityAdded(uint256 tokenAmount, uint256 bnbAmount);\n    event MaxTxAmountChanged(uint256 oldValue, uint256 newValue);\n    event SwapAndLiquifyStatus(string status);\n    event WalletsChanged();\n    event FeesChanged();\n    event tokensBurned(uint256 amount, string message);\n    event Mint(uint256 amount, address mintAddress);\n    event Burn(uint256 amount, address burnAddress);\n\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor () {\n        _rOwned[_msgSender()] = _rTotal;\n        \n        IUniswapV2Router02 _PancakeSwapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        pancakeswapV2Pair = IUniswapV2Factory(_PancakeSwapV2Router.factory()).createPair(address(this), _PancakeSwapV2Router.WETH()); //only utility is to have the pair at hand, on bscscan...\n        PancakeSwapV2Router = _PancakeSwapV2Router;\n\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n    function toggleWalletTransferTax() external onlyOwner {\n        isWalletTransferFeeEnabled = !isWalletTransferFeeEnabled;\n    }\n\n    function toggleContractTransferTax() external onlyOwner {\n        isContractTransferFeeEnabled = !isContractTransferFeeEnabled;\n    }\n\n    //std ERC20:\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    //override ERC20:\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient,amount, isWalletTransferFeeEnabled);\n        return true;\n    }\n\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n       if (sender.isContract()) {\n            _transfer(sender, recipient, amount, isContractTransferFeeEnabled);\n        } else {\n            _transfer(sender, recipient, amount, isWalletTransferFeeEnabled);\n        }\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tRfiTotal;\n    }\n\n  \n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferRfi) {\n            valuesFromGetValues memory s = _getValues(tAmount, true);\n            return s.rAmount;\n        } else {\n            valuesFromGetValues memory s = _getValues(tAmount, true);\n            return s.rTransferAmount;\n        }\n    }\n\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeFromRFI(address account) public onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInRFI(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is not excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function excludeFromFeeAndRfi(address account) public onlyOwner {\n        excludeFromFee(account);\n        excludeFromRFI(account);\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    /* @dev passing an array or just an uint256 would have been more efficient/elegant, I know\n    */\n    function setRfiRatesPercents(uint8 _rfi, uint8 _lp, uint8 _research, uint8 _dev) public onlyOwner {\n      feeRates.rfi = _rfi;\n      feeRates.liquidity = _lp;\n      feeRates.research = _research;\n      feeRates.dev = _dev;\n      emit FeesChanged();\n    }\n\n    function setWallets(address _research, address _dev) public onlyOwner {\n      researchWallet = _research;\n      devWallet = _dev;\n      _isExcludedFromFee[_research] = true;\n      _isExcludedFromFee[_dev] = true;\n      emit WalletsChanged();\n    }\n\n    function setPresaleWallet(address _presaleWallet) public onlyOwner {\n      _isExcludedFromFee[_presaleWallet] = true;\n      isPresaleWallet[_presaleWallet]=true;\n    }\n\n   function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\n        uint256 _previoiusAmount = _maxTxAmount;\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(100);\n        emit MaxTxAmountChanged(_previoiusAmount, _maxTxAmount);\n    }\n    \n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\n        _maxTxAmount = maxTxAmount;\n    }\n\n    //@dev swapLiq is triggered only when the contract's balance is above this threshold\n    function setThreshholdForLP(uint256 threshold) external onlyOwner {\n      numTokensSellToAddToLiquidity = threshold * 10**_decimals;\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    //  @dev receive BNB from pancakeswapV2Router when swapping\n    receive() external payable {}\n\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\n        _rTotal = _rTotal.sub(rRfi);\n        _tRfiTotal = _tRfiTotal.add(tRfi);\n    }\n\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\n        to_return = _getTValues(tAmount, takeFee);\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi) = _getRValues(to_return, tAmount, takeFee, _getRate());\n\n        return to_return;\n\n    }\n\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\n\n        if(!takeFee) {\n            s.tTransferAmount = tAmount;\n            return s;\n        }\n\n        s.tRfi = tAmount.mul(feeRates.rfi).div(100);\n        s.tLiquidity = tAmount.mul(feeRates.liquidity).div(100);\n        s.tResearch = tAmount.mul(feeRates.research).div(100);\n        s.tDev = tAmount.mul(feeRates.dev).div(100);\n\n        s.tTransferAmount = tAmount.sub(s.tRfi).sub(s.tLiquidity).sub(s.tResearch).sub(s.tDev);\n\n        return s;\n    }\n\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi) {\n\n        rAmount = tAmount.mul(currentRate); //wondering how rfi works ? This is the trick\n\n        if(!takeFee) {\n          return(rAmount, rAmount, 0);\n        }\n\n        rRfi = s.tRfi.mul(currentRate);\n        uint256 rLiquidity = s.tLiquidity.mul(currentRate);\n        uint256 rResearch = s.tResearch.mul(currentRate);\n        uint256 rDev = s.tDev.mul(currentRate);\n\n        rTransferAmount = rAmount.sub(rRfi).sub(rLiquidity).sub(rResearch).sub(rDev);\n\n        return (rAmount, rTransferAmount, rRfi);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if(_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n    }\n\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n\n    function _transfer(address from, address to, uint256 amount , bool takeFee) private {\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(from),\"Insuf balance, check balance at SafeSale.finance if you have token lock\");\n        //Exclude owner and presale wallets from maxTxAmount.\n        if((from != owner() && to != owner()) && ( !isPresaleWallet[from] &&  !isPresaleWallet[to]))  \n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        if(contractTokenBalance >= _maxTxAmount) {\n            contractTokenBalance = _maxTxAmount;\n        }\n\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\n        if (overMinTokenBalance && !inSwapAndLiquify && from != pancakeswapV2Pair && swapAndLiquifyEnabled) {\n            contractTokenBalance = numTokensSellToAddToLiquidity;\n            //add liquidity\n            swapAndLiquify(contractTokenBalance);\n        }\n        bool shouldTakeFeeForTransfer = takeFee &&\n            !(_isExcludedFromFee[from] || _isExcludedFromFee[to]);\n\n        _tokenTransfer(from, to, amount, shouldTakeFeeForTransfer);\n    }\n\n\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\n        if (_rOwned[recipient] == 0) {numOfHODLers++;}\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\n\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {  //from excluded\n                _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) { //to excluded\n                _tOwned[recipient] = _tOwned[recipient].add(s.tTransferAmount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) { //both excluded\n                _tOwned[sender] = _tOwned[sender].sub(tAmount);\n                _tOwned[recipient] = _tOwned[recipient].add(s.tTransferAmount);\n        }\n\n        //common to all transfers and == transfer std :\n        _rOwned[sender] = _rOwned[sender].sub(s.rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(s.rTransferAmount);\n\n        _takeLiquidity(s.tLiquidity);\n        _reflectRfi(s.rRfi, s.tRfi);\n        reflectDevandResearchFee(s.tDev,s.tResearch);\n\n        emit Transfer(sender, recipient, s.tTransferAmount);\n    }\n\n\n    function reflectDevandResearchFee(uint256 tDev, uint256 tResearch) private {\n        uint256 currentRate =  _getRate();\n        uint256 rDevelopent =  tDev.mul(currentRate);\n        uint256 rResearch =  tResearch.mul(currentRate);\n        _tDevelopmentTotal = _tDevelopmentTotal.add(tDev);\n        _rOwned[devWallet] = _rOwned[devWallet].add(rDevelopent);\n        _tResearchTotal = _tResearchTotal.add(tResearch);\n        _rOwned[researchWallet] = _rOwned[researchWallet].add(rResearch);\n    }\n\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        // split the contract balance into halves\n        uint256 half = contractTokenBalance.div(2);\n        uint256 otherHalf = contractTokenBalance.sub(half);\n\n        // capture the contract's current BNB balance.\n        // this is so that we can capture exactly the amount of BNB that the\n        // swap creates, and not make the liquidity event include any BNB that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        if(swapTokensForBNB(half)) { //enough liquidity ? If not, no swapLiq\n          uint256 newBalance = address(this).balance.sub(initialBalance);\n          addLiquidity(otherHalf, newBalance);\n          emit SwapAndLiquify(half, newBalance, otherHalf);\n        }\n    }\n\n    // @dev This is used by the swapAndLiquify function to swap to BNB\n    // allowance optimisation, only when needed - max allowance since spender=uniswap\n    function swapTokensForBNB(uint256 tokenAmount) private returns (bool status){\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = PancakeSwapV2Router.WETH();\n\n        if(allowance(address(this), address(PancakeSwapV2Router)) < tokenAmount) {\n          _approve(address(this), address(PancakeSwapV2Router), ~uint256(0));\n        }\n\n        try PancakeSwapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,0,path,address(this),block.timestamp) {\n          emit SwapAndLiquifyStatus(\"Success\");\n          return true;\n        }\n        catch {\n          emit SwapAndLiquifyStatus(\"Failed\");\n          return false;\n        }\n\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\n        PancakeSwapV2Router.addLiquidityETH{value: bnbAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n        emit LiquidityAdded(tokenAmount, bnbAmount);\n    }\n\n    function totalDevelopmentFee() public view returns (uint256) {\n        return _tDevelopmentTotal;\n    }\n    \n    function totalResearchFee() public view returns (uint256) {\n        return _tResearchTotal;\n    }\n    \n    function adminConfig(address adminAddress , bool isAdmin) external onlyOwner {\n        adminAddresses[adminAddress] = isAdmin;\n    }\n\n    modifier onlyAdmin() {\n        require(adminAddresses[_msgSender()], \"Caller is not an admin.\");\n        _;\n    }\n\n    function _mint(address recipient, uint256 amount) private {\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(_tTotal + amount <= 4 * 10**9 * 10**_decimals, \"Total supply cannot exceed 4B\");\n        \n        uint256 _rTransferAmount = (amount.mul(_rTotal)).div(_tTotal);\n        \n        _tTotal = _tTotal.add(amount);\n        _rTotal = _rTotal.add(_rTransferAmount);\n\n        if (_isExcluded[recipient]) {\n            _tOwned[recipient] = _tOwned[recipient].add(amount);\n        }\n\n        _rOwned[recipient] = _rOwned[recipient].add(_rTransferAmount);\n\n        emit Transfer(address(0), recipient, amount);\n    }\n\n    function _burn(address senderAddress, uint256 amount) private {\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(senderAddress), \"Insufficient balance\");\n        require(_tTotal - amount >= 0, \"Total supply cannot be below 0\");\n\n        uint256 _rTransferAmount = (amount.mul(_rTotal)).div(_tTotal);\n        \n        _tTotal = _tTotal.sub(amount);\n        _rTotal = _rTotal.sub(_rTransferAmount);\n\n        if (_isExcluded[senderAddress]) {\n            _tOwned[senderAddress] = _tOwned[senderAddress].sub(amount);\n        }\n\n        _rOwned[senderAddress] = _rOwned[senderAddress].sub(_rTransferAmount);\n\n        emit Transfer(senderAddress, address(0), amount);\n    }\n\n    function mint(address recipient, uint256 value)\n        external\n        override\n        onlyAdmin\n    {\n        _mint(recipient, value);\n        emit Mint(value, recipient);\n    }\n\n    function burn(address fromAddress, uint256 value) external override onlyAdmin {\n        _burn(fromAddress, value);\n        emit Burn(value, fromAddress);\n    }\n}"
    }
  }
}