{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/3_Ballot.sol": {
      "content": "pragma solidity >=0.4.7 <0.7.0;\r\ncontract Chat {\r\n   \r\n    struct Msg{\r\n        address addr_receiver;\r\n        address addr_sender;\r\n        string content;\r\n        uint status;\r\n    }\r\n    mapping (uint => Msg) Msgs;\r\n    uint msg_index = 0;\r\n\r\n    function sendmsg(address receiver, string memory content) public\r\n    {\r\n        Msgs[msg_index].addr_receiver = receiver;\r\n        Msgs[msg_index].addr_sender = msg.sender;\r\n        Msgs[msg_index].content = content;\r\n        Msgs[msg_index].status = 0; // 0表示未读\r\n        msg_index = msg_index + 1;\r\n    }\r\n    \r\n    \r\n    function recvmsg() public view returns(string memory content, address sender, uint index)\r\n    {\r\n        for(uint i = 0; i < msg_index; i++)\r\n        {\r\n            if(Msgs[i].addr_receiver == msg.sender && Msgs[i].status == 0){\r\n                return(Msgs[i].content, Msgs[i].addr_sender, i);\r\n            }\r\n        }\r\n        return (\"\", msg.sender, 0);\r\n    }\r\n\r\n    function exec_recvmsg(uint index) public{\r\n        if(Msgs[index].addr_receiver == msg.sender && Msgs[index].status == 0)\r\n            Msgs[index].status = 1; // 1表示已读\r\n    }\r\n}"
    }
  }
}