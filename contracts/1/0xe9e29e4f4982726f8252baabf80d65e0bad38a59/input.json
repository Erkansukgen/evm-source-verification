{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"WPUToken.sol":{"content":"pragma solidity ^0.4.26;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract WPUToken is Ownable {\r\n\t\r\n    using SafeMath for uint256;\r\n    \r\n    string public constant name       = \"66wpu.cc\";\r\n    string public constant symbol     = \"WPU\";\r\n    uint32 public constant decimals   = 18;\r\n    uint256 public totalSupply = 1000000 * 10 ** uint256(decimals);\r\n    uint256 public initTotalSupply = 1000000 * 10 ** uint256(decimals);\r\n\r\n  \t\r\n  \tuint256 public burnPercent = 3;\r\n  \t\r\n  \tuint256 public tburnPercent = 3;\r\n  \t\r\n  \t\r\n    mapping(address => bool) touched; \r\n    mapping(address => uint256) balances;\r\n\tmapping(address => mapping (address => uint256)) internal allowed;\r\n\tmapping(address => bool) public frozenAccount;   \r\n\t\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Burn(address indexed burner, uint256 value);   \r\n\t\r\n\tconstructor() public {\r\n          \r\n        balances[msg.sender] = totalSupply; \r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n        \r\n    }\r\n\t\r\n    function totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply;\r\n\t}\t\r\n\t\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(!frozenAccount[msg.sender]); \r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n        uint256 tokensToBurn = 0;\r\n        if(balances[msg.sender] != initTotalSupply) {\r\n           tokensToBurn = _value.mul(burnPercent).div(100);\r\n        }\r\n        uint256 tokensToTransfer = _value.sub(tokensToBurn);\r\n    \r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(tokensToTransfer);\r\n        \r\n        totalSupply = totalSupply.sub(tokensToBurn);\r\n        \r\n        \r\n        emit Transfer(msg.sender, _to, tokensToTransfer);\r\n        \r\n        if(tokensToBurn != 0)\r\n            emit Transfer(msg.sender, address(0), tokensToBurn);\r\n            \r\n        return true;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\t\r\n\t\trequire(!frozenAccount[_from]); \r\n\t\t\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\t\r\n\t\tuint256 tokensToBurn = 0;\r\n        if(balances[_from] != initTotalSupply) {\r\n           tokensToBurn = _value.mul(tburnPercent).div(100);\r\n        }\r\n\r\n        uint256 tokensToTransfer = _value.sub(tokensToBurn);\r\n\r\n        balances[_to] = balances[_to].add(tokensToTransfer);\r\n        totalSupply = totalSupply.sub(tokensToBurn);\r\n    \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    \r\n        emit Transfer(_from, _to, tokensToTransfer);\r\n        \r\n        if(tokensToBurn != 0)\r\n            emit Transfer(_from, address(0), tokensToBurn);\r\n    \r\n        return true;\r\n\t}\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction getBalance(address _a) internal view returns(uint256) {\r\n        return balances[_a];\r\n        \r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return getBalance( _owner );\r\n    }\r\n\t\r\n\t\r\n \r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\t\r\n\t\r\n\r\n    function() payable public {\r\n        revert();\r\n    }\r\n\t\r\n    \r\n \r\n\t\r\n}"}}}