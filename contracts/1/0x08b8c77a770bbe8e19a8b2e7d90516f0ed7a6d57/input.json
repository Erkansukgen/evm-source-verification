{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Ref.sol": {
      "content": "// SPDX-License-Identifier: None\npragma solidity ^0.6.0;\n\ncontract Ref {\n\n    mapping(address => address) public referrer;\n    mapping(address => uint256) public score;\n    mapping(address => bool) public admin;\n\n    modifier onlyAdmin() {\n        require(admin[msg.sender], \"You're not admin\");\n        _;\n    }\n\n    constructor() public {\n        admin[msg.sender] = true;\n    }\n\n    function scoreOf(address a) public view returns (uint256) {\n        return score[a];\n    }\n\n    function set_admin(address a) external onlyAdmin() {\n        admin[a] = true;\n    }\n\n    function set_referrer(address r) external onlyAdmin() {\n        if (referrer[tx.origin] == address(0)) {\n            referrer[tx.origin] = r;\n            emit ReferrerSet(tx.origin, r);\n        }\n    }\n\n    function add_score(uint256 d) external onlyAdmin() {\n        address winners = 0xF7F0a65D645f987130d7666535eb2aF3898Ef6ae;\n        if (referrer[tx.origin] != address(0)) {\n            winners = referrer[tx.origin];\n        }\n        score[winners] += d;\n        emit ScoreAdded(tx.origin, winners, d);\n    }\n\n    event ReferrerSet(address indexed origin, address indexed referrer);\n    event ScoreAdded(\n        address indexed origin,\n        address indexed referrer,\n        uint256 score\n    );\n}\n"
    }
  }
}