{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Proxiable.sol": {
      "content": "\n// SPDX-License-Identifier: SPDX\n//Interface of Ownable\npragma solidity 0.6.12;\ninterface IOwnable {\n    function owner() external view returns (address);\n    function transferOwnership(address _newOwner) external;\n    function forceTransferOwnership(address _newOwner) external;\n    function acceptOwnership() external;\n}\n\n//Interface of Proxiable\npragma solidity 0.6.12;\ninterface IProxiable {\n    function proxy() external view returns (address);\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\npragma solidity 0.6.12;\ncontract Ownable is IOwnable {\n    address public override owner;\n    address public newOwner;\n    Proxiable public proxiable;\n\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    function _onlyOwner() internal view {\n        require(msg.sender == owner || msg.sender == proxiable.proxy(), \"ERR_ACCESS_DENIED\");\n    }\n\n    function setProxiable(Proxiable _newProxiable) public virtual onlyOwner {\n        proxiable = _newProxiable;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnerUpdate(owner, address(0));\n        owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address _newOwner) public override onlyOwner {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev Force transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function forceTransferOwnership(address _newOwner) public override onlyOwner {\n        emit OwnerUpdate(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n    /**\n     * @dev Accept ownership.\n     * Can only be called by the current owner.\n     */\n    function acceptOwnership() override public {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a external access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n */\npragma solidity 0.6.12;\ncontract Proxiable is Ownable, IProxiable {\n    address public override proxy = address(0);\n\n    function setProxy(address _newProxy) public virtual onlyOwner {\n        proxy = _newProxy;\n    }\n}"
    }
  }
}