{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LiquidQueue/MintingModule.sol": {
      "content": "// File: contracts/openzeppelin/Ownable.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\n\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/openzeppelin/IERC20.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function decimals() external returns (uint8);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/openzeppelin/SafeMath.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}\n\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\ninterface IUniswapV2Router01 {\n    function factory() external view returns (address);\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/openzeppelin/ERC20.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n\ncontract ERC20 is IERC20 {\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) spendingAllowance;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _feeDestination,\n        bool _burnOnTransfer\n    ) {\n        name = _name;\n        symbol = _symbol;\n        feeDestination = _feeDestination;\n        burnOnTransfer = _burnOnTransfer;\n    }\n\n    bool burnOnTransfer;\n    address feeDestination;\n    string public name;\n    string public symbol;\n\n    uint256 public override totalSupply;\n\n    function balanceOf(address account) external override view returns (uint256) {\n        return balances[account];\n    }\n\n    uint8 public override constant decimals = 8;\n\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        return spendingAllowance[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        spendingAllowance[msg.sender][spender] = amount;\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        require(\n            spendingAllowance[sender][recipient] >= amount,\n            \"ERC20: allowance exceeded\"\n        );\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        uint256 fee = feeDestination == address(0) ? 0 : amount / 100;\n        if (burnOnTransfer) {\n            fee *= 2;\n            totalSupply -= fee;\n        }\n        uint256 netAmount = amount - fee;\n        balances[from] -= amount;\n        balances[to] += netAmount;\n        balances[feeDestination] += fee;\n    }\n    \n    function _mint(address holder, uint256 value) internal {\n        balances[holder] += value;\n        totalSupply += value;\n    }\n\n    function _burn(address holder, uint256 value) internal {\n        balances[holder] -= value;\n        require(totalSupply >= value, \"ERC20:burn underflow\");\n        totalSupply -= value;\n    }\n}\n\n// File: contracts/uniswapv2/interfaces/IWETH.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n\n// File: contracts/uniswapv2/WETH.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n\n\ncontract WETH is ERC20, IWETH {\n    constructor() ERC20(\"WETH\", \"WETH\", address(0), false) {}\n\n    function deposit() external payable override {\n        _mint(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 value) external override {\n        _burn(msg.sender, value);\n        address payable sender = msg.sender;\n        (bool success, ) = sender.call{value: value}(\"\");\n        require(success, \"Unwrapping failed.\");\n    }\n}\n\n// File: contracts/uniswapv2/libraries/SafeMath.sol\n\n// : MIT\npragma solidity ^0.7.6;\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMathUniswap {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\n// File: contracts/uniswapv2/libraries/UniswapV2Library.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n\n\n\nlibrary UniswapV2Library {\n    using SafeMathUniswap for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n// File: contracts/facades/RewardLike.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\nabstract contract RewardLike {\n    function requestReward(address token, uint256 value) public virtual;\n\n    function requestSlowQueueReward(address token, uint256 value)\n        public\n        virtual\n        returns (bool);\n}\n\n// File: contracts/facades/SluiceGateLike.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\nabstract contract SluiceGateLike {\n    function whitelist(address a) public virtual returns (bool);\n    function betaApply(address lp) public virtual;    \n    function unstake(address lp) public virtual;\n}\n\n// File: contracts/phase1/MintingModule.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n\n\n\n\n\n\n\n\n\n\nabstract contract LiquidQueueLike {\n    function join(address LP, address recipient) public virtual;\n}\n\ncontract MintingModule is Ownable {\n    using SafeMath for uint256;\n\n    struct UniswapValues {\n        address token0;\n        address token1;\n        uint256 reserveA;\n        uint256 reserveB;\n        IUniswapV2Pair pair;\n    }\n\n    IUniswapV2Factory uniswapFactory;\n    IUniswapV2Router02 uniswapRouter;\n\n    RewardLike rewardContract;\n    SluiceGateLike public sluiceGate;\n    address liquidQueue;\n    bool locked;\n    uint8 public tiltPercentage;\n    mapping(address => address) public inputTokenTilting; // eg inputTokenTilting[address(EYE)] == address(SCX)\n    mapping(address => address) public inputOutputToken; // eg inputOutputToken(address(dai)) == address (EYE)\n\n    modifier lock {\n        require(!locked, \"LIQUID QUEUE: reentrancy guard\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    modifier gateKeep {\n        require(\n            address(sluiceGate) == address(0) ||\n                sluiceGate.whitelist(msg.sender),\n            \"LIQUID QUEUE: forbidden, closed beta\"\n        );\n        _;\n    }\n\n    function seed(\n        address factory,\n        address router,\n        address reward,\n        uint8 _tiltPercentage\n    ) public onlyOwner {\n        uniswapFactory = IUniswapV2Factory(factory);\n        rewardContract = RewardLike(reward);\n        uniswapRouter = IUniswapV2Router02(router);\n        require(\n            tiltPercentage < 100,\n            \"LIQUID QUEUE: tilt percentage between 1 and 100\"\n        );\n        tiltPercentage = _tiltPercentage;\n    }\n\n    constructor(\n        address dai,\n        address scx,\n        address eye,\n        address router,\n        address factory,\n        address queue\n    ) {\n        uniswapRouter = IUniswapV2Router02(router);\n        uniswapFactory = IUniswapV2Factory(factory);\n        address weth = uniswapRouter.WETH();\n        mapTokens(dai, eye, eye);\n        mapTokens(weth, scx, scx);\n        mapTokens(scx, eye, scx);\n        mapTokens(eye, scx, scx);\n        liquidQueue = queue;\n        tiltPercentage = 30;\n    }\n\n    function mapTokens(\n        address input,\n        address output,\n        address tilting\n    ) public onlyOwner {\n        inputTokenTilting[input] = tilting;\n        inputOutputToken[input] = output;\n        if (uniswapFactory.getPair(input, output) == address(0)) {\n            uniswapFactory.createPair(input, output);\n        }\n    }\n\n    function setSluiceGate(address s) public onlyOwner {\n        sluiceGate = SluiceGateLike(s);\n    }\n\n    //Entry point for an external user into the Liquid Queue\n    function purchaseLP(address inputToken, uint256 amount)\n        public\n        payable\n        lock\n        gateKeep\n    {\n        if (msg.value > 0) {\n            address wethAddress = uniswapRouter.WETH();\n            require(\n                inputToken == wethAddress,\n                \"LIQUID QUEUE: positive eth value requires WETH address\"\n            );\n            require(\n                msg.value == amount,\n                \"LIQUID QUEUE: eth value must match input amount\"\n            );\n            WETH weth = WETH(wethAddress);\n            weth.deposit{value: msg.value}();\n        } else {\n            IERC20(inputToken).transferFrom(msg.sender, address(this), amount);\n        }\n        purchaseLPFor(inputToken, amount, msg.sender);\n    }\n\n    function purchaseLPFor(\n        address inputToken,\n        uint256 amount,\n        address recipient\n    ) internal {\n        address outputToken = inputOutputToken[inputToken];\n        require(\n            outputToken != address(0),\n            \"LIQUID QUEUE: input token not supported\"\n        );\n        amount= IERC20(inputToken).balanceOf(address(this));\n        //The next section fetches a quote from uniswap so we know what the ratios should be in the absence of tilting.\n        UniswapValues memory VARS;\n\n        VARS.pair = IUniswapV2Pair(\n            uniswapFactory.getPair(inputToken, outputToken)\n        );\n        (VARS.token0, VARS.token1) = inputToken < outputToken\n            ? (inputToken, outputToken)\n            : (outputToken, inputToken);\n        (uint256 reserve1, uint256 reserve2, ) = VARS.pair.getReserves();\n        VARS.reserveA = inputToken == VARS.token0 ? reserve1 : reserve2;\n        VARS.reserveB = inputToken == VARS.token0 ? reserve2 : reserve1;\n\n        uint256 expectedOutputToken =\n            uniswapRouter.quote(amount, VARS.reserveA, VARS.reserveB);\n\n        address tiltedToken = inputTokenTilting[inputToken];\n        require(\n            tiltedToken == outputToken || tiltedToken == inputToken,\n            \"LIQUID QUEUE: invalid tilted token.\"\n        );\n\n        uint256 tiltAdjustment =\n            tiltedToken == inputToken\n                ? 100 + tiltPercentage\n                : 100 - tiltPercentage;\n\n        uint256 outputAmount = expectedOutputToken.mul(tiltAdjustment).div(100);\n        rewardContract.requestReward(outputToken, outputAmount);\n        outputAmount = IERC20(outputToken).balanceOf(address(this));\n        IERC20(inputToken).transfer(address(VARS.pair), amount);\n        IERC20(outputToken).transfer(address(VARS.pair), outputAmount);\n\n        VARS.pair.mint(address(this));\n        VARS.pair.approve(liquidQueue, uint256(-1));\n\n        LiquidQueueLike(liquidQueue).join(address(VARS.pair), recipient);\n    }\n}\n"
    }
  }
}