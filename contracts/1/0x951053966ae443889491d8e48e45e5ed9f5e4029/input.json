{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/token-factory/TokenFactoryImplV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// File: contracts/token-factory/TokenFactoryImplV1.sol\n\npragma solidity >=0.5.16 <0.7.0;\n\ncontract TokenFactoryImplV1 {\n\n    // begin v0 ============================================ \n    // Refundable and Pausable state vars\n    address private _owner;\n    address private _pendingOwner;\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n    Role private _pausers;\n    bool private _paused;\n\n    // all children token addresses\n    address[] private tokens;\n\n    // TokenInfo 数据不再记录(节约 gas), 同时以前记录的数据也将被删除(类似 gas token, 此处称为 tiGas)\n    mapping(address => TokenInfo) private tokenInfos;\n\n    // minimal fee to create child\n    uint256 private minFee;\n    address private v0_tokenImpl;\n    address private v0_tokenProxyAdmin;\n\n    struct TokenInfo {\n        string name;\n        string symbol;\n    }\n\n    bool private v0_initialized;\n    // end v0 ============================================ \n\n    // begin v1 ============================================ \n    // 用于标记以前的 TokenInfo 数据回收情况\n    uint32 public v1TiGasUsed;\n    address public v1ImplV0Addr;\n    // end v1 ============================================ \n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"msg.sender should be real owner\");\n        _;\n    }\n\n    fallback () external payable {\n        _delegate(v1ImplV0Addr);\n    }\n    \n    receive () external payable {\n        _delegate(v1ImplV0Addr);\n    }\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * This is a low level function that doesn't return to its internal call site.\n     * It will return to the external caller whatever the implementation returns.\n     * @param implementation Address to delegate.\n     */\n    function _delegate(address implementation) internal {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(\n                gas(),\n                implementation,\n                0,\n                calldatasize(),\n                0,\n                0\n            )\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n                // delegatecall returns 0 on error.\n                case 0 {\n                    revert(0, returndatasize())\n                }\n                default {\n                    return(0, returndatasize())\n                }\n        }\n    }\n\n    // 专门用于收款\n    // keccak256('pay()') = 0x1b9265b8bc0c55eb496464034309ebd021bdafbb42ab85f2f0b2b006176744ee\n    function pay() public payable {\n    }\n\n    // 设置 v2 的数据\n    function ownerSetV2Data(uint256 tiCount, uint32 used, address implV0) public onlyOwner {\n        v1TiGasUsed = used;\n        v1ImplV0Addr = implV0;\n        useTiGas(tiCount);\n    }\n\n    // 基本上每个 TokenInfo 回收 2 个 uint256 共 30000 gas.\n    // 注意每增加使用也都需要额外消耗 gas, 消耗 1 个增加 21275 gas, 之后每增加一个要额外消耗 13000 gas 左右.\n    // 整个交易靠回收抵扣的 gas 总数不超过总消耗 gas 的一半, 需要根据具体场景来决定使用多少.\n    function useTiGas(uint256 tiCount) public {\n        require(msg.sender == _owner || tx.origin == _owner, \"only owner can call me.\");\n        if (tiCount > 0) {\n            uint256 pos = v1TiGasUsed;\n            uint256 target = pos + tiCount;\n            require(target <= tokens.length, \"not enough TokenInfo to clean.\");\n            while (pos < target)  {\n                delete tokenInfos[tokens[pos]];\n                pos++;\n            }\n            v1TiGasUsed = uint32(target);\n        }\n    }\n\n    //============================================\n    // TokenChild 功能费 (放到 v1 实现)\n    // function calcBaseFee(address /*token*/) public view returns (uint256) {\n    //     return minFee * 1;\n    // }\n\n    // function calcTokenMintFee(address /*token*/) public view returns (uint256) {\n    //     return minFee * 3;\n    // }\n\n    // function calcTokenPauseFee(address /*token*/) public view returns (uint256) {\n    //     return minFee * 2;\n    // }\n\n    // function calcTokenOwnerFee(address /*token*/) public view returns (uint256) {\n    //     return minFee * 2;\n    // }\n\n    // function calcTokenRefundFee(address /*token*/) public view returns (uint256) {\n    //     return minFee * 4;\n    // }\n    //============================================\n\n    // 通过这种方式部署合约的基础 gas 消耗好像会变大不少.\n    // function ownerDeployWithTiGas(uint256 tiCount, bytes memory codeWithArgs) public onlyOwner {\n    //     useTiGas(tiCount);\n    //     assembly {\n    //         let codeLen := mload(codeWithArgs)\n    //         let result := create(callvalue(), add(codeWithArgs, 0x20), codeLen)\n    //         // Copy the returned data.\n    //         returndatacopy(0, 0, returndatasize())\n    //         switch result\n    //             // delegatecall returns 0 on error.\n    //             case 0 {\n    //                 revert(0, returndatasize())\n    //             }\n    //             default {\n    //                 return(0, returndatasize())\n    //             }\n    //     }\n    // }\n\n    // 因为 msg.sender 成合约本身了, 通过这个函数来调用合约的需求就变少了\n    // function ownerCallWithTiGas(uint256 tiCount, address to, bytes memory data) public onlyOwner {\n    //     useTiGas(tiCount);\n    //     assembly {\n    //         let dLen := mload(data)\n    //         // Call the implementation.\n    //         // out and outsize are 0 because we don't know the size yet.\n    //         let result := call(\n    //             gas(),\n    //             to,\n    //             callvalue(),\n    //             add(data, 0x20),\n    //             dLen,\n    //             0,\n    //             0\n    //         )\n\n    //         // Copy the returned data.\n    //         returndatacopy(0, 0, returndatasize())\n\n    //         switch result\n    //             // delegatecall returns 0 on error.\n    //             case 0 {\n    //                 revert(0, returndatasize())\n    //             }\n    //             default {\n    //                 return(0, returndatasize())\n    //             }\n    //     }\n    // }\n}\n"
    }
  }
}