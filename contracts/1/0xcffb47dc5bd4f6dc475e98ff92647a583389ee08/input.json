{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Wrapper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\n\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File contracts/insured-bridge/ovm/Optimism_Wrapper.sol\n\n\n/**\n * @title Optimism Eth Wrapper\n * @dev Any ETH sent to this contract is wrapped into WETH and sent to the set bridge pool. This enables ETH to be sent\n * over the canonical Optimism bridge, which does not support WETH bridging.\n */\ninterface WETH9Like {\n    function deposit() external payable;\n\n    function transfer(address guy, uint256 wad) external;\n\n    function balanceOf(address guy) external view returns (uint256);\n}\n\ncontract Optimism_Wrapper is Ownable {\n    WETH9Like public weth;\n    address public bridgePool;\n\n    event ChangedBridgePool(address indexed bridgePool);\n\n    /**\n     * @notice Construct Optimism Wrapper contract.\n     * @param _weth l1WethContract address. Normally deployed at 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.\n     * @param _bridgePool address of the bridge pool to send Wrapped ETH to when ETH is sent to this contract.\n     */\n    constructor(WETH9Like _weth, address _bridgePool) {\n        weth = _weth;\n        bridgePool = _bridgePool;\n        emit ChangedBridgePool(bridgePool);\n    }\n\n    /**\n     * @notice Called by owner of the wrapper to change the destination of the wrapped ETH (bridgePool).\n     * @param newBridgePool address of the bridge pool to send Wrapped ETH to when ETH is sent to this contract.\n     */\n    function changeBridgePool(address newBridgePool) public onlyOwner {\n        bridgePool = newBridgePool;\n        emit ChangedBridgePool(bridgePool);\n    }\n\n    /**\n     * @notice Publicly callable function that takes all ETH in this contract, wraps it to WETH and sends it to the\n     * bridge pool contract. Function is called by fallback functions to automatically wrap ETH to WETH and send at the\n     * conclusion of a canonical ETH bridging action.\n     */\n    function wrapAndTransfer() public payable {\n        weth.deposit{ value: address(this).balance }();\n        weth.transfer(bridgePool, weth.balanceOf(address(this)));\n    }\n\n    // Fallback functions included to make this contract accept ETH.\n    receive() external payable {\n        wrapAndTransfer();\n    }\n\n    fallback() external payable {\n        wrapAndTransfer();\n    }\n}"}}}