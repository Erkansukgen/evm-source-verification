{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"testsnipe.sol":{"content":"pragma solidity >=0.6.0;\npragma experimental ABIEncoderV2;\n\n\n// Declare the LBP Swap function prototype \ninterface ITest {\n   function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    // Structure of Swap \n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        address assetIn;\n        address assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    // Struct for Fund Management\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n \n}\n\n// Main contract\ncontract Interaction {\n    \n    // Address of the sale contract \n    address Addr;\n    uint256 limit; \n    uint256 deadline;\n    bool public result; \n    uint256 amount;\n    bytes userdata;\n    bytes32 pool;\n    address _address; \n    address payable recipient;\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    //address public constant OTHER_CONTRACT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\n    address public constant OTHER_CONTRACT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\n    ITest BalContract = ITest(OTHER_CONTRACT);\n\n    constructor (address _addr, bytes32 _pool) {\n        _address = _addr;\n        pool = _pool;\n        amount =  15000000; \n        limit = 15000000 / 0.8;  \n        deadline = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n        userdata = \"0x\";\n        //recipient = payable(0x1dF709474d1Fbe1005cE2a11570A53813618e650);\n        recipient = payable(0x58E6aa8773E0fc143a5fF9e9b953d30cDeb545b0);\n    }\n\n    // Structure of Swap \n    struct Swp {\n        bytes32 poolId;\n        uint256 kind;\n        address assetIn;\n        address assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    // Struct for Fund Management\n    struct funds {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    Swp swap = Swp(pool, 0, 0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1, _address, amount, userdata);\n    funds fnd = funds(msg.sender, false, recipient, false); \n    \n    \t\n    \n    function fire() external returns (uint) {\n        bytes memory data = abi.encodeWithSignature(\"swap((bytes32,enum,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\", swap,fnd,limit,deadline); \n        address(BalContract).call(data);\n    }\n\n}\n"}}}