{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ChillFinance/chill/AirDrop.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"../interfaces/IChillFinance.sol\";\r\nimport \"../interfaces/IERC20.sol\";\r\nimport \"../helper/SafeMath.sol\";\r\n\r\ncontract AirDrop {\r\n    using SafeMath for uint256;\r\n    IERC20 public chillToken;\r\n    IChillFinance public iChillFiinance;\r\n    address public owner;\r\n    address public implementation;\r\n    uint256 public nirwanaReward;\r\n    uint256 public timeSchedule;\r\n    uint256 public claimSchedule;\r\n    uint256 public timeStamp;\r\n    uint256 public claimTimeStamp;\r\n    uint256 public rewardAmount;\r\n    uint256 public scheduleCount = 0;\r\n    uint256 public NIRVANA_MULTIPLIER = 50;\r\n    string public NIRVANA_POOL_NAME;\r\n    mapping (uint256 => mapping(address => bool)) public isNewRewardGiven;\r\n\r\n    modifier isOwner {\r\n        require(owner == msg.sender, \"Error: Address is not owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor(address _owner) public {\r\n        NIRVANA_POOL_NAME = \"DAI-ETH\";\r\n        iChillFiinance = IChillFinance(0x4ad97fd79F8a2aE0e5415821BC06781bF5a164e1);\r\n        chillToken = IERC20(0xD6689f303fA491f1fBba919C1AFa619Bd8E595e3);\r\n        owner = _owner;\r\n        nirwanaReward = 50; // Nirvana Reward Percentage\r\n        timeSchedule = 28800; // 8 hours\r\n        claimSchedule = 27000; // 15 hours 30 mins\r\n        uint256 currentTimeStamp = block.timestamp;\r\n        timeStamp = currentTimeStamp;\r\n        claimTimeStamp = currentTimeStamp.add(timeSchedule).add(claimSchedule);\r\n    }\r\n    \r\n    // Contract Implementation Methods (Logic Contracts)\r\n    function addImplementation(address _implementation) public isOwner {\r\n        implementation = _implementation;\r\n    }\r\n    \r\n    // Upgradable Delegated Call Methods \r\n    function startPool(uint256 _timeSchedule, uint256 _claimSchedule, uint256 _nirvanaReward) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"startPool(uint256,uint256,uint256)\", _timeSchedule, _claimSchedule, _nirvanaReward));   \r\n        require(success, \"startPool(uint256 _timeSchedule, uint256 _claimSchedule, uint256 _nirvanaReward) delegatecall failed.\");\r\n    }\r\n    \r\n    function claimNirvanaReward(uint256 _pid) public returns(bool) {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"claimNirvanaReward(uint256)\", _pid));\r\n        require(success, \"claimNirvanaReward(uint256 _pid) delegatecall failed.\");\r\n        return success;\r\n    }\r\n    \r\n    function setNirvanaReward(uint256 _rewards) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"setNirvanaReward(uint256)\", _rewards));\r\n        require(success, \"setNirvanaReward(uint256 _rewards) delegatecall failed.\");\r\n    }\r\n    \r\n    function setTimeSchedule(uint256 _timeSchedule) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"setTimeSchedule(uint256)\", _timeSchedule));\r\n        require(success, \"setTimeSchedule(uint256 _timeSchedule) delegatecall failed.\");\r\n    }\r\n    \r\n    function setClaimTimeSchedule(uint256 _claimSchedule) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"setClaimTimeSchedule(uint256)\", _claimSchedule));\r\n        require(success, \"setClaimTimeSchedule(uint256 _claimSchedule) delegatecall failed.\");\r\n    }\r\n    \r\n    function setNirVanaMultiplier(uint256 _nirvanaMultiplier) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"setNirVanaMultiplier(uint256)\", _nirvanaMultiplier));\r\n        require(success, \"setNirVanaMultiplier(uint256 _nirvanaMultiplier) delegatecall failed.\");\r\n    }\r\n    \r\n    function setChillFinance(address _chillFinance) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"setChillFinance(address)\", _chillFinance));\r\n        require(success, \"setChillFinance(address _chillFinance) delegatecall failed.\");\r\n    }\r\n\r\n    function setChillToken(address _chillToken) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"setChillToken(address)\", _chillToken));\r\n        require(success, \"setChillToken(address _chillToken) delegatecall failed.\");\r\n    }\r\n\r\n    function transferOwnership(address _owner) public isOwner {\r\n        (bool success,) = implementation.delegatecall(abi.encodeWithSignature(\"transferOwnership(address)\", _owner));\r\n        require(success, \"transferOwnership(address _owner) delegatecall failed.\");\r\n    }\r\n    \r\n    // Upgradable Static Call Methods \r\n    function getNirvana(uint256 _pid) public view returns(uint256) {\r\n        (bool success, bytes memory result) = implementation.staticcall(abi.encodeWithSignature(\"getNirvana(uint256)\", _pid));\r\n        require(success, \"getNirvana(uint256 _pid) staticcall failed.\");\r\n        return abi.decode(result, (uint256));\r\n    }\r\n    \r\n    function getAllUsers(uint256 _pid) public view returns(address[] memory, uint256) {\r\n        (bool success, bytes memory result) = implementation.staticcall(abi.encodeWithSignature(\"getAllUsers(uint256)\", _pid));\r\n        require(success, \"getAllUsers(uint256 _pid) staticcall failed.\");\r\n        return abi.decode(result, (address[], uint256));\r\n    }\r\n    \r\n    function getUsersInfo(uint256 _pid, address _user) public view returns (uint256, uint256, uint256) {\r\n        (bool success, bytes memory result) = implementation.staticcall(abi.encodeWithSignature(\"getUsersInfo(uint256,address)\", _pid, _user));\r\n        require(success, \"getUsersInfo(uint256 _pid, address _user) staticcall failed.\");\r\n        return abi.decode(result, (uint256, uint256, uint256));\r\n    }\r\n    \r\n    function getPoolInfo(uint256 _pid) public view returns (IERC20, uint256, uint256, uint256, uint256, address, uint256) {\r\n        (bool success, bytes memory result) = implementation.staticcall(abi.encodeWithSignature(\"getPoolInfo(uint256)\", _pid));\r\n        require(success, \"getPoolInfo(uint256 _pid) staticcall failed.\");\r\n        return abi.decode(result, (IERC20, uint256, uint256, uint256, uint256, address, uint256));\r\n    }\r\n    \r\n    function getCurrentTimeStamp() public view returns(uint256) {\r\n        (bool success, bytes memory result) = implementation.staticcall(abi.encodeWithSignature(\"getCurrentTimeStamp()\"));\r\n        require(success, \"getCurrentTimeStamp() staticcall failed.\");\r\n        return abi.decode(result, (uint256));\r\n    }\r\n}\r\n"},"browser/ChillFinance/helper/SafeMath.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"browser/ChillFinance/interfaces/IChillFinance.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IChillFinance {\r\n    function poolUsers(uint256 _pid, uint256 _index) external view returns(address);\r\n    function getPoolUsers(uint256 _pid) external view returns(address[] memory);\r\n    function getPoolUsersLength(uint256 _pid) external view returns(uint256);\r\n    function userPoollength(uint256 _pid) external view returns (uint256);\r\n    function userInfo(uint256 _pid, address _user) external view returns(uint256, uint256, uint256);\r\n    function poolInfo(uint256 _pid) external view returns(IERC20, uint256, uint256, uint256, uint256, address, uint256);\r\n    function getNirvanaStatus(uint256 _from) external view returns (uint256);\r\n}"},"browser/ChillFinance/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"}}}