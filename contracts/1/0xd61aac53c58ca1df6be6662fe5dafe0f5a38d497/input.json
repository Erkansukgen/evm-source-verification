{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "Exchange.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// kovan 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\ninterface UniswapV2Router {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface UniswapV3Router {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams memory params)\r\n        external\r\n        returns (uint256 amountOut);\r\n}\r\n\r\ninterface UniswapV3Quoter {\r\n    struct QuoteExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amountIn;\r\n        uint24 fee;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\r\n        external\r\n        returns (\r\n            uint256 amountOut,\r\n            uint160 sqrtPriceX96After,\r\n            uint32 initializedTicksCrossed,\r\n            uint256 gasEstimate\r\n        );\r\n\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut);\r\n}\r\n\r\ncontract Exchange is Ownable {\r\n    UniswapV2Router routerV2 =\r\n        UniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    UniswapV3Router routerV3 =\r\n        UniswapV3Router(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n    UniswapV3Quoter quoterV3 =\r\n        UniswapV3Quoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\r\n\r\n    // [\"0x3f5E6359180780972658fB379C56A2DF7e656Caa\", \"0xB1D8E0e6eA34d7812820Ea79d1350F5420269225\"]\r\n    \r\n    constructor() Ownable() {\r\n        \r\n    }\r\n\r\n    function queryV2(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn\r\n    ) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n        uint256[] memory amounts = routerV2.getAmountsOut(amountIn, path);\r\n        require(amounts.length == 2, \"Exchange::query::UAO\");\r\n        return amounts[1];\r\n    }\r\n\r\n    function queryV3(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint24 fee\r\n    ) public payable returns (uint256) {\r\n        return\r\n            quoterV3.quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0);\r\n    }\r\n\r\n    function query(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountIn,\r\n        uint24 fee\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            address\r\n        )\r\n    {\r\n        uint256 rate;\r\n        rate = _query2to3(tokenA, tokenB, amountIn, fee);\r\n        if (rate > 1000) {\r\n            return (rate, 2, tokenA, tokenB);\r\n        }\r\n        rate = _query3to2(tokenA, tokenB, amountIn, fee);\r\n        if (rate > 1000) {\r\n            return (rate, 3, tokenA, tokenB);\r\n        }\r\n        return (0, 0, address(0), address(0));\r\n    }\r\n\r\n    function exchange(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 direction,\r\n        uint24 fee\r\n    ) public {\r\n        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\r\n        if (direction == 2) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = tokenIn;\r\n            path[1] = tokenOut;\r\n            IERC20(tokenIn).approve(address(routerV2), amountIn + 1);\r\n            uint256 amountOut1 = routerV2.swapExactTokensForTokens(\r\n                amountIn,\r\n                0,\r\n                path,\r\n                address(this),\r\n                type(uint256).max\r\n            )[1];\r\n            IERC20(tokenOut).approve(address(routerV3), amountOut1 + 1);\r\n            UniswapV3Router.ExactInputSingleParams\r\n                memory params = UniswapV3Router.ExactInputSingleParams({\r\n                    tokenIn: tokenIn,\r\n                    tokenOut: tokenOut,\r\n                    fee: fee,\r\n                    recipient: msg.sender,\r\n                    deadline: type(uint256).max,\r\n                    amountIn: amountOut1,\r\n                    amountOutMinimum: amountIn,\r\n                    sqrtPriceLimitX96: 0\r\n                });\r\n            uint256 amountOut2 = routerV3.exactInputSingle(params);\r\n            require(amountOut2 > amountIn, \"unexpected swap\");\r\n        } else if (direction == 3) {\r\n            IERC20(tokenIn).approve(address(routerV3), amountIn + 1);\r\n            UniswapV3Router.ExactInputSingleParams\r\n                memory params = UniswapV3Router.ExactInputSingleParams({\r\n                    tokenIn: tokenIn,\r\n                    tokenOut: tokenOut,\r\n                    fee: fee,\r\n                    recipient: address(this),\r\n                    deadline: type(uint256).max,\r\n                    amountIn: amountIn,\r\n                    amountOutMinimum: 1,\r\n                    sqrtPriceLimitX96: 0\r\n                });\r\n            uint256 amountOut1 = routerV3.exactInputSingle(params);\r\n            IERC20(tokenOut).approve(address(routerV2), amountOut1 + 1);\r\n            address[] memory path = new address[](2);\r\n            path[0] = tokenOut;\r\n            path[1] = tokenIn;\r\n            uint256 amountOut2 = routerV2.swapExactTokensForTokens(\r\n                amountOut1,\r\n                amountIn,\r\n                path,\r\n                msg.sender,\r\n                type(uint256).max\r\n            )[1];\r\n            require(amountOut2 > amountIn, \"unexpected swap\");\r\n        } else {\r\n            revert(\"dir\");\r\n        }\r\n    }\r\n\r\n    function _query2to3(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint24 fee\r\n    ) internal returns (uint256) {\r\n        uint256 out1 = queryV2(tokenIn, tokenOut, amountIn);\r\n        uint256 out2 = queryV3(tokenOut, tokenIn, out1, fee);\r\n        return (out2 * 1000) / amountIn;\r\n    }\r\n\r\n    function _query3to2(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint24 fee\r\n    ) internal returns (uint256) {\r\n        uint256 out1 = queryV3(tokenIn, tokenOut, amountIn, fee);\r\n        uint256 out2 = queryV2(tokenOut, tokenIn, out1);\r\n        return (out2 * 1000) / amountIn;\r\n    }\r\n}\r\n"
    }
  }
}