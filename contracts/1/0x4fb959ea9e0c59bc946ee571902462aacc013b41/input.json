{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MBC.sol":{"content":"/**\nMulti Bridge Capital (MBC)\n\nTelegram for announcements: https://t.me/multibridgecapital\nIf you guys wish to chat with eachother, make a public group chat for investors, I want to keep the announcement telegram clean.\n\n\nMMMMMMMM               MMMMMMMM     BBBBBBBBBBBBBBBBB                CCCCCCCCCCCCC\nM:::::::M             M:::::::M     B::::::::::::::::B            CCC::::::::::::C\nM::::::::M           M::::::::M     B::::::BBBBBB:::::B         CC:::::::::::::::C\nM:::::::::M         M:::::::::M     BB:::::B     B:::::B       C:::::CCCCCCCC::::C\nM::::::::::M       M::::::::::M       B::::B     B:::::B      C:::::C       CCCCCC\nM:::::::::::M     M:::::::::::M       B::::B     B:::::B     C:::::C              \nM:::::::M::::M   M::::M:::::::M       B::::BBBBBB:::::B      C:::::C              \nM::::::M M::::M M::::M M::::::M       B:::::::::::::BB       C:::::C              \nM::::::M  M::::M::::M  M::::::M       B::::BBBBBB:::::B      C:::::C              \nM::::::M   M:::::::M   M::::::M       B::::B     B:::::B     C:::::C              \nM::::::M    M:::::M    M::::::M       B::::B     B:::::B     C:::::C              \nM::::::M     MMMMM     M::::::M       B::::B     B:::::B      C:::::C       CCCCCC\nM::::::M               M::::::M     BB:::::BBBBBB::::::B       C:::::CCCCCCCC::::C\nM::::::M               M::::::M     B:::::::::::::::::B         CC:::::::::::::::C\nM::::::M               M::::::M     B::::::::::::::::B            CCC::::::::::::C\nMMMMMMMM               MMMMMMMM     BBBBBBBBBBBBBBBBB                CCCCCCCCCCCCC                                                                                                                                   \n\n>   20% of LP Fee bought back into liquidity through owner wallet\n>   Anti-bot buy limit that increases automaticly \n>   Check buy back balance -> Creator address\n>   Telegram will be public to join and follow for announcements, not planning to make it public instantly.\n>   Will make it public as soon as the website is ready.\n\n**/\n\n/**\n// SPDX-License-Identifier: Unlicensed\n**/\npragma solidity ^0.8.6;\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n}\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function approve(address to, uint value) external returns (bool);\n}\ncontract MultiBridgeCapital is Context, IERC20, Ownable {\n    string private constant _name = unicode\"MultiBridgeCapital\";\n    string private constant _symbol = \"MBC\";\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping(address => uint256)) private _allowances;\n    mapping (address => bool) private bots;\n    mapping (address => uint) private cooldown;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isExcluded;\n    IUniswapV2Router02 private uniswapV2Router;\n    address[] private _excluded;\n    address private c;\n    address private wallet1;\n    address private uniswapV2Pair;\n    address private WETH;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1000000 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    uint256 private _taxFee;\n    uint256 private _LiquidityFee;\n    uint64 private buyCounter;\n    uint8 private constant _decimals = 9;\n    uint16 private maxTx;\n    bool private tradingOpen;\n    bool private inSwap;\n    bool private swapEnabled;\n\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 ethToOwner);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    constructor(address payable _wallet1) {\n        c = address(this);\n        wallet1 = _wallet1;\n        _rOwned[c] = _rTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[c] = true;\n        _isExcludedFromFee[wallet1] = true;\n        excludeFromReward(owner());\n        excludeFromReward(c);\n        excludeFromReward(wallet1);\n        emit Transfer(address(0),c,_tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()] - amount);\n        return true;\n    }\n\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\n        uint256 currentRate = _getRate();\n        return rAmount / currentRate;\n    }\n\n    function nofees() private {\n        _taxFee = 0;\n        _LiquidityFee = 0;\n    }\n\n    function basefees() private {\n        _taxFee = 0;\n        _LiquidityFee = 10;\n    }\n\n    function setBots(address[] memory bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n\n    function delBot(address notbot) public onlyOwner {\n        bots[notbot] = false;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(!bots[from] && !bots[to]);\n        basefees();\n        if (from != owner() && to != owner() && tradingOpen) {\n            if (!inSwap) {\n                if (from != address(this) && to != address(this) && from != address(uniswapV2Router) && to != address(uniswapV2Router)) {\n                    require(_msgSender() == address(uniswapV2Router) || _msgSender() == uniswapV2Pair,\"ERR: Uniswap only\");\n                }\n            }\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] && !inSwap) {\n                if (buyCounter < 100)\n                    require(amount <= _tTotal * maxTx / 1000);\n                buyCounter++;\n            }\n            if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFromFee[from] && !inSwap) {\n                if (swapEnabled) {\n                    uint256 contractTokenBalance = balanceOf(c);\n                    if (contractTokenBalance > balanceOf(uniswapV2Pair) * 1 / 10000) {\n                        swapAndLiquify(contractTokenBalance);\n                    }\n                }\n            }\n            if (!inSwap) {\n                if (buyCounter == 5)\n                    maxTx = 20; //20%\n                if (buyCounter == 20)\n                    maxTx = 30; //30%\n                if (buyCounter == 30) {\n                    maxTx = 1000; //10%\n                }\n            }\n        }\n        bool takeFee = true;\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || inSwap) {\n            takeFee = false;\n        }\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\tfunction swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n \t\t\tswapTokensForEth(contractTokenBalance);\n \t\t\tuint256 balance = c.balance / 5;\n \t\t\tsendETHToFee(balance*4);\n            sendETHToOwner(balance);\n \t\t\temit SwapAndLiquify(contractTokenBalance, balance*4, balance);\n \t}\n \tfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n \t\t\t_approve(c, address(uniswapV2Router), tokenAmount);\n \t\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\n \t\t\t\t\tc,\n \t\t\t\t\ttokenAmount,\n \t\t\t\t\t0,\n \t\t\t\t\t0,\n \t\t\t\t\towner(),\n \t\t\t\t\tblock.timestamp\n \t\t\t);\n \t}\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = c;\n        path[1] = WETH;\n        _approve(c, address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, c, block.timestamp);\n    }\n\n    function sendETHToFee(uint256 ETHamount) private {\n        payable(wallet1).transfer(ETHamount);\n    }\n     function sendETHToOwner(uint256 ETHamount) private {\n        payable(owner()).transfer(ETHamount);\n    }\n    function openTrading() external onlyOwner() {\n        require(!tradingOpen, \"trading is already open\");\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        WETH = uniswapV2Router.WETH();\n        _approve(c, address(uniswapV2Router), ~uint256(0));\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(c, WETH);\n        uniswapV2Router.addLiquidityETH{value: c.balance}(c,balanceOf(c),0,0,owner(),block.timestamp);\n        maxTx = 5; // 5% Hello you bots\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),~uint256(0));\n        tradingOpen = true;\n        swapEnabled = true;\n    }\n    function manualswap() external {\n        uint256 contractBalance = balanceOf(c);\n        swapTokensForEth(contractBalance);\n    }\n    function manualsend() external {\n        uint256 contractETHBalance = c.balance;\n        sendETHToFee(contractETHBalance);\n    }\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n        if (!takeFee) nofees();\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n    }\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender] - tAmount;\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender] - tAmount;\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLiquidity = tLiquidity * currentRate;\n        _rOwned[c] = _rOwned[c] + rLiquidity;\n        _tOwned[c] = _tOwned[c] + tLiquidity;\n    }\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal - rFee;\n        _tFeeTotal = _tFeeTotal + tFee;\n    }\n    receive() external payable {}\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount, _taxFee, _LiquidityFee);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n    }\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 LiquidityFee) private pure returns (uint256, uint256, uint256) {\n        uint256 tFee = tAmount * taxFee / 100;\n        uint256 tLiquidity = tAmount * LiquidityFee / 100;\n\t\tuint256 tTransferAmount = tAmount - tFee - tLiquidity;\n        return (tTransferAmount, tFee, tLiquidity);\n    }\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount * currentRate;\n        uint256 rFee = tFee * currentRate;\n        uint256 rLiquidity = tLiquidity * currentRate;\n\t\tuint256 rTransferAmount = rAmount - rFee - rLiquidity;\n        return (rAmount, rTransferAmount, rFee);\n    }\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply / tSupply;\n    }\n    function excludeFromReward(address addr) internal {\n        require(addr != address(uniswapV2Router), 'ERR: Can\\'t exclude Uniswap router');\n        require(!_isExcluded[addr], \"Account is already excluded\");\n        if(_rOwned[addr] > 0) {\n            _tOwned[addr] = tokenFromReflection(_rOwned[addr]);\n        }\n        _isExcluded[addr] = true;\n        _excluded.push(addr);\n    }\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply - _rOwned[_excluded[i]];\n            tSupply = tSupply - _tOwned[_excluded[i]];\n        }\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n}"}}}