{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ArkenDexV1.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n// Sources flattened with hardhat v2.6.4 https://hardhat.org\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.3.2\n\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/proxy/utils/Initializable.sol@v4.3.2\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n// File contracts/interfaces/IBakeryRouterV2.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IBakeryV2Router {\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n\n\n// File contracts/interfaces/IDODOV2Proxy.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IDODOV2Proxy {\n    function dodoSwapV2ETHToToken(\n        address toToken,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external payable returns (uint256 returnAmount);\n\n    function dodoSwapV2TokenToETH(\n        address fromToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external returns (uint256 returnAmount);\n\n    function dodoSwapV2TokenToToken(\n        address fromToken,\n        address toToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external returns (uint256 returnAmount);\n\n    function dodoSwapV1(\n        address fromToken,\n        address toToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external payable returns (uint256 returnAmount);\n}\n\n\n// File contracts/interfaces/IVyperSwap.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IVyperSwap {\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n\n\n// File contracts/interfaces/IVyperUnderlyingSwap.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IVyperUnderlyingSwap {\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n\n    function exchange_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n\n\n// File contracts/interfaces/IDoppleSwap.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IDoppleSwap {\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File contracts/lib/OwnableUpgradeable.sol\n\n\npragma solidity ^0.8.0;\n\nabstract contract OwnableUpgradeable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function ownableUpgradeableInitialize() internal {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            'Ownable: new owner is the zero address'\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File contracts/ArkenDexV1.sol\n\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n\n\n\n// import 'hardhat/console.sol';\n\n\n\n\n\n\ncontract ArkenDexV1 is Initializable, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /*\n    ==============================================================================\n\n    █▀ ▀█▀ █▀█ █▀█ ▄▀█ █▀▀ █▀▀\n    ▄█ ░█░ █▄█ █▀▄ █▀█ █▄█ ██▄\n\n    only add. do not change. cuz proxy.\n\n    ==============================================================================\n    */\n    uint256 public constant _DEADLINE_ = 2**256 - 1;\n    address public constant _ETH_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address payable public _FEE_WALLET_ADDR_;\n    address public _DODO_APPROVE_ADDR_;\n    address public _WETH_;\n    address public _WETH_DFYN_;\n    /* ---- add here ---- */\n\n    /*\n    ==============================================================================\n\n    █▀▀ █░█ █▀▀ █▄░█ ▀█▀ █▀\n    ██▄ ▀▄▀ ██▄ █░▀█ ░█░ ▄█\n\n    ==============================================================================\n    */\n    event Swapped(\n        address srcToken,\n        address dstToken,\n        uint256 amountIn,\n        uint256 returnAmount\n    );\n    event UpdateVyper(address dexAddr, address[] tokens);\n    event Received(address sender, uint256 amount);\n    event FeeWalletUpdated(address newFeeWallet);\n    event WETHUpdated(address newWETH);\n    event WETHDfynUpdated(address newWETHDfyn);\n    event DODOApproveUpdated(address newDODOApproveAddress);\n\n    /*\n    ==============================================================================\n\n    █▀▀ █▀█ █▄░█ █▀▀ █ █▀▀ █░█ █▀█ ▄▀█ ▀█▀ █ █▀█ █▄░█ █▀\n    █▄▄ █▄█ █░▀█ █▀░ █ █▄█ █▄█ █▀▄ █▀█ ░█░ █ █▄█ █░▀█ ▄█\n\n    ==============================================================================\n    */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function initialize(\n        address _ownerAddress,\n        address payable _feeWalletAddress,\n        address _wrappedEther,\n        address _wrappedEtherDfyn,\n        address _dodoApproveAddress\n    ) public initializer {\n        _FEE_WALLET_ADDR_ = _feeWalletAddress;\n        _DODO_APPROVE_ADDR_ = _dodoApproveAddress;\n        _WETH_ = _wrappedEther;\n        _WETH_DFYN_ = _wrappedEtherDfyn;\n        OwnableUpgradeable.ownableUpgradeableInitialize();\n        transferOwnership(_ownerAddress);\n    }\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n    function updateFeeWallet(address payable _feeWallet) external onlyOwner {\n        _FEE_WALLET_ADDR_ = _feeWallet;\n        emit FeeWalletUpdated(_FEE_WALLET_ADDR_);\n    }\n\n    function updateWETH(address _weth) external onlyOwner {\n        _WETH_ = _weth;\n        emit WETHUpdated(_WETH_);\n    }\n\n    function updateWETHDfyn(address _weth_dfyn) external onlyOwner {\n        _WETH_DFYN_ = _weth_dfyn;\n        emit WETHDfynUpdated(_WETH_DFYN_);\n    }\n\n    function updateDODOApproveAddress(address _dodoApproveAddress)\n        external\n        onlyOwner\n    {\n        _DODO_APPROVE_ADDR_ = _dodoApproveAddress;\n        emit DODOApproveUpdated(_DODO_APPROVE_ADDR_);\n    }\n\n    /*\n    ==================================================================================\n\n    ▀█▀ █▀█ ▄▀█ █▀▄ █▀▀ ░   ▀█▀ █▀█ ▄▀█ █▀▄ █▀▀ ░   ▀█▀ █▀█ ▄▀█ █▀▄ █▀▀ ░\n    ░█░ █▀▄ █▀█ █▄▀ ██▄ ▄   ░█░ █▀▄ █▀█ █▄▀ ██▄ ▄   ░█░ █▀▄ █▀█ █▄▀ ██▄ ▄\n\n    ==================================================================================\n    */\n\n    enum RouterInterface {\n        UNISWAP,\n        BAKERY,\n        VYPER,\n        VYPER_UNDERLYING,\n        DOPPLE,\n        DODO_V2,\n        DODO_V1,\n        DFYN\n    }\n    struct TradeRoute {\n        address dexAddr;\n        uint256 direction; // DODO\n        uint256 part;\n        int128 fromTokenIndex; // Vyper\n        int128 toTokenIndex; // Vyper\n        address[] paths;\n        address[] lpAddresses; // Mostly DODO\n        RouterInterface dexInterface;\n    }\n    struct MultiSwapDesctiption {\n        IERC20 srcToken;\n        IERC20 dstToken;\n        TradeRoute[] routes;\n        uint256 amountIn;\n        uint256 amountOutMin;\n        address payable to;\n    }\n\n    function multiTrade(MultiSwapDesctiption memory desc)\n        external\n        payable\n        returns (uint256 returnAmount, uint256 blockNumber)\n    {\n        IERC20 dstToken = desc.dstToken;\n        IERC20 srcToken = desc.srcToken;\n        uint256 beforeDstAmt;\n        if (_ETH_ == address(desc.dstToken)) {\n            beforeDstAmt = desc.to.balance;\n        } else {\n            beforeDstAmt = dstToken.balanceOf(desc.to);\n        }\n        (returnAmount, blockNumber) = _trade(desc);\n        if (_ETH_ == address(desc.dstToken)) {\n            (bool sent, ) = desc.to.call{value: returnAmount}('');\n            require(sent, 'Failed to send Ether');\n        } else {\n            dstToken.safeTransfer(desc.to, returnAmount);\n        }\n        uint256 afterDstAmt;\n        if (_ETH_ == address(desc.dstToken)) {\n            afterDstAmt = desc.to.balance;\n        } else {\n            afterDstAmt = dstToken.balanceOf(desc.to);\n        }\n        uint256 receivedAmt = afterDstAmt.sub(beforeDstAmt);\n        require(\n            receivedAmt > desc.amountOutMin,\n            'Received token is not enough'\n        );\n\n        emit Swapped(\n            address(srcToken),\n            address(dstToken),\n            desc.amountIn,\n            returnAmount\n        );\n    }\n\n    function _trade(MultiSwapDesctiption memory desc)\n        internal\n        returns (uint256 returnAmount, uint256 blockNumber)\n    {\n        require(desc.amountIn > 0, 'Amount-in needs to be more than zero');\n        blockNumber = block.number;\n\n        IERC20 srcToken = desc.srcToken;\n\n        if (_ETH_ == address(desc.srcToken)) {\n            require(msg.value == desc.amountIn, 'Value not match amountIn');\n        } else {\n            uint256 allowance = srcToken.allowance(msg.sender, address(this));\n            require(allowance >= desc.amountIn, 'Allowance not enough');\n            srcToken.safeTransferFrom(msg.sender, address(this), desc.amountIn);\n        }\n\n        TradeRoute[] memory routes = desc.routes;\n        uint256 srcTokenAmount;\n\n        for (uint256 i = 0; i < routes.length; i++) {\n            TradeRoute memory route = routes[i];\n            IERC20 startToken = IERC20(route.paths[0]);\n            IERC20 endToken = IERC20(route.paths[route.paths.length - 1]);\n            if (_ETH_ == address(startToken)) {\n                srcTokenAmount = address(this).balance;\n            } else {\n                srcTokenAmount = startToken.balanceOf(address(this));\n            }\n            uint256 inputAmount = srcTokenAmount.mul(route.part).div(100000000); // 1% = 10^6\n            require(\n                route.part <= 100000000,\n                'Route percentage can not exceed 100000000'\n            );\n            if (route.dexInterface == RouterInterface.BAKERY) {\n                _tradeIBakery(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.paths,\n                    address(this),\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.VYPER) {\n                _tradeVyper(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.dexAddr,\n                    route.fromTokenIndex,\n                    route.toTokenIndex\n                );\n            } else if (route.dexInterface == RouterInterface.VYPER_UNDERLYING) {\n                _tradeVyperUnderlying(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.dexAddr,\n                    route.fromTokenIndex,\n                    route.toTokenIndex\n                );\n            } else if (route.dexInterface == RouterInterface.DOPPLE) {\n                _tradeDopple(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.DODO_V2) {\n                _tradeIDODOV2(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    1, // DODO doesn't allow zero min amount\n                    route.lpAddresses,\n                    route.direction,\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.DODO_V1) {\n                _tradeIDODOV1(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    1, // DODO doesn't allow zero min amount\n                    route.lpAddresses,\n                    route.direction,\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.DFYN) {\n                _tradeIDfyn(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.paths,\n                    address(this),\n                    route.dexAddr\n                );\n            } else {\n                _tradeIUniswap(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.paths,\n                    address(this),\n                    route.dexAddr\n                );\n            }\n        }\n\n        if (_ETH_ == address(desc.dstToken)) {\n            returnAmount = address(this).balance;\n        } else {\n            returnAmount = desc.dstToken.balanceOf(address(this));\n        }\n\n        returnAmount = _collectFee(returnAmount, desc.dstToken);\n        // console.log(\n        //     'after fee: %d ,, out min: %d',\n        //     returnAmount,\n        //     desc.amountOutMin\n        // );\n        require(\n            returnAmount >= desc.amountOutMin,\n            'Return amount is not enough'\n        );\n    }\n\n    /*\n\n    █▀▀ █▀█ █░░ █░░ █▀▀ █▀▀ ▀█▀   █▀▀ █▀▀ █▀▀\n    █▄▄ █▄█ █▄▄ █▄▄ ██▄ █▄▄ ░█░   █▀░ ██▄ ██▄\n\n    */\n\n    function _collectFee(uint256 amount, IERC20 token)\n        private\n        returns (uint256 remainingAmount)\n    {\n        uint256 fee = amount.div(1000); // 0.1%\n        require(fee < amount, 'Fee exceeds amount');\n        if (_ETH_ == address(token)) {\n            _FEE_WALLET_ADDR_.transfer(fee);\n        } else {\n            token.safeTransfer(_FEE_WALLET_ADDR_, fee);\n        }\n        remainingAmount = amount.sub(fee);\n    }\n\n    /*\n\n    █▀▄ █▀▀ ▀▄▀\n    █▄▀ ██▄ █░█\n\n    */\n\n    function _tradeIUniswap(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory paths,\n        address to,\n        address dexAddr\n    ) private returns (uint256[] memory amounts) {\n        IUniswapV2Router02 uniRouter = IUniswapV2Router02(dexAddr);\n        if (_ETH_ == address(_src)) {\n            // ETH => TOKEN\n            if (paths[0] == address(_ETH_)) {\n                paths[0] = address(_WETH_);\n            }\n            amounts = uniRouter.swapExactETHForTokens{value: inputAmount}(\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        } else if (_ETH_ == address(_dest)) {\n            // TOKEN => ETH\n            if (paths[paths.length - 1] == address(_ETH_)) {\n                paths[paths.length - 1] = address(_WETH_);\n            }\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = uniRouter.swapExactTokensForETH(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        } else {\n            // TOKEN => TOKEN\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = uniRouter.swapExactTokensForTokens(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        }\n    }\n\n    function _tradeIDfyn(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory paths,\n        address to,\n        address dexAddr\n    ) private returns (uint256[] memory amounts) {\n        IUniswapV2Router02 uniRouter = IUniswapV2Router02(dexAddr);\n        if (_ETH_ == address(_src)) {\n            // ETH => TOKEN\n            if (paths[0] == address(_ETH_)) {\n                paths[0] = address(_WETH_DFYN_);\n            }\n            amounts = uniRouter.swapExactETHForTokens{value: inputAmount}(\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        } else if (_ETH_ == address(_dest)) {\n            // TOKEN => ETH\n            if (paths[paths.length - 1] == address(_ETH_)) {\n                paths[paths.length - 1] = address(_WETH_DFYN_);\n            }\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = uniRouter.swapExactTokensForETH(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        } else {\n            // TOKEN => TOKEN\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = uniRouter.swapExactTokensForTokens(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        }\n    }\n\n    function _tradeIDODOV2(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory dodoPairs,\n        uint256 direction,\n        address dexAddr\n    ) private returns (uint256 amount) {\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\n        if (_ETH_ == address(_src)) {\n            // ETH => TOKEN\n            amount = dodoProxy.dodoSwapV2ETHToToken{value: inputAmount}(\n                address(_dest),\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                _DEADLINE_\n            );\n        } else if (_ETH_ == address(_dest)) {\n            // TOKEN => ETH\n            _src.safeApprove(_DODO_APPROVE_ADDR_, inputAmount);\n            amount = dodoProxy.dodoSwapV2TokenToETH(\n                address(_src),\n                inputAmount,\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                _DEADLINE_\n            );\n        } else {\n            // TOKEN => TOKEN\n            _src.safeApprove(_DODO_APPROVE_ADDR_, inputAmount);\n            amount = dodoProxy.dodoSwapV2TokenToToken(\n                address(_src),\n                address(_dest),\n                inputAmount,\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                _DEADLINE_\n            );\n        }\n    }\n\n    function _tradeIDODOV1(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory dodoPairs,\n        uint256 direction,\n        address dexAddr\n    ) private returns (uint256 amount) {\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\n        if (_ETH_ == address(_src)) {\n            amount = dodoProxy.dodoSwapV1{value: inputAmount}(\n                address(_src),\n                address(_dest),\n                inputAmount,\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                _DEADLINE_\n            );\n        } else {\n            _src.safeApprove(_DODO_APPROVE_ADDR_, inputAmount);\n            amount = dodoProxy.dodoSwapV1(\n                address(_src),\n                address(_dest),\n                inputAmount,\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                _DEADLINE_\n            );\n        }\n    }\n\n    function _tradeIBakery(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory paths,\n        address to,\n        address dexAddr\n    ) private returns (uint256[] memory amounts) {\n        IBakeryV2Router bakeryRouter = IBakeryV2Router(dexAddr);\n        if (_ETH_ == address(_src)) {\n            // ETH => TOKEN\n            if (paths[0] == address(_ETH_)) {\n                paths[0] = address(_WETH_);\n            }\n            amounts = bakeryRouter.swapExactBNBForTokens{value: inputAmount}(\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        } else if (_ETH_ == address(_dest)) {\n            // TOKEN => ETH\n            if (paths[paths.length - 1] == address(_ETH_)) {\n                paths[paths.length - 1] = address(_WETH_);\n            }\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = bakeryRouter.swapExactTokensForBNB(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        } else {\n            // TOKEN => TOKEN\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = bakeryRouter.swapExactTokensForTokens(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                _DEADLINE_\n            );\n        }\n    }\n\n    function _tradeVyper(\n        IERC20 _src,\n        IERC20,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address dexAddr,\n        int128 fromTokenIndex,\n        int128 toTokenIndex\n    ) private {\n        IVyperSwap vyperSwap = IVyperSwap(dexAddr);\n        _src.safeApprove(dexAddr, inputAmount);\n        vyperSwap.exchange(\n            fromTokenIndex,\n            toTokenIndex,\n            inputAmount,\n            minOutputAmount\n        );\n    }\n\n    function _tradeVyperUnderlying(\n        IERC20 _src,\n        IERC20,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address dexAddr,\n        int128 fromTokenIndex,\n        int128 toTokenIndex\n    ) private {\n        IVyperUnderlyingSwap vyperSwap = IVyperUnderlyingSwap(dexAddr);\n        _src.safeApprove(dexAddr, inputAmount);\n        vyperSwap.exchange_underlying(\n            fromTokenIndex,\n            toTokenIndex,\n            inputAmount,\n            minOutputAmount\n        );\n    }\n\n    function _tradeDopple(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address dexAddr\n    ) private returns (uint256 amount) {\n        IDoppleSwap doppleSwap = IDoppleSwap(dexAddr);\n        _src.safeApprove(dexAddr, inputAmount);\n        uint8 tokenIndexFrom = doppleSwap.getTokenIndex(address(_src));\n        uint8 tokenIndexTo = doppleSwap.getTokenIndex(address(_dest));\n        amount = doppleSwap.swap(\n            tokenIndexFrom,\n            tokenIndexTo,\n            inputAmount,\n            minOutputAmount,\n            _DEADLINE_\n        );\n    }\n\n    /*\n\n    █▀▄ █▀▀ █░█\n    █▄▀ ██▄ ▀▄▀\n\n    */\n    function testTransfer(MultiSwapDesctiption memory desc)\n        external\n        payable\n        returns (uint256 returnAmount, uint256 blockNumber)\n    {\n        IERC20 dstToken = desc.dstToken;\n        (returnAmount, blockNumber) = _trade(desc);\n        uint256 beforeAmount = dstToken.balanceOf(desc.to);\n        dstToken.safeTransfer(desc.to, returnAmount);\n        uint256 afterAmount = dstToken.balanceOf(desc.to);\n        uint256 got = afterAmount.sub(beforeAmount);\n        require(got == returnAmount, 'ArkenTester: Has Tax');\n    }\n}\n"}}}