{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ERC20Leven.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.0;\n\nimport \"./IERC20Leven.sol\";\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        \n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20Leven is Context, IERC20, Ownable {\n    using Address for address;\n    \n    mapping (address => mapping (address => uint256)) private _allowances; // allowancement\n    mapping (address => uint256) private balances; // user's balance\n    \n    mapping (address => bool) private airdropWallet; // flag for airdrop wallets\n    mapping (address => uint256) private airdropBalance; // balance for airdrop wallets\n    mapping (address => uint256) private airdropTime; // timestamp when get airdrop\n    \n    \n    string private _name = \"Leven Token\";\n    string private _symbol = \"LEVEN\";\n    uint8 private _decimals = 18;\n    string public version = \"1.0\";\n    \n    uint256 private _tDev = 50 * (10 ** 6) * (10 ** _decimals); // 25000000\n    uint256 private _tAirDrop = 50 * (10 ** 6) * (10 ** _decimals); // 75000000\n    uint256 private _tPresale = 1 * (10 ** 8) * (10 ** _decimals);\n    uint256 private _tReserve = 8 * (10 ** 8) * (10 ** _decimals);\n    uint256 public _tTotal = 1 * ( 10 ** 9 ) * (10 ** _decimals);\n    uint256 public _maxSupply = 1 * (10 ** 12 ) * (10 ** _decimals);\n    \n    uint256 private airdropLockTime = 60 * 60 * 24 * 365 * 1; // lock time for airdrop is one year.\n    uint256 private devLockTime = 60 * 60 * 24 * 60;          // lock time for dev is 2 months.\n    address private poolAccount = 0xD3f9b9724ED775D3FF065027c2118d649742F5C8;\n    uint256 private devTimeStamp = 0;\n    \n    // constructor for LVN token\n    constructor () {\n        balances[poolAccount] = _tDev;\n        devTimeStamp = block.timestamp;\n    }\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n    \n    function balanceOf(address account) public view override returns (uint256) {\n        if (account == address(0)) {\n            return 0;\n        }\n        return balances[account];\n    }\n    \n    function allowance(address _from, address _to) public view override returns (uint256) {\n        return _allowances[_from][_to];\n    }\n    \n    function _approve(address _from, address _to, uint256 amount) private {\n        require(_from != address(0), \"ERC20 approve from zero address\");\n        require(_to != address(0), \"ERC20 approve from zero address\");\n        \n        _allowances[_from][_to] = amount;\n        Approval(_from, _to, amount);\n    }\n    \n    function approve(address _to, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), _to, amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 amount) public override returns (bool) {\n        if (balances[_from] < amount || \n            amount <= 0 || \n            _allowances[_from][_to] < amount) {\n            return false;\n        }\n\n        if (lockingCheck(_from, amount) == false) {\n            return false;\n        }\n        \n        balances[_from] -= amount;\n        balances[_to] += amount;\n        Transfer(_from, _to, amount);\n        _allowances[_from][_to] -= amount;\n        \n        return true;\n    }\n\n    function lockingCheck(address _from, uint256 amount) private returns (bool) {\n\n        if ((balances[_from] - amount) < airdropBalance[_from]) {\n            uint256 spentTime = block.timestamp - airdropTime[_from];\n            if (spentTime < airdropLockTime) {\n                return false;\n            } else {\n                airdropBalance[_from] = 0;\n            }\n        }\n\n        if (_from == poolAccount) {\n            if ((balances[_from] - amount) < _tDev) {\n                uint256 spentTime = block.timestamp - devTimeStamp;\n                if (spentTime < devLockTime) {\n                    return false;\n                } else {\n\n                }\n            }\n        }\n\n        return true;\n    }\n    \n    function transfer(address _to, uint256 amount) public override returns (bool) {\n        if (balances[msg.sender] < amount || \n            amount <= 0) {\n            return false;\n        }\n\n        if (lockingCheck(msg.sender, amount) == false) {\n            return false;\n        }        \n        \n        balances[msg.sender] -= amount;\n        balances[_to] += amount;\n        Transfer(msg.sender, _to, amount);\n        \n        return true;\n    }\n\n    function airdrop(address _to, uint256 amount) public returns(bool) {\n        if (airdropWallet[_to] == true || _to == address(0)) {\n            return false;\n        }\n\n        balances[_to] += amount;\n        airdropWallet[_to] = true;\n        airdropBalance[_to] += amount;\n        airdropTime[_to] = block.timestamp;\n        _tAirDrop -= amount;\n        \n        \n        return true;\n    }\n\n    function presale(address _to, uint256 amount) public returns(bool) {\n        if (_tPresale <= 0 || _to == address(0) || amount <= 0) { // check the preslae balance\n            return false;\n        }\n        \n        if (_tPresale < amount) {\n            amount = _tPresale;\n        }\n        \n        balances[_to] += amount;\n        _tPresale -= amount;\n        \n        return true;\n    }\n\n    function getRemainPresalCnt() public view returns(uint256) {\n        return _tPresale;\n    }\n    \n    function getRemainAirDropCnt() public view returns(uint256) {\n        return _tAirDrop;\n    }\n\n    function getAirdropStatus(address account) public view returns(bool) {\n        return airdropWallet[account];\n    }\n}\n"},"IERC20Leven.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Leven {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    function airdrop(address _to, uint256 amount) external returns(bool);\n    function presale(address _to, uint256 amount) external returns(bool);\n    function getRemainPresalCnt() external view returns(uint256);\n    function getRemainAirDropCnt() external view returns(uint256);\n    function getAirdropStatus(address account) external view returns(bool);\n}"}}}