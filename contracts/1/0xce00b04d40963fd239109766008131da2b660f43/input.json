{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"browser/IClientRecord.sol":{"content":"pragma solidity ^0.6.6;\nimport \"./IClientRecordShema.sol\";\npragma experimental ABIEncoderV2;\n\ninterface IClientRecord is IClientRecordSchema {\n    function doesClientRecordExist(address depositor)\n        external\n        view\n        returns (bool);\n\n    function getRecordIndex(address depositor) external view returns (uint256);\n\n    function createClientRecord(\n        address payable _address,\n        uint256 underlyingTotalDeposits,\n        uint256 underlyingTotalWithdrawn,\n        uint256 derivativeBalance,\n        uint256 derivativeTotalDeposits,\n        uint256 derivativeTotalWithdrawn\n    ) external;\n\n    function updateClientRecord(\n        address payable _address,\n        uint256 underlyingTotalDeposits,\n        uint256 underlyingTotalWithdrawn,\n        uint256 derivativeBalance,\n        uint256 derivativeTotalDeposits,\n        uint256 derivativeTotalWithdrawn\n    ) external;\n\n    function getLengthOfClientRecords() external view returns (uint256);\n\n    function getClientRecordByIndex(uint256 index)\n        external\n        view\n        returns (\n            address payable _address,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 derivativeBalance,\n            uint256 derivativeTotalDeposits,\n            uint256 derivativeTotalWithdrawn\n        );\n\n    function getClientRecordByAddress(address depositor)\n        external\n        view\n        returns (\n            address payable _address,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 derivativeBalance,\n            uint256 derivativeTotalDeposits,\n            uint256 derivativeTotalWithdrawn\n        );\n\n    function activateStorageOracle(address oracle) external;\n\n    function deactivateStorageOracle(address oracle) external;\n\n    function reAssignStorageOracle(address newOracle) external;\n\n     function GetRecordIndexFromDepositor(address member) external view returns(uint);\n     \n     function GetRecordIdFromRecordIndexAndDepositorRecord(uint recordIndex, address depositor) external view returns(uint);\n      \n     function CreateDepositRecordMapping(uint amount, uint lockPeriodInSeconds,uint depositDateInSeconds, address payable depositor, bool hasWithdrawn) external returns (uint);\n    \n     function UpdateDepositRecordMapping(uint DepositRecordId, uint amount, uint lockPeriodInSeconds,uint depositDateInSeconds, address payable depositor, bool hasWithdrawn) external;\n\n     function GetRecordById(uint depositRecordId) external view returns(uint recordId, address payable depositorId, uint amount, uint depositDateInSeconds, uint lockPeriodInSeconds, bool hasWithdrawn);\n     \n     function GetRecords() external view returns (FixedDepositRecord [] memory);\n     \n     function CreateDepositorToDepositRecordIndexToRecordIDMapping(address payable depositor, uint recordId) external;\n     \n     function CreateDepositorAddressToDepositRecordMapping (address payable depositor, uint recordId, uint amountDeposited, uint lockPeriodInSeconds, uint depositDateInSeconds, bool hasWithdrawn) external;\n}\n"},"browser/IClientRecordShema.sol":{"content":"pragma solidity 0.6.6;\n\ninterface IClientRecordSchema {\n    struct ClientRecord {\n        bool exists;\n        address payable _address;\n        uint256 underlyingTotalDeposits;\n        uint256 underlyingTotalWithdrawn;\n        uint256 derivativeBalance;\n        uint256 derivativeTotalDeposits;\n        uint256 derivativeTotalWithdrawn;\n    }\n struct FixedDepositRecord{\n        uint256 recordId;\n        address payable depositorId;\n        bool hasWithdrawn;\n        uint256 amount;\n        uint256 depositDateInSeconds;\n        uint256 lockPeriodInSeconds;\n    }\n    struct RecordIndex {\n        bool exists;\n        uint256 index;\n    }\n}\n"},"browser/IDaiLendingService.sol":{"content":"pragma solidity ^0.6.6;\n\ninterface IDaiLendingService {\n    function getPricePerFullShare() external view returns (uint256);\n\n    function save(uint256 amount) external;\n\n    function userShares() external view returns (uint256);\n\n    function userDaiBalance() external view returns (uint256);\n\n    function GetUserGrossRevenue() external view returns (uint256);\n\n    function GetNetRevenue() external view returns (uint256);\n\n    function GetUserDepositedDaiBalance() external view returns (uint256);\n\n    function Withdraw(uint256 amount) external;\n    \n    function WithdrawByShares(uint amount, uint sharesAmount) external;\n    \n    function GetDaiLendingAdapterAddress() external view returns (address);\n    \n    function WithdrawBySharesOnly(uint sharesAmount) external;\n}"},"browser/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"},"browser/IGroupSchema.sol":{"content":"pragma solidity 0.6.6;\n\ninterface IGroupSchema {\n    struct Group {\n        uint256 id;\n        string name;\n        string symbol;\n        bool exists;\n        address payable creatorAddress;\n    }\n\n    struct Cycle {\n        uint256 id;\n        uint256 groupId;\n        uint256 numberOfDepositors;\n        uint256 cycleStartTimeStamp;\n        uint256 cycleDuration;\n        uint256 maximumSlots;\n        uint256 cycleStakeAmount;\n        // represents the total stakes of every cycle member deposits\n        uint256 totalStakes;\n        //represents the total stakes of every cycle member withdrawal\n        uint256 stakesClaimed;\n        bool hasMaximumSlots;\n        bool exists;\n        CycleStatus cycleStatus;\n        // represents the number of cycle stakes that user's have cashed out on before the cycle has ended\n        uint256 stakesClaimedBeforeMaturity;\n    }\n\n    struct CycleFinancial {\n        bool exists;\n        uint256 cycleId;\n        //total underlying asset deposited into contract\n        uint256 underlyingTotalDeposits;\n        //total underlying asset that have been withdrawn by cycle members\n        uint256 underlyingTotalWithdrawn;\n        // underlying amount gotten after lending period has ended and shares have been reedemed for underlying asset;\n        uint256 underlyingBalance;\n        // lending shares representation of amount deposited in lending protocol\n        uint256 derivativeBalance;\n        // represents the total underlying crypto amount that has been cashed out before the cycle ended\n        uint256 underylingBalanceClaimedBeforeMaturity;\n        // represents the total derivative crypto amount that has been cashed out on before the cycle ended\n        uint256 derivativeBalanceClaimedBeforeMaturity;\n    }\n\n    struct CycleMember {\n        uint256 cycleId;\n        uint256 groupId;\n        uint256 totalLiquidityAsPenalty;\n        uint256 numberOfCycleStakes;\n        uint256 stakesClaimed;\n        bool exist;\n        address payable _address;\n        bool hasWithdrawn;\n    }\n\n    struct Member {\n        bool exists;\n        address payable _address;\n    }\n\n    struct GroupMember {\n        bool exists;\n        address payable _address;\n        uint256 groupId;\n    }\n\n    struct RecordIndex {\n        bool exists;\n        uint256 index;\n    }\n\n    enum CycleStatus {NOT_STARTED, ONGOING, ENDED}\n}\n"},"browser/IRewardConfig.sol":{"content":"pragma solidity ^0.6.6;\n\n\ninterface IRewardConfig{\n\n    function CalculateIndividualSavingsReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\n\n    function CalculateCooperativeSavingsReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\n    \n    function CalculateEsusuReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\n}"},"browser/ISavingsConfig.sol":{"content":"pragma solidity ^0.6.6;\nimport './ISavingsConfigSchema.sol';\n\n\n\n\n\ninterface  ISavingsConfig is ISavingsConfigSchema {\n   \n    function getRuleSet(string calldata ruleKey) external returns (uint ,uint , uint ,  bool ,RuleDefinition );\n    function getRuleManager(string calldata ruleKey) external returns (address);\n    function changeRuleCreator(string calldata ruleKey, address newRuleManager) external;\n    function createRule(string calldata ruleKey, uint minimum, uint maximum, uint exact, RuleDefinition ruleDefinition) external;\n    function modifyRule(string calldata ruleKey, uint minimum, uint maximum, uint exact,  RuleDefinition  ruleDefinition ) external;\n    function disableRule(string calldata ruleKey) external;\n    function enableRule(string calldata ruleKey)  external;\n    \n   \n    \n}"},"browser/ISavingsConfigSchema.sol":{"content":"pragma solidity 0.6.6;\n\ninterface ISavingsConfigSchema {\n    struct RuleSet {\n        uint256 minimum;\n        uint256 maximum;\n        uint256 exact;\n        bool applies;\n        RuleDefinition ruleDefinition;\n        bool exists;\n    }\n\n    enum RuleDefinition {RANGE, VALUE}\n}\n"},"browser/ITreasury.sol":{"content":"pragma solidity ^0.6.6;\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\ninterface ITreasury {\n    function depositToken(address token) external;\n\n    function getEtherBalance() external view returns (uint256);\n\n    function getTokenBalance(address token) external view returns (uint256);\n\n    function withdrawEthers(uint256 amount) external;\n\n    function withdrawTokens(address tokenAddress, uint256 amount) external;\n}\n"},"browser/IXendToken.sol":{"content":"pragma solidity ^0.6.6;\n\ninterface IXendToken {\n    function mint(address payable recipient, uint256 amount) external;\n}\n"},"browser/Ownable.sol":{"content":"pragma solidity ^0.6.4;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n    address payable public owner;\n\n    constructor() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Unauthorized access to contract\");\n        _;\n    }\n\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n"},"browser/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"browser/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"browser/SafeMath.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"browser/XendFinanceIndividual_Yearn_V1.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.6;\n\nimport \"./IClientRecordShema.sol\";\nimport \"./IGroupSchema.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./IDaiLendingService.sol\";\nimport \"./IRewardConfig.sol\";\nimport \"./IClientRecord.sol\";\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\nimport \"./ISavingsConfig.sol\";\nimport \"./ISavingsConfigSchema.sol\";\nimport \"./ITreasury.sol\";\nimport \"./IXendToken.sol\";\n\ncontract XendFinanceIndividual_Yearn_V1 is\n    Ownable,\n    IClientRecordSchema,\n    ISavingsConfigSchema,\n    ReentrancyGuard\n{\n    using SafeMath for uint256;\n\n    using SafeERC20 for IERC20;\n\n    using Address for address payable;\n\n    event UnderlyingAssetDeposited(\n        address payable user,\n        uint256 underlyingAmount,\n        uint256 derivativeAmount,\n        uint256 balance\n    );\n\n    event DerivativeAssetWithdrawn(\n        address payable user,\n        uint256 underlyingAmount,\n        uint256 derivativeAmount,\n        uint256 balance\n    );\n\n    event XendTokenReward(\n        uint256 date,\n        address payable recipient,\n        uint256 amount\n    );\n\n    IDaiLendingService lendingService;\n    IERC20 daiToken;\n    IClientRecord clientRecordStorage;\n    IRewardConfig rewardConfig;\n    ISavingsConfig savingsConfig;\n    IERC20 derivativeToken;\n    ITreasury treasury;\n    IXendToken xendToken;\n\n    bool isDeprecated;\n\n    uint256 minLockPeriod = 7890000; //minimum lock period is three months by default\n\n    mapping(address => uint256) MemberToXendTokenRewardMapping; //  This tracks the total amount of xend token rewards a member has received\n\n      uint256 _totalTokenReward;      //  This tracks the total number of token rewards distributed on the individual savings\n\n      \n\n    address LendingAdapterAddress;\n\n    string constant XEND_FINANCE_COMMISION_DIVISOR =\n        \"XEND_FINANCE_COMMISION_DIVISOR\";\n    string constant XEND_FINANCE_COMMISION_DIVIDEND =\n        \"XEND_FINANCE_COMMISION_DIVIDEND\";\n\n    constructor(\n        address lendingServiceAddress,\n        address tokenAddress,\n        address clientRecordStorageAddress,\n        address savingsConfigAddress,\n        address derivativeTokenAddress,\n        address rewardConfigAddress,\n        address xendTokenAddress,\n        address treasuryAddress\n    ) public {\n        lendingService = IDaiLendingService(lendingServiceAddress);\n        daiToken = IERC20(tokenAddress);\n        clientRecordStorage = IClientRecord(clientRecordStorageAddress);\n        savingsConfig = ISavingsConfig(savingsConfigAddress);\n        rewardConfig = IRewardConfig(rewardConfigAddress);\n        derivativeToken = IERC20(derivativeTokenAddress);\n        treasury = ITreasury(treasuryAddress);\n        xendToken = IXendToken(xendTokenAddress);\n    }\n\n    function setAdapterAddress() external onlyOwner {\n        LendingAdapterAddress = lendingService.GetDaiLendingAdapterAddress();\n    }\n\n    function setMinimumLockPeriod (uint256 minimumLockPeriod) external onlyNonDeprecatedCalls onlyOwner {\n        minLockPeriod = minimumLockPeriod;\n    }\n\n     function GetTotalTokenRewardDistributed() external view returns(uint256){\n            return _totalTokenReward;\n        }\n\n    function deprecateContract(address newServiceAddress)\n        external\n        onlyOwner\n        onlyNonDeprecatedCalls\n    {\n        isDeprecated = true;\n        clientRecordStorage.reAssignStorageOracle(newServiceAddress);\n        uint256 derivativeTokenBalance =\n            derivativeToken.balanceOf(address(this));\n        derivativeToken.safeTransfer(newServiceAddress, derivativeTokenBalance);\n    }\n\n    function _UpdateMemberToXendTokeRewardMapping(\n        address member,\n        uint256 rewardAmount\n    ) internal onlyNonDeprecatedCalls {\n        MemberToXendTokenRewardMapping[member] = MemberToXendTokenRewardMapping[\n            member\n        ]\n            .add(rewardAmount);\n    }\n\n    function GetMemberXendTokenReward(address member)\n        external\n        view\n        returns (uint256)\n    {\n        return MemberToXendTokenRewardMapping[member];\n    }\n\n    function doesClientRecordExist(address depositor)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (bool)\n    {\n        return clientRecordStorage.doesClientRecordExist(depositor);\n    }\n\n    function getClientRecord(address depositor)\n        external\n        onlyNonDeprecatedCalls\n        returns (\n            address payable _address,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 derivativeBalance,\n            uint256 derivativeTotalDeposits,\n            uint256 derivativeTotalWithdrawn\n        )\n    {\n        ClientRecord memory clientRecord = _getClientRecordByAddress(depositor);\n        return (\n            clientRecord._address,\n            clientRecord.underlyingTotalDeposits,\n            clientRecord.underlyingTotalWithdrawn,\n            clientRecord.derivativeBalance,\n            clientRecord.derivativeTotalDeposits,\n            clientRecord.derivativeTotalWithdrawn\n        );\n    }\n\n    function getClientRecord()\n        external\n        onlyNonDeprecatedCalls\n        returns (\n            address payable _address,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 derivativeBalance,\n            uint256 derivativeTotalDeposits,\n            uint256 derivativeTotalWithdrawn\n        )\n    {\n        ClientRecord memory clientRecord =\n            _getClientRecordByAddress(msg.sender);\n\n        return (\n            clientRecord._address,\n            clientRecord.underlyingTotalDeposits,\n            clientRecord.underlyingTotalWithdrawn,\n            clientRecord.derivativeBalance,\n            clientRecord.derivativeTotalDeposits,\n            clientRecord.derivativeTotalWithdrawn\n        );\n    }\n\n    function getClientRecordByIndex(uint256 index)\n        external\n        onlyNonDeprecatedCalls\n        returns (\n            address payable _address,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 derivativeBalance,\n            uint256 derivativeTotalDeposits,\n            uint256 derivativeTotalWithdrawn\n        )\n    {\n        ClientRecord memory clientRecord = _getClientRecordByIndex(index);\n        return (\n            clientRecord._address,\n            clientRecord.underlyingTotalDeposits,\n            clientRecord.underlyingTotalWithdrawn,\n            clientRecord.derivativeBalance,\n            clientRecord.derivativeTotalDeposits,\n            clientRecord.derivativeTotalWithdrawn\n        );\n    }\n\n    function _getClientRecordByIndex(uint256 index)\n        internal\n        returns (ClientRecord memory)\n    {\n        (\n            address payable _address,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 derivativeBalance,\n            uint256 derivativeTotalDeposits,\n            uint256 derivativeTotalWithdrawn\n        ) = clientRecordStorage.getClientRecordByIndex(index);\n        return\n            ClientRecord(\n                true,\n                _address,\n                underlyingTotalDeposits,\n                underlyingTotalWithdrawn,\n                derivativeBalance,\n                derivativeTotalDeposits,\n                derivativeTotalWithdrawn\n            );\n    }\n\n    function _getClientRecordByAddress(address member)\n        internal\n        view\n        returns (ClientRecord memory)\n    {\n        (\n            address payable _address,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 derivativeBalance,\n            uint256 derivativeTotalDeposits,\n            uint256 derivativeTotalWithdrawn\n        ) = clientRecordStorage.getClientRecordByAddress(member);\n\n        return\n            ClientRecord(\n                true,\n                _address,\n                underlyingTotalDeposits,\n                underlyingTotalWithdrawn,\n                derivativeBalance,\n                derivativeTotalDeposits,\n                derivativeTotalWithdrawn\n            );\n    }\n\n    function withdraw(uint256 derivativeAmount)\n        external\n        onlyNonDeprecatedCalls\n    {\n        address payable recipient = msg.sender;\n        _withdraw(recipient, derivativeAmount);\n    }\n\n    function withdrawDelegate(\n        address payable recipient,\n        uint256 derivativeAmount\n    ) external onlyNonDeprecatedCalls onlyOwner {\n        _withdraw(recipient, derivativeAmount);\n    }\n\n    function WithdrawFromFixedDeposit(\n        uint256 recordId,\n        uint256 derivativeAmount\n    ) external onlyNonDeprecatedCalls {\n        address payable recipient = msg.sender;\n\n        FixedDepositRecord memory depositRecord =\n            _getFixedDepositRecordById(recordId);\n\n        uint256 depositDate = depositRecord.depositDateInSeconds;\n\n        uint256 lockPeriod = depositRecord.lockPeriodInSeconds;\n\n        _validateLockTimeHasElapsedAndHasNotWithdrawn(recordId);\n\n        uint256 balanceBeforeWithdraw = lendingService.userDaiBalance();\n\n        lendingService.WithdrawBySharesOnly(derivativeAmount);\n\n        uint256 balanceAfterWithdraw = lendingService.userDaiBalance();\n\n        uint256 amountOfUnderlyingAssetWithdrawn =\n            balanceBeforeWithdraw.sub(balanceAfterWithdraw);\n\n        uint256 commissionFees =\n            _computeXendFinanceCommisions(amountOfUnderlyingAssetWithdrawn);\n\n        uint256 amountToSendToDepositor =\n            amountOfUnderlyingAssetWithdrawn.sub(commissionFees);\n\n        daiToken.safeTransfer(recipient, amountToSendToDepositor);\n\n        if (commissionFees > 0) {\n            daiToken.approve(address(treasury), commissionFees);\n            treasury.depositToken(address(daiToken));\n        }\n\n        clientRecordStorage.UpdateDepositRecordMapping(\n            recordId,\n            derivativeAmount,\n            lockPeriod,\n            depositDate,\n            msg.sender,\n            true\n        );\n        clientRecordStorage.CreateDepositorAddressToDepositRecordMapping(\n            recipient,\n            depositRecord.recordId,\n            depositRecord.amount,\n            lockPeriod,\n            depositDate,\n            true\n        );\n\n        _rewardUserWithTokens(lockPeriod, derivativeAmount, recipient);\n\n        emit DerivativeAssetWithdrawn(\n            recipient,\n            amountOfUnderlyingAssetWithdrawn,\n            derivativeAmount,\n            derivativeAmount\n        );\n    }\n\n    function _withdraw(address payable recipient, uint256 derivativeAmount)\n        internal\n        nonReentrant\n    {\n        _validateUserBalanceIsSufficient(recipient, derivativeAmount);\n\n        uint256 balanceBeforeWithdraw = lendingService.userDaiBalance();\n\n        lendingService.WithdrawBySharesOnly(derivativeAmount);\n\n        uint256 balanceAfterWithdraw = lendingService.userDaiBalance();\n\n        uint256 amountOfUnderlyingAssetWithdrawn =\n            balanceBeforeWithdraw.sub(balanceAfterWithdraw);\n\n        uint256 commissionFees =\n            _computeXendFinanceCommisions(amountOfUnderlyingAssetWithdrawn);\n\n        uint256 amountToSendToDepositor =\n            amountOfUnderlyingAssetWithdrawn.sub(commissionFees);\n\n        daiToken.safeTransfer(recipient, amountToSendToDepositor);\n\n        if (commissionFees > 0) {\n            daiToken.approve(address(treasury), commissionFees);\n            treasury.depositToken(address(daiToken));\n        }\n\n        ClientRecord memory clientRecord =\n            _updateClientRecordAfterWithdrawal(\n                recipient,\n                amountOfUnderlyingAssetWithdrawn,\n                derivativeAmount\n            );\n        _updateClientRecord(clientRecord);\n\n        emit DerivativeAssetWithdrawn(\n            recipient,\n            amountOfUnderlyingAssetWithdrawn,\n            derivativeAmount,\n            clientRecord.derivativeBalance\n        );\n    }\n\n    function _validateUserBalanceIsSufficient(\n        address payable recipient,\n        uint256 derivativeAmount\n    ) internal {\n        ClientRecord memory clientRecord = _getClientRecordByAddress(recipient);\n\n        uint256 derivativeBalance = clientRecord.derivativeBalance;\n\n        require(\n            derivativeBalance >= derivativeAmount,\n            \"Withdrawal cannot be processes, reason: Insufficient Balance\"\n        );\n    }\n\n    function _computeXendFinanceCommisions(uint256 worthOfMemberDepositNow)\n        internal\n        returns (uint256)\n    {\n        uint256 dividend = _getDividend();\n        uint256 divisor = _getDivisor();\n\n        require(\n            worthOfMemberDepositNow > 0,\n            \"member deposit really isn't worth much\"\n        );\n\n        return worthOfMemberDepositNow.mul(dividend).div(divisor).div(100);\n    }\n\n    function _validateLockTimeHasElapsedAndHasNotWithdrawn(uint256 recordId)\n        internal\n    {\n        FixedDepositRecord memory depositRecord =\n            _getFixedDepositRecordById(recordId);\n\n        uint256 lockPeriod = depositRecord.lockPeriodInSeconds;\n\n        bool hasWithdrawn = depositRecord.hasWithdrawn;\n\n        require(!hasWithdrawn, \"Individual has already withdrawn\");\n\n        uint256 currentTimeStamp = now;\n\n        require(\n            currentTimeStamp >= lockPeriod,\n            \"Funds are still locked, wait until lock period expires\"\n        );\n    }\n\n    function _getDivisor() internal returns (uint256) {\n        (\n            uint256 minimumDivisor,\n            uint256 maximumDivisor,\n            uint256 exactDivisor,\n            bool appliesDivisor,\n            RuleDefinition ruleDefinitionDivisor\n        ) = savingsConfig.getRuleSet(XEND_FINANCE_COMMISION_DIVISOR);\n\n        require(appliesDivisor, \"unsupported rule defintion for rule set\");\n\n        require(\n            ruleDefinitionDivisor == RuleDefinition.VALUE,\n            \"unsupported rule defintion for penalty percentage rule set\"\n        );\n        return exactDivisor;\n    }\n\n    function _getDividend() internal returns (uint256) {\n        (\n            uint256 minimumDividend,\n            uint256 maximumDividend,\n            uint256 exactDividend,\n            bool appliesDividend,\n            RuleDefinition ruleDefinitionDividend\n        ) = savingsConfig.getRuleSet(XEND_FINANCE_COMMISION_DIVIDEND);\n\n        require(appliesDividend, \"unsupported rule defintion for rule set\");\n\n        require(\n            ruleDefinitionDividend == RuleDefinition.VALUE,\n            \"unsupported rule defintion for penalty percentage rule set\"\n        );\n        return exactDividend;\n    }\n\n    function deposit() external onlyNonDeprecatedCalls {\n        _deposit(msg.sender);\n    }\n\n    function depositDelegate(address payable depositorAddress)\n        external\n        onlyNonDeprecatedCalls\n        onlyOwner\n    {\n        _deposit(depositorAddress);\n    }\n\n    function _getFixedDepositRecordById(uint256 recordId)\n        internal\n        returns (FixedDepositRecord memory)\n    {\n        (\n            uint256 recordId,\n            address payable depositorId,\n            uint256 amount,\n            uint256 depositDateInSeconds,\n            uint256 lockPeriodInSeconds,\n            bool hasWithdrawn\n        ) = clientRecordStorage.GetRecordById(recordId);\n    }\n\n    function FixedDeposit(\n        uint256 depositDateInSeconds,\n        uint256 lockPeriodInSeconds\n    ) external onlyNonDeprecatedCalls {\n        address payable depositorAddress = msg.sender;\n\n        address recipient = address(this);\n\n        uint256 amountTransferrable =\n            daiToken.allowance(depositorAddress, recipient);\n\n            require(lockPeriodInSeconds >= minLockPeriod, \"Minimum lock period must be 3 months\");\n\n        require(\n            amountTransferrable > 0,\n            \"Approve an amount > 0 for token before proceeding\"\n        );\n        bool isSuccessful =\n            daiToken.transferFrom(\n                depositorAddress,\n                recipient,\n                amountTransferrable\n            );\n        require(\n            isSuccessful,\n            \"Could not complete deposit process from token contract\"\n        );\n\n        LendingAdapterAddress = lendingService.GetDaiLendingAdapterAddress();\n\n        daiToken.approve(LendingAdapterAddress, amountTransferrable);\n\n        uint256 balanceBeforeDeposit = lendingService.userShares();\n\n        lendingService.save(amountTransferrable);\n\n        uint256 balanceAfterDeposit = lendingService.userShares();\n\n        uint256 amountOfyDai = balanceAfterDeposit.sub(balanceBeforeDeposit);\n\n       uint recordId = clientRecordStorage.CreateDepositRecordMapping(\n            amountTransferrable,\n            lockPeriodInSeconds,\n            depositDateInSeconds,\n            depositorAddress,\n            false\n        );\n\n\n        clientRecordStorage\n            .CreateDepositorToDepositRecordIndexToRecordIDMapping(\n            depositorAddress,\n            recordId\n        );\n\n        clientRecordStorage.CreateDepositorAddressToDepositRecordMapping(\n            depositorAddress,\n            recordId,\n            amountTransferrable,\n            lockPeriodInSeconds,\n            depositDateInSeconds,\n            false\n        );\n\n        emit UnderlyingAssetDeposited(\n            depositorAddress,\n            amountTransferrable,\n            amountOfyDai,\n            amountTransferrable\n        );\n    }\n\n    function _deposit(address payable depositorAddress) internal {\n        address recipient = address(this);\n        uint256 amountTransferrable =\n            daiToken.allowance(depositorAddress, recipient);\n\n        require(\n            amountTransferrable > 0,\n            \"Approve an amount > 0 for token before proceeding\"\n        );\n        bool isSuccessful =\n            daiToken.transferFrom(\n                depositorAddress,\n                recipient,\n                amountTransferrable\n            );\n        require(\n            isSuccessful,\n            \"Could not complete deposit process from token contract\"\n        );\n\n        LendingAdapterAddress = lendingService.GetDaiLendingAdapterAddress();\n\n        daiToken.approve(LendingAdapterAddress, amountTransferrable);\n\n        uint256 balanceBeforeDeposit = lendingService.userShares();\n\n        lendingService.save(amountTransferrable);\n\n        uint256 balanceAfterDeposit = lendingService.userShares();\n\n        uint256 amountOfyDai = balanceAfterDeposit.sub(balanceBeforeDeposit);\n        ClientRecord memory clientRecord =\n            _updateClientRecordAfterDeposit(\n                depositorAddress,\n                amountTransferrable,\n                amountOfyDai\n            );\n\n        bool exists =\n            clientRecordStorage.doesClientRecordExist(depositorAddress);\n\n        if (exists) _updateClientRecord(clientRecord);\n        else {\n            clientRecordStorage.createClientRecord(\n                clientRecord._address,\n                clientRecord.underlyingTotalDeposits,\n                clientRecord.underlyingTotalWithdrawn,\n                clientRecord.derivativeBalance,\n                clientRecord.derivativeTotalDeposits,\n                clientRecord.derivativeTotalWithdrawn\n            );\n        }\n\n        emit UnderlyingAssetDeposited(\n            depositorAddress,\n            amountTransferrable,\n            amountOfyDai,\n            clientRecord.derivativeBalance\n        );\n    }\n\n    function _updateClientRecordAfterDeposit(\n        address payable client,\n        uint256 underlyingAmountDeposited,\n        uint256 derivativeAmountDeposited\n    ) internal returns (ClientRecord memory) {\n        bool exists = clientRecordStorage.doesClientRecordExist(client);\n        if (!exists) {\n            ClientRecord memory record =\n                ClientRecord(\n                    true,\n                    client,\n                    underlyingAmountDeposited,\n                    0,\n                    derivativeAmountDeposited,\n                    derivativeAmountDeposited,\n                    0\n                );\n\n            return record;\n        } else {\n            ClientRecord memory record = _getClientRecordByAddress(client);\n\n            record.underlyingTotalDeposits = record.underlyingTotalDeposits.add(\n                underlyingAmountDeposited\n            );\n            record.derivativeTotalDeposits = record.derivativeTotalDeposits.add(\n                derivativeAmountDeposited\n            );\n            record.derivativeBalance = record.derivativeBalance.add(\n                derivativeAmountDeposited\n            );\n\n            return record;\n        }\n    }\n\n    function _updateClientRecordAfterWithdrawal(\n        address payable client,\n        uint256 underlyingAmountWithdrawn,\n        uint256 derivativeAmountWithdrawn\n    ) internal returns (ClientRecord memory) {\n        ClientRecord memory record = _getClientRecordByAddress(client);\n\n        record.underlyingTotalWithdrawn = record.underlyingTotalWithdrawn.add(\n            underlyingAmountWithdrawn\n        );\n\n        record.derivativeTotalWithdrawn = record.derivativeTotalWithdrawn.add(\n            derivativeAmountWithdrawn\n        );\n\n        record.derivativeBalance = record.derivativeBalance.sub(\n            derivativeAmountWithdrawn\n        );\n\n        return record;\n    }\n\n    function _updateClientRecord(ClientRecord memory clientRecord) internal {\n        clientRecordStorage.updateClientRecord(\n            clientRecord._address,\n            clientRecord.underlyingTotalDeposits,\n            clientRecord.underlyingTotalWithdrawn,\n            clientRecord.derivativeBalance,\n            clientRecord.derivativeTotalDeposits,\n            clientRecord.derivativeTotalWithdrawn\n        );\n    }\n\n    function _emitXendTokenReward(address payable member, uint256 amount)\n        internal\n    {\n        emit XendTokenReward(now, member, amount);\n    }\n\n    function _rewardUserWithTokens(\n        uint256 totalLockPeriod,\n        uint256 amountDeposited,\n        address payable recipient\n    ) internal {\n        uint256 numberOfRewardTokens =\n            rewardConfig.CalculateIndividualSavingsReward(\n                totalLockPeriod,\n                amountDeposited\n            );\n\n        if (numberOfRewardTokens > 0) {\n            xendToken.mint(recipient, numberOfRewardTokens);\n            _UpdateMemberToXendTokeRewardMapping(\n                recipient,\n                numberOfRewardTokens\n            );\n             //  increase the total number of xend token rewards distributed\n            _totalTokenReward = _totalTokenReward.add(numberOfRewardTokens);\n            _emitXendTokenReward(recipient, numberOfRewardTokens);\n        }\n    }\n\n    modifier onlyNonDeprecatedCalls() {\n        require(!isDeprecated, \"Service contract has been deprecated\");\n        _;\n    }\n}\n"}}}