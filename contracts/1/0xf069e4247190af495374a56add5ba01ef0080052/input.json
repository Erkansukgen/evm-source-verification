{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/distibution_v_3.sol": {
      "content": "pragma solidity 0.6.7;\r\n\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(msg.sender), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _isOwner(address account) internal view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Distribution is Ownable {\r\n\r\n    event Total(address tokenAddress, uint256 arrayLength, uint256 totalAmount);\r\n\r\n    function transferToken1(IERC20 token, address[] memory recipients, uint256[] memory values) public onlyOwner {\r\n        uint256 i;\r\n        for (i; i < recipients.length; i++) {\r\n            token.transfer(recipients[i], values[i]);\r\n        }\r\n        emit Total(address(token), recipients.length, i);\r\n    }\r\n\r\n    function transferToken2(IERC20 token, address[] memory recipients, uint256 value) public onlyOwner {\r\n        uint256 i;\r\n        for (i; i < recipients.length; i++) {\r\n            token.transfer(recipients[i], value);\r\n        }\r\n        emit Total(address(token), recipients.length, i);\r\n    }\r\n\r\n    function getSum(uint256[] memory values) public pure returns(uint256) {\r\n        uint256 totalValue;\r\n        for (uint256 i = 0; i < values.length; i++) {\r\n            totalValue += values[i];\r\n        }\r\n        return totalValue;\r\n    }\r\n\r\n    function getContractBalanceOf(address tokenAddr) public view returns(uint256) {\r\n        return IERC20(tokenAddr).balanceOf(address(this));\r\n    }\r\n\r\n    function getBalanceOf(address tokenAddr, address account) public view returns(uint256) {\r\n        return IERC20(tokenAddr).balanceOf(account);\r\n    }\r\n\r\n}\r\n"
    }
  }
}