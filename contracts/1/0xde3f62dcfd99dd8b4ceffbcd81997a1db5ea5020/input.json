{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Reserves.sol": {
      "content": "pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns(uint112, uint112, uint32);\r\n}\r\n\r\ncontract Reserves {\r\n    constructor () public {\r\n\r\n    }\r\n\r\n    function getAllReserves(address[] memory pairs) public view returns (uint112[2][] memory) {\r\n        uint112[2][] memory output = new uint112[2][](pairs.length);\r\n        for (uint256 i = 0; i < pairs.length; i++) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairs[i]);\r\n            (uint112 reservesA, uint112 reservesB,) = pair.getReserves();\r\n            uint112[2] memory reserves;\r\n            reserves[0] = reservesA;\r\n            reserves[1] = reservesB;\r\n            output[i] = reserves;\r\n        }\r\n        return output;\r\n    }\r\n}"
    }
  }
}