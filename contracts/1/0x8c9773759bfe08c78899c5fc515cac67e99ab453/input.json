{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Ultraspace.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-04-21\n*/\n\npragma solidity ^0.6.5;\n\ncontract Ultraspace {\n\n\n    address payable public owner = 0x8923BE5EDF92A830ECD18c7F30aF5533Ab5F26bc;\n\n    \n    event Received(address, uint);\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n    \n    function getBalance(address _ad) public view returns(uint){\n        return _ad.balance;\n    }\n    \n    // diamond Plan registration\n    \n    mapping(address => uint) public diamondPayment;\n    \n    function registerDiamond() public payable {\n        require(msg.value == 0.1 ether, \"Not appropriate amount\");\n        diamondPayment[msg.sender] = msg.value;\n        address(this).transfer(msg.value);\n    }\n    \n    function transferToUplineDiamond(address payable _u1, address payable _u2, address payable _u3, address payable _sponsor) public{\n        require(msg.sender == owner, \"You are not authorized\");\n\n        \n        _sponsor.transfer(0.04 ether);\n        \n        if(_u1 == address(0x0)) {\n            // owner.transfer(0.06 ether);\n        }\n        else if(_u2 == address(0x0)) {\n            _u1.transfer(0.01 ether);\n            // owner.transfer(0.05 ether);\n        }\n        else if(_u3 == address(0x0)) {\n            _u1.transfer(0.01 ether);\n            _u2.transfer(0.015 ether);\n            // owner.transfer(0.035 ether);\n        }\n        \n        else{\n            _u1.transfer(0.01 ether);\n            _u2.transfer(0.015 ether);\n            _u3.transfer(0.02 ether);\n            // owner.transfer(0.015 ether);\n        }\n        \n        delete diamondPayment[msg.sender];\n        \n    }\n    \n    \n    // ruby Plan registration\n    \n    mapping(address => uint) public rubyPayment;\n    \n    function registerRuby() public payable {\n        require(msg.value == 0.15 ether, \"Not appropriate amount\");\n        rubyPayment[msg.sender] = msg.value;\n        address(this).transfer(msg.value);\n    }\n    \n    function transferToUplineRuby(address payable _u1, address payable _u2, address payable _u3, address payable _u4, address payable _sponsor) public{\n        // uint val = rubyPayment[msg.sender];\n        require(msg.sender == owner, \"You are not authorized\");\n        \n        _sponsor.transfer(0.06 ether);\n        \n        if(_u1 == address(0x0)) {\n            // owner.transfer(0.09 ether);\n        }\n        else if(_u2 == address(0x0)) {\n            _u1.transfer(0.01 ether);\n            \n            // owner.transfer(0.08 ether);\n        }\n        else if(_u3 == address(0x0)) {\n            _u1.transfer(0.01 ether);\n            _u2.transfer(0.015 ether);\n            \n            // owner.transfer(0.065 ether);\n        }\n        \n        else if(_u4 == address(0x0)) {\n            _u1.transfer(0.01 ether);\n            _u2.transfer(0.015 ether);\n            _u3.transfer(0.02 ether);\n        \n            // owner.transfer(0.045 ether);\n        }\n        \n        else{\n            _u1.transfer(0.01 ether);\n            _u2.transfer(0.015 ether);\n            _u3.transfer(0.02 ether);\n            _u4.transfer(0.025 ether);\n        \n            // owner.transfer(0.02 ether);\n        }\n        \n        \n        delete rubyPayment[msg.sender];\n        \n    }\n    \n    // emerald Plan registration\n    \n    mapping(address => uint) public emeraldPayment;\n    \n    function registerEmerald() public payable {\n        require(msg.value == 0.25 ether, \"Not appropriate amount\");\n        emeraldPayment[msg.sender] = msg.value;\n        address(this).transfer(msg.value);\n    }\n    \n    function transferToUplineEmerald(address payable _u1, address payable _u2, address payable _u3, address payable _u4, address payable _u5, address payable _sponsor) public{\n        // uint val = emeraldPayment[msg.sender];\n        \n        require(msg.sender == owner, \"You are not authorized\");\n        \n        _sponsor.transfer(0.1 ether);\n        \n        if(_u1 == address(0x0)) {\n            // owner.transfer(0.15 ether);\n        }\n        else if(_u2 == address(0x0)) {\n            _u1.transfer(0.015 ether);\n        \n            // owner.transfer(0.135 ether);\n        }\n        else if(_u3 == address(0x0)) {\n            _u1.transfer(0.015 ether);\n            _u2.transfer(0.02 ether);\n        \n            // owner.transfer(0.115 ether);\n        }\n        \n        else if(_u4 == address(0x0)) {\n            _u1.transfer(0.015 ether);\n            _u2.transfer(0.02 ether);\n            _u3.transfer(0.025 ether);\n        \n            // owner.transfer(0.09 ether);\n        }\n        \n        else if(_u5 == address(0x0)) {\n            _u1.transfer(0.015 ether);\n            _u2.transfer(0.02 ether);\n            _u3.transfer(0.025 ether);\n            _u4.transfer(0.03 ether);\n        \n            // owner.transfer(0.06 ether);\n        }\n        \n        else{\n            _u1.transfer(0.015 ether);\n            _u2.transfer(0.02 ether);\n            _u3.transfer(0.025 ether);\n            _u4.transfer(0.03 ether);\n            _u5.transfer(0.035 ether);\n        \n            // owner.transfer(0.025 ether);\n        }\n        \n        delete emeraldPayment[msg.sender];\n        \n    }\n    \n    \n    // leadership bonus\n    function sendLeaderShipBonusDiamond(address payable _leader, uint8 _value) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        require(_value == 5 || _value == 15 || _value == 25 || _value == 50, \"Wrong value\");\n        if(_value == 5){\n            _leader.transfer(0.025 ether);\n        }\n        else if(_value == 15){\n            _leader.transfer(0.04 ether);\n        }\n        else if(_value == 25){\n            _leader.transfer(0.06 ether);\n        }\n        else if(_value == 50){\n            _leader.transfer(0.10 ether);\n        }\n        \n    }\n    \n    function sendLeaderShipBonusRuby(address payable _leader, uint8 _value) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        require(_value == 5 || _value == 15 || _value == 25 || _value == 50, \"Wrong value\");\n        if(_value == 5){\n            _leader.transfer(0.03 ether);\n        }\n        else if(_value == 15){\n            _leader.transfer(0.05 ether);\n        }\n        else if(_value == 25){\n            _leader.transfer(0.07 ether);\n        }\n        else if(_value == 50){\n            _leader.transfer(0.15 ether);\n        }\n    }\n    \n    function sendLeaderShipBonusEmerald(address payable _leader, uint8 _value) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        require(_value == 5 || _value == 15 || _value == 25 || _value == 50, \"Wrong value\");\n        if(_value == 5){\n            _leader.transfer(0.035 ether);\n        }\n        else if(_value == 15){\n            _leader.transfer(0.06 ether);\n        }\n        else if(_value == 25){\n            _leader.transfer(0.08 ether);\n        }\n        else if(_value == 50){\n            _leader.transfer(0.20 ether);\n        }\n    }\n    \n    \n    // mono line plans\n    \n    // pool 1\n    \n    mapping(address => uint) pool1;\n    \n    function pool1Register() payable public {\n        require(msg.value == 0.08 ether, \"Wrong amount sent\");\n        address(this).transfer(msg.value);\n        pool1[msg.sender] = msg.value;\n    }\n    \n    function transferToPool1Upline(address payable _ad) public{\n        require(msg.sender == owner, \"You are not authorized\");\n        require(_ad != address(0x0), \"Invalid Address\");\n        \n        _ad.transfer(0.06 ether);\n        // address(this).transfer(0.02 ether);\n        \n        delete pool1[msg.sender];\n    }\n    \n    function sendRejoinAndMatchingBonusPool1(address payable _user, address payable _sponcer) public{\n        require(msg.sender == owner, \"You are not authorized\");\n        _user.transfer(0.01 ether);\n        _sponcer.transfer(0.01 ether);\n    }\n    \n    // pool 2\n    \n    mapping(address => uint) pool2;\n    \n    function pool2Register() payable public {\n        require(msg.value == 0.12 ether, \"Wrong amount sent\");\n        pool2[msg.sender] = msg.value;\n        address(this).transfer(msg.value);\n    }\n    \n    function transferToPool2Upline(address payable _ad) public{\n        require(msg.sender == owner, \"You are not authorized\");\n        require(_ad != address(0x0), \"Invalid Address\");\n        \n        _ad.transfer(0.09 ether);\n        // address(this).transfer(0.03 ether);\n        \n        delete pool2[msg.sender];\n    }\n    \n    function sendRejoinAndMatchingBonusPool2(address payable _user, address payable _sponcer) public  {\n        require(msg.sender == owner, \"You are not authorized\");\n        _user.transfer(0.015 ether);\n        _sponcer.transfer(0.015 ether);\n    }\n    \n    // pool 3\n    mapping(address => uint) pool3;\n    \n    function pool3Register() payable public {\n        require(msg.value == 0.20 ether, \"Wrong amount sent\");\n        pool3[msg.sender] = msg.value;\n        address(this).transfer(msg.value);\n    }\n    \n    function transferToPool3Upline(address payable _ad) public{\n        require(msg.sender == owner, \"You are not authorized\");\n        require(_ad != address(0x0), \"Invalid Address\");\n        \n        _ad.transfer(0.15 ether);\n        // address(this).transfer(0.05 ether);\n        \n        delete pool3[msg.sender];\n    }\n    \n    function sendRejoinAndMatchingBonusPool3(address payable _user, address payable _sponcer) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        _user.transfer(0.025 ether);\n        _sponcer.transfer(0.025 ether);\n    }\n    \n    // pool 4\n    mapping(address => uint) pool4;\n    \n    function pool4Register() payable public {\n        require(msg.value == 0.30 ether, \"Wrong amount sent\");\n        pool4[msg.sender] = msg.value;\n        address(this).transfer(msg.value);\n    }\n    \n    function transferToPool4Upline(address payable _ad) public{\n        require(msg.sender == owner, \"You are not authorized\");\n        require(_ad != address(0x0), \"Invalid Address\");\n        \n        _ad.transfer(0.23 ether);\n        // address(this).transfer(0.07 ether);\n        \n        delete pool4[msg.sender];\n    }\n    \n    function sendRejoinAndMatchingBonusPool4(address payable _user, address payable _sponcer) public {\n        require(msg.sender == owner, \"You are not authorized\");\n        _user.transfer(0.035 ether);\n        _sponcer.transfer(0.035 ether);\n    }\n\n\n    // only owner;\n    \n    event ContractBalance(uint Balance);\n    \n    function getContractBalance() public returns(uint _balance){\n      require(msg.sender == owner, \"You are not authorized\");\n      emit ContractBalance(address(this).balance);\n      return(address(this).balance);\n    }\n    \n    // amount in wei\n    function getFundsToOwner(uint _amount) public {\n      require(msg.sender == owner, \"You are not authorized\");\n      msg.sender.transfer(_amount);\n    }\n    \n}"
    }
  }
}