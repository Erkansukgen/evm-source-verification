{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ERC20Standard.sol":{"content":"pragma solidity ^0.5.1;\r\n//区块链技术服务+手机号/微信：19933104907\r\ncontract ERC20Standard {\r\n    using SafeMath for uint256;\r\n\tuint256 public totalSupply;\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tstring public symbol;\r\n\taddress public owner;\r\n\r\n\tmapping (address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\r\n\t//Event which is triggered to log all transfers to this contract's event log\r\n\tevent Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint256 _value\r\n\t\t);\r\n\t\t\r\n\t//Event which is triggered whenever an owner approves a new allowance for a spender.\r\n\tevent Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint256 _value\r\n\t\t);\r\n\t\t\r\n   constructor(uint256 _totalSupply, string memory _symbol, string memory _name, uint8 _decimals) public {\r\n\t\tsymbol = _symbol;\r\n\t\tname = _name;\r\n        decimals = _decimals;\r\n\t\towner = msg.sender;\r\n        totalSupply = SafeMath.mul(_totalSupply ,(10 ** uint256(decimals)));\r\n        balances[owner] = totalSupply;\r\n  }\r\n\r\n\tfunction balanceOf(address _owner) view public returns (uint256) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer(address _recipient, uint256 _value)public returns(bool){\r\n\t    require(_recipient!=address(0));\r\n\t\trequire(balances[msg.sender] >= _value && _value >= 0);\r\n\t    require(balances[_recipient].add(_value)>= balances[_recipient]);\r\n\t    balances[msg.sender] = balances[msg.sender].sub(_value) ;\r\n\t    balances[_recipient] = balances[_recipient].add(_value) ;\r\n\t    emit Transfer(msg.sender, _recipient, _value);  \r\n\t    return true;\r\n    }\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns(bool){\r\n\t    require(_to!=address(0));\r\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0);\r\n\t\trequire(balances[_to].add(_value) >= balances[_to]);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value) ;\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value) ;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns(bool){\r\n\t    require((_value==0)||(allowed[msg.sender][_spender]==0));\r\n    \tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) view public returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;} uint256 c = a * b; assert(c / a == b); return c;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a / b; return c;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a); return a - b;}\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b; assert(c >= a); return c;}\r\n}"}}}