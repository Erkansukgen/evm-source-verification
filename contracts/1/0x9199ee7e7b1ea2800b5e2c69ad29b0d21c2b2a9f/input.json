{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/dgovnburnamint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >0.6.0;\n\n\ncontract Token {\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){}\n    function decimals() public view returns (uint8){}\n}\n\n\ncontract Burnamint {\n\n    mapping (address => bool) private admins;\n\n    mapping (address => mapping (address => mapping (bool => uint256))) private burnamintable;\n\n    address public owner;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    event BurnaMint(address indexed _oldToken, address indexed _newToken, address indexed _address, uint256 _oldValue, uint256 newValue);\n\n    constructor() {\n        owner = msg.sender;\n        admins[msg.sender] = true;\n    }\n\n    function addAdmin(address _admin) external onlyOwner{\n        admins[_admin] = true;\n    }\n\n    function removeAdmin(address _admin) external onlyOwner{\n        admins[_admin] = false;\n    }\n\n    function isAdmin(address _admin) external view returns(bool _isAdmin){\n        return admins[_admin];\n    }\n\n    function addBurnamintable(address _oldContractAddress, address _newContractAddress, bool inversed, uint256 _ratio)\n    external\n    onlyAdmin\n    returns (bool success){\n        require(burnamintable[_oldContractAddress][_newContractAddress][inversed] == 0, \"Tokens are not burnamintables\");\n        burnamintable[_oldContractAddress][_newContractAddress][inversed] = _ratio;\n        return true;\n    }\n    \n    function resetBurnamintable(address _oldContractAddress, address _newContractAddress, bool inversed, uint256 _ratio)\n    external\n    onlyOwner\n    returns (bool success){\n        burnamintable[_oldContractAddress][_newContractAddress][inversed] = _ratio;\n        return true;\n    }\n\n    function burnamint(address _oldContractAddress, address _newContractAddress, bool inversed, address payable _receiver, uint256 _amount)\n    external payable returns(bool success){\n        uint256 ratio = burnamintable[_oldContractAddress][_newContractAddress][inversed];\n        require(ratio > 0, \"Tokens are not burnamintables\");\n        Token oldToken = Token(_oldContractAddress);\n        \n        if(_oldContractAddress == address(0)){\n            require(msg.value == _amount);\n        }else {\n            require(oldToken.transferFrom(msg.sender, address(this), _amount)); // use safetransfer from\n        }\n        uint256 oldTokenDecimals = getTokenDecimals(_oldContractAddress);\n        uint256 newTokenDecimals = getTokenDecimals(_newContractAddress);\n        uint256 _value = _amount * 10**(newTokenDecimals+18-oldTokenDecimals);\n        if(inversed){\n            uint256 value0 = (_value*ratio)/10**18;\n            (Token(_newContractAddress)).transfer(_receiver, value0);\n            emit BurnaMint(_oldContractAddress, _newContractAddress, _receiver, _amount, value0);\n            return true;\n        }\n        uint256 value = (_value/ratio)/10**18;\n        (Token(_newContractAddress)).transfer(_receiver, value);\n        emit BurnaMint(_oldContractAddress, _newContractAddress, _receiver, _amount, value);\n        return true;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Caller is not the owner\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(admins[msg.sender], \"Caller is not the owner\");\n        _;\n    }\n\n    function withdrawToken(address _token, address _to, uint256 _value) external onlyOwner returns (bool success){\n        Token(_token).transfer(_to, _value);\n        return true;\n    }\n\n    function getTokenDecimals(address _token) public view returns (uint256 decimals){\n        if(_token == address(0)){\n            return 18;\n        }\n        return uint256(Token(_token).decimals());\n    }\n    \n    function withdraw(address payable _to, uint256 _value) external onlyOwner returns (bool success){\n        _to.transfer(_value);\n        return true;\n    }\n\n    function destroy(address payable _to) external onlyOwner {\n        selfdestruct(_to);\n    }\n}\n"
    }
  }
}