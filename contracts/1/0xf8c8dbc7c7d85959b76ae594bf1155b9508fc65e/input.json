{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/hETHVault.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call{ value : amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract hETHVault {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n    \n    uint256 public totalDeposit;\n    string public vaultName;\n    address payable public vaultAddress;\n    address payable public feeAddress;\n    address payable public devAddress;\n    uint32 public feePermill = 0;\n    address public gov;\n    \n    event Deposited(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount, uint256 feeAmount);\n    \n    constructor (address payable _vaultAddress, address payable _feeAddress, address payable _devAddress, string memory _vaultName) {\n        vaultAddress = _vaultAddress;\n        feeAddress = _feeAddress;\n        devAddress = _devAddress;\n        vaultName = _vaultName;\n        gov = msg.sender;\n    }\n    \n    modifier onlyGov() {\n        require(msg.sender==gov, \"!governance\");\n        _;\n    }\n    \n    modifier onlyVault() {\n        require(msg.sender==vaultAddress, \"!vault\");\n        _;\n    }\n    \n    modifier onlyDev() {\n        require(msg.sender==devAddress, \"!developer\");\n        _;\n    }\n    \n    function setGovernance(address _gov)\n        external\n        onlyGov\n    {\n        gov = _gov;\n    }\n    \n    function setVaultAddress(address payable _vaultAddress)\n        external\n        onlyGov\n    {\n        vaultAddress = _vaultAddress;\n    }\n    \n    function setFeeAddress(address payable _feeAddress)\n        external\n        onlyGov\n    {\n        feeAddress = _feeAddress;\n    }\n    \n    function setDevAddress(address payable _devAddress)\n        external\n        onlyGov\n    {\n        devAddress = _devAddress;\n    }\n    \n    function setVaultName(string memory _vaultName)\n        external\n        onlyGov\n    {\n        vaultName = _vaultName;\n    }\n    \n    function deposit() external payable {\n        require(msg.value > 0, \"can't deposit 0\");\n        uint256 _amount = msg.value;\n        \n        uint256 _feeAmount = _amount.mul(feePermill).div(100000);\n        uint256 _realAmount = _amount.sub(_feeAmount);\n        \n        if (!feeAddress.send(_feeAmount)) {\n            feeAddress.transfer(_feeAmount);\n        }\n        if (!vaultAddress.send(_realAmount)) {\n            vaultAddress.transfer(_realAmount);\n        }\n        \n        totalDeposit = totalDeposit.add(_realAmount);\n        emit Deposited(msg.sender, _realAmount);\n    }\n    \n    function withdraw(uint256 _feeAmount, address payable _receiverAddress)\n        external payable\n        onlyVault\n    {\n        require(msg.value > 0, \"can't withdraw 0\");\n        require(_feeAmount <= msg.sender.balance, \"can't withdraw this amount\");\n        \n        if (!_receiverAddress.send(msg.value)) {\n            _receiverAddress.transfer(msg.value);\n        }\n        \n        totalDeposit = totalDeposit.sub(_feeAmount).sub(msg.value);\n        emit Withdrawn(_receiverAddress, msg.value, _feeAmount);\n    }\n    \n    function cleanGarbage()\n        external \n        onlyGov\n    {\n        uint256 saveBalance = address(this).balance;\n        if (saveBalance > 0) {\n            if (!devAddress.send(saveBalance)) {\n                devAddress.transfer(saveBalance);\n            }\n        }\n    }\n}"}}}