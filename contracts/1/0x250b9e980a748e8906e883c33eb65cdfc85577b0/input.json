{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/test.sol": {
      "content": "\n\n// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.7;\n\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * C U ON THE MOON\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract DogeMan is IERC20, Ownable {\n    using Address for address;\n    \n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n\n    string constant _name = \"arale\";\n    string constant _symbol = \"ARL\";\n    uint8 constant _decimals = 9;\n\n    uint256 _totalSupply = 100_000_000_000 * (10 ** _decimals);\n    uint256 _maxBuyTxAmount = (_totalSupply * 1) / 2000;\n    uint256 _maxSellTxAmount = (_totalSupply * 1) / 500;\n    uint256 _maxWalletSize = (_totalSupply * 2) / 100;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowances;\n    mapping (address => uint256) public lastSell;\n    mapping (address => uint256) public lastBuy;\n\n    mapping (address => bool) isFeeExempt;\n    mapping (address => bool) isTxLimitExempt;\n    mapping (address => bool) liquidityCreator;\n\n    uint256 developerFee = 0;\n    uint256 marketingFee = 700;\n    uint256 liquidityFee = 200;\n    uint256 buybackFee = 0;\n    uint256 totalFee = marketingFee + buybackFee + liquidityFee + developerFee;\n    uint256 sellBias = 0;\n    uint256 feeDenominator = 10000;\n\n    address payable public liquidityFeeReceiver = payable(0xc606d66AB3E7a21Bf8b325BfcD15c250Cf8E1Dc4);\n    address payable public marketingFeeReceiver = payable(0x6B09F23704405d99E466019AD3dBE0bD9af324c2);\n    address payable public developer;\n\n    IDEXRouter public router;\n    //address routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\n    //address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    mapping (address => bool) liquidityPools;\n    mapping (address => uint256) public protected;\n    bool protectionEnabled = true;\n    bool protectionDisabled = false;\n    uint256 protectionLimit;\n    uint256 public protectionCount;\n    uint256 protectionTimer;\n\n    address public pair;\n\n    uint256 public launchedAt;\n    uint256 public launchedTime;\n    uint256 public deadBlocks;\n    bool startBullRun = false;\n    bool pauseDisabled = false;\n    uint256 public rateLimit = 2;\n    bool protectionEnded = false;\n\n    bool public swapEnabled = true;\n    bool processEnabled = true;\n    uint256 public swapThreshold = _totalSupply / 1000;\n    uint256 public swapMinimum = _totalSupply / 10000;\n    bool inSwap;\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n    \n    mapping (address => bool) teamMember;\n    \n    modifier onlyTeam() {\n        require(teamMember[_msgSender()] || msg.sender == owner(), \"Caller is not a team member\");\n        _;\n    }\n    \n    event ProtectedWallet(address, address, uint256, uint8);\n\n    constructor () {\n        router = IDEXRouter(routerAddress);\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\n        liquidityPools[pair] = true;\n        _allowances[owner()][routerAddress] = type(uint256).max;\n        _allowances[address(this)][routerAddress] = type(uint256).max;\n\n        isFeeExempt[owner()] = true;\n        liquidityCreator[owner()] = true;\n\n        isTxLimitExempt[address(this)] = true;\n        isTxLimitExempt[owner()] = true;\n        isTxLimitExempt[routerAddress] = true;\n        isTxLimitExempt[DEAD] = true;\n\n        _balances[owner()] = _totalSupply;\n        developer = payable(msg.sender);\n        emit Transfer(address(0), owner(), _totalSupply);\n    }\n\n    receive() external payable { }\n\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n    function decimals() external pure returns (uint8) { return _decimals; }\n    function symbol() external pure returns (string memory) { return _symbol; }\n    function name() external pure returns (string memory) { return _name; }\n    function getOwner() external view returns (address) { return owner(); }\n    function maxBuyTxTokens() external view returns (uint256) { return _maxBuyTxAmount / (10 ** _decimals); }\n    function maxSellTxTokens() external view returns (uint256) { return _maxSellTxAmount / (10 ** _decimals); }\n    function maxWalletTokens() external view returns (uint256) { return _maxWalletSize / (10 ** _decimals); }\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n    \n    function setTeamMember(address _team, bool _enabled) external onlyOwner {\n        teamMember[_team] = _enabled;\n    }\n    \n    function airdrop(address[] calldata addresses, uint256[] calldata amounts) external onlyOwner {\n        require(addresses.length > 0 && amounts.length == addresses.length);\n        address from = msg.sender;\n\n        for (uint i = 0; i < addresses.length; i++) {\n            if(!liquidityPools[addresses[i]] && !liquidityCreator[addresses[i]]) {\n                _basicTransfer(from, addresses[i], amounts[i] * (10 ** _decimals));\n            }\n        }\n    }\n    \n    function buyBack(address token, uint256 amountPercentage) external onlyTeam {\n        uint256 amountETH = (address(this).balance * amountPercentage) / 100;\n        \n        address[] memory path = new address[](2);\n        path[0] = router.WETH();\n        path[1] = token;\n\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountETH}(\n            0,\n            path,\n            msg.sender,\n            block.timestamp\n        );\n    }\n    \n    function rescueToken(address tokenAddress, uint256 tokens) external onlyTeam\n        returns (bool success)\n    {\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\n    }\n    \n    function clearStuckBalance(uint256 amountPercentage, address adr) external onlyTeam {\n        uint256 amountETH = address(this).balance;\n        payable(adr).transfer((amountETH * amountPercentage) / 100);\n    }\n    \n    function openTrading(uint256 _deadBlocks, uint256 _protection, uint256 _limit) external onlyTeam {\n        require(!startBullRun && _deadBlocks < 10);\n        deadBlocks = _deadBlocks;\n        startBullRun = true;\n        launchedAt = block.number;\n        protectionTimer = block.timestamp + _protection;\n        protectionLimit = _limit * (10 ** _decimals);\n    }\n    \n    function pauseTrading() external onlyTeam {\n        require(!pauseDisabled);\n        startBullRun = false;\n    }\n    \n    function disablePause() external onlyTeam {\n        pauseDisabled = true;\n        startBullRun = true;\n    }\n    \n    function setProtection(bool _protect, uint256 _addTime) external onlyTeam {\n        require(!protectionDisabled);\n        protectionEnabled = _protect;\n        require(_addTime < 1 days);\n        protectionTimer += _addTime;\n    }\n    \n    function disableProtection() external onlyTeam {\n        protectionDisabled = true;\n        protectionEnabled = false;\n    }\n    \n    function protectWallet(address[] calldata _wallets, bool _protect) external onlyTeam {\n        if (_protect) {\n            require(protectionEnabled);\n        }\n        \n        for (uint i = 0; i < _wallets.length; i++) {\n            \n            if (_protect) {\n                protectionCount++;\n                emit ProtectedWallet(tx.origin, _wallets[i], block.number, 2);\n            }\n            else {\n                if (protected[_wallets[i]] != 0)\n                    protectionCount--;      \n            }\n            protected[_wallets[i]] = _protect ? block.number : 0;\n        }\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if(_allowances[sender][msg.sender] != type(uint256).max){\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n        require(sender != address(0), \"BEP20: transfer from 0x0\");\n        require(recipient != address(0), \"BEP20: transfer to 0x0\");\n        require(amount > 0, \"Amount must be > zero\");\n        require(_balances[sender] >= amount, \"Insufficient balance\");\n        if(!launched() && liquidityPools[recipient]){ require(liquidityCreator[sender], \"Liquidity not added yet.\"); launch(); }\n        if(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient], \"Trading not open yet.\"); }\n\n        if (!protectionEnded && protectionTimer <= block.timestamp) {\n            protectionEnded = true;\n            rateLimit = 0;\n            _maxWalletSize = _totalSupply;\n            _maxBuyTxAmount = _totalSupply;\n            _maxSellTxAmount = _totalSupply;\n        }\n\n        checkTxLimit(sender, recipient, amount);\n        \n        if (!liquidityPools[recipient] && recipient != DEAD) {\n            if (!isTxLimitExempt[recipient]) {\n                checkWalletLimit(recipient, amount);\n            }\n        }\n        \n        if(protectionEnabled && protectionTimer > block.timestamp) {\n            if(liquidityPools[sender] && tx.origin != recipient && protected[recipient] == 0) {\n                protected[recipient] = block.number;\n                protectionCount++;\n                emit ProtectedWallet(tx.origin, recipient, block.number, 0);\n            }\n        }\n        \n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\n\n        _balances[sender] = _balances[sender] - amount;\n\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(recipient, amount) : amount;\n        \n        if(shouldSwapBack(recipient)){ if (amount > 0) swapBack(amount); }\n        \n        _balances[recipient] = _balances[recipient] + amountReceived;\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n    \n    function launched() internal view returns (bool) {\n        return launchedAt != 0;\n    }\n\n    function launch() internal {\n        launchedAt = block.number;\n        launchedTime = block.timestamp;\n        swapEnabled = true;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n    \n    function checkWalletLimit(address recipient, uint256 amount) internal view {\n        uint256 walletLimit = _maxWalletSize;\n        require(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\n    }\n\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal {\n        require(isTxLimitExempt[sender] || amount <= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \"TX Limit Exceeded\");\n        require(isTxLimitExempt[sender] || lastBuy[recipient] + rateLimit <= block.number, \"Transfer rate limit exceeded.\");\n        \n        if (protected[sender] != 0){\n            require(amount <= protectionLimit * (10 ** _decimals) && lastSell[sender] == 0 && protectionTimer > block.timestamp, \"Wallet protected, please contact support.\");\n            lastSell[sender] = block.number;\n        }\n        \n        if (liquidityPools[recipient]) {\n            lastSell[sender] = block.number;\n        } else if (shouldTakeFee(sender)) {\n            if (protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0) {\n                protected[recipient] = block.number;\n                emit ProtectedWallet(tx.origin, recipient, block.number, 1);\n            }\n            lastBuy[recipient] = block.number;\n            if (tx.origin != recipient)\n                lastBuy[tx.origin] = block.number;\n        }\n    }\n\n    function shouldTakeFee(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function getTotalFee(bool selling) public view returns (uint256) {\n        if(launchedAt + deadBlocks >= block.number){ return feeDenominator - 1; }\n        if (selling) return totalFee + sellBias;\n        return totalFee - sellBias;\n    }\n\n    function takeFee(address recipient, uint256 amount) internal returns (uint256) {\n        bool selling = liquidityPools[recipient];\n        uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\n        \n        _balances[address(this)] += feeAmount;\n    \n        return amount - feeAmount;\n    }\n\n    function shouldSwapBack(address recipient) internal view returns (bool) {\n        return !liquidityPools[msg.sender]\n        && !inSwap\n        && swapEnabled\n        && liquidityPools[recipient]\n        && _balances[address(this)] >= swapMinimum;\n    }\n\n    function swapBack(uint256 amount) internal swapping {\n        uint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\n        \n        uint256 amountToLiquify = (amountToSwap * liquidityFee / 2) / totalFee;\n        amountToSwap -= amountToLiquify;\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n        \n        uint256 balanceBefore = address(this).balance;\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amountBNB = address(this).balance - balanceBefore;\n        uint256 totalBNBFee = totalFee - (liquidityFee / 2);\n\n        uint256 amountBNBLiquidity = (amountBNB * liquidityFee / 2) / totalBNBFee;\n        uint256 amountBNBMarketing = (amountBNB * marketingFee) / totalBNBFee;\n        uint256 amountBNBDeveloper = (amountBNB * developerFee) / totalBNBFee;\n        \n        if (amountBNBMarketing > 0)\n            marketingFeeReceiver.transfer(amountBNBMarketing);\n        if (amountBNBDeveloper > 0)\n            developer.transfer(amountBNBDeveloper);\n        \n        if(amountToLiquify > 0){\n            router.addLiquidityETH{value: amountBNBLiquidity}(\n                address(this),\n                amountToLiquify,\n                0,\n                0,\n                liquidityFeeReceiver,\n                block.timestamp\n            );\n        }\n\n        emit FundsDistributed(amountBNBLiquidity, amountBNBMarketing, amountBNBDeveloper);\n    }\n    \n    function addLiquidityPool(address lp, bool isPool) external onlyOwner {\n        require(lp != pair, \"Can't alter current liquidity pair\");\n        liquidityPools[lp] = isPool;\n        emit UpdatedSettings(isPool ? 'Liquidity Pool Enabled' : 'Liquidity Pool Disabled', [Log(toString(abi.encodePacked(lp)), 1), Log('', 0), Log('', 0)]);\n    }\n    \n    function switchRouter(address newRouter) external onlyOwner {\n        router = IDEXRouter(newRouter);\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\n        liquidityPools[pair] = true;\n        isTxLimitExempt[newRouter] = true;\n        emit UpdatedSettings('Exchange Router Updated', [Log(concatenate('New Router: ',toString(abi.encodePacked(newRouter))), 1),Log(concatenate('New Liquidity Pair: ',toString(abi.encodePacked(pair))), 1), Log('', 0)]);\n    }\n    \n    function excludePresaleAddresses(address preSaleRouter, address presaleAddress) external onlyOwner {\n        liquidityCreator[preSaleRouter] = true;\n        liquidityCreator[presaleAddress] = true;\n        isTxLimitExempt[preSaleRouter] = true;\n        isTxLimitExempt[presaleAddress] = true;\n        isFeeExempt[preSaleRouter] = true;\n        isFeeExempt[presaleAddress] = true;\n        emit UpdatedSettings('Presale Setup', [Log(concatenate('Presale Router: ',toString(abi.encodePacked(preSaleRouter))), 1),Log(concatenate('Presale Address: ',toString(abi.encodePacked(presaleAddress))), 1), Log('', 0)]);\n    }\n\n    function setRateLimit(uint256 rate) external onlyOwner {\n        require(rate <= 30);\n        rateLimit = rate;\n        emit UpdatedSettings('Purchase Rate Limit', [Log('Blocks', rate), Log('', 0), Log('', 0)]);\n    }\n\n    function setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyOwner {\n        require(buyNumerator > 0 && sellNumerator > 0 && divisor > 0 && divisor <= 10000);\n        _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\n        _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\n        emit UpdatedSettings('Maximum Transaction Size', [Log('Max Buy Tokens', _maxBuyTxAmount / (10 ** _decimals)), Log('Max Sell Tokens', _maxSellTxAmount / (10 ** _decimals)), Log('', 0)]);\n    }\n    \n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\n        emit UpdatedSettings('Maximum Wallet Size', [Log('Tokens', _maxWalletSize / (10 ** _decimals)), Log('', 0), Log('', 0)]);\n    }\n\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\n        isFeeExempt[holder] = exempt;\n        emit UpdatedSettings(exempt ? 'Fees Removed' : 'Fees Enforced', [Log(toString(abi.encodePacked(holder)), 1), Log('', 0), Log('', 0)]);\n    }\n\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\n        isTxLimitExempt[holder] = exempt;\n        emit UpdatedSettings(exempt ? 'Transaction Limit Removed' : 'Transaction Limit Enforced', [Log(toString(abi.encodePacked(holder)), 1), Log('', 0), Log('', 0)]);\n    }\n\n    function setFees(uint256 _buybackFee, uint256 _liquidityFee, uint256 _marketingFee, uint256 _developerFee, uint256 _sellBias, uint256 _feeDenominator) external onlyOwner {\n        buybackFee = _buybackFee;\n        liquidityFee = _liquidityFee;\n        marketingFee = _marketingFee;\n        developerFee = _developerFee;\n        totalFee = _buybackFee + _marketingFee + _liquidityFee + _developerFee;\n        sellBias = _sellBias;\n        feeDenominator = _feeDenominator;\n        require(totalFee < feeDenominator / 2);\n        emit UpdatedSettings('Fees', [Log('Total Fee Percent', totalFee * 100 / feeDenominator), Log('Marketing Percent', _marketingFee * 100 / feeDenominator), Log('Liquidity Percent', _liquidityFee * 100 / feeDenominator)]);\n    }\n\n    function setFeeReceivers(address _liquidityFeeReceiver, address _marketingFeeReceiver, address _developer) external onlyOwner {\n        liquidityFeeReceiver = payable(_liquidityFeeReceiver);\n        marketingFeeReceiver = payable(_marketingFeeReceiver);\n        developer = payable(_developer);\n        emit UpdatedSettings('Fee Receivers', [Log(concatenate('Liquidity Receiver: ',toString(abi.encodePacked(_liquidityFeeReceiver))), 1),Log(concatenate('Marketing Receiver: ',toString(abi.encodePacked(_marketingFeeReceiver))), 1), Log(concatenate('Dev Receiver: ',toString(abi.encodePacked(_developer))), 1)]);\n    }\n\n    function setSwapBackSettings(bool _enabled, bool _processEnabled, uint256 _denominator, uint256 _swapMinimum) external onlyOwner {\n        require(_denominator > 0);\n        swapEnabled = _enabled;\n        processEnabled = _processEnabled;\n        swapThreshold = _totalSupply / _denominator;\n        swapMinimum = _swapMinimum * (10 ** _decimals);\n        emit UpdatedSettings('Swap Settings', [Log('Enabled', _enabled ? 1 : 0),Log('Swap Maximum', swapThreshold), Log('Auto-processing', _processEnabled ? 1 : 0)]);\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\n    }\n\t\n\tfunction toString(bytes memory data) internal pure returns(string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n    \n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint i = 0; i < data.length; i++) {\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\n        }\n        return string(str);\n    }\n    \n    function concatenate(string memory a, string memory b) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b));\n    }\n\n\tstruct Log {\n\t    string name;\n\t    uint256 value;\n\t}\n\n    event FundsDistributed(uint256 charityBNB, uint256 marketingBNB, uint256 devBNB);\n    event UpdatedSettings(string name, Log[3] values);\n    //C U ON THE MOON\n}"
    }
  }
}