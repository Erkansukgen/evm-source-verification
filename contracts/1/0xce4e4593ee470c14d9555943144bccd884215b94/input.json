{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MARKET.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.5;\r\ninterface OX{function mint(address w,uint256 a)external returns(bool);function burn(address w,uint256 a)external returns(bool);}\r\ncontract MARKET{modifier o{require(_o==msg.sender);_;}address private _o;address private st;address public ro;uint256 public rt;\r\nfunction srt(uint256 i)external o{rt=i;}function sst(address a)external o{st=a;}function sro(address a)external o{ro=a;}\r\nfunction esc(address w)external payable returns(bool){require(msg.value>=10**15);uint256 g=msg.value*(10**18)/rt;\r\nrequire(OX(ro).mint(w,g)&&OX(ro).burn(st,g));return true;}function exp()external o{_tp(_o).transfer(address(this).balance);}\r\nfunction _tp(address a)internal pure returns(address payable){return address(uint160(a));}\r\nfallback()external{revert();}constructor(){_o=msg.sender;rt=3*(10**16);}}"
    }
  }
}