{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/LOCK Presale Public.sol":{"content":"pragma solidity 0.7.0;\n\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract LOCKPreSale  {\n    using SafeMath for uint256;\n\n    uint256 constant MIN_BUY = 1 * 10**18;\n    uint256 constant MAX_BUY = 100 * 10**18;\n    uint256 constant  PRICE = 116 * 10**13;\n    uint256 public  HARD_CAP = 700 * 10**18 ;\n\n    address payable  receiver ;\n \n    uint256 public totalSold   = 0;\n    uint256 public totalRaised = 0;\n\n    event onBuy(address buyer , uint256 amount);\n\n    mapping(address => uint256) public boughtOf;\n\n    constructor() public {\n      receiver = msg.sender;\n    }\n\n    function buyToken() public payable {\n        require(msg.value >= MIN_BUY , \"MINIMUM IS 1 ETH\");\n        require(msg.value <= MAX_BUY , \"MAXIMUM IS 15 ETH\");\n        require(totalRaised + msg.value <= HARD_CAP , \"HARD CAP REACHED\");\n\n        uint256 amount = (msg.value.div(PRICE)) * 10 ** 18;\n\n        boughtOf[msg.sender] += amount;\n        totalSold += amount;\n        totalRaised += msg.value;\n        \n        receiver.transfer(msg.value);\n\n        emit onBuy(msg.sender , amount);\n    }\n\n}"}}}