{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/VP.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n/** EthereumStake.Farm ETH 2.0 Validation pool\n *  \n * This contract is our V1 pool for ETH 2.0 Phase 0. There are some important things\n * you should be aware of before depositing to this pool:\n * - Currently this pool is custodial and centralized.\n * - Phase 0 of ETH 2.0 doesn't yet support withdrawals.\n * - This pool requires depositors to have some staked ETHYS.\n * \n * When ETH 2.0 support withdrawing to smart contracts we will upgrade the pool.\n * You will be able to import your EVPS-V1 tokens into the decentralized system\n * once it is avaliable.\n *\n * \n * Until we can migrate to a decentralized solution (when ETH 2.0 Supports this) the \n * _owner address will have an incredible amount of power within this contract.\n *  \n */\n\npragma experimental ABIEncoderV2;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IStakingPool {\n    struct StakeInfo {\n        uint256 reward;\n        uint256 initial;\n        uint256 stakePayday;\n        uint256 startday;\n    }\n\n    function stakes(address addr) external view returns (StakeInfo memory);\n}\n\n// ETHYS Validator Pool Deposits Version 1\ncontract EthysV1ValidatorPool is Ownable {\n    using SafeMath for uint256;\n\n    IStakingPool public stakingPool;\n    uint256 public minimumStakeRatio = 1e18;\n    uint256 public minimumDeposit = 1e15;\n    uint256 public maximumDeposits = 32e18;\n    uint256 public totalDeposits = 0;\n\n    address public withdrawer;\n\n    struct UserInfo {\n        uint256 stakeUtilized;\n        uint256 stake;\n        uint256 stakePayday;\n\n        uint256 deposit;\n        uint256 depositDate;\n    }\n\n    mapping(address => UserInfo) public user;\n    \n    constructor(address _stakingPool) public { \n        stakingPool = IStakingPool(_stakingPool);\n    }\n\n    // Calculates the minimum stake required for a given eth deposit.\n    function calculateMinimumStakeFor(uint256 _wei) public view returns(uint256) {\n        return _wei.mul(minimumStakeRatio).div(1e18);\n    }\n\n    function _syncUser(address addr) internal {\n        UserInfo storage u = user[addr];\n        // OPnly update expired stakes:\n        if (block.timestamp < u.stakePayday) return;\n        // Fetch stake info\n        IStakingPool.StakeInfo memory info = stakingPool.stakes(addr);\n        // Update user info with new stake info\n        u.stakeUtilized = 0;\n        u.stake = info.initial.add(info.reward);\n        u.stakePayday = info.stakePayday;\n    }\n\n    // deposit ethereum for the ETH 2.0 pool. Requires an active stake in the ETHYS Staking pool\n    function deposit() public payable {\n        require(msg.value > minimumDeposit, \"Minimum Deposit\");\n        require(totalDeposits.add(msg.value) <= maximumDeposits, \"Maximum deposit limit hit\");\n\n        // Calculate stake required for this deposit\n        uint256 stakeRequired = calculateMinimumStakeFor(msg.value);\n\n        // Fetch users stake info if applicable\n        _syncUser(msg.sender);\n        UserInfo storage u = user[msg.sender];\n        require(u.stakePayday > block.timestamp, \"stake has expired\");\n        require(u.stake.sub(u.stakeUtilized) >= stakeRequired, \"not enough staked to cover this deposit\");\n\n        //update the user\n        u.stakeUtilized = u.stakeUtilized.add(stakeRequired);\n        u.deposit = u.deposit.add(msg.value);\n        u.depositDate = block.timestamp;\n\n        // Deposit successful\n        totalDeposits = totalDeposits.add(msg.value);\n    }\n\n    function clearUser(address _user) public {\n        require(msg.sender == withdrawer, \"only withdrawer can do this\");\n        UserInfo storage u = user[_user];\n\n        totalDeposits = totalDeposits.sub(u.deposit);\n        \n        // zero out stats\n        u.stake         = 0;\n        u.stakeUtilized = 0;\n        u.stakePayday   = 0;\n        u.deposit       = 0;\n        u.depositDate   = 0;\n    }\n\n    function setWithdrawer(address addr) public onlyOwner { withdrawer = addr; }\n    function setStakingPool(address addr) public onlyOwner { stakingPool = IStakingPool(addr); }\n    function setMinimum(uint256 amount) public onlyOwner { minimumDeposit = amount; }\n    function setMaximum(uint256 amount) public onlyOwner { maximumDeposits = amount; }\n    function setStakeRatio(uint256 ratio) public onlyOwner { minimumStakeRatio = ratio; }\n    function sendToValidator(address payable validator, uint256 amount) public onlyOwner { validator.transfer(amount); }\n}"}}}