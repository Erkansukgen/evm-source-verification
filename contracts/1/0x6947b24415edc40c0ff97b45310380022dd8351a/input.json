{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/BalanceScaler.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n// Subset of ERC20, only the balanceOf view.\ninterface BalanceOf {\n    function balanceOf(address) external view returns (uint256);\n}\ncontract BalanceScaler is BalanceOf {\n    BalanceOf public balanceContract; // Usually an ERC20\n    uint32 public scalingFactor;\n    address public governor = msg.sender;\n    modifier onlyGovernor {\n      require(msg.sender == governor);\n      _;\n    }\n    \n    constructor(BalanceOf _aContractThatImplementsBalanceOf, uint32 _scalingFactor) {\n        balanceContract = _aContractThatImplementsBalanceOf;\n        scalingFactor = _scalingFactor;\n    }\n    \n    function balanceOf(address _beneficiary) external override view returns (uint256) {\n        return scalingFactor * balanceContract.balanceOf(_beneficiary);\n    }\n    \n    function setGovernor(address _newGovernor) external onlyGovernor {\n        governor = _newGovernor;\n    }\n    \n    function setBalanceContract(BalanceOf _newBalanceOfContract) external onlyGovernor {\n        balanceContract = _newBalanceOfContract;\n    }\n    \n    function setScalingFactor(uint32 _newScalingFactor) external onlyGovernor {\n        scalingFactor = _newScalingFactor;\n    }\n}"}}}