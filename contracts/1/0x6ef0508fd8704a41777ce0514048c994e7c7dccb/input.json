{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/RHWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * Created on 2020-12-21\n * @summary: Whitelist contract\n * @author: RealHouse Team\n */\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ninterface IRHFund {\n    function setPhysicalAddressOfOperation(string calldata _newPhysicalAddressOfOperation) external;\n\n    function isAdmin(address account) external view returns (bool);\n    function addAdmin(address account) external;\n    function removeAdmin(address account) external;\n    function renounceAdmin() external;\n\n    function addWLManagers(address) external;\n    function removeWLManagers(address) external;\n    function isWLManager(address) external view returns (bool);\n    function renounceWLManager() external;\n\n    function addFundWL(address _newWL) external;\n    function getFundWLAddress() external view returns (address);\n    function addNewAsset(address _newAsset) external;\n    function getDeployedAssets(uint256 index) external view returns (address, bool, address);\n    function getTotalDeployedAssets() external view returns (uint256);\n    function addNewDocument(string calldata uri, bytes32 documentHash) external;\n    function getDocInfos(uint256 _num) external view returns (string memory, bytes32, uint256);\n    function getDocsCount() external view returns (uint256);\n}\n\n\ninterface IRHWhitelist {\n    function isWhitelisted(address) external view returns(bool);\n    function getWLLength() external view returns(uint256);\n    function addToWhitelist(address) external;\n    function addToWhitelistMassive(address[] calldata) external returns (bool);\n    function removeFromWhitelist(address) external;\n}\n\n\ncontract RHWhitelist is Ownable, IRHWhitelist {\n    using SafeMath for uint256;\n\n    uint256 private whitelistLength;\n    IRHFund private fundContract;\n\n    mapping (address => bool) private whitelist;\n\n    event WLAddressAdded(address addedAddress);\n    event WLMassiveAddressesAdded();\n    event WLAddressRemoved(address removedAddress);\n\n    constructor(address _fundContract) {\n        fundContract = IRHFund(_fundContract);\n        transferOwnership(_fundContract);\n    }\n\n    modifier onlyWLManagers() {\n        require(fundContract.isWLManager(msg.sender), \"Not a Whitelist Manager!\");\n        _;\n    }\n\n    /*  Whitelisting  Mngmt  */\n    /**\n     * @dev check if an address is whitelisted\n     * @param _subscriber address to be checked\n     * @return true if subscriber is whitelisted, false otherwise\n     */\n    function isWhitelisted(address _subscriber) external override view returns(bool) {\n        return whitelist[_subscriber];\n    }\n\n    /**\n     * @dev length of the whitelisted accounts\n     * @return number of whitelisted addresses\n     */\n    function getWLLength() external override view returns(uint256) {\n        return whitelistLength;\n    }\n\n    /**\n     * @dev Add the subscriber to the whitelist.\n     * @param _subscriber The subscriber to add to the whitelist.\n     */\n    function addToWhitelist(address _subscriber) external override onlyWLManagers {\n        require(_subscriber != address(0), \"_subscriber is zero\");\n        require(!whitelist[_subscriber], \"already whitelisted\");\n\n        whitelist[_subscriber] = true;\n        whitelistLength++;\n        emit WLAddressAdded(_subscriber);\n    }\n\n    /**\n     * @dev Add the subscriber list to the whitelist (max 100)\n     * @param _subscriber The subscriber list to add to the whitelist.\n     */\n    function addToWhitelistMassive(address[] calldata _subscriber) external override onlyWLManagers returns (bool _success) {\n        require(_subscriber.length <= 100, \"Too long list of addresses!\");\n\n        for (uint8 i = 0; i < _subscriber.length; i++) {\n            require(_subscriber[i] != address(0), \"_subscriber is zero\");\n            require(!whitelist[_subscriber[i]], \"already whitelisted\");\n\n            whitelist[_subscriber[i]] = true;\n            whitelistLength++;\n        }\n\n        emit WLMassiveAddressesAdded();\n        return true;\n    }\n\n    /**\n     * @dev Remove the subscriber from the whitelist.\n     * @param _subscriber The subscriber remove from the whitelist.\n     */\n    function removeFromWhitelist(address _subscriber) external override onlyWLManagers {\n        require(_subscriber != address(0), \"_subscriber is zero\");\n        require(whitelist[_subscriber], \"not whitelisted\");\n\n        whitelist[_subscriber] = false;\n        whitelistLength--;\n        emit WLAddressRemoved(_subscriber);\n    }\n\n}\n"
    }
  }
}