{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/libra_0422.sol": {
      "content": "pragma solidity ^0.6.5;\r\n\r\ninterface ERC20Token {\r\n\tfunction totalSupply() external view returns (uint256 supply);\r\n\tfunction balanceOf(address _owner) external view returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) external returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) external returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\tfunction decimals() external view returns (uint8 decimals);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\ncontract Utils {\r\n    \r\n    function valid_string(string memory str)\r\n        internal\r\n        pure\r\n        returns(bool)\r\n    {\r\n        bytes memory str_bytes = bytes(str);\r\n        return str_bytes.length == 8;\r\n    }\r\n    \r\n    function is_contract(address contract_address)\r\n        public\r\n        view\r\n        returns(uint256 size)\r\n    {\r\n        assembly {\r\n            size := extcodesize(contract_address)\r\n        }\r\n    }\r\n}\r\n\r\ncontract LibraContract is Utils {\r\n\r\n\tERC20Token public UsdtToken;\r\n\tuint256 public total_record = 0;\r\n    bool safe = true;\r\n\t// 已完成的\r\n\tstruct FinishedRecord {\r\n\t\tuint256 time;// 投注时间\r\n\t\tuint256 amount; // 投注金额\r\n\t\tuint256 static_bonus;// 静态奖金\r\n\t}\r\n\r\n\t// 正在投注记录\r\n\tstruct PendingRecord {\r\n\t\tbytes32 key; // 主键ID\r\n\t\tuint8 betting_times;// 投注索引\r\n\t\taddress user;// 投注用户\r\n\t\taddress referrer;// 推荐人\r\n\t\tuint256[] time_arr;// 投注的时间戳\r\n\t\tuint256[] day_arr;// 投注的自然天数\r\n\t\tuint256[] betting_raw_amount_arr;// 每笔投注本金\r\n\t\tuint256[] remain_raw_amount_arr;// 每笔投注的剩余本金\r\n\t\t// 每笔投注本金领取7-14天的状态\r\n\t\tbool[] receive_state_7_14_arr;\r\n\t\tbool[] receive_state_14_21_arr;\r\n\t\tbool[] receive_state_21_28_arr;\r\n\t\tuint256 total_out_amount;// 提出的总本金\r\n\t\tuint256 total_static_bonus;// 领取的总静态奖金\r\n\t\tuint256[] static_bonus;// 每笔的静态奖金\r\n\t}\r\n\r\n        // 分享奖金\r\n    struct ShareBonusRecord {\r\n        uint256 amount;\r\n        uint32 day;\r\n        uint8 state;\r\n    }\r\n\r\n\t// 账户表\r\n\tstruct Account {\r\n\t\tuint256 total_in_amount;// 总入金\r\n\t\tuint256 total_out_static_amount;// 总出的静态奖金\r\n\t\tuint256 total_out_raw_amount;// 总出本金\r\n\t\tuint256 new_betting_times;// 新投注次数(复投不算)\r\n\r\n        uint256 total_out_dynamic_amount;// 总出的动态奖金\r\n        uint8 node_level;   // 节点等级\r\n        uint256 team_kpi;   // 团队业绩\r\n        uint32 team_person; // 团队人数\r\n        uint32 direct_person; // 直推人数\r\n\r\n        address referrer;\r\n        uint8 state;\r\n\r\n\t\tbytes32[] key_arr;// key\r\n\t}\r\n\r\n    // uint256 day_seconds = 86400;\r\n    uint256 day_seconds = 300;\r\n    uint256 public start_day; // 项目开始日期\r\n    bytes32[] private logs; // 日志流水\r\n\r\n    address public owner;\r\n\r\n    mapping(string => address) public code_user;\r\n    mapping(address => string) public user_code;\r\n\r\n    mapping(address => bool) public valid_users; // 有效用户\r\n    mapping(address => bool) public share_admins; // 发放分享奖金管理员\r\n    mapping(address => bool) public withdrawn_admins;// 回收奖金管理员\r\n    mapping(address => uint256[]) public account_share_days; // 分享奖金天数\r\n\r\n    // 分享奖金记录\r\n    mapping(address => mapping(uint256 => ShareBonusRecord)) public account_share_bonus;\r\n\tmapping(bytes32 => PendingRecord) public pending_betting_records;// 交易中投注流水\r\n\tmapping(address => FinishedRecord[]) public finished_account_betting_records;// 用户已完成投注的流水\r\n\tmapping(address => Account) public account_table;// 账户表\r\n\r\n    modifier isSafe() {\r\n        require(safe == true,\"Not Safe!\");\r\n        _;\r\n    }\r\n\r\n\t// 最小入金限制\r\n\tmodifier needGeMinInAmount(uint256 amount)\r\n\t{\r\n\t\trequire(\r\n\t\t\tamount >= 1000000,\r\n\t\t\t\"At least 100 USDT\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\t// 最大入金限制\r\n\tmodifier needMaxInAmount(uint256 amount)\r\n\t{\r\n\t\tif(total_record <= 50000000000000)\r\n\t\t{\r\n\t\t\trequire(\r\n\t\t\t\tamount <= 3000000000,\r\n\t\t\t\t\"At most 3000 USDT\"\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\trequire(\r\n\t\t\t\tamount <= 10000000000,\r\n\t\t\t\t\"At most 10000 USDT\"\r\n\t\t\t);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n    modifier onlyShareAdmin() {\r\n        require(share_admins[msg.sender] == true,\"No Permission!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithdrawnAdmin() {\r\n        require(withdrawn_admins[msg.sender] == true,\"No Permission!\");\r\n        _;\r\n    }\r\n\r\n\tconstructor(address _token_address) public {\r\n\t\tUsdtToken = ERC20Token(_token_address);\r\n\t\trequire(UsdtToken.totalSupply() > 0,\"Invalid Token!\");\r\n        share_admins[msg.sender] = true;\r\n        withdrawn_admins[msg.sender] = true;\r\n        start_day = now/day_seconds;\r\n        owner = msg.sender;\r\n\t}\r\n\r\n        // 注册\r\n    function register(string memory invite_code,\r\n        string memory my_code)\r\n        internal\r\n    {\r\n //       require(valid_string(my_code),\"my code invalid!\");\r\n //       require(valid_string(invite_code),\"invite_code invalid!\");\r\n\r\n//        require(code_user[invite_code] != address(0x0),\"referrer does not exsit!\");\r\n//        require(code_user[my_code] == address(0x0),\"the code has been used!\");\r\n\r\n        // 更新有效账户\r\n\t    valid_users[msg.sender] = true;\r\n\r\n\t    code_user[my_code] = msg.sender;\r\n        user_code[msg.sender] = my_code;\r\n    }\r\n\r\n\t// 投注\r\n\tfunction betting(\r\n\t\tuint256 amount,            // 金额\r\n        string memory invite_code, // 邀请码\r\n        string memory my_code\r\n\t)\r\n        public\r\n\t{\r\n        // 最多28份投资\r\n\t\tAccount storage account = account_table[msg.sender];\r\n        // 未注册\r\n        if(account.state == 0) {\r\n            register(invite_code,my_code);\r\n            account.state = 1;\r\n            account.referrer = code_user[invite_code];\r\n        }\r\n\t//\trequire(account.new_betting_times <= 28,\"Up to 28 investments!\");\r\n        // 检测今天是否已经投注\r\n\t\tuint256 curr_day = now/day_seconds;\r\n\t\tbytes32 key_hash = generate_id(msg.sender,curr_day);\r\n\r\n\t\tPendingRecord storage pending_record = pending_betting_records[key_hash];\r\n\t//\trequire(pending_record.betting_times == 0,\"You have invested today already!\");\r\n\r\n\t\tpending_record.key = key_hash; // 主键ID\r\n        pending_record.betting_times = 1; // 新增&续约的次数\r\n        pending_record.user = msg.sender; // 投注人\r\n        pending_record.referrer = account.referrer; // 邀请人\r\n        pending_record.total_static_bonus = 0; // 投注总静态收益\r\n\t\tpending_record.total_out_amount = 0;   // 投注总出的本金\r\n\r\n\t\tpending_record.receive_state_7_14_arr.push(false); // 每笔1期静态奖金领取的状况\r\n\t\tpending_record.receive_state_14_21_arr.push(false);// 每笔2期静态奖金领取的状况\r\n\t\tpending_record.receive_state_21_28_arr.push(false);// 每笔3期静态奖金领取的状况\r\n\t\tpending_record.time_arr.push(now); // 每笔（新增&续约）的时间戳\r\n\t\tpending_record.day_arr.push(curr_day);// 每笔（新增&续约）的具体天数\r\n\t\tpending_record.betting_raw_amount_arr.push(amount); // 每笔新增&续约的初始本金\r\n\t\tpending_record.remain_raw_amount_arr.push(amount);  // 每笔新增&续约的剩余本金\r\n\t\tpending_record.static_bonus.push(0);  // 每笔新增&续约得到的静态奖金\r\n\r\n        total_record += amount; // 合约总入金流水\r\n\r\n        //更新账户\r\n\t\taccount.total_in_amount += amount; // 更新账户总入金\r\n\t\taccount.new_betting_times += 1; // 更新新投注次数\r\n\t\taccount.key_arr.push(key_hash);\r\n\r\n\t    // 保存日志\r\n\t    logs.push(key_hash);\r\n\r\n     //   require(UsdtToken.transferFrom(msg.sender,address(this),amount),\"Failed to transfer!\");\r\n\t}\r\n\r\n\t// 复投,要把之前的百分之三十返回去\r\n\tfunction re_betting(\r\n\t\tbytes32 key,\r\n\t\tuint256 amount\r\n\t)\r\n\t\tpublic\r\n        needMaxInAmount(amount)\r\n        isSafe\r\n\t\treturns(bool)\r\n\t{\r\n\t\tPendingRecord storage pending_record = pending_betting_records[key];\r\n\t\trequire(pending_record.user == msg.sender,\"This investment is not yours!\");\r\n        // 获取具体某一天\r\n\t\tuint256 curr_day = now / day_seconds;\r\n        // 获取上次新增或者续约的索引\r\n\t\tuint256 index = pending_record.betting_times - 1;\r\n\t\t// 至少要等到28天之后才能复投\r\n\t\trequire(curr_day - pending_record.day_arr[index] >= 28,\"More than 28 days to renew!\");\r\n\t\t// 至少要大于等于上次的金额\r\n\t\trequire(amount >= pending_record.betting_raw_amount_arr[index],\"at least equal to the last investment amount!\");\r\n\r\n\t\tpending_record.betting_times += 1;   // 续约次数加1\r\n\t\tpending_record.time_arr.push(now);\r\n\t\tpending_record.day_arr.push(curr_day);\r\n\t\tpending_record.betting_raw_amount_arr.push(amount);\r\n\t\tpending_record.remain_raw_amount_arr.push(amount);\r\n\t\tpending_record.receive_state_7_14_arr[index] = true;   // 更新上次新增或续约，1期领取状态\r\n\t\tpending_record.receive_state_14_21_arr[index] = true;  // 更新上次新增或续约，2期领取状态\r\n\t\tpending_record.receive_state_21_28_arr[index] = true;  // 更新上次新增或续约，2期领取状态\r\n\t\tpending_record.receive_state_7_14_arr.push(false);     // 设置本次续约，1期领取状态为false\r\n\t\tpending_record.receive_state_14_21_arr.push(false);    // 设置本次续约，2期领取状态为false\r\n\t\tpending_record.receive_state_21_28_arr.push(false);    // 设置本次续约，3期领取状态为false\r\n\r\n        // 拿到利率\r\n        uint256 rate = get_static_rate();\r\n\t\t// 一个周期的静态奖金\r\n\t\tuint256 curr_static_bonus = (pending_record.betting_raw_amount_arr[index] * rate * 21) / 1000;\r\n        // 如果已经出的本金和静态利润已经超过了三倍第一次本金，超过部分就抹掉\r\n        uint256 old_out_and_static_amount = pending_record.total_static_bonus + pending_record.total_out_amount;\r\n        if(old_out_and_static_amount + curr_static_bonus > 3 * pending_record.betting_raw_amount_arr[0]) {\r\n            curr_static_bonus = 3 * pending_record.betting_raw_amount_arr[0] - old_out_and_static_amount;\r\n            if(curr_static_bonus < 0) {\r\n                curr_static_bonus = 0;\r\n            }\r\n        }\r\n\r\n\t\t// 用户可以领取的资产  剩余本金 + 本次静态奖金\r\n\t\tuint256 curr_transfer_amount = pending_record.remain_raw_amount_arr[index] + curr_static_bonus;\r\n\t\t// 更新上次续约领取的静态奖金\r\n\t\tpending_record.static_bonus[index] = curr_static_bonus;\r\n        // 设置本次续约获得的静态奖金\r\n\t\tpending_record.static_bonus.push(0);\r\n\t\t// 更新该ID投注的总静态奖金\r\n\t\tpending_record.total_static_bonus += curr_static_bonus;\r\n\t\t// 更新该ID投注的提出总本金\r\n\t\tpending_record.total_out_amount += pending_record.remain_raw_amount_arr[index];\r\n\r\n\t\t// 更新用户数据\r\n\t\tAccount storage account = account_table[msg.sender];\r\n\t\taccount.total_in_amount += amount;// 总入金\r\n\t\taccount.total_out_static_amount += curr_static_bonus;// 总出静态奖金\r\n\t\taccount.total_out_raw_amount += pending_record.remain_raw_amount_arr[index];// 总出的本金\r\n\r\n        // 更新已完成记录\r\n\t\tFinishedRecord memory finishedRecord;\r\n\t\tfinishedRecord.time = pending_record.time_arr[index];\r\n\t\tfinishedRecord.amount = pending_record.betting_raw_amount_arr[index];\r\n\t\tfinishedRecord.static_bonus = (curr_static_bonus);\r\n\t\tfinished_account_betting_records[msg.sender].push(finishedRecord);\r\n\r\n\t\t// 复投之前的本金可以等于0了\r\n\t\tpending_record.remain_raw_amount_arr[index] = 0;\r\n\r\n        // 总流水增加\r\n\t\ttotal_record += amount;\r\n        // 保存日志\r\n        logs.push(key);\r\n\r\n\t\t// 用户复投的钱转入合约\r\n\t\trequire(UsdtToken.transferFrom(msg.sender,address(this),amount),\"Failed transfer!\");\r\n\t\t// 把剩余的钱和奖金转给用户\r\n\t\trequire(UsdtToken.transfer(msg.sender,curr_transfer_amount),\"Failed transfer\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n    function get_logs_count()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return logs.length;\r\n    }\r\n\r\n    function get_log(uint256 index)\r\n        public\r\n        view\r\n        returns(bytes32)\r\n    {\r\n        if(index < 0)\r\n            index = 0;\r\n        return logs[index];\r\n    }\r\n\r\n\t// 领取本金资产\r\n\tfunction receive_asset(\r\n\t\tbytes32 key   // 投注记录的key\r\n\t)\r\n\t\tpublic\r\n        isSafe\r\n\t\treturns(bool)\r\n\t{\r\n\t\t// 拿到投注记录\r\n\t\tPendingRecord storage pending_record = pending_betting_records[key];\r\n\t\trequire(pending_record.user == msg.sender,\"This investment is not yours!\");\r\n\r\n\t\t// 拿到投注索引\r\n\t\tuint256 index = pending_record.betting_times - 1;\r\n\t\t// 本次可出本金\r\n\t\tuint256 this_time_out_raw_amount = get_stage_asset(key);\r\n\t\t// 至少提取10USDT才可以出\r\n\t\trequire(this_time_out_raw_amount >= 100000,\"At least 10 USDT can be withdrawd!\");\r\n\r\n\t\tpending_record.remain_raw_amount_arr[index] -= this_time_out_raw_amount;// 更新剩余本金,减少本次出的本金\r\n\t\tpending_record.total_out_amount += this_time_out_raw_amount;// 更新提出的总本金\r\n\r\n\t\t// 更新账户状态\r\n\t\tAccount storage account = account_table[msg.sender];\r\n\t\taccount.total_out_raw_amount += this_time_out_raw_amount;\r\n\r\n        // 转账\r\n        require(UsdtToken.transfer(msg.sender,this_time_out_raw_amount),\"Failed to transfer\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// 生成哈希\r\n\tfunction generate_id(\r\n\t\taddress user,\r\n\t\tuint256 day\r\n\t)\r\n\t\tpublic\r\n\t\tpure\r\n\t\treturns(bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(user,day));\r\n\t}\r\n\r\n\t// 拿到该出的本金\r\n\tfunction get_stage_asset(bytes32 key)\r\n\t\tinternal\r\n\t\treturns(uint256)\r\n\t{\r\n\t\tPendingRecord storage pending_record = pending_betting_records[key];\r\n\t\t// 数组索引\r\n\t\tuint256 index = pending_record.betting_times - 1;\r\n\t\t// 最近一次投注天数\r\n\t\tuint256 last_betting_day = pending_record.day_arr[index];\r\n\t\t// 当前自然天\r\n\t\tuint256 curr_day = now / day_seconds;\r\n\r\n\t\t// 间隔时间至少大于7天\r\n\t\tuint256 gap_day = curr_day - last_betting_day;\r\n\t\t// 如果小于7天，则待领取的钱为0\r\n\t\tif(gap_day < 7) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 base_rate = 0;\r\n\r\n\t\t// 7天 ~ 14天之间，领取20%\r\n\t\tif(gap_day >= 7 && gap_day < 14) {\r\n\t\t\t// 没有领取过才能领取\r\n\t\t\tif(pending_record.receive_state_7_14_arr[index] == true) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tbase_rate = 200;\r\n\t\t\tpending_record.receive_state_7_14_arr[index] = true;\r\n\t\t// 14 ~ 21天之间，领取20%\r\n\t\t} else if (gap_day >= 14 && gap_day < 21) {\r\n\t\t\t// 如果已经取款过，就返回0\r\n\t\t\tif(pending_record.receive_state_14_21_arr[index] == true) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tbase_rate = 200;\r\n\t\t\t// 如果7 ~ 14天的本金没有领取，这次就累加上\r\n\t\t\tif(pending_record.receive_state_7_14_arr[index] == false) {\r\n\t\t\t\tbase_rate += 200;\r\n\t\t\t\tpending_record.receive_state_7_14_arr[index] = true;\r\n\t\t\t}\r\n\t\t\tpending_record.receive_state_14_21_arr[index] = true;\r\n\t\t} else {\r\n\t\t\t// 大于21天，领取30%\r\n\t\t\tif(pending_record.receive_state_21_28_arr[index] == true) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tbase_rate = 300;\r\n\t\t\tif(pending_record.receive_state_7_14_arr[index] == false) {\r\n\t\t\t\tbase_rate += 200;\r\n\t\t\t\tpending_record.receive_state_7_14_arr[index] = true;\r\n\t\t\t}\r\n\t\t\tif(pending_record.receive_state_14_21_arr[index] == false) {\r\n\t\t\t\tbase_rate += 200;\r\n\t\t\t\tpending_record.receive_state_14_21_arr[index] = true;\r\n\t\t\t}\r\n\t\t\tpending_record.receive_state_21_28_arr[index] = true;\r\n\t\t}\r\n\t\tuint256 last_betting_raw_amount = pending_record.betting_raw_amount_arr[index];\r\n\t\t// 本次可出本金\r\n\t\tuint256 this_time_out_amount = base_rate * last_betting_raw_amount / 1000;\r\n\t\treturn this_time_out_amount;\r\n\t}\r\n\r\n\t// 获取账户信息\r\n\tfunction get_account_info(address user)\r\n        public\r\n        view\r\n        returns(bytes32[] memory)\r\n    {\r\n        return (account_table[user].key_arr);\r\n    }\r\n\r\n\tfunction get_pending_records(bytes32 key)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(\r\n\t\t\tuint256[] memory time_arr,\r\n\t\t\tuint256[] memory day_arr,\r\n\t\t\tuint256[] memory betting_raw_amount_arr,\r\n\t\t\tuint256[] memory remain_raw_amount_arr,\r\n\t\t\tbool[] memory receive_state_7_14_arr,\r\n\t\t\tbool[] memory receive_state_14_21_arr,\r\n\t\t\tbool[] memory receive_state_21_28_arr\r\n\t\t)\r\n\t{\r\n\t\tPendingRecord storage pr = pending_betting_records[key];\r\n\t\treturn (pr.time_arr,pr.day_arr,pr.betting_raw_amount_arr,pr.remain_raw_amount_arr,\r\n\t\t\tpr.receive_state_7_14_arr,pr.receive_state_14_21_arr,pr.receive_state_21_28_arr\r\n\t\t);\r\n\t}\r\n\r\n    // 发放动态奖金\r\n    function release_share_bonus(\r\n        address[] memory user_arr,\r\n        uint256[] memory amount_arr,\r\n        uint8[] memory node_level_arr,\r\n        uint256[] memory team_kpi_arr,\r\n        uint32[] memory team_size_arr,\r\n        uint32[] memory direct_size_arr,\r\n        uint32 share_day\r\n    )\r\n        public\r\n        isSafe\r\n        onlyShareAdmin\r\n    {\r\n        require(user_arr.length == amount_arr.length,\"Invalid Release!\");\r\n        for(uint256 index = 0; index < user_arr.length; index++) {\r\n            release_one_share_bonus(user_arr[index],amount_arr[index],\r\n            node_level_arr[index],team_kpi_arr[index],team_size_arr[index],\r\n            direct_size_arr[index],share_day);\r\n        }\r\n    }\r\n\r\n    function release_one_share_bonus(\r\n        address user,\r\n        uint256 amount,\r\n        uint8 node_level,\r\n        uint256 team_kpi,\r\n        uint32 team_size,\r\n        uint32 direct_size,\r\n        uint32 share_day\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        if(valid_users[user] == false)\r\n            return false;\r\n        if(share_day < start_day || share_day >= now / day_seconds)\r\n            return false;\r\n        ShareBonusRecord storage shareBonusRecord = account_share_bonus[user][share_day];\r\n        if(shareBonusRecord.state != 0)\r\n            return false;\r\n        shareBonusRecord.amount = amount;\r\n        shareBonusRecord.day = share_day;\r\n        shareBonusRecord.state = 1;\r\n        account_share_days[user].push(share_day);\r\n\r\n        Account storage account = account_table[user];\r\n        account.node_level = node_level;\r\n        account.team_person = team_size;\r\n        account.team_kpi = team_kpi;\r\n        account.direct_person = direct_size;\r\n        \r\n        return true;\r\n    }\r\n\r\n    // 用户领取动态奖金\r\n    function lq_share_bonus(uint256 share_day)\r\n        public\r\n        isSafe\r\n    {\r\n        ShareBonusRecord storage shareBonusRecord = account_share_bonus[msg.sender][share_day];\r\n        require(shareBonusRecord.state == 1,\"Invalid State!\");\r\n        shareBonusRecord.state = 2;\r\n        Account storage account = account_table[msg.sender];\r\n        account.total_out_dynamic_amount += shareBonusRecord.amount;\r\n        require(UsdtToken.transfer(msg.sender,shareBonusRecord.amount),\"Failed to Transfer!\");\r\n    }\r\n\r\n    // 设置发放分享管理员\r\n    function setShareAdmins(address user)\r\n        public\r\n        onlyShareAdmin\r\n    {\r\n        share_admins[user] = true;\r\n    }\r\n\r\n    // 设置领取管理员\r\n    function setWithdrawAdmin(address user)\r\n        public\r\n        onlyWithdrawnAdmin\r\n    {\r\n        withdrawn_admins[user] = true;\r\n    }\r\n\r\n    // 回收本金\r\n    function withdraw(uint256 amount,\r\n        address user)\r\n        public\r\n        onlyWithdrawnAdmin\r\n    {\r\n        require(UsdtToken.transfer(user,amount),\"Failed to Transfer!\");\r\n    }\r\n\r\n    // 拿到已完成的次数\r\n    function get_finished_number(address user)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return finished_account_betting_records[user].length;\r\n    }\r\n\r\n    // 拿到分享奖金次数\r\n    function get_share_record_number(address user)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return account_share_days[user].length;\r\n    }\r\n\r\n    // 静态奖金比列\r\n    function get_static_rate()\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 rate = 0;\r\n        uint256 base_num = 150000000000000;\r\n        if(total_record <= base_num) {\r\n            rate = 9;\r\n        } else if (total_record > base_num && total_record <= base_num * 3) {\r\n            rate = 8;\r\n        } else if (total_record > base_num * 3 && total_record <= base_num * 6) {\r\n            rate = 7;\r\n        } else if (total_record > base_num * 6 && total_record <= base_num * 10) {\r\n            rate = 6;\r\n        } else if (total_record > base_num * 10 && total_record <= base_num * 20) {\r\n            rate = 5;\r\n        } else if (total_record > base_num * 20 && total_record <= base_num * 40) {\r\n            rate = 4;\r\n        } else {\r\n            rate = 3;\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    // 设置一个团队的根节点\r\n    function set_root(address user,\r\n        string memory code)\r\n        public\r\n    {\r\n        require(msg.sender == owner,\"Only Owner can do this!\");\r\n\r\n        Account storage account = account_table[user];\r\n        require(account.state == 0,\"The account has been registed!\");\r\n        account.state = 1;\r\n        account.referrer = address(0x0);\r\n\r\n        code_user[code] = user;\r\n        user_code[user] = code;\r\n        \r\n        valid_users[user] = true;\r\n    }\r\n\r\n    function setup_contract_state(bool state)\r\n        public\r\n    {\r\n        require(msg.sender == owner,\"only owner can change the contract state!\");\r\n        safe = state;\r\n    }\r\n}\r\n"
    }
  }
}