{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "PullCollectorOperatorETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() private view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.6;\r\n\r\ncontract PullCollectorOperatorETH is\r\n    Ownable // контракт сборщик на майнет сети\r\n{\r\n    address[] private users; // список всех юзеров кто вложил\r\n    mapping(address => uint256) public balances; // меп юзеров и их вложенных балансов\r\n    address payable public distributor; //адрес  кошелька распределителя\r\n    address public admin;\r\n    event NewInvestor(address investor);\r\n\r\n    constructor() public {\r\n        distributor = msg.sender;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function set_admin(address _admin) public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function set_new_distributor(address payable _distributor)\r\n        public\r\n        onlyOwner\r\n    {\r\n        // ставим нового распределителя\r\n        distributor = _distributor;\r\n    }\r\n\r\n    function get_users(uint256 _id) public view returns (address) {\r\n        // получение юзера по его айди\r\n        return users[_id];\r\n    }\r\n\r\n    function get_count_users() public view returns (uint256) {\r\n        // получение общего количества вложившихся юзеров через контракт\r\n        return users.length;\r\n    }\r\n\r\n    function get_en_balances(address _user) public view returns (uint256) {\r\n        // получить сколько вложил юзер по его адресу\r\n        return balances[_user];\r\n    }\r\n\r\n    function invest() external payable {\r\n        // метод инвестирования средств в текущий котракт\r\n        if (balances[msg.sender] == 0) {\r\n            emit NewInvestor(msg.sender);\r\n        }\r\n        balances[msg.sender] += msg.value;\r\n        users.push(msg.sender);\r\n    }\r\n\r\n    function transfer_native(uint256 _amount) public payable {\r\n        //метод отсылки нативки на кошель распределителя\r\n        require(msg.sender == admin, \"Sign adress not Admin\");\r\n        distributor.transfer(_amount);\r\n    }\r\n}"
    }
  }
}