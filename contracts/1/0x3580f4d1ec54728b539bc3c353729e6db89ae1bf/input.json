{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/arb.sol":{"content":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.7.3;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface ISwap {\r\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Arbitrage {\r\n  using SafeMath for uint256;\r\n\r\n  address public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n  // ISwap public UniswapRouter = ISwap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  // ISwap public SushiswapRouter = ISwap(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n  constructor() {}\r\n\r\n  function enter(uint256 wethAmt, address entryRouter, uint256 amountOutMin, address[] calldata entryPath, uint deadline) public payable returns (uint[] memory) {\r\n    return ISwap(entryRouter).swapExactETHForTokens{value: wethAmt}(\r\n      amountOutMin, \r\n      entryPath, \r\n      address(this), \r\n      deadline\r\n      );\r\n  }\r\n\r\n  function exit(address exitRouter, uint256 tokenAmt, uint256 amountOutMin, address[] calldata exitPath, uint deadline) public returns (uint[] memory) {\r\n    return ISwap(exitRouter).swapExactTokensForETH(\r\n      tokenAmt, \r\n      amountOutMin, \r\n      exitPath, \r\n      address(this), \r\n      deadline\r\n      );\r\n  }\r\n\r\n  function arb(\r\n    uint256 wethAmt,\r\n    address entryRouter, \r\n    address exitRouter, \r\n    uint256 amountOutMin, \r\n    address[] calldata entryPath, \r\n    address[] calldata exitPath, \r\n    uint secondsBeforeRevert, \r\n    uint256 minProfit\r\n    ) \r\n    external \r\n    payable \r\n  {\r\n    uint[] memory entryAmounts = enter(wethAmt, entryRouter, amountOutMin, entryPath, block.timestamp + secondsBeforeRevert);\r\n    uint[] memory exitAmounts = exit(exitRouter, entryAmounts[entryAmounts.length - 1], wethAmt + minProfit, exitPath, block.timestamp + secondsBeforeRevert);\r\n    uint256 profit = uint256(exitAmounts[exitAmounts.length - 1]).sub(wethAmt);\r\n    require(profit >= minProfit, \"Arb: < minProfit\");\r\n  }\r\n}\r\n"}}}