{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/TDE-Flattened-Final.sol": {
      "content": "pragma solidity 0.6.7;\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\ninterface IUniswapV2Router01 {\n  function factory() external pure returns (address);\n\n  function WETH() external pure returns (address);\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    );\n\n  function addLiquidityETH(\n    address token,\n    uint256 amountTokenDesired,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    payable\n    returns (\n      uint256 amountToken,\n      uint256 amountETH,\n      uint256 liquidity\n    );\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETH(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETHWithPermit(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactETHForTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function swapTokensForExactETH(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactTokensForETH(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapETHForExactTokens(\n    uint256 amountOut,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) external pure returns (uint256 amountB);\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountOut);\n\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountIn);\n\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\n    external\n    view\n    returns (uint256[] memory amounts);\n\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\n    external\n    view\n    returns (uint256[] memory amounts);\n}\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountETH);\n\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountETH);\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable;\n\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n}\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) private _balances;\n\n  mapping(address => mapping(address => uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n   * a default value of 18.\n   *\n   * To select a different value for {decimals}, use {_setupDecimals}.\n   *\n   * All three of these values are immutable: they can only be set once during\n   * construction.\n   */\n  constructor(string memory name, string memory symbol) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = 18;\n  }\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() public view returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n   * called.\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n   */\n  function totalSupply() public override view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n   */\n  function balanceOf(address account) public override view returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(address recipient, uint256 amount)\n    public\n    override\n    returns (bool)\n  {\n    _transfer(msg.sender, recipient, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   */\n  function allowance(address owner, address spender)\n    public\n    override\n    view\n    returns (uint256)\n  {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(address spender, uint256 amount)\n    public\n    override\n    returns (bool)\n  {\n    _approve(msg.sender, spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20};\n   *\n   * Requirements:\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``sender``'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(\n      sender,\n      msg.sender,\n      _allowances[sender][msg.sender].sub(\n        amount,\n        'ERC20: transfer amount exceeds allowance'\n      )\n    );\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue)\n    public\n    returns (bool)\n  {\n    _approve(\n      msg.sender,\n      spender,\n      _allowances[msg.sender][spender].add(addedValue)\n    );\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n    public\n    virtual\n    returns (bool)\n  {\n    _approve(\n      msg.sender,\n      spender,\n      _allowances[msg.sender][spender].sub(\n        subtractedValue,\n        'ERC20: decreased allowance below zero'\n      )\n    );\n    return true;\n  }\n\n  /**\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\n   *\n   * This is internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) internal virtual {\n    require(sender != address(0), 'ERC20: transfer from the zero address');\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\n    _balances[sender] = _balances[sender].sub(\n      amount,\n      'ERC20: transfer amount exceeds balance'\n    );\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `to` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: mint to the zero address');\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: burn from the zero address');\n    _balances[account] = _balances[account].sub(\n      amount,\n      'ERC20: burn amount exceeds balance'\n    );\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   *\n   * This is internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    require(owner != address(0), 'ERC20: approve from the zero address');\n    require(spender != address(0), 'ERC20: approve to the zero address');\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n}\n\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract Token is IERC20, Ownable {\n    using SafeMath for uint256;\n    \n    \n    struct Challenger {\n        uint256 acceptance;\n        uint256 challenge;\n    }\n    \n    uint256 private constant _BASE = 1 * _DECIMALFACTOR;\n    uint32  private constant _TERM = 5 minutes;\n    \n    uint256 private _prizes;\n    uint256 private _challenges;\n    \n    mapping (address => Challenger) private _challengers;\n    \n    string  private constant _NAME = \"Gauntlet Finance\";\n    string  private constant _SYMBOL = \"GFI\";\n    uint8   private constant _DECIMALS = 18;\n    \n    uint256 private constant _DECIMALFACTOR = 10 ** uint256(_DECIMALS);\n    \n    uint8   private constant _DENOMINATOR = 100;\n    uint8   private constant _PRECISION   = 100;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    uint256 private _totalSupply; \n\n    uint256 private immutable _rate;\n    uint8   private immutable _penalty;\n    uint256 private immutable _requirement;\n    \n    uint256 private immutable _initialSupply;\n\n    uint256 private _contributors;\n\n    bool    private _paused;\n    address private _TDE;\n    \n\n    event Penalized(\n        address indexed account,\n        uint256 amount);\n    \n    event Boosted(\n        address indexed account,\n        uint256 amount);\n    \n    event Deflated(\n        uint256 supply,\n        uint256 amount);\n    \n    event Recovered(\n        uint256 supply,\n        uint256 amount);\n    \n    event Added(\n        address indexed account,\n        uint256 time);\n        \n    event Removed(\n        address indexed account,\n        uint256 time);\n    \n    event Accepted(\n        address indexed account,\n        uint256 amount);\n\n    event Rewarded(\n        address indexed account,\n        uint256 amount);\n    \n    event Forfeited(\n        address indexed account,\n        uint256 amount);\n        \n    event Unpaused(\n        address indexed account,\n        uint256 time); \n    \n    \n    constructor (\n        uint256 rate, \n        uint8   penalty,\n        uint256 requirement) \n        public {\n            \n        require(rate > 0, \n        \"error: must be larger than zero\");\n        require(penalty > 0, \n        \"error: must be larger than zero\");\n        require(requirement > 0, \n        \"error: must be larger than zero\");\n            \n        _rate = rate;\n        _penalty = penalty;\n        _requirement = requirement;\n        \n        uint256 prizes = 10000 * _DECIMALFACTOR;\n        uint256 capacity = 25000 * _DECIMALFACTOR;\n        uint256 operations = 65000 * _DECIMALFACTOR;\n\n        _mint(_environment(), prizes.add(capacity));\n        _mint(_msgSender(), operations);\n        \n        _prizes = prizes;\n        _initialSupply = prizes.add(capacity).add(operations);\n        \n        _paused = true;\n    }\n    \n\n    function setTokenDistributionEvent(address TDE) external onlyOwner returns (bool) {\n        require(TDE != address(0), \n        \"error: must not be the zero address\");\n        \n        require(_TDE == address(0), \n        \"error: must not be set already\");\n    \n        _TDE = TDE;\n        return true;\n    }\n    function unpause() external returns (bool) {\n        address account = _msgSender();\n        \n        require(account == owner() || account == _TDE, \n        \"error: must be owner or must be token distribution event\");\n\n        _paused = false;\n        \n        emit Unpaused(account, _time());\n        return true;\n    }\n    \n    function reward() external returns (bool) {\n        uint256 prizes = getPrizesTotal();\n        \n        require(prizes > 0, \n        \"error: must be prizes available\");\n        \n        address account = _msgSender();\n        \n        require(getReward(account) > 0, \n        \"error: must be worthy of a reward\");\n        \n        uint256 amount = getReward(account);\n        \n        if (_isExcessive(amount, prizes)) {\n            \n            uint256 excess = amount.sub(prizes);\n            amount = amount.sub(excess);\n            \n            _challengers[account].acceptance = _time();\n            _prizes = _prizes.sub(amount);\n            _mint(account, amount);\n            emit Rewarded(account, amount);\n            \n        } else {\n            _challengers[account].acceptance = _time();\n            _prizes = _prizes.sub(amount);\n            _mint(account, amount);\n            emit Rewarded(account, amount);\n        }\n        return true;\n    }\n    function challenge(uint256 amount) external returns (bool) {\n        address account = _msgSender();\n        uint256 processed = amount.mul(_DECIMALFACTOR);\n        \n        require(_isEligible(account, processed), \n        \"error: must have sufficient holdings\");\n        \n        require(_isContributor(account), \n        \"error: must be a contributor\");\n        \n        require(_isAcceptable(processed), \n        \"error: must comply with requirement\");\n        \n        _challengers[account].acceptance = _time();\n        _challengers[account].challenge = processed;\n        \n        _challenges = _challenges.add(processed);\n        \n        emit Accepted(account, processed);\n        return true;\n    }\n    \n    function getTerm() public pure returns (uint256) {\n        return _TERM;\n    }\n    function getBase() public pure returns (uint256) {\n        return _BASE;\n    }\n    \n    function getAcceptance(address account) public view returns (uint256) {\n        return _challengers[account].acceptance;\n    }\n    function getPeriod(address account) public view returns (uint256) {\n        if (getAcceptance(account) > 0) {\n            \n            uint256 period = _time().sub(_challengers[account].acceptance);\n            uint256 term = getTerm();\n            \n            if (period >= term) {\n                return period.div(term);\n            } else {\n                return 0;\n            }\n            \n        } else { \n            return 0;\n        }\n    }\n    \n    function getChallenge(address account) public view returns (uint256) {\n        return _challengers[account].challenge;\n    }\n    function getFerocity(address account) public view returns (uint256) {\n        return (getChallenge(account).mul(_PRECISION)).div(getRequirement());\n    }\n    function getReward(address account) public view returns (uint256) {\n       return _getBlock(account).mul((_BASE.mul(getFerocity(account))).div(_PRECISION));\n    } \n    \n    function getPrizesTotal() public view returns (uint256) {\n        return _prizes;\n    }\n    function getChallengesTotal() public view returns (uint256) {\n        return _challenges;\n    }   \n    \n    function getRate() public view returns (uint256) {\n        return _rate;\n    }\n    function getPenalty() public view returns (uint8) {\n        return _penalty;\n    }\n    function getRequirement() public view returns (uint256) {\n        return _requirement;\n    }\n\n    function getCapacity() public view returns (uint256) {\n        return balanceOf(_environment()).sub(getPrizesTotal());\n    }\n    \n    function getContributorsTotal() public view returns (uint256) {\n        return _contributors;\n    }\n    function getContributorsLimit() public view returns (uint256) {\n        return getCapacity().div(getRate());\n    }\n\n    function name() public pure returns (string memory) {\n        return _NAME;\n    }\n    function symbol() public pure returns (string memory) {\n        return _SYMBOL;\n    }\n    function decimals() public pure returns (uint8) {\n        return _DECIMALS;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n    function initialSupply() public view returns (uint256) {\n        return _initialSupply;\n    }\n    \n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        address sender = _msgSender();\n\n        require(_isNotPaused() || recipient == _TDE || sender == _TDE, \n        \"error: must not be paused else must be token distribution event recipient or sender\");\n\n        _checkReactiveness(sender, recipient, amount);\n        _checkChallenger(sender, amount);\n        \n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        require(_isNotPaused() || recipient == _TDE || sender == _TDE, \n        \"error: must not be paused else must be token distribution event recipient or sender\");\n        \n        _checkReactiveness(sender, recipient, amount);\n        _checkChallenger(sender, amount);\n        \n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\n        return true;\n    }\n    \n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        \n        if (sender == owner() && recipient == _TDE || sender == _TDE) {\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n            _balances[recipient] = _balances[recipient].add(amount);\n            \n            emit Transfer(sender, recipient, amount);\n            \n        } else {\n            uint256 penalty = _computePenalty(amount);\n            _penalize(penalty);\n            \n            uint256 boosted = penalty.div(4);\n            _boost(boosted);\n            \n            uint256 prize = penalty.div(4);\n            _prize(prize);\n            \n            uint256 processed = amount.sub(penalty);\n            _balances[sender] = _balances[sender].sub(processed, \"ERC20: transfer amount exceeds balance\");\n            _balances[recipient] = _balances[recipient].add(processed);\n            \n            emit Transfer(sender, recipient, processed);\n        }\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        \n        emit Transfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        \n        emit Transfer(account, address(0), amount);\n    }\n    \n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    function _penalize(uint256 amount) private returns (bool) {\n        address account = _msgSender();\n        _burn(account, amount);\n        emit Penalized(account, amount);\n        return true;\n    }\n    function _boost(uint256 amount) private returns (bool) {\n        _mint(_environment(), amount);\n        emit Boosted(_environment(), amount);\n        return true;\n    }\n    function _prize(uint256 amount) private returns (bool) {\n        _mint(_environment(), amount);\n        emit Rewarded(_environment(), amount);\n        return true;\n    }\n    \n    function _checkReactiveness(address sender, address recipient, uint256 amount) private {\n        if (_isUnique(recipient)) {\n            if (_isCompliant(recipient, amount)) {\n                _addContributor(recipient);\n                if(_isElastic()) {\n                    _deflate();\n                }\n            }\n        }\n        if (_isNotUnique(sender)) {\n            if (_isNotCompliant(sender, amount)) {\n                _removeContributor(sender);\n                if(_isElastic()) {\n                    _recover();\n                }\n            }\n        }\n    }\n    function _checkChallenger(address account, uint256 amount) private {\n        if (_isChallenger(account)) {\n            if (balanceOf(account).sub(amount) < getChallenge(account)) {\n                \n                uint256 challenged = getChallenge(account);\n                _challenges = _challenges.sub(challenged);\n                \n                delete _challengers[account].acceptance;\n                delete _challengers[account].challenge;\n                \n                emit Forfeited(account, challenged);\n            }\n        }\n    }    \n    \n    function _deflate() private returns (bool) {\n        uint256 amount = getRate();\n        _burn(_environment(), amount);\n        emit Deflated(totalSupply(), amount);\n        return true;\n        \n    }\n    function _recover() private returns (bool) {\n        uint256 amount = getRate();\n        _mint(_environment(), amount);\n        emit Recovered(totalSupply(), amount);\n        return true;\n    }\n    \n    function _addContributor(address account) private returns (bool) {\n        _contributors++;\n        emit Added(account, _time());\n        return true;\n    } \n    function _removeContributor(address account) private returns (bool) {\n        _contributors--;\n        emit Removed(account, _time());\n        return true;\n    } \n\n    function _computePenalty(uint256 amount) private view returns (uint256) {\n        return (amount.mul(getPenalty())).div(_DENOMINATOR);\n    }\n    function _isNotPaused() private view returns (bool) {\n        if (_paused) { return false; } else { return true; }\n    }\n\n    function _isUnique(address account) private view returns (bool) {\n        if (balanceOf(account) < getRequirement()) { return true; } else { return false; }\n    }\n    function _isNotUnique(address account) private view returns (bool) {\n        if (balanceOf(account) > getRequirement()) { return true; } else { return false; }\n    }    \n    \n    function _getAcceptance(address account) private view returns (uint256) {\n        return _challengers[account].acceptance;\n    }\n    function _getEpoch(address account) private view returns (uint256) {\n        if (_getAcceptance(account) > 0) { return _time().sub(_getAcceptance(account)); } else { return 0; }\n    } \n    function _getBlock(address account) private view returns (uint256) {\n        return _getEpoch(account).div(_TERM); \n    }\n    \n    function _isContributor(address account) private view returns (bool) {\n        if (balanceOf(account) >= getRequirement()) { return true; } else { return false; }\n    }\n    function _isEligible(address account, uint256 amount) private view returns (bool) {\n        if (balanceOf(account) >= amount) { return true; } else { return false; }\n    }\n    function _isAcceptable(uint256 amount) private view returns (bool) {\n        if (amount >= getRequirement()) { return true; } else { return false; }\n    }\n    function _isChallenger(address account) private view returns (bool) {\n        if (_getAcceptance(account) > 0) { return true; } else { return false; }\n    }\n    \n    function _isExcessive(uint256 amount, uint256 ceiling) private pure returns (bool) {\n        if (amount > ceiling) { return true; } else { return false; }\n    }\n    \n    function _isCompliant(address account, uint256 amount) private view returns (bool) {\n        if (balanceOf(account).add(amount) >= getRequirement()) { return true; } else { return false; }\n    }\n    function _isNotCompliant(address account, uint256 amount) private view returns (bool) {\n        if (balanceOf(account).sub(amount) < getRequirement()) { return true; } else { return false; }\n    }\n    \n    function _isElastic() private view returns (bool) {\n        if (getContributorsTotal() <= getContributorsLimit() && getContributorsTotal() > 0) { return true; } else { return false; }\n    }\n    \n    function _environment() private view returns (address) {\n        return address(this);\n    }\n    function _time() private view returns (uint256) {\n        return block.timestamp;\n    }\n    \n}\n\n\ncontract TDE is Context {\n    using SafeMath for uint256;\n    \n    Token private _token;\n    IUniswapV2Router02 private _uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    \n    uint256 private constant _TOKEN_ALLOCATION_SALE = 45000000000000000000000; \n    \n    uint256 private constant _FIRST_CEILING = 500 ether;\n    uint256 private constant _TOTAL_CEILING = 2500 ether;\n    \n    uint256 private constant _UNISWAP_PERCENT = 15;\n    uint256 private constant _UNISWAP_RATE = 11;\n\n    uint256 private constant _MIN_CONTRIBUTION = 1 ether;\n    uint256 private constant _MAX_CONTRIBUTION = 2500 ether; \n    \n    uint8   private constant _MULTIPLIER  = 150;\n    uint8   private constant _DENOMINATOR = 100;\n    uint8   private constant _PRECISION   = 100;\n    \n    uint32  private constant _DURATION = 7 days;\n    \n    uint256 private _launch;\n    uint256 private _over;\n    \n    uint256 private _fr;\n    uint256 private _rr;\n    \n    mapping(address => uint256) private _contributions;\n\n    address payable private _wallet;\n    uint256 private _funds;\n\n    bool    private _locked;\n\n\n    event Configured(\n        uint256 rate1,\n        uint256 rate2);\n\n    event Contributed(\n        address indexed account,\n        uint256 amount);\n        \n    event LiquidityLocked(\n        uint256 amountETH,\n        uint256 amountToken);\n        \n    event Finalized(\n        uint256 time);\n        \n    event Boosted(\n        address indexed account,\n        uint256 amount);\n    \n    \n    constructor(address token, address payable wallet) public {\n        require(token != address(0), \n        \"error: must not be zero address\");\n        require(wallet != address(0), \n        \"error: must not be zero address\");\n        \n        _launch = _time();\n        _over = _launch.add(_DURATION);\n        \n        _token = Token(token);\n        _wallet = wallet; \n        \n        _calculateRates();\n    }\n    \n    receive() external payable {\n        require(!_isOver(), \n        \"error: must not be over\");\n        \n        if (_token.balanceOf(_environment()) > 0) _contribute();\n    }\n    \n    function lockLiquidity() external returns (bool) {\n        require(_isOver(), \n        \"error: must be over\");\n        require(!_isLocked(), \n        \"error: must not be locked\");\n\n        _locked = true;\n        \n        uint256 amountETHForUniswap = (getFunds().mul(_UNISWAP_PERCENT)).div(_DENOMINATOR);\n        uint256 amountGFIForUniswap = (amountETHForUniswap.mul((_UNISWAP_RATE.mul(_PRECISION)))).div(_PRECISION);\n        \n        _token.unpause();\n\n        _token.approve(address(_uniswapRouter), amountGFIForUniswap);\n        _uniswapRouter.addLiquidityETH\n        { value: amountETHForUniswap }\n        (\n            address(_token),\n            amountGFIForUniswap,\n            0,\n            0,\n            address(0), \n            _time()\n        );\n        \n        emit LiquidityLocked(amountETHForUniswap, amountGFIForUniswap);\n        return true;\n    }\n    function finalize() external returns (bool) {\n        require(_isOver(), \n        \"error: must be over\");\n        \n        require(_isLocked(), \n        \"error: must be locked\");\n        \n        _vault();\n        _boost();\n        \n        emit Finalized(_time());\n        return true;\n    }\n    \n    function getLaunch() public view returns (uint256) {\n        return _launch;\n    }\n    function getOver() public view returns (uint256) {\n        return _over;\n    }\n    function getFunds() public view returns (uint256) {\n        return _funds;\n    }\n\n    function _calculateRates() private returns (bool) {\n        require(_isNotConfigured(), \n        \"error: must not be configured\");\n\n        uint256 rawfr = _TOKEN_ALLOCATION_SALE.div(_TOTAL_CEILING);\n        \n        _fr = (rawfr.mul(_MULTIPLIER)).div(_DENOMINATOR);\n        \n        uint256 ftAvailable = _FIRST_CEILING.mul(_fr);\n        uint256 rtAvailable = _TOKEN_ALLOCATION_SALE.sub(ftAvailable);\n        \n        _rr = (rtAvailable.mul(_PRECISION)).div(_TOTAL_CEILING.sub(_FIRST_CEILING));\n        \n        Configured(_fr, _rr);\n        return true;\n    }\n    \n    function _contribute() private returns (bool) {\n        address contributor = _msgSender();\n        uint256 contribution = msg.value;\n        \n        require(_checkContribution(contribution),\n        \"error: must comply with contribution requirements\");\n        \n        uint256 processedContribution;\n        uint256 excessContribution;\n        \n        uint256 tokens;\n        \n        if (_isFirstMover()) {\n            processedContribution = _FIRST_CEILING.sub(getFunds());\n            if (_isExcessive(contribution, processedContribution)) {\n                excessContribution = contribution.sub(processedContribution);\n            \n                tokens = (processedContribution.mul(_fr)).add((excessContribution.mul(_rr)).div(_PRECISION));\n                \n                _token.transfer(contributor, tokens);\n                _funds = _funds.add(contribution);\n                \n            } else {\n                tokens = (contribution.mul(_fr));\n                _token.transfer(contributor, tokens);\n                _funds = _funds.add(contribution);\n            }\n            \n        } else {\n            processedContribution = _TOTAL_CEILING.sub(getFunds());\n            if (_isExcessive(contribution, processedContribution)) {\n                excessContribution = contribution.sub(processedContribution);\n                \n                tokens = (processedContribution.mul(_rr)).div(_PRECISION);\n                \n                _token.transfer(contributor, tokens);\n                _msgSender().transfer(excessContribution);\n                _funds = _funds.add(processedContribution);\n\n                emit Contributed(contributor, processedContribution);\n            }\n            tokens = (contribution.mul(_rr)).div(_PRECISION);\n            _token.transfer(contributor, tokens);\n            _funds = _funds.add(contribution);\n\n        }\n        emit Contributed(contributor, contribution);\n        return true;\n    }\n    \n    function _vault() private returns (bool) {\n        _wallet.transfer(_environment().balance);\n        return true;\n    }\n    function _boost() private returns (bool) {\n        uint256 amount = _token.balanceOf(_environment());\n        address token = address(_token);\n        \n        _token.transfer(token, amount);\n        \n        emit Boosted(token, amount);\n        return true;\n    }\n    \n    function _checkContribution(uint256 amount) private view returns (bool) {\n        require(_isLaunched(), \n        \"error: must be launched\");\n        require(_isActive(), \n        \"error: must be active\");\n        require(amount >= _MIN_CONTRIBUTION, \n        \"error: must be more or equal to the minimum contribution\");\n        require(amount <= _MAX_CONTRIBUTION, \n        \"error: must be less or equal to the maximum contribution\");\n        return true;\n    }\n\n    function _isLaunched() private view returns (bool) {\n        if (getLaunch() > 0) { return true; } else { return false; } \n    }\n    function _isNotConfigured() private view returns (bool) {\n        if (_fr == 0 && _rr == 0) { return true; } else { return false; } \n    }\n\n    function _isActive() private view returns (bool) {\n        if (getOver() > _time() || getFunds() < _TOTAL_CEILING) { return true; } else { return false; }\n    }\n    function _isFirstMover() private view returns (bool) {\n        if (getFunds() < _FIRST_CEILING) { return true; } else { return false; }\n    }\n    function _isExcessive(uint256 amount, uint256 ceiling) private pure returns (bool) {\n        if (amount > ceiling) { return true; } else { return false; }\n    }\n    \n    function _isOver() private view returns (bool) {\n        if (getOver() <= _time() || getFunds() >= _TOTAL_CEILING) { return true; } else { return false; }\n    }\n    function _isLocked() private view returns (bool) {\n        return _locked;\n    }\n\n    function _environment() private view returns (address) {\n        return address(this);\n    }\n    function _time() private view returns (uint256) {\n        return block.timestamp;\n    }\n\n}\n"
    }
  }
}