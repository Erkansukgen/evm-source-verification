{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/ETHPool.sol": {
      "content": "/**\n *Submitted for verification at polygonscan.com on 2021-09-14\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, 'SafeMath: addition overflow');\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity's `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, 'SafeMath: subtraction overflow');\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity's `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, 'SafeMath: multiplication overflow');\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, 'SafeMath: division by zero');\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, 'SafeMath: modulo by zero');\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}\n\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    return msg.data;\n  }\n}\n\nabstract contract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor() {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    // function name() external view returns (string memory);\n    // function symbol() external view returns (string memory);\n    // function decimals() external view returns (uint8);\n    // function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    // function allowance(address owner, address spender) external view returns (uint);\n\n    // function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ncontract ETHPool is Ownable{\n    \n    using SafeMath for uint256;\n    \n    mapping(address=>bool) public supportedTokens;\n    uint256 supportedTokensCount = 0;\n    address[] public tokenAddresses;\n    address public walletAddress;\n    \n    constructor () {\n        walletAddress = msg.sender;\n    }\n    \n    event Deposit(address indexed from, address indexed to, address token_address, uint256 value);\n    event Withdraw(address indexed from, address indexed to, address token_address, uint256 value);\n\n    function updateWalletAddress(address addr) public onlyOwner {\n        walletAddress = addr;\n    }\n\n    function checkTokenAddressExists(address token_address) internal view returns (bool) {\n        for (uint i = 0 ; i < tokenAddresses.length ; i ++ ) {\n            if (tokenAddresses[i] == token_address ) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    function setToken(address token) public onlyOwner {\n        require(checkTokenAddressExists(token) == false, \"Token already set\");\n        supportedTokens[token] = true;\n        tokenAddresses.push(token);\n        supportedTokensCount = supportedTokensCount + 1;\n    }\n    \n    function enableToken(address token) public onlyOwner {\n        require(checkTokenAddressExists(token) == true, \"Token not yet exists\");\n        require(supportedTokens[token] == false, \"Token is already enabled\");\n        supportedTokens[token] = true;\n        if ( ! checkTokenAddressExists(token) ) {\n            tokenAddresses.push(token);\n        }\n        supportedTokensCount = supportedTokensCount + 1;\n    }\n\n    function disableToken(address token) public onlyOwner {\n        (checkTokenAddressExists(token) == true, \"Token not yet exists\");\n        require(supportedTokens[token] == true, \"Token is already disabled\");\n        supportedTokens[token] = false;\n        supportedTokensCount = supportedTokensCount - 1;\n    }\n    \n    // get the tokens that we supports\n    function getSupportedTokenAddresses() public view returns (address[] memory){\n        address[] memory supportedTokenAddresses = new address[](supportedTokensCount);\n        uint16 count = 0;\n        for ( uint256 i = 0 ; i < tokenAddresses.length ; i ++ ){\n            if (supportedTokens[tokenAddresses[i]]) {\n                supportedTokenAddresses[count] = tokenAddresses[i];\n                count = count + 1;\n            }\n        }\n        return supportedTokenAddresses;\n    }\n\n    function deposit(address token, uint256 amount) public {\n        require(supportedTokens[token], \"TOKEN ADDRESS IS NOT SUPPORTED\");\n        \n        uint256 balance = IERC20(token).balanceOf(address(msg.sender));\n        require(balance >= amount, \"Pool: INSUFFICIENT_INPUT_AMOUNT\");\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n        emit Deposit(msg.sender, address(this), token, amount);\n    }\n\n    function depositNative() public payable {\n        require(supportedTokens[address(0)], \"NATIVE TOKEN IS NOT SUPPORTED\");\n        emit Deposit(msg.sender, address(this), address(0), msg.value);\n    }\n    \n    function withdrawToken(address token) public onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));   \n        IERC20(token).transfer(walletAddress, balance);\n        emit Withdraw(address(this), walletAddress, token, balance);\n    }\n\n    function withdrawNativeToken() public onlyOwner {\n        uint256 balance = address(this).balance;\n        payable(walletAddress).transfer(balance);\n        emit Withdraw(address(this), walletAddress, address(0), balance);\n    }\n    \n    function balanceOfToken(address token) public view onlyOwner returns (uint256 amount) {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        return balance;\n    }\n\n    function balanceOfNativeToken() public view onlyOwner returns (uint256 amount) {\n        uint256 balance = address(this).balance;\n        return balance;\n    }\n}"
    }
  }
}