{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "ISmileToken.sol": {
      "content": "pragma solidity ^0.8.6;\n\n// SPDX-License-Identifier: MIT\n\ninterface ISmileToken {\n    function mint(address to) external returns(uint256 tokenID);\n    function balanceOf(address owner) external returns(uint256 balance);\n    function safeTransferFrom(address sender, address receiver, uint256 tokenID) external;\n    function totalSupply() external returns(uint256 tokens);\n    function setTokenUri(uint256 _tokenID, string memory _tokenUri) external;\n}"
    },
    "SmileOfDAO.sol": {
      "content": "pragma solidity ^0.8.6;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./ISmileToken.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract SmileOfDAO is Ownable {\n\n    address public executionWallet;\n    ISmileToken public token;\n    uint256 public proposalID;\n\n    struct Proposal{\n        address owner;\n        bool isApproved;\n        bool isCompleted;\n        uint256 upVote;\n        uint256 downVote;\n        uint256 abstainVote;\n    }\n    mapping(uint256 => Proposal) public proposal;\n    mapping(uint256 => mapping(address => bool)) public votedUser;\n\n    event ProposalCreated(uint256 id, address createdBy);\n    event ProposalApproved(uint256 id, address approvedBy);\n    event ProposalCompleted(uint256 id, address completeBy);\n    event Voting(uint256 id, address voteBy);\n\n    constructor(address _token){\n        token = ISmileToken(_token);\n    }\n\n    function setExecutionAddress(address _newExecutionAddress) external onlyOwner{\n        require(_newExecutionAddress != address(0), \"Not allow 0 address\");\n        executionWallet = _newExecutionAddress;  \n    }\n\n    function createProposal() public onlyOwner returns(uint256 id){\n        proposalID++;\n        proposal[proposalID] = Proposal({\n            owner: msg.sender,\n            isApproved: false,\n            isCompleted: false,\n            upVote: 0,\n            downVote: 0,\n            abstainVote: 0\n        });\n        emit ProposalCreated(proposalID, msg.sender);\n        return proposalID;\n    }\n\n    function approveProposal(uint256 _proposalID) external onlyOwner {\n        require(proposalID >= _proposalID, \"Proposal not exist\");\n        require(!proposal[_proposalID].isCompleted, \"Proposal is completed\");\n        proposal[_proposalID].isApproved = true;\n    }\n\n    function completeProposal(uint256 _proposalID) external onlyOwner {\n        require(proposalID >= _proposalID, \"Proposal not exist\");\n        require(proposal[_proposalID].isApproved, \"Proposal not approved\");\n        require(!proposal[_proposalID].isCompleted, \"Proposal is completed\");\n        proposal[_proposalID].isCompleted = true;\n    }\n\n    // _voteType = 1 : Up Vote\n    // _voteType = 2 : Down Vote\n    // _voteType = 3 : Nutral Vote\n    function voteProposal(uint256 _proposalID, uint256 _voteType) public {\n        require(token.balanceOf(msg.sender) >= 1, \"Not enough NFT in your account\");\n        require(proposalID >= _proposalID, \"Proposal not exist\");\n        require(proposal[_proposalID].isApproved, \"Proposal not approved\");\n        require(!proposal[_proposalID].isCompleted, \"Proposal is completed\");\n        require(!votedUser[_proposalID][msg.sender], \"Already vote on this\");\n\n        if(_voteType == 1){\n            proposal[_proposalID].upVote = proposal[_proposalID].upVote + token.balanceOf(msg.sender);\n        } else if(_voteType == 2){\n            proposal[_proposalID].downVote = proposal[_proposalID].downVote + token.balanceOf(msg.sender);\n        } else if(_voteType == 3){\n            proposal[_proposalID].abstainVote = proposal[_proposalID].abstainVote + token.balanceOf(msg.sender);\n        }\n\n        votedUser[_proposalID][msg.sender] = true;\n    }\n\n}"
    }
  }
}