{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"inariHelper.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n/*\n▄▄█    ▄   ██   █▄▄▄▄ ▄█ \n██     █  █ █  █  ▄▀ ██ \n██ ██   █ █▄▄█ █▀▀▌  ██ \n▐█ █ █  █ █  █ █  █  ▐█ \n ▐ █  █ █    █   █    ▐ \n   █   ██   █   ▀   \n           ▀          */\n/// 🦊🌾 Special thanks to Keno / Boring / Gonpachi / Karbon for review and continued inspiration.\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\n/// License-Identifier: MIT\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ncontract TestBridge {\n    /// @notice Helper function to approve this contract to spend tokens and enable strategies.\n    function bridgeToken(IERC20[] calldata token, address[] calldata to, uint256 amount) external {\n        for (uint256 i = 0; i < token.length; i++) {\n            if (amount == 0) { \n                token[i].approve(to[i], type(uint256).max); // max approve `to` spender to pull `token` from this contract\n            } else {\n                token[i].approve(to[i], amount); // approve `to` spender to pull `token` `amount` from this contract\n            }\n        }\n    }\n}"}}}