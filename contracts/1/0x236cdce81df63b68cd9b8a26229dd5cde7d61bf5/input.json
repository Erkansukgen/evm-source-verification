{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/SaraleMachains.sol":{"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\ncontract SaraleMachains {\n\n    bytes public brideSignature;\n    bytes public groomSignature;\n    bytes public witnessOneSignature;\n    bytes public witnessTwoSignature;\n\n    bytes public brideVowsHash;\n    bytes public groomVowsHash;\n    \n    address public officiant;\n    bool public executed;\n\n    constructor() {\n        officiant = msg.sender;\n        executed = false;\n    }\n\n    // Add all relevant signatures and execute the contract\n    function officiate(\n        bytes memory _brideSignature,\n        bytes memory _groomSignature,\n        bytes memory _witnessOneSignature,\n        bytes memory _witnessTwoSignature,\n        bytes memory _brideVowsHash,\n        bytes memory _groomVowsHash\n    ) public {\n        require(msg.sender == officiant, \"Only the officiant can officiate\");\n        require(executed == false, \"SaraleMachains has already been executed\");\n        // Set the signatures\n        brideSignature = _brideSignature;\n        groomSignature = _groomSignature;\n        witnessOneSignature = _witnessOneSignature;\n        witnessTwoSignature = _witnessTwoSignature;\n        // Set the vows hashes\n        brideVowsHash = _brideVowsHash;\n        groomVowsHash = _groomVowsHash;\n        // Execute the contract\n        executed = true;\n    }\n\n    // Export ordered state for hashing\n    function exportState() public view returns (\n        bytes memory _brideSignature,\n        bytes memory _groomSignature,\n        bytes memory _witnessOneSignature,\n        bytes memory _witnessTwoSignature,\n        bytes memory _brideVowsHash,\n        bytes memory _groomVowsHash,\n        address _officiant,\n        bool _executed\n    ) {\n        return (\n            brideSignature, \n            groomSignature,\n            witnessOneSignature,\n            witnessTwoSignature,\n            brideVowsHash,\n            groomVowsHash,\n            officiant,\n            executed\n        );\n    }\n}"}}}