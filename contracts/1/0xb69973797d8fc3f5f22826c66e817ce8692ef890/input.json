{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"UMIChrismas.sol":{"content":"pragma solidity >=0.4.23 <0.6.0;\r\n\r\ninterface UmiTokenInterface {\r\n    function putIntoBlacklist(address _addr) external;\r\n\r\n    function removeFromBlacklist(address _addr) external;\r\n\r\n    function inBlacklist(address _addr) external view returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface UniSageInterface {\r\n    function isUserExists(address user) external view returns (bool);\r\n}\r\n\r\ncontract UMIChrismas {\r\n    address owner;\r\n\r\n    //mainnet\r\n    address public umiTokenAddr = 0xf61DdA9A827cff208b6242FCF72AD1bB2006A995;\r\n    //goerli\r\n    // address public umiTokenAddr = 0x3B4005397f57804BEbFAf5B0aFA3B2DD13CD7F0F; \r\n    UmiTokenInterface public umiToken = UmiTokenInterface(umiTokenAddr);\r\n\r\n    //mainnet\r\n    address public unisageAddr = 0xd4845cBc79acE2cc6E48C8671a5860FfAB920bC2;\r\n    //goerli\r\n    // address public unisageAddr = 0xf61DdA9A827cff208b6242FCF72AD1bB2006A995;\r\n    \r\n    UniSageInterface public unisage = UniSageInterface(unisageAddr);\r\n\r\n    //switch\r\n    bool public open = true;\r\n\r\n    //total airdrop\r\n    uint256 public totalAirdropAmount = 100000000000000000000000;\r\n    //single address can receive amount\r\n    uint256 public singleAirdropAmount = 100000000000000000000;\r\n    //referrer address can receive amount\r\n    uint256 public singleAirdropAmountForReferrer = 0;\r\n\r\n    //statics\r\n    uint256 public hasAirdropAmount = 0;\r\n\r\n    //\r\n    mapping(address => bool) public successList;\r\n\r\n    //event list\r\n    event chrismasAirdropEvent(address indexed userAddr, uint256 airdropAmount);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    //user operation\r\n\r\n    function isUserJoined(address user) public view returns (bool) {\r\n        return successList[user];\r\n    }\r\n\r\n    function getChrismasAirdrop() external {\r\n        //condition 1, switch is open\r\n        require(open, \"umi chrismas has been closed\");\r\n\r\n        //condition 2, not in umi blacklist\r\n        bool isInblacklist = umiToken.inBlacklist(msg.sender);\r\n        require(!isInblacklist, \"address is in blacklist\");\r\n\r\n        //condition 3 , not registered\r\n        bool isRegisterd = unisage.isUserExists(msg.sender);\r\n        require(!isRegisterd, \"address is exsits\");\r\n\r\n        //condition 4, not joined before\r\n        bool isJoined = isUserJoined(msg.sender);\r\n        require(!isJoined, \"address has been join already\");\r\n\r\n        //condition 5, the remain airdrop amount is enough\r\n        require(\r\n            hasAirdropAmount + singleAirdropAmount <= totalAirdropAmount,\r\n            \"the remain airdrop amount is not enough\"\r\n        );\r\n\r\n        //transfer\r\n        umiToken.transfer(msg.sender,singleAirdropAmount);\r\n        umiToken.putIntoBlacklist(msg.sender);\r\n\r\n        hasAirdropAmount = hasAirdropAmount + singleAirdropAmount;\r\n\r\n        //record\r\n        successList[msg.sender] = true;\r\n\r\n        emit chrismasAirdropEvent(msg.sender, singleAirdropAmount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // owner operation\r\n    function refreshOpen(bool _open) external {\r\n        require(msg.sender == owner, \"only owner can do this operation\");\r\n        open = _open;\r\n    }\r\n\r\n    function changeTotalAirdropAmount(uint256 amount) external {\r\n        require(msg.sender == owner, \"only owner can do this operation\");\r\n        totalAirdropAmount = amount;\r\n    }\r\n\r\n    function changeSingleAirdropAmount(uint256 amount) external {\r\n        require(msg.sender == owner, \"only owner can do this operation\");\r\n        singleAirdropAmount = amount;\r\n    }\r\n\r\n    function changeSingleAirdropAmountForReferrer(uint256 amount) external {\r\n        require(msg.sender == owner, \"only owner can do this operation\");\r\n        singleAirdropAmountForReferrer = amount;\r\n    }\r\n\r\n    function changeUmiTokenAddr(address _addr) external {\r\n        require(msg.sender == owner, \"only owner can do this operation\");\r\n        umiTokenAddr = _addr;\r\n        umiToken = UmiTokenInterface(umiTokenAddr);\r\n    }\r\n\r\n    function changeUnisageAddr(address _addr) external {\r\n        require(msg.sender == owner, \"only owner can do this operation\");\r\n        unisageAddr = _addr;\r\n        unisage = UniSageInterface(unisageAddr);\r\n    }\r\n}"}}}