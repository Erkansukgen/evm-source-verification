{"language":"Solidity","settings":{"evmVersion":"istanbul","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/sssssssssss.sol":{"content":"pragma solidity 0.7.1;\n\n// kyber https://developer.kyber.network/docs/API_ABI-KyberNetworkProxy/\n// balancer https://soliditydeveloper.com/balancer\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\n\n// main net: https://etherscan.io/address/0x83a3921783159bfe8470d8d6f63972a5e129b71f\n// example 0x906681829b1b89b4d5b4907dc64de5db1d367311\n// https://kovan.etherscan.io/address/0x906681829b1b89b4d5b4907dc64de5db1d367311#writeContract\n// getSwapFee\n// getspotprice\n// approve ->\n// swapExactAmountIn tokenaddress tokenamountin tokenoutaddress minamountout maxprice\n// getBalance tokenaddress\n\ninterface ERC20 {\n    function approve(address _spender, uint _value)  external returns (bool success);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function balanceOf(address tokenOwner) external  returns (uint balance);\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function allowance(address, address) external returns (uint);\n\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\ninterface BalancerPool {\n    function swapExactAmountIn(address token1, uint amountin, address tokenout, uint minamountback, uint maxprice) external;  \n    function getBalance(address input) external view returns(uint);\n}\n\ncontract BalancerUniSushi {\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\n    address internal constant SUSHI_ROUTER_ADDRESS = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F ;\n\n  IUniswapV2Router02 public uniswapRouter;\n  IUniswapV2Router02 public sushiRouter;\n  address public WETH_Address;\n\n    event OkOrNot( // this prints out events to etherscan\n        uint _value1,\n        uint _value2,\n        uint _value3,\n        uint _value4,\n        uint _value\n    );\n    \n    address  internal  owner;\nconstructor() { \n         owner= msg.sender;\n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n        sushiRouter = IUniswapV2Router02(SUSHI_ROUTER_ADDRESS);\n\n    WETH_Address = uniswapRouter.WETH();\n\n}\n\nmodifier onlyOwner() {\n  if ( owner  == msg.sender) _;\n}\n\nIFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\nmodifier discountCHI {\n    uint256 gasStart = gasleft();\n    _;\n    uint256 gasSpent = uint(21000) + gasStart - gasleft() + uint(16) * msg.data.length;\n    chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n}\n\n    function withdrawETHAndTokens() public onlyOwner{\n        ERC20 WETH = ERC20(WETH_Address);\n        uint wethBalance = WETH.balanceOf(address(this));\n\n    if (wethBalance > 0) {\n        // refund leftover ETH\n      WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n\n    }\n\n       // WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n        msg.sender.send(address(this).balance);\n    }\n    function withdrawExactToken(address me) public onlyOwner discountCHI{\n\n     ERC20 SendMe = ERC20(me);\n\n\n     SendMe.transfer( msg.sender, SendMe.balanceOf(address(this)));\n        //require(success, \"ERR_ETH_FAILED\");\n    \n       // WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n    }\n    \n    \n    function swapUniBalancer(address poolAddressIn, address buyTokenAddress, address sellTokenAddress, uint AmountMinUni, uint amountEthIn) public onlyOwner discountCHI{\n    BalancerPool  BLPool = BalancerPool(poolAddressIn);\n\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    uniswapRouter.swapExactETHForTokens{ value: amountEthIn }(AmountMinUni, getPathForTwoTokens(WETH_Address, buyTokenAddress ), address(this), deadline);\n\n\n    uint MinEthToFinish = amountEthIn + 15000000000000000;\n// swap back !!!! \n    ERC20 TheBought = ERC20(buyTokenAddress);\n    uint Gec = TheBought.balanceOf(address(this));\n    TheBought.approve(address(BLPool), Gec);\n    BLPool.swapExactAmountIn(\n        buyTokenAddress,\n        Gec, \n        sellTokenAddress,\n        MinEthToFinish,  // minimum amount of buy token back\n      //  amountEthIn,\n        type(uint).max // maxprice\n      );\n  \n  }\n\n\n function swapBalancerUni(address poolAddressIn, address sellTokenAddress, address buyTokenAddress, uint amountEthIn) public onlyOwner discountCHI{\n    emit OkOrNot(0,0,1,0,0);\n    BalancerPool  BLPool = BalancerPool(poolAddressIn);\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n\n    ERC20 WETH = ERC20(WETH_Address);\n    WETH.deposit{value : amountEthIn}();\n    WETH.approve(address(BLPool), type(uint).max);\n\n    uint MinEthToFinish = amountEthIn + 15000000000000000;\n\n\n    BLPool.swapExactAmountIn(\n        sellTokenAddress,\n        amountEthIn, \n        buyTokenAddress,\n        uint(1),  // minimum amount of buy token back\n        type(uint).max // maxprice\n      );\n\n    ERC20  buyToken = ERC20(buyTokenAddress);\n\n    buyToken.approve(address(uniswapRouter), type(uint).max);\n    uniswapRouter.swapExactTokensForETH(buyToken.balanceOf(address(this)), \n      MinEthToFinish, \n      getPathForTwoTokens(buyTokenAddress,WETH_Address),\n      address(this), \n      deadline);\n\n      \n\n    // refund leftover ETH to user\n //   (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\n //   require(success, \"refund failed\");\n  \n   \n   // uint256 currentTokenBalance = WETH.balanceOf(address(this));\n   // WETH.transfer(msg.sender, currentTokenBalance);\n  \n  \n  }\n\n    function convertUniSushi(uint Amount, address buyTokenAddress, uint Amount1, uint Amount2) public onlyOwner discountCHI{\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    ERC20 addressOut = ERC20(buyTokenAddress);\n    uniswapRouter.swapExactETHForTokens{ value: Amount }(Amount1, getPathForTwoTokens(WETH_Address, buyTokenAddress ), address(this), deadline);\n    addressOut.approve(address(sushiRouter), type(uint).max);\n    sushiRouter.swapExactTokensForETH(addressOut.balanceOf(address(this)), \n      Amount2, \n      getPathForTwoTokens(buyTokenAddress,WETH_Address),\n      address(this), \n      deadline);\n  }\n\n     function convertSushiUni(uint Amount, address buyTokenAddress, uint Amount1, uint Amount2) public onlyOwner discountCHI{\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    ERC20 addressOut = ERC20(buyTokenAddress);\n    sushiRouter.swapExactETHForTokens{ value: Amount }(Amount1, getPathForTwoTokens(WETH_Address, buyTokenAddress ), address(this), deadline);\n    addressOut.approve(address(uniswapRouter), type(uint).max);\n    uniswapRouter.swapExactTokensForETH(addressOut.balanceOf(address(this)), \n      Amount2, \n      getPathForTwoTokens(buyTokenAddress,WETH_Address),\n      address(this), \n      deadline);\n  }\n\n\n\n  \n  \n function getPriceAndReserveFromOracle(address poolAddress1, address poolAddress2, address poolAddress3, address poolAddress4, address sellToken, address  buyToken) public view returns (uint256[8] memory amounts1){\n        BalancerPool BLPool0 = BalancerPool(poolAddress1);\n        BalancerPool BLPool1 = BalancerPool(poolAddress2);\n        BalancerPool BLPool2 = BalancerPool(poolAddress3);\n        BalancerPool BLPool3 = BalancerPool(poolAddress4);\n\n        // get the reserves:\n        uint blnc_00 = BLPool0.getBalance(sellToken);\n        uint blnc_01 = BLPool0.getBalance(buyToken);\n       uint blnc_10 = BLPool1.getBalance(sellToken);\n        uint blnc_11 = BLPool1.getBalance(buyToken);\n       uint blnc_20 = BLPool2.getBalance(sellToken);\n        uint blnc_21 = BLPool2.getBalance(buyToken);\n       uint blnc_30 = BLPool3.getBalance(sellToken);\n        uint blnc_31 = BLPool3.getBalance(buyToken);\n\n        // get the price \n        uint[8] memory returnvalues;\n       // uint spotPrice = BLPool.getSpotPrice(sellToken,buyToken);\n        returnvalues[0] = blnc_00;\n        returnvalues[1] = blnc_01;\n        returnvalues[2] = blnc_10;\n        returnvalues[3] = blnc_11;\n        returnvalues[4] = blnc_20;\n        returnvalues[5] = blnc_21;\n        returnvalues[6] = blnc_30;\n        returnvalues[7] = blnc_31;\n        return returnvalues;\n    }\n\n // function getEstimatedETHforDAI(uint daiAmount) public view returns (uint[] memory) {\n //   return uniswapRouter.getAmountsIn(daiAmount, getPathForTokens(uniswapRouter.WETH(),uniswapRouter.WETH()));\n // }\n\n  function getPathForTwoTokens(address add1, address add2) private view returns (address[] memory) {\n    address[] memory path = new address[](2);\n//    path[0] = uniswapRouter.WETH();\n    path[0] = add1;\n    path[1] = add2;\n    return path;\n  }\n  \n\n  // important to receive ETH\n  receive() external payable {}\n}"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"}}}