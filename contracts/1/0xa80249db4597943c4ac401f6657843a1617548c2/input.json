{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"inari.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n/*\n‚ñÑ‚ñÑ‚ñà    ‚ñÑ   ‚ñà‚ñà   ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ ‚ñÑ‚ñà \n‚ñà‚ñà     ‚ñà  ‚ñà ‚ñà  ‚ñà  ‚ñÑ‚ñÄ ‚ñà‚ñà \n‚ñà‚ñà ‚ñà‚ñà   ‚ñà ‚ñà‚ñÑ‚ñÑ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñå  ‚ñà‚ñà \n‚ñê‚ñà ‚ñà ‚ñà  ‚ñà ‚ñà  ‚ñà ‚ñà  ‚ñà  ‚ñê‚ñà \n ‚ñê ‚ñà  ‚ñà ‚ñà    ‚ñà   ‚ñà    ‚ñê \n   ‚ñà   ‚ñà‚ñà   ‚ñà   ‚ñÄ   \n           ‚ñÄ          */\n/// ü¶äüåæ Special thanks to Keno / Boring / Gonpachi / Karbon for review and continued inspiration.\npragma solidity 0.8.6;\n\ninterface ICreamRate {\n    function exchangeRateStored() external view returns (uint256);\n}\n\n/// @notice Helper contract for Inari calculations. \ncontract InariZenko {\n    ICreamRate constant crSushiToken = ICreamRate(0x338286C0BC081891A4Bda39C7667ae150bf5D206); // crSUSHI staking contract for SUSHI\n    ICreamRate constant crXSushiToken = ICreamRate(0x228619CCa194Fbe3Ebeb2f835eC1eA5080DaFbb2); // crXSUSHI staking contract for xSUSHI\n    \n    // **** SUSHI\n    function getSushiIntoCream(uint256 amountIn) external view returns (uint256 cTokenAmount) { \n        cTokenAmount = amountIn / 10**18 / ICreamRate(crSushiToken).exchangeRateStored(); \n    }\n    \n    function getSushiOutOfCream(uint256 amountOut) external view returns (uint256 underlyingAmount) { \n        underlyingAmount = amountOut / 10**18 * ICreamRate(crSushiToken).exchangeRateStored(); \n    }\n    \n    // **** XSUSHI\n    function getXSushiIntoCream(uint256 amountIn) external view returns (uint256 cTokenAmount) { \n        cTokenAmount = amountIn / 10**18 / ICreamRate(crXSushiToken).exchangeRateStored(); \n    }\n    \n    function getXSushiOutOfCream(uint256 amountOut) external view returns (uint256 underlyingAmount) { \n        underlyingAmount = amountOut / 10**18 * ICreamRate(crXSushiToken).exchangeRateStored(); \n    }\n    \n    // **** GENERAL\n    function getIntoCream(address cToken, uint256 amountIn) external view returns (uint256 cTokenAmount) {\n        cTokenAmount = amountIn / ICreamRate(cToken).exchangeRateStored(); \n    }\n    \n    function getOutOfCream(address cToken, uint256 amountOut) external view returns (uint256 underlyingAmount) {\n        underlyingAmount = amountOut * ICreamRate(cToken).exchangeRateStored(); \n    }\n}"}}}