{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"vmax/FeeTransfer.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-05-31\r\n*/\r\npragma solidity 0.8.7;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract DonationTransfer is Ownable {\r\n    using SafeMath for uint256;\r\n   \r\n    address public erc20Address;\r\n    address public fundAddress;\r\n    \r\n    bool public isFeeValue = false;\r\n    bool public isFeeRate = false;\r\n    \r\n    uint256 public feeETH = 0;\r\n    uint256 public feeToken = 0;\r\n    \r\n    constructor(address _fundAddress) {\r\n        fundAddress = _fundAddress;\r\n        setFeeRate(20, 20);\r\n    }\r\n  \r\n    receive() external payable {revert();}\r\n    \r\n    \r\n    function setFeeValue(uint256 valueETH, uint256 valueToken) public onlyOwner {\r\n        require(valueETH > 0 && valueToken > 0);\r\n        isFeeValue = true;\r\n        isFeeRate = false;\r\n        feeETH = valueETH;\r\n        feeToken = valueToken;\r\n    }\r\n    function setFeeRate(uint256 rateETH, uint256 rateToken) public onlyOwner {\r\n        require(rateETH > 0 && rateETH < 100 && rateToken > 0 && rateToken < 100); // 1% ~ 99%\r\n        isFeeValue = false;\r\n        isFeeRate = true;\r\n        feeETH = rateETH;\r\n        feeToken = rateToken;\r\n    }\r\n    function clearFee() public onlyOwner {\r\n        isFeeValue = false;\r\n        isFeeRate = false;\r\n    }\r\n    function setFundWallet(address fund) public onlyOwner {\r\n        fundAddress = fund;\r\n    }\r\n    function setErc20(address erc20) public onlyOwner {\r\n        erc20Address = erc20;\r\n    }\r\n    \r\n    function transferETH(address to) payable external {\r\n        uint256 fee;\r\n        uint256 sendAmount;\r\n        (sendAmount, fee) = calcFee(msg.value, feeETH);\r\n        assert(sendAmount > 0);\r\n        \r\n        TransferHelper.safeTransferETH(to, sendAmount);\r\n        if(fee > 0) {\r\n            TransferHelper.safeTransferETH(fundAddress, fee);\r\n        }\r\n    }\r\n\r\n    function transferToken(address to, uint256 amount) external {\r\n        require(erc20Address != address(0));\r\n        uint256 fee;\r\n        uint256 sendAmount;\r\n        (sendAmount, fee) = calcFee(amount, feeToken);\r\n        require(sendAmount > 0);\r\n        TransferHelper.safeTransferFrom(erc20Address, address(msg.sender), to, sendAmount);\r\n        if(fee > 0) {\r\n            TransferHelper.safeTransferFrom(erc20Address, address(msg.sender), fundAddress, fee);    \r\n        }\r\n    }\r\n \r\n    function calcFee(uint256 amount, uint256 fee) internal view returns(uint256, uint256) {\r\n        if(isFeeValue) {\r\n            if(amount <= fee) {\r\n                return (0,0);\r\n            }\r\n            return (amount.sub(fee), fee);\r\n        } else if(isFeeRate) {\r\n            uint256 _calcFee = amount.mul(fee).div(100);\r\n            return (amount.sub(_calcFee), _calcFee);\r\n        } else {\r\n            return (amount, 0);    \r\n        }\r\n    }\r\n    \r\n    function calcFeeETH(uint256 amount) external view returns(uint256, uint256) {\r\n        return calcFee(amount, feeETH);\r\n    }\r\n    function calcFeeToken(uint256 amount) external view returns(uint256, uint256) {\r\n        return calcFee(amount, feeToken);\r\n    }\r\n    \r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}"}}}