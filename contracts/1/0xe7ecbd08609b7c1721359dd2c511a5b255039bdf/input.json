{"language":"Solidity","sources":{"FixedSplitPooledPriceGate.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"IPriceGate.sol\";\nimport \"IIncinerator.sol\";\n\ncontract FixedSplitPooledPriceGate is IPriceGate {\n\n    struct Gate {\n        uint ethReceived;\n        uint ethCost;\n        address burnToken;\n        address incinerator;\n        address payable beneficiary;\n        uint beneficiaryPct;\n    }\n\n    uint public numGates;\n    mapping (uint => Gate) public gates;\n\n    address public management;\n\n    modifier managementOnly() {\n        require (msg.sender == management, 'Only management may call this');\n        _;\n    }\n\n    constructor (address mgmt) {\n        management = mgmt;\n    }\n\n    function addGate(uint _ethCost, uint _beneficiaryPct, address _incinerator, address _burnToken, address payable _beneficiary) external managementOnly {\n        numGates += 1;\n        Gate storage gate = gates[numGates];\n\n        require(_beneficiaryPct <= 100, 'Percents must be between 0 and 100');\n\n        gate.ethCost = _ethCost;\n        gate.burnToken = _burnToken;\n        gate.incinerator = _incinerator;\n        gate.beneficiary = _beneficiary;\n        gate.beneficiaryPct = _beneficiaryPct;\n    }\n\n    // change the management key\n    function setManagement(address newMgmt) external managementOnly {\n        management = newMgmt;\n    }\n\n    function getCost(uint index) override external view returns (uint _ethCost) {\n        Gate memory gate = gates[index];\n        return gate.ethCost;\n    }\n\n   function passThruGate(uint index, address) override external payable {\n        Gate memory gate = gates[index];\n        require(msg.value >= gate.ethCost, 'Please send more ETH');\n        gate.ethReceived += msg.value;\n    }\n\n    function distribute(uint index) external {\n        Gate memory gate = gates[index];\n        uint balance = gate.ethReceived;\n        uint beneficiaryAmt = balance * gate.beneficiaryPct / 100;\n        uint incinerateAmt = balance - beneficiaryAmt;\n        gate.beneficiary.transfer(beneficiaryAmt);\n        IIncinerator(gate.incinerator).incinerate{value: incinerateAmt}(gate.burnToken);\n    }\n}\n"},"IPriceGate.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\ninterface IPriceGate {\n\n    function getCost(uint) external view returns (uint ethCost);\n\n    function passThruGate(uint, address) external payable;\n}\n"},"IIncinerator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\ninterface IIncinerator {\n\n    function incinerate(address tokenAddr) external payable;\n}\n"}},"settings":{"evmVersion":"istanbul","optimizer":{"enabled":true,"runs":200},"libraries":{"FixedSplitPooledPriceGate.sol":{}},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}}