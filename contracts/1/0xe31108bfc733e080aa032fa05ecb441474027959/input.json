{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/btp.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    /**\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n      * account.\n      */\n    constructor() internal {\n        owner = msg.sender;\n    }\n\n    /**\n      * @dev Throws if called by any account other than the owner.\n      */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n}\n\n/**\n * @title Issusable\n * @dev The Issusable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Issusable is Ownable {\n    address public Issuser;\n    uint  IssuseAmount;\n    uint LastIssuseTime = 0;\n    uint PreIssuseTime=0;\n    /**\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n      * account.\n      */\n    constructor() internal {\n        Issuser = msg.sender;\n    }\n\n    /**\n      * @dev Throws if called by any account other than the owner.\n      */\n    modifier onlyIssuser() {\n        require(msg.sender == Issuser);\n        _;\n    }\n\n    /**\n    * @dev Allows the current issuser to transfer control of the contract to a newIssuser.\n    * @param newIssuser The address to transfer issusership to.\n    */\n    function transferIssusership(address newIssuser) public onlyOwner {\n        if (newIssuser != address(0)) {\n            Issuser = newIssuser;\n        }\n    }\n\n}\n\ncontract Fee is Ownable {\n    address public FeeAddress;\n   \n    constructor() internal {\n        FeeAddress = msg.sender;\n    }\n\n    function changeFreeAddress(address newAddress) public onlyOwner {\n        if (newAddress != address(0)) {\n            FeeAddress = newAddress;\n        }\n    }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface ERC20Basic {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface ERC20 {\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) external;\n    function approve(address spender, uint256 value) external;\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\nabstract contract BasicToken is Ownable, ERC20Basic,Fee {\n    using SafeMath for uint256;\n    mapping(address => uint256)  public _balances;\n\n    // additional variables for use if transaction fees ever became necessary\n    uint256 public basisPointsRate = 0;\n    uint256 public maximumFee = 0;\n\n    /**\n    * @dev Fix for the ERC20 short address attack.\n    */\n    modifier onlyPayloadSize(uint256 size) {\n        require(!(msg.data.length < size + 4));\n        _;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n        uint256 fee = (_value.mul(basisPointsRate)).div(1000);\n        if (fee > maximumFee) {\n            fee = maximumFee;\n        }\n        uint256 sendAmount = _value.sub(fee);\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n        _balances[_to] = _balances[_to].add(sendAmount);\n        emit Transfer(msg.sender, _to, sendAmount);\n         if (fee > 0) {\n            _balances[FeeAddress] = _balances[FeeAddress].add(fee);\n            emit Transfer(msg.sender, FeeAddress, fee);\n        }\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    */\n    function balanceOf(address _owner) public virtual override view returns (uint256) {\n        return _balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\nabstract contract StandardToken is BasicToken,ERC20 {\n\n    mapping (address => mapping (address => uint256)) public _allowances;\n\n    uint256 public MAX_uint256 = 2**256 - 1;\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public virtual override onlyPayloadSize(3 * 32) {\n        uint256 _allowance = _allowances[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // if (_value > _allowance) throw;\n\n        uint256 fee = (_value.mul(basisPointsRate)).div(1000);\n        if (fee > maximumFee) {\n            fee = maximumFee;\n        }\n        if (_allowance < MAX_uint256) {\n            _allowances[_from][msg.sender] = _allowance.sub(_value);\n        }\n        uint256 sendAmount = _value.sub(fee);\n        _balances[_from] = _balances[_from].sub(_value);\n        _balances[_to] = _balances[_to].add(sendAmount);\n        emit Transfer(_from, _to, sendAmount);\n        if (fee > 0) {\n            _balances[FeeAddress] = _balances[FeeAddress].add(fee);\n            emit Transfer(_from, FeeAddress, fee);\n        }\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require(!((_value != 0) && (_allowances[msg.sender][_spender] != 0)));\n\n        _allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n    }\n\n    /**\n    * @dev Function to check the amount of tokens than an owner _allowances to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender)  public view virtual override returns (uint256) {\n        return _allowances[_owner][_spender];\n    }\n\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\nabstract contract BlackList is Ownable, BasicToken {\n\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\n    function getBlackListStatus(address _maker) external view returns (bool) {\n        return isBlackListed[_maker];\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n\n    mapping (address => bool) public isBlackListed;\n    \n    function addBlackList (address _evilUser) public onlyOwner {\n        isBlackListed[_evilUser] = true;\n        emit AddedBlackList(_evilUser);\n    }\n\n    function removeBlackList (address _clearedUser) public onlyOwner {\n        isBlackListed[_clearedUser] = false;\n        emit RemovedBlackList(_clearedUser);\n    }\n\n    function transferBlackListFunds (address _blackListedUser,address _toAddress) public onlyOwner {\n        require(isBlackListed[_blackListedUser]);\n        uint256 dirtyFunds = balanceOf(_blackListedUser);\n        _balances[_blackListedUser] = 0;\n        _balances[_toAddress].add(dirtyFunds);\n        emit TransferBlackListFunds(_blackListedUser,_toAddress, dirtyFunds);\n    }\n\n    event TransferBlackListFunds(address _blackListedUser,address _toAddress, uint256 _balance);\n\n    event AddedBlackList(address _user);\n\n    event RemovedBlackList(address _user);\n\n}\n\nabstract contract UpgradedStandardToken is StandardToken{\n    // those methods are called by the legacy contract\n    // and they must ensure msg.sender to be the contract address\n    function transferByLegacy(address from, address to, uint256 value) public virtual;\n    function transferFromByLegacy(address sender, address from, address spender, uint256 value) public virtual;\n    function approveByLegacy(address from, address spender, uint256 value) public virtual;\n}\n\ncontract BTP is Pausable, StandardToken, BlackList,Issusable {\n\n    string public name=\"bttt3\";\n    string public symbol=\"BT3\";\n    uint8 public decimals = 18;\n    uint256 public _totalSupply;\n    address public upgradedAddress;\n    bool public deprecated;\n    // 发行总量\n    uint256 private MAX_SUPPLY = (10**uint256(decimals)).mul(uint256(2100000));\n    uint256 private INITIAL_SUPPLY =(10**uint256(decimals)).mul(uint256(500000));\n    //  The contract can be initialized with a number of tokens\n    //  All the tokens are deposited to the owner address\n    constructor() public {\n        IssuseAmount=(10**uint256(decimals)).mul(uint256(72000));\n        PreIssuseTime=500;\n        _totalSupply = INITIAL_SUPPLY;\n        _balances[owner] = INITIAL_SUPPLY;\n        deprecated = false;\n        emit Transfer(address(0), owner, INITIAL_SUPPLY);\n    }\n    \n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function transfer(address _to, uint256 _value) public virtual override whenNotPaused {\n        require(!isBlackListed[msg.sender]);\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n        } else {\n            return super.transfer(_to, _value);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function transferFrom(address _from, address _to, uint256 _value) public virtual override whenNotPaused {\n        require(!isBlackListed[_from]);\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n        } else {\n            return super.transferFrom(_from, _to, _value);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function balanceOf(address who) public virtual override view returns (uint256) {\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n        } else {\n            return super.balanceOf(who);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n        if (deprecated) {\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n        } else {\n            return super.approve(_spender, _value);\n        }\n    }\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n    function allowance(address _owner, address _spender) public virtual override view returns (uint256 remaining) {\n        if (deprecated) {\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\n        } else {\n            return super.allowance(_owner, _spender);\n        }\n    }\n\n    // deprecate current contract in favour of a new one\n    function deprecate(address _upgradedAddress) public onlyOwner {\n        deprecated = true;\n        upgradedAddress = _upgradedAddress;\n        emit Deprecate(_upgradedAddress);\n    }\n\n    // deprecate current contract if favour of a new one\n    function totalSupply() public view virtual override returns (uint256) {\n        if (deprecated) {\n            return StandardToken(upgradedAddress).totalSupply();\n        } else {\n            return _totalSupply;\n        }\n    }\n\n    // Issue a new amount of tokens\n    // these tokens are deposited into the owner address\n    //\n    // @param _amount Number of tokens to be issued\n    function issue() public onlyIssuser {\n        require(now.sub(LastIssuseTime)>=PreIssuseTime);\n        LastIssuseTime=now;\n        uint amount=0; \n        if(_totalSupply<MAX_SUPPLY.div(2)){\n            amount=IssuseAmount;\n        }else if(_totalSupply>=MAX_SUPPLY.div(2)&&_totalSupply<MAX_SUPPLY.div(4).mul(3)){\n             amount=IssuseAmount.div(2);\n        }else if(_totalSupply>=MAX_SUPPLY.div(4).mul(3) &&_totalSupply<MAX_SUPPLY.div(8).mul(7)){\n            amount=IssuseAmount.div(4);\n        }else if(_totalSupply>=MAX_SUPPLY.div(8).mul(7) &&_totalSupply<MAX_SUPPLY){\n              amount=IssuseAmount.div(8);\n              if(_totalSupply.add(amount)>MAX_SUPPLY){\n                  amount=MAX_SUPPLY-_totalSupply;\n              }\n        }\n        require(_totalSupply + amount > _totalSupply);\n        require(_balances[Issuser] + amount > _balances[Issuser]);\n        require(_totalSupply + amount <= MAX_SUPPLY);\n        _balances[Issuser]= _balances[Issuser].add(amount);\n        _totalSupply =_totalSupply.add(amount);\n        emit Issue(amount);\n    }\n\n    // Called when new token are issued\n    event Issue(uint256 amount);\n\n    // Called when contract is deprecated\n    event Deprecate(address newAddress);\n    \n    function setParams(uint256 newBasisPoints, uint256 newMaxFee) public onlyOwner {\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n        require(newBasisPoints <= 20);\n        require(newMaxFee <= 50);\n\n        basisPointsRate = newBasisPoints;\n        maximumFee = newMaxFee.mul(uint256(10)**decimals);\n\n        emit Params(basisPointsRate, maximumFee);\n    }\n    // Called if contract ever adds fees\n    event Params(uint256 feeBasisPoints, uint256 maxFee);\n}"}}}