{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/plsBurndrop.sol": {
      "content": "\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/IBurnableERC20.sol\n\npragma solidity ^0.6.0;\n\ninterface IBurnableERC20 {\n    function burn(address _from, uint _value) external;\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n}\n\n// File: contracts/PlsBurnDrop.sol\n\npragma solidity ^0.6.0;\n\n\n\n\ncontract PlsBurnDrop is Ownable {\n    event ClaimedTokens(\n        address indexed token,\n        address indexed owner,\n        uint256 amount\n    );\n\n    event BurnDrop(\n        address sender,\n        uint256 ringAmount,\n        uint256 plsAmount\n    );\n\n    using SafeMath for uint256;\n    uint256 public startRatio = 0;\n    uint256 public endRatio = 0;\n    uint256 public startTime = 0;\n    uint256 public endTime = 0;\n    uint256 public denominator = 1000000;\n    address public RING_TOKEN;\n    address public PLS_TOKEN;\n    bool public paused = false;\n\n    constructor(\n        uint256 _startRatio,\n        uint256 _endRatio,\n        uint256 _startTime,\n        uint256 _endTime,\n        address _ring,\n        address _pls\n    ) public {\n        require(\n            _startRatio > 0 && _startRatio < denominator,\n            \"_startRatio error\"\n        );\n        require(_endRatio > 0 && _endRatio < denominator, \"_endRatio error\");\n        require(_startTime > 0 && _startTime < _endTime, \"_startTime error\");\n        require(_endTime > 0, \"_endTime error\");\n        require(_ring != address(0) && _pls != address(0), \"_ring _pls error\");\n\n        startRatio = _startRatio;\n        endRatio = _endRatio;\n        startTime = _startTime;\n        endTime = _endTime;\n        RING_TOKEN = _ring;\n        PLS_TOKEN = _pls;\n    }\n\n    modifier isWork() {\n        require(!paused, \"Not started\");\n        _;\n    }\n\n    /**\n     * @dev ERC223 fallback function, make sure to check the msg.sender is from target token contracts\n     * @param _from - person who transfer token in for deposits or claim deposit with penalty KTON.\n     * @param _amount - amount of token.\n     * @param _data - data which indicate the operations.\n     */\n    function tokenFallback(\n        address _from,\n        uint256 _amount,\n        bytes memory _data\n    ) public isWork {\n        require(msg.sender == PLS_TOKEN, \"Just allow pls tokens.\");\n        require(_amount > 0, \"Transfer token must gt 0.\");\n\n        uint256 amountOut = convertFor(_amount);\n        IBurnableERC20 ring = IBurnableERC20(RING_TOKEN);\n        IBurnableERC20 pls = IBurnableERC20(PLS_TOKEN);\n\n        pls.transfer(address(0), _amount);\n        ring.transfer(_from, amountOut);\n        emit BurnDrop(_from, amountOut, _amount);\n    }\n\n    function convertFor(uint256 _amountIn) public view returns (uint256) {\n        if (now > endTime) {\n            return _amountIn.mul(endRatio).div(denominator);\n        }\n\n        if (now < startTime) {\n            return _amountIn.mul(startRatio).div(denominator);\n        }\n\n        uint256 timePercent = now.sub(startTime).mul(denominator).div(\n            endTime.sub(startTime)\n        );\n\n        if (startRatio > endRatio) {\n            uint256 gap = startRatio - endRatio;\n            return\n                _amountIn\n                    .mul(startRatio.sub(timePercent.mul(gap).div(denominator)))\n                    .div(denominator);\n        } else {\n            uint256 gap = endRatio - startRatio;\n            return\n                _amountIn\n                    .mul(startRatio.add(timePercent.mul(gap).div(denominator)))\n                    .div(denominator);\n        }\n    }\n\n    function setRatio(uint256 _startRatio, uint256 _endRatio) public onlyOwner {\n        require(\n            _startRatio > 0 && _startRatio < denominator,\n            \"Start ratio error.\"\n        );\n        require(_endRatio > 0 && _endRatio < denominator, \"End ratio error.\");\n        startRatio = _startRatio;\n        endRatio = _endRatio;\n    }\n\n    function setTime(uint256 _startTime, uint256 _endTime) public onlyOwner {\n        require(_startTime > 0 && _startTime < _endTime, \"Start time error.\");\n        require(_endTime > 0, \"End time error.\");\n        startTime = _startTime;\n        endTime = _endTime;\n    }\n\n    function setRingContract(address _address) public onlyOwner {\n        require(_address != address(0), \"address error\");\n        RING_TOKEN = _address;\n    }\n\n    function setPlsContract(address _address) public onlyOwner {\n        require(_address != address(0), \"address error\");\n        PLS_TOKEN = _address;\n    }\n\n    /// @notice This method can be used by the owner to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == address(0)) {\n            msg.sender.transfer(address(this).balance);\n            return;\n        }\n        IBurnableERC20 token = IBurnableERC20(_token);\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n\n        emit ClaimedTokens(_token, msg.sender, balance);\n    }\n\n    function setPaused(bool _status) public onlyOwner {\n        paused = _status;\n    }\n}\n"
    }
  }
}