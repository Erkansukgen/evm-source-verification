{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DracoExec.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.4;\n\ninterface UniswapV2ERC20 {\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function transfer(address to, uint value) external returns (bool);\n    function approve(address spender, uint value) external returns (bool);\n}\n\ninterface UniswapV2Router02 {\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ncontract DracoExec {\n    \n    address owner;\n    \n    mapping (address => bool) whitelist;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be Owner\");\n        _;\n    }\n    \n    modifier onlyWhitelist(address _tocheck) {\n        require(whitelist[_tocheck], \"Address is not in whitelist\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n        whitelist[msg.sender] = true;\n    }\n    \n    function getOwner() external view onlyOwner returns(address) {\n        return owner;\n    }\n    \n    function addWhitelist(address _to_add) external onlyOwner {\n        whitelist[_to_add] = true;\n    }\n    \n    function removeWhitelist(address _to_remove) external onlyOwner {\n        whitelist[_to_remove] = false;\n    }\n    \n    function getWhitelist(address _to_get) external view onlyOwner returns(bool) {\n        return whitelist[_to_get];\n    }\n    \n    function changeOwner(address _new_owner) external onlyOwner {\n        owner = _new_owner;\n    }\n    \n    function withdrawToken(address _token, uint _amount) external onlyOwner {\n        UniswapV2ERC20(_token).transfer(msg.sender, _amount);\n    }\n    \n    function dracoTrade(address _router, uint _amount_in, uint _amount_out_min, address[] memory _path, uint _deadline) external onlyWhitelist(msg.sender) {\n        uint MAX_INT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n        if (UniswapV2ERC20(_path[0]).allowance(address(this), _router) == 0) {\n            UniswapV2ERC20(_path[0]).approve(_router, MAX_INT);\n        }\n        if (_amount_in == 0) {\n            _amount_in = UniswapV2ERC20(_path[0]).balanceOf(address(this));\n            if (_amount_in == 0) {\n                revert();\n            }\n            uint[] memory amount_out_list = UniswapV2Router02(_router).getAmountsOut(_amount_in, _path);\n            _amount_out_min = amount_out_list[amount_out_list.length - 1];\n        }\n        \n        UniswapV2Router02(_router).swapExactTokensForTokens(_amount_in, _amount_out_min, _path, address(this), _deadline);\n    }\n    \n    function killMe() external onlyOwner {\n        selfdestruct(msg.sender);\n    }\n    \n}"}}}