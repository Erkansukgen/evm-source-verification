{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DeWETHerV2.sol":{"content":"pragma solidity 0.6.12;\n\n\ninterface WETHInterace {\n    function withdraw(uint256 wad) external;\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n    function balanceOf(address src) external view returns (uint256 wad);\n}\n\n\ncontract DeWETHer {\n    event Unwrapped(\n        address account,\n        uint256 unwrappedAmount\n    );\n    \n    WETHInterace private _WETH = WETHInterace(\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n    );\n\n    receive() external payable {}\n    \n    function unwrapAllWETHFor(address account) external {\n        uint256 wethBalance = _WETH.balanceOf(account);\n        if (wethBalance > 0) {\n            require(\n                _WETH.transferFrom(account, address(this), wethBalance),\n                \"WETH transfer in failed â€” has the allowance been set?\"\n            );\n            _WETH.withdraw(wethBalance);\n    \n            uint256 ethBalance = address(this).balance;\n            \n            (bool ok, ) = account.call{value: ethBalance}(\"\");\n            if (!ok) {\n                assembly {\n                    returndatacopy(0, 0, returndatasize())\n                    revert(0, returndatasize())\n                }\n            }\n            \n            emit Unwrapped(account, ethBalance);\n        }\n    }\n}"}}}