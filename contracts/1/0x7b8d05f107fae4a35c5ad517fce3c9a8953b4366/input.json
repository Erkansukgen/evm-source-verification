{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "MunchSAContract.sol": {
      "content": "/*\n * Munch single asset staking contract.\n *\n * Visit https://munchproject.io\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Stake Munch tokens to earn more as rewards.\n//\n// \n//\ncontract MunchSAStaking is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    struct Pool {\n        uint256 remainingBalance;   // Funds available for new stakers\n        uint256 attributed;         // Funds taken from balance for stakers\n        uint256 paidOut;            // Rewards claimed, therefore paidOut <= attributed\n        uint256 minStake;\n        uint256 maxStake;\n        uint stakingDuration;\n        uint minPercentToCharity;   // minimum % of rewards being given to charity - 50% is stored as 50\n        uint apy;                   // integer percentage - 50% is stored as 50\n    }\n\n    struct UserInfo {\n        uint256 amountDeposited;\n        uint256 remainingRewards;   // Amount not claimed yet\n        uint256 rewardsDonated;     // Out of claimed rewards, amount sent to charity\n        uint stakingStartTime;      // Timestamp when user started staking\n        uint lastRewardTime;        // Last time rewards were claimed\n        uint256 rewardDebt;         // Rewards to ignore in redis computation based on when user joined pool\n        uint percentToCharity;      // as an int: 50% is stored as 50\n    }\n\n    // Address of the ERC20 Token contract.\n    IERC20 _munchToken;\n    // Address where the sell of the tokens for charity will happen\n    address _charityAddress;\n\n    // Counting the accumulated rewards received by the contract so we can\n    // redistribute them to users.\n    uint256 _accRedisTokensPerShare;\n    uint256 _lastRedisTotal;\n    uint256 _stakedAndFunds; // Sum of all MUNCH tokens staked or funded for pools\n    uint256 _staked; // Sum of all MUNCH tokens staked - used to get redis share of a user\n\n    // All pools added to the contract.\n    Pool[] public pools;\n\n    // Info of each user that stakes tokens.\n    mapping(uint => mapping(address => UserInfo)) public userInfo;\n\n    event Deposit(uint poolIdx, address indexed user, uint256 amount);\n    event Withdraw(uint poolIdx, address indexed user, uint256 amount);\n\n    constructor(address munchToken) {\n        _munchToken = IERC20(munchToken);\n        _charityAddress = address(_munchToken);\n    }\n\n    function addPool(uint stakingDurationInDays, uint256 minStake, uint maxStake, uint apy) public onlyOwner {\n        pools.push(Pool({\n            remainingBalance: 0,\n            attributed: 0,\n            paidOut: 0,\n            minStake: minStake,\n            maxStake: maxStake,\n            stakingDuration: stakingDurationInDays * 1 days,\n            minPercentToCharity: 50,\n            apy: apy\n        }));\n    }\n\n    // Fund a pool to allow users to participate\n    function fund(uint poolIdx, uint256 amount) public onlyOwner {\n        Pool storage pool = pools[poolIdx];\n        _munchToken.safeTransferFrom(address(msg.sender), address(this), amount);\n        pool.remainingBalance = pool.remainingBalance.add(amount);\n        _stakedAndFunds = _stakedAndFunds.add(amount);\n    }\n\n    // Allows to unlock a pool for any emergency reason. Only accumulated rewards can be redeemed.\n    function unlockPool(uint poolIdx) public onlyOwner {\n        pools[poolIdx].stakingDuration = 0;\n    }\n\n    function setMinPercentToCharity(uint poolIdx, uint minPercentToCharity) public onlyOwner {\n        Pool storage pool = pools[poolIdx];\n        pool.minPercentToCharity = minPercentToCharity;\n    }\n\n    function setCharityAddress(address addy) public onlyOwner {\n        _charityAddress = addy;\n    }\n\n    // View function to see the expected total rewards for a given address.\n    function totalRewards(uint poolIdx, address wallet) external view returns (uint256) {\n        UserInfo storage user = userInfo[poolIdx][wallet];\n        Pool storage pool = pools[poolIdx];\n        return user.amountDeposited.mul(pool.apy).mul(pool.stakingDuration).div(365 days).div(100);\n    }\n\n    // View function to see how much can currently be redeemed.\n    function pending(uint poolIdx, address wallet) public view returns (uint256) {\n        UserInfo storage user = userInfo[poolIdx][wallet];\n        Pool storage pool = pools[poolIdx];\n\n        uint timeSinceLastReward = block.timestamp - user.lastRewardTime;\n        uint timeFromLastRewardToEnd = user.stakingStartTime + pool.stakingDuration - user.lastRewardTime;\n        uint256 pendingReward = user.remainingRewards.mul(timeSinceLastReward).div(timeFromLastRewardToEnd);\n        return pendingReward > user.remainingRewards ? user.remainingRewards : pendingReward;\n    }\n\n    // View function to see how much redistribution token can currently be redeemed.\n    function redisCount(uint poolIdx, address wallet) public view returns (uint256) {\n        if (_accRedisTokensPerShare == 0 || _staked == 0) {\n            return 0;\n        }\n        UserInfo storage user = userInfo[poolIdx][wallet];\n        return user.amountDeposited.mul(_accRedisTokensPerShare).div(1e36).sub(user.rewardDebt);\n    }\n\n    // Update the count of redistribution tokens (coming from MUNCH tx tax)\n    // To call BEFORE every change made to the contract balance.\n    function updateRedisCount() internal {\n        uint256 munchBal = _munchToken.balanceOf(address(this));\n        if (munchBal == 0 || _staked == 0) {\n            return;\n        }\n\n        // Whatever is not part of staked and funded tokens is redistribution.\n        // We have not had changes to the total amount between the last call and now.\n        uint256 totalRedis = munchBal.sub(_stakedAndFunds);\n        uint256 toAccountFor = totalRedis.sub(_lastRedisTotal);\n        _lastRedisTotal = totalRedis;\n\n        _accRedisTokensPerShare = _accRedisTokensPerShare.add(toAccountFor.mul(1e36).div(_staked));\n    }\n\n    // Deposit tokens to start a staking period.\n    // If some tokens are already there, rewards are returned and staking lock starts over with sum of deposits\n    //\n    // To change the percentage given out to charity, you need to call this function with amount = 0\n    // This has the effect of reseting your lock time and withdrawing your rewards.\n    function deposit(uint poolIdx, uint256 amount, uint percentToCharity) public {\n        UserInfo storage user = userInfo[poolIdx][msg.sender];\n        Pool storage pool = pools[poolIdx];\n        require(percentToCharity >= pool.minPercentToCharity && percentToCharity <= 100, \"Invalid percentage to give to charity\");\n        uint256 totalDeposit = user.amountDeposited.add(amount);\n        require(pool.minStake <= totalDeposit && pool.maxStake >= totalDeposit, \"Unauthorized amount\");\n\n        if (user.amountDeposited > 0) {\n            transferMunchRewards(poolIdx); // this calls updateRedisCount()\n        } else {\n            updateRedisCount();\n        }\n\n        if (amount > 0) {\n            uint256 newRewards = amount.mul(pool.apy).mul(pool.stakingDuration).div(365 days).div(100);\n            require(pool.remainingBalance >= newRewards, \"Pool is full\");\n\n            userInfo[poolIdx][msg.sender] = UserInfo({\n                amountDeposited: totalDeposit,\n                remainingRewards: user.remainingRewards.add(newRewards),\n                rewardsDonated: user.rewardsDonated,\n                lastRewardTime: block.timestamp,\n                stakingStartTime: block.timestamp,\n                percentToCharity: percentToCharity,\n                rewardDebt: totalDeposit.mul(_accRedisTokensPerShare).div(1e36)\n            });\n            pool.remainingBalance = pool.remainingBalance.sub(newRewards);\n            pool.attributed = pool.attributed.add(newRewards);\n\n            _stakedAndFunds = _stakedAndFunds.add(amount);\n            _staked = _staked.add(amount);\n\n            _munchToken.safeTransferFrom(address(msg.sender), address(this), amount);\n\n            emit Deposit(poolIdx, msg.sender, amount);\n        } else {\n            user.percentToCharity = percentToCharity;\n        }\n    }\n\n    // Withdraw all staked tokens from a given pool.\n    function withdraw(uint poolIdx) public {\n        UserInfo storage user = userInfo[poolIdx][msg.sender];\n        Pool storage pool = pools[poolIdx];\n\n        require(block.timestamp - user.stakingStartTime > pool.stakingDuration, \"Lock period not over\");\n\n        // Rewards\n        transferMunchRewards(poolIdx); // this calls updateRedisCount()\n\n        // Clean up\n        _stakedAndFunds = _stakedAndFunds.sub(user.amountDeposited);\n        _staked = _staked.sub(user.amountDeposited);\n        user.remainingRewards = 0;\n        uint256 amountToWithdraw = user.amountDeposited;\n        user.amountDeposited = 0;\n\n        // Withdraw\n        _munchToken.safeTransfer(address(msg.sender), amountToWithdraw);\n        emit Withdraw(poolIdx, msg.sender, amountToWithdraw);\n    }\n\n    // Called both internally and directly to claim rewards for a given wallet.\n    // HAS TO call updateRedisCount()\n    function transferMunchRewards(uint poolIdx) public {\n        UserInfo storage user = userInfo[poolIdx][msg.sender];\n        Pool storage pool = pools[poolIdx];\n        uint256 pendingRewards = pending(poolIdx, msg.sender);\n\n        updateRedisCount();\n\n        if(pendingRewards > 0) {\n            // account for redistribution tokens coming from tx tax on MUNCH token.\n            uint256 redis = redisCount(poolIdx, msg.sender);\n            uint256 pendingAmount = pendingRewards.add(redis);\n\n            uint256 toCharity = pendingAmount.mul(user.percentToCharity).div(100);\n            uint256 toHolder = pendingAmount.sub(toCharity);\n\n            if (toCharity > 0) {\n                // send share to charity\n                _munchToken.transfer(_charityAddress, toCharity);\n            }\n\n            if (toHolder > 0) {\n                // send share to holder\n                _munchToken.transfer(msg.sender, toHolder);\n            }\n\n            // mark as paid out, redeemed, and write down how much was donated to charity\n            _stakedAndFunds = _stakedAndFunds.sub(pendingRewards);\n            _lastRedisTotal = _lastRedisTotal.sub(redis);\n            pool.paidOut = pool.paidOut.add(pendingRewards);\n            user.remainingRewards = user.remainingRewards.sub(pendingRewards);\n            user.rewardsDonated = user.rewardsDonated.add(toCharity); // includes redis\n            user.lastRewardTime = block.timestamp;\n        }\n    }\n\n    // Withdraw Munch tokens from the funds deposited in a given pool\n    // This functions does not allow owner to withdraw funds deposited by or attributed to holders,\n    // only remaining funds.\n    function fundWithdraw(uint poolIdx, uint256 amount) onlyOwner public {\n        Pool storage pool = pools[poolIdx];\n        require(pool.remainingBalance >= amount, \"Cannot withdraw more than remaining pool balance\");\n        updateRedisCount();\n        _munchToken.transfer(msg.sender, amount);\n        _stakedAndFunds = _stakedAndFunds.sub(amount);\n    }\n\n    // Withdraw any ETH sent to the contract\n    function ethWithdraw() onlyOwner public {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"Balance is zero.\");\n        payable(msg.sender).transfer(balance);\n    }\n}"
    }
  }
}