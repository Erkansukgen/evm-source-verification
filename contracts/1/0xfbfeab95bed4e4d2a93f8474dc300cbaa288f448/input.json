{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"LooksRareMarket_flat.sol":{"content":"\n// File: contracts/LooksRareMarket.sol\n\n\n\npragma solidity ^0.8.6;\n\ncontract OpenSeaMarket {\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n  bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  constructor(address initialImpl, address initialAdmin) {\n    assembly {\n      sstore(_ADMIN_SLOT, initialAdmin)\n      sstore(_IMPLEMENTATION_SLOT, initialImpl)\n    }\n  }\n\n  function admin() public view returns (address adm) {\n    bytes32 slot = _ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  function implementation() public view returns (address impl) {\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  function changeAdmin(address newAdmin) external {\n    require(msg.sender == admin(), 'admin only');\n    bytes32 slot = _ADMIN_SLOT;\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n  function upgrade(address newImplementation) external {\n    require(msg.sender == admin(), 'admin only');\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n\n  fallback() external payable {\n    assembly {\n        let _target := sload(_IMPLEMENTATION_SLOT)\n        calldatacopy(0x0, 0x0, calldatasize())\n        let result := delegatecall(gas(), _target, 0x0, calldatasize(), 0x0, 0)\n        returndatacopy(0x0, 0x0, returndatasize())\n        switch result case 0 {revert(0, 0)} default {return (0, returndatasize())\n        }\n    }\n  }\n\n  receive() external payable {\n    assembly {\n        let _target := sload(_IMPLEMENTATION_SLOT)\n        calldatacopy(0x0, 0x0, calldatasize())\n        let result := delegatecall(gas(), _target, 0x0, calldatasize(), 0x0, 0)\n        returndatacopy(0x0, 0x0, returndatasize())\n        switch result case 0 {revert(0, 0)} default {return (0, returndatasize())}\n        }\n    }\n}"}}}