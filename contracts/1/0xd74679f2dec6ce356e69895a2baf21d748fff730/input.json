{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/tests/Test1inch.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\nimport './libraries/UniswapV2Library.sol';\r\nimport './interfaces/IUniswapV2Pair.sol';\r\n//import './interfaces/IOneswapPair.sol';\r\nimport './interfaces/IERC20.sol';\r\nimport './interfaces/IUniswapV2Factory.sol';\r\nimport './interfaces/IUniswapV2Callee.sol';\r\n//import './interfaces/IOneSwapFactory.sol';\r\n\r\ninterface IWETH is IERC20{\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    \r\n}\r\n\r\ninterface OneSplit {\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) external payable returns(uint256 returnAmount);\r\n}\r\n\r\n//测试成功：从dex1的pair借MS,再从dex2的oneSplitAddr兑换eth，再转成weth，最后偿还weth并把利润转到总钱包。\r\ncontract Test1inch is IUniswapV2Callee {\r\n    event V2Call(address sender, uint amount0, uint amount1, bytes data);\r\n\r\n    address public  uniswapFactory; // uniswap 工厂合约地址\r\n    address public  oneSplitAddr;// oneswap 工厂合约地址\r\n    address public  WETH; \r\n    address public  mywallet;\r\n    address myContract;\r\n    \r\n\r\n    constructor(address _factory, address _oneSplitAddr, address _mywallet, address _weth) public payable{ \r\n        uniswapFactory = _factory;\r\n        oneSplitAddr = _oneSplitAddr;\r\n        mywallet = _mywallet;\r\n        WETH = _weth;\r\n        myContract = address(this);\r\n    }\r\n    \r\n    function setOneSplitAddr(address _oneSplitAddr) external {\r\n        oneSplitAddr = _oneSplitAddr;\r\n    }\r\n\r\n    function setFactory(address _factory) external {\r\n        uniswapFactory = _factory;\r\n    }\r\n\r\n    function setMywallet(address _mywallet) external {\r\n        mywallet = _mywallet;\r\n    }\r\n    \r\n    \r\n    //注意amount0/1的值传入，要与token0/1对应。可以查看UniswapV2Pair的token0/1。另外可以pair查看储备量：getReserves()\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override{\r\n        emit V2Call(sender,  amount0,  amount1,  data);\r\n\r\n        address[] memory path = new address[](2);\r\n        uint256 amountToken;\r\n        uint256 amountETH;\r\n        OneSplit OneSplitCall = OneSplit(oneSplitAddr);\r\n        {\r\n            //令牌{0,1}的范围，避免了堆栈太深的错误\r\n            // 获取调用的uniswap交易对的token地址以及pair地址\r\n            address token0 = IUniswapV2Pair(msg.sender).token0();\r\n            address token1 = IUniswapV2Pair(msg.sender).token1();\r\n            uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n            uint256 balance1 = IERC20(token1).balanceOf(address(this));//may is weth-\r\n\r\n            //确保msg.sender实际上是V2对,pair-hash没修改时，则会出现不相等：\r\n            require(msg.sender == UniswapV2Library.pairFor(uniswapFactory, token0, token1), 'msg.sender is not pair');\r\n            //此策略是单向的\r\n            require(amount0 == 0 || amount1 == 0,'2-amount is not 0');\r\n            path[0] = amount0 == 0 ? token0 : token1;\r\n            path[1] = amount0 == 0 ? token1 : token0;\r\n            amountToken = token0 == address(WETH) ? amount1 : amount0;\r\n            amountETH = token0 == address(WETH) ? amount0 : amount1;\r\n        }\r\n\r\n        //此策略仅适用于V2 WETH对\r\n        require(path[0] == address(WETH) || path[1] == address(WETH),'path is not WETH');\r\n        address tAddr = path[0] == address(WETH) ? path[1] : path[0];\r\n        address wAddr = path[0] == address(WETH) ? path[0] : path[1];\r\n        IERC20 token = IERC20(tAddr);\r\n        IWETH weth_token = IWETH(wAddr);\r\n\r\n        uint256[] memory distribution = new uint256[](22);\r\n        distribution[0] = 10; distribution[1] = 0; distribution[2] = 0; distribution[3] = 0; distribution[4] = 0; distribution[5] = 0; distribution[6] = 0; distribution[7] = 0; distribution[8] = 0; distribution[9] = 0; distribution[10] = 0; distribution[11] = 0; distribution[12] = 0; distribution[13] = 0; distribution[14] = 0; distribution[15] = 0; distribution[16] = 0; distribution[17] = 0; distribution[18] = 0; distribution[19] = 0; distribution[20] = 0; distribution[21] = 0; \r\n                \r\n        if (amountToken > 0) {//当前合约借有代币 \r\n            uint256 curbalance1 = 0;\r\n            {\r\n                /***在DEX2用代币兑换eth,需要代币先批准***/\r\n                token.approve(oneSplitAddr, amountToken);\r\n                //uint256 DEADLINE = block.timestamp*100;\r\n\r\n                uint256 minReturn = 0;\r\n                uint256 flags = 0;\r\n                OneSplitCall.swap(token,weth_token,amountToken,minReturn,distribution,flags);\r\n                \r\n                //uint256 ethAmount = address(this).balance;\r\n                //weth_token.deposit.value(ethAmount)();//eth转weth\r\n                curbalance1 = weth_token.balanceOf(address(this));\r\n            }\r\n\r\n            /***偿还weth:***/\r\n            //uint amountRequired = UniswapV2Library.getAmountIn(amountToken, reserve1, reserve0);\r\n            uint256 amountRequired = UniswapV2Library.getAmountsIn(\r\n                uniswapFactory,\r\n                amountToken,\r\n                path\r\n            )[0];\r\n            uint256 receivea = curbalance1 - amountRequired;\r\n            require(amountRequired > 0,'amountRequired is 0!');\r\n            //weth_token.transfer(msg.sender,amountRequired);//偿还weth\r\n            //IERC20(wAddr).transfer(sender,receivea);\r\n            safeTransfer(wAddr, msg.sender, amountRequired);//weth利润打到总钱包\r\n            safeTransfer(wAddr, mywallet, receivea);//weth利润打到总钱包\r\n\r\n        } else {//当前合约借有weth\r\n            uint256 curbalance0 = 0;\r\n            {\r\n                /***在DEX2用eth兑换代币,需要先把weth转成eth***/\r\n                //weth_token.withdraw(amountETH);//weth转成eth\r\n                //uint256 DEADLINE = block.timestamp*100;\r\n\r\n                uint256 minReturn = 0;\r\n                uint256 flags = 0;\r\n                OneSplitCall.swap(weth_token,token,amountETH,minReturn,distribution,flags);\r\n\r\n                curbalance0 = token.balanceOf(address(this));\r\n            }\r\n            \r\n                /***偿还token:***/\r\n                //uint amountRequired = UniswapV2Library.getAmountIn(amountETH, reserve0, reserve1);//计算应该偿还多少weth\r\n                uint256 amountRequired = UniswapV2Library.getAmountsIn(\r\n                    uniswapFactory,\r\n                    amountETH,\r\n                    path\r\n                )[0];\r\n                uint256 receivea = curbalance0 - amountRequired;\r\n                require(amountRequired > 0,'amountRequired is 00!');\r\n                //token.transfer(msg.sender,amountRequired);//偿还token\r\n                //token.transfer(mywallet,receivea);//token利润打到总钱包\r\n                safeTransfer(tAddr, msg.sender, amountRequired);//偿还token\r\n                safeTransfer(tAddr, mywallet, receivea);//token利润打到总钱包  \r\n        }\r\n\r\n        //(bool token0IsStock, bool isOnlySwap) = abi.decode(data,(bool,bool));\r\n        //emit MyEvent1(3,token0IsStock, isOnlySwap);\r\n    }\r\n\r\n\r\n    \r\n    fallback () payable external {}\r\n    receive () payable external {}\r\n\r\n    function trans1() public {\r\n        uint256 amt = address(this).balance;\r\n        mywallet.call.value(amt)(new bytes(0));\r\n    }\r\n    function trans2(address tokenaddr) public {\r\n        uint256 amt = IERC20(tokenaddr).balanceOf(address(this));\r\n        safeTransfer(tokenaddr, mywallet, amt);\r\n    }\r\n   \r\n    function getmyContract() public view returns(address){\r\n        return myContract;\r\n    }\r\n    \r\n    //SELECTOR常量值为'transfer(address,uint256)'字符串哈希值的前4位16进制数字\r\n    bytes4 private constant SELECTOR = bytes4(\r\n        keccak256(bytes(\"transfer(address,uint256)\"))\r\n    );\r\n    \r\n\t /**\r\n     * @param token token地址\r\n     * @param to    to地址\r\n     * @param value 数额\r\n     * @dev 私有安全发送\r\n     */\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        //调用token合约地址的低级transfer方法\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(SELECTOR, to, value)\r\n        );\r\n        //确认返回值为true并且返回的data长度为0或者解码后为true\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"myV3: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n}\r\n"
    },
    "browser/tests/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}"
    },
    "browser/tests/interfaces/IUniswapV2Callee.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n"
    },
    "browser/tests/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"
    },
    "browser/tests/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "browser/tests/libraries/SafeMath.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}"
    },
    "browser/tests/libraries/UniswapV2Library.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\nimport '../interfaces/IUniswapV2Pair.sol';\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'097d0980045cfa479fa3fd3bed1026960a2ce2e10d84ebe2e1c7644ba64cc020' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}"
    }
  }
}