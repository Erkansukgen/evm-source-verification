{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "GelatoAdvancedStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\ninterface IAdvancedStakingProxy {\n    function addRewards() external;\n}\n\ncontract AdvancedStakingResolver {\n    address public immutable AdvStaking;\n    address owner;\n    uint256 lastExecuted;\n    uint256 public interval;\n\n    constructor(address _advStaking) {\n        AdvStaking = _advStaking;\n        lastExecuted = block.timestamp;\n        interval = 86400;\n        owner = msg.sender;\n    }\n    \n    function updateInterval(uint256 _interval) external {\n        require(msg.sender == owner);\n        interval = _interval;\n    }\n\n    function checker()\n        external\n        returns (bool canExec, bytes memory execPayload)\n    {\n        canExec = (block.timestamp - lastExecuted) > interval;\n        if (canExec) {\n            lastExecuted = block.timestamp;    \n        }\n        \n        execPayload = abi.encodeWithSelector(\n            IAdvancedStakingProxy.addRewards.selector\n        );\n    }\n}"
    }
  }
}