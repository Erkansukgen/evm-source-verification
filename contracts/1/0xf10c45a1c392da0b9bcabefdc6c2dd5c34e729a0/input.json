{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Keep3rV1Volatility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface IKeep3rV1Oracle {\n    function sample(address tokenIn, uint amountIn, address tokenOut, uint points, uint window) external view returns (uint[] memory);\n}\n\ninterface IERC20 {\n    function decimals() external view returns (uint);\n}\n\ncontract Keep3rV1Volatility {\n    \n    uint private constant FIXED_1 = 0x080000000000000000000000000000000;\n    uint private constant FIXED_2 = 0x100000000000000000000000000000000;\n    uint private constant SQRT_1 = 13043817825332782212;\n    uint private constant LOG_10_2 = 3010299957;\n    uint private constant BASE = 1e10;\n    \n    IKeep3rV1Oracle public constant KV1O = IKeep3rV1Oracle(0x73353801921417F465377c8d898c6f4C0270282C);\n\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\n        uint8 res = 0;\n\n        if (_n < 256) {\n            // At most 8 iterations\n            while (_n > 1) {\n                _n >>= 1;\n                res += 1;\n            }\n        } else {\n            // Exactly 8 iterations\n            for (uint8 s = 128; s > 0; s >>= 1) {\n                if (_n >= (uint(1) << s)) {\n                    _n >>= s;\n                    res |= s;\n                }\n            }\n        }\n\n        return res;\n    }\n    \n    function generalLog(uint256 x) internal pure returns (uint) {\n        uint res = 0;\n\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n        if (x >= FIXED_2) {\n            uint8 count = floorLog2(x / FIXED_1);\n            x >>= count; // now x < 2\n            res = count * FIXED_1;\n        }\n\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n        if (x > FIXED_1) {\n            for (uint8 i = 127; i > 0; --i) {\n                x = (x * x) / FIXED_1; // now 1 < x < 4\n                if (x >= FIXED_2) {\n                    x >>= 1; // now 1 < x < 2\n                    res += uint(1) << (i - 1);\n                }\n            }\n        }\n\n        return res * LOG_10_2 / BASE;\n    }\n    \n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n    \n    function vol(uint[] memory p) public pure returns (uint x) {\n        for (uint8 i = 1; i <= (p.length-1); i++) {\n            x += ((generalLog(p[i] * FIXED_1) - generalLog(p[i-1] * FIXED_1)))**2;\n            //denom += FIXED_1**2;\n        }\n        //return (sum, denom);\n        x = sqrt(uint(252) * sqrt(x / (p.length-1)));\n        return uint(1e18) * x / SQRT_1;\n    }\n    \n    function rVol(address tokenIn, address tokenOut, uint points, uint window) public view returns (uint) {\n        return vol(KV1O.sample(tokenIn, uint(10)**IERC20(tokenIn).decimals(), tokenOut, points, window));\n    }\n    \n    function rVolHourly(address tokenIn, address tokenOut, uint points) external view returns (uint) {\n        return rVol(tokenIn, tokenOut, points, 2);\n    }\n    \n    function rVolDaily(address tokenIn, address tokenOut, uint points) external view returns (uint) {\n        return rVol(tokenIn, tokenOut, points, 48);\n    }\n    \n    function rVolWeekly(address tokenIn, address tokenOut, uint points) external view returns (uint) {\n        return rVol(tokenIn, tokenOut, points, 336);\n    }\n    \n    function rVolHourlyRecent(address tokenIn, address tokenOut) external view returns (uint) {\n        return rVol(tokenIn, tokenOut, 2, 2);\n    }\n    \n    function rVolDailyRecent(address tokenIn, address tokenOut) external view returns (uint) {\n        return rVol(tokenIn, tokenOut, 2, 48);\n    }\n    \n    function rVolWeeklyRecent(address tokenIn, address tokenOut) external view returns (uint) {\n        return rVol(tokenIn, tokenOut, 2, 336);\n    }\n}"
    }
  }
}