{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "HYFTToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'Highest Yield Farming Token' token contract\r\n//\r\n// Deployed to : 0x18952E93B560e73111B4B0B0399286D5FC94d954\r\n// Symbol      : HYFT\r\n// Name        : Highest Yield Farming Token\r\n// Total supply: 50121\r\n// Decimals    : 18\r\n// Website      : https://hyft.finance/\r\n\r\n// Enjoy.\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface ItokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \r\n}\r\n\r\ninterface IfarmingContract { \r\n    function createFarming(address _wallet, uint8 _timeFrame, uint256 _value) external returns (bool); \r\n}\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function transfer(address _to, uint256 _value) external  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract StandardToken is IERC20Token {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public _totalSupply;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    function totalSupply() override public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[_from] >= _value, \"Not enough balance\");\r\n\t\trequire(allowed[_from][msg.sender] >= _value, \"You need to increase allowance\");\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract HYFTToken is Ownable, StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    address public farmingContract;\r\n    address public crowdSaleContract;\r\n    uint256 public soldTokensUnlockTime;\r\n    mapping (address => uint256) frozenBalances;\r\n    mapping (address => uint256) timelock;\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n    event FarmingContractSet(address indexed contractAddress);\r\n\r\n    \r\n    constructor() {\r\n        name = \"Highest Yield Farming Token\";\r\n        decimals = 18;\r\n        symbol = \"HYFT\";\r\n        farmingContract = address(0x0);\r\n        crowdSaleContract = 0x1b0a1fCDFF1184Fc6E6aD4bd607634De17b2d4d1;                 // contract for ICO tokens\r\n        address teamWallet =  0xe325B214bFf4A0a9A480410cBeC66d35c46Ce020;               // wallet for team tokens\r\n        address privateSaleWallet = 0x94580690A927D65DA7aE92a3748cbdD1C9d9A60B;         // wallet for private sale tokens\r\n        address marketingWallet = 0x16526423eB37D2769edA746c687654879d750EdE;           // wallet for marketing\r\n        address exchangesLiquidity = 0x25d776996373E607145Ef461586b3F7484315240;        // add liquidity to exchanges\r\n        address farmingWallet = 0x2B88DF17E4B2F6a04C47195ed4e2959ccacE81cE;               // tokens for the farming contract\r\n        uint256 teamReleaseTime = 1623261600;                                           // lock team tokens for 6 months\r\n        uint256 farmingReleaseTime = 1610215200;                                         // lock farmingContract tokens - 13k tokens for 1 months\r\n\r\n        balances[teamWallet] = 4000 ether;\r\n        emit Transfer(address(0x0), teamWallet, (4000 ether));\r\n        frozenBalances[teamWallet] = 4000 ether;\r\n        timelock[teamWallet] = teamReleaseTime;\r\n        \r\n        balances[farmingWallet] = 13000 ether;\r\n        emit Transfer(address(0x0), address(farmingWallet), (13000 ether));\r\n        frozenBalances[farmingWallet] = 13000 ether;\r\n        timelock[farmingWallet] = farmingReleaseTime;\r\n        \r\n        balances[marketingWallet] = 4121 ether;\r\n        emit Transfer(address(0x0), address(marketingWallet), (4121 ether));\r\n        \r\n        balances[privateSaleWallet] = 3000 ether;\r\n        emit Transfer(address(0x0), address(privateSaleWallet), (3000 ether));\r\n        \r\n        balances[crowdSaleContract] = 15000 ether;\r\n        emit Transfer(address(0x0), address(crowdSaleContract), (15000 ether));\r\n\r\n        balances[exchangesLiquidity] = 11000 ether;\r\n        emit Transfer(address(0x0), address(exchangesLiquidity), (11000 ether));\r\n\r\n        _totalSupply = 50121 ether;\r\n        \r\n        soldTokensUnlockTime = 1609085100;\r\n\r\n    }\r\n    \r\n    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return frozenBalances[_owner];\r\n    }\r\n    \r\n    function unlockTimeOf(address _owner) public view returns (uint256 time) {\r\n        return timelock[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) override public  returns (bool success) {\r\n        require(txAllowed(msg.sender, _value), \"Crowdsale tokens are still frozen\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\r\n        require(txAllowed(msg.sender, _value), \"Crowdsale tokens are still frozen\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function setFarmingContract(address _contractAddress) onlyOwner public {\r\n        farmingContract = _contractAddress;\r\n        emit FarmingContractSet(_contractAddress);\r\n    }\r\n    \r\n    function setCrowdSaleContract(address _contractAddress) onlyOwner public {\r\n        crowdSaleContract = _contractAddress;\r\n    }\r\n    \r\n        // Tokens sold by crowdsale contract will be frozen ultil crowdsale ends\r\n    function txAllowed(address sender, uint256 amount) private returns (bool isAllowed) {\r\n        if (timelock[sender] > block.timestamp) {\r\n            return isBalanceFree(sender, amount);\r\n        } else {\r\n            if (frozenBalances[sender] > 0) frozenBalances[sender] = 0;\r\n            return true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function isBalanceFree(address sender, uint256 amount) private view returns (bool isfree) {\r\n        if (amount <= (balances[sender] - frozenBalances[sender])) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveFarming(uint8 _timeFrame, uint256 _value) public returns (bool success) {\r\n        require(farmingContract != address(0x0));\r\n        allowed[msg.sender][farmingContract] = _value;\r\n        emit Approval(msg.sender, farmingContract, _value);\r\n        IfarmingContract recipient = IfarmingContract(farmingContract);\r\n        require(recipient.createFarming(msg.sender, _timeFrame, _value));\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        ItokenRecipient recipient = ItokenRecipient(_spender);\r\n        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\r\n        return true;\r\n    }\r\n    \r\n    function tokensSold(address buyer, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == crowdSaleContract);\r\n        frozenBalances[buyer] += amount;\r\n        if (timelock[buyer] == 0 ) timelock[buyer] = soldTokensUnlockTime;\r\n        return super.transfer(buyer, amount);\r\n    }\r\n    \r\n\r\n}"
    }
  }
}