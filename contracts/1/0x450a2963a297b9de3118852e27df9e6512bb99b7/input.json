{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "IERC20.sol": {
      "content": "pragma solidity ^0.5.17;\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "ReentrancyGuard.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n * metering changes introduced in the Istanbul hardfork.\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n"
    },
    "SafeMath.sol": {
      "content": "pragma solidity ^0.5.17;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}"
    },
    "Splitter.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./IERC20.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./SafeMath.sol\";\n\ncontract Splitter is ReentrancyGuard {\n    using SafeMath for uint256;\n\n    address public currency;\n    address[] public team;\n    uint256 public totalShares;\n    uint256 public totalIncome;\n    uint256 public totalIncomeClaimed;\n    uint256 public lastTokenBalance;\n\n    struct Member {\n        uint256 shares;\n        uint256 incomeClaimed;\n    }\n\n    mapping(address => Member) public members;\n\n    constructor(\n        address[] memory _team,\n        uint256[] memory _shares,\n        address _currency\n    ) public {\n        require(_team.length > 0);\n        require(_team.length == _shares.length);\n        require(_currency != address(0));\n\n        currency = _currency;\n        team = _team;\n\n        uint256 _totalShares = 0;\n\n        for (uint256 i = 0; i < _team.length; i++) {\n            address member = _team[i];\n            uint256 share = _shares[i];\n\n            require(member != address(0));\n            require(share > 0);\n\n            members[member] = Member(share, 0);\n            _totalShares = _totalShares.add(share);\n        }\n\n        totalShares = _totalShares;\n        lastTokenBalance = IERC20(currency).balanceOf(address(this));\n    }\n\n    function claimIncome() public nonReentrant {\n        uint256 newIncome = IERC20(currency).balanceOf(address(this)).sub(lastTokenBalance);\n        totalIncome = totalIncome.add(newIncome);\n\n        Member storage member = members[msg.sender];\n        require(member.shares > 0, \"not a member\");\n        uint256 memberIncome = totalIncome.mul(member.shares).div(totalShares);\n        uint256 newMemberIncome = memberIncome.sub(member.incomeClaimed);\n        require(newMemberIncome > 0, \"no income to claim\");\n\n        member.incomeClaimed = memberIncome;\n        totalIncomeClaimed = totalIncomeClaimed.add(newMemberIncome);\n\n        require(IERC20(currency).transfer(msg.sender, newMemberIncome), \"transfer failed\");\n\n        lastTokenBalance = IERC20(currency).balanceOf(address(this));\n    }\n}\n"
    }
  }
}