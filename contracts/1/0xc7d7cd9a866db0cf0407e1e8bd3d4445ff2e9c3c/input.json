{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/StakingContract.sol":{"content":"pragma solidity ^0.6.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n    \n    function ceil(uint a, uint m) internal pure returns (uint r) {\n        return (a + m - 1) / m * m;\n    }\n}\n\ncontract Owned {\n    address payable public owner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address payable _newOwner) public onlyOwner {\n        owner = _newOwner;\n        emit OwnershipTransferred(msg.sender, _newOwner);\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\n    function transfer(address to, uint256 tokens) external returns (bool success);\n    function approve(address spender, uint256 tokens) external returns (bool success);\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\n    function burnTokens(uint256 _amount) external;\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\ncontract Stake is Owned {\n    using SafeMath for uint256;\n    \n    address public ZUSE = 0xAc2673328Fc97a072643FC4fC523D7Bd22C3e823; \n    \n    uint256 public totalStakes = 0;\n    uint256 stakingFee = 25; // 2.5%\n    uint256 unstakingFee = 25; // 2.5% \n    uint256 public totalDividends = 0;\n    uint256 private scaledRemainder = 0;\n    uint256 private scaling = uint256(10) ** 12;\n    uint public round = 1;\n    \n    struct USER{\n        uint256 stakedTokens;\n        uint256 lastDividends;\n        uint256 fromTotalDividend;\n        uint round;\n        uint256 remainder;\n    }\n    \n    mapping(address => USER) stakers;\n    mapping (uint => uint256) public payouts;                   \n    \n    event STAKED(address staker, uint256 tokens, uint256 stakingFee);\n    event UNSTAKED(address staker, uint256 tokens, uint256 unstakingFee);\n    event PAYOUT(uint256 round, uint256 tokens, address sender);\n    event CLAIMEDREWARD(address staker, uint256 reward);\n    \n    function STAKE(uint256 tokens) external {\n        require(IERC20(ZUSE).transferFrom(msg.sender, address(this), tokens), \"Tokens cannot be transferred from user account\");\n        \n        uint256 _stakingFee = 0;\n        if(totalStakes > 0)\n            _stakingFee= (onePercent(tokens).mul(stakingFee)).div(10); \n        \n        if(totalStakes > 0)\n            _addPayout(_stakingFee);\n            \n        uint256 owing = pendingReward(msg.sender);\n        stakers[msg.sender].remainder += owing;\n        \n        stakers[msg.sender].stakedTokens = (tokens.sub(_stakingFee)).add(stakers[msg.sender].stakedTokens);\n        stakers[msg.sender].lastDividends = owing;\n        stakers[msg.sender].fromTotalDividend= totalDividends;\n        stakers[msg.sender].round =  round;\n        \n        totalStakes = totalStakes.add(tokens.sub(_stakingFee));\n        \n        emit STAKED(msg.sender, tokens.sub(_stakingFee), _stakingFee);\n    }\n    \n    function ADDFUNDS(uint256 tokens) external {\n        require(IERC20(ZUSE).transferFrom(msg.sender, address(this), tokens), \"Tokens cannot be transferred from funder account\");\n        _addPayout(tokens);\n    }\n    \n    function _addPayout(uint256 tokens) private{\n        uint256 available = (tokens.mul(scaling)).add(scaledRemainder); \n        uint256 dividendPerToken = available.div(totalStakes);\n        scaledRemainder = available.mod(totalStakes);\n        \n        totalDividends = totalDividends.add(dividendPerToken);\n        payouts[round] = payouts[round-1].add(dividendPerToken);\n        \n        emit PAYOUT(round, tokens, msg.sender);\n        round++;\n    }\n    \n    function CLAIMREWARD() public {\n        if(totalDividends > stakers[msg.sender].fromTotalDividend){\n            uint256 owing = pendingReward(msg.sender);\n        \n            owing = owing.add(stakers[msg.sender].remainder);\n            stakers[msg.sender].remainder = 0;\n        \n            require(IERC20(ZUSE).transfer(msg.sender,owing), \"ERROR: error in sending reward from contract\");\n        \n            emit CLAIMEDREWARD(msg.sender, owing);\n        \n            stakers[msg.sender].lastDividends = owing; \n            stakers[msg.sender].round = round; \n            stakers[msg.sender].fromTotalDividend = totalDividends; \n        }\n    }\n    \n    function pendingReward(address staker) private returns (uint256) {\n        uint256 amount =  ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)).div(scaling);\n        stakers[staker].remainder += ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)) % scaling ;\n        return amount;\n    }\n    \n    function getPendingReward(address staker) public view returns(uint256 _pendingReward) {\n        uint256 amount =  ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)).div(scaling);\n        amount += ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)) % scaling ;\n        return (amount + stakers[staker].remainder);\n    }\n    \n    function WITHDRAW(uint256 tokens) external {\n        \n        require(stakers[msg.sender].stakedTokens >= tokens && tokens > 0, \"Invalid token amount to withdraw\");\n        \n        uint256 _unstakingFee = (onePercent(tokens).mul(unstakingFee)).div(10);\n        \n        uint256 owing = pendingReward(msg.sender);\n        stakers[msg.sender].remainder += owing;\n                \n        require(IERC20(ZUSE).transfer(msg.sender, tokens.sub(_unstakingFee)), \"Error in un-staking tokens\");\n        \n        stakers[msg.sender].stakedTokens = stakers[msg.sender].stakedTokens.sub(tokens);\n        stakers[msg.sender].lastDividends = owing;\n        stakers[msg.sender].fromTotalDividend= totalDividends;\n        stakers[msg.sender].round =  round;\n        \n        totalStakes = totalStakes.sub(tokens);\n        \n        if(totalStakes > 0)\n\n            _addPayout(_unstakingFee);\n        \n        emit UNSTAKED(msg.sender, tokens.sub(_unstakingFee), _unstakingFee);\n    }\n\n    function onePercent(uint256 _tokens) private pure returns (uint256){\n        uint256 roundValue = _tokens.ceil(100);\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\n        return onePercentofTokens;\n    }\n    \n    function yourStakedZUSE(address staker) external view returns(uint256 stakedZUSE){\n        return stakers[staker].stakedTokens;\n    }\n    \n    function yourZUSEBalance(address user) external view returns(uint256 ZUSEBalance){\n        return IERC20(ZUSE).balanceOf(user);\n    }\n}"}}}