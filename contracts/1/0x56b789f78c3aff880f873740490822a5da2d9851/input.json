{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/LoanShifterReceiver_flat.sol": {
      "content": "\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\ninterface IFlashLoanReceiver {\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\n}\n\nabstract contract ILendingPoolAddressesProvider {\n\n    function getLendingPool() public view virtual returns (address);\n    function setLendingPoolImpl(address _pool) public virtual;\n\n    function getLendingPoolCore() public virtual view returns (address payable);\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public virtual;\n\n    function getLendingPoolConfigurator() public virtual view returns (address);\n    function setLendingPoolConfiguratorImpl(address _configurator) public virtual;\n\n    function getLendingPoolDataProvider() public virtual view returns (address);\n    function setLendingPoolDataProviderImpl(address _provider) public virtual;\n\n    function getLendingPoolParametersProvider() public virtual view returns (address);\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public virtual;\n\n    function getTokenDistributor() public virtual view returns (address);\n    function setTokenDistributor(address _tokenDistributor) public virtual;\n\n\n    function getFeeProvider() public virtual view returns (address);\n    function setFeeProviderImpl(address _feeProvider) public virtual;\n\n    function getLendingPoolLiquidationManager() public virtual view returns (address);\n    function setLendingPoolLiquidationManager(address _manager) public virtual;\n\n    function getLendingPoolManager() public virtual view returns (address);\n    function setLendingPoolManager(address _lendingPoolManager) public virtual;\n\n    function getPriceOracle() public virtual view returns (address);\n    function setPriceOracle(address _priceOracle) public virtual;\n\n    function getLendingRateOracle() public view virtual returns (address);\n    function setLendingRateOracle(address _lendingRateOracle) public virtual;\n}\n\nlibrary EthAddressLib {\n\n    function ethAddress() internal pure returns(address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n}\n\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\n\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    ILendingPoolAddressesProvider public addressesProvider;\n\n    constructor(ILendingPoolAddressesProvider _provider) public {\n        addressesProvider = _provider;\n    }\n\n    receive () external virtual payable {}\n\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {\n\n        address payable core = addressesProvider.getLendingPoolCore();\n\n        transferInternal(core,_reserve, _amount);\n    }\n\n    function transferInternal(address payable _destination, address _reserve, uint256  _amount) internal {\n        if(_reserve == EthAddressLib.ethAddress()) {\n            //solium-disable-next-line\n            _destination.call{value: _amount}(\"\");\n            return;\n        }\n\n        ERC20(_reserve).safeTransfer(_destination, _amount);\n\n\n    }\n\n    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {\n        if(_reserve == EthAddressLib.ethAddress()) {\n\n            return _target.balance;\n        }\n\n        return ERC20(_reserve).balanceOf(_target);\n\n    }\n}\n\n// File: localhost/mcd/Discount.sol\n\npragma solidity ^0.6.0;\n\n\ncontract Discount {\n    address public owner;\n    mapping(address => CustomServiceFee) public serviceFees;\n\n    uint256 constant MAX_SERVICE_FEE = 400;\n\n    struct CustomServiceFee {\n        bool active;\n        uint256 amount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint256) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint256 _fee) public {\n        require(msg.sender == owner, \"Only owner\");\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n    }\n\n    function disableServiceFee(address _user) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n    }\n}\n\n// File: localhost/exchange/SaverExchangeHelper.sol\n\npragma solidity ^0.6.0;\n\n\n\ncontract SaverExchangeHelper {\n\n    using SafeERC20 for ERC20;\n\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant DGD_ADDRESS = 0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A;\n\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant KYBER_WRAPPER = 0x3d1D4D6Bb405b2366434cb7387803c7B662b8d71;\n    address public constant UNISWAP_WRAPPER = 0xFF92ADA50cDC8009686867b4a470C8769bEdB22d;\n    address public constant OASIS_WRAPPER = 0x9C499376B41A91349Ff93F99462a65962653e104;\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n    address public constant ZRX_ALLOWLIST_ADDR = 0x019739e288973F92bDD3c1d87178E206E51fd911;\n\n\n    function getDecimals(address _token) internal view returns (uint256) {\n        if (_token == DGD_ADDRESS) return 9;\n        if (_token == KYBER_ETH_ADDRESS) return 18;\n\n        return ERC20(_token).decimals();\n    }\n\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n            balance = address(this).balance;\n        } else {\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\n        }\n    }\n\n    function approve0xProxy(address _tokenAddr, uint _amount) internal {\n        if (_tokenAddr != KYBER_ETH_ADDRESS) {\n            ERC20(_tokenAddr).safeApprove(address(ERC20_PROXY_0X), _amount);\n        }\n    }\n\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\n        // send back any leftover ether or tokens\n        if (address(this).balance > 0) {\n            _to.transfer(address(this).balance);\n        }\n\n        if (getBalance(_srcAddr) > 0) {\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\n        }\n\n        if (getBalance(_destAddr) > 0) {\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\n        }\n    }\n\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n        require(bs.length >= start + 32, \"slicing out of range\");\n\n        uint256 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n\n        return x;\n    }\n}\n\n// File: localhost/utils/ZrxAllowlist.sol\n\npragma solidity ^0.6.0;\n\n\ncontract AdminAuth {\n\n    using SafeERC20 for ERC20;\n\n    address public owner;\n    address public admin;\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n    /// @param _admin Address of multisig that becomes admin\n    function setAdminByOwner(address _admin) public {\n        require(msg.sender == owner);\n        require(admin == address(0));\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function setAdminByAdmin(address _admin) public {\n        require(msg.sender == admin);\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function setOwnerByAdmin(address _owner) public {\n        require(msg.sender == admin);\n\n        owner = _owner;\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyOwner {\n        selfdestruct(payable(owner));\n    }\n\n    /// @notice  withdraw stuck funds\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(owner).transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(owner, _amount);\n        }\n    }\n}\n\n\ncontract ZrxAllowlist is AdminAuth {\n\n    mapping (address => bool) public zrxAllowlist;\n\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n        zrxAllowlist[_zrxAddr] = _state;\n    }\n\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n        return zrxAllowlist[_zrxAddr];\n    }\n}\n\n// File: localhost/interfaces/ExchangeInterfaceV2.sol\n\npragma solidity ^0.6.0;\n\ninterface ExchangeInterfaceV2 {\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount) external payable returns (uint);\n\n    function buy(address _srcAddr, address _destAddr, uint _destAmount) external payable returns(uint);\n\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\n\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\n}\n\n// File: localhost/interfaces/TokenInterface.sol\n\npragma solidity ^0.6.0;\n\nabstract contract TokenInterface {\n    function allowance(address, address) public virtual returns (uint256);\n\n    function balanceOf(address) public virtual returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(address, address, uint256) public virtual returns (bool);\n\n    function deposit() public virtual payable;\n\n    function withdraw(uint256) public virtual;\n}\n\n// File: localhost/DS/DSMath.sol\n\npragma solidity ^0.6.0;\n\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n// File: localhost/exchange/SaverExchangeCore.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n\ncontract SaverExchangeCore is SaverExchangeHelper, DSMath {\n\n    // first is empty to keep the legacy order in place\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\n\n    enum ActionType { SELL, BUY }\n\n    struct ExchangeData {\n        address srcAddr;\n        address destAddr;\n        uint srcAmount;\n        uint destAmount;\n        uint minPrice;\n        ExchangeType exchangeType;\n        address exchangeAddr;\n        bytes callData;\n        uint256 price0x;\n    }\n\n    /// @notice Internal method that preforms a sell on 0x/on-chain\n    /// @dev Usefull for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    /// @return (address, uint) Address of the wrapper used and destAmount\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\n\n        address wrapper;\n        uint swapedTokens;\n        bool success;\n        uint tokensLeft = exData.srcAmount;\n\n        // if 0x is selected try first the 0x order\n        if (exData.exchangeType == ExchangeType.ZEROX) {\n            approve0xProxy(exData.srcAddr, exData.srcAmount);\n\n            (success, swapedTokens, tokensLeft) = takeOrder(exData, address(this).balance, ActionType.SELL);\n\n            require(success, \"0x order failed\");\n\n            wrapper = exData.exchangeAddr;\n        }\n\n        // check if we have already swapped with 0x, or tried swapping but failed\n        if (tokensLeft > 0) {\n            uint price;\n\n            (wrapper, price)\n                = getBestPrice(exData.srcAmount, exData.srcAddr, exData.destAddr, exData.exchangeType, ActionType.SELL);\n\n            require(price > exData.minPrice || exData.price0x > exData.minPrice, \"Slippage hit\");\n\n            // if 0x has better prices use 0x\n            if (exData.price0x >= price && exData.exchangeType != ExchangeType.ZEROX) {\n                approve0xProxy(exData.srcAddr, exData.srcAmount);\n\n                (success, swapedTokens, tokensLeft) = takeOrder(exData, address(this).balance, ActionType.SELL);\n            }\n\n            // 0x either had worse price or we tried and order fill failed, so call on chain swap\n            if (tokensLeft > 0) {\n                require(price > exData.minPrice, \"On chain slippage hit\");\n\n                swapedTokens = saverSwap(exData, wrapper, ActionType.SELL);\n            }\n        }\n\n        require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), \"Double check min price\");\n\n        return (wrapper, swapedTokens);\n    }\n\n    /// @notice Internal method that preforms a buy on 0x/on-chain\n    /// @dev Usefull for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    /// @return (address, uint) Address of the wrapper used and srcAmount\n    function _buy(ExchangeData memory exData) internal returns (address, uint) {\n\n        address wrapper;\n        uint swapedTokens;\n        bool success;\n\n        require(exData.destAmount != 0, \"Dest amount must be specified\");\n\n        // if 0x is selected try first the 0x order\n        if (exData.exchangeType == ExchangeType.ZEROX) {\n            approve0xProxy(exData.srcAddr, exData.srcAmount);\n\n            (success, swapedTokens,) = takeOrder(exData, address(this).balance, ActionType.BUY);\n\n            require(success, \"0x order failed\");\n\n            wrapper = exData.exchangeAddr;\n        }\n\n        // check if we have already swapped with 0x, or tried swapping but failed\n        if (getBalance(exData.destAddr) < exData.destAmount) {\n            uint price;\n\n            (wrapper, price)\n                = getBestPrice(exData.destAmount, exData.srcAddr, exData.destAddr, exData.exchangeType, ActionType.BUY);\n\n            require(price < exData.minPrice || exData.price0x < exData.minPrice, \"Slippage hit\");\n\n            // if 0x has better prices use 0x\n            if (exData.price0x != 0 && exData.price0x <= price && exData.exchangeType != ExchangeType.ZEROX) {\n                approve0xProxy(exData.srcAddr, exData.srcAmount);\n\n                (success, swapedTokens,) = takeOrder(exData, address(this).balance, ActionType.BUY);\n            }\n\n            // 0x either had worse price or we tried and order fill failed, so call on chain swap\n            if (getBalance(exData.destAddr) < exData.destAmount) {\n                require(price < exData.minPrice, \"On chain slippage hit\");\n\n                swapedTokens = saverSwap(exData, wrapper, ActionType.BUY);\n            }\n        }\n\n        require(getBalance(exData.destAddr) >= exData.destAmount, \"Less then destAmount\");\n\n        return (wrapper, getBalance(exData.destAddr));\n    }\n\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\n    /// @param _exData Exchange data\n    /// @param _ethAmount Ether fee needed for 0x order\n    function takeOrder(\n        ExchangeData memory _exData,\n        uint256 _ethAmount,\n        ActionType _type\n    ) private returns (bool success, uint256, uint256) {\n\n        // write in the exact amount we are selling/buing in an order\n        if (_type == ActionType.SELL) {\n            writeUint256(_exData.callData, 36, _exData.srcAmount);\n        } else {\n            writeUint256(_exData.callData, 36, _exData.destAmount);\n        }\n\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.exchangeAddr)) {\n            (success, ) = _exData.exchangeAddr.call{value: _ethAmount}(_exData.callData);\n        } else {\n            success = false;\n        }\n\n        uint256 tokensSwaped = 0;\n        uint256 tokensLeft = _exData.srcAmount;\n\n        if (success) {\n            // check to see if any _src tokens are left over after exchange\n            tokensLeft = getBalance(_exData.srcAddr);\n\n            // convert weth -> eth if needed\n            if (_exData.destAddr == KYBER_ETH_ADDRESS) {\n                TokenInterface(WETH_ADDRESS).withdraw(\n                    TokenInterface(WETH_ADDRESS).balanceOf(address(this))\n                );\n            }\n\n            // get the current balance of the swaped tokens\n            tokensSwaped = getBalance(_exData.destAddr);\n        }\n\n        return (success, tokensSwaped, tokensLeft);\n    }\n\n    /// @notice Returns the best estimated price from 2 exchanges\n    /// @param _amount Amount of source tokens you want to exchange\n    /// @param _srcToken Address of the source token\n    /// @param _destToken Address of the destination token\n    /// @param _exchangeType Which exchange will be used\n    /// @param _type Type of action SELL|BUY\n    /// @return (address, uint) The address of the best exchange and the exchange price\n    function getBestPrice(\n        uint256 _amount,\n        address _srcToken,\n        address _destToken,\n        ExchangeType _exchangeType,\n        ActionType _type\n    ) public returns (address, uint256) {\n\n        if (_exchangeType == ExchangeType.OASIS) {\n            return (OASIS_WRAPPER, getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount, _type));\n        }\n\n        if (_exchangeType == ExchangeType.KYBER) {\n            return (KYBER_WRAPPER, getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount, _type));\n        }\n\n        if (_exchangeType == ExchangeType.UNISWAP) {\n            return (UNISWAP_WRAPPER, getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount, _type));\n        }\n\n        uint expectedRateKyber = getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount, _type);\n        uint expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount, _type);\n        uint expectedRateOasis = getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount, _type);\n\n        if (_type == ActionType.SELL) {\n            return getBiggestRate(expectedRateKyber, expectedRateUniswap, expectedRateOasis);\n        } else {\n            return getSmallestRate(expectedRateKyber, expectedRateUniswap, expectedRateOasis);\n        }\n    }\n\n    /// @notice Return the expected rate from the exchange wrapper\n    /// @dev In case of Oasis/Uniswap handles the different precision tokens\n    /// @param _wrapper Address of exchange wrapper\n    /// @param _srcToken From token\n    /// @param _destToken To token\n    /// @param _amount Amount to be exchanged\n    /// @param _type Type of action SELL|BUY\n    function getExpectedRate(\n        address _wrapper,\n        address _srcToken,\n        address _destToken,\n        uint256 _amount,\n        ActionType _type\n    ) public returns (uint256) {\n        bool success;\n        bytes memory result;\n\n        if (_type == ActionType.SELL) {\n            (success, result) = _wrapper.call(abi.encodeWithSignature(\n                \"getSellRate(address,address,uint256)\",\n                _srcToken,\n                _destToken,\n                _amount\n            ));\n\n        } else {\n            (success, result) = _wrapper.call(abi.encodeWithSignature(\n                \"getBuyRate(address,address,uint256)\",\n                _srcToken,\n                _destToken,\n                _amount\n            ));\n        }\n\n        if (success) {\n            uint rate = sliceUint(result, 0);\n\n            if (_wrapper != KYBER_WRAPPER) {\n                rate = rate * (10**(18 - getDecimals(_destToken)));\n            }\n\n            return rate;\n        }\n\n        return 0;\n    }\n\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\n    /// @param exData Exchange data struct\n    /// @param _wrapper Address of exchange wrapper\n    /// @param _type Type of action SELL|BUY\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\n    function saverSwap(ExchangeData memory exData, address _wrapper, ActionType _type) internal returns (uint swapedTokens) {\n        uint ethValue = 0;\n\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n            ethValue = exData.srcAmount;\n        } else {\n            ERC20(exData.srcAddr).safeTransfer(_wrapper, ERC20(exData.srcAddr).balanceOf(address(this)));\n        }\n\n        if (_type == ActionType.SELL) {\n            swapedTokens = ExchangeInterfaceV2(_wrapper).\n                    sell{value: ethValue}(exData.srcAddr, exData.destAddr, exData.srcAmount);\n        } else {\n            swapedTokens = ExchangeInterfaceV2(_wrapper).\n                    buy{value: ethValue}(exData.srcAddr, exData.destAddr, exData.destAmount);\n        }\n    }\n\n    /// @notice Finds the biggest rate between exchanges, needed for sell rate\n    /// @param _expectedRateKyber Kyber rate\n    /// @param _expectedRateUniswap Uniswap rate\n    /// @param _expectedRateOasis Oasis rate\n    function getBiggestRate(\n        uint _expectedRateKyber,\n        uint _expectedRateUniswap,\n        uint _expectedRateOasis\n    ) internal pure returns (address, uint) {\n        if (\n            (_expectedRateUniswap >= _expectedRateKyber) && (_expectedRateUniswap >= _expectedRateOasis)\n        ) {\n            return (UNISWAP_WRAPPER, _expectedRateUniswap);\n        }\n\n        if (\n            (_expectedRateKyber >= _expectedRateUniswap) && (_expectedRateKyber >= _expectedRateOasis)\n        ) {\n            return (KYBER_WRAPPER, _expectedRateKyber);\n        }\n\n        if (\n            (_expectedRateOasis >= _expectedRateKyber) && (_expectedRateOasis >= _expectedRateUniswap)\n        ) {\n            return (OASIS_WRAPPER, _expectedRateOasis);\n        }\n    }\n\n    /// @notice Finds the smallest rate between exchanges, needed for buy rate\n    /// @param _expectedRateKyber Kyber rate\n    /// @param _expectedRateUniswap Uniswap rate\n    /// @param _expectedRateOasis Oasis rate\n    function getSmallestRate(\n        uint _expectedRateKyber,\n        uint _expectedRateUniswap,\n        uint _expectedRateOasis\n    ) internal pure returns (address, uint) {\n        if (\n            (_expectedRateUniswap <= _expectedRateKyber) && (_expectedRateUniswap <= _expectedRateOasis)\n        ) {\n            return (UNISWAP_WRAPPER, _expectedRateUniswap);\n        }\n\n        if (\n            (_expectedRateKyber <= _expectedRateUniswap) && (_expectedRateKyber <= _expectedRateOasis)\n        ) {\n            return (KYBER_WRAPPER, _expectedRateKyber);\n        }\n\n        if (\n            (_expectedRateOasis <= _expectedRateKyber) && (_expectedRateOasis <= _expectedRateUniswap)\n        ) {\n            return (OASIS_WRAPPER, _expectedRateOasis);\n        }\n    }\n\n    function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\n        if (_b.length < _index + 32) {\n            revert(\"Incorrent lengt while writting bytes32\");\n        }\n\n        bytes32 input = bytes32(_input);\n\n        _index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(_b, _index), input)\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external virtual payable {}\n}\n\n// File: localhost/utils/ExchangeDataParser.sol\n\n\n\ncontract ExchangeDataParser {\n     function decodeExchangeData(\n        SaverExchangeCore.ExchangeData memory exchangeData\n    ) internal pure returns (address[3] memory, uint[5] memory, bytes memory) {\n        return (\n         [exchangeData.srcAddr, exchangeData.destAddr, exchangeData.exchangeAddr],\n         [exchangeData.srcAmount, exchangeData.destAmount, exchangeData.minPrice, exchangeData.price0x, uint256(exchangeData.exchangeType)],\n         exchangeData.callData\n        );\n    }\n\n    function encodeExchangeData(\n        address[3] memory exAddr, uint[5] memory exNum, bytes memory callData\n    ) internal pure returns (SaverExchangeCore.ExchangeData memory) {\n        return SaverExchangeCore.ExchangeData({\n            srcAddr: exAddr[0],\n            destAddr: exAddr[1],\n            srcAmount: exNum[0],\n            destAmount: exNum[1],\n            minPrice: exNum[2],\n            exchangeType: SaverExchangeCore.ExchangeType(exNum[4]),\n            exchangeAddr: exAddr[2],\n            callData: callData,\n            price0x: exNum[3]\n        });\n    }\n}\n\n// File: localhost/loggers/FlashLoanLogger.sol\n\npragma solidity ^0.6.0;\n\n\ncontract FlashLoanLogger {\n    event FlashLoan(string actionType, uint256 id, uint256 loanAmount, address sender);\n\n    function logFlashLoan(\n        string calldata _actionType,\n        uint256 _id,\n        uint256 _loanAmount,\n        address _sender\n    ) external {\n        emit FlashLoan(_actionType, _loanAmount, _id, _sender);\n    }\n}\n\n// File: localhost/DS/DSAuthority.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n}\n\n// File: localhost/DS/DSAuth.sol\n\npragma solidity ^0.6.0;\n\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n// File: localhost/DS/DSGuard.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract DSGuard {\n    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\n\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n\n    function permit(address src, address dst, bytes32 sig) public virtual;\n\n    function forbid(address src, address dst, bytes32 sig) public virtual;\n}\n\n\nabstract contract DSGuardFactory {\n    function newGuard() public virtual returns (DSGuard guard);\n}\n\n// File: localhost/auth/ProxyPermission.sol\n\npragma solidity ^0.6.0;\n\n\n\ncontract ProxyPermission {\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n\n    /// @notice Called in the context of DSProxy to authorize an address\n    /// @param _contractAddr Address which will be authorized\n    function givePermission(address _contractAddr) public {\n        address currAuthority = address(DSAuth(address(this)).authority());\n        DSGuard guard = DSGuard(currAuthority);\n\n        if (currAuthority == address(0)) {\n            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\n            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\n        }\n\n        guard.permit(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\n    }\n\n    /// @notice Called in the context of DSProxy to remove authority of an address\n    /// @param _contractAddr Auth address which will be removed from authority list\n    function removePermission(address _contractAddr) public {\n        address currAuthority = address(DSAuth(address(this)).authority());\n        \n        // if there is no authority, that means that contract doesn't have permission\n        if (currAuthority == address(0)) {\n            return;\n        }\n\n        DSGuard guard = DSGuard(currAuthority);\n        guard.forbid(_contractAddr, address(this), bytes4(keccak256(\"execute(address,bytes)\")));\n    }\n}\n\n// File: localhost/utils/Address.sol\n\npragma solidity ^0.6.0;\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: localhost/utils/SafeERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     */\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: localhost/auth/AdminAuth.sol\n\npragma solidity ^0.6.0;\n\n\n// File: localhost/mcd/maker/Manager.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Manager {\n    function last(address) virtual public returns (uint);\n    function cdpCan(address, uint, address) virtual public view returns (uint);\n    function ilks(uint) virtual public view returns (bytes32);\n    function owns(uint) virtual public view returns (address);\n    function urns(uint) virtual public view returns (address);\n    function vat() virtual public view returns (address);\n    function open(bytes32, address) virtual public returns (uint);\n    function give(uint, address) virtual public;\n    function cdpAllow(uint, address, uint) virtual public;\n    function urnAllow(address, uint) virtual public;\n    function frob(uint, int, int) virtual public;\n    function flux(uint, address, uint) virtual public;\n    function move(uint, address, uint) virtual public;\n    function exit(address, uint, address, uint) virtual public;\n    function quit(uint, address) virtual public;\n    function enter(address, uint) virtual public;\n    function shift(uint, uint) virtual public;\n}\n\n// File: localhost/mcd/maker/Vat.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Vat {\n\n    struct Urn {\n        uint256 ink;   // Locked Collateral  [wad]\n        uint256 art;   // Normalised Debt    [wad]\n    }\n\n    struct Ilk {\n        uint256 Art;   // Total Normalised Debt     [wad]\n        uint256 rate;  // Accumulated Rates         [ray]\n        uint256 spot;  // Price with Safety Margin  [ray]\n        uint256 line;  // Debt Ceiling              [rad]\n        uint256 dust;  // Urn Debt Floor            [rad]\n    }\n\n    mapping (bytes32 => mapping (address => Urn )) public urns;\n    mapping (bytes32 => Ilk)                       public ilks;\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\n\n    function can(address, address) virtual public view returns (uint);\n    function dai(address) virtual public view returns (uint);\n    function frob(bytes32, address, address, address, int, int) virtual public;\n    function hope(address) virtual public;\n    function move(address, address, uint) virtual public;\n    function fork(bytes32, address, address, int, int) virtual public;\n}\n\n// File: localhost/interfaces/DSProxyInterface.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract DSProxyInterface {\n\n    /// Truffle wont compile if this isn't commented\n    // function execute(bytes memory _code, bytes memory _data)\n    //     public virtual\n    //     payable\n    //     returns (address, bytes32);\n\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\n\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\n\n    function owner() public virtual returns (address);\n}\n\n// File: localhost/interfaces/ILoanShifter.sol\n\npragma solidity ^0.6.0;\n\nabstract contract ILoanShifter {\n    function getLoanAmount(uint, address) public view virtual returns(uint);\n    function getUnderlyingAsset(address _addr) public view virtual returns (address);\n}\n\n// File: localhost/interfaces/ERC20.sol\n\npragma solidity ^0.6.0;\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: localhost/interfaces/CTokenInterface.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract CTokenInterface is ERC20 {\n    function mint(uint256 mintAmount) external virtual returns (uint256);\n\n    function mint() external virtual payable;\n\n    function accrueInterest() public virtual returns (uint);\n\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\n\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\n\n    function repayBorrow() external virtual payable;\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\n\n    function repayBorrowBehalf(address borrower) external virtual payable;\n\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n        external virtual\n        returns (uint256);\n\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\n\n    function exchangeRateCurrent() external virtual returns (uint256);\n\n    function supplyRatePerBlock() external virtual returns (uint256);\n\n    function borrowRatePerBlock() external virtual returns (uint256);\n\n    function totalReserves() external virtual returns (uint256);\n\n    function reserveFactorMantissa() external virtual returns (uint256);\n\n    function borrowBalanceCurrent(address account) external view virtual returns (uint256);\n\n    function totalBorrowsCurrent() external virtual returns (uint256);\n\n    function getCash() external virtual returns (uint256);\n\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\n\n    function underlying() external virtual returns (address);\n\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\n}\n\n// File: localhost/interfaces/ILendingPool.sol\n\npragma solidity ^0.6.0;\n\nabstract contract ILendingPool {\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\n\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\n\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\n\t\n    /// @param _reserve underlying token address\n    function getReserveData(address _reserve)\n        external virtual\n        view\n        returns (\n            uint256 totalLiquidity,               // reserve total liquidity\n            uint256 availableLiquidity,           // reserve available liquidity for borrowing\n            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\n            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\n            uint256 liquidityRate,                // current deposit APY of the reservefor depositors, in Ray units.\n            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\n            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\n            uint256 averageStableBorrowRate,      // current average stable borrow rate\n            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\n            uint256 liquidityIndex,               // cumulative liquidity index\n            uint256 variableBorrowIndex,          // cumulative variable borrow index\n            address aTokenAddress,                // aTokens contract address for the specific _reserve\n            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\n        );\n\n    /// @param _user users address\n    function getUserAccountData(address _user)\n        external virtual\n        view\n        returns (\n            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\n            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\n            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\n            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\n            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\n            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\n            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\n            uint256 healthFactor                  // user current Health Factor\n    );    \n\n    /// @param _reserve underlying token address\n    /// @param _user users address\n    function getUserReserveData(address _reserve, address _user)\n        external virtual\n        view\n        returns (\n            uint256 currentATokenBalance,         // user current reserve aToken balance\n            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\n            uint256 principalBorrowBalance,       // user balance of borrowed asset\n            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\n            uint256 borrowRate,                   // user current borrow rate APY\n            uint256 liquidityRate,                // user current earn rate on _reserve\n            uint256 originationFee,               // user outstanding loan origination fee\n            uint256 variableBorrowIndex,          // user variable cumulative index\n            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\n            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\n    );\n\n    function getReserveConfigurationData(address _reserve)\n        external virtual\n        view\n        returns (\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            address rateStrategyAddress,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive\n    );\n\n    // ------------------ LendingPoolCoreData ------------------------\n    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\n    function getReserveConfiguration(address _reserve)\n        external virtual\n        view\n        returns (uint256, uint256, uint256, bool);\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\n        public virtual\n        view\n        returns (uint256);\n\n    // ---------------- LendingPoolDataProvider ---------------------\n    function calculateUserGlobalData(address _user)\n        public virtual\n        view\n        returns (\n            uint256 totalLiquidityBalanceETH,\n            uint256 totalCollateralBalanceETH,\n            uint256 totalBorrowBalanceETH,\n            uint256 totalFeesETH,\n            uint256 currentLtv,\n            uint256 currentLiquidationThreshold,\n            uint256 healthFactor,\n            bool healthFactorBelowThreshold\n        );\n}\n\n// File: localhost/shifter/LoanShifterTaker.sol\n\n\n\n\n/// @title LoanShifterTaker Entry point for using the shifting operation\ncontract LoanShifterTaker is AdminAuth, ProxyPermission {\n\n    ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\n\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant cDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n\n    address payable public constant LOAN_SHIFTER_RECEIVER = 0xA94B7f0465E98609391C623d0560C5720a3f2D33;\n\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\n\n    enum Protocols { MCD, COMPOUND, AAVE }\n\n    struct LoanShiftData {\n        Protocols fromProtocol;\n        Protocols toProtocol;\n        bool wholeDebt;\n        uint collAmount;\n        uint debtAmount;\n        address debtAddr;\n        address addrLoan1;\n        address addrLoan2;\n        uint id1;\n        uint id2;\n    }\n\n    mapping (Protocols => address) public contractAddresses;\n\n    /// @notice Main entry point, it will move or transform a loan\n    /// @dev If the operation doesn't require exchange send empty data\n    function moveLoan(\n        LoanShiftData memory _loanShift,\n        SaverExchangeCore.ExchangeData memory _exchangeData\n    ) public {\n        if (_isSameTypeVaults(_loanShift)) {\n            _forkVault(_loanShift);\n            return;\n        }\n\n        _callCloseAndOpen(_loanShift, _exchangeData);\n    }\n\n    /// @notice An admin only function to add/change a protocols address\n    function addProtocol(uint8 _protoType, address _protoAddr) public onlyOwner {\n        contractAddresses[Protocols(_protoType)] = _protoAddr;\n    }\n\n    function getProtocolAddr(Protocols _proto) public view returns (address) {\n        return contractAddresses[_proto];\n    }\n\n    //////////////////////// INTERNAL FUNCTIONS //////////////////////////\n\n    function _callCloseAndOpen(\n        LoanShiftData memory _loanShift,\n        SaverExchangeCore.ExchangeData memory _exchangeData\n    ) internal {\n        address protoAddr = getProtocolAddr(_loanShift.fromProtocol);\n\n        uint loanAmount = _loanShift.debtAmount;\n\n        if (_loanShift.wholeDebt) {\n            loanAmount = ILoanShifter(protoAddr).getLoanAmount(_loanShift.id1, _loanShift.addrLoan1);\n        }\n\n        (\n            uint[8] memory numData,\n            address[6] memory addrData,\n            uint8[3] memory enumData,\n            bytes memory callData\n        )\n        = _packData(_loanShift, _exchangeData);\n\n        // encode data\n        bytes memory paramsData = abi.encode(numData, addrData, enumData, callData, address(this));\n\n        // call FL\n        givePermission(LOAN_SHIFTER_RECEIVER);\n\n        lendingPool.flashLoan(LOAN_SHIFTER_RECEIVER, _loanShift.debtAddr, loanAmount, paramsData);\n\n        removePermission(LOAN_SHIFTER_RECEIVER);\n    }\n\n    function _forkVault(LoanShiftData memory _loanShift) internal {\n        // Create new Vault to move to\n        if (_loanShift.id2 == 0) {\n            _loanShift.id2 = manager.open(manager.ilks(_loanShift.id1), address(this));\n        }\n\n        if (_loanShift.wholeDebt) {\n            manager.shift(_loanShift.id1, _loanShift.id2);\n        } else {\n            // Vat(VAT_ADDRESS).fork(\n            //     manager.ilks(_loanShift.id1),\n            //     manager.urns(_loanShift.id1),\n            //     manager.urns(_loanShift.id2),\n            //     int(_loanShift.collAmount),\n            //     int(_loanShift.debtAmount)\n            // );\n        }\n    }\n\n    function _isSameTypeVaults(LoanShiftData memory _loanShift) internal pure returns (bool) {\n        return _loanShift.fromProtocol == Protocols.MCD && _loanShift.toProtocol == Protocols.MCD\n                && _loanShift.addrLoan1 == _loanShift.addrLoan2;\n    }\n\n    function _packData(\n        LoanShiftData memory _loanShift,\n        SaverExchangeCore.ExchangeData memory exchangeData\n    ) internal pure returns (uint[8] memory numData, address[6] memory addrData, uint8[3] memory enumData, bytes memory callData) {\n\n        numData = [\n            _loanShift.collAmount,\n            _loanShift.debtAmount,\n            _loanShift.id1,\n            _loanShift.id2,\n            exchangeData.srcAmount,\n            exchangeData.destAmount,\n            exchangeData.minPrice,\n            exchangeData.price0x\n        ];\n\n        addrData = [\n            _loanShift.addrLoan1,\n            _loanShift.addrLoan2,\n            _loanShift.debtAddr,\n            exchangeData.srcAddr,\n            exchangeData.destAddr,\n            exchangeData.exchangeAddr\n        ];\n\n        enumData = [\n            uint8(_loanShift.fromProtocol),\n            uint8(_loanShift.toProtocol),\n            uint8(exchangeData.exchangeType)\n        ];\n\n        callData = exchangeData.callData;\n    }\n\n}\n\n// File: localhost/shifter/LoanShifterReceiver.sol\n\n\n\n\ncontract LoanShifterReceiver is SaverExchangeCore, FlashLoanReceiverBase, AdminAuth {\n\n    ILendingPoolAddressesProvider public LENDING_POOL_ADDRESS_PROVIDER = ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    LoanShifterTaker loanShifterTaker = LoanShifterTaker(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    struct ParamData {\n        bytes proxyData1;\n        bytes proxyData2;\n        address proxy;\n        address debtAddr;\n        uint8 protocol1;\n        uint8 protocol2;\n    }\n\n    constructor() FlashLoanReceiverBase(LENDING_POOL_ADDRESS_PROVIDER) public {}\n\n    function executeOperation(\n        address _reserve,\n        uint256 _amount,\n        uint256 _fee,\n        bytes calldata _params)\n    external override {\n        // Format the call data for DSProxy\n        (ParamData memory paramData, ExchangeData memory exchangeData)\n                                 = packFunctionCall(_amount, _params);\n\n        address protocolAddr1 = loanShifterTaker.getProtocolAddr(LoanShifterTaker.Protocols(paramData.protocol1));\n        require(protocolAddr1 != address(0), \"Protocol1 addr not found\");\n\n        address protocolAddr2 = loanShifterTaker.getProtocolAddr(LoanShifterTaker.Protocols(paramData.protocol2));\n        require(protocolAddr2 != address(0), \"Protocol2 addr not found\");\n\n        // Send Flash loan amount to DSProxy\n        sendLoanToProxy(payable(paramData.proxy), _reserve, _amount);\n\n        // Execute the Close operation\n        DSProxyInterface(paramData.proxy).execute(protocolAddr1, paramData.proxyData1);\n\n        if (paramData.protocol1 != paramData.protocol2) {\n            if (paramData.debtAddr == exchangeData.srcAddr) {\n                _buy(exchangeData);\n            } else {\n                _sell(exchangeData);\n            }\n        }\n\n        // Execute the Open operation\n        DSProxyInterface(paramData.proxy).execute(protocolAddr2, paramData.proxyData2);\n\n        // Repay FL\n        transferFundsBackToPoolInternal(_reserve, _amount.add(_fee));\n\n        // if there is some eth left (0x fee), return it to user\n        if (address(this).balance > 0) {\n            tx.origin.transfer(address(this).balance);\n        }\n    }\n\n    function packFunctionCall(uint _amount, bytes memory _params)\n        internal pure returns (ParamData memory paramData, ExchangeData memory exchangeData) {\n\n        (\n            uint[8] memory numData, // collAmount, debtAmount, id1, id2, srcAmount, destAmount, minPrice, price0x\n            address[6] memory addrData, // addrLoan1, addrLoan2, debtAddr, srcAddr, destAddr, exchangeAddr\n            uint8[3] memory enumData, // fromProtocol, toProtocol, exchangeType\n            bytes memory callData,\n            address proxy\n        )\n        = abi.decode(_params, (uint256[8],address[6],uint8[3],bytes,address));\n\n        bytes memory proxyData1;\n        bytes memory proxyData2;\n\n        if (enumData[0] == uint8(LoanShifterTaker.Protocols.MCD)) {\n            proxyData1 = abi.encodeWithSignature(\n            \"close(uint256,address,uint256,uint256)\",\n                                numData[2], addrData[0], _amount, numData[0]);\n\n            proxyData2 = abi.encodeWithSignature(\n            \"open(uint256,address,uint256,uint256)\",\n                                numData[3], addrData[1], _amount, numData[1]);\n        } else if(enumData[0] == uint8(LoanShifterTaker.Protocols.COMPOUND)) {\n            proxyData1 = abi.encodeWithSignature(\n            \"close(address,address,uint256,uint256)\",\n                                addrData[0], addrData[2], numData[0], numData[1]);\n\n            // TODO: check this?\n            address debtAddr2 = addrData[4] == addrData[2] ? addrData[2] : addrData[4];\n\n            proxyData2 = abi.encodeWithSignature(\n            \"open(address,address,uint256,uint256)\",\n                                addrData[1], debtAddr2, numData[0], numData[1]);\n        }\n\n\n        paramData = ParamData({\n            proxyData1: proxyData1,\n            proxyData2: proxyData2,\n            debtAddr: addrData[2],\n            proxy: proxy,\n            protocol1: enumData[0],\n            protocol2: enumData[1]\n        });\n\n        exchangeData = SaverExchangeCore.ExchangeData({\n            srcAddr: addrData[3],\n            destAddr: addrData[4],\n            srcAmount: numData[4],\n            destAmount: numData[5],\n            minPrice: numData[6],\n            exchangeType: ExchangeType(enumData[2]),\n            exchangeAddr: addrData[5],\n            callData: callData,\n            price0x: numData[7]\n        });\n\n    }\n\n    function sendLoanToProxy(address payable _proxy, address _reserve, uint _amount) internal {\n        if (_reserve != ETH_ADDRESS) {\n            ERC20(_reserve).transfer(_proxy, _amount);\n        }\n\n        _proxy.transfer(address(this).balance);\n    }\n\n    function setLoanShiftTaker(address _loanShiftTaker) onlyOwner public {\n        loanShifterTaker = LoanShifterTaker(_loanShiftTaker);\n    }\n\n    receive() external override(FlashLoanReceiverBase, SaverExchangeCore) payable {}\n}\n"
    }
  }
}