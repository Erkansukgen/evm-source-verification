{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Staker.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface ERC20Basic {\r\n  function balanceOf(address who) external view returns (uint256 balance);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool trans1);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool trans);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool hello);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Staker {\r\n  using SafeMath for uint256;\r\n\r\n  address public owner;\r\n  modifier ownerOnly {\r\n    require(msg.sender == owner, \"OWNER ONLY\");\r\n    _;\r\n  }\r\n\r\n  ERC20Basic public TEAL;\r\n  uint256[4] public periods = [30 days, 60 days, 90 days, 180 days];\r\n  uint256[4] public rates = [1030, 1050, 1075, 1100];\r\n  uint256[4] public amounts = [100, 500, 1000, 5000];\r\n  struct Stake {\r\n    uint256 start; // when cycle started\r\n    uint256 amount; // amount currently held\r\n    uint256 rate; // rate for current cycle\r\n    uint8 period; // type: 0, 1, 2, 3\r\n    uint8 cycle; // current cycle (starts from 1)\r\n  }\r\n  mapping(address => Stake) public stakes;\r\n\r\n  function stake(uint8 _period) public {\r\n    require(stakes[msg.sender].start == 0, \"Already staking\");\r\n    require(_period < 4, \"Invalid period, must be from 0 to 3\");\r\n\r\n    require(TEAL.transferFrom(msg.sender, address(this), amounts[_period]), \"Transfer failed, check allowance\");\r\n    stakes[msg.sender] = Stake({start: block.timestamp, amount: amounts[_period], rate: rates[_period], period: _period, cycle: 1});\r\n  }\r\n\r\n  function unstake() public {\r\n    require(stakes[msg.sender].start != 0, \"Not staking\");\r\n    Stake storage _s = stakes[msg.sender];\r\n    uint8 _t = _s.period;\r\n    require(block.timestamp >= _s.start + periods[_t], \"Period not passed yet\");\r\n\r\n    uint256 amount = _s.amount.mul(_s.rate).div(1000);\r\n    require(TEAL.transfer(msg.sender, amount), \"Transfer failed, check contract balance\");\r\n    delete stakes[msg.sender];\r\n  }\r\n\r\n  function prolong() public {\r\n    require(stakes[msg.sender].start != 0, \"Not staking\");\r\n    Stake storage _s = stakes[msg.sender];\r\n    uint256 _p = periods[_s.period];\r\n    require(block.timestamp >= _s.start + _p, \"Period not passed yet\");\r\n    require(_s.cycle * _p < 360 days, \"Prolong limit reached. Should unstake\");\r\n\r\n    _s.start = block.timestamp;\r\n    _s.amount = _s.amount.mul(_s.rate).div(1000);\r\n    _s.rate = rates[_s.period];\r\n    _s.cycle++;\r\n  }\r\n\r\n  function updateRate(uint8 _period, uint256 _value) public ownerOnly {\r\n    rates[_period] = _value;\r\n  }\r\n\r\n  function transferOwnership(address _owner) public ownerOnly {\r\n    owner = _owner;\r\n  }\r\n\r\n  constructor (ERC20Basic _token) {\r\n    TEAL = ERC20Basic(_token);\r\n    owner = msg.sender;\r\n  }\r\n}"}}}