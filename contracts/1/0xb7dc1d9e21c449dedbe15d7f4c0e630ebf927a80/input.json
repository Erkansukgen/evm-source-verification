{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Test2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.4;\n\ninterface UniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface UniswapV2Pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function token0() external view returns (address);\n}\n\ncontract Test2 {\n\n    uint public currentA;\n    uint public currentB;\n    uint public currentM;\n    uint public receivedA;\n    uint public receivedB;\n    uint public receivedM;\n    \n    function checkPair(address _factory, address _weth, address[] memory _path, uint sentA, uint sentB) external {\n        address pair = UniswapV2Factory(_factory).getPair(_path[0],_path[1]);\n        (currentA, currentB, ) = UniswapV2Pair(pair).getReserves();\n        \n        if (UniswapV2Pair(pair).token0() != _weth) {\n            (currentA, currentB) = (currentB, currentA);\n        }\n        \n        currentM = currentA * currentB;\n        \n        receivedA = sentA;\n        receivedB = sentB;\n        receivedM = sentA * sentB;\n        \n    }\n    \n}"
    }
  }
}