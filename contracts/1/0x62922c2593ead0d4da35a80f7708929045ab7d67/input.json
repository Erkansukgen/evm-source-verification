{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CryptographInitiator.sol":{"content":"// Â© Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\n/// @author Guillaume Gonnaud\n/// @title Cryptograph Initiator\n/// @notice Basically a solidity bean so that we can pass it as argument without hitting stack too deep errors when creating a cryptograph\ncontract CryptographInitiator{\n    address public owner; // The desired owner of the Cryptograph\n    string public name; // The desired name of the Cryptograph\n    string public creator; // The desired creatpr of the Cryptograph\n    uint256 public auctionStartTime; //The desired unix (seconds) timestamp at which the initial auction should start\n    uint256 public auctionSecondsDuration; // The duration in seconds of the initial auction\n    address public publisher; // The address of the publisher. Can edit media url and hash for a cryptograph.\n    uint256 public publisherCut; // How much out of 100k parts of profits should the publisher get. e.g. publisherCut = 25000 means 1/4\n    address public charity; // The address of the charity\n    uint256 public charityCut; // The charity cut out of 100k\n    address public thirdParty; // The address of a third party\n    uint256 public thirdPartyCut; // The third party cut out of 100k\n    uint256 public perpetualAltruismCut; // Will always be set to 25k except very special occasions.\n    uint256 public maxSupply; // How many of these cryptographs should be minted maximum\n    uint256 public startingPrice; // The Starting price of the auction\n    uint256 public cryptographIssue; // The desired issue of the cryptograph (only for editions)\n    string public mediaHash; // The desired media hash of the cryptograph\n    string public mediaUrl; // The desired media url of the cryptograph\n\n    /// @param _name The desired name of the Cryptograph\n    /// @param _auctionStartTime The desired unix (seconds) timestamp at which the initial auction should start\n    /// @param _auctionSecondsDuration The duration in seconds of the initial auction\n    /// @param _publisher The address of the publisher. Can edit media url and hash for a cryptograph.\n    /// @param _publisherCut How much out of 100k parts of profits should the publisher get. e.g. _publisherCut = 25000 mean 1/4 of all profits\n    /// @param _charity The address of the charity\n    /// @param _charityCut The charity cut out of 100k\n    /// @param _thirdParty The address of a third party\n    /// @param _thirdPartyCut The third party cut out of 100k\n    /// @param _perpetualAltruismCut Will always be set to 25k except very special occasions.\n    /// @param _maxSupply How many of these cryptographs should be minted maximum\n    /// @param _startingPrice The Starting price of the auction\n    /// @param _cryptographIssue The desired issue of the cryptograph (only for editions)\n    constructor (\n                string memory _name,\n                uint256 _auctionStartTime,\n                uint256 _auctionSecondsDuration,\n                address _publisher,\n                uint256 _publisherCut,\n                address _charity,\n                uint256 _charityCut,\n                address _thirdParty,\n                uint256 _thirdPartyCut,\n                uint256 _perpetualAltruismCut,\n                uint256 _maxSupply,\n                uint256 _startingPrice,\n                uint256 _cryptographIssue\n    ) public{\n        owner = msg.sender;\n        name = _name;\n        auctionStartTime = _auctionStartTime;\n        auctionSecondsDuration = _auctionSecondsDuration;\n        publisher = _publisher;\n        publisherCut = _publisherCut;\n        charity = _charity;\n        charityCut = _charityCut;\n        thirdParty = _thirdParty;\n        thirdPartyCut = _thirdPartyCut;\n        perpetualAltruismCut = _perpetualAltruismCut;\n        maxSupply = _maxSupply;\n        startingPrice = _startingPrice;\n        cryptographIssue = _cryptographIssue;\n\n    }\n\n    modifier restrictedToOwner(){\n        require((msg.sender == owner), \"Only the creator of this Contract can modify its memory\");\n        _;\n    }\n\n    function setName(string calldata _name) external restrictedToOwner(){\n        name = _name;\n    }\n\n    function setAuctionStartTime(uint256 _auctionStartTime) external restrictedToOwner(){\n        auctionStartTime = _auctionStartTime;\n    }\n\n    function setAuctionSecondsDuration(uint256 _auctionSecondsDuration) external restrictedToOwner(){\n        auctionSecondsDuration = _auctionSecondsDuration;\n    }\n\n    function setPublisher(address _publisher) external restrictedToOwner(){\n        publisher = _publisher;\n    }\n\n    function setPublisherCut(uint256 _publisherCut) external restrictedToOwner(){\n        publisherCut = _publisherCut;\n    }\n\n    function setCharity(address _charity) external restrictedToOwner(){\n        charity = _charity;\n    }\n\n    function setCharityCut(uint256 _charityCut) external restrictedToOwner(){\n        charityCut = _charityCut;\n    }\n\n    function setThirdParty(address _thirdParty) external restrictedToOwner(){\n        thirdParty = _thirdParty;\n    }\n\n    function setThirdPartyCut(uint256 _thirdPartyCut) external restrictedToOwner(){\n        thirdPartyCut = _thirdPartyCut;\n    }\n\n    function setPerpetualAltruismCut(uint256 _perpetualAltruismCut) external restrictedToOwner(){\n        perpetualAltruismCut = _perpetualAltruismCut;\n    }\n\n    function setMaxSupply(uint256 _maxSupply) external restrictedToOwner(){\n        maxSupply = _maxSupply;\n    }\n\n    function setStartingPrice(uint256 _startingPrice) external restrictedToOwner(){\n        startingPrice = _startingPrice;\n    }\n\n    function setCryptographIssue(uint256 _cryptographIssue) external restrictedToOwner(){\n        cryptographIssue = _cryptographIssue;\n    }\n\n    function setMediaHash(string calldata _mediahash) external restrictedToOwner(){\n        mediaHash = _mediahash;\n    }\n\n    function setMediaUrl(string calldata _mediaUrl) external restrictedToOwner(){\n        mediaUrl = _mediaUrl;\n    }\n\n    function setCreator(string calldata _creator) external restrictedToOwner(){\n        creator = _creator;\n    }\n\n}"}}}