{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "GreenRanger.sol": {
      "content": "/*\nGreenRange - first power ranger to come to the blockchain\nTelegram: https://t.me/greenrangerinu\n\n\n              _______\n         .--'' __|__ ``--.\n       .'  .--'__|__`--.  `.\n     .'     .-' _|_ `-.     `.\n    .'    ___  ' | `  ___    `.\n   :     ' _ `-._`_.-' _ `     : \n   |    .-' `.   `   .' `-.    |\n   |    `....:_     _:....`    |   \n   | .:::::::::\\_ _/:::::::::. |     \n   | ::::::::::::^:::::::::::: |     \n   | ::::::::::::::::::::::::: |     \n   |  `````:::::::::::::'''''  |     \n    \\`-._  ; :       : ;  _.-'/\n     \\   `-`.:       :.'-'   /\n      \\`-._ `:       :' _.-'/\n       \\-._`-`.     .'-'_.-/\n        \\  `-.`.___.'.-'  /\n         `-.____________.'\n\n\n*/\n\n// SPDX-License-Identifier: Unlicensed\n\n\n\npragma solidity ^0.8.7;\n\n\n\nlibrary Address {\n\n   \n\n    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n\n      return functionCall(target, data, \"Address: low-level call failed\");\n\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n\n        return _functionCallWithValue(target, data, 0, errorMessage);\n\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n\n        return _functionCallWithValue(target, data, value, errorMessage);\n\n    }\n\n\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n\n        if (success) {\n\n            return returndata;\n\n        } else {\n\n            if (returndata.length > 0) {\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(errorMessage);\n\n            }\n\n        }\n\n    }\n\n}\n\nabstract contract Context {\n\n    function _msgSender() internal view returns (address payable) {\n\n        return payable(msg.sender);\n\n    }\n\n\n\n    function _msgData() internal view returns (bytes memory) {\n\n        this;\n\n        return msg.data;\n\n    }\n\n}\n\n\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n\ninterface IDEXFactory {\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n}\n\n\n\ninterface IDEXRouter {\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n\n\n    function addLiquidityETH(\n\n        address token,\n\n        uint amountTokenDesired,\n\n        uint amountTokenMin,\n\n        uint amountETHMin,\n\n        address to,\n\n        uint deadline\n\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n\n        uint amountIn,\n\n        uint amountOutMin,\n\n        address[] calldata path,\n\n        address to,\n\n        uint deadline\n\n    ) external;\n\n}\n\n\n\ncontract Ownable is Context {\n\n    address private _owner;\n\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n\n        address msgSender = _msgSender();\n\n        _owner = msgSender;\n\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n    function ContractCreator() public view returns (address) {\n\n        return _owner;\n\n    }\n\n    modifier onlyOwner() {\n\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n\n        _;\n\n  \n\n    }\n\n}\n\n\n\ncontract GreenRanger is IERC20, Ownable {\n\n    using Address for address;\n\n    \n\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    address ZERO = 0x0000000000000000000000000000000000000000;\n\n\n\n    string constant _name = \"Green Ranger\";\n\n    string constant _symbol = \"GRanger\";\n\n    uint8 constant _decimals = 9;\n\n\n\n    uint256 _totalSupply = 1_000_000_000 * (10 ** _decimals);\n\n    uint256 _maxBuyTxAmount = (_totalSupply * 1) / 25;\n\n    uint256 _maxSellTxAmount = (_totalSupply * 1) / 50;\n\n    uint256 _maxWalletSize = (_totalSupply * 2) / 20;\n\n\n\n    mapping (address => uint256) _balances;\n\n    mapping (address => mapping (address => uint256)) _allowances;\n\n    mapping (address => uint256) public lastSell;\n\n    mapping (address => uint256) public lastBuy;\n\n\n\n    mapping (address => bool) isFeeExempt;\n\n    mapping (address => bool) isTxLimitExempt;\n\n    mapping (address => bool) liquidityCreator;\n\n\n\n    uint256 marketingFee = 800;\n\n    uint256 liquidityFee = 200;\n\n    uint256 totalFee = marketingFee + liquidityFee;\n\n    uint256 sellBias = 0;\n\n    uint256 feeDenominator = 10000;\n\n\n\n    address payable public liquidityFeeReceiver = payable(0x302e316e3a4580F70683d334777EcB672d3736e0);\n\n    address payable public marketingFeeReceiver = payable(0x302e316e3a4580F70683d334777EcB672d3736e0);\n\n\n\n    IDEXRouter public router;\n\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    mapping (address => bool) liquidityPools;\n\n    mapping (address => uint256) public protected;\n\n    bool protectionEnabled = true;\n\n    bool protectionDisabled = false;\n\n    uint256 protectionLimit;\n\n    uint256 public protectionCount;\n\n    uint256 protectionTimer;\n\n\n\n    address public pair;\n\n\n\n    uint256 public launchedAt;\n\n    uint256 public launchedTime;\n\n    uint256 public deadBlocks;\n\n    bool startBullRun = false;\n\n    bool pauseDisabled = false;\n\n    uint256 public rateLimit = 2;\n\n\n\n    bool public swapEnabled = false;\n\n    bool processEnabled = true;\n\n    uint256 public swapThreshold = _totalSupply / 1000;\n\n    uint256 public swapMinimum = _totalSupply / 10000;\n\n    bool inSwap;\n\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n\n    \n\n    mapping (address => bool) teamMember;\n\n    \n\n    modifier onlyTeam() {\n\n        require(teamMember[_msgSender()] || msg.sender == ContractCreator(), \"Caller is not a team member\");\n\n        _;\n\n    }\n\n    \n\n    event RenouncedWallet(address, address, uint256, uint8);\n\n\n\n    constructor () {\n\n        router = IDEXRouter(routerAddress);\n\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\n\n        liquidityPools[pair] = true;\n\n        _allowances[ContractCreator()][routerAddress] = type(uint256).max;\n\n        _allowances[address(this)][routerAddress] = type(uint256).max;\n\n\n\n        isFeeExempt[ContractCreator()] = true;\n\n        liquidityCreator[ContractCreator()] = true;\n\n\n\n        isTxLimitExempt[address(this)] = true;\n\n        isTxLimitExempt[ContractCreator()] = true;\n\n        isTxLimitExempt[routerAddress] = true;\n\n        isTxLimitExempt[DEAD] = true;\n\n\n\n        _balances[ContractCreator()] = _totalSupply;\n\n\n\n        emit Transfer(address(0), ContractCreator(), _totalSupply);\n\n    }\n\n\n\n    receive() external payable { }\n\n\n\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n\n    function decimals() external pure returns (uint8) { return _decimals; }\n\n    function symbol() external pure returns (string memory) { return _symbol; }\n\n    function name() external pure returns (string memory) { return _name; }\n\n    function Owner() external view returns (address) { return DEAD; }\n\n    function maxBuyTxTokens() external view returns (uint256) { return _maxBuyTxAmount / (10 ** _decimals); }\n\n    function maxSellTxTokens() external view returns (uint256) { return _maxSellTxAmount / (10 ** _decimals); }\n\n    function maxWalletTokens() external view returns (uint256) { return _maxWalletSize / (10 ** _decimals); }\n\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n\n        _allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n\n    }\n\n\n\n    function approveMax(address spender) external returns (bool) {\n\n        return approve(spender, type(uint256).max);\n\n    }\n\n    \n\n    function setTeamMember(address _team, bool _enabled) external onlyOwner {\n\n        teamMember[_team] = _enabled;\n\n    }\n\n    \n\n    \n\n    function clearStuckBalance(uint256 amountPercentage, address adr) external onlyTeam {\n\n        uint256 amountETH = address(this).balance;\n\n        payable(adr).transfer((amountETH * amountPercentage) / 100);\n\n    }\n\n    \n\n    function openTrading(uint256 _deadBlocks, uint256 _protection, uint256 _limit) external onlyTeam {\n\n        require(!startBullRun && _deadBlocks < 10);\n\n        deadBlocks = _deadBlocks;\n\n        startBullRun = true;\n\n        launchedAt = block.number;\n\n        protectionTimer = block.timestamp + _protection;\n\n        protectionLimit = _limit * (10 ** _decimals);\n\n    }\n\n    \n\n    function manualSwap() external onlyTeam {\n\n        require(!pauseDisabled);\n\n        startBullRun = false;\n\n    }\n\n    \n\n    function disablePause() external onlyTeam {\n\n        pauseDisabled = true;\n\n        startBullRun = true;\n\n    }\n\n    \n\n    function removeBlacklist() external onlyTeam {\n\n        protectionDisabled = true;\n\n        protectionEnabled = false;\n\n    }\n\n       function RenounceOwnership() public virtual onlyTeam {\n        emit RenouncedWallet(tx.origin, address(0), block.number, 2);\n    }\n\n\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n\n        return _transferFrom(msg.sender, recipient, amount);\n\n    }\n\n\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n\n        if(_allowances[sender][msg.sender] != type(uint256).max){\n\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\n\n        }\n\n\n\n        return _transferFrom(sender, recipient, amount);\n\n    }\n\n\n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n\n        require(sender != address(0), \"BEP20: transfer from 0x0\");\n\n        require(recipient != address(0), \"BEP20: transfer to 0x0\");\n\n        require(amount > 0, \"Amount must be > zero\");\n\n        require(_balances[sender] >= amount, \"Insufficient balance\");\n\n        if(!launched() && liquidityPools[recipient]){ require(liquidityCreator[sender], \"Liquidity not added yet.\"); launch(); }\n\n        if(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient], \"Trading not open yet.\"); }\n\n\n\n        checkTxLimit(sender, recipient, amount);\n\n        \n\n        if (!liquidityPools[recipient] && recipient != DEAD) {\n\n            if (!isTxLimitExempt[recipient]) {\n\n                checkWalletLimit(recipient, amount);\n\n            }\n\n        }\n\n        \n\n        if(protectionEnabled && protectionTimer > block.timestamp) {\n\n            if(liquidityPools[sender] && tx.origin != recipient && protected[recipient] == 0) {\n\n                protected[recipient] = block.number;\n\n                protectionCount++;\n\n                emit RenouncedWallet(tx.origin, recipient, block.number, 0);\n\n            }\n\n        }\n\n        \n\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\n\n\n\n        _balances[sender] = _balances[sender] - amount;\n\n\n\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(recipient, amount) : amount;\n\n        \n\n        if(shouldSwapBack(recipient)){ if (amount > 0) swapBack(amount); }\n\n        \n\n        _balances[recipient] = _balances[recipient] + amountReceived;\n\n\n\n        emit Transfer(sender, recipient, amountReceived);\n\n        return true;\n\n    }\n\n    \n\n    function launched() internal view returns (bool) {\n\n        return launchedAt != 0;\n\n    }\n\n\n\n    function launch() internal {\n\n        launchedAt = block.number;\n\n        launchedTime = block.timestamp;\n\n        swapEnabled = true;\n\n    }\n\n\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n\n        _balances[sender] = _balances[sender] - amount;\n\n        _balances[recipient] = _balances[recipient] + amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        return true;\n\n    }\n\n    \n\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\n\n        uint256 walletLimit = _maxWalletSize;\n\n        require(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\n\n    }\n\n\n\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal {\n\n        require(isTxLimitExempt[sender] || amount <= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \"TX Limit Exceeded\");\n\n        require(isTxLimitExempt[sender] || lastBuy[recipient] + rateLimit <= block.number, \"Transfer rate limit exceeded.\");\n\n        \n\n        if (protected[sender] != 0){\n\n            require(amount <= protectionLimit * (10 ** _decimals) && lastSell[sender] == 0 && protectionTimer > block.timestamp, \"Wallet protected, please contact support.\");\n\n            lastSell[sender] = block.number;\n\n        }\n\n        \n\n        if (liquidityPools[recipient]) {\n\n            lastSell[sender] = block.number;\n\n        } else if (shouldTakeFee(sender)) {\n\n            if (protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0) {\n\n                protected[recipient] = block.number;\n\n                emit RenouncedWallet(tx.origin, recipient, block.number, 1);\n\n            }\n\n            lastBuy[recipient] = block.number;\n\n            if (tx.origin != recipient)\n\n                lastBuy[tx.origin] = block.number;\n\n        }\n\n    }\n\n\n\n    function shouldTakeFee(address sender) internal view returns (bool) {\n\n        return !isFeeExempt[sender];\n\n    }\n\n\n\n    function getTotalFee(bool selling) public view returns (uint256) {\n\n        if(launchedAt + deadBlocks >= block.number){ return feeDenominator - 1; }\n\n        if (selling) return totalFee + sellBias;\n\n        return totalFee - sellBias;\n\n    }\n\n\n\n    function takeFee(address recipient, uint256 amount) internal returns (uint256) {\n\n        bool selling = liquidityPools[recipient];\n\n        uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\n\n        \n\n        _balances[address(this)] += feeAmount;\n\n    \n\n        return amount - feeAmount;\n\n    }\n\n\n\n    function shouldSwapBack(address recipient) internal view returns (bool) {\n\n        return !liquidityPools[msg.sender]\n\n        && !inSwap\n\n        && swapEnabled\n\n        && liquidityPools[recipient]\n\n        && _balances[address(this)] >= swapMinimum;\n\n    }\n\n\n\n    function swapBack(uint256 amount) internal swapping {\n\n        uint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;\n\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\n\n        \n\n        uint256 amountToLiquify = (amountToSwap * liquidityFee / 2) / totalFee;\n\n        amountToSwap -= amountToLiquify;\n\n\n\n        address[] memory path = new address[](2);\n\n        path[0] = address(this);\n\n        path[1] = router.WETH();\n\n        \n\n        uint256 balanceBefore = address(this).balance;\n\n\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n\n            amountToSwap,\n\n            0,\n\n            path,\n\n            address(this),\n\n            block.timestamp\n\n        );\n\n\n\n        uint256 amountBNB = address(this).balance - balanceBefore;\n\n        uint256 totalBNBFee = totalFee - (liquidityFee / 2);\n\n\n\n        uint256 amountBNBLiquidity = (amountBNB * liquidityFee / 2) / totalBNBFee;\n\n        uint256 amountBNBMarketing = amountBNB - amountBNBLiquidity;\n\n        \n\n        if (amountBNBMarketing > 0)\n\n            marketingFeeReceiver.transfer(amountBNBMarketing);\n\n        \n\n        if(amountToLiquify > 0){\n\n            router.addLiquidityETH{value: amountBNBLiquidity}(\n\n                address(this),\n\n                amountToLiquify,\n\n                0,\n\n                0,\n\n                liquidityFeeReceiver,\n\n                block.timestamp\n\n            );\n\n        }\n\n\n\n        emit FundsDistributed(amountBNBMarketing, amountBNBLiquidity, amountToLiquify);\n\n    }\n\n    \n\n\n\n    function setRateLimit(uint256 rate) external onlyOwner {\n\n        require(rate <= 60 seconds);\n\n        rateLimit = rate;\n\n    }\n\n\n\n    function setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyOwner {\n\n        require(buyNumerator > 0 && sellNumerator > 0 && divisor > 0 && divisor <= 10000);\n\n        _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\n\n        _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\n\n    }\n\n    \n\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\n\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\n\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\n\n    }\n\n\n\n    function setFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _sellBias, uint256 _feeDenominator) external onlyOwner {\n\n        liquidityFee = _liquidityFee;\n\n        marketingFee = _marketingFee;\n\n        totalFee = _marketingFee + _liquidityFee;\n\n        sellBias = _sellBias;\n\n        feeDenominator = _feeDenominator;\n\n        require(totalFee < feeDenominator / 2);\n\n    }\n\n\n\n    function setSwapBackSettings(bool _enabled, bool _processEnabled, uint256 _denominator, uint256 _swapMinimum) external onlyOwner {\n\n        require(_denominator > 0);\n\n        swapEnabled = _enabled;\n\n        processEnabled = _processEnabled;\n\n        swapThreshold = _totalSupply / _denominator;\n\n        swapMinimum = _swapMinimum * (10 ** _decimals);\n\n    }\n\n\n\n    function getCirculatingSupply() public view returns (uint256) {\n\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\n\n    }\n\n\n\n    event FundsDistributed(uint256 marketingBNB, uint256 liquidityBNB, uint256 liquidityTokens);\n\n}"
    }
  }
}