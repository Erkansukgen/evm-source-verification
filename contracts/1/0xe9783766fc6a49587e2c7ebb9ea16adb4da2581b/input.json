{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/MultiSend.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author: manifold.xyz\r\n\r\n/**\r\n * Send ETH to multiple users \r\n */\r\n \r\n contract MultiSend {\r\n     \r\n    struct SendData {\r\n        address receiver;\r\n        uint256 amount;\r\n    }\r\n     \r\n    function multiSend(SendData[] calldata sendData) public payable {\r\n        uint256 totalAmount;\r\n        for (uint i = 0; i < sendData.length; i++) {\r\n            totalAmount += sendData[i].amount;\r\n        }\r\n        \r\n        require(totalAmount == msg.value, \"Invalid amount\");\r\n        \r\n        uint256 totalRefund;\r\n        for (uint i = 0; i < sendData.length; i++) {\r\n            (bool sent, ) = sendData[i].receiver.call{value: sendData[i].amount}(\"\");\r\n            if (!sent) {\r\n                // On failure, accrue to refund to sender\r\n                totalRefund += sendData[i].amount;\r\n            }\r\n        }\r\n        \r\n        if (totalRefund > 0) {\r\n            // Refund any amounts necessary\r\n            (bool sent, ) = msg.sender.call{value: totalRefund}(\"\");\r\n            if (!sent) {\r\n                revert(\"Send failure\");\r\n            }\r\n        }\r\n    }\r\n }"
    }
  }
}