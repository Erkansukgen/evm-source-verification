{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/UniswapHelper.sol":{"content":"pragma solidity >=0.4.22 <0.7.0;\n\n/**\n * @title Owner\n * @dev Set & change owner\n */\n \ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n \ncontract UniswapHelper {\n    \n    function getPair(address factory,address tokenA, address tokenB) external pure returns (address pair) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        \n        pair = address(uint(keccak256(abi.encodePacked(\n          hex'ff',\n          factory,\n          keccak256(abi.encodePacked(token0, token1)),\n          hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n        ))));\n    }\n    \n    function getPair1(address factory,address tokenA, address tokenB) external view returns (address pair) {\n        \n        address _pair = IUniswapV2Factory(factory).getPair(tokenA,tokenB);\n        if(_pair != address(0))\n            return _pair;\n        \n        \n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        \n        pair = address(uint(keccak256(abi.encodePacked(\n          hex'ff',\n          factory,\n          keccak256(abi.encodePacked(token0, token1)),\n          hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n        ))));\n    }\n    \n\n}"}}}