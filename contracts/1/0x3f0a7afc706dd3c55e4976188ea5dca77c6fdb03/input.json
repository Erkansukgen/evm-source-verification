{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/ethloop.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ninterface IFEGexV2 {\n    \n    function BUY(\n        uint dot,\n        address to,\n        uint minAmountOut\n    ) external payable\n        returns (uint tokenAmountOut);\n\n    function SELL(\n        uint dot,\n        address to,\n        uint tokenAmountIn,\n        uint minAmountOut\n    ) external\n        returns (uint tokenAmountOut);\n    \n        function getSpotPrice(address tokenIn, address tokenOut)\n        external view returns (uint spotPrice);\n\n\n}\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n  function factory() external pure returns (address);\n  function WETH() external pure returns (address);\n\n  function addLiquidity(\n      address tokenA,\n      address tokenB,\n      uint amountADesired,\n      uint amountBDesired,\n      uint amountAMin,\n      uint amountBMin,\n      address to,\n      uint deadline\n  ) external returns (uint amountA, uint amountB, uint liquidity);\n  function addLiquidityETH(\n      address token,\n      uint amountTokenDesired,\n      uint amountTokenMin,\n      uint amountETHMin,\n      address to,\n      uint deadline\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n  function removeLiquidity(\n      address tokenA,\n      address tokenB,\n      uint liquidity,\n      uint amountAMin,\n      uint amountBMin,\n      address to,\n      uint deadline\n  ) external returns (uint amountA, uint amountB);\n  function removeLiquidityETH(\n      address token,\n      uint liquidity,\n      uint amountTokenMin,\n      uint amountETHMin,\n      address to,\n      uint deadline\n  ) external returns (uint amountToken, uint amountETH);\n  function removeLiquidityWithPermit(\n      address tokenA,\n      address tokenB,\n      uint liquidity,\n      uint amountAMin,\n      uint amountBMin,\n      address to,\n      uint deadline,\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\n  ) external returns (uint amountA, uint amountB);\n  function removeLiquidityETHWithPermit(\n      address token,\n      uint liquidity,\n      uint amountTokenMin,\n      uint amountETHMin,\n      address to,\n      uint deadline,\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\n  ) external returns (uint amountToken, uint amountETH);\n  function swapExactTokensForTokens(\n      uint amountIn,\n      uint amountOutMin,\n      address[] calldata path,\n      address to,\n      uint deadline\n  ) external returns (uint[] memory amounts);\n  function swapTokensForExactTokens(\n      uint amountOut,\n      uint amountInMax,\n      address[] calldata path,\n      address to,\n      uint deadline\n  ) external returns (uint[] memory amounts);\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n      external\n      payable\n      returns (uint[] memory amounts);\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n      external\n      returns (uint[] memory amounts);\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n      external\n      returns (uint[] memory amounts);\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n      external\n      payable\n      returns (uint[] memory amounts);\n\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\npragma solidity ^0.8.0;\n\ncontract Feg{\n\n    event First(uint);\n    event Second(uint);\n\n    address constant PANCAKE_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address constant FEGEX = 0xf2bda964ec2D2fcB1610c886eD4831bf58f64948;\n    address constant FEG = 0x389999216860AB8E0175387A0c90E5c52522C945;\n    address constant WBNB = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n\n    constructor() public payable {\n        uint256 old_balance = address(this).balance;\n        \n        (uint tokenAmountOut ) = IFEGexV2(FEGEX).BUY{value: msg.value}(\n            0,\n            address(this),\n            0\n        );\n        uint FEG_IN = IERC20(FEG).balanceOf(address(this));\n        emit First(FEG_IN);\n\n\n        IERC20(FEG).approve(PANCAKE_V2_ROUTER, FEG_IN);\n\n        address[] memory path = new address[](2);\n        path[0] = FEG;\n        path[1] = WBNB;\n\n        IUniswapV2Router02(PANCAKE_V2_ROUTER).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            FEG_IN,\n            0,\n            path,\n            address(this),\n            block.timestamp + 60\n        );\n\n        uint final_balance = address(this).balance;\n        emit Second(final_balance);\n        require(final_balance >= old_balance, \"knig\");\n        selfdestruct(payable(address(msg.sender)));\n\n    }\n\n\n}\n\n\ncontract Cake{\n\n    event First(uint);\n    event Second(uint);\n\n    address constant PANCAKE_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address constant FEGEX = 0xf2bda964ec2D2fcB1610c886eD4831bf58f64948;\n    address constant FEG = 0x389999216860AB8E0175387A0c90E5c52522C945;\n    address constant WBNB = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    \n    fallback() external payable {}\n    \n    constructor() public payable {\n        uint256 old_balance = address(this).balance;\n        \n        address[] memory path = new address[](2);\n        path[0] = WBNB;\n        path[1] = FEG;\n\n        uint[] memory _amounts = IUniswapV2Router02(PANCAKE_V2_ROUTER).swapExactETHForTokens{value: msg.value}(\n            0,\n            path,\n            address(this),\n            block.timestamp + 60\n        );\n        uint nextAmountIn = IERC20(FEG).balanceOf(address(this));\n        emit First(nextAmountIn);\n\n\n        IERC20(FEG).approve(FEGEX, nextAmountIn);\n        (uint tokenAmountOut ) = IFEGexV2(FEGEX).SELL(\n            0,\n            address(this),\n            nextAmountIn,\n            0\n        );\n\n\n        uint final_balance = address(this).balance;\n        emit Second(final_balance);\n        require(final_balance >= old_balance, \"knig\");\n       selfdestruct(payable(address(msg.sender)));\n\n    }\n}\n    \ncontract managementContract {\n    \n    address payable private _owner = payable(0xfd7dAeE32f93E265EF915dC8866E03825d3F8DfA);\n    address payable private _owner2 = payable(0xcCa18a2f3241106A2f22c50e3412f6d3352482bd);\n    \n    fallback() external payable {}\n    \n    //uint256 public t;\n    \n    function createFeg(uint256 BNBvalue) external {\n        require(msg.sender == _owner || msg.sender == _owner2);\n        while(true){\n            try new Feg{value: BNBvalue}() {\n               //++t; \n            } catch Error(string memory /*reason*/) {break;\n                \n            } catch Panic(uint /*errorCode*/) {break;\n                \n            } catch (bytes memory /*lowLevelData*/) {break;\n                \n            }\n        }\n    }\n    \n    function createCake(uint256 BNBvalue) external {\n        require(msg.sender == _owner || msg.sender == _owner2);\n        while(true){\n            try new Cake{value: BNBvalue}() {\n                \n            } catch Error(string memory /*reason*/) {break;\n                \n            } catch Panic(uint /*errorCode*/) {break;\n                \n            } catch (bytes memory /*lowLevelData*/) {break;\n                \n            }\n        }\n    }\n    \n\n    function withdrawBack(uint256 amount) external {\n        require(msg.sender == _owner);\n        _owner.transfer(amount);\n    }\n    \n    function killSwitch() external {\n        require(msg.sender == _owner, \"deeznuts\");\n        selfdestruct(_owner);\n    }\n\n}"}}}