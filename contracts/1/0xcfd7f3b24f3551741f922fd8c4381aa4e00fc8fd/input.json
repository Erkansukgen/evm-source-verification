{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/UnchainedIndex.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.7.0;\n\ncontract UnchainedIndex {\n    constructor() public {\n        owner = msg.sender;\n        manifestHash = \"QmP4i6ihnVrj8Tx7cTFw4aY6ungpaPYxDJEZ7Vg1RSNSdm\"; // empty file\n        emit HashPublished(manifestHash);\n        emit OwnerChanged(address(0), owner);\n    }\n\n    function publishHash(string memory hash) public {\n        require(msg.sender == owner, \"msg.sender must be owner\");\n        manifestHash = hash;\n        emit HashPublished(hash);\n    }\n\n    function changeOwner(address newOwner) public returns (address oldOwner) {\n        require(msg.sender == owner, \"msg.sender must be owner\");\n        oldOwner = owner;\n        owner = newOwner;\n        emit OwnerChanged(oldOwner, newOwner);\n        return oldOwner;\n    }\n\n    event HashPublished(string hash);\n    event OwnerChanged(address oldOwner, address newOwner);\n\n    string public manifestHash;\n    address public owner;\n}\n"
    }
  }
}