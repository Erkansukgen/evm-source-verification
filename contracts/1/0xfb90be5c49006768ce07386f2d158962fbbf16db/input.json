{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/eplus1.sol":{"content":"pragma solidity >=0.5.12 <0.7.0;\n\ncontract way2eth {\n\n    struct User {\n        uint id;\n        uint referrerCount;\n        uint referrerId;\n        uint earnedFromPool;\n        uint earnedFromRef;\n        uint earnedFromGlobal;\n        address[] referrals;\n    }\n   \n    struct UsersPool {\n        uint id;\n        uint referrerId;\n        uint reinvestCount;\n    }\n   \n    struct PoolSlots {\n        uint id;\n        address userAddress;\n        uint referrerId;\n        uint8 eventsCount;\n    }\n       \n    modifier validReferrerId(uint _referrerId) {\n        require((_referrerId > 0) && (_referrerId < newUserId), \"Invalid referrer ID\");\n        _;\n    }\n   \n    event RegisterUserEvent(uint _userid, address indexed _user, address indexed _referrerAddress, uint8 indexed _autopool, uint _amount, uint _time);\n    event ReinvestEvent(uint _userid, address indexed _user, address indexed _referrerAddress, uint8 indexed _autopool, uint _amount, uint _time);\n    event DistributeUplineEvent(uint amount, address indexed _sponsorAddress, address indexed _fromAddress, uint _level, uint8 _fromPool, uint _time);\n    event ReferralPaymentEvent(uint amount, address indexed _from, address indexed _to, uint8 indexed _fromPool, uint _time);\n\n    mapping(address => User) public users;\n    mapping(address => UsersPool) public users_2;\n    mapping(uint => PoolSlots) public pool_slots_2;\n    mapping(address => UsersPool) public users_3;\n    mapping(uint => PoolSlots) public pool_slots_3;\n    mapping(address => UsersPool) public users_4;\n    mapping(uint => PoolSlots) public pool_slots_4;\n    mapping(address => UsersPool) public users_5;\n    mapping(uint => PoolSlots) public pool_slots_5;\n    mapping(address => UsersPool) public users_6;\n    mapping(uint => PoolSlots) public pool_slots_6;\n    mapping(address => UsersPool) public users_7;\n    mapping(uint => PoolSlots) public pool_slots_7;\n    mapping(address => UsersPool) public users_8;\n    mapping(uint => PoolSlots) public pool_slots_8;\n\n    mapping(uint => address) public idToAddress;\n    mapping (uint => uint) public uplineAmount;\n   \n    uint public newUserId = 1;\n    uint public newUserId_ap2 = 1;\n    uint public newUserId_ap3 = 1;\n    uint public newUserId_ap4 = 1;\n    uint public newUserId_ap5 = 1;\n    uint public newUserId_ap6 = 1;\n    uint public newUserId_ap7 = 1;\n    uint public newUserId_ap8 = 1;\n\n    uint public newSlotId_ap2 = 1;\n    uint public activeSlot_ap2 = 1;\n    uint public newSlotId_ap3 = 1;\n    uint public activeSlot_ap3 = 1;\n    uint public newSlotId_ap4 = 1;\n    uint public activeSlot_ap4 = 1;\n    uint public newSlotId_ap5 = 1;\n    uint public activeSlot_ap5 = 1;\n    uint public newSlotId_ap6 = 1;\n    uint public activeSlot_ap6 = 1;\n    uint public newSlotId_ap7 = 1;\n    uint public activeSlot_ap7 = 1;\n    uint public newSlotId_ap8 = 1;\n    uint public activeSlot_ap8 = 1;\n   \n    address public owner;\n   \n    constructor(address _ownerAddress) public {\n       \n        //uplineAmount[1] = 50;\n        uplineAmount[1] = 0.025 ether;\n       \n        owner = _ownerAddress;\n       \n        User memory user = User({\n            id: newUserId,\n            referrerCount: uint(0),\n            referrerId: uint(0),\n            earnedFromPool: uint(0),\n            earnedFromRef: uint(0),\n            earnedFromGlobal: uint(0),\n            referrals: new address[](0)\n        });\n       \n        users[_ownerAddress] = user;\n        idToAddress[newUserId] = _ownerAddress;\n        newUserId++;\n       \n        //////\n       \n        UsersPool memory user2 = UsersPool({\n            id: newSlotId_ap2,\n            referrerId: uint(0),\n            reinvestCount: uint(0)\n        });\n       \n        users_2[_ownerAddress] = user2;\n       \n        PoolSlots memory _newSlot2 = PoolSlots({\n            id: newSlotId_ap2,\n            userAddress: _ownerAddress,\n            referrerId: uint(0),\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_2[newSlotId_ap2] = _newSlot2;\n        newUserId_ap2++;\n        newSlotId_ap2++;\n       \n        ///////\n       \n        UsersPool memory user3 = UsersPool({\n            id: newSlotId_ap3,\n            referrerId: uint(0),\n            reinvestCount: uint(0)\n        });\n       \n        users_3[_ownerAddress] = user3;\n       \n        PoolSlots memory _newSlot3 = PoolSlots({\n            id: newSlotId_ap3,\n            userAddress: _ownerAddress,\n            referrerId: uint(0),\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_3[newSlotId_ap3] = _newSlot3;\n        newUserId_ap3++;\n        newSlotId_ap3++;\n       \n        ///////\n       \n        UsersPool memory user4 = UsersPool({\n            id: newSlotId_ap4,\n            referrerId: uint(0),\n            reinvestCount: uint(0)\n        });\n       \n        users_4[_ownerAddress] = user4;\n       \n        PoolSlots memory _newSlot4 = PoolSlots({\n            id: newSlotId_ap4,\n            userAddress: _ownerAddress,\n            referrerId: uint(0),\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_4[newSlotId_ap4] = _newSlot4;\n        newUserId_ap4++;\n        newSlotId_ap4++;\n       \n        ///////\n       \n        UsersPool memory user5 = UsersPool({\n            id: newSlotId_ap5,\n            referrerId: uint(0),\n            reinvestCount: uint(0)\n        });\n       \n        users_5[_ownerAddress] = user5;\n       \n        PoolSlots memory _newSlot5 = PoolSlots({\n            id: newSlotId_ap5,\n            userAddress: _ownerAddress,\n            referrerId: uint(0),\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_5[newSlotId_ap5] = _newSlot5;\n        newUserId_ap5++;\n        newSlotId_ap5++;\n       \n        ///////\n       \n        UsersPool memory user6 = UsersPool({\n            id: newSlotId_ap6,\n            referrerId: uint(0),\n            reinvestCount: uint(0)\n        });\n       \n        users_6[_ownerAddress] = user6;\n       \n        PoolSlots memory _newSlot6 = PoolSlots({\n            id: newSlotId_ap6,\n            userAddress: _ownerAddress,\n            referrerId: uint(0),\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_6[newSlotId_ap6] = _newSlot6;\n        newUserId_ap6++;\n        newSlotId_ap6++;\n       \n        ///////\n       \n        UsersPool memory user7 = UsersPool({\n            id: newSlotId_ap7,\n            referrerId: uint(0),\n            reinvestCount: uint(0)\n        });\n       \n        users_7[_ownerAddress] = user7;\n       \n        PoolSlots memory _newSlot7 = PoolSlots({\n            id: newSlotId_ap7,\n            userAddress: _ownerAddress,\n            referrerId: uint(0),\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_7[newSlotId_ap7] = _newSlot7;\n        newUserId_ap7++;\n        newSlotId_ap7++;\n        \n        \n       \n \n        \n        \n    }\n   \n    function participatePool1(uint _referrerId)\n      public\n      payable\n      validReferrerId(_referrerId)\n    {\n       \n        require(msg.value == 0.1 ether, \"Participation fee is 0.1 ETH\");\n        require(!isUserExists(msg.sender, 1), \"User already registered\");\n\n        address _userAddress = msg.sender;\n        address _referrerAddress = idToAddress[_referrerId];\n       \n        uint32 size;\n        assembly {\n            size := extcodesize(_userAddress)\n        }\n        require(size == 0, \"cannot be a contract\");\n       \n        users[_userAddress] = User({\n            id: newUserId,\n            referrerCount: uint(0),\n            referrerId: _referrerId,\n            earnedFromPool: uint(0),\n            earnedFromRef: uint(0),\n            earnedFromGlobal: uint(0),\n            referrals: new address[](0)\n        });\n        idToAddress[newUserId] = _userAddress;\n\n        emit RegisterUserEvent(newUserId, msg.sender, _referrerAddress, 1, msg.value, now);\n       \n        newUserId++;\n       \n        users[_referrerAddress].referrals.push(_userAddress);\n        users[_referrerAddress].referrerCount++;\n       \n        uint amountToDistribute = msg.value;\n        address sponsorAddress = idToAddress[_referrerId];        \n       \n        for (uint8 i = 1; i <= 1; i++) {\n           \n            if ( isUserExists(sponsorAddress, 1) ) {\n                uint paid = payUpline(sponsorAddress, i, 1);\n                amountToDistribute -= paid;\n                users[sponsorAddress].earnedFromPool += paid;\n                address _nextSponsorAddress = idToAddress[users[sponsorAddress].referrerId];\n                sponsorAddress = _nextSponsorAddress;\n            }\n           \n        }\n       \n        if (amountToDistribute > 0) {\n            payFirstLine(idToAddress[1], amountToDistribute, 1);\n            users[idToAddress[1]].earnedFromPool += amountToDistribute;\n        }\n       \n    }\n   \n    function participatePool2(uint8 _fromPool)\n      public\n      payable\n    {\n        if(_fromPool == 2 || _fromPool == 3 || _fromPool == 4 || _fromPool == 5 || _fromPool == 6 || _fromPool == 7){\n            require(isUserExists(msg.sender, 1), \"User not present in AP1\");\n            require(isUserQualified(msg.sender), \"User not qualified in AP1\");\n        }\n       \n        if(_fromPool == 2){\n            require(msg.value == 0.2 ether, \"Participation fee in Autopool is 0.2 ETH\");\n            require(!isUserExists(msg.sender, 2), \"User already registered in AP2\");\n           \n        uint eventCount = pool_slots_2[activeSlot_ap2].eventsCount;\n        uint newEventCount = eventCount + 1;\n\n        if (newEventCount == 3) {\n            require(reinvestSlot(\n                pool_slots_2[activeSlot_ap2].userAddress,\n                pool_slots_2[activeSlot_ap2].id,\n                idToAddress[users[pool_slots_2[activeSlot_ap2].userAddress].referrerId],\n                2\n            ));\n            pool_slots_2[activeSlot_ap2].eventsCount++;\n        }\n       \n        uint _referrerId = users[msg.sender].referrerId;\n\n        UsersPool memory user2 = UsersPool({\n            id: newSlotId_ap2,\n            referrerId: _referrerId,\n            reinvestCount: uint(0)\n        });\n        users_2[msg.sender] = user2;\n       \n        PoolSlots memory _newSlot = PoolSlots({\n            id: newSlotId_ap2,\n            userAddress: msg.sender,\n            referrerId: _referrerId,\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_2[newSlotId_ap2] = _newSlot;\n        newUserId_ap2++;\n        emit RegisterUserEvent(newSlotId_ap2, msg.sender, idToAddress[_referrerId], 2, msg.value, now);\n       \n        if (_referrerId > 0) {\n            payUpline(idToAddress[_referrerId], 1, 2);\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\n        }\n        else{\n            payUpline(idToAddress[1], 1, 2);\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\n        }\n        newSlotId_ap2++;\n        if (eventCount < 2) {\n            if(eventCount == 0) {\n                payUpline(pool_slots_2[activeSlot_ap2].userAddress, 1, 2);\n                users[pool_slots_2[activeSlot_ap2].userAddress].earnedFromGlobal += msg.value/2;\n            }\n            if(eventCount == 1) {\n                if (pool_slots_2[activeSlot_ap2].referrerId > 0) {\n                    payUpline(idToAddress[pool_slots_2[activeSlot_ap2].referrerId], 1, 2);\n                    users[idToAddress[pool_slots_2[activeSlot_ap2].referrerId]].earnedFromRef += msg.value/2;\n                }\n                else {\n                    payUpline(idToAddress[1], 1, 2);\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\n                }\n            }\n            pool_slots_2[activeSlot_ap2].eventsCount++;\n        }\n        }else if(_fromPool == 3){\n            require(msg.value == 0.3 ether, \"Participation fee in Autopool is 0.3 ETH\");\n            require(!isUserExists(msg.sender, 3), \"User already registered in AP3\");\n           \n        uint eventCount = pool_slots_3[activeSlot_ap3].eventsCount;\n        uint newEventCount = eventCount + 1;\n\n        if (newEventCount == 3) {\n            require(reinvestSlot(\n                pool_slots_3[activeSlot_ap3].userAddress,\n                pool_slots_3[activeSlot_ap3].id,\n                idToAddress[users[pool_slots_3[activeSlot_ap3].userAddress].referrerId],\n                3\n            ));\n            pool_slots_3[activeSlot_ap3].eventsCount++;\n        }\n       \n        uint _referrerId = users[msg.sender].referrerId;\n\n        UsersPool memory user3 = UsersPool({\n            id: newSlotId_ap3,\n            referrerId: _referrerId,\n            reinvestCount: uint(0)\n        });\n        users_3[msg.sender] = user3;\n       \n        PoolSlots memory _newSlot = PoolSlots({\n            id: newSlotId_ap3,\n            userAddress: msg.sender,\n            referrerId: _referrerId,\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_3[newSlotId_ap3] = _newSlot;\n        newUserId_ap3++;\n        emit RegisterUserEvent(newSlotId_ap3, msg.sender, idToAddress[_referrerId], 3, msg.value, now);\n       \n        if (_referrerId > 0) {\n            payUpline(idToAddress[_referrerId], 1, 3);\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\n        }\n        else{\n            payUpline(idToAddress[1], 1, 3);\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\n        }\n\n        newSlotId_ap3++;\n        if (eventCount < 2) {\n            if(eventCount == 0) {\n                payUpline(pool_slots_3[activeSlot_ap3].userAddress, 1, 3);\n                users[pool_slots_3[activeSlot_ap3].userAddress].earnedFromGlobal += msg.value/2;\n            }\n            if(eventCount == 1) {\n                if (pool_slots_3[activeSlot_ap3].referrerId > 0) {\n                    payUpline(idToAddress[pool_slots_3[activeSlot_ap3].referrerId], 1, 3);\n                    users[idToAddress[pool_slots_3[activeSlot_ap3].referrerId]].earnedFromRef += msg.value/2;\n                }\n                else {\n                    payUpline(idToAddress[1], 1, 3);\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\n                }\n            }\n            pool_slots_3[activeSlot_ap3].eventsCount++;\n        }\n        }\n        else if(_fromPool == 4){\n            require(msg.value == 0.4 ether, \"Participation fee in Autopool is 0.4 ETH\");\n            require(!isUserExists(msg.sender, 4), \"User already registered in AP4\");\n           \n        uint eventCount = pool_slots_4[activeSlot_ap4].eventsCount;\n        uint newEventCount = eventCount + 1;\n\n        if (newEventCount == 3) {\n            require(reinvestSlot(\n                pool_slots_4[activeSlot_ap4].userAddress,\n                pool_slots_4[activeSlot_ap4].id,\n                idToAddress[users[pool_slots_4[activeSlot_ap4].userAddress].referrerId],\n                4\n            ));\n            pool_slots_4[activeSlot_ap4].eventsCount++;\n        }\n       \n        uint _referrerId = users[msg.sender].referrerId;\n        UsersPool memory user4 = UsersPool({\n            id: newSlotId_ap4,\n            referrerId: _referrerId,\n            reinvestCount: uint(0)\n        });\n        users_4[msg.sender] = user4;\n       \n        PoolSlots memory _newSlot = PoolSlots({\n            id: newSlotId_ap4,\n            userAddress: msg.sender,\n            referrerId: _referrerId,\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_4[newSlotId_ap4] = _newSlot;\n        newUserId_ap4++;\n        emit RegisterUserEvent(newSlotId_ap4, msg.sender, idToAddress[_referrerId], 4, msg.value, now);\n       \n        if (_referrerId > 0) {\n            payUpline(idToAddress[_referrerId], 1, 4);\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\n        }\n        else{\n            payUpline(idToAddress[1], 1, 4);\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\n        }\n\n        newSlotId_ap4++;\n        if (eventCount < 2) {\n            if(eventCount == 0) {\n                payUpline(pool_slots_4[activeSlot_ap4].userAddress, 1, 4);\n                users[pool_slots_4[activeSlot_ap4].userAddress].earnedFromGlobal += msg.value/2;\n            }\n            if(eventCount == 1) {\n                if (pool_slots_4[activeSlot_ap4].referrerId > 0) {\n                    payUpline(idToAddress[pool_slots_4[activeSlot_ap4].referrerId], 1, 4);\n                    users[idToAddress[pool_slots_4[activeSlot_ap4].referrerId]].earnedFromRef += msg.value/2;\n                }\n                else {\n                    payUpline(idToAddress[1], 1, 4);\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\n                }\n            }\n            pool_slots_4[activeSlot_ap4].eventsCount++;\n        }\n        }\n        else if(_fromPool == 5){\n            require(msg.value == 0.5 ether, \"Participation fee in Autopool is 0.5 ETH\");\n            require(!isUserExists(msg.sender, 5), \"User already registered in AP5\");\n           \n            uint eventCount = pool_slots_5[activeSlot_ap5].eventsCount;\n        uint newEventCount = eventCount + 1;\n\n        if (newEventCount == 3) {\n            require(reinvestSlot(\n                pool_slots_5[activeSlot_ap5].userAddress,\n                pool_slots_5[activeSlot_ap5].id,\n                idToAddress[users[pool_slots_5[activeSlot_ap5].userAddress].referrerId],\n                5\n            ));\n            pool_slots_5[activeSlot_ap5].eventsCount++;\n        }\n       \n        uint _referrerId = users[msg.sender].referrerId;\n        UsersPool memory user5 = UsersPool({\n            id: newSlotId_ap5,\n            referrerId: _referrerId,\n            reinvestCount: uint(0)\n        });\n        users_5[msg.sender] = user5;\n       \n        PoolSlots memory _newSlot = PoolSlots({\n            id: newSlotId_ap5,\n            userAddress: msg.sender,\n            referrerId: _referrerId,\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_5[newSlotId_ap5] = _newSlot;\n        newUserId_ap5++;\n        emit RegisterUserEvent(newSlotId_ap5, msg.sender, idToAddress[_referrerId], 5, msg.value, now);\n       \n        if (_referrerId > 0) {\n            payUpline(idToAddress[_referrerId], 1, 5);\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\n        }\n        else{\n            payUpline(idToAddress[1], 1, 5);\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\n        }\n\n        newSlotId_ap5++;\n        if (eventCount < 2) {\n            if(eventCount == 0) {\n                payUpline(pool_slots_5[activeSlot_ap5].userAddress, 1, 5);\n                users[pool_slots_5[activeSlot_ap5].userAddress].earnedFromGlobal += msg.value/2;\n            }\n            if(eventCount == 1) {\n                if (pool_slots_5[activeSlot_ap5].referrerId > 0) {\n                    payUpline(idToAddress[pool_slots_5[activeSlot_ap5].referrerId], 1, 5);\n                    users[idToAddress[pool_slots_5[activeSlot_ap5].referrerId]].earnedFromRef += msg.value/2;\n                }\n                else {\n                    payUpline(idToAddress[1], 1, 5);\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\n                }\n            }\n            pool_slots_5[activeSlot_ap5].eventsCount++;    \n        }\n           \n        }\n        else if(_fromPool == 6){\n            require(msg.value == 0.7 ether, \"Participation fee in Autopool is 0.7 ETH\");\n            require(!isUserExists(msg.sender, 6), \"User already registered in AP6\");\n           \n        uint eventCount = pool_slots_6[activeSlot_ap6].eventsCount;\n        uint newEventCount = eventCount + 1;\n\n        if (newEventCount == 3) {\n            require(reinvestSlot(\n                pool_slots_6[activeSlot_ap6].userAddress,\n                pool_slots_6[activeSlot_ap6].id,\n                idToAddress[users[pool_slots_6[activeSlot_ap6].userAddress].referrerId],\n                6\n            ));\n            pool_slots_6[activeSlot_ap6].eventsCount++;\n        }\n       \n        uint _referrerId = users[msg.sender].referrerId;\n        UsersPool memory user6 = UsersPool({\n            id: newSlotId_ap6,\n            referrerId: _referrerId,\n            reinvestCount: uint(0)\n        });\n        users_6[msg.sender] = user6;\n       \n        PoolSlots memory _newSlot = PoolSlots({\n            id: newSlotId_ap6,\n            userAddress: msg.sender,\n            referrerId: _referrerId,\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_6[newSlotId_ap6] = _newSlot;\n        newUserId_ap6++;\n        emit RegisterUserEvent(newSlotId_ap6, msg.sender, idToAddress[_referrerId], 6, msg.value, now);\n       \n        if (_referrerId > 0) {\n            payUpline(idToAddress[_referrerId], 1, 6);\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\n        }\n        else{\n            payUpline(idToAddress[1], 1, 6);\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\n        }\n\n        newSlotId_ap6++;\n        if (eventCount < 2) {            \n            if(eventCount == 0) {\n                payUpline(pool_slots_6[activeSlot_ap6].userAddress, 1, 6);\n                users[pool_slots_6[activeSlot_ap6].userAddress].earnedFromGlobal += msg.value/2;\n            }\n            if(eventCount == 1) {\n                if (pool_slots_6[activeSlot_ap6].referrerId > 0) {\n                    payUpline(idToAddress[pool_slots_6[activeSlot_ap6].referrerId], 1, 6);\n                    users[idToAddress[pool_slots_6[activeSlot_ap6].referrerId]].earnedFromRef += msg.value/2;\n                }\n                else {\n                    payUpline(idToAddress[1], 1, 6);\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\n                }\n            }\n            pool_slots_6[activeSlot_ap6].eventsCount++;          \n        }\n           \n        }else{\n            require(msg.value == 1 ether, \"Participation fee in Autopool is 1 ETH\");\n            require(!isUserExists(msg.sender, 7), \"User already registered in AP7\");\n           \n            uint eventCount = pool_slots_7[activeSlot_ap7].eventsCount;\n        uint newEventCount = eventCount + 1;\n\n        if (newEventCount == 3) {\n            require(reinvestSlot(\n                pool_slots_7[activeSlot_ap7].userAddress,\n                pool_slots_7[activeSlot_ap7].id,\n                idToAddress[users[pool_slots_7[activeSlot_ap7].userAddress].referrerId],\n                7\n            ));\n            pool_slots_7[activeSlot_ap7].eventsCount++;\n        }\n       \n        uint _referrerId = users[msg.sender].referrerId;\n\n        UsersPool memory user7 = UsersPool({\n            id: newSlotId_ap7,\n            referrerId: _referrerId,\n            reinvestCount: uint(0)\n        });\n        users_7[msg.sender] = user7;        \n        PoolSlots memory _newSlot = PoolSlots({\n            id: newSlotId_ap7,\n            userAddress: msg.sender,\n            referrerId: _referrerId,\n            eventsCount: uint8(0)\n        });\n       \n        pool_slots_7[newSlotId_ap7] = _newSlot;\n        newUserId_ap7++;\n        emit RegisterUserEvent(newSlotId_ap7, msg.sender, idToAddress[_referrerId], 7, msg.value, now);\n\n        if (_referrerId > 0) {\n            payUpline(idToAddress[_referrerId], 1, 7);\n            users[idToAddress[_referrerId]].earnedFromRef += msg.value/2;\n        }\n        else{\n            payUpline(idToAddress[1], 1, 7);\n            users[idToAddress[1]].earnedFromRef += msg.value/2;\n        }\n       \n        newSlotId_ap7++;\n        if (eventCount < 2) {          \n            if(eventCount == 0) {\n                payUpline(pool_slots_7[activeSlot_ap7].userAddress, 1, 7);\n                users[pool_slots_7[activeSlot_ap7].userAddress].earnedFromGlobal += msg.value/2;\n            }\n            if(eventCount == 1) {\n                if (pool_slots_7[activeSlot_ap7].referrerId > 0) {\n                    payUpline(idToAddress[pool_slots_7[activeSlot_ap7].referrerId], 1, 7);\n                    users[idToAddress[pool_slots_7[activeSlot_ap7].referrerId]].earnedFromRef += msg.value/2;\n                }\n                else {\n                    payUpline(idToAddress[1], 1, 7);\n                    users[idToAddress[1]].earnedFromRef += msg.value/2;\n                }\n            }\n            pool_slots_7[activeSlot_ap7].eventsCount++;\n        }\n        }\n    }\n\n\n    function reinvestSlot(address _userAddress, uint _userId, address _sponsorAddress, uint8 _fromPool) private returns (bool _isReinvested) {\n\n        uint _referrerId = users[_userAddress].referrerId;\n\n        PoolSlots memory _reinvestslot = PoolSlots({\n            id: _userId,\n            userAddress: _userAddress,\n            referrerId: _referrerId,\n            eventsCount: uint8(0)\n        });\n       \n        if (_fromPool == 2) {\n            users_2[pool_slots_2[activeSlot_ap2].userAddress].reinvestCount++;        \n            pool_slots_2[newSlotId_ap2] = _reinvestslot;\n            emit ReinvestEvent(newSlotId_ap2, _userAddress, _sponsorAddress, 2, msg.value, now);\n            newSlotId_ap2++;\n        }\n        if (_fromPool == 3) {\n            users_3[pool_slots_3[activeSlot_ap3].userAddress].reinvestCount++;        \n            pool_slots_3[newSlotId_ap3] = _reinvestslot;\n            emit ReinvestEvent(newSlotId_ap3, _userAddress, _sponsorAddress, 3, msg.value, now);\n            newSlotId_ap3++;\n        }\n        if (_fromPool == 4) {\n            users_4[pool_slots_4[activeSlot_ap4].userAddress].reinvestCount++;        \n            pool_slots_4[newSlotId_ap4] = _reinvestslot;\n            emit ReinvestEvent(newSlotId_ap4, _userAddress, _sponsorAddress, 4, msg.value, now);\n            newSlotId_ap4++;\n        }\n        if (_fromPool == 5) {\n            users_5[pool_slots_5[activeSlot_ap5].userAddress].reinvestCount++;        \n            pool_slots_5[newSlotId_ap5] = _reinvestslot;\n            emit ReinvestEvent(newSlotId_ap5, _userAddress, _sponsorAddress, 5, msg.value, now);\n            newSlotId_ap5++;\n        }\n        if (_fromPool == 6) {\n            users_6[pool_slots_6[activeSlot_ap6].userAddress].reinvestCount++;        \n            pool_slots_6[newSlotId_ap6] = _reinvestslot;\n            emit ReinvestEvent(newSlotId_ap6, _userAddress, _sponsorAddress, 6, msg.value, now);\n            newSlotId_ap6++;\n        }\n        if (_fromPool == 7) {\n            users_7[pool_slots_7[activeSlot_ap7].userAddress].reinvestCount++;        \n            pool_slots_7[newSlotId_ap7] = _reinvestslot;\n            emit ReinvestEvent(newSlotId_ap7, _userAddress, _sponsorAddress, 7, msg.value, now);\n            newSlotId_ap7++;\n        }\n       \n        if (_fromPool == 2) {\n            pool_slots_2[activeSlot_ap2].eventsCount = 3;\n            uint _nextActiveSlot = activeSlot_ap2+1;\n\n            payUpline(pool_slots_2[_nextActiveSlot].userAddress, 1, 2);\n            users[pool_slots_2[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\n            activeSlot_ap2++;\n        }\n        if (_fromPool == 3) {\n            pool_slots_3[activeSlot_ap3].eventsCount = 3;\n            uint _nextActiveSlot = activeSlot_ap3+1;\n\n            payUpline(pool_slots_3[_nextActiveSlot].userAddress, 1, 3);\n            users[pool_slots_3[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\n            activeSlot_ap3++;\n        }\n        if (_fromPool == 4) {\n            pool_slots_4[activeSlot_ap4].eventsCount = 3;\n            uint _nextActiveSlot = activeSlot_ap4+1;\n\n            payUpline(pool_slots_4[_nextActiveSlot].userAddress, 1, 4);\n            users[pool_slots_4[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\n            activeSlot_ap4++;\n        }\n        if (_fromPool == 5) {\n            pool_slots_5[activeSlot_ap5].eventsCount = 3;\n            uint _nextActiveSlot = activeSlot_ap5+1;\n\n            payUpline(pool_slots_5[_nextActiveSlot].userAddress, 1, 5);\n            users[pool_slots_5[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\n            activeSlot_ap5++;\n        }\n        if (_fromPool == 6) {\n            pool_slots_6[activeSlot_ap6].eventsCount = 3;\n            uint _nextActiveSlot = activeSlot_ap6+1;\n\n            payUpline(pool_slots_6[_nextActiveSlot].userAddress, 1, 6);\n            users[pool_slots_6[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\n            activeSlot_ap6++;\n        }\n        if (_fromPool == 7) {\n            pool_slots_7[activeSlot_ap7].eventsCount = 3;\n            uint _nextActiveSlot = activeSlot_ap7+1;\n\n            payUpline(pool_slots_7[_nextActiveSlot].userAddress, 1, 7);\n            users[pool_slots_7[_nextActiveSlot].userAddress].earnedFromGlobal += msg.value/2;\n            activeSlot_ap7++;\n        }\n\n        _isReinvested = true;\n\n        return _isReinvested;\n\n    }\n   \n    function payUpline(address _sponsorAddress, uint8 _refLevel, uint8 _fromPool) private returns (uint distributeAmount) {        \n        require( _refLevel <= 4);\n       \n         if(users[_sponsorAddress].referrerCount % 4 == 0){\n             \n            uplineAmount[1] = 0.025 ether * 2;\n            distributeAmount = msg.value / 100 * uplineAmount[_refLevel];\n            if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\n            if (_fromPool > 1) {\n                emit ReferralPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, _fromPool, now);\n            } else\n                emit DistributeUplineEvent(distributeAmount, _sponsorAddress, msg.sender, _refLevel, _fromPool, now);\n        }\n        } else {\n             distributeAmount = msg.value / 100 * uplineAmount[_refLevel];\n            if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\n            if (_fromPool > 1) {\n                emit ReferralPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, _fromPool, now);\n            } else\n                emit DistributeUplineEvent(distributeAmount, _sponsorAddress, msg.sender, _refLevel, _fromPool, now);\n        }\n        }    \n        return distributeAmount;\n    }\n   \n    function payFirstLine(address _sponsorAddress, uint payAmount, uint8 _fromPool) private returns (uint distributeAmount) {        \n        distributeAmount = payAmount;\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\n            if (_fromPool > 1) {\n                emit ReferralPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, _fromPool, now);\n            } else emit DistributeUplineEvent(distributeAmount, _sponsorAddress, msg.sender, 1, _fromPool, now);\n        }        \n        return distributeAmount;        \n    }\n   \n    function isUserQualified(address _userAddress) public view returns (bool) {\n        return (users[_userAddress].referrerCount > 0);\n    }\n   \n    function isUserExists(address _userAddress, uint8 _autopool) public view returns (bool) {\n        require((_autopool > 0) && (_autopool <= 7));\n        if (_autopool == 1) return (users[_userAddress].id != 0);\n        if (_autopool == 2) return (users_2[_userAddress].id != 0);\n        if (_autopool == 3) return (users_3[_userAddress].id != 0);\n        if (_autopool == 4) return (users_4[_userAddress].id != 0);\n        if (_autopool == 5) return (users_5[_userAddress].id != 0);\n        if (_autopool == 6) return (users_6[_userAddress].id != 0);\n        if (_autopool == 7) return (users_7[_userAddress].id != 0);\n    }\n   \n    function getUserReferrals(address _userAddress)\n        public\n        view\n        returns (address[] memory)\n      {\n        return users[_userAddress].referrals;\n      }\n   \n}\n\n"}}}