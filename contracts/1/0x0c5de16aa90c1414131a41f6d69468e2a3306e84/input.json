{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "StrongWalletPresale.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\nabstract contract ProxyKyberSwap {\r\n    function getExpectedRate(\r\n        ERC20 src,\r\n        ERC20 dest,\r\n        uint srcQty\r\n    ) virtual external view returns (uint256 expectedRate, uint256 worstRate);\r\n}\r\ncontract StrongWalletPresale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint public presaleAmount = 3000000 ether;\r\n    ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    ERC20 public STRONG = ERC20(0xf217f7df49f626f83f40D7D5137D663B1ec4EE6E);\r\n    ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    ERC20 constant public USDT_TOKEN_ADDRESS = ERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    mapping(address => uint) public sellers;\r\n\r\n    address[] public lengthSeller;\r\n    // event\r\n    event DepositETH();\r\n    event DepositUSDT();\r\n    event DepositETHWithSeller(address receiver, uint amount, uint amountStrong, address _seller);\r\n    event DepositUSDTWithSeller(address receiver, uint amount, uint amountStrong, address _seller);\r\n    event LogWithdrawal(address _to, uint _amountStrong);\r\n\r\n    constructor() public {}\r\n    function getRate(uint _usdtAmount) public pure returns(uint _rate) {\r\n        if(_usdtAmount <= 100 ether) _rate = 160;\r\n        else if(_usdtAmount <= 1000 ether) _rate = 150;\r\n        else if(_usdtAmount <= 5000 ether) _rate = 135;\r\n        else if(_usdtAmount <= 10000 ether) _rate = 125;\r\n        else if(_usdtAmount <= 50000 ether) _rate = 115;\r\n        else  _rate = 100;\r\n    }\r\n    function USDT2Strong(uint _usdtAmount) public pure returns(uint _amountStrong) {\r\n        return _usdtAmount.mul(1000).div(getRate(_usdtAmount));\r\n    }\r\n    function ETH2USDT() public view returns (uint _amountUsdt){\r\n        (_amountUsdt,) = proxyKyberSwap.getExpectedRate(ETH_TOKEN_ADDRESS, USDT_TOKEN_ADDRESS, 1 ether);\r\n    }\r\n    function ETH2STRONG(uint _amountETH) public view returns(uint _amountStrong) {\r\n        uint256 usdtAmount = ETH2USDT().mul(_amountETH).div(1 ether);\r\n        _amountStrong = USDT2Strong(usdtAmount);\r\n    }\r\n    function depositEth() public payable {\r\n        owner.transfer(msg.value);\r\n        STRONG.transfer(msg.sender, ETH2STRONG(msg.value));\r\n        emit DepositETH();\r\n    }\r\n    function depositUSDT(uint256 _amountUsdt) public {\r\n        require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));\r\n        STRONG.transfer(msg.sender,  USDT2Strong(_amountUsdt));\r\n        emit DepositUSDT();\r\n    }\r\n\r\n    function depositEthWithSeller(address _seller) public payable {\r\n        require(msg.sender != _seller);\r\n        uint amountStrong = ETH2STRONG(msg.value);\r\n        owner.transfer(msg.value);\r\n        STRONG.transfer(msg.sender, amountStrong);\r\n        uint bonusPercent = 2;\r\n        if(sellers[_seller] == 0) {\r\n            bonusPercent = 5;\r\n            sellers[_seller] += amountStrong;\r\n        }\r\n        STRONG.transfer(_seller, amountStrong.mul(bonusPercent).div(100));\r\n        \r\n        emit DepositETHWithSeller(msg.sender, msg.value, amountStrong, _seller);\r\n    }\r\n    function depositUSDTWithSeller(uint256 _amountUsdt, address _seller) public {\r\n        require(msg.sender != _seller);\r\n        require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));\r\n        STRONG.transfer(msg.sender,  USDT2Strong(_amountUsdt));\r\n        uint amountStrong = USDT2Strong(_amountUsdt);\r\n        uint bonusPercent = 2;\r\n        if(sellers[_seller] == 0) {\r\n            bonusPercent = 5;\r\n            sellers[_seller] += amountStrong;\r\n        }\r\n        STRONG.transfer(_seller, amountStrong.mul(bonusPercent).div(100));\r\n        emit DepositUSDTWithSeller(msg.sender, _amountUsdt, amountStrong, _seller);\r\n    }\r\n    /**\r\n    * @dev Withdraw the amount of token that is remaining in this contract.\r\n    * @param _address The address of EOA that can receive token from this contract.\r\n    */\r\n    function withdraw(address _address) public onlyOwner {\r\n        uint tokenBalanceOfContract = getRemainingToken();\r\n        STRONG.transfer(_address, tokenBalanceOfContract);\r\n        emit LogWithdrawal(_address, tokenBalanceOfContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the remaining amount of token user can receive.\r\n    * @return Uint256 the amount of token that user can reveive.\r\n    */\r\n    function getRemainingToken() public view returns (uint256) {\r\n        return STRONG.balanceOf(address(this));\r\n    }\r\n}"
    }
  }
}