{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled36.sol": {
      "content": "pragma solidity 0.6.9;\npragma experimental ABIEncoderV2;\n\n\nstruct Account {\n    uint256 etherBalance;\n    TokenBalance[] tokenBalances;\n}\n\n\nstruct TokenBalance {\n    bool callSuccess;\n    uint256 balance;\n}\n\n\ninterface ERC20Interface {\n    function balanceOf(address account) external view returns (uint256 balance);\n}\n\n\ninterface AccountWatcherInterface {\n    function balancesOf(\n        ERC20Interface[] calldata tokens, address[] calldata accounts\n    ) external view returns (Account[] memory accountBalances);\n}\n\n\n/// Quickly check the Ether balance, as well as the balance of each\n/// supplied ERC20 token, for a collection of accounts.\n/// @author 0age\ncontract AccountWatcherV2 is AccountWatcherInterface {\n    function balancesOf(\n        ERC20Interface[] calldata tokens, address[] calldata accounts\n    ) external view override returns (Account[] memory) {\n        Account[] memory accountBalances = new Account[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            address account = accounts[i];\n\n            TokenBalance[] memory tokenBalances = new TokenBalance[](tokens.length);\n\n            for (uint256 j = 0; j < tokens.length; j++) {\n                ERC20Interface token = tokens[j];\n                (bool success, bytes memory returnData) = address(token).staticcall(\n                    abi.encodeWithSelector(token.balanceOf.selector, account)\n                );\n                \n                if (success && returnData.length == 32) {\n                    TokenBalance memory tokenBalance;\n                    \n                    tokenBalance.callSuccess = true;\n                    tokenBalance.balance = abi.decode(returnData, (uint256));\n                    \n                    tokenBalances[j] = tokenBalance;\n                }\n            }\n\n            accountBalances[i].etherBalance = account.balance;\n            accountBalances[i].tokenBalances = tokenBalances;\n        }\n\n        return accountBalances;\n    }\n}\n\n\ninterface IERC20 {\n    function balanceOf(address) external view returns (uint256);\n}\n\n\ncontract YamCheck {\n    IERC20 private _YAM = IERC20(0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16);\n    \n    function balanceOf(address account) external view returns (uint256) {\n        return _YAM.balanceOf(account);\n    }\n}"
    }
  }
}