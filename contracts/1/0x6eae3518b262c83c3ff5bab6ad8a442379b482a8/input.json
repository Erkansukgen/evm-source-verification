{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"$YDX.sol":{"content":"pragma solidity ^0.5.11;\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function transfer(address to, uint value) public returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Burn(address indexed from, uint256 value);\r\n}\r\n\r\nlibrary SafeMath{\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) {\r\n        return 0;}\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\ncontract $YDX is ERC20 {\r\n    \r\n        using SafeMath for uint256;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    \r\n    address internal  _admin;\r\n    \r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n  \r\n\r\n    constructor() public {\r\n        _admin = msg.sender;\r\n        _symbol = \"$YDX\";  \r\n        _name = \"Yoda Coin\"; \r\n        _decimals = 18; \r\n        _totalSupply = 100000000* 10**uint(_decimals);\r\n        balances[msg.sender]=_totalSupply;\r\n       \r\n    }\r\n    \r\n    modifier ownership()  {\r\n    require(msg.sender == _admin);\r\n        _;\r\n    }\r\n    \r\n  \r\n    function name() public view returns (string memory) \r\n    {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) \r\n    {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) \r\n    {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n   function transfer(address _to, uint256 _value) public returns (bool) {\r\n     require(_to != address(0));\r\n     require(_value <= balances[msg.sender]);\r\n     balances[msg.sender] = balances[msg.sender].sub(_value);\r\n     balances[_to] = (balances[_to]).add( _value);\r\n     emit ERC20.Transfer(msg.sender, _to, _value);\r\n     return true;\r\n   }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n   }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n     require(_to != address(0));\r\n     require(_value <= balances[_from]);\r\n     require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = (balances[_from]).sub( _value);\r\n    balances[_to] = (balances[_to]).add(_value);\r\n    allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_value);\r\n    emit ERC20.Transfer(_from, _to, _value);\r\n     return true;\r\n   }\r\n\r\n   function approve(address _spender, uint256 _value) public returns (bool) {\r\n     allowed[msg.sender][_spender] = _value;\r\n    emit ERC20.Approval(msg.sender, _spender, _value);\r\n     return true;\r\n   }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n     return allowed[_owner][_spender];\r\n   }\r\n\r\n  \r\n    \r\n function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\r\n        balances[msg.sender] -= _value;            // Subtract from the sender\r\n        _totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\r\n        balances[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        _totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n     \r\n  \r\n  \r\n \r\n  \r\n  //Admin can transfer his ownership to new address\r\n  function transferownership(address _newaddress) public returns(bool){\r\n      require(msg.sender==_admin);\r\n      _admin=_newaddress;\r\n      return true;\r\n  }\r\n    \r\n}"}}}