{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    },
    "evmVersion": "istanbul"
  },
  "sources": {
    "DirectPayoutRewarder.sol": {
      "content": "// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// File contracts/interfaces/IStakingPoolRewarder.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IStakingPoolRewarder {\r\n    function onReward(\r\n        uint256 poolId,\r\n        address user,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/DirectPayoutRewarder.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\ncontract DirectPayoutRewarder is IStakingPoolRewarder {\r\n\r\n    address public stakingPool;\r\n    address public rewardToken;\r\n    address public rewardDispatcher;\r\n\r\n    modifier onlyStakingPool() {\r\n        require(stakingPool == msg.sender, \"StakingPoolRewarder: only stakingPool can call\");\r\n        _;\r\n    }\r\n    event OnRewardRedeemded(uint256 indexed poolId, address user, uint256 amount);\r\n\r\n    constructor(\r\n        address _stakingPool,\r\n        address _rewardToken,\r\n        address _rewardDispatcher\r\n    ) public {\r\n        stakingPool = _stakingPool;\r\n        rewardToken = _rewardToken;\r\n        rewardDispatcher = _rewardDispatcher;\r\n    }\r\n\r\n    function onReward(\r\n        uint256 poolId,\r\n        address user,\r\n        uint256 amount\r\n    ) external override onlyStakingPool() {\r\n        require(amount > 0, \"StakingPoolRewarder: zero amount to reward\");\r\n        safeTransferFrom(rewardToken, rewardDispatcher, user, amount);\r\n        emit OnRewardRedeemded(poolId, user, amount);\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n}"
    }
  }
}