{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/srt.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\ncontract SRT is IERC20 {\n  using SafeMath for uint256;\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowances;\n  uint256 private _totalSupply;\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n  uint256 private _burnableLimit;\n  uint256 private _burnedTokens;\n  address private _tokenOwnerAddress;\n  address private _jailedAddress;\n\n  /**\n   * @dev Constructor.\n   * @param name name of the token\n   * @param symbol symbol of the token, 3-4 chars is recommended\n   * @param decimals number of decimal places of one token unit, 18 is widely used\n   * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n   * @param burnableLimit total amount of tokens that can be burned (depending on decimals)\n   * @param feeReceiver Fee receiver\n   * @param tokenOwnerAddress address that gets 100% of token supply\n   * @param jailedAddress address that can't send tokens\n   */\n  constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply,  uint256 burnableLimit,\n    address payable feeReceiver, address tokenOwnerAddress, address jailedAddress) public payable {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n    _jailedAddress = jailedAddress;\n\n    // set tokenOwnerAddress as owner of all tokens\n    _mint(tokenOwnerAddress, totalSupply * 10 ** uint256(decimals));\n\n    // sets burn limit\n    _burnableLimit = burnableLimit * 10 ** uint256(decimals);\n\n    // pay the service fee for contract deployment\n    feeReceiver.transfer(msg.value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of lowest token units to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  // optional functions from ERC20 stardard\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev See `IERC20.totalSupply`.\n   */\n  function totalSupply() public view override returns (uint256) {\n      return _totalSupply;\n  }\n\n  /**\n   * @dev See `IERC20.balanceOf`.\n   */\n  function balanceOf(address account) public view override returns (uint256) {\n      return _balances[account];\n  }\n\n  /**\n   * @dev See `IERC20.transfer`.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\n      _transfer(msg.sender, recipient, amount);\n      return true;\n  }\n\n  /**\n   * @dev See `IERC20.allowance`.\n   */\n  function allowance(address owner, address spender) public view override returns (uint256) {\n      return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See `IERC20.approve`.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(address spender, uint256 value) public override returns (bool) {\n      _approve(msg.sender, spender, value);\n      return true;\n  }\n\n  /**\n   * @dev See `IERC20.transferFrom`.\n   *\n   * Emits an `Approval` event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of `ERC20`;\n   *\n   * Requirements:\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `value`.\n   * - the caller must have allowance for `sender`'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n      _transfer(sender, recipient, amount);\n      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n      return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to `approve` that can be used as a mitigation for\n   * problems described in `IERC20.approve`.\n   *\n   * Emits an `Approval` event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n      return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to `approve` that can be used as a mitigation for\n   * problems described in `IERC20.approve`.\n   *\n   * Emits an `Approval` event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n      return true;\n  }\n\n  /**\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\n   *\n   * This is internal function is equivalent to `transfer`, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a `Transfer` event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(address sender, address recipient, uint256 amount) internal {\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\n      require(sender != _jailedAddress, \"Address jailed\");\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n      _balances[sender] = _balances[sender].sub(amount);\n      _balances[recipient] = _balances[recipient].add(amount);\n      emit Transfer(sender, recipient, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a `Transfer` event with `from` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `to` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal {\n      require(account != address(0), \"ERC20: mint to the zero address\");\n\n      _totalSupply = _totalSupply.add(amount);\n      _balances[account] = _balances[account].add(amount);\n      emit Transfer(address(0), account, amount);\n  }\n\n   /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a `Transfer` event with `to` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 value) internal {\n      require(account != address(0), \"ERC20: burn from the zero address\");\n      require(_burnedTokens + value <= _burnableLimit, \"Amount exceeds burnable supply\");\n\n      _burnedTokens = _burnedTokens.add(value);\n      _totalSupply = _totalSupply.sub(value);\n      _balances[account] = _balances[account].sub(value);\n      emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   *\n   * This is internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an `Approval` event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(address owner, address spender, uint256 value) internal {\n      require(owner != address(0), \"ERC20: approve from the zero address\");\n      require(owner != _jailedAddress, \"Address jailed\");\n      require(spender != address(0), \"ERC20: approve to the zero address\");\n      require(spender != _jailedAddress, \"Address jailed\");\n\n      _allowances[owner][spender] = value;\n      emit Approval(owner, spender, value);\n  }\n\n  /**\n   * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n   * from the caller's allowance.\n   *\n   * See `_burn` and `_approve`.\n   */\n  function _burnFrom(address account, uint256 amount) internal {\n      _burn(account, amount);\n      _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n  }\n\n  /**\n   * @dev Displays burnable limit.\n   */\n  function burnableLimit() public view returns (uint256) {\n      return _burnableLimit;\n  }\n\n  /**\n   * @dev Displays amount of burned tokens.\n   */\n  function burnedTokens() public view returns (uint256) {\n    return _burnedTokens;\n  }\n\n  /**\n   * @dev Displays address that is jailed.\n   */\n  function jailedAddress() public view returns (address) {\n    return _jailedAddress;\n  }\n}\n"}}}