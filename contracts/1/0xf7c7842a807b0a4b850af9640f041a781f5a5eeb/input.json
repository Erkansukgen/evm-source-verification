{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/FetchTokenPriceTest.sol":{"content":"interface IUniswapV2Pair {\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TestGetPriceFromUniswap {\n   \n   \n    // calculate price based on pair reserves\n    // shiryo is token 0\n   function getTokensForETH(address pairAddress, uint _amountEth) public view returns(uint256)\n   {\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\n    (uint Res0, uint Res1,) = pair.getReserves();\n\n    // decimals\n    uint tokenPriceInEth = (Res1/Res0); // return amount of token1 needed to buy token0\n    return  _amountEth/tokenPriceInEth;\n   }\n   \n   \n}"}}}