{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Kitchen.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Underflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"Mul Overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Div by 0\");\n        uint256 c = a / b;\n\n        return c;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nstruct BaseInfo {\n    uint256 BONUS_MULTIPLIER;\n    uint256 bonusEndBlock;\n    address devaddr;\n    address migrator;\n    address owner;\n    uint256 startBlock;\n    address sushi;\n    uint256 sushiPerBlock;\n    uint256 totalAllocPoint;\n    \n    uint256 sushiTotalSupply;\n    address sushiOwner;\n}\n\nstruct PoolInfo {\n    string logo;\n    string name;\n    IUniswapPair lpToken;           // Address of LP token contract.\n    uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n    uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\n    uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    IERC20 token0;\n    IERC20 token1;\n    string token0name;\n    string token1name;\n    string token0symbol;\n    string token1symbol;\n    uint256 token0decimals;\n    uint256 token1decimals;\n}\n\nstruct UserInfo {\n    uint256 eth_rate;\n    uint256 sushiBalance;\n    address delegates;\n    uint256 currentVotes;\n    uint256 nonces;\n}\n\nstruct UserPoolInfo {\n    uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\n    uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n    uint256 balance; // Balance of pool tokens\n    uint256 rewardDebt;\n    uint256 pending; // Pending SUSHI\n}\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function owner() external view returns (address);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface ISushiToken {\n    function delegates(address who) external view returns(address);\n    function getCurrentVotes(address who) external view returns(uint256);\n    function nonces(address who) external view returns(uint256);\n}\n\ninterface IMasterChef {\n    function BONUS_MULTIPLIER() external view returns (uint256);\n    function bonusEndBlock() external view returns (uint256);\n    function devaddr() external view returns (address);\n    function migrator() external view returns (address);\n    function owner() external view returns (address);\n    function startBlock() external view returns (uint256);\n    function sushi() external view returns (address);\n    function sushiPerBlock() external view returns (uint256);\n    function totalAllocPoint() external view returns (uint256);\n\n    function poolLength() external view returns (uint256);\n    function poolInfo(uint256 nr) external view returns (address, uint256, uint256, uint256);\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\n    function pendingSushi(uint256 nr, address who) external view returns (uint256);\n}\n\ninterface IUniswapFactory {\n    function getPair(address token0, address token1) external view returns (address);\n}\n\ninterface IUniswapPair {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112, uint112, uint32);\n}\n\ncontract SushiSwapPoolNames is Ownable {\n    mapping(uint256 => string) public logos;\n    mapping(uint256 => string) public names;\n    \n    constructor() public {\n        logos[0] = '🐢'; names[0] = 'Tether Turtle';\n        logos[1] = '🐌'; names[1] = 'Circle Snail';\n        logos[2] = '🦆'; names[2] = 'Donald DAI';\n        logos[3] = '🦍'; names[3] = 'Spartan Dollar';\n        logos[4] = '🍄'; names[4] = 'Compound Truffle';\n        logos[5] = '🐗'; names[5] = 'Aave Boar';\n        logos[6] = '🐍'; names[6] = 'Synthetic Snake';\n        logos[7] = '🦑'; names[7] = 'Umami Squid';\n        logos[8] = '🐸'; names[8] = 'Toadie Marine';\n        logos[9] = '🦖'; names[9] = 'Band-osaurus';\n        logos[10] = '🐥'; names[10] = 'Ample Chicks';\n        logos[11] = '🐋'; names[11] = 'YFI Whale';\n        logos[12] = '🍣'; names[12] = 'Sushi Party!';\n        logos[13] = '🦏'; names[13] = 'REN Rhino';\n        logos[14] = '🐂'; names[14] = 'BASED Bull';\n        logos[15] = '🦈'; names[15] = 'SRM Shark';\n        logos[16] = '🍠'; names[16] = 'YAMv2 Yam';\n        logos[17] = '🐊'; names[17] = 'CRV Crocodile';\n    }\n    \n    function setPoolInfo(uint256 pid, string memory logo, string memory name) public onlyOwner {\n        logos[pid] = logo;\n        names[pid] = name;\n    }\n}\n\ncontract Kitchen is Ownable {\n    using SafeMath for uint256;\n    \n    SushiSwapPoolNames names = SushiSwapPoolNames(0xFF281cEF43111A83f09C656734Fa03E6375d432A);\n    //IMasterChef masterChef = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n    IMasterChef masterChef = IMasterChef(0xFF281cEF43111A83f09C656734Fa03E6375d432A);\n    IUniswapFactory uniFactory = IUniswapFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n    address WETH = 0x078A84ee7991699DD198B7b95055AEd0C782A6eE;\n    address USDT = 0x292c703A980fbFce4708864Ae6E8C40584DAF323;\n\n    function getInfo() public view returns(BaseInfo memory, PoolInfo[] memory) {\n        BaseInfo memory info;\n        info.BONUS_MULTIPLIER = masterChef.BONUS_MULTIPLIER();\n        info.bonusEndBlock = masterChef.bonusEndBlock();\n        info.devaddr = masterChef.devaddr();\n        info.migrator = masterChef.migrator();\n        info.owner = masterChef.owner();\n        info.startBlock = masterChef.startBlock();\n        info.sushi = masterChef.sushi();\n        info.sushiPerBlock = masterChef.sushiPerBlock();\n        info.totalAllocPoint = masterChef.totalAllocPoint();\n        \n        info.sushiTotalSupply = IERC20(info.sushi).totalSupply();\n        info.sushiOwner = IERC20(info.sushi).owner();\n\n        uint256 poolLength = masterChef.poolLength();\n        PoolInfo[] memory pools = new PoolInfo[](poolLength);\n        for (uint256 i = 0; i < poolLength; i++) {\n            (address lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accSushiPerShare) = masterChef.poolInfo(i);\n            IUniswapPair uniV2 = IUniswapPair(lpToken);\n            pools[i].lpToken = uniV2;\n            pools[i].allocPoint = allocPoint;\n            pools[i].lastRewardBlock = lastRewardBlock;\n            pools[i].accSushiPerShare = accSushiPerShare;\n            \n            IERC20 token0 = IERC20(uniV2.token0());\n            pools[i].token0 = token0;\n            IERC20 token1 = IERC20(uniV2.token1());\n            pools[i].token1 = token1;\n            \n            pools[i].token0name = token0.name();\n            pools[i].token0symbol = token0.symbol();\n            pools[i].token0decimals = token0.decimals();\n            \n            pools[i].token1name = token1.name();\n            pools[i].token1symbol = token1.symbol();\n            pools[i].token1decimals = token1.decimals();\n            \n            pools[i].logo = names.logos(i);\n            pools[i].name = names.names(i);\n        }\n        return (info, pools);\n    }\n    \n    function getETHRate(address token) public view returns(uint256) {\n        uint256 eth_rate = 1e18;\n        if (token != WETH)\n        {\n            IUniswapPair pair = IUniswapPair(uniFactory.getPair(token, WETH));\n            (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\n            if (pair.token0() == WETH) {\n                eth_rate = uint256(reserve1).mul(1e18).div(reserve0);\n            } else {\n                eth_rate = uint256(reserve0).mul(1e18).div(reserve1);\n            }\n        }\n        return eth_rate;\n    }\n    \n    function getUserInfo(address who, address currency) public view returns(UserInfo memory, UserPoolInfo[] memory) {\n        uint256 poolLength = masterChef.poolLength();\n        UserInfo memory user;\n        UserPoolInfo[] memory pools = new UserPoolInfo[](poolLength);\n        address sushi = masterChef.sushi();\n        user.sushiBalance = IERC20(sushi).balanceOf(who);\n        user.delegates = ISushiToken(sushi).delegates(who);\n        user.currentVotes = ISushiToken(sushi).getCurrentVotes(who);\n        user.nonces = ISushiToken(sushi).nonces(who);\n\n        user.eth_rate = getETHRate(currency);\n\n        for (uint256 i = 0; i < poolLength; i++) {\n            (uint256 amount, uint256 rewardDebt) = masterChef.userInfo(i, who);\n            pools[i].balance = amount;\n            pools[i].rewardDebt = rewardDebt;\n            pools[i].pending = masterChef.pendingSushi(i, who);\n\n            (address lpToken, , uint256 lastRewardBlock, uint256 accSushiPerShare) = masterChef.poolInfo(i);\n            IUniswapPair uniV2 = IUniswapPair(lpToken);\n            pools[i].lastRewardBlock = lastRewardBlock;\n            pools[i].accSushiPerShare = accSushiPerShare;\n        }\n        return (user, pools);\n    }\n    \n    function getMyInfoInUSDT() public view returns(UserInfo memory, UserPoolInfo[] memory) {\n        return getUserInfo(msg.sender, USDT);\n    }\n    \n}\n\n"
    }
  }
}