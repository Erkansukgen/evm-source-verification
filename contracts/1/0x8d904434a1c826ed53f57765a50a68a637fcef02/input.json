{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ChainDotPrivateSale.sol": {
      "content": "pragma solidity ^0.5.10;\r\n\r\ncontract ChainDotPrivateSale {\r\n  address payable owner;\r\n  uint public goal;\r\n  uint public endTime;\r\n  bool open = true;\r\n  address public topDonor;\r\n\r\n  mapping(address=>uint) donations;\r\n  \r\n  event OwnerWithdraw(uint amount, uint withdrawTime);\r\n  event UserWithdraw(address user, uint amount, uint withdrawTime);\r\n  event Donation(uint amount, address contributor);\r\n  \r\n  constructor(uint _goal, uint _timelimit) public {\r\n    owner = msg.sender;\r\n    goal = _goal;\r\n    endTime = block.number + _timelimit;\r\n  }\r\n\r\n  function add() public payable {\r\n    donations[msg.sender] += msg.value;\r\n    if(donations[msg.sender] > donations[topDonor]) {\r\n      topDonor = msg.sender;\r\n    }\r\n    emit Donation(msg.value, msg.sender);\r\n  }\r\n\r\n  function withdrawOwner() public {\r\n    require(msg.sender == owner, \"You must be the owner\");\r\n    emit OwnerWithdraw(address(this).balance, now);\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdraw() public {\r\n    require(address(this).balance < goal, \"Fundraising campaign was successful\");\r\n    require(now > endTime, \"Fundraising campaign is still ongoing\");\r\n    msg.sender.transfer(donations[msg.sender]);\r\n    emit UserWithdraw(msg.sender, donations[msg.sender], now);\r\n    donations[msg.sender] = 0;\r\n  }\r\n  \r\n  function percentageComplete() public view returns (uint) {\r\n    require(goal != 0, \"goal is 0, cannot divide by 0\");\r\n    return 100 * (address(this).balance / goal);\r\n  }\r\n}"
    }
  }
}