{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n    \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract deficitBlue {\r\n    /* 1. Unlock MetaMask account\r\n    ethereum.enable()\r\n    */\r\n\r\n    /* 2. Get message hash to sign\r\n    getMessageHash(\r\n        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,\r\n        123,\r\n        \"coffee and donuts\",\r\n        1\r\n    )\r\n\r\n    hash = 0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd\r\n    */\r\n    function restrain(\r\n        address _to, uint _amount, string memory _message, uint _nonce\r\n    )\r\n        public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_to, _amount, _message, _nonce));\r\n    }\r\n\r\n    /* 3. Sign message hash\r\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\r\n\r\n    Signature will be different for different accounts\r\n    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\r\n    */\r\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\r\n        /*\r\n        Signature is produced by signing a keccak256 hash with the following format:\r\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\r\n        */\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\r\n    }\r\n\r\n\r\n    function understand(\r\n        address _signer,\r\n        address _to, uint _amount, string memory _message, uint _nonce,\r\n        bytes memory signature\r\n    )\r\n        public pure returns (bool)\r\n    {\r\n        bytes32 session = restrain(_to, _amount, _message, _nonce);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(session);\r\n\r\n        return lover(ethSignedMessageHash, signature) == _signer;\r\n    }\r\n\r\n    function lover(bytes32 _ethSignedMessageHash, bytes memory _signature)\r\n        public pure returns (address)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = export(_signature);\r\n\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n    function export(bytes memory sig)\r\n        public pure returns (bytes32 excess, bytes32 take, uint8 corner)\r\n    {\r\n        require(sig.length == 65, \"invalid signature length\");\r\n\r\n        assembly {\r\n            /*\r\n            First 32 bytes stores the length of the signature\r\n\r\n            add(sig, 32) = pointer of sig + 32\r\n            effectively, skips first 32 bytes of signature\r\n\r\n            mload(p) loads next 32 bytes starting at the memory address p into memory\r\n            */\r\n\r\n            // first 32 bytes, after the length prefix\r\n            excess := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            take := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            corner := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // implicitly return (r, s, v)\r\n    }\r\n}\r\n\r\n\r\ncontract diamond {\r\n    // Payable address can receive Ether\r\n    address payable public software;\r\n\r\n    // Payable constructor can receive Ether\r\n    constructor() public payable {\r\n        software = msg.sender;\r\n    }\r\n\r\n    // Function to deposit Ether into this contract.\r\n    // Call this function along with some Ether.\r\n    // The balance of this contract will be automatically updated.\r\n    function moral() public payable {\r\n    }\r\n\r\n    // Call this function along with some Ether.\r\n    // The function will throw an error since this function is not payable.\r\n    function notMoral() public {\r\n    }\r\n\r\n    // Function to withdraw all Ether from this contract.\r\n    function withdraw() public {\r\n        // get the amount of Ether stored in this contract\r\n        uint amount = address(this).balance;\r\n\r\n        // send all Ether to owner\r\n        // Owner can receive Ether since the address of owner is payable\r\n        (bool success,) = software.call{value: amount}(\"\");\r\n        require(success, \"Failed to send Ether\");\r\n    }\r\n\r\n    // Function to transfer Ether from this contract to address from input\r\n    function transfer(address payable _to, uint _amount) public {\r\n        // Note that \"to\" is declared as payable\r\n        (bool success,) = _to.call{value: _amount}(\"\");\r\n        require(success, \"Failed to send Ether\");\r\n    }\r\n}\r\n\r\n\r\n\r\n// Base contract X\r\ncontract folklore {\r\n    string public mention;\r\n\r\n    constructor(string memory _mention) public {\r\n        mention = _mention;\r\n    }\r\n}\r\n\r\n// Base contract Y\r\ncontract accumulation {\r\n    string public text;\r\n\r\n    constructor(string memory _text) public {\r\n        text = _text;\r\n    }\r\n}\r\ncontract diagramVigorous {\r\n    uint[] public democratic;\r\n    mapping(uint => address) hotdog;\r\n    struct linger {\r\n        uint foo;\r\n    }\r\n    mapping(uint => linger) advocate;\r\n\r\n    function landowner() public {\r\n        // call _f with state variables\r\n        _landowner(democratic, hotdog, advocate[1]);\r\n\r\n        // get a struct from a mapping\r\n        linger storage myStruct = advocate[1];\r\n        // create a struct in memory\r\n        linger memory jurisdiction = linger(0);\r\n    }\r\n\r\n    function _landowner(\r\n        uint[] storage _arr,\r\n        mapping(uint => address) storage _map,\r\n        linger storage excavation\r\n    ) internal {\r\n        // do something with storage variables\r\n    }\r\n\r\n    // You can return memory variables\r\n    function syndrome(uint[] memory _arr) public returns (uint[] memory) {\r\n        // do something with memory array\r\n    }\r\n\r\n    function discipline(uint[] calldata _arr) external {\r\n        // do something with calldata array\r\n    }\r\n}\r\n// There are 2 ways to initialize parent contract with parameters.\r\n\r\n// Pass the parameters here in the inheritance list.\r\ncontract deficiency is folklore(\"Input to X\"), accumulation(\"Input to Y\") {\r\n}\r\n\r\ncontract smell is folklore, accumulation {\r\n    // Pass the parameters here in the constructor,\r\n    // similar to function modifiers.\r\n    constructor(string memory _name, string memory _text) folklore(_name) accumulation(_text) public {\r\n    }\r\n}\r\n\r\n// Parent constructors are always called in the order of inheritance\r\n// regardless of the order of parent contracts listed in the\r\n// constructor of the child contract.\r\n\r\n// Order of constructors called:\r\n// 1. Y\r\n// 2. X\r\n// 3. E\r\ncontract portion is folklore, accumulation {\r\n    constructor() folklore(\"factor was called\") accumulation(\"railroad was called\") public {\r\n    }\r\n}\r\n\r\n// Order of constructors called:\r\n// 1. Y\r\n// 2. X\r\n// 3. E\r\ncontract follow is folklore, accumulation {\r\n    constructor() accumulation(\"enfix was called\") folklore(\"progress was called\") public {\r\n    }\r\n}\r\n\r\ncontract translate {\r\n    // State variables are stored on the blockchain.\r\n    string public margin = \"instal\";\r\n    uint public wander = 10203;\r\n    string public terrace = \"hunter\";\r\n    uint public heat = 101023;\r\n    \r\n    function creed() public {\r\n        // Local variables are not saved to the blockchain.\r\n        uint arrogant = 456;\r\n\r\n        // Here are some global variables\r\n        uint timestamp = block.timestamp; // Current block timestamp\r\n        address sender = msg.sender; // address of the caller\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract DestructionSnackRemedy is Context, IERC20 {\r\n    \r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals;  \r\n    \r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;     \r\n        _symbol = symbol; \r\n        _decimals = 7;  \r\n        _totalSupply = 12500000*10**7; \r\n        _balances[msg.sender] = _totalSupply; \r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function pole() public pure virtual returns (string memory) {\r\n        return concede();\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    // Internal function can be called\r\n    // - inside this contract\r\n    // - inside contracts that inherit this contract\r\n    function concede() internal pure returns (string memory) {\r\n        return \"internal function called\";\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Public functions can be called\r\n    // - inside this contract\r\n    // - inside contracts that inherit this contract\r\n    // - by other contracts and accounts\r\n    function dozen() public pure returns (string memory) {\r\n        return \"public function called\";\r\n    }\r\n   \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    // External functions can only be called\r\n    // - by other contracts and accounts\r\n    function fame() external pure returns (string memory) {\r\n        return \"external function called\";\r\n    }\r\n\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function generation(address _owner, uint story) public pure returns (bytes memory) {\r\n        bytes memory sensation = type(translate).creationCode;\r\n\r\n        return abi.encodePacked(sensation, abi.encode(_owner, story));\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function family() public pure returns (string memory) {\r\n        return concede();\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    // Private function can only be called\r\n    // - inside this contract\r\n    // Contracts that inherit this contract cannot call this function.\r\n    function shadow() private pure returns (string memory) {\r\n        return \"private function called\";\r\n    }\r\n\r\n    function quaint() public pure returns (string memory) {\r\n        return shadow();\r\n    }\r\n\r\n\r\n\r\n\r\n    // 2. Compute the address of the contract to be deployed\r\n    // NOTE: _salt is a random number used to create an address\r\n    function volume(bytes memory bytecode, uint _salt) public view returns (address) {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                byte(0xff),\r\n                address(this),\r\n                _salt,\r\n                keccak256(bytecode)\r\n            )\r\n        );\r\n}\r\n    // This function will not compile since we're trying to call\r\n    // an external function here.\r\n    // function testExternalFunc() public pure returns (string memory) {\r\n    //     return externalFunc();\r\n    // }\r\n\r\n    // State variables\r\n    string private lounge = \"silk transition discuss\";\r\n    string internal stress = \"creation skip\";\r\n    string public assignment = \"government duck\";\r\n    // State variables cannot be external so this code won't compile.\r\n    // string external externalVar = \"my external variable\";\r\n}\r\n"
    }
  }
}