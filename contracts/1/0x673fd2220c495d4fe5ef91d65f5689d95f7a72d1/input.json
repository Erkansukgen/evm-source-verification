{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/2_Owner.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-12-16\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.6.10;\n\ncontract BombDisposal {\n    address owner;\n    address public theRealJohnMcClane;\n    uint16 public purpleWiresCut;\n    uint16 public brownWiresCut;\n    uint16 public greenWiresCut;\n    uint16 public orangeWiresCut;\n    uint16 public redOrBlueWiresCut;\n    bool public bombArmed = true;\n    bool public bombDetonated = false;\n    uint256 constant INITIAL_COMMIT_PERIOD_END = 11498000;\n    uint256 constant BLOCKS_TO_WAIT = 15;\n    uint256 constant DETONATION_TIME = 11525000;\n    mapping(address => bool) public purpleWireCutters;\n    mapping(address => bool) public brownWireCutters;\n    mapping(address => bool) public greenWireCutters;\n    mapping(address => bool) public orangeWireCutters;\n    mapping(address => bool) public blueWireCutters;\n    mapping(address => bool) public redWireCutters;\n    mapping(address => bool) public redBlueAttempted;\n    mapping(address => bytes32) public purpleCommits;\n    mapping(address => bytes32) public brownCommits;\n    mapping(address => bytes32) public greenCommits;\n    mapping(address => bytes32) public disarmCommits;\n    mapping(address => uint256) public disarmCommitBlock;\n    string public disarmCode;\n\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function commitToCutPurpleWire(bytes32 _hash) external {\n        require(block.number < INITIAL_COMMIT_PERIOD_END, \"You're too late\");\n        purpleCommits[msg.sender] = _hash;\n    }\n    \n    function commitToCutBrownWire(bytes32 _hash) external {\n        require(block.number < INITIAL_COMMIT_PERIOD_END, \"You're too late\");\n        brownCommits[msg.sender] = _hash;\n    }\n    \n    function commitToCutGreenWire(bytes32 _hash) external {\n        require(block.number < INITIAL_COMMIT_PERIOD_END, \"You're too late\");\n        greenCommits[msg.sender] = _hash;\n    }\n\n    // Make sure to appreciate the last bit of 2020\n    function cutPurpleWire(string calldata answer) external {\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\n        require(!purpleWireCutters[msg.sender], \"Already cut\");\n        bytes32 answerHash = keccak256(abi.encodePacked(answer));\n        bytes32 commitHash = keccak256(abi.encodePacked(msg.sender, answerHash));\n        require(commitHash == purpleCommits[msg.sender], \"Poor commitment\");\n        bytes32 answerDoubleHash = keccak256(abi.encodePacked(answerHash));\n        require(answerDoubleHash == 0xb9bf1f33618e06cf16c58b07f82b01bbe4a9320b54b18ae4ba299f4eead3969f, \"Wrong answer\");\n        purpleWireCutters[msg.sender] = true;\n        purpleWiresCut += 1;\n    }\n    \n    // The original Coinbase\n    function cutBrownWire(bytes calldata answer) external {\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\n        require(!brownWireCutters[msg.sender], \"Already cut\");\n        bytes32 answerHash = keccak256(abi.encodePacked(answer));\n        bytes32 commitHash = keccak256(abi.encodePacked(msg.sender, answerHash));\n        require(commitHash == brownCommits[msg.sender], \"Poor commitment\");\n        bytes32 answerDoubleHash = keccak256(abi.encodePacked(answerHash));\n        require(answerDoubleHash == 0x32b0b16339e2428094126b67945dbe24136adea413b84958e65d48f0007a7d6b, \"Wrong answer\");\n        brownWireCutters[msg.sender] = true;\n        brownWiresCut += 1;\n    }\n  \n    // Mark my words, if we are not careful we will lose sight of why we started - To create a more decentralized future.\n    // For 18-20 included many distractions. \n    // What were they?\n    function cutGreenWire(string calldata tcotw, string calldata tdor, string calldata tloot) external {\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\n        require(!greenWireCutters[msg.sender], \"Already cut\");\n        bytes32 answerHash = keccak256(abi.encodePacked(tcotw, tdor, tloot));\n        bytes32 commitHash = keccak256(abi.encodePacked(msg.sender, answerHash));\n        require(commitHash == greenCommits[msg.sender], \"Poor commitment\");\n        bytes32 answerDoubleHash = keccak256(abi.encodePacked(answerHash));\n        require(answerDoubleHash == 0x3b7f80ff78a45475c3a1236c54a82625fbf41aa567b5e230a05e1b1066194748, \"Wrong answers\");\n        greenWireCutters[msg.sender] = true;\n        greenWiresCut += 1;\n    }\n    \n    // A miner problem\n    function cutOrangeWire(bytes2 nonce) external {\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\n        require(!orangeWireCutters[msg.sender], \"Already cut\");\n        bytes32 hashedValue = keccak256(abi.encodePacked(msg.sender, nonce));\n        byte firstByte = hashedValue[0];\n        require(firstByte == 0x00, \"Try a new nonce\");\n        orangeWireCutters[msg.sender] = true;\n        orangeWiresCut += 1;\n    }\n    \n    // This is your last chance. After this, there is no turning back.\n    function cutRedOrBlueWire() external {\n        require(block.number > INITIAL_COMMIT_PERIOD_END, \"Easy does it\");\n        require(!redBlueAttempted[tx.origin], \"No turning back\");\n        blueWireCutters[tx.origin] = !blueWireCutters[tx.origin];\n        redWireCutters[tx.origin] = !blueWireCutters[tx.origin];\n        msg.sender.call(\"You stay in Wonderland and I show you how deep the rabbit-hole goes\");\n        if (!redBlueAttempted[tx.origin]) {\n            redOrBlueWiresCut += 1;\n        }\n        redBlueAttempted[tx.origin] = true;\n    }\n    \n    // An additional disarm code will be provided by the SCPD after block 11511500\n    function provideDisarmCode(string calldata code) external {\n        require(msg.sender == owner);\n        disarmCode = code;\n    }\n    \n    function commitToDisarm(bytes32 _hash) external {\n        disarmCommits[msg.sender] = _hash;\n        disarmCommitBlock[msg.sender] = block.number;\n    }\n    \t\n\t// Await additional disarm code\n    function disarmBomb(string calldata missingChars) external {\n        require(!bombDetonated, \"Already exploded\");\n        require(bombArmed, \"Already disarmed\");\n        require(purpleWireCutters[msg.sender], \"Cut purple wire\");\n        require(brownWireCutters[msg.sender], \"Cut brown wire\");\n        require(greenWireCutters[msg.sender], \"Cut green wire\");\n        require(orangeWireCutters[msg.sender], \"Cut orange wire\");\n\t\trequire(block.number > disarmCommitBlock[msg.sender] + BLOCKS_TO_WAIT, \"No front-running\");\n\t\tbytes32 missingCharsHash = keccak256(abi.encodePacked(missingChars));\n\t\tbytes32 commitHash = keccak256(abi.encodePacked(msg.sender, missingCharsHash));\n\t\trequire(commitHash == disarmCommits[msg.sender], \"Poor commitment\");\n\t\tbytes32 finalResultHash = keccak256(abi.encodePacked(\n\t\t    missingCharsHash, \n\t\t    disarmCode, \n\t\t    blueWireCutters[msg.sender], \n\t\t    redWireCutters[msg.sender]\n\t\t    ));\n\t\trequire(finalResultHash == 0x820b25046cc144c5c0cff21af15e3387f538c5278cb097a77599041182b8ca17, \"Disarm failed\");\n        bombArmed = false;\n        theRealJohnMcClane = msg.sender;\n    }\n\n    function claimDisarmReward() external {\n        require(msg.sender == theRealJohnMcClane, \"Get outta here\");\n        msg.sender.transfer(address(this).balance);\n    }\n    \n    function detonateBomb() external {\n        require(block.number > DETONATION_TIME, \"Not until Xmas\");\n        require(!bombDetonated, \"Already exploded\");\n        require(bombArmed, \"Already disarmed\");\n        bombDetonated = true;\n        bombArmed = false;\n    }\n    \n    receive() external payable {}\n}"}}}