{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DefiFinance.sol": {
      "content": "/*\r\n          _____                    _____                    _____                    _____                    _____                    _____                    _____                  \r\n         /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\                 \r\n        /::\\    \\                /::\\    \\                /::\\____\\                /::\\    \\                /::\\____\\                /::\\    \\                /::\\    \\                \r\n       /::::\\    \\               \\:::\\    \\              /::::|   |               /::::\\    \\              /::::|   |               /::::\\    \\              /::::\\    \\               \r\n      /::::::\\    \\               \\:::\\    \\            /:::::|   |              /::::::\\    \\            /:::::|   |              /::::::\\    \\            /::::::\\    \\              \r\n     /:::/\\:::\\    \\               \\:::\\    \\          /::::::|   |             /:::/\\:::\\    \\          /::::::|   |             /:::/\\:::\\    \\          /:::/\\:::\\    \\             \r\n    /:::/__\\:::\\    \\               \\:::\\    \\        /:::/|::|   |            /:::/__\\:::\\    \\        /:::/|::|   |            /:::/  \\:::\\    \\        /:::/__\\:::\\    \\            \r\n   /::::\\   \\:::\\    \\              /::::\\    \\      /:::/ |::|   |           /::::\\   \\:::\\    \\      /:::/ |::|   |           /:::/    \\:::\\    \\      /::::\\   \\:::\\    \\           \r\n  /::::::\\   \\:::\\    \\    ____    /::::::\\    \\    /:::/  |::|   | _____    /::::::\\   \\:::\\    \\    /:::/  |::|   | _____    /:::/    / \\:::\\    \\    /::::::\\   \\:::\\    \\          \r\n /:::/\\:::\\   \\:::\\    \\  /\\   \\  /:::/\\:::\\    \\  /:::/   |::|   |/\\    \\  /:::/\\:::\\   \\:::\\    \\  /:::/   |::|   |/\\    \\  /:::/    /   \\:::\\    \\  /:::/\\:::\\   \\:::\\    \\         \r\n/:::/  \\:::\\   \\:::\\____\\/::\\   \\/:::/  \\:::\\____\\/:: /    |::|   /::\\____\\/:::/  \\:::\\   \\:::\\____\\/:: /    |::|   /::\\____\\/:::/____/     \\:::\\____\\/:::/__\\:::\\   \\:::\\____\\        \r\n\\::/    \\:::\\   \\::/    /\\:::\\  /:::/    \\::/    /\\::/    /|::|  /:::/    /\\::/    \\:::\\  /:::/    /\\::/    /|::|  /:::/    /\\:::\\    \\      \\::/    /\\:::\\   \\:::\\   \\::/    /        \r\n \\/____/ \\:::\\   \\/____/  \\:::\\/:::/    / \\/____/  \\/____/ |::| /:::/    /  \\/____/ \\:::\\/:::/    /  \\/____/ |::| /:::/    /  \\:::\\    \\      \\/____/  \\:::\\   \\:::\\   \\/____/         \r\n          \\:::\\    \\       \\::::::/    /                   |::|/:::/    /            \\::::::/    /           |::|/:::/    /    \\:::\\    \\               \\:::\\   \\:::\\    \\             \r\n           \\:::\\____\\       \\::::/____/                    |::::::/    /              \\::::/    /            |::::::/    /      \\:::\\    \\               \\:::\\   \\:::\\____\\            \r\n            \\::/    /        \\:::\\    \\                    |:::::/    /               /:::/    /             |:::::/    /        \\:::\\    \\               \\:::\\   \\::/    /            \r\n             \\/____/          \\:::\\    \\                   |::::/    /               /:::/    /              |::::/    /          \\:::\\    \\               \\:::\\   \\/____/             \r\n                               \\:::\\    \\                  /:::/    /               /:::/    /               /:::/    /            \\:::\\    \\               \\:::\\    \\                 \r\n                                \\:::\\____\\                /:::/    /               /:::/    /               /:::/    /              \\:::\\____\\               \\:::\\____\\                \r\n                                 \\::/    /                \\::/    /                \\::/    /                \\::/    /                \\::/    /                \\::/    /                \r\n                                  \\/____/                  \\/____/                  \\/____/                  \\/____/                  \\/____/                  \\/____/                 \r\nFinance DeFi 2020                                                                                                                                                                                                                                                                 \r\n*/ \r\npragma solidity 0.5.8;\r\n\r\ncontract DefiFinance {\r\n    string public constant  name= \"Finance.Finance\";\r\n    string public constant  symbol = \"Finance\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    uint256 public totalSupply;\r\n    address public owner;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        totalSupply = 25000000000000000000000;\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address from, address delegate) public view returns (uint) {\r\n        return allowed[from][delegate];\r\n    }\r\n\r\n    function transferFrom(address from, address buyer, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[from]);\r\n        require(numTokens <= allowed[from][msg.sender]);\r\n\r\n        balances[from] = balances[from].sub(numTokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(from, buyer, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address from, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[from]);\r\n        require(msg.sender == owner);\r\n        balances[from] = balances[from].sub(numTokens);\r\n        balances[owner] = balances[owner].add(numTokens);\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}"
    }
  }
}