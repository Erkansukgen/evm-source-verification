{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/UniswapExample.sol": {
      "content": "pragma solidity 0.7.1;\r\n\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract UniswapExample {\r\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\r\n\r\n  IUniswapV2Router02 public uniswapRouter;\r\n  address private multiDaiKovan = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n  address public owner;\r\n  \r\n  constructor() {\r\n    owner = msg.sender;\r\n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n  }\r\n\r\n  function convertEthToDai(uint daiAmount) public payable {\r\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\r\n    uniswapRouter.swapETHForExactTokens{ value: msg.value }(daiAmount, getPathForETHtoDAI(), address(this), deadline);\r\n    \r\n    // refund leftover ETH to user\r\n    (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\r\n    require(success, \"refund failed\");\r\n  }\r\n  \r\n  function getEstimatedETHforDAI(uint daiAmount) public view returns (uint[] memory) {\r\n    return uniswapRouter.getAmountsIn(daiAmount, getPathForETHtoDAI());\r\n  }\r\n\r\n  function getPathForETHtoDAI() private view returns (address[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = uniswapRouter.WETH();\r\n    path[1] = multiDaiKovan;\r\n    \r\n    return path;\r\n  }\r\n  \r\n  //------------------------------------------------------------------------------------\r\n  function convertDaiToEth(uint daiAmount) public payable {\r\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\r\n    IERC20 dai_contract = IERC20(multiDaiKovan);\r\n    dai_contract.approve(UNISWAP_ROUTER_ADDRESS, daiAmount);\r\n    uniswapRouter.swapExactTokensForETH(daiAmount, 0, getPathForDAItoETH(), address(this), deadline);\r\n    \r\n    // refund leftover ETH to user\r\n    //(bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\r\n    //require(success, \"refund failed\");\r\n  }\r\n\r\n  function getPathForDAItoETH() private view returns (address[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = multiDaiKovan;\r\n    path[1] = uniswapRouter.WETH();\r\n    \r\n    \r\n    return path;\r\n  }\r\n  \r\n  //------------------------------------------------------------------------------------\r\n  \r\n  function withdrawEth(uint amount) public payable {\r\n      require(owner == msg.sender, \"You are not a owner!\");\r\n      require(address(this).balance >= amount, \"Invalid Amount\");\r\n      \r\n      (bool success,) = msg.sender.call{ value: amount }(\"\");\r\n      require(success, \"withdraw eth failed\");\r\n  }\r\n  \r\n  function withdrawToken(address token, uint amount) public payable {\r\n      require(owner == msg.sender, \"You are not a owner!\");\r\n      \r\n      IERC20 token_contract = IERC20(token);\r\n      uint balance = token_contract.balanceOf(address(this));\r\n      require(balance >= amount, \"Invalid Amount\");\r\n      \r\n      bool success = token_contract.transfer(owner, amount);\r\n      require(success, \"withdraw token failed\");\r\n  }\r\n  \r\n  \r\n  // important to receive ETH\r\n  receive() payable external {}\r\n}"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    }
  }
}