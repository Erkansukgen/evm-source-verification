{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NoundleTheory.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\ninterface InterfaceRainbows {\r\n    function transferTokens(address _from, address _to) external;\r\n    function burn(address user, uint256 amount) external;\r\n}\r\n\r\ninterface InterfaceOriginals {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function getNoundlesFromWallet(address _noundles) external view returns (uint256[] memory);\r\n}\r\n\r\ninterface InterfaceRandomNumber {\r\n    function getRandomNumber(uint256 arg) external returns (uint);\r\n}\r\n\r\n/*\r\n    :)\r\n*/\r\ncontract NoundleTheory is ERC721, ERC721Enumerable, Ownable {\r\n\r\n    // Interfaces to interact with the other contracts\r\n    InterfaceRainbows public Rainbows;\r\n    InterfaceOriginals public Originals;\r\n    InterfaceRandomNumber public RandomNumber;\r\n\r\n    /*\r\n     * Constants\r\n     * MAX_EVIL_NOUNDLES        = Maximum Supply for Evil Noundles that could be minted\r\n     * MAX_COMPANION_NOUNDLES   = Maximum Supply for public mint with eth or rainbows (with 100% chance at companion).\r\n     * MAX_FREE_COMPANION_MINTS = Maximum Supply for every Noundle holder to mint one companion\r\n     * MAX_FREE_LAND_MINTS      = Maximum Supply for every Genesis Noundle Holder to mint some land (you deserve it kings)\r\n     * MAX_RESERVED_EVIL        = Evil Reserved noundles for the team for giveaways, advisors, etc.\r\n     * MAX_RESERVED_LAND        = Land Reserved noundles for the team for giveaways, advisors, etc.\r\n     * MAX_RESERVED_COMP        = Companions Reserved noundles for the team for giveaways, advisors, etc.\r\n     */\r\n    uint256 public constant MAX_EVIL_NOUNDLES        = 40000;\r\n    uint256 public constant MAX_COMPANION_NOUNDLES   = 7000;\r\n    uint256 public constant MAX_FREE_COMPANION_MINTS = 8888;\r\n    uint256 public constant MAX_FREE_LAND_MINTS      = 8888;\r\n    uint256 public constant MAX_RESERVED_EVIL        = 250;\r\n    uint256 public constant MAX_RESERVED_LAND        = 250;\r\n    uint256 public constant MAX_RESERVED_COMP        = 250;\r\n\r\n    // Track all the mintable tokens.\r\n    uint256[] public companionList;\r\n    uint256[] public evilList;\r\n    uint256[] public lowLandList;\r\n    uint256[] public midLandList;\r\n    uint256[] public highLandList;\r\n\r\n    // Each number is based on a %\r\n    uint256 public percentEvil      = 10;\r\n    uint256 public percentSteal     = 10;\r\n    uint256 public percentJail      = 10;\r\n    uint256 public percentLowLand   = 75;\r\n    uint256 public percentMidLand   = 20;\r\n    uint256 public percentHighLand  = 5;\r\n\r\n    // Total minted of each kind.\r\n    uint256 public mintCountCompanions = 0;\r\n    uint256 public mintCountEvil       = 0;\r\n    uint256 public mintCountLandLow    = 0;\r\n    uint256 public mintCountLandMid    = 0;\r\n    uint256 public mintCountLandHigh   = 0;\r\n\r\n    // Public minting costs - these will most likely change when contract is deployed, so don't look to deep into them\r\n    uint256 public publicMintCompanionPriceEth     = 0.1 ether;\r\n    uint256 public publicMintCompanionPriceRainbow = 20 ether;\r\n    uint256 public evilMintPriceRainbow            = 20 ether;\r\n    uint256 public landMintPriceRainbow            = 50 ether;\r\n\r\n    // Track the free mints for companions and evil noundle mints\r\n    uint256 public freeCompanionMint = 0;\r\n    uint256 public evilNoundleMint   = 0;\r\n\r\n    // Tracks the reserved mints to make sure we don't go over it\r\n    uint256 public reservedEvil = 0;\r\n    uint256 public reservedLand = 0;\r\n    uint256 public reservedComp = 0;\r\n\r\n    // Track the whitelisted evil noundles\r\n    mapping(address => bool) evilNoundleAllowed;\r\n    mapping(address => bool) evilNoundleMinted;\r\n    mapping(address => bool) freeCompanionAllowed;\r\n    mapping(address => bool) freeCompanionMinted;\r\n    mapping(address => bool) alreadyPublicMinted;\r\n    bool public overrideAlreadyPublicMinted = false;\r\n\r\n    // Track the whitelisted land owners\r\n    mapping(address => bool) landAllowed;\r\n    mapping(address => bool) landMinted;\r\n\r\n    // Tracks the tokens that were already used to mint companions - prevents people from transfering their token to new wallets and claiming again :)\r\n    mapping(uint256 => bool) alreadyMintedNoundles;\r\n\r\n    // Tracks the tokens that were already used to mint land\r\n    mapping(uint256 => bool) alreadyMintedLandNoundles;\r\n\r\n    // Minting Settings\r\n    bool    public saleEnabled = false;\r\n    uint256 public saleOneTime = 0;\r\n    uint256 public saleTwoTime = 0; // lands + more :)\r\n\r\n    // $RAINBOW Minting costs\r\n    bool    public rainbowMintingEnabled = false;\r\n    uint256 public rBaseMintPriceTier1   = 40.0 ether;\r\n    uint256 public rBaseMintPriceTier2   = 80.0 ether;\r\n    uint256 public rBaseMintPriceTier3   = 120.0 ether;\r\n    uint256 public tier2Start            = 10000;\r\n    uint256 public tier3Start            = 17500;\r\n\r\n    // Jail Settings\r\n    uint256 public jailLength    = 10800;\r\n    uint256 public getOutOfJail  = 2.0 ether;\r\n    mapping (uint256 => uint256) public jailHouse;\r\n\r\n    // Counters.\r\n    uint256 public counterStolenAttempted = 0;\r\n    uint256 public counterStolen          = 0;\r\n    uint256 public counterBail            = 0;\r\n    uint256 public counterJailed          = 0;\r\n\r\n    // Most Wanted\r\n    mapping (address => uint256) public mostWantedValues;\r\n    address [] public mostWantedMembers;\r\n\r\n    // Tracks the amount of tokens for Noundle Theory\r\n    mapping (address => uint256) public companionBalance;\r\n    mapping (address => uint256) public evilBalance;\r\n\r\n    // different tiers give different protection bonuses when being robbed\r\n    mapping (address => uint256) public lowLandBalance;\r\n    mapping (address => uint256) public midLandBalance;\r\n    mapping (address => uint256) public highLandBalance;\r\n\r\n    /*\r\n     * The types of Noundles in the Noundle Theory Game\r\n     * 0 - companions\r\n     * 1 - evil noundles\r\n     * 2 - low tier land (phase 2)\r\n     * 3 - mid tier land (phase 3)\r\n     * 4 - high tier land (phase 4)\r\n     **/\r\n    mapping (uint256 => uint8) public noundleType;\r\n    mapping (uint256 => uint256) public noundleOffsetCount;\r\n\r\n    // Rest of the contract settings\r\n    string  private baseURI;\r\n    address public founder1;\r\n    address public founder2;\r\n\r\n    // Modifiers\r\n    modifier isSaleEnabled() {\r\n        require(saleEnabled, \"Cannot be sold yet.\");\r\n        _;\r\n    }\r\n\r\n    modifier isPhaseOneStarted() {\r\n        require(block.timestamp >= saleOneTime && saleOneTime > 0, \"Phase One hasn't started\");\r\n        _;\r\n    }\r\n\r\n    modifier isPhaseTwoStarted() {\r\n        require(block.timestamp >= saleTwoTime && saleTwoTime > 0, \"Phase Two hasn't started\");\r\n        _;\r\n    }\r\n\r\n    modifier isRainbowMintingEnabled() {\r\n        require(rainbowMintingEnabled, \"Cannot mint with $RAINBOWS yet.\");\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _uri) ERC721(\"NOUNDLETHEORY\", \"NOUNDLETHEORY\") {\r\n        baseURI = _uri;\r\n    }\r\n\r\n    // Adds a user to the claimable evil noundle mint\r\n    function addEvilNoundlers(address[] memory _noundles) public onlyOwner {\r\n        for (uint256 __noundles;__noundles < _noundles.length;__noundles++) {\r\n            evilNoundleAllowed[_noundles[__noundles]] = true;\r\n        }\r\n    }\r\n\r\n    // Check if a address is on the free mint.\r\n    function checkEvilNoundlers(address _noundles) public view returns (bool) {\r\n        return evilNoundleAllowed[_noundles];\r\n    }\r\n\r\n    // Adds a user to the claimable free noundle mint\r\n    function addFreeNoundlers(address[] memory _noundles) public onlyOwner {\r\n        for (uint256 __noundles;__noundles < _noundles.length;__noundles++) {\r\n            freeCompanionAllowed[_noundles[__noundles]] = true;\r\n        }\r\n    }\r\n\r\n    // Check if a address is on the free mint.\r\n    function checkFreeNoundlers(address _noundles) public view returns (bool) {\r\n        return freeCompanionAllowed[_noundles];\r\n    }\r\n\r\n\r\n    // generic minting function :)\r\n    function _handleMinting(address _to, uint256 _index, uint8 _type) private {\r\n\r\n        // Attempt to mint.\r\n        _safeMint(_to, _index);\r\n\r\n        // Set it's type in place.\r\n        noundleType[_index] = _type;\r\n\r\n        if (_type == 0) {\r\n            companionBalance[msg.sender]++;\r\n            companionList.push(_index);\r\n            noundleOffsetCount[_index] = mintCountCompanions;\r\n            mintCountCompanions++;\r\n        } else if (_type == 1) {\r\n            evilBalance[msg.sender]++;\r\n            evilList.push(_index);\r\n            noundleOffsetCount[_index] = mintCountEvil;\r\n            mintCountEvil++;\r\n        } else if (_type == 2) {\r\n            lowLandBalance[msg.sender]++;\r\n            lowLandList.push(_index);\r\n            noundleOffsetCount[_index] = mintCountLandLow;\r\n            mintCountLandLow++;\r\n        } else if (_type == 3) {\r\n            midLandBalance[msg.sender]++;\r\n            midLandList.push(_index);\r\n            noundleOffsetCount[_index] = mintCountLandMid;\r\n            mintCountLandMid++;\r\n        } else {\r\n            highLandBalance[msg.sender]++;\r\n            highLandList.push(_index);\r\n            noundleOffsetCount[_index] = mintCountLandHigh;\r\n            mintCountLandHigh++;\r\n        }\r\n    }\r\n\r\n    // Reserves some of the supply of the noundles for giveaways & the community\r\n    function reserveNoundles(uint256 _amount, uint8 _type) public onlyOwner {\r\n        // enforce reserve limits based on type claimed\r\n        if (_type == 0) {\r\n            require(reservedComp + _amount <= MAX_RESERVED_COMP, \"Cannot reserve more companions!\");\r\n        } else if (_type == 1) {\r\n            require(reservedEvil + _amount <= MAX_RESERVED_EVIL, \"Cannot reserve more evil noundles!\");\r\n        } else {\r\n            require(reservedLand + _amount <= MAX_RESERVED_LAND, \"Cannot reserve more land!\");\r\n        }\r\n\r\n        uint256 _ts = totalSupply();\r\n\r\n        // Mint the reserves.\r\n        for (uint256 i; i < _amount; i++) {\r\n            _handleMinting(msg.sender, _ts + i, _type);\r\n\r\n            if (_type == 0) {\r\n                reservedComp++;\r\n            } else if (_type == 1) {\r\n                reservedEvil++;\r\n            } else {\r\n                reservedLand++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Mint your evil noundle.\r\n    function claimEvilNoundle() public payable isPhaseOneStarted {\r\n        uint256 __noundles = totalSupply();\r\n\r\n        // Verify request.\r\n        require(freeCompanionMint + 1 <= MAX_FREE_COMPANION_MINTS,   \"We ran out of evil noundles :(\");\r\n        require(evilNoundleAllowed[msg.sender],         \"You are not on whitelist\");\r\n        require(evilNoundleMinted[msg.sender] == false, \"You already minted your free noundle.\");\r\n\r\n        // Make sure that the wallet is holding at least 1 noundle.\r\n        require(Originals.getNoundlesFromWallet(msg.sender).length > 0, \"You must hold at least one Noundle to mint\");\r\n\r\n        // Burn the rainbows.\r\n        Rainbows.burn(msg.sender, evilMintPriceRainbow);\r\n\r\n        // Mark it as they already got theirs.\r\n        evilNoundleMinted[msg.sender] = true;\r\n\r\n        // Add to our free mint count.\r\n        freeCompanionMint += 1;\r\n\r\n        // Mint it.\r\n        _handleMinting(msg.sender, __noundles, 1);\r\n    }\r\n\r\n    // Mint your free companion.\r\n    function mintHolderNoundles() public payable isPhaseOneStarted {\r\n        uint256 __noundles = totalSupply();\r\n\r\n        // Verify request.\r\n        require(freeCompanionMint + 1 <= MAX_FREE_COMPANION_MINTS,   \"We ran out of evil noundles :(\");\r\n        require(freeCompanionAllowed[msg.sender],                    \"You are not on whitelist\");\r\n        require(freeCompanionMinted[msg.sender] == false,            \"You already minted your free companion.\");\r\n\r\n        // Make sure that the wallet is holding at least 1 noundle.\r\n        require(Originals.getNoundlesFromWallet(msg.sender).length > 0, \"You must hold at least one Noundle to mint\");\r\n\r\n        // Mark it as they already got theirs.\r\n        freeCompanionMinted[msg.sender] = true;\r\n\r\n        // Add to our free mint count.\r\n        freeCompanionMint += 1;\r\n\r\n        // Mint it.\r\n        _handleMinting(msg.sender, __noundles, 0);\r\n    }\r\n\r\n    // Mint your companion (with Eth).\r\n    function mintNoundles(uint256 _noundles) public payable isPhaseOneStarted {\r\n        uint256 __noundles = totalSupply();\r\n\r\n        // Make sure to Do you even read these\r\n        require(_noundles > 0 && _noundles <= 5,               \"Your amount needs to be greater then 0 and can't exceed 5\");\r\n        require(_noundles * publicMintCompanionPriceEth <= msg.value,   \"Ser we need more money for your noundles\");\r\n        require(_noundles + __noundles <= MAX_COMPANION_NOUNDLES, \"We ran out of noundles! Try minting with less!\");\r\n        require(alreadyPublicMinted[msg.sender] == false || overrideAlreadyPublicMinted, \"You cannot mint twice\");\r\n\r\n        alreadyPublicMinted[msg.sender] = true;\r\n\r\n        for (uint256 ___noundles; ___noundles < _noundles; ___noundles++) {\r\n            _handleMinting(msg.sender,  __noundles + ___noundles, 0);\r\n        }\r\n    }\r\n\r\n    // Mint your companion (with $RAINBOWS).\r\n    function mintNoundlesWithRainbows(uint256 _noundles) public payable isPhaseOneStarted {\r\n        uint256 __noundles = totalSupply();\r\n\r\n        // Make sure to Do you even read these\r\n        require(_noundles > 0 && _noundles <= 5,              \"Your amount needs to be greater then 0 and can't exceed 5\");\r\n        require(_noundles + __noundles <= MAX_COMPANION_NOUNDLES, \"We ran out of noundles! Try minting with less!\");\r\n        require(alreadyPublicMinted[msg.sender] == false || overrideAlreadyPublicMinted, \"You cannot mint twice\");\r\n\r\n        // Burn the rainbows.\r\n        Rainbows.burn(msg.sender, publicMintCompanionPriceRainbow * _noundles);\r\n\r\n        alreadyPublicMinted[msg.sender] = true;\r\n\r\n        // Mint it.\r\n        for (uint256 ___noundles; ___noundles < _noundles; ___noundles++) {\r\n            _handleMinting(msg.sender, __noundles + ___noundles, 0);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Rainbow Minting.\r\n    */\r\n    function _handleRainbowMinting(address _to, uint256 index) private {\r\n\r\n        // make a copy of who is getting it.\r\n        address to = _to;\r\n\r\n        // Determine what kind of mint it should be.\r\n        uint8 _type = 0;\r\n\r\n        // If we determine it's evil.\r\n        if(percentChance(index, 100, percentEvil)){\r\n            _type = 1;\r\n        }\r\n\r\n        // Determine if it was stolen, give it to the evil noundle owner.\r\n        if(percentChance(index, 100, percentSteal)){\r\n            uint256 evilTokenId = getRandomEvilNoundle(index, 0);\r\n\r\n            // If it's 0 then we don't have a evil noundle to give it to.\r\n            if(evilTokenId != 0){\r\n\r\n                counterStolenAttempted += 1;\r\n\r\n                // Check if it failed to steal and needs to go to jail.\r\n                if(percentChance(index, 100, percentJail)){\r\n                    jailHouse[evilTokenId] = block.timestamp;\r\n\r\n                    counterJailed += 1;\r\n                }else{\r\n                    // The evil noundle stole the nft.\r\n                    to = ownerOf(evilTokenId);\r\n                    counterStolen += 1;\r\n\r\n                    // Add to the most wanted.\r\n                    if(mostWantedValues[to] == 0){\r\n                        mostWantedMembers.push(to);\r\n                    }\r\n\r\n                    mostWantedValues[to] += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Burn the rainbows.\r\n        Rainbows.burn(msg.sender, costToMintWithRainbows());\r\n\r\n        // Mint it.\r\n        _handleMinting(to, index, _type);\r\n    }\r\n\r\n    // Handle consuming rainbow to mint a new NFT with random chance.\r\n    function mintWithRainbows(uint256 _noundles) public payable isRainbowMintingEnabled {\r\n        uint256 __noundles = totalSupply();\r\n\r\n        require(_noundles > 0 && _noundles <= 10,              \"Your amount needs to be greater then 0 and can't exceed 10\");\r\n        require(_noundles + (mintCountCompanions + mintCountEvil) <= MAX_EVIL_NOUNDLES, \"We ran out of noundles! Try minting with less!\");\r\n\r\n        for (uint256 ___noundles; ___noundles < _noundles; ___noundles++) {\r\n            _handleRainbowMinting(msg.sender,  __noundles + ___noundles);\r\n        }\r\n    }\r\n\r\n    // Mint your free lkand.\r\n    function mintHolderLandNoundles(uint256 _noundles) public payable isPhaseTwoStarted {\r\n        uint256 __noundles = totalSupply();\r\n\r\n        require(_noundles > 0 && _noundles <= 10, \"Your amount needs to be greater then 0 and can't exceed 10\");\r\n        require(_noundles + __noundles <= MAX_FREE_LAND_MINTS, \"We ran out of land! Try minting with less!\");\r\n\r\n        // The noundles that the sender is holding.\r\n        uint256[] memory holdingNoundles = Originals.getNoundlesFromWallet(msg.sender);\r\n\r\n        uint256 offset = 0;\r\n\r\n        // Mint as many as they are holding.\r\n        for (uint256 index; (index < holdingNoundles.length) && index < _noundles; index += 1){\r\n\r\n            // Check if it has been minted before.\r\n            if(alreadyMintedLandNoundles[holdingNoundles[index]]){\r\n                continue;\r\n            }\r\n\r\n            uint8 _type = 2;\r\n\r\n            // Pick a random type of land.\r\n            if(percentChance(__noundles + offset, (percentLowLand + percentMidLand + percentHighLand), percentHighLand)){\r\n                _type = 4;\r\n            }else if(percentChance(__noundles + offset, (percentLowLand + percentMidLand + percentHighLand), percentMidLand)){\r\n                _type = 3;\r\n            }\r\n\r\n            // Burn the rainbows.\r\n            Rainbows.burn(msg.sender, landMintPriceRainbow);\r\n\r\n            // Mark it as minted.\r\n            alreadyMintedLandNoundles[holdingNoundles[index]] = true;\r\n\r\n            // Mint it.\r\n            _handleMinting(msg.sender,  __noundles + offset, _type);\r\n\r\n            // Go to the next offset.\r\n            offset += 1;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n        Jail Related\r\n    */\r\n    // Get a evil out of jail.\r\n    function getOutOfJailByTokenId(uint256 _tokenId) public payable isRainbowMintingEnabled {\r\n\r\n        // Check that it is a evil noundle.\r\n        require(noundleType[_tokenId] == 1, \"Only evil noundles can go to jail.\");\r\n\r\n        // Burn the rainbows to get out of jail.\r\n        Rainbows.burn(msg.sender, getOutOfJail);\r\n\r\n        // Reset the jail time.\r\n        jailHouse[_tokenId] = 1;\r\n\r\n        // Stat track.\r\n        counterBail += 1;\r\n    }\r\n\r\n\r\n    /*\r\n        Helpers\r\n    */\r\n    function setPayoutAddresses(address[] memory _noundles) public onlyOwner {\r\n        founder1 = _noundles[0];\r\n        founder2 = _noundles[1];\r\n    }\r\n\r\n    function withdrawFunds(uint256 _noundles) public payable onlyOwner {\r\n        uint256 percentle = _noundles / 100;\r\n\r\n        require(payable(founder1).send(percentle * 50));\r\n        require(payable(founder2).send(percentle * 50));\r\n    }\r\n\r\n    // Pick a evil noundle randomly from our list.\r\n    function getRandomEvilNoundle(uint256 index, uint256 depth) internal returns(uint256) {\r\n        uint256 selectedIndex = RandomNumber.getRandomNumber(index) % evilList.length;\r\n\r\n        // If it's not in jail.\r\n        if(jailHouse[evilList[selectedIndex]] + jailLength < block.timestamp){\r\n            return evilList[selectedIndex];\r\n        }\r\n\r\n        // If we can't find one in 100 attempts, select none.\r\n        if(depth > 99){\r\n            return 0;\r\n        }\r\n\r\n        // If it's in jail, it can't steal so try again.\r\n        return getRandomEvilNoundle(index, depth + 1);\r\n    }\r\n\r\n    // Pick a evil noundle randomly from our list.\r\n    function percentChance(uint256 index, uint256 total, uint256 chance) internal returns(bool) {\r\n        if((RandomNumber.getRandomNumber(index) % total) < chance){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Determine how much to mint a one with rainbows.\r\n    function costToMintWithRainbows() public view returns(uint256) {\r\n\r\n        uint256 total = mintCountCompanions + mintCountEvil;\r\n\r\n        if(total >= tier2Start){\r\n            return rBaseMintPriceTier2;\r\n        }\r\n        if(total >= tier3Start){\r\n            return rBaseMintPriceTier3;\r\n        }\r\n\r\n        return rBaseMintPriceTier1;\r\n    }\r\n\r\n    // Gets the noundle theory tokens and returns a array with all the tokens owned\r\n    function getNoundlesFromWallet(address _noundles) external view returns (uint256[] memory) {\r\n        uint256 __noundles = balanceOf(_noundles);\r\n\r\n        uint256[] memory ___noundles = new uint256[](__noundles);\r\n        for (uint256 i;i < __noundles;i++) {\r\n            ___noundles[i] = tokenOfOwnerByIndex(_noundles, i);\r\n        }\r\n\r\n        return ___noundles;\r\n    }\r\n\r\n    // Returns the addresses that own any evil noundle - seems rare :eyes:\r\n    function getEvilNoundleOwners() external view returns (address[] memory) {\r\n        address[] memory result = new address[](evilList.length);\r\n\r\n        for(uint256 index; index < evilList.length; index += 1){\r\n            if(jailHouse[evilList[index]] + jailLength <= block.timestamp){\r\n                result[index] = ownerOf(evilList[index]);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Helper to convert int to string (thanks stack overflow).\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    // Most wanted.\r\n    function getMostWanted() external view returns(address[] memory) {return mostWantedMembers;}\r\n    function getMostWantedValue(address _arg) external view returns(uint256) {return mostWantedValues[_arg];}\r\n    function resetMostWanted() public onlyOwner {\r\n\r\n        // Reset the value for each.\r\n        for(uint256 i = 0; i < mostWantedMembers.length; i += 1){\r\n            mostWantedValues[mostWantedMembers[i]] = 0;\r\n        }\r\n\r\n        // Clear most wanted.\r\n        delete mostWantedMembers;\r\n    }\r\n\r\n    // Contract Getters\r\n    function _baseURI() internal view override returns (string memory) { return baseURI; }\r\n    function getTypeByTokenId(uint256 _tokenId) external view returns (uint8) { return noundleType[_tokenId]; }\r\n    function getTypeByTokenIds(uint256[] memory _tokenId) external view returns(uint8[] memory) {\r\n        uint8[] memory result = new uint8[](_tokenId.length);\r\n\r\n        for (uint256 index; index < _tokenId.length; index += 1) {\r\n            result[index] = noundleType[_tokenId[index]];\r\n        }\r\n\r\n        return result;\r\n    }\r\n    function getFreeMintUsedByTokenId(uint256 _tokenId) external view returns (bool){ return alreadyMintedNoundles[_tokenId]; }\r\n    function getFreeLandMintUsedByTokenId(uint256 _tokenId) external view returns (bool){ return alreadyMintedLandNoundles[_tokenId]; }\r\n    function getJailStatus(uint256 _tokenId) external view returns (uint256){ return jailHouse[_tokenId]; }\r\n    function getJailStatusBool(uint256 _tokenId) public view returns (bool){ return (jailHouse[_tokenId] + jailLength > block.timestamp); }\r\n\r\n    // Contract Setters (pretty standard :))\r\n    function setBaseURI(string memory arg) public onlyOwner { baseURI = arg; }\r\n    function setSaleEnabled() public onlyOwner { saleEnabled = true; }\r\n    function setRandomNumberGenerator(address _arg) public onlyOwner { RandomNumber = InterfaceRandomNumber(_arg); }\r\n    function setPhaseOneSaleTime(uint256 _arg) public onlyOwner { saleOneTime = _arg; }\r\n    function setPhaseTwoSaleTime(uint256 _arg) public onlyOwner { saleTwoTime = _arg; }\r\n    function setMintPriceEth(uint256 _arg) public onlyOwner { publicMintCompanionPriceEth = _arg; }\r\n    function setMintPriceRain(uint256 _arg) public onlyOwner { publicMintCompanionPriceRainbow = _arg; }\r\n    function setEvilMintCostRainbows(uint256 _arg) external onlyOwner { evilMintPriceRainbow = _arg; }\r\n    function setLandMintCostRainbows(uint256 _arg) external onlyOwner { landMintPriceRainbow = _arg; }\r\n    function setOverrideAlreadyPublicMinted(bool _arg) external onlyOwner { overrideAlreadyPublicMinted = _arg; }\r\n\r\n    // Noundle Theory Setters (incase we need to balance some things out)\r\n    function setLowLandPercent(uint256 _amount) public onlyOwner { percentLowLand = _amount; }\r\n    function setMidLandPercent(uint256 _amount) public onlyOwner { percentMidLand = _amount; }\r\n    function setHighLandPercent(uint256 _amount) public onlyOwner { percentHighLand = _amount; }\r\n    function setEvilPercent(uint256 _amount) public onlyOwner { percentEvil = _amount; }\r\n    function setJailPercent(uint256 _amount) public onlyOwner { percentJail = _amount; }\r\n    function setStealPercent(uint256 _amount) public onlyOwner { percentSteal = _amount; }\r\n    function setJailTime(uint256 _amount) external onlyOwner { jailLength = _amount; }\r\n    function setGetOutOfJailCost(uint256 _amount) external onlyOwner { getOutOfJail = _amount; }\r\n    function setJailTimeForEvil(uint256 _tokenId, uint256 _amount) external onlyOwner { jailHouse[_tokenId] = _amount; }\r\n\r\n    // Contract Setters for the Genesis Contract\r\n    function setGenesisAddress(address _genesis) external onlyOwner { Originals = InterfaceOriginals(_genesis); }\r\n\r\n    // Contract Setters for the Rainbows Contract\r\n    function setRainbowMintStatus(bool _arg) public onlyOwner { rainbowMintingEnabled = _arg; }\r\n    function setBaseMintPriceTier1(uint256 _arg) public onlyOwner { rBaseMintPriceTier1 = _arg; }\r\n    function setBaseMintPriceTier2(uint256 _arg) public onlyOwner { rBaseMintPriceTier2 = _arg; }\r\n    function setBaseMintPriceTier3(uint256 _arg) public onlyOwner { rBaseMintPriceTier3 = _arg; }\r\n    function setTier2Start(uint256 _arg) public onlyOwner { tier2Start = _arg; }\r\n    function setTier3Start(uint256 _arg) public onlyOwner { tier3Start = _arg; }\r\n    function setRainbowAddress(address _rainbow) external onlyOwner { Rainbows = InterfaceRainbows(_rainbow); }\r\n\r\n    // opensea / ERC721 functions\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory base = _baseURI();\r\n\r\n        return string(abi.encodePacked(base, uint2str(noundleType[tokenId]), \"/\", uint2str(noundleOffsetCount[tokenId])));\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public override isSaleEnabled {\r\n        Rainbows.transferTokens(from, to);\r\n\r\n        if (noundleType[tokenId] == 0) {\r\n            companionBalance[from]++;\r\n            companionBalance[to]--;\r\n        } else if (noundleType[tokenId] == 2) {\r\n            evilBalance[from]++;\r\n            evilBalance[to]--;\r\n        } else if (noundleType[tokenId] == 3) {\r\n            lowLandBalance[from]++;\r\n            lowLandBalance[to]--;\r\n        } else if (noundleType[tokenId] == 4) {\r\n            midLandBalance[from]++;\r\n            midLandBalance[to]--;\r\n        } else {\r\n            highLandBalance[from]++;\r\n            highLandBalance[to]--;\r\n        }\r\n\r\n        ERC721.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override isSaleEnabled {\r\n        Rainbows.transferTokens(from, to);\r\n\r\n        if (noundleType[tokenId] == 0) {\r\n            companionBalance[from]++;\r\n            companionBalance[to]--;\r\n        } else if (noundleType[tokenId] == 2) {\r\n            evilBalance[from]++;\r\n            evilBalance[to]--;\r\n        } else if (noundleType[tokenId] == 3) {\r\n            lowLandBalance[from]++;\r\n            lowLandBalance[to]--;\r\n        } else if (noundleType[tokenId] == 4) {\r\n            midLandBalance[from]++;\r\n            midLandBalance[to]--;\r\n        } else {\r\n            highLandBalance[from]++;\r\n            highLandBalance[to]--;\r\n        }\r\n\r\n        ERC721.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override isSaleEnabled {\r\n        Rainbows.transferTokens(from, to);\r\n\r\n        if (noundleType[tokenId] == 0) {\r\n            companionBalance[from]++;\r\n            companionBalance[to]--;\r\n        } else if (noundleType[tokenId] == 2) {\r\n            evilBalance[from]++;\r\n            evilBalance[to]--;\r\n        } else if (noundleType[tokenId] == 3) {\r\n            lowLandBalance[from]++;\r\n            lowLandBalance[to]--;\r\n        } else if (noundleType[tokenId] == 4) {\r\n            midLandBalance[from]++;\r\n            midLandBalance[to]--;\r\n        } else {\r\n            highLandBalance[from]++;\r\n            highLandBalance[to]--;\r\n        }\r\n\r\n        ERC721.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n}"
    }
  }
}