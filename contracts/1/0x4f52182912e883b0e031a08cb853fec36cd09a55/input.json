{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/dydx-connectors/common/interfaces.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface TokenInterface {\n    function approve(address, uint256) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n    function allowance(address, address) external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}"
    },
    "browser/dydx-connectors/common/math.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport { SafeMath } from \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\";\n\ncontract DSMath {\n  uint constant WAD = 10 ** 18;\n  uint constant RAY = 10 ** 27;\n\n  function add(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(x, y);\n  }\n\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\n    z = SafeMath.sub(x, y);\n  }\n\n  function mul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.mul(x, y);\n  }\n\n  function div(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.div(x, y);\n  }\n\n  function wmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n  }\n\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n  }\n\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n  }\n\n  function rmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n  }\n\n}\n"
    },
    "browser/dydx-connectors/common/stores.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport { MemoryInterface} from \"./interfaces.sol\";\n\n\ncontract Stores {\n\n  /**\n   * @dev Return ethereum address\n   */\n  function getEthAddr() internal pure returns (address) {\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n  }\n\n  /**\n   * @dev Return memory variable address\n   */\n  function getMemoryAddr() internal pure returns (address) {\n    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n  }\n\n  /**\n   * @dev Get Uint value from InstaMemory Contract.\n   */\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n  }\n\n  /**\n  * @dev Set Uint value in InstaMemory Contract.\n  */\n  function setUint(uint setId, uint val) virtual internal {\n    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n  }\n}\n"
    },
    "browser/dydx-connectors/connectors/psm_usdc.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// import files from common directory\nimport { TokenInterface , MemoryInterface} from \"../common/interfaces.sol\";\nimport { Stores } from \"../common/stores.sol\";\nimport { DSMath } from \"../common/math.sol\";\n\ninterface IPSMUSDC {\n  function sellGem(address usr, uint256 gemAmt) external;\n  function buyGem(address usr, uint256 gemAmt) external;\n}\n\ninterface ILerp {\n  function tick() external;\n}\n\ncontract PSMUSDCProtocol is Stores, DSMath {\n\n  IPSMUSDC psm = IPSMUSDC(address(0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A));\n  address authUSDC = 0x0A59649758aa4d66E25f08Dd01271e891fe52199;\n  address authDAI = 0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A;\n\n  // sell USDC buy DAI\n  function sellGem(\n    address usr,\n    uint sellAmt,\n    uint getId\n  ) external payable {\n    uint _sellAmt = getUint(getId, sellAmt);\n    address usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    TokenInterface _sellToken = TokenInterface(usdc);\n    _sellAmt = _sellAmt == uint(-1) ? _sellToken.balanceOf(address(this)) : _sellAmt;\n    _sellToken.approve(authUSDC, _sellAmt);\n\n    psm.sellGem(usr, _sellAmt);\n  }\n\n  // sell DAI buy USDC\n  function buyGem(\n    address usr,\n    uint sellAmt,\n    uint getId\n  ) external payable {\n    uint _sellAmt = getUint(getId, sellAmt);\n    address dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    TokenInterface _sellToken = TokenInterface(dai);\n    _sellAmt = _sellAmt == uint(-1) ? _sellToken.balanceOf(address(this)) : _sellAmt;\n    _sellToken.approve(authDAI, _sellAmt);\n\n    psm.buyGem(usr, _sellAmt);\n  }\n\n  function tick() external {\n    ILerp(address(0x7b3799b30f268BA55f926d7F714a3001aF89d359)).tick();\n  }\n}\n\ncontract ConnectPSMUSDC is PSMUSDCProtocol {\n  string public name = \"PSM-USDC-v1.0\";\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  }
}