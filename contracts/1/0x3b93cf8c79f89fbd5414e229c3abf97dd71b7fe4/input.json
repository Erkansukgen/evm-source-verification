{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/PSplitter.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract PSplitter {\n    using SafeMath for uint256;\n\n    event PaymentReceived(address account, uint256 amount);\n    event PaymentFallback(address account, uint256 amount);\n    event CalculationResult(uint256 balance, uint256 result);\n\n    uint256 private _basicFee;\n    address private _owner;\n\n    constructor(uint256 basicFee) {\n        require(basicFee > 0, \"PSplitter: basicFee must be upper then 0\");\n        _basicFee = basicFee;\n        _owner = msg.sender;\n    }\n\n    modifier onlyExecuteBy(address _account) {\n        require(msg.sender == _account);\n        _;\n    }\n\n    receive() external payable {\n        require(msg.value > 0, \"PSplitter: amount smaller then total amount\");\n        emit PaymentReceived(msg.sender, msg.value);\n    }\n\n    fallback() external payable {\n        emit PaymentFallback(msg.sender, msg.value);\n    }\n\n    function getOwner() public view returns (address) {\n        return _owner;\n    }\n\n    function getContractBalance()\n        public\n        view\n        onlyExecuteBy(_owner)\n        returns (uint256)\n    {\n        return address(this).balance;\n    }\n\n    function backFee() public onlyExecuteBy(_owner) {\n        (bool success, ) = _owner.call{value: address(this).balance}(\"\");\n        require(success, \"Failed to transfer the funds, aborting.\");\n    }\n\n    function getFee() public view onlyExecuteBy(_owner) returns (uint256) {\n        return _basicFee;\n    }\n\n    function estimateGas(address payable reciever, uint256 _amount) public {}\n\n    function pay(address payable reciever, uint256 _amount) public payable {\n        require(\n            msg.value >= _amount,\n            \"PSplitter: value must be larger then amount\"\n        );\n        uint256 balance = address(this).balance;\n        require(balance >= _amount, \"PSplitter: amount larger then balance\");\n        uint256 resultValue = 100;\n        resultValue = resultValue.sub(_basicFee);\n        resultValue = _amount.mul(resultValue).div(100);\n        emit CalculationResult(balance, resultValue);\n        (bool success, ) = reciever.call{value: resultValue}(\"\");\n        require(success, \"Failed to transfer the funds, aborting.\");\n    }\n}\n\n// owner: 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\n// sender: 0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db\n// reciever: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c\n"}}}