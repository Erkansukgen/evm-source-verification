{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/batch_mint.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// File: contracts/utils/introspection/IERC165.sol\n\npragma solidity ^0.8.7;\n\n\ninterface NFTContract\n{\n    function mint(address to) external returns (uint256);\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\ncontract BatchMint\n{\n    bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\n\n    address owner;\n    NFTContract nftContract;\n\n    constructor(address contractAddress)\n    {\n        owner = msg.sender;\n        setContractAddress(contractAddress);\n    }\n\n    function setContractAddress(address _contractAddress) public\n    {\n        require(msg.sender == owner, \"not owner\");\n        nftContract = NFTContract(_contractAddress);\n        require(nftContract.supportsInterface(InterfaceSignature_ERC721));\n    }\n\n    function batchMint(address[] memory tos, uint8[] memory counts) public \n    {\n        require(msg.sender == owner, \"not owner\");\n        require(tos.length == counts.length, \"check param\");\n\n        for (uint8 i = 0; i < tos.length; i++) {\n            address to = tos[i];\n            uint8 count = counts[i];\n\n            for (uint8 j = 0; j < count; j++) {\n                nftContract.mint(to);\n            }\n        } \n    }\n\n}"}}}