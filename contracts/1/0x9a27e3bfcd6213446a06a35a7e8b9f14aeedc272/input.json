{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/FFI_PETH.sol": {
      "content": "pragma solidity ^0.6.6;\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\n abstract contract ERC20Interface {\n    function totalSupply()virtual  public  view returns (uint);\n    function balanceOf(address tokenOwner)virtual public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n    function transfer(address to, uint tokens) virtual public returns (bool success);\n    function approve(address spender, uint tokens) virtual public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\nabstract contract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data)virtual public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// ----------------------------------------------------------------------------\ncontract VETH_MAIN is ERC20Interface, Owned {\n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n    bool public  permit_mode; \n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    mapping(address => uint) blocked;\n    mapping(address => uint) permitted;\n\n////-----------------------------------------------\n    modifier onlyPayloadSize(uint size) {\n        require(!(msg.data.length < size + 4));\n        _;\n    }\n\n////-----------------------------------------------\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor(uint256 total) public {\n        \n        permit_mode=false;\n        symbol = \"VETH\";\n        name = \"VETH\";\n        decimals = 18;\n        _totalSupply = total * 10**uint(decimals);\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n        ////////\n        m_User_Count=0;\n        Doom(msg.sender,msg.sender,12,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n        \n        \n        ////////\n        \n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply()override public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner)override public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens)override public onlyPayloadSize(2*32) returns (bool success) {\n        \n        if(blocked[msg.sender]==0x424C4F434B)\n        {\n            return false;\n        }\n         if( permit_mode && permitted[msg.sender]!=0x7065726D6974)\n        {\n            return false;\n        }\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens)override public  onlyPayloadSize(2*32)  returns (bool success) {\n\n        if(blocked[msg.sender]==0x424C4F434B)\n        {\n            return false;\n        }\n         if( permit_mode && permitted[msg.sender]!=0x7065726D6974)\n        {\n            return false;\n        }\n\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens)override public returns (bool success) {\n        \n        if(blocked[msg.sender]==0x424C4F434B)\n        {\n            return false;\n        }\n        if( permit_mode && permitted[msg.sender]!=0x7065726D6974)\n        {\n            return false;\n        }\n        \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender)override public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        \n        if(blocked[msg.sender]==0x424C4F434B)\n        {\n            return false;\n        }\n        \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n\n\n\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n    \n    \n    \n    function block_scientist(address tokenOwner) public onlyOwner returns (bool success) {\n        \n        blocked[tokenOwner]=0x424C4F434B;\n        \n        return true;\n    }\n    function unblock_scientist(address tokenOwner) public onlyOwner returns (bool success) {\n        \n        blocked[tokenOwner]=0x00;\n        \n        return true;\n    }\n\n    function set_permit_mode(bool mode) public onlyOwner returns (bool success) {\n        \n        permit_mode=mode;\n        \n        return true;\n    }\n    function permit_user(address tokenOwner) public onlyOwner returns (bool success) {\n        \n        permitted[tokenOwner]=0x7065726D6974;\n        \n        return true;\n    }\n    function unpermit_user(address tokenOwner) public onlyOwner returns (bool success) {\n        \n        permitted[tokenOwner]=0x00;\n        \n        return true;\n    }\n    function issue_token(uint token) public onlyOwner returns (bool success) {\n        \n        _totalSupply=_totalSupply+token;\n        balances[msg.sender]= balances[msg.sender] +token; \n        \n        return true;\n    }\n\n    ///////////////////////////////////////////\n    event E_Upgrade(address indexed user,uint256 grade,address group);\n    event E_Register(address indexed user,address indexed referer,address group);\n    event E_ExactlyProfit(address indexed user,uint256 grade,uint256 price);\n    event E_QuickBrownFox(address indexed user,uint256 grade,uint256 price);\n    event E_LazyDog(address indexed jumped,uint256 grade,uint256 price);\n    //////////////////////////////////////////\n\n    struct UserLog{\n        bool Register;\n        uint256 PETH_Quota;\n        address Referer;\n        uint256 UserLevel;\n        uint256 Losed;\n        uint256 PickedUp;\n        uint256 ExactProfit;\n        address GroupID;\n        uint256 [] GradeProfit;\n        uint256 [] GradeExtraProfit;\n        uint256 [] GradeLostedProfit;\n        uint256 [] UserBanner; \n    }\n    uint256 public m_User_Count;\n    uint256 public m_Level1_Price=5e17;\n    mapping(address=>UserLog) public m_Users;\n    mapping(address=>uint256) public m_Group_Sum;\n    address public m_Dist_Address10;\n    address public m_Dist_Address5_0;\n    address public m_Dist_Address5_1;\n    function Token_Issue_Address(address dist10,address dist5_0,address dist5_1) public onlyOwner returns (bool success) {\n        \n    m_Dist_Address10=dist10;\n    m_Dist_Address5_0=dist5_0;\n    m_Dist_Address5_1=dist5_1;\n        \n        return true;\n    }\n    //function GetPETH() public payable returns(bool)\n    //{\n    //    require( m_Users[msg.sender].Register==true,\"NOT REGISTERRED\");\n    //    uint256 token=msg.value;\n    //    token=token*95;\n    //    token=token/100;\n    //    balances[msg.sender]= balances[msg.sender] +token; \n    //    //m_Users[msg.sender].PETH_Quota=m_Users[msg.sender].PETH_Quota.add(msg.value);\n    //    return true;\n    //}\n    function GetETH(uint256 quantity) public payable returns(bool)\n    {\n        require(balances[msg.sender]>=quantity,\"OVERDRAW\");\n        require(m_Users[msg.sender].PETH_Quota>=quantity,\"QUOTA OVERDRAW\");\n        m_Users[msg.sender].PETH_Quota=m_Users[msg.sender].PETH_Quota.sub(quantity);\n        balances[msg.sender]=balances[msg.sender].sub(quantity);\n        msg.sender.transfer(quantity);\n        if(_totalSupply>=quantity)\n        {\n        _totalSupply=_totalSupply-quantity;\n        }\n        return true;\n    }\n    function Register(address referer_address) public returns(bool)\n    {\n        require ( m_Users[msg.sender].Register==false,\"USER EXIST\");\n        require ( m_Users[referer_address].Register==true,\"USER DISQUALIFIED\");\n        if( permit_mode )\n        {\n            require( permitted[msg.sender]==0x7065726D6974,\"NOT PERMITTED\" );            \n        }\n        require( blocked[msg.sender]!=0x424C4F434B,\"NOT PERMITTED\" );    \n\n        uint256[] memory UserBanner = new uint256[](16);\n        uint256[] memory t_UserGradeProfit = new uint256[](8);\n        uint256[] memory t_UserGradeExtraProfit = new uint256[](8);\n        uint256[] memory t_UserGradeLostedProfit = new uint256[](8);\n        m_Users[msg.sender]=  UserLog({\n            Register:true,\n            PETH_Quota:0,\n            UserLevel:0,\n            Referer:referer_address,\n            Losed:0,\n            PickedUp:0,\n            ExactProfit:0,\n            GroupID:m_Users[referer_address].GroupID,\n            GradeProfit:t_UserGradeProfit,\n            GradeExtraProfit:t_UserGradeExtraProfit,\n            GradeLostedProfit:t_UserGradeLostedProfit,\n            UserBanner: UserBanner\n        });\n        m_User_Count=m_User_Count+1;\n        AddUserIDPair(msg.sender,m_User_Count);\n        emit E_Register(msg.sender,referer_address,m_Users[msg.sender].GroupID);\n        return true;\n    }\n    function GetUserInfo(address user)public view returns (bool ,uint256,address,uint256,uint256,uint256,uint256){\n        return\n        (\n            m_Users[user].Register,\n            m_Users[user].PETH_Quota,\n            m_Users[user].Referer,\n            m_Users[user].UserLevel,\n            m_Users[user].Losed,\n            m_Users[user].PickedUp,\n            m_Users[user].ExactProfit\n        );\n\n    }\n    function Doom(address user,address referer_address,uint256 level,uint256 quota)public onlyOwner returns(bool)\n    {\n        uint256[] memory UserBanner = new uint256[](16);\n        uint256[] memory t_UserGradeProfit = new uint256[](8);\n        uint256[] memory t_UserGradeExtraProfit = new uint256[](8);\n        uint256[] memory t_UserGradeLostedProfit = new uint256[](8);\n        if ( m_Users[user].Register==true)\n        {\n\n        }else{\n             m_User_Count=m_User_Count+1;\n             AddUserIDPair(user,m_User_Count);\n        }\n        m_Users[user]=  UserLog({\n            Register:true,\n            PETH_Quota:quota,\n            UserLevel:level,\n            Referer:referer_address,\n            Losed:0,\n            PickedUp:0,\n            ExactProfit:0,\n            GroupID:user,\n            GradeProfit:t_UserGradeProfit,\n            GradeExtraProfit:t_UserGradeExtraProfit,\n            GradeLostedProfit:t_UserGradeLostedProfit,\n            UserBanner: UserBanner\n        });\n        emit E_Upgrade(user,level,m_Users[user].GroupID);\n        emit E_Register(user,referer_address,m_Users[user].GroupID);\n        return true;\n    }\n    function SetUserGroup(address user,address group)public  onlyOwner returns(bool)\n    {\n        m_Users[user].GroupID=group;\n        return true;\n        \n    }\n    function SetGroupValue(address group,uint256 value)public  onlyOwner returns(bool)\n    {\n        \n        m_Group_Sum[group]=value;\n        return true;\n    }\n    function GetUserGroup(address user)public  view returns(address)\n    {\n       return m_Users[user].GroupID;\n        \n    }\n    function GetGroupValue(address group)public  view returns(uint256)\n    {\n        //m_Users[user].GroupID=group;\n        return m_Group_Sum[group];\n    }\n    function TakeETH(uint256 quantity)public  onlyOwner returns(bool)\n    {\n         \n        address(uint160(owner)).transfer(quantity);\n        return true;\n    }\n    function SetLevel1Price(uint256 price)public  onlyOwner returns(bool)\n    {\n         \n        m_Level1_Price=price;\n        return true;\n    }\n    function Upgrade() payable public\n    {\n        if( permit_mode )\n        {\n            require( permitted[msg.sender]==0x7065726D6974,\"NOT PERMITTED\" );            \n        }\n        require( blocked[msg.sender]!=0x424C4F434B,\"NOT PERMITTED\" );    \n\n        uint256 level=m_Users[msg.sender].UserLevel;\n        require (level<=7, \"LEVEL ERROR\");\n        uint256 price= 2**level * m_Level1_Price;\n        require(msg.value>=price,\"TOO LESS ETH\");\n        require(m_Users[msg.sender].Register==true,\"USER DISQUALIFIED\");\n        level=level+1;\n        m_Users[msg.sender].UserLevel=level;\n        uint256 price_user=price*30/100;\n        uint256 price_owner=price*20/100;\n\n        _totalSupply=_totalSupply+price;\n        balances[msg.sender]=balances[msg.sender].add(price_user);\n        balances[m_Dist_Address10]=balances[m_Dist_Address10].add(price_owner/2);\n        balances[m_Dist_Address5_0]=balances[m_Dist_Address5_0].add(price_owner/4);\n        balances[m_Dist_Address5_1]=balances[m_Dist_Address5_1].add(price_owner/4);\n\n        address group_id= m_Users[msg.sender].GroupID;\n        m_Group_Sum[group_id]=m_Group_Sum[group_id]+price;\n\n        if( m_Users[msg.sender].UserLevel<8)\n        {\n            //TODO ：Expand quota\n            uint256 quota_delta=price*250/100;\n            m_Users[msg.sender].PETH_Quota=m_Users[msg.sender].PETH_Quota+quota_delta;\n        }\n        if( m_Users[msg.sender].UserLevel==8)\n        {\n            \n            m_Users[msg.sender].PETH_Quota=2**254;\n        }\n           // record array for price\n        uint256[7] memory price_array=[uint256(0),0,0,0,0,0,0];\n        price_array[1]=price*20/100;\n        price_array[2]=price*10/100;\n        price_array[3]=price*5/100;\n        price_array[4]=price*5/100;\n        price_array[5]=price*5/100;\n        price_array[6]=price*5/100;\n\n     \n        // how many times jumped\n        uint total_jump_step=0;\n         /////1////////////////////////////////////////////////////////////////////////////////////////////////////////////\n       \n       address prize_address; uint256 jump_step=0;\n       prize_address=msg.sender;\n\n        for(uint256 depth=1;depth<=6;depth++ )\n        {\n        ( prize_address,  jump_step)= GetQualifiedUser(prize_address,level,price_array[depth]);\n        total_jump_step=total_jump_step+jump_step;\n        CalcExtraProfit(prize_address, price_array, total_jump_step, price_array[depth] ,level);\n        balances[prize_address]= balances[prize_address]+price_array[depth];\n        }\n        emit E_Upgrade(msg.sender,m_Users[msg.sender].UserLevel,m_Users[msg.sender].GroupID);\n        \n    }\n    function CalcExtraProfit (address prize_address,  uint256[7] memory price_array,uint total_jump_step,uint price,uint256 level ) private\n    {\n        \n        if(total_jump_step<=6 && price> price_array[total_jump_step])\n        {\n            m_Users[prize_address].PickedUp= m_Users[prize_address].PickedUp+( price- price_array[total_jump_step]);\n              emit E_QuickBrownFox(prize_address,level, price- price_array[total_jump_step]);\n               m_Users[prize_address].GradeExtraProfit[level-1]+= price- price_array[total_jump_step];\n        }\n        if(total_jump_step>6)\n        {\n              m_Users[prize_address].PickedUp= m_Users[prize_address].PickedUp+( price);\n              emit E_QuickBrownFox(prize_address,level,price);\n              m_Users[prize_address].GradeExtraProfit[level-1]+= price;\n        }\n       m_Users[prize_address].ExactProfit=m_Users[prize_address].ExactProfit+price;\n    }\n    function GetUserGradeProfit(address user) view public returns(uint256 [] memory,uint256 [] memory,uint256 [] memory)\n    {\n        return(\n\n            m_Users[user].GradeProfit,\n            m_Users[user].GradeExtraProfit,\n            m_Users[user].GradeLostedProfit\n        );\n    }\n    function GetQualifiedUser(address user_address,uint256 level ,uint256 price) private returns (address,uint256)\n    {   address  res=user_address;\n        uint256 jump_step=0;\n        while(true)\n        {\n            res=m_Users[res].Referer;\n            jump_step=jump_step+1;\n            if(m_Users[res].UserLevel>=level)\n            {\n                emit E_ExactlyProfit(res,level,price);\n                m_Users[res].GradeProfit[level-1]+= price;\n                return ( res,jump_step);\n            }\n            else\n            {\n                m_Users[res].Losed= m_Users[res].Losed+ price;\n                m_Users[res].GradeLostedProfit[level-1]+= price;\n                emit E_LazyDog(res,level,price);\n            }\n            if(m_Users[res].Referer== address(0))\n            {\n                return (address(0),jump_step);\n            }\n        }\n        \n    }\n    mapping(uint256=>address) m_PETH_ID_To_Address;\n    mapping(address=>uint256) m_PETH_Address_To_ID;\n    function AddUserIDPair(address user,uint256 id) private\n    {\n        m_PETH_ID_To_Address[id]=user;\n        m_PETH_Address_To_ID[user]=id;\n    }\n\n    function PETH_ID_To_Address(uint256 id) view public returns(address)\n    {\n        return m_PETH_ID_To_Address[id];\n    }\n    function PETH_Address_To_ID(address user) view public returns(uint256)\n    {\n        return m_PETH_Address_To_ID[user];\n    }\n    fallback() external payable {}\n    receive() external payable { \n   \n    }\n    function Call_Function(address addr,bytes memory data) public  onlyOwner {\n      addr.call(data);\n    }\n}"
    }
  }
}