{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface external1 {\n  function TransferGenesis ( address _from, address _to ) external;  \n  function setOwnershipTransferContract() external;\n}\n\ninterface genesisCalls {\n  function AllowAddressToDestroyGenesis ( address _from, address _address ) external;\n  function AllowReceiveGenesisTransfers ( address _from ) external;\n  function BurnTokens ( address _from, uint256 mneToBurn ) external returns ( bool success );\n  function RemoveAllowAddressToDestroyGenesis ( address _from ) external;\n  function RemoveAllowReceiveGenesisTransfers ( address _from ) external;\n  function RemoveGenesisAddressFromSale ( address _from ) external;\n  function SetGenesisForSale ( address _from, uint256 weiPrice ) external;\n  function TransferGenesis ( address _from, address _to ) external;\n  function UpgradeToLevel2FromLevel1 ( address _address, uint256 weiValue ) external;\n  function UpgradeToLevel3FromDev ( address _address ) external;\n  function UpgradeToLevel3FromLevel1 ( address _address, uint256 weiValue ) external;\n  function UpgradeToLevel3FromLevel2 ( address _address, uint256 weiValue ) external;\n  function availableBalanceOf ( address _address ) external view returns ( uint256 Balance );\n  function balanceOf ( address _address ) external view returns ( uint256 balance );\n  function deleteAddressFromGenesisSaleList ( address _address ) external;\n  function isAnyGenesisAddress ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel1 ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel2 ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel2Or3 ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel3 ( address _address ) external view returns ( bool success );\n  function ownerGenesis (  ) external view returns ( address );\n  function ownerGenesisBuys (  ) external view returns ( address );\n  function ownerMain (  ) external view returns ( address );\n  function ownerNormalAddress (  ) external view returns ( address );\n  function ownerStakeBuys (  ) external view returns ( address );\n  function ownerStakes (  ) external view returns ( address );\n  function setGenesisAddress ( address _from, address _address ) external;\n  function setGenesisAddressArray ( address _from, address[] calldata _addressList ) external;\n  function setGenesisAddressDevArray ( address _from, address[] calldata _addressList ) external;\n  function setGenesisCallerAddress ( address _caller ) external returns ( bool success );\n  function setOwnerGenesisBuys (  ) external;\n  function setOwnerMain (  ) external;\n  function setOwnerNormalAddress (  ) external;\n  function setOwnerStakeBuys (  ) external;\n  function setOwnerStakes (  ) external;\n  function setOwnerBaseTransfers (  ) external;\n  function setOwnerExternal1 (  ) external;\n  function stopSetup ( address _from ) external returns ( bool success );\n}\n\ninterface minereum {\n  function Payment () payable external;\n}\n\ncontract Level1OwnershipExchange\n{\n\nexternal1 public ext1;\ngenesisCalls public gn;\n\nminereum public mneAddress;\n\t\nfunction reloadExternal1(address _address) public { if (msg.sender == updaterAddress)\t{ext1 = external1(_address); ext1.setOwnershipTransferContract(); } else revert();}\n\nfunction reloadGenesis(address _address) public { if (msg.sender == updaterAddress)\t{gn = genesisCalls(_address); } else revert();}\n\nfunction reloadFee(uint _fee) public { if (msg.sender == updaterAddress)\t{ fee = _fee; } else revert();}\n\naddress public updaterAddress = 0x0000000000000000000000000000000000000000;\nfunction setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}\n\nconstructor(address _genesisCallsAddress, address _external1Address) public {\nsetUpdater();\next1 = external1(_external1Address); \next1.setOwnershipTransferContract();\ngn = genesisCalls(_genesisCallsAddress); \nmneAddress = minereum(0x426CA1eA2406c07d75Db9585F22781c096e3d0E0);\n}\t\n\n\nmapping (address => bool) public isLevel1SetForOwnershipSale; \nmapping (address => uint256) public level1OwnewshipSalePrice; \nmapping (address => bool) public wasEverSetForSale; \nmapping (address => bool) public wasEverRemovedForSale; \nuint public fee = 20;\nuint public countSales = 0;\nuint public countSetForSale = 0;\nuint public countRemoveForSale = 0;\n\nevent Level1OwnershipTransfer(address indexed sellet, address indexed buyer);\n\nfunction setLevel1AddressForOwnershipSale(uint weiPrice) public {\n\tif (weiPrice == 0) revert('Price cannot be 0');\n\t\n\tif (!gn.isGenesisAddressLevel1(msg.sender)) revert('Not level 1');\n\t\n\tif (isLevel1SetForOwnershipSale[msg.sender]) revert('Already Set For Ownership Sale');\n\t\n\tisLevel1SetForOwnershipSale[msg.sender] = true;\n\tlevel1OwnewshipSalePrice[msg.sender] = weiPrice;\t\n\tcountSetForSale++;\n\twasEverSetForSale[msg.sender] = true;\n}\n\nfunction removeLevel1AddressForOwnershipSale() public {\n\tif (isLevel1SetForOwnershipSale[msg.sender])\n\t{\n\t\tisLevel1SetForOwnershipSale[msg.sender] = false;\n\t\tlevel1OwnewshipSalePrice[msg.sender] = 0;\t\n\t\tcountRemoveForSale++;\n\t\twasEverRemovedForSale[msg.sender] = true;\n\t}\n\telse\n\t{\n\t\trevert('Adderss not set for ownership sale');\n\t}\n}\n\nfunction getIsLevel1SetForOwnershipSale(address _address) public view returns (bool) {\n\treturn isLevel1SetForOwnershipSale[_address];\t\n}\n\nfunction getLevel1OwnershipSalePrice(address _address) public view returns (uint) {\n\treturn level1OwnewshipSalePrice[_address];\t\n}\n\nfunction getLevel1OwnershipSalePriceWithFee(address _address) public view returns (uint) {\n\tuint feeAmount = level1OwnewshipSalePrice[_address] * fee / 100;\n\treturn level1OwnewshipSalePrice[_address] + feeAmount;\t\n}\n\nfunction BuyLevel1Ownership(address _seller) payable public { \n\tif (!isLevel1SetForOwnershipSale[_seller]) revert('Address Not Set For Ownership Sale');\n\tif (level1OwnewshipSalePrice[_seller] == 0) revert('Price cannot be 0');\n\n\tif \t(msg.value == getLevel1OwnershipSalePriceWithFee(_seller))\n\t{\t\n\t\text1.TransferGenesis(_seller, msg.sender);\t\t\n\t\tisLevel1SetForOwnershipSale[_seller] = false;\n\t\tlevel1OwnewshipSalePrice[_seller] = 0;\t\t\n\t\t\n\t\tmneAddress.Payment.value(getLevel1OwnershipSalePriceWithFee(_seller) - getLevel1OwnershipSalePrice(_seller))();\n\t\t\n\t\tif (!payable(_seller).send(getLevel1OwnershipSalePrice(_seller))) revert('Error While Executing Payment.');\t\n\t\t\n\t\temit Level1OwnershipTransfer(_seller, msg.sender);\n\t\tcountSales++;\n\t}\n\telse\n\t{\n\t\trevert('Value not correct');\n\t}\n}\n}"
    }
  }
}