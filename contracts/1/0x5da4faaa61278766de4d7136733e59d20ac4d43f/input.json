{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/EtherWallet.sol": {
      "content": "pragma solidity ^0.6.4;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract EtherWallet is Ownable {\r\n\r\n\r\n    constructor (address payable _owner,address _agent, address _switchWalletAdmin) public {\r\n        owner = _owner;\r\n        contractAgent = _agent;\r\n        switchWalletAdmin = _switchWalletAdmin;\r\n\r\n    }\r\n    \r\n    receive() external payable { \r\n        \r\n      \r\n        \r\n     }\r\n    \r\n    \r\n    function sendEthers(uint amount, address payable receiver) onlyOwner public returns (uint,address){\r\n       uint etherBalance =  address(this).balance;\r\n       require(etherBalance != 0, \"EtherWallet: ether balance cannot be zero\");\r\n       require(etherBalance>=amount,\"EtherWallet: insufficient balance\");\r\n       receiver.transfer(amount);\r\n       return (amount,owner);\r\n    }\r\n    \r\n    function etherBalanceOf() public view  returns (uint amount){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    \r\n     function sendTokens(uint amount,address payable receiver,address tokenAddress)onlyOwner public returns (uint,address,address payable){\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance != 0, \"EtherWallet: token balance cannot be zero\");\r\n        require(tokenBalance>=amount,\"EtherWallet: insufficient balance\");\r\n        token.transfer(receiver, amount);\r\n       return (amount,address(this),receiver);\r\n    }\r\n    \r\n    \r\n    function tokenBalanceOf(address tokenAddress) external view  returns (uint amount){\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n     function tokenDecimals(address tokenAddress) public view  returns (uint8 decimals){\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.decimals();\r\n    }\r\n}"
    },
    "browser/IERC20.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    },
    "browser/Ownable.sol": {
      "content": "pragma solidity ^0.6.4;\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address payable public owner;\r\n  address public contractAgent;\r\n  address public switchWalletAdmin;\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n      require(msg.sender == owner || msg.sender==contractAgent, \"Unauthorized access to contract\");\r\n\r\n      _;\r\n  }\r\n  \r\n  modifier onlySwitchWalletOrOwner() {\r\n    \r\n     require(msg.sender == owner || msg.sender==contractAgent || msg.sender == switchWalletAdmin, \"Unauthorized access to contract\");\r\n      _;\r\n  }\r\n  \r\n  \r\n\r\n  function transferOwnership( address payable newOwner) public onlySwitchWalletOrOwner {\r\n    if (newOwner != address(0))\r\n    { \r\n        owner = newOwner;\r\n        \r\n        \r\n        \r\n    }\r\n  }\r\n  \r\n  function transferAgent( address payable newAgent) public onlySwitchWalletOrOwner {\r\n    if (newAgent != address(0))\r\n    { \r\n        contractAgent = newAgent;\r\n        \r\n        \r\n        \r\n    }\r\n  }\r\n\r\n}"
    }
  }
}