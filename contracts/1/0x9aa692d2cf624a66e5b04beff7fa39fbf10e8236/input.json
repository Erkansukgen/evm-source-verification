{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ChainlinkKeep3rV1Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// File: @chainlink/contracts/src/v0.6/Owned.sol\n\npragma solidity 0.6.12;\n\n/**\n * @title The Owned contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract Owned {\n\n  address public owner;\n  address private pendingOwner;\n\n  event OwnershipTransferRequested(\n    address indexed from,\n    address indexed to\n  );\n  event OwnershipTransferred(\n    address indexed from,\n    address indexed to\n  );\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address _to)\n    external\n    onlyOwner()\n  {\n    pendingOwner = _to;\n\n    emit OwnershipTransferRequested(owner, _to);\n  }\n\n  /**\n   * @dev Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership()\n    external\n  {\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = owner;\n    owner = msg.sender;\n    pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @dev Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Only callable by owner\");\n    _;\n  }\n\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/IKeep3rV1.sol\n\ninterface IKeep3rV1 {\n  function activate(address bonding) external;\n  function bond(address bonding, uint amount) external;\n  function unbond(address bonding, uint amount) external;\n  function withdraw(address bonding) external;\n}\n\n// File: contracts/IKeep3rV1Oracle.sol\n\ninterface IKeep3rV1Oracle {\n  function work() external;\n  function workForFree() external;\n  function workable() external view returns (bool);\n  function workable(address pair) external view returns (bool);\n}\n\n// File: contracts/ChainlinkKeep3rV1Oracle.sol\n\ncontract ChainlinkKeep3rV1Oracle is Owned {\n  IKeep3rV1 public KP3R;\n  IKeep3rV1Oracle public KP3RV1Oracle;\n  mapping(address => bool) private authorizedNodes;\n\n  constructor(address _keep3r, address _keep3rV1Oracle) public {\n    updateKeep3r(_keep3r);\n    updateKeep3rOracle(_keep3rV1Oracle);\n  }\n\n  function work() external onlyAuthorized() {\n    KP3RV1Oracle.work();\n  }\n\n  function workForFree() external onlyAuthorized() {\n    KP3RV1Oracle.workForFree();\n  }\n\n  function workable() external view returns (bool) {\n    return KP3RV1Oracle.workable();\n  }\n\n  function workable(address _pair) external view returns (bool) {\n    return KP3RV1Oracle.workable(_pair);\n  }\n\n  function bond(address _bonding, uint256 _amount) external onlyOwner() {\n    KP3R.bond(_bonding, _amount);\n  }\n\n  function activate(address _bonding) external onlyOwner() {\n    KP3R.activate(_bonding);\n  }\n\n  function unbond(address _bonding, uint256 _amount) external onlyOwner() {\n    KP3R.unbond(_bonding, _amount);\n  }\n\n  function withdraw(address _bonding) external onlyOwner() {\n    KP3R.withdraw(_bonding);\n  }\n\n  function withdrawFrom(IERC20 _token, address _recipient, uint256 _amount) external onlyOwner() {\n    _token.transfer(_recipient, _amount);\n  }\n\n  function setAuthorization(address _node, bool _authorized) external onlyOwner() {\n    authorizedNodes[_node] = _authorized;\n  }\n\n  function updateKeep3r(address _keep3r) public onlyOwner() {\n    KP3R = IKeep3rV1(_keep3r);\n  }\n\n  function updateKeep3rOracle(address _keep3rV1Oracle) public onlyOwner() {\n    KP3RV1Oracle = IKeep3rV1Oracle(_keep3rV1Oracle);\n  }\n\n  modifier onlyAuthorized() {\n    require(authorizedNodes[msg.sender] || msg.sender == owner, \"Not an authorized node\");\n    _;\n  }\n}\n"
    }
  }
}