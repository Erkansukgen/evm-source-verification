{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Incentives.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\n// iRUNE Interface\ninterface iRUNE {\n    function transfer(address, uint) external returns (bool);\n    function transferTo(address, uint) external returns (bool);\n}\n\n// Sushiswap Interface\ninterface iPair {\n    function sync() external;\n}\n\ncontract Incentives {\n    address public RUNE = 0x3155BA85D5F96b2d030a4966AF206230e46849cb;\n    event Deposited(address indexed pair, uint amount);\n\n    constructor() {}\n\n    // #### DEPOSIT ####\n\n    // Deposit and sync\n    function depositIncentives(address pair, uint amount) public {\n        _getRune(amount);\n        _depositAndSync(pair, amount);\n    }\n    // Deposit and sync batches\n    function depositBatchIncentives(address[] memory pairs, uint[] memory amounts) public {\n        uint _amountToGet = 0;\n        for(uint i = 0; i < pairs.length; i++){\n            _amountToGet += amounts[i];\n        }\n        _getRune(_amountToGet);\n        for(uint i = 0; i < pairs.length; i++){\n            _depositAndSync(pairs[i], amounts[i]);\n        }\n    }\n\n    // #### HELPERS ####\n\n    function _toWei(uint _amount) internal pure returns(uint){\n        return _amount * 10**18;\n    }\n\n    function _getRune(uint _amount) internal {\n        iRUNE(RUNE).transferTo(address(this), _toWei(_amount));\n    }\n\n    function _depositAndSync(address _pair, uint _amount) internal {\n        iRUNE(RUNE).transfer(_pair, _toWei(_amount));\n        iPair(_pair).sync();\n        emit Deposited(_pair, _amount);\n    }\n\n}"}}}