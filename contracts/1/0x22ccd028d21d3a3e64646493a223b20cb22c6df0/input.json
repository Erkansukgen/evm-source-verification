{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BridgeAssist.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n    function burnFrom(address from, uint256 amount) external returns (bool);\r\n}\r\ncontract BridgeAssist {\r\n    address public owner;\r\n    IERC20 public TKN;\r\n\r\n    modifier restricted {\r\n        require(msg.sender == owner, \"This function is restricted to owner\");\r\n        _;\r\n    }\r\n    \r\n    event Collect(address indexed sender, uint256 amount);\r\n    event Dispense(address indexed sender, uint256 amount);\r\n    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function collect(address _sender) public restricted returns (uint256 amount) {\r\n        amount = TKN.allowance(_sender, address(this));\r\n        require(amount > 0, \"No amount approved\");\r\n        require(\r\n            TKN.burnFrom(_sender, amount),\r\n            \"Transfer failure. Make sure that your balance is not lower than the allowance you set\"\r\n        );\r\n        emit Collect(_sender, amount);\r\n    }\r\n\r\n    function dispense(address _sender, uint256 _amount) public restricted returns (bool success) {\r\n        require(TKN.mint(_sender, _amount), \"Dispense failure. Contact contract owner\");\r\n        emit Dispense(_sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public restricted {\r\n        require(_newOwner != address(0), \"Invalid address: should not be 0x0\");\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    constructor(IERC20 _TKN) {\r\n        TKN = _TKN;\r\n        owner = msg.sender;\r\n    }\r\n}"
    }
  }
}