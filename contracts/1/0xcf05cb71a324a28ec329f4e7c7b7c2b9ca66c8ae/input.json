{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/frontrun.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.8;\r\n\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IERC20.sol\";\r\n\r\nabstract contract WETH9_ \r\n{\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n    \r\n    function deposit() virtual external payable;\r\n    function withdraw(uint wad) virtual external;\r\n    function totalSupply() virtual external view returns (uint);\r\n    \r\n    function approve(address guy, uint wad) virtual external returns (bool) ;\r\n    function transfer(address dst, uint wad) virtual external returns (bool) ;\r\n    function transferFrom(address src, address dst, uint wad) virtual external returns (bool);\r\n}\r\n\r\ncontract FrontRun {\r\n  address payable manager;\r\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //  Uniswap Router Address\r\n  address internal constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; //  WETH Mainet Address 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n  WETH9_ internal WETH;\r\n  IUniswapV2Router02 public uniswapRouter;\r\n\r\n  constructor() public {\r\n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n    WETH = WETH9_(WETH_ADDRESS);\r\n    manager = msg.sender;\r\n  }\r\n  modifier restricted() {\r\n      require(msg.sender == manager, \"manager allowed only\");\r\n      _;\r\n  }\r\n  function kill() external restricted {\r\n    selfdestruct(manager);\r\n  }\r\n  function drainToken(address tokenAddress) external restricted {   // Collect all Token saved on the contract \r\n    IERC20 token = IERC20(tokenAddress);\r\n    uint tokenBalance = token.balanceOf(address(this));\r\n    token.transfer(manager, tokenBalance);\r\n  }\r\n  function Buy(uint amountOut, uint amountInMax, uint deadline, address tokenAddress) external payable restricted {\r\n    uniswapRouter.swapTokensForExactTokens(amountOut, amountInMax, getPathForETHtoToken(tokenAddress), address(this), deadline);\r\n  }\r\n  function Sell(uint amountIn, uint amountOutMin, uint deadline, address tokenAddress) external payable restricted {\r\n    uniswapRouter.swapExactTokensForTokens(amountIn, amountOutMin, getPathForTokentoETH(tokenAddress), address(this), deadline);\r\n  }\r\n  function getPathForETHtoToken(address tokenAddress) private view returns (address[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = uniswapRouter.WETH();\r\n    path[1] = tokenAddress;\r\n    \r\n    return path;\r\n  }\r\n  function getPathForTokentoETH(address tokenAddress) private view returns (address[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = tokenAddress;\r\n    path[1] = uniswapRouter.WETH();\r\n    \r\n    return path;\r\n  }\r\n  function approve(uint tokenAmount, address tokenAddress) external restricted {\r\n    IERC20 token = IERC20(tokenAddress);\r\n    token.approve(address(uniswapRouter), tokenAmount);\r\n  }\r\n  function balanceOf(address tokenAddress) view public returns (uint) {\r\n    return IERC20(tokenAddress).balanceOf(address(this));\r\n  }\r\n  function wrap() public payable restricted {\r\n    if (msg.value != 0) {\r\n      WETH.deposit{value : msg.value}();\r\n      WETH.transfer(address(this), msg.value);\r\n    }\r\n  }\r\n  function unwrap(uint amount) public payable restricted {\r\n    if (amount != 0) {\r\n      WETH.withdraw(amount);\r\n      msg.sender.transfer(address(this).balance);\r\n    }\r\n  }\r\n  // important to receive ETH\r\n  receive() payable external {}\r\n}"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    }
  }
}