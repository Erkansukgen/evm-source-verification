{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/3_Ballot.sol":{"content":"// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\t\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n  \r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n  \r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n  \r\n\tfunction pause() onlyOwner whenNotPaused public {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\r\n\t\r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Burn(address indexed burner, uint256 value);\r\n\t\r\n\tevent DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n    event AddedBlackList(address _user);\r\n    event RemovedBlackList(address _user);\r\n}\r\n\r\ncontract ERC20Basic is IERC20,Pausable {\r\n    \r\n\tusing SafeMath for uint256;\r\n    \r\n\tmapping(address => uint256) balances;\r\n\t\r\n\tmapping (address => bool) public isBlackListed;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\t\r\n    uint256 totalSupply_;\r\n\t\r\n    function totalSupply() public override view returns (uint256) {\r\n       return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\t\r\n    function transfer(address receiver, uint256 numTokens) public whenNotPaused override returns (bool) {\r\n        require(numTokens <= balances[msg.sender], \"transfer amount exceeds balance\");\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\t\r\n    function transferFrom(address sender, address receiver, uint256 numTokens) public whenNotPaused override returns (bool) {\r\n        require(!isBlackListed[sender]);\r\n\t\trequire(numTokens <= balances[sender], \"transfer amount exceeds balance\");\r\n        require(numTokens <= allowed[sender][msg.sender]);\r\n        balances[sender] = balances[sender].sub(numTokens);\r\n        allowed[sender][msg.sender] = allowed[sender][msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction burn(uint256 _value) public whenNotPaused{\r\n\t    require(!isBlackListed[msg.sender]);\r\n        require(_value <= balances[msg.sender]);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n\t\r\n\tfunction getBlackListStatus(address _maker) public view returns (bool) {\r\n        return isBlackListed[_maker];\r\n    }\r\n\t\r\n\tfunction addBlackList (address _evilUser) public onlyOwner {\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList (address _clearedUser) public onlyOwner {\r\n        isBlackListed[_clearedUser] = false;\r\n        emit RemovedBlackList(_clearedUser);\r\n    }\r\n\t\r\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\r\n        require(isBlackListed[_blackListedUser]);\r\n        uint dirtyFunds = balanceOf(_blackListedUser);\r\n        balances[_blackListedUser] = 0;\r\n        totalSupply_ -= dirtyFunds;\r\n        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\r\n    }\r\n}\r\n\r\ncontract IND is ERC20Basic {\r\n    string public constant name = \"INDIA COIN\";\r\n    string public constant symbol = \"IND\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 1400000000 * 10**18;\r\n\tconstructor(address _owner){\r\n\t   owner = _owner;\r\n       totalSupply_ = INITIAL_SUPPLY;\r\n       balances[_owner] = INITIAL_SUPPLY;\r\n\t   emit Transfer(address(0), _owner, INITIAL_SUPPLY);\r\n   }\r\n}"}}}