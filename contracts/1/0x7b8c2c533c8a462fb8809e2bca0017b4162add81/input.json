{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ClaimLOX.sol":{"content":"/**\r\n *Submitted for verification at Etherscan.io on 2022-01-04\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface NFTContract{\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface TokenContract {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ClaimLOX {\r\n    address private admin;\r\n\r\n    NFTContract private nftContract;\r\n    TokenContract private tokenContract;\r\n\r\n    uint256 private StartTime;\r\n    uint256 private RewardOneHour = 1*10**14; //0.0001 * multiplier = 0.001 lox\r\n\r\n    mapping(address=>bool) private isNotAllowed;\r\n    mapping(uint256=>uint256) private lastTime;\r\n\r\n    constructor(address _nftAddress, address _tokenAddress, address _admin){\r\n        nftContract = NFTContract(_nftAddress);\r\n        tokenContract = TokenContract(_tokenAddress);\r\n        admin = _admin;\r\n        StartTime = block.timestamp;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender==admin,\"only admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    function Claim(uint256 _id) external {\r\n        require(!isNotAllowed[msg.sender], \"Sorry, you are not allowed to claim Reward\");\r\n        require(nftContract.ownerOf(_id) == msg.sender,\"You are not owner of this nft\");\r\n\r\n        uint256 _tokenReward = getMultiplier(msg.sender)*AvailableReward(_id);\r\n        lastTime[_id] = block.timestamp;\r\n        require(tokenContract.transfer(msg.sender,_tokenReward),\"token not Transfered succefully\");\r\n    }\r\n\r\n    function ClaimMultiple(uint256[] memory _ids) external {\r\n        require(!isNotAllowed[msg.sender], \"Sorry, you are not allowed to claim Reward\");\r\n        for(uint256 i = 0; i < _ids.length;i++) {\r\n            require(nftContract.ownerOf(_ids[i]) == msg.sender,\"You are not owner of this nft\");\r\n        }\r\n        uint256 _tokenReward = 0;\r\n        for(uint256 i = 0; i < _ids.length;i++){\r\n            _tokenReward += AvailableReward(_ids[i]);\r\n            lastTime[_ids[i]] = block.timestamp;\r\n        }\r\n        require(tokenContract.transfer(msg.sender,getMultiplier(msg.sender)*_tokenReward),\"token not Transfered succefully\");\r\n    }\r\n\r\n    function AvailableReward(uint256 _id) public view returns(uint256) {\r\n        require(!isNotAllowed[msg.sender], \"Sorry, you are not allowed to claim Reward\");\r\n        return ((block.timestamp - (lastTime[_id] > 0 ? lastTime[_id] : StartTime))/(60*60))*\r\n        RewardOneHour;\r\n    }\r\n\r\n    function getLastTime(uint256 _id) public view returns(uint256) {\r\n        return lastTime[_id];\r\n    }\r\n\r\n    function getMultiplier(address _user) public view returns(uint256){\r\n        if(nftContract.balanceOf(_user) >= 4 && nftContract.balanceOf(_user) < 10){\r\n            return 11;\r\n        } else if(nftContract.balanceOf(_user) >= 10 && nftContract.balanceOf(_user) < 20){\r\n            return 13;\r\n        }  else if(nftContract.balanceOf(_user) >= 20 ){\r\n            return 15;\r\n        } else {\r\n        return 10;\r\n        }\r\n    }\r\n\r\n    function BanWallet(address _user,bool status) public onlyAdmin{\r\n        isNotAllowed[_user] = status;\r\n    }\r\n\r\n    function withdrawBalance(address _to) public onlyAdmin {\r\n        (bool os, ) = payable(_to).call{value: address(this).balance}(\"\");\r\n        require(os);\r\n    }\r\n\r\n    function withdrawBalanceERC20(TokenContract _token, address _to, uint256 _amount) public onlyAdmin {\r\n        _token.transfer(_to,_amount);\r\n    }\r\n\r\n    function changeAdmin(address _new) public onlyAdmin{\r\n        admin = _new;\r\n    }\r\n\r\n}"}}}