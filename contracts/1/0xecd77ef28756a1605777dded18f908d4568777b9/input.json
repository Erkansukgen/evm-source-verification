{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled.sol":{"content":"pragma solidity ^0.6.1;\n\ninterface MinereumContract {\n  function transfer(address _to, uint256 _value) external;\n}\n\ninterface External1 {\n  function mintNewCoins(uint256 _amount) external;\n  function setStakingOwner() external;\n}\n\ninterface Genesis {\n\tfunction balanceOf ( address _address ) external view returns ( uint256 balance );\n\tfunction isAnyGenesisAddress ( address _address ) external view returns ( bool success );\n\tfunction isGenesisAddressLevel1 ( address _address ) external view returns ( bool success );\n\tfunction isGenesisAddressLevel2 ( address _address ) external view returns ( bool success );\n\tfunction isGenesisAddressLevel3 ( address _address ) external view returns ( bool success );\n}\n\ninterface PublicCalls {\n\tfunction stakeBalances ( address ) external view returns ( uint256 );\n}\n\ncontract MinereumStaking\n{\n\t\nuint256[] public mnePerDay;\nuint256[] public maxInterestRate = new uint256[](365);\n\naddress[] public participatedAddress;\naddress[] public bonusAddress;\naddress[] public AllowPayoutToOtherAddress;\n\nmapping (address => uint256[]) public daysParticipated;\nmapping (address => uint256[]) public mneSentPerDay;\nmapping (address => uint256[]) public Bonus;\nmapping (address => uint256[]) public BonusDay;\nmapping (address => address[]) public BonusFrom;\nmapping (address => uint256[]) public BonusAmount;\nmapping (address => uint256) public AddressBonus;\nmapping (address => bool[]) public StakingPaid;\nmapping (address => bool) public BonusPaid;\nmapping (address => bool) public AllowOtherStakingPayoutAddress;\nuint256 public startDate = 1594080000;\nuint256 public overallMNEStaking = 0;\nuint256 public overallBonus = 0;\nuint256 public referralRate = 25;\nuint256 public referrerRateNormal = 30;\nuint256 public referrerRateLevel2 = 40;\nuint256 public referrerRateLevel3 = 50;\nuint256 public referrerRateShare = 60;\nuint256 public newStakingCoins;\nuint256 public newBonusCoins;\nuint256 public paidStakingCoins;\nMinereumContract public mneContract;\nExternal1 public external1;\nGenesis public gn;\nPublicCalls public pc;\naddress public updaterAddress = 0x0000000000000000000000000000000000000000;\nbool public blockPayouts = false;\nbool public blockStaking = false;\n\nconstructor() public\n{\n\tsetUpdater();\n\tmneContract = MinereumContract(0x426CA1eA2406c07d75Db9585F22781c096e3d0E0);\n\t//external1 = External1(0x0000000000000000000000000000000000000000);\n\t//external1.setStakingOwner();\n\tgn = Genesis(0xa6be27538A28114Fe03EB7ADE9AdfE53164f2a4c);\n\tpc = PublicCalls(0x90E340e2d11E6Eb1D99E34D122D6fE0fEF3213fd);\n}\n\nfunction updateStartDate(uint _startDate) public\n{\n\tif (msg.sender == updaterAddress)\n\t{\n\t\tstartDate = _startDate;\t\t\n\t}\n\telse\n\t{\n\t\trevert();\n\t}\n}\n\nfunction updateVars(bool _blockPayouts, bool _blockStaking, uint256 _referralRate, uint256 _referrerRateNormal, uint256 _referrerRateLevel2, uint256 _referrerRateLevel3, uint256 _referrerRateShare) public\n{\n\tif (msg.sender == updaterAddress)\n\t{\n\t\tblockPayouts = _blockPayouts;\n\t\tblockStaking = _blockStaking;\n\t\treferralRate = _referralRate;\n\t\treferrerRateNormal = _referrerRateNormal;\n\t\treferrerRateLevel2 = _referrerRateLevel2;\n\t\treferrerRateLevel3 = _referrerRateLevel3;\n\t\treferrerRateShare = _referrerRateShare;\n\t}\n\telse\n\t{\n\t\trevert();\n\t}\n}\nfunction setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}\nfunction updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}\nfunction updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}\nfunction updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}\nfunction updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}\n\nfunction daysParticipatedGet(address _address) public view returns (uint256[] memory) { return daysParticipated[_address]; }\nfunction mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }\nfunction BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }\nfunction BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }\nfunction BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }\nfunction BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }\nfunction AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }\nfunction StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }\nfunction BonusPaidGet(address _address) public view returns (bool) { return BonusPaid[_address]; }\n\nfunction daysParticipatedGetAt(address _address, uint i) public view returns (uint256) { return daysParticipated[_address][i]; }\nfunction mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }\nfunction BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }\nfunction BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }\nfunction BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }\nfunction BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }\nfunction StakingPaidGetAt(address _address, uint i) public view returns (bool) { return StakingPaid[_address][i]; }\n\nfunction daysParticipatedLength(address _address) public view returns (uint256) { return daysParticipated[_address].length; }\nfunction mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }\nfunction BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }\nfunction BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }\nfunction BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }\nfunction BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }\nfunction StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }\nfunction mnePerDayLength() public view returns (uint256) { return mnePerDay.length; }\nfunction maxInterestRateLength() public view returns (uint256) { return maxInterestRate.length; }\nfunction participatedAddressLength() public view returns (uint256) { return participatedAddress.length; }\nfunction bonusAddressLength() public view returns (uint256) { return bonusAddress.length; }\n\nfunction GetCurrentDay() public view returns (uint256)\n{\n\tuint currentPeriod;\n\t\n\tif (block.timestamp < startDate)\t\n\t\tcurrentPeriod = 0;\n\telse\n\t\tcurrentPeriod = (block.timestamp - startDate) / 86400;\n\t\n\t\n\treturn currentPeriod;\n}\n\nfunction AllowStakingPayoutToOtherAddress(bool value) public\n{\n\tAllowPayoutToOtherAddress.push(msg.sender);\n\tAllowOtherStakingPayoutAddress[msg.sender] = value;\t\n}\n\nfunction TransferAllFundsOut(address _address) public\n{\t\t\n\tif (msg.sender == updaterAddress)\n\t{\n\t\tmneContract.transfer(_address, gn.balanceOf(address(this))); //in case of migration to another contract\t\n\t}\n\telse\n\t{\n\t\trevert();\n\t}\n}\n\t\nfunction startStaking(address _sender, uint256 _amountToStake, address[] memory _addressList, uint256[] memory uintList) public {\n\tif (blockStaking) revert('not active'); //in case of migration to another contract\n\t\n\tif (msg.sender != address(mneContract)) revert();\n\t\n\tif (startDate > block.timestamp) revert('invalid time');\n\t\n\tuint currentPeriod;\n\t\n\tif (block.timestamp < startDate)\t\n\t\tcurrentPeriod = 0;\n\telse\n\t\tcurrentPeriod = (block.timestamp - startDate) / 86400;\n\t\n\tif (currentPeriod > 364) revert('invalid period');\n\t\n\tif (mnePerDay.length < currentPeriod + 1)\n\t{\n\t\twhile (mnePerDay.length < currentPeriod + 1)\n\t\t\tmnePerDay.push(0);\n\t}\n\tmnePerDay[currentPeriod] += _amountToStake;\n\t\n\tif (daysParticipated[_sender].length > 0)\n\t{\n\t    if (daysParticipated[_sender][daysParticipated[_sender].length -1] == currentPeriod)\n\t    {\n\t        mneSentPerDay[_sender][daysParticipated[_sender].length -1] += _amountToStake;\n\t    }\n\t    else\n\t    {\n\t        daysParticipated[_sender].push(currentPeriod);\n    \t    mneSentPerDay[_sender].push(_amountToStake);\n    \t    StakingPaid[_sender].push(false);       \n\t    }\n\t}\n\telse\n\t{\n\t    participatedAddress.push(_sender);\n\t    daysParticipated[_sender].push(currentPeriod);\n\t    mneSentPerDay[_sender].push(_amountToStake);\n\t    StakingPaid[_sender].push(false);   \n\t}\n\t\n\toverallMNEStaking += _amountToStake;\n\t\n\tif (_addressList.length > 1)\n\t{\n\t\tif (_sender == _addressList[1] || _addressList[1] == address(this) || _addressList[1] == address(mneContract)) revert('invalid referal');\n\t\t\n\t\tuint bonusAmountReferral = _amountToStake * referralRate / 100;\t\n\n\t\tuint referrerRateFinal;\n\t\t\n\t\tif (pc.stakeBalances(_addressList[1]) > 0)\n\t\t\treferrerRateFinal = referrerRateShare;\n\t\telse if (!gn.isAnyGenesisAddress(_addressList[1]))\n\t\t\treferrerRateFinal = referrerRateNormal;\n\t\telse if (gn.isGenesisAddressLevel1(_addressList[1]))\t\t\n\t\t\treferrerRateFinal = referrerRateNormal;\n\t\telse if (gn.isGenesisAddressLevel2(_addressList[1]))\t\t\n\t\t\treferrerRateFinal = referrerRateLevel2;\n\t\telse if (gn.isGenesisAddressLevel3(_addressList[1]))\t\t\n\t\t\treferrerRateFinal = referrerRateLevel3;\n\t\t\n\t\tuint bonusAmountReferrer = _amountToStake * referrerRateFinal / 100;\n\t\t\n\t\tBonusDay[_sender].push(currentPeriod);\n\t\tBonusFrom[_sender].push(_addressList[1]);\n\t\tBonusAmount[_sender].push(bonusAmountReferral);\n\t\tBonusPaid[_sender] = false;\n\t\t\n\t\tif (AddressBonus[_sender] == 0)\n\t\t\tbonusAddress.push(_sender);\n\t\t\n\t\tAddressBonus[_sender] += bonusAmountReferral;\n\t\t\n\t\tBonusDay[_addressList[1]].push(currentPeriod);\n\t\tBonusFrom[_addressList[1]].push(_sender);\n\t\tBonusAmount[_addressList[1]].push(bonusAmountReferrer);\n\t\tBonusPaid[_addressList[1]] = false;\n\t\t\n\t\tif (AddressBonus[_addressList[1]] == 0)\n\t\t\tbonusAddress.push(_addressList[1]);\n\t\n\t\tAddressBonus[_addressList[1]] += bonusAmountReferrer;\n\t\t\n\t\toverallBonus += bonusAmountReferral + bonusAmountReferrer;\n\t}\t\n}\n\nfunction PayoutAllStaking(address _address) public {\n\tuint i = 0;\n\twhile (i < StakingPaid[msg.sender].length)\n\t{\n\t\tPayoutStaking(i, _address);\n\t\ti++;\n\t}\n}\n\nfunction PayoutStaking(uint i, address _address) public {\n\tif (blockPayouts) revert('payouts blocked'); //in case of migration to another contract\n\t\n\tif (daysParticipated[msg.sender].length == 0) revert('No Staking');\n\t\n\tif (block.timestamp >= startDate + (daysParticipated[msg.sender][0] * 86400) + 31556926)\n\t{\n\t\tif (StakingPaid[msg.sender][i]) revert('Stake already paid');\n\t\t\n\t\tuint interestRateToPay = mneSentPerDay[msg.sender][i] * maxInterestRate[daysParticipated[msg.sender][i]] * 1000000000000000 / mnePerDay[daysParticipated[msg.sender][i]];\n\t\tuint coinsToMint = mneSentPerDay[msg.sender][i] * interestRateToPay / 1000000000000000 / 100;\n\t\tuint amountToPay = mneSentPerDay[msg.sender][i] + coinsToMint;\n\t\t\n\t\texternal1.mintNewCoins(coinsToMint);\n\t\t\n\t\tif (_address != 0x0000000000000000000000000000000000000000 && AllowOtherStakingPayoutAddress[msg.sender])\t\t\t\n\t\t\tmneContract.transfer(_address, amountToPay);\n\t\telse\n\t\t\tmneContract.transfer(msg.sender, amountToPay);\n\t\t\n\t\tnewStakingCoins += coinsToMint;\n\t\tpaidStakingCoins += amountToPay;\n\t\tStakingPaid[msg.sender][i] = true;\n\t}\n\telse\n\t{\n\t\trevert('Payout Date Not Valid');\n\t}\n}\n\nfunction AmountToPayStaking(address _address, bool _checkID, uint i) public view returns (uint256)\n{\n\tif (_checkID)\n\t{\n\t\tuint interestRateToPay = mneSentPerDay[_address][i] * maxInterestRate[daysParticipated[_address][i]] * 1000000000000000 / mnePerDay[daysParticipated[_address][i]];\n\t\tuint coinsToMint = mneSentPerDay[_address][i] * interestRateToPay / 1000000000000000 / 100;\n\t\tuint amountToPay = mneSentPerDay[_address][i] + coinsToMint;\n\t\treturn amountToPay;\n\t}\n\telse\n\t{\n\t\tuint j = 0;\n\t\tuint finalAmount = 0;\n\t\twhile (j < mneSentPerDay[_address].length)\n\t\t{\n\t\t\tif (!StakingPaid[_address][j])\n\t\t\t{\n\t\t\t\tuint interestRateToPay = mneSentPerDay[_address][j] * maxInterestRate[daysParticipated[_address][j]] * 1000000000000000 / mnePerDay[daysParticipated[_address][j]];\n\t\t\t\tuint coinsToMint = mneSentPerDay[_address][j] * interestRateToPay / 1000000000000000 / 100;\n\t\t\t\tuint amountToPay = mneSentPerDay[_address][j] + coinsToMint;\n\t\t\t\tfinalAmount += amountToPay;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\treturn finalAmount;\n\t}\t\n}\n\nfunction AmountToPayBonus(address _address) public view returns (uint256)\n{\n\tif (BonusPaid[_address])\n\t\treturn 0;\n\telse\n\t\treturn AddressBonus[_address];\n}\n\nfunction DateStakingPayoutPossible(address _address) public view returns (uint256)\n{\n\tif (daysParticipated[_address].length == 0)\n\t\treturn 0;\n\telse\n\t\treturn startDate + (daysParticipated[_address][0] * 86400) + 31556926;\n}\n\nfunction DateBonusPayoutPossible(address _address) public view returns (uint256)\n{\n\tif (BonusDay[_address].length == 0)\n\t\treturn 0;\n\telse\n\t\treturn startDate + (BonusDay[_address][0] * 86400) + 31556926;\n}\n\nfunction PayoutBonus(address _address) public {\n\tif (blockPayouts) revert('payouts blocked'); //in case of migration to another contract\n\t\n\tif (BonusDay[msg.sender].length == 0) revert('No Bonus');\n\t\n\tif (block.timestamp >= startDate + (BonusDay[msg.sender][0] * 86400) + 31556926)\n\t{\n\t\tif (BonusPaid[msg.sender]) revert('Bonus already paid');\n\t\t\n\t\texternal1.mintNewCoins(AddressBonus[msg.sender]);\n\t\t\n\t\tif (_address != 0x0000000000000000000000000000000000000000 && AllowOtherStakingPayoutAddress[msg.sender])\t\t\t\n\t\t\tmneContract.transfer(_address, AddressBonus[msg.sender]);\n\t\telse\n\t\t\tmneContract.transfer(msg.sender, AddressBonus[msg.sender]);\n\t\t\n\t\tnewBonusCoins += AddressBonus[msg.sender];\n\t\tBonusPaid[msg.sender] = true;\n\t}\n\telse\n\t{\n\t\trevert('Payout Date Not Valid');\n\t}\n}\n\nfunction FillMaxInterestRate1() public\n{\t\n\tmaxInterestRate[0] = 1000;\n\tmaxInterestRate[1] = 990;\n\tmaxInterestRate[2] = 980;\n\tmaxInterestRate[3] = 970;\n\tmaxInterestRate[4] = 960;\n\tmaxInterestRate[5] = 950;\n\tmaxInterestRate[6] = 941;\n\tmaxInterestRate[7] = 932;\n\tmaxInterestRate[8] = 922;\n\tmaxInterestRate[9] = 913;\n\tmaxInterestRate[10] = 904;\n\tmaxInterestRate[11] = 895;\n\tmaxInterestRate[12] = 886;\n\tmaxInterestRate[13] = 877;\n\tmaxInterestRate[14] = 868;\n\tmaxInterestRate[15] = 860;\n\tmaxInterestRate[16] = 851;\n\tmaxInterestRate[17] = 842;\n\tmaxInterestRate[18] = 834;\n\tmaxInterestRate[19] = 826;\n\tmaxInterestRate[20] = 817;\n\tmaxInterestRate[21] = 809;\n\tmaxInterestRate[22] = 801;\n\tmaxInterestRate[23] = 793;\n\tmaxInterestRate[24] = 785;\n\tmaxInterestRate[25] = 777;\n\tmaxInterestRate[26] = 770;\n\tmaxInterestRate[27] = 762;\n\tmaxInterestRate[28] = 754;\n\tmaxInterestRate[29] = 747;\n\tmaxInterestRate[30] = 739;\n\tmaxInterestRate[31] = 732;\n\tmaxInterestRate[32] = 724;\n\tmaxInterestRate[33] = 717;\n\tmaxInterestRate[34] = 710;\n\tmaxInterestRate[35] = 703;\n\tmaxInterestRate[36] = 696;\n\tmaxInterestRate[37] = 689;\n\tmaxInterestRate[38] = 682;\n\tmaxInterestRate[39] = 675;\n\tmaxInterestRate[40] = 668;\n\tmaxInterestRate[41] = 662;\n\tmaxInterestRate[42] = 655;\n\tmaxInterestRate[43] = 649;\n\tmaxInterestRate[44] = 642;\n\tmaxInterestRate[45] = 636;\n\tmaxInterestRate[46] = 629;\n\tmaxInterestRate[47] = 623;\n\tmaxInterestRate[48] = 617;\n\tmaxInterestRate[49] = 611;\n\tmaxInterestRate[50] = 605;\n\tmaxInterestRate[51] = 598;\n\tmaxInterestRate[52] = 592;\n\tmaxInterestRate[53] = 587;\n\tmaxInterestRate[54] = 581;\n\tmaxInterestRate[55] = 575;\n\tmaxInterestRate[56] = 569;\n\tmaxInterestRate[57] = 563;\n\tmaxInterestRate[58] = 558;\n\tmaxInterestRate[59] = 552;\n\tmaxInterestRate[60] = 547;\n\tmaxInterestRate[61] = 541;\n\tmaxInterestRate[62] = 536;\n\tmaxInterestRate[63] = 530;\n\tmaxInterestRate[64] = 525;\n\tmaxInterestRate[65] = 520;\n\tmaxInterestRate[66] = 515;\n\tmaxInterestRate[67] = 509;\n\tmaxInterestRate[68] = 504;\n\tmaxInterestRate[69] = 499;\n\tmaxInterestRate[70] = 494;\n\tmaxInterestRate[71] = 489;\n\tmaxInterestRate[72] = 484;\n\tmaxInterestRate[73] = 480;\n\tmaxInterestRate[74] = 475;\n\tmaxInterestRate[75] = 470;\n\tmaxInterestRate[76] = 465;\n\tmaxInterestRate[77] = 461;\n\tmaxInterestRate[78] = 456;\n\tmaxInterestRate[79] = 452;\n\tmaxInterestRate[80] = 447;\n\tmaxInterestRate[81] = 443;\n\tmaxInterestRate[82] = 438;\n\tmaxInterestRate[83] = 434;\n\tmaxInterestRate[84] = 429;\n\tmaxInterestRate[85] = 425;\n\tmaxInterestRate[86] = 421;\n\tmaxInterestRate[87] = 417;\n\tmaxInterestRate[88] = 412;\n\tmaxInterestRate[89] = 408;\n\tmaxInterestRate[90] = 404;\n\tmaxInterestRate[91] = 400;\n\tmaxInterestRate[92] = 396;\n\tmaxInterestRate[93] = 392;\n\tmaxInterestRate[94] = 388;\n\tmaxInterestRate[95] = 384;\n\tmaxInterestRate[96] = 381;\n\tmaxInterestRate[97] = 377;\n\tmaxInterestRate[98] = 373;\n\tmaxInterestRate[99] = 369;\n\tmaxInterestRate[100] = 366;\n\tmaxInterestRate[101] = 362;\n\tmaxInterestRate[102] = 358;\n\tmaxInterestRate[103] = 355;\n\tmaxInterestRate[104] = 351;\n\tmaxInterestRate[105] = 348;\n\tmaxInterestRate[106] = 344;\n\tmaxInterestRate[107] = 341;\n\tmaxInterestRate[108] = 337;\n\tmaxInterestRate[109] = 334;\n\tmaxInterestRate[110] = 331;\n\tmaxInterestRate[111] = 327;\n\tmaxInterestRate[112] = 324;\n\tmaxInterestRate[113] = 321;\n\tmaxInterestRate[114] = 317;\n\tmaxInterestRate[115] = 314;\n\tmaxInterestRate[116] = 311;\n\tmaxInterestRate[117] = 308;\n\tmaxInterestRate[118] = 305;\n\tmaxInterestRate[119] = 302;\n\tmaxInterestRate[120] = 299;\n\tmaxInterestRate[121] = 296;\n\tmaxInterestRate[122] = 293;\n\tmaxInterestRate[123] = 290;\n\tmaxInterestRate[124] = 287;\n\tmaxInterestRate[125] = 284;\n\tmaxInterestRate[126] = 281;\n\tmaxInterestRate[127] = 279;\n\tmaxInterestRate[128] = 276;\n\tmaxInterestRate[129] = 273;\n\tmaxInterestRate[130] = 270;\n\tmaxInterestRate[131] = 268;\n\tmaxInterestRate[132] = 265;\n\tmaxInterestRate[133] = 262;\n\tmaxInterestRate[134] = 260;\n\tmaxInterestRate[135] = 257;\n\tmaxInterestRate[136] = 254;\n\tmaxInterestRate[137] = 252;\n\tmaxInterestRate[138] = 249;\n\tmaxInterestRate[139] = 247;\n\tmaxInterestRate[140] = 244;\n\tmaxInterestRate[141] = 242;\n\tmaxInterestRate[142] = 239;\n\tmaxInterestRate[143] = 237;\n\tmaxInterestRate[144] = 235;\n\tmaxInterestRate[145] = 232;\n\tmaxInterestRate[146] = 230;\n\tmaxInterestRate[147] = 228;\n\tmaxInterestRate[148] = 225;\n\tmaxInterestRate[149] = 223;\n\tmaxInterestRate[150] = 221;\n\tmaxInterestRate[151] = 219;\n\tmaxInterestRate[152] = 217;\n\tmaxInterestRate[153] = 214;\n\tmaxInterestRate[154] = 212;\n\tmaxInterestRate[155] = 210;\n\tmaxInterestRate[156] = 208;\n\tmaxInterestRate[157] = 206;\n\tmaxInterestRate[158] = 204;\n\tmaxInterestRate[159] = 202;\n\tmaxInterestRate[160] = 200;\n\tmaxInterestRate[161] = 198;\n\tmaxInterestRate[162] = 196;\n\tmaxInterestRate[163] = 194;\n\tmaxInterestRate[164] = 192;\n\tmaxInterestRate[165] = 190;\n\tmaxInterestRate[166] = 188;\n\tmaxInterestRate[167] = 186;\n\tmaxInterestRate[168] = 184;\n\tmaxInterestRate[169] = 182;\n\tmaxInterestRate[170] = 181;\n\tmaxInterestRate[171] = 179;\n\tmaxInterestRate[172] = 177;\n\tmaxInterestRate[173] = 175;\n\tmaxInterestRate[174] = 173;\n\tmaxInterestRate[175] = 172;\n\tmaxInterestRate[176] = 170;\n\tmaxInterestRate[177] = 168;\n\tmaxInterestRate[178] = 167;\n\tmaxInterestRate[179] = 165;\n\tmaxInterestRate[180] = 163;\n\tmaxInterestRate[181] = 162;\n\tmaxInterestRate[182] = 160;\t\n}\n\nfunction FillMaxInterestRate2() public\n{\n\tmaxInterestRate[183] = 158;\n\tmaxInterestRate[184] = 157;\n\tmaxInterestRate[185] = 155;\n\tmaxInterestRate[186] = 154;\n\tmaxInterestRate[187] = 152;\n\tmaxInterestRate[188] = 151;\n\tmaxInterestRate[189] = 149;\n\tmaxInterestRate[190] = 148;\n\tmaxInterestRate[191] = 146;\n\tmaxInterestRate[192] = 145;\n\tmaxInterestRate[193] = 143;\n\tmaxInterestRate[194] = 142;\n\tmaxInterestRate[195] = 140;\n\tmaxInterestRate[196] = 139;\n\tmaxInterestRate[197] = 138;\n\tmaxInterestRate[198] = 136;\n\tmaxInterestRate[199] = 135;\n\tmaxInterestRate[200] = 133;\n\tmaxInterestRate[201] = 132;\n\tmaxInterestRate[202] = 131;\n\tmaxInterestRate[203] = 130;\n\tmaxInterestRate[204] = 128;\n\tmaxInterestRate[205] = 127;\n\tmaxInterestRate[206] = 126;\n\tmaxInterestRate[207] = 124;\n\tmaxInterestRate[208] = 123;\n\tmaxInterestRate[209] = 122;\n\tmaxInterestRate[210] = 121;\n\tmaxInterestRate[211] = 119;\n\tmaxInterestRate[212] = 118;\n\tmaxInterestRate[213] = 117;\n\tmaxInterestRate[214] = 116;\n\tmaxInterestRate[215] = 115;\n\tmaxInterestRate[216] = 114;\n\tmaxInterestRate[217] = 112;\n\tmaxInterestRate[218] = 111;\n\tmaxInterestRate[219] = 110;\n\tmaxInterestRate[220] = 109;\n\tmaxInterestRate[221] = 108;\n\tmaxInterestRate[222] = 107;\n\tmaxInterestRate[223] = 106;\n\tmaxInterestRate[224] = 105;\n\tmaxInterestRate[225] = 104;\n\tmaxInterestRate[226] = 103;\n\tmaxInterestRate[227] = 102;\n\tmaxInterestRate[228] = 101;\n\tmaxInterestRate[229] = 100;\n\tmaxInterestRate[230] = 99;\n\tmaxInterestRate[231] = 98;\n\tmaxInterestRate[232] = 97;\n\tmaxInterestRate[233] = 96;\n\tmaxInterestRate[234] = 95;\n\tmaxInterestRate[235] = 94;\n\tmaxInterestRate[236] = 93;\n\tmaxInterestRate[237] = 92;\n\tmaxInterestRate[238] = 91;\n\tmaxInterestRate[239] = 90;\n\tmaxInterestRate[240] = 89;\n\tmaxInterestRate[241] = 88;\n\tmaxInterestRate[242] = 87;\n\tmaxInterestRate[243] = 86;\n\tmaxInterestRate[244] = 86;\n\tmaxInterestRate[245] = 85;\n\tmaxInterestRate[246] = 84;\n\tmaxInterestRate[247] = 83;\n\tmaxInterestRate[248] = 82;\n\tmaxInterestRate[249] = 81;\n\tmaxInterestRate[250] = 81;\n\tmaxInterestRate[251] = 80;\n\tmaxInterestRate[252] = 79;\n\tmaxInterestRate[253] = 78;\n\tmaxInterestRate[254] = 77;\n\tmaxInterestRate[255] = 77;\n\tmaxInterestRate[256] = 76;\n\tmaxInterestRate[257] = 75;\n\tmaxInterestRate[258] = 74;\n\tmaxInterestRate[259] = 74;\n\tmaxInterestRate[260] = 73;\n\tmaxInterestRate[261] = 72;\n\tmaxInterestRate[262] = 71;\n\tmaxInterestRate[263] = 71;\n\tmaxInterestRate[264] = 70;\n\tmaxInterestRate[265] = 69;\n\tmaxInterestRate[266] = 69;\n\tmaxInterestRate[267] = 68;\n\tmaxInterestRate[268] = 67;\n\tmaxInterestRate[269] = 66;\n\tmaxInterestRate[270] = 66;\n\tmaxInterestRate[271] = 65;\n\tmaxInterestRate[272] = 64;\n\tmaxInterestRate[273] = 64;\n\tmaxInterestRate[274] = 63;\n\tmaxInterestRate[275] = 63;\n\tmaxInterestRate[276] = 62;\n\tmaxInterestRate[277] = 61;\n\tmaxInterestRate[278] = 61;\n\tmaxInterestRate[279] = 60;\n\tmaxInterestRate[280] = 59;\n\tmaxInterestRate[281] = 59;\n\tmaxInterestRate[282] = 58;\n\tmaxInterestRate[283] = 58;\n\tmaxInterestRate[284] = 57;\n\tmaxInterestRate[285] = 57;\n\tmaxInterestRate[286] = 56;\n\tmaxInterestRate[287] = 55;\n\tmaxInterestRate[288] = 55;\n\tmaxInterestRate[289] = 54;\n\tmaxInterestRate[290] = 54;\n\tmaxInterestRate[291] = 53;\n\tmaxInterestRate[292] = 53;\n\tmaxInterestRate[293] = 52;\n\tmaxInterestRate[294] = 52;\n\tmaxInterestRate[295] = 51;\n\tmaxInterestRate[296] = 51;\n\tmaxInterestRate[297] = 50;\n\tmaxInterestRate[298] = 50;\n\tmaxInterestRate[299] = 49;\n\tmaxInterestRate[300] = 49;\n\tmaxInterestRate[301] = 48;\n\tmaxInterestRate[302] = 48;\n\tmaxInterestRate[303] = 47;\n\tmaxInterestRate[304] = 47;\n\tmaxInterestRate[305] = 46;\n\tmaxInterestRate[306] = 46;\n\tmaxInterestRate[307] = 45;\n\tmaxInterestRate[308] = 45;\n\tmaxInterestRate[309] = 44;\n\tmaxInterestRate[310] = 44;\n\tmaxInterestRate[311] = 43;\n\tmaxInterestRate[312] = 43;\n\tmaxInterestRate[313] = 43;\n\tmaxInterestRate[314] = 42;\n\tmaxInterestRate[315] = 42;\n\tmaxInterestRate[316] = 41;\n\tmaxInterestRate[317] = 41;\n\tmaxInterestRate[318] = 40;\n\tmaxInterestRate[319] = 40;\n\tmaxInterestRate[320] = 40;\n\tmaxInterestRate[321] = 39;\n\tmaxInterestRate[322] = 39;\n\tmaxInterestRate[323] = 38;\n\tmaxInterestRate[324] = 38;\n\tmaxInterestRate[325] = 38;\n\tmaxInterestRate[326] = 37;\n\tmaxInterestRate[327] = 37;\n\tmaxInterestRate[328] = 37;\n\tmaxInterestRate[329] = 36;\n\tmaxInterestRate[330] = 36;\n\tmaxInterestRate[331] = 35;\n\tmaxInterestRate[332] = 35;\n\tmaxInterestRate[333] = 35;\n\tmaxInterestRate[334] = 34;\n\tmaxInterestRate[335] = 34;\n\tmaxInterestRate[336] = 34;\n\tmaxInterestRate[337] = 33;\n\tmaxInterestRate[338] = 33;\n\tmaxInterestRate[339] = 33;\n\tmaxInterestRate[340] = 32;\n\tmaxInterestRate[341] = 32;\n\tmaxInterestRate[342] = 32;\n\tmaxInterestRate[343] = 31;\n\tmaxInterestRate[344] = 31;\n\tmaxInterestRate[345] = 31;\n\tmaxInterestRate[346] = 30;\n\tmaxInterestRate[347] = 30;\n\tmaxInterestRate[348] = 30;\n\tmaxInterestRate[349] = 29;\n\tmaxInterestRate[350] = 29;\n\tmaxInterestRate[351] = 29;\n\tmaxInterestRate[352] = 29;\n\tmaxInterestRate[353] = 28;\n\tmaxInterestRate[354] = 28;\n\tmaxInterestRate[355] = 28;\n\tmaxInterestRate[356] = 27;\n\tmaxInterestRate[357] = 27;\n\tmaxInterestRate[358] = 27;\n\tmaxInterestRate[359] = 27;\n\tmaxInterestRate[360] = 26;\n\tmaxInterestRate[361] = 26;\n\tmaxInterestRate[362] = 26;\n\tmaxInterestRate[363] = 26;\n\tmaxInterestRate[364] = 25;\n}\n}"}}}