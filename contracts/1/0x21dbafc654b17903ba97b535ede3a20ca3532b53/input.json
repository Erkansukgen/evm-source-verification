{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/AAAADeploy.sol":{"content":"// Dependency file: contracts/modules/ConfigNames.sol\n\n// SPDX-License-Identifier: MIT\n// pragma solidity >=0.5.16;\n\nlibrary ConfigNames {\n    //GOVERNANCE\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\n\n    // POOL\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\n    \n    //NOT GOVERNANCE\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\n\n    //POOL\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\n\n    //wallet\n    bytes32 public constant TEAM = bytes32('team'); \n    bytes32 public constant SPARE = bytes32('spare');\n    bytes32 public constant REWARD = bytes32('reward');\n}\n\n// Root file: contracts/AAAADeploy.sol\n\npragma solidity >=0.6.6;\npragma experimental ABIEncoderV2;\n\n// import 'contracts/modules/ConfigNames.sol';\n\ninterface IConfigable {\n    function setupConfig(address config) external;\n}\n\ninterface IConfig {\n    function developer() external view returns (address);\n    function platform() external view returns (address);\n    function factory() external view returns (address);\n    function mint() external view returns (address);\n    function token() external view returns (address);\n    function share() external view returns (address);\n    function governor() external view returns (address);\n    function initialize (address _platform, address _factory, address _mint, address _token, address _share, address _governor) external;\n    function initParameter() external;\n    function addMintToken(address _token) external;\n    function setWallets(bytes32[] calldata _names, address[] calldata _wallets) external;\n    function isMintToken(address _token) external view returns (bool);\n    function changeDeveloper(address _developer) external;\n    function setValue(bytes32 _key, uint _value) external;\n}\n\ninterface IAAAAMint {\n    function sync() external;\n}\n\ninterface IAAAAShare {\n    function setShareToken(address _shareToken) external;\n}\n\ninterface IAAAAToken {\n    function initialize() external;\n}\n\ninterface IAAAAFactory {\n    function countPools() external view returns(uint);\n    function countBallots() external view returns(uint);\n    function allBallots(uint index) external view returns(address);\n    function allPools(uint index) external view returns(address);\n    function isPool(address addr) external view returns(bool);\n    function getPool(address lend, address collateral) external view returns(address);\n    function createPool(address _lendToken, address _collateralToken) external returns (address pool);\n    function changeBallotByteHash(bytes32 _hash) external;\n}\n\ninterface IMasterChef {\n    function cake() external view returns(address);\n}\n\ninterface ILPStrategyFactory {\n    function createStrategy(address _collateralToken, address _poolAddress, uint _lpPoolpid) external returns (address _strategy);\n}\n\ninterface IAAAAPlatform {\n    function switchStrategy(address _lendToken, address _collateralToken, address _collateralStrategy) external;\n}\n\ncontract AAAADeploy {\n    address public owner;\n    address public config;\n    address public LPStrategyFactory;\n    bool public LPStrategyCanMint;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\n        _;\n    }\n \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setupConfig(address _config) onlyOwner external {\n        require(_config != address(0), \"ZERO ADDRESS\");\n        config = _config;\n    }\n\n    function changeDeveloper(address _developer) onlyOwner external {\n        IConfig(config).changeDeveloper(_developer);\n    }\n    \n    function setMasterchef(address _LPStrategyFactory, bool _LPStrategyCanMint) onlyOwner external {\n        LPStrategyFactory = _LPStrategyFactory;\n        LPStrategyCanMint = _LPStrategyCanMint;\n    }\n\n    function createPool(address _lendToken, address _collateralToken, uint _lpPoolpid) onlyOwner public {\n        if(LPStrategyCanMint) {\n            require(IConfig(config).isMintToken(_lendToken), 'REQUEST ADD MINT TOKEN FIRST');\n        }\n        address pool = IAAAAFactory(IConfig(config).factory()).createPool(_lendToken, _collateralToken);\n        address strategy = ILPStrategyFactory(LPStrategyFactory).createStrategy(_collateralToken, pool, _lpPoolpid);\n        IAAAAPlatform(IConfig(config).platform()).switchStrategy(_lendToken, _collateralToken, strategy);\n    }\n\n    function changeBallotByteHash(bytes32 _hash) onlyOwner external {\n        IAAAAFactory(IConfig(config).factory()).changeBallotByteHash(_hash);\n    }\n\n    function addMintToken(address _token) onlyOwner external {\n        IConfig(config).addMintToken(_token);\n    }\n\n    function changeMintPerBlock(uint _value) onlyOwner external {\n        IConfig(config).setValue(ConfigNames.MINT_AMOUNT_PER_BLOCK, _value);\n        IAAAAMint(IConfig(config).mint()).sync();\n    }\n\n    function setShareToken(address _shareToken) onlyOwner external {\n        IAAAAShare(IConfig(config).share()).setShareToken(_shareToken);\n    }\n\n  }"}}}