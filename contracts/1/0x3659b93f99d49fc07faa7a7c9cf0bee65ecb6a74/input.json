{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "HolderSystem.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract HolderSystem {\r\n  address internal owner;\r\n\r\n  uint internal constant ENTRY_ENABLED = 1;\r\n  uint internal constant ENTRY_DISABLED = 2;\r\n\r\n  uint internal reentry_status;\r\n\r\n  modifier isOwner(address _account) {\r\n    require(owner == _account, \"Restricted Access!\");\r\n    _;\r\n  }\r\n\r\n  modifier blockReEntry() {\r\n    require(reentry_status != ENTRY_DISABLED, \"Security Block\");\r\n    reentry_status = ENTRY_DISABLED;\r\n\r\n    _;\r\n\r\n    reentry_status = ENTRY_ENABLED;\r\n  }\r\n\r\n  constructor() public {\r\n    reentry_status = ENTRY_ENABLED;\r\n\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function() external payable blockReEntry() {\r\n  }\r\n\r\n  function getSystemBalance() external view isOwner(msg.sender) returns (uint) {\r\n    return address(this).balance;\r\n  }\r\n  \r\n  function withdraw(uint _amount) external payable isOwner(msg.sender) blockReEntry() {\r\n    require(address(this).balance >= _amount && _amount > 0, \"Not enough funds\");\r\n\r\n    (bool success, ) = msg.sender.call.value(_amount)(\"\");\r\n    \r\n    require(success, \"Transfer failed\");\r\n  }\r\n\r\n  function withdrawTo(address payable _to, uint _amount) external isOwner(msg.sender) blockReEntry() {\r\n    require(address(this).balance >= _amount && _amount > 0, \"Not enough funds\");\r\n\r\n    (bool success, ) = _to.call.value(_amount)(\"\");\r\n    \r\n    require(success, \"Transfer failed\");\r\n  }\r\n\r\n  function changeOwner(address _addr) external isOwner(msg.sender) {\r\n    owner = _addr;\r\n  }\r\n}"
    }
  }
}