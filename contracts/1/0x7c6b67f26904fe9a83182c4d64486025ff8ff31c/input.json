{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Gelt.sol":{"content":"pragma solidity ^0.4.24;\r\ncontract SafeMath {\r\nfunction safeAdd(uint a, uint b) public pure returns (uint c) {\r\nc = a + b;\r\nrequire(c >= a);\r\n}\r\nfunction safeSub(uint a, uint b) public pure returns (uint c) {\r\nrequire(b <= a);\r\nc = a - b;\r\n}\r\nfunction safeMul(uint a, uint b) public pure returns (uint c) {\r\nc = a * b;\r\nrequire(a == 0 || c / a == b);\r\n}\r\nfunction safeDiv(uint a, uint b) public pure returns (uint c) {\r\nrequire(b > 0);\r\nc = a / b;\r\n}\r\n}\r\n/**\r\nERC Token Standard #20 Interface\r\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n*/\r\ncontract ERC20Interface {\r\nfunction totalSupply() public constant returns (uint);\r\nfunction balanceOf(address tokenOwner) public constant returns (uint balance);\r\nfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\nfunction transfer(address to, uint tokens) public returns (bool success);\r\nfunction approve(address spender, uint tokens) public returns (bool success);\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\nevent Transfer(address indexed from, address indexed to, uint tokens);\r\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n/**\r\nContract function to receive approval and execute function in one call\r\nBorrowed from MiniMeToken\r\n*/\r\ncontract ApproveAndCallFallBack {\r\nfunction receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n/**\r\nERC20 Token, with the addition of symbol, name and decimals and assisted token transfers\r\n*/\r\ncontract Gelt is ERC20Interface, SafeMath {\r\nstring public symbol;\r\nstring public name;\r\nuint8 public decimals;\r\nuint public _totalSupply;\r\nmapping(address => uint) balances;\r\nmapping(address => mapping(address => uint)) allowed;\r\n// ------------------------------------------------------------------------\r\n// Constructor\r\n// ------------------------------------------------------------------------\r\nconstructor() public {\r\nsymbol = \"GELT\";\r\nname = \"Gelt Charitable Token\";\r\ndecimals = 18;\r\n_totalSupply = 100000000000000000000000000000;\r\nbalances[0x113DCAEa3A9A1cec78667797156ca2913CBb4cDE] = _totalSupply;\r\nemit Transfer(address(0), 0x113DCAEa3A9A1cec78667797156ca2913CBb4cDE, _totalSupply);\r\n}\r\n// ------------------------------------------------------------------------\r\n// Total supply\r\n// ------------------------------------------------------------------------\r\nfunction totalSupply() public constant returns (uint) {\r\nreturn _totalSupply - balances[address(0)];\r\n}\r\n// ------------------------------------------------------------------------\r\n// Get the token balance for account tokenOwner\r\n// ------------------------------------------------------------------------\r\nfunction balanceOf(address tokenOwner) public constant returns (uint balance) {\r\nreturn balances[tokenOwner];\r\n}\r\n// ------------------------------------------------------------------------\r\n// Transfer the balance from token owner's account to to account\r\n// - Owner's account must have sufficient balance to transfer\r\n// - 0 value transfers are allowed\r\n// ------------------------------------------------------------------------\r\nfunction transfer(address to, uint tokens) public returns (bool success) {\r\nbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\nbalances[to] = safeAdd(balances[to], tokens);\r\nemit Transfer(msg.sender, to, tokens);\r\nreturn true;\r\n}\r\n// ------------------------------------------------------------------------\r\n// Token owner can approve for spender to transferFrom(...) tokens\r\n// from the token owner's account\r\n//\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// recommends that there are no checks for the approval double-spend attack\r\n// as this should be implemented in user interfaces\r\n// ------------------------------------------------------------------------\r\nfunction approve(address spender, uint tokens) public returns (bool success) {\r\nallowed[msg.sender][spender] = tokens;\r\nemit Approval(msg.sender, spender, tokens);\r\nreturn true;\r\n}\r\n// ------------------------------------------------------------------------\r\n// Transfer tokens from the from account to the to account\r\n//\r\n// The calling account must already have sufficient tokens approve(...)-d\r\n// for spending from the from account and\r\n// - From account must have sufficient balance to transfer\r\n// - Spender must have sufficient allowance to transfer\r\n// - 0 value transfers are allowed\r\n// ------------------------------------------------------------------------\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\nbalances[from] = safeSub(balances[from], tokens);\r\nallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\nbalances[to] = safeAdd(balances[to], tokens);\r\nemit Transfer(from, to, tokens);\r\nreturn true;\r\n}\r\n// ------------------------------------------------------------------------\r\n// Returns the amount of tokens approved by the owner that can be\r\n// transferred to the spender's account\r\n// ------------------------------------------------------------------------\r\nfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\nreturn allowed[tokenOwner][spender];\r\n}\r\n// ------------------------------------------------------------------------\r\n// Token owner can approve for spender to transferFrom(...) tokens\r\n// from the token owner's account. The spender contract function\r\n// receiveApproval(...) is then executed\r\n// ------------------------------------------------------------------------\r\nfunction approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\nallowed[msg.sender][spender] = tokens;\r\nemit Approval(msg.sender, spender, tokens);\r\nApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\nreturn true;\r\n}\r\n// ------------------------------------------------------------------------\r\n// Don't accept ETH\r\n// ------------------------------------------------------------------------\r\nfunction () public payable {\r\nrevert();\r\n}\r\n}"}}}