{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":300},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DFSocial_LOL2v2.sol":{"content":"pragma solidity >=0.7.6;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor()  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transfer(address, uint) external returns (bool);\r\n    function balanceOf(address _owner) external returns (uint256 balance) ;\r\n    function balanceOf(address _owner, uint256 id) external returns (uint256 balance) ;\r\n    function depositedTokens(address _owner) external returns (uint256 amount) ;\r\n    \r\n}\r\n\r\n\r\ncontract DFSocial_Game2 is Ownable {\r\n    using SafeMath for uint;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    \r\n    \r\n    \r\n    \r\n    address private constant tokenAddress = 0x54ee01beB60E745329E6a8711Ad2D6cb213e38d7;  \r\n    address private constant staking = 0xe2D23fC3ea78BF15730A8a727D823679454adb89;\r\n   \r\n    uint public amountToPlay ;\r\n    uint public timeToJoin ; \r\n    uint public timeToFinish ; \r\n    \r\n    /* Bonus */\r\n    uint public amountToBonus1;\r\n    uint public amountToBonus2;\r\n    uint public amountToBonus3;\r\n    \r\n    uint public insertIndex;\r\n    \r\n    EnumerableSet.AddressSet private holders;\r\n    EnumerableSet.AddressSet private NFT;\r\n    \r\n    \r\n    bool public started;\r\n    uint public startTime;\r\n    \r\n    \r\n    \r\n    mapping (address => address) public player;\r\n    \r\n    mapping (address => uint) public tier;\r\n    mapping (address => uint) public reward;\r\n    \r\n    \r\n    mapping (address => bool) public bonus1; // 10 DFSocial\r\n    \r\n    mapping (address => bool) public bonus2;  // 15 DFSocial\r\n    \r\n    mapping (address => bool) public bonus3;  // 20 DFSocial\r\n    \r\n    \r\n    mapping (address => string) public names;\r\n    mapping (address => string) public region; \r\n    mapping (address => string) public ref;\r\n    \r\n    \r\n             \r\n    // Times in seconds\r\n    function startEvent( uint _amountToPlay, uint _timeToJoin, uint _timeToFinish, address[] memory nft_holders) public onlyOwner{ \r\n        require(!started );\r\n        while(holders.length() >0 ){\r\n            address actual = holders.at(0);\r\n            holders.remove(actual);\r\n            \r\n            insertIndex = 0;\r\n           \r\n            player[actual] = 0x0000000000000000000000000000000000000000;\r\n            reward[actual] = 0;\r\n            tier[actual] = 0;\r\n          \r\n            names[actual] = \"\";\r\n            region[actual] = \"\";\r\n            bonus1[actual] = false;\r\n            bonus2[actual] = false;\r\n            bonus3[actual] = false;\r\n            ref[actual] = \"\";\r\n            \r\n            \r\n            \r\n        }\r\n        started = true;\r\n        startTime = block.timestamp;\r\n        \r\n        \r\n        timeToJoin = _timeToJoin;\r\n        timeToFinish = _timeToFinish;\r\n        \r\n        amountToPlay = _amountToPlay;\r\n        amountToBonus1  = _amountToPlay.mul(2);\r\n        amountToBonus2  = _amountToPlay.mul(3);\r\n        amountToBonus3  = _amountToPlay.mul(4);\r\n        \r\n        for(uint i=0; i<nft_holders.length ; i=i.add(1)){\r\n            NFT.add(nft_holders[i]);\r\n        }\r\n        \r\n    }     \r\n\r\n    function timeToFinishJoins() public view returns (uint){\r\n        \r\n        uint returnTime;\r\n        \r\n        if(startTime == 0 ){\r\n            returnTime = 0;\r\n        }else{\r\n            returnTime = startTime.add(timeToJoin);\r\n        }\r\n        \r\n       \r\n        return returnTime;\r\n    }\r\n    \r\n    function timeToFinishGame() public view returns (uint){\r\n        \r\n        uint returnTime;\r\n        \r\n        if(startTime == 0 ){\r\n            returnTime = 0;\r\n        }else{\r\n            returnTime = startTime.add(timeToFinish);\r\n        }\r\n        \r\n       \r\n        return returnTime;\r\n    }\r\n       \r\n    \r\n    function joinWithRef(string memory _name,  string memory _region, string memory _ref, address _gamer) public{\r\n        require(block.timestamp.sub(startTime) < timeToJoin, \"Joins deadline finished\");\r\n        require(!holders.contains(msg.sender), \"You are already playing\");\r\n        require(holders.length() < 100);\r\n        \r\n        uint amount;\r\n        if( NFT.contains(msg.sender)){\r\n            bonus3[msg.sender] = true;\r\n            tier[msg.sender] = 4;\r\n        }else{\r\n            amount = Token(staking).depositedTokens(msg.sender);\r\n            amount = amount.add(Token(tokenAddress).balanceOf(msg.sender));\r\n            require(amount >= amountToPlay, \"Not enought DFSocial\");\r\n            tier[msg.sender] = 1; \r\n             \r\n            if(amount >= amountToBonus3){\r\n                bonus3[msg.sender] = true;\r\n                tier[msg.sender] = 4;\r\n            }else if(amount >= amountToBonus2){\r\n                bonus2[msg.sender] = true;\r\n                tier[msg.sender] = 3;\r\n            }else if(amount >= amountToBonus1){\r\n                bonus1[msg.sender] = true;\r\n                tier[msg.sender] = 2;\r\n            }\r\n        \r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        holders.add(msg.sender);\r\n        player[msg.sender] = _gamer;\r\n        \r\n        names[msg.sender] = _name;\r\n        region[msg.sender] = _region;\r\n        ref[msg.sender] = _ref;\r\n    }\r\n    \r\n    \r\n        \r\n        \r\n    function terminate() public onlyOwner{\r\n        require(block.timestamp.sub(startTime) > timeToFinish, \"Not yet\");\r\n        started = false;\r\n    }    \r\n    \r\n    \r\n    function end(uint [] memory _puntos) public onlyOwner    {\r\n        require(started, \"Game didn't start! \");\r\n        require(block.timestamp.sub(startTime) > timeToFinish, \"Not yet\");\r\n        require( _puntos.length <= holders.length() );\r\n        \r\n        \r\n        \r\n        for(uint i = 0; i < _puntos.length ; i = i.add(1)){\r\n            reward[holders.at(insertIndex)] = _puntos[i].mul(1e16);  //2 decimals needed\r\n            insertIndex = insertIndex.add(1);\r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    function claim() public{\r\n        require(holders.contains(msg.sender), \"You're not playing\");\r\n        require(reward[msg.sender] > 0, \"Nothing to claim\");\r\n        \r\n        uint amount = Token(staking).depositedTokens(msg.sender);\r\n        \r\n        if(NFT.contains(msg.sender)){\r\n            \r\n        }else if(bonus1[msg.sender]){\r\n            amount = amount.add(Token(tokenAddress).balanceOf(msg.sender));\r\n            require ( amount >= amountToBonus1, \"Not enought DFSocial (10)\");\r\n        }else if(bonus2[msg.sender]) {\r\n            amount = amount.add(Token(tokenAddress).balanceOf(msg.sender));\r\n            require(amount >= amountToBonus2, \"Not enought DFSocial (15)\");\r\n        }else if(bonus3[msg.sender]) {\r\n            amount = amount.add(Token(tokenAddress).balanceOf(msg.sender));\r\n            require(amount >= amountToBonus3, \"Not enought DFSocial (20)\");\r\n        }else{\r\n            amount = amount.add(Token(tokenAddress).balanceOf(msg.sender));\r\n            require(amount >= amountToPlay, \"Not enought DFSocial (5)\");\r\n        }\r\n        \r\n        uint _rewHolder = reward[msg.sender];\r\n        reward[msg.sender] = 0;\r\n        uint _rewGamer = _rewHolder.div(100).mul(25);\r\n        _rewHolder=_rewHolder.div(100).mul(75); //75% holder\r\n        \r\n        require(Token(tokenAddress).transfer(msg.sender, _rewHolder), \"Could not transfer tokens to the holder.\");\r\n        require(Token(tokenAddress).transfer(player[msg.sender], _rewGamer), \"Could not transfer tokens to the gamer.\");\r\n      \r\n        \r\n        \r\n    }\r\n    \r\n    function getIsHolder(address dir) public view returns (bool){\r\n        return holders.contains(dir);\r\n    }\r\n    \r\n    function aaGetInfo(address _holder) public view returns (string memory, string memory, address , uint)  {\r\n        return (names[_holder], region[_holder], player[_holder], tier[_holder]);\r\n    }\r\n\r\n    function getNumGamers() public view returns (uint){\r\n        return holders.length();\r\n    }\r\n    \r\n    function deletePlayers (address[] memory _players) public onlyOwner{\r\n        for(uint i=0; i < _players.length; i=i.add(1)){\r\n            if(holders.contains(_players[i])){\r\n                holders.remove(_players[i]);\r\n                player[_players[i]] = 0x0000000000000000000000000000000000000000;\r\n                reward[_players[i]] = 0;\r\n                tier[_players[i]] = 0;\r\n                \r\n                \r\n                names[_players[i]] = \"\";\r\n                region[_players[i]] = \"\";\r\n                bonus1[_players[i]] = false;\r\n                bonus2[_players[i]] = false;\r\n                bonus3[_players[i]] = false;\r\n                ref[_players[i]] = \"\";\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getGamer(uint pos) public view returns (address){\r\n        return holders.at(pos);\r\n    }\r\n    \r\n}"}}}