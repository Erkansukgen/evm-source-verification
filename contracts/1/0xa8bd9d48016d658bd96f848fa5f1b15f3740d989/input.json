{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SwapTokens.sol": {
      "content": "pragma solidity ^0.8.9;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n \r\n// main token contarct\r\ncontract SwapTokens {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"PRESALE: Not an owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function swap(IBEP20 _token1, IBEP20 _token2, uint256 _amount) public {\r\n        _token1.transferFrom(msg.sender, owner, _amount);\r\n        _token2.transferFrom(owner, msg.sender, _amount);\r\n    }\r\n\r\n    // to change owner\r\n    function changeOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n}"
    }
  }
}