{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/proxy.sol": {
      "content": "pragma solidity 0.6.0;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () public {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\nabstract contract Tokenomics {\r\n  function transferProxy(\r\n      address[] memory addressProps,\r\n      uint256[] memory _passProxyProps) \r\n      virtual public payable returns (address[] memory returnAddress, uint256[] memory returnProxyPros, uint256 longOfReturn);\r\n}\r\n\r\nabstract contract Token {\r\n  function transfer(address _to, uint256 _value) virtual public returns (bool success);\r\n  function balanceOf(address _owner) virtual pure public returns (uint256 balance);\r\n  function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);\r\n}\r\n\r\nabstract contract IUniswapV2Pair {\r\n    function totalSupply() external virtual view returns (uint);\r\n    function balanceOf(address owner) external virtual view returns (uint);\r\n    function transfer(address _to, uint256 _value) virtual public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);\r\n}\r\n\r\ncontract ProxyChange is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 constant public TOKEN_PRECISION = 1e12;\r\n    \r\n    struct User {\r\n    \tuint256 liqudityBalance;\r\n    \tuint256 startFarmIteration;\r\n    }\r\n    \r\n    mapping(address => User) public users;\r\n    \r\n    IUniswapV2Pair public uniswapV2Pair;\r\n    Token public token;\r\n    \r\n     struct LiqHistory {\r\n    \tuint256 valueOfLiq;\r\n    \tuint256 balanceOfExtraPoints;\r\n    }\r\n    \r\n    mapping(uint256 => LiqHistory) public historyOfLiqudity;\r\n    \r\n    uint256 public coinCreationTime;\r\n    uint256 public historyIteration;\r\n     \r\n    constructor(address uniswapV2PairAddress, address tokenAddress) public { \r\n        uniswapV2Pair = IUniswapV2Pair(uniswapV2PairAddress); \r\n        token = Token(tokenAddress);\r\n        \r\n        coinCreationTime = now;\r\n    } \r\n\r\n    function transferProxy(\r\n      address[] memory addressProps,\r\n      uint256[] memory _passProxyProps) \r\n      public payable returns (address[] memory returnAddress, uint256[] memory returnProxyPros, uint256 longOfReturn) {\r\n        \r\n        uint256 fromValueProxyUpdated = _passProxyProps[0].sub(_passProxyProps[3]);\r\n        \r\n        uint256 transferFee = _passProxyProps[3].div(20);\r\n        uint256 sendValue = _passProxyProps[3].sub(transferFee);\r\n        \r\n        uint256 toValueProxyUpdated = _passProxyProps[1].add(sendValue);\r\n        \r\n        uint256 valueOfThatContract = token.balanceOf(address(this)).add(transferFee);\r\n        \r\n        address[] memory _returnProxyAddressPros = new address[](4);\r\n        \r\n        // changed hierarchy fix sending value to contracts\r\n        _returnProxyAddressPros[0] = addressProps[2];\r\n        _returnProxyAddressPros[1] = address(this);\r\n        _returnProxyAddressPros[2] = addressProps[0];\r\n        _returnProxyAddressPros[3] = addressProps[1];\r\n        \r\n        uint valueCount = 6;\r\n        uint256[] memory _returnProxyPros = new uint256[](valueCount);\r\n\r\n        // changed hierarchy fix sending value to contracts\r\n        _returnProxyPros[0] = _passProxyProps[2];\r\n        _returnProxyPros[1] = valueOfThatContract;\r\n        _returnProxyPros[2] = fromValueProxyUpdated;\r\n        _returnProxyPros[3] = toValueProxyUpdated;\r\n        \r\n        _returnProxyPros[4] = _passProxyProps[3];\r\n        _returnProxyPros[5] = _passProxyProps[4];\r\n        \r\n        collectLiqudityHistory(transferFee);\r\n         \r\n        return (_returnProxyAddressPros, _returnProxyPros, valueCount);\r\n    }\r\n    \r\n    function collectLiqudityHistory(uint256 transferFee) private {\r\n        if(coinCreationTime + 6 hours < now)\r\n        {\r\n            historyIteration++;\r\n            coinCreationTime = now;\r\n            historyOfLiqudity[historyIteration].balanceOfExtraPoints = 0;\r\n        }\r\n        \r\n        historyOfLiqudity[historyIteration].valueOfLiq = uniswapV2Pair.totalSupply();\r\n        historyOfLiqudity[historyIteration].balanceOfExtraPoints += transferFee;\r\n    }\r\n    \r\n    function joinFarmPool() public payable {\r\n        claim();\r\n        \r\n        uint256 userCapLiqudity = uniswapV2Pair.balanceOf(msg.sender);\r\n        \r\n        users[msg.sender].liqudityBalance += userCapLiqudity;\r\n      \r\n        users[msg.sender].startFarmIteration = historyIteration;\r\n        \r\n        uniswapV2Pair.transferFrom(msg.sender, address(this), userCapLiqudity);\r\n    }\r\n    \r\n     function removeFarmPool() public payable {\r\n        claim();\r\n        \r\n        uint256 userCapLiqudity = users[msg.sender].liqudityBalance;\r\n        \r\n        users[msg.sender].liqudityBalance -= userCapLiqudity;\r\n     \r\n        users[msg.sender].startFarmIteration = historyIteration;\r\n        \r\n        uniswapV2Pair.transfer(msg.sender, userCapLiqudity); \r\n    }\r\n  \r\n    function joinFarmPoolWithValue(uint256 liqudityTokenToFarm) public payable {\r\n      \r\n        uint256 userCapLiqudity = uniswapV2Pair.balanceOf(msg.sender);\r\n        \r\n        require(userCapLiqudity >= liqudityTokenToFarm, \"Insufficient tokens\");\r\n        \r\n        claim();\r\n   \r\n        users[msg.sender].liqudityBalance += userCapLiqudity;\r\n      \r\n        users[msg.sender].startFarmIteration = historyIteration;\r\n        \r\n        uniswapV2Pair.transferFrom(msg.sender, address(this), userCapLiqudity);\r\n    }\r\n    \r\n    function leaveFarmPoolWithValue(uint256 liqudityTokenFromFarm) public payable {\r\n          \r\n        uint256 userCapLiqudity = users[msg.sender].liqudityBalance;\r\n        \r\n        require(userCapLiqudity >= liqudityTokenFromFarm, \"Insufficient tokens\");\r\n        \r\n        claim();\r\n\r\n        users[msg.sender].liqudityBalance -= userCapLiqudity;\r\n     \r\n        users[msg.sender].startFarmIteration = historyIteration;\r\n        \r\n        uniswapV2Pair.transfer(msg.sender, userCapLiqudity); \r\n    }\r\n  \r\n    function reward() public payable {\r\n        claim();\r\n        \r\n        users[msg.sender].startFarmIteration = historyIteration;\r\n    }\r\n    \r\n    function claim() private {\r\n        historyOfLiqudity[historyIteration].valueOfLiq = uniswapV2Pair.totalSupply();\r\n        \r\n        if(users[msg.sender].liqudityBalance != 0){\r\n\r\n            uint256 valueFromLiqudityHistory = users[msg.sender].startFarmIteration;\r\n            uint256 valueToLiqudityHistory = historyIteration;\r\n            \r\n            uint256 farmTokenToClaim = 0;\r\n            \r\n            //Claim possible only from previousRewards to not claim from the actual reward sample time!\r\n            for (uint256 i=valueFromLiqudityHistory; i<valueToLiqudityHistory; i++) {\r\n                if(historyOfLiqudity[i].balanceOfExtraPoints != 0 && historyOfLiqudity[i].valueOfLiq != 0){\r\n                    farmTokenToClaim += ((historyOfLiqudity[i].balanceOfExtraPoints * users[msg.sender].liqudityBalance) / historyOfLiqudity[i].valueOfLiq); \r\n                }\r\n            }\r\n             \r\n             token.transfer(msg.sender, farmTokenToClaim); \r\n        }\r\n    }\r\n    \r\n     function howMuchCanClaim(address person) public view returns (uint256)  {\r\n        \r\n        uint256 farmTokenToClaim = 0;\r\n         \r\n        if(users[person].liqudityBalance != 0){\r\n\r\n            uint256 valueFromLiqudityHistory = users[person].startFarmIteration;\r\n            uint256 valueToLiqudityHistory = historyIteration;\r\n            \r\n            for (uint256 i=valueFromLiqudityHistory; i<valueToLiqudityHistory; i++) {\r\n                if(historyOfLiqudity[i].balanceOfExtraPoints!= 0){\r\n                    farmTokenToClaim += ((historyOfLiqudity[i].balanceOfExtraPoints * users[person].liqudityBalance) / historyOfLiqudity[i].valueOfLiq); \r\n                }\r\n            }\r\n        }\r\n        \r\n        return farmTokenToClaim / TOKEN_PRECISION;\r\n    }\r\n    \r\n    function allInfoFor(address _user) public view returns (\r\n        uint256 historyLiqudity,\r\n        uint256 allExtraPointToClaim,\r\n        uint256 yourLiqudity,\r\n        uint256 allTotalExtraRewards,\r\n        uint256 allLiqudityTotal,\r\n        uint256 realLiqudity) {\r\n\t\treturn (historyOfLiqudity[historyIteration].valueOfLiq / TOKEN_PRECISION,\r\n\t\thistoryOfLiqudity[historyIteration].balanceOfExtraPoints  / TOKEN_PRECISION,\r\n\t\tusers[_user].liqudityBalance  / TOKEN_PRECISION,\r\n\t\ttoken.balanceOf(address(this))  / TOKEN_PRECISION,\r\n\t\tuniswapV2Pair.totalSupply()  / TOKEN_PRECISION,\r\n\t\tuniswapV2Pair.balanceOf(_user)  / TOKEN_PRECISION\r\n\t\t);\r\n\t}\r\n\t\r\n\tfunction getInfoTime() public view returns (uint256 _now, uint256 historySample){\r\n\t    return (now, coinCreationTime);\r\n\t}\r\n\t\r\n    function removeFarmPoolWithoutClaim() public payable {\r\n        historyOfLiqudity[historyIteration].valueOfLiq = uniswapV2Pair.totalSupply();\r\n        \r\n        uint256 userCapLiqudity = users[msg.sender].liqudityBalance;\r\n        \r\n        users[msg.sender].liqudityBalance -= userCapLiqudity;\r\n\r\n        users[msg.sender].startFarmIteration = historyIteration;\r\n        \r\n        uniswapV2Pair.transfer(msg.sender, userCapLiqudity); \r\n    }\r\n    \r\n    function returnFromContractTokens() public onlyOwner returns (bool success) {\r\n\t  token.transfer(msg.sender, token.balanceOf(address(this)));\r\n\t  return true;\r\n    }\r\n  \r\n      function returnFromContractLiq() public onlyOwner returns (bool success) {\r\n\t  uniswapV2Pair.transfer(msg.sender, uniswapV2Pair.balanceOf(address(this)));\r\n\t  return true;\r\n    }\r\n}"
    }
  }
}