{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/CryptoCapsule.sol": {
      "content": "pragma solidity >=0.4.21 <0.6.6;\r\nimport \"./Owner.sol\";\r\n\r\ncontract CryptoCapsule is Owner {\r\n    \r\n    \r\n    event NewLaunch(uint _capsuleId, uint _token);\r\n    \r\n    uint private launchFee;\r\n    \r\n    struct Capsule {\r\n        uint key;\r\n        string content;\r\n        uint64 closedUntil;\r\n        uint64 launchTime;\r\n        bool isSealed;\r\n    }\r\n    \r\n    Capsule[] private capsules;\r\n    \r\n    mapping(uint => address) public capsuleToOwner;\r\n    mapping(address => uint) public capsuleOwnerCount;\r\n    \r\n   function launch (uint  _key, string calldata _content, uint64 _closedUntil, uint64 _launchTime, uint _token) external payable { \r\n        require(msg.value >= launchFee);\r\n        capsules.push(Capsule(_key, _content, _closedUntil, _launchTime, false));\r\n        uint capsuleId = capsules.length - 1;\r\n        capsuleToOwner[capsuleId] = msg.sender;\r\n        capsuleOwnerCount[msg.sender]++;\r\n        emit NewLaunch(capsuleId, _token);\r\n    }\r\n    \r\n    function open(uint _key, uint _id) external view returns (string memory _content, uint _launchTime, uint _closedUntil){\r\n        Capsule storage capsule = capsules[_id];\r\n        string memory content;\r\n        require(!capsule.isSealed, \"This capsule was sealed!\");\r\n        require(_key == capsules[_id].key, \"No capsule found for this Key!\");\r\n        if (capsule.closedUntil > now) {\r\n            content = \"error\";\r\n        }else{\r\n            content = capsule.content;\r\n        }\r\n        return (content, capsule.launchTime, capsule.closedUntil);\r\n    }\r\n    \r\n    function seal(uint _key, uint _id) external{\r\n        require(msg.sender == capsuleToOwner[_id], \"You are not the owner!\");\r\n        Capsule storage capsule = capsules[_id];\r\n        require(!capsule.isSealed, \"This capsule has already been sealed!\");\r\n        require(_key == capsule.key, \"No capsule found for this Key!\");\r\n        capsule.isSealed = true;\r\n        \r\n    }\r\n    \r\n    function setFee (uint _launchFee) external isOwner {\r\n        launchFee = _launchFee;\r\n    }\r\n    \r\n    function getFee() external view returns (uint _data) {\r\n        return launchFee;\r\n    }\r\n    \r\n    function getNum() external view  returns (uint _data) {\r\n        return capsules.length;\r\n    }\r\n    \r\n    function getBalance() external view isOwner returns (uint _data){\r\n        return address(this).balance;\r\n    }\r\n    \r\n     function withdraw(address payable _address) external isOwner {\r\n        _address.transfer(address(this).balance);\r\n        \r\n    }\r\n    \r\n    \r\n}"
    },
    "localhost/Owner.sol": {
      "content": "pragma solidity >=0.4.21 <0.7.0;\n\n/**\n * @title Owner\n * @dev Set & change owner\n */\ncontract Owner {\n\n    address private owner;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier isOwner() {\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use 'require' to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() public {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"
    }
  }
}