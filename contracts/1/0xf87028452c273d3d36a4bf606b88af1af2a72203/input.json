{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/test.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface OasisInterface {\n    function getMinSell(TokenInterface pay_gem) external view returns (uint);\n    function getBuyAmount(address dest, address src, uint srcAmt) external view returns(uint);\n\tfunction getPayAmount(address src, address dest, uint destAmt) external view returns (uint);\n\tfunction sellAllAmount(\n        address src,\n        uint srcAmt,\n        address dest,\n        uint minDest\n    ) external returns (uint destAmt);\n\tfunction buyAllAmount(\n        address dest,\n        uint destAmt,\n        address src,\n        uint maxSrc\n    ) external returns (uint srcAmt);\n\n    function offer(\n        uint pay_amt,\n        TokenInterface pay_gem,\n        uint buy_amt,\n        TokenInterface buy_gem,\n        uint pos\n    ) external returns (uint);\n    function cancel(uint id) external returns (bool success);\n}\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\n// interface AccountInterface {\n//     function isAuth(address _user) external view returns (bool);\n// }\n\n// interface MemoryInterface {\n//     function getUint(uint _id) external returns (uint _num);\n//     function setUint(uint _id, uint _val) external;\n// }\n\n// interface EventInterface {\n//     function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\n// }\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n    /**\n     * @dev Return ethereum address\n     */\n    function getAddressETH() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n    }\n}\n\n\ncontract OasisHelpers is Helpers {\n    /**\n     * @dev Return WETH address\n     */\n    function getAddressWETH() internal pure returns (address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // change7878\n    }\n\n    /**\n     * @dev Return Compound Comptroller Address\n     */\n    function getOasisAddr() internal pure returns (address) {\n        return 0x794e6e91555438aFc3ccF1c5076A74F42133d08D; // change7878\n    }\n\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\n        _buy = buy == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\n        _sell = sell == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\n    }\n\n    // function convertEthToWeth(TokenInterface token, uint amount) internal {\n    //     if(address(token) == getAddressWETH()) token.deposit.value(amount)();\n    // }\n\n    // function convertWethToEth(TokenInterface token, uint amount) internal {\n    //   if(address(token) == getAddressWETH()) {\n    //         token.approve(getAddressWETH(), amount);\n    //         token.withdraw(amount);\n    //     }\n    // }\n}\n\n\ncontract BasicResolver is OasisHelpers {\n    // event LogBuy(\n    //     address indexed buyToken,\n    //     address indexed sellToken,\n    //     uint256 buyAmt,\n    //     uint256 sellAmt,\n    //     uint256 getId,\n    //     uint256 setId\n    // );\n\n    // event LogSell(\n    //     address indexed buyToken,\n    //     address indexed sellToken,\n    //     uint256 buyAmt,\n    //     uint256 sellAmt,\n    //     uint256 getId,\n    //     uint256 setId\n    // );\n\n    function buy(\n        address buyAddr,\n        address sellAddr,\n        uint buyAmt,\n        uint sellAmt,\n        uint slippage,\n        uint getId\n    ) external view returns (uint _buyAmt, uint _sellAmt, uint _slippageAmt, uint _expectedAmt) {\n        _buyAmt = getId;\n\n        _sellAmt = _buyAmt == buyAmt ? sellAmt : wmul(sellAmt, wdiv(_buyAmt, buyAmt));\n\n        OasisInterface oasisContract = OasisInterface(getOasisAddr());\n\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\n        require(oasisContract.getMinSell(_sellAddr) <= _sellAmt, \"less-than-min-pay-amt\");\n\n        _slippageAmt = wmul(_sellAmt, add(WAD, slippage));\n        _expectedAmt = oasisContract.getPayAmount(address(_sellAddr), address(_buyAddr), _buyAmt);\n        // require(_slippageAmt >= _expectedAmt, \"Too much slippage\");\n\n        // convertEthToWeth(_sellAddr, _expectedAmt);\n        // _sellAddr.approve(getOasisAddr(), _expectedAmt);\n\n        // _sellAmt = oasisContract.buyAllAmount(\n        //     address(_buyAddr),\n        //     buyAmt,\n        //     address(_sellAddr),\n        //     _slippageAmt\n        // );\n\n        // convertWethToEth(_buyAddr, buyAmt);\n\n        // emit LogBuy(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, getId, setId);\n\n    }\n\n    function sell(\n        address buyAddr,\n        address sellAddr,\n        uint buyAmt,\n        uint sellAmt,\n        uint slippage,\n        uint getId\n    ) external view returns (uint _buyAmt, uint _sellAmt, uint _slippageAmt, uint _expectedAmt){\n        _sellAmt = getId;\n\n        _buyAmt = _sellAmt == sellAmt ? buyAmt : wmul(buyAmt, wdiv(_sellAmt, sellAmt));\n\n        OasisInterface oasisContract = OasisInterface(getOasisAddr());\n\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\n        require(oasisContract.getMinSell(_sellAddr) <= _sellAmt, \"less-than-min-pay-amt\");\n\n        _slippageAmt = wdiv(_buyAmt, add(WAD, slippage));\n        _expectedAmt = oasisContract.getBuyAmount(address(_sellAddr), address(_buyAddr), sellAmt);\n        // require(_slippageAmt >= _expectedAmt, \"Too much slippage\");\n\n        // convertEthToWeth(_sellAddr, sellAmt);\n        // _sellAddr.approve(getOasisAddr(), _sellAmt);\n\n        // _buyAmt = oasisContract.sellAllAmount(\n        //     address(_sellAddr),\n        //     _sellAmt,\n        //     address(_buyAddr),\n        //   _slippageAmt\n        // );\n\n        // convertWethToEth(_buyAddr, _buyAmt);\n        // emit LogSell(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, getId, setId);\n\n    }\n}"
    }
  }
}