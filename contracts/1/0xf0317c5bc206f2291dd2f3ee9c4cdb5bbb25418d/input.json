{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"dsaV2Test.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ninterface AaveProtocolDataProvider {\n    function getUserReserveData(address asset, address user) external view returns (\n        uint256 currentATokenBalance,\n        uint256 currentStableDebt,\n        uint256 currentVariableDebt,\n        uint256 principalStableDebt,\n        uint256 scaledVariableDebt,\n        uint256 stableBorrowRate,\n        uint256 liquidityRate,\n        uint40 stableRateLastUpdated,\n        bool usageAsCollateralEnabled\n    );\n\n    function getReserveConfigurationData(address asset) external view returns (\n        uint256 decimals,\n        uint256 ltv,\n        uint256 liquidationThreshold,\n        uint256 liquidationBonus,\n        uint256 reserveFactor,\n        bool usageAsCollateralEnabled,\n        bool borrowingEnabled,\n        bool stableBorrowRateEnabled,\n        bool isActive,\n        bool isFrozen\n    );\n\n    function getReserveData(address asset) external view returns (\n        uint256 availableLiquidity,\n        uint256 totalStableDebt,\n        uint256 totalVariableDebt,\n        uint256 liquidityRate,\n        uint256 variableBorrowRate,\n        uint256 stableBorrowRate,\n        uint256 averageStableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex,\n        uint40 lastUpdateTimestamp\n    );\n\n    function getReserveTokensAddresses(address asset) external view returns (\n        address aTokenAddress,\n        address stableDebtTokenAddress,\n        address variableDebtTokenAddress\n    );\n}\n\ninterface AaveLendingPool {\n    function getUserAccountData(address user) external view returns (\n        uint256 totalCollateralETH,\n        uint256 totalDebtETH,\n        uint256 availableBorrowsETH,\n        uint256 currentLiquidationThreshold,\n        uint256 ltv,\n        uint256 healthFactor\n    );\n}\n\ninterface TokenInterface {\n    function totalSupply() external view returns (uint);\n}\n\ninterface AaveAddressProvider {\n    function getLendingPool() external view returns (address);\n    function getPriceOracle() external view returns (address);\n}\n\ninterface AavePriceOracle {\n    function getAssetPrice(address _asset) external view returns(uint256);\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\n    function getSourceOfAsset(address _asset) external view returns(uint256);\n    function getFallbackOracle() external view returns(uint256);\n}\n\ninterface AaveIncentivesInterface {\n    struct AssetData {\n        uint128 emissionPerSecond;\n        uint128 lastUpdateTimestamp;\n        uint256 index;\n    }\n\n    function getRewardsBalance(\n        address[] calldata assets,\n        address user\n    ) external view returns (uint256);\n\n    function assets(\n        address asset\n    ) external view returns (AssetData memory);\n}\n\ninterface ChainLinkInterface {\n    function latestAnswer() external view returns (int256);\n    function decimals() external view returns (uint256);\n}\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        z = x - y <= x ? x - y : 0;\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\ncontract AaveHelpers is DSMath {\n     /**\n     * @dev Return ethereum address\n     */\n    function getEthAddr() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n    }\n\n    /**\n     * @dev Return Weth address\n    */\n    function getWethAddr() internal pure returns (address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Mainnet WETH Address\n        // return 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // Kovan WETH Address\n    }\n    \n    /**\n     * @dev get Aave Provider Address\n    */\n    function getAaveAddressProvider() internal pure returns (address) {\n        return 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5; // Mainnet\n        // return 0x652B2937Efd0B5beA1c8d54293FC1289672AFC6b; // Kovan\n    }\n\n    /**\n     * @dev get Aave Protocol Data Provider\n    */\n    function getAaveProtocolDataProvider() internal pure returns (address) {\n        return 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d; // Mainnet\n        // return 0x744C1aaA95232EeF8A9994C4E0b3a89659D9AB79; // Kovan\n    }\n\n    /**\n     * @dev get Chainlink ETH price feed Address\n    */\n    function getChainlinkEthFeed() internal pure returns (address) {\n        return 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; //mainnet\n        // return 0x9326BFA02ADD2366b30bacB125260Af641031331; //kovan\n    }\n\n    /**\n     * @dev Aave Incentives address\n    */\n    function getAaveIncentivesAddress() internal pure returns (address) {\n        return 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5; // polygon mainnet\n    }\n\n    struct AaveUserTokenData {\n        uint tokenPriceInEth;\n        uint tokenPriceInUsd;\n        uint supplyBalance;\n        uint stableBorrowBalance;\n        uint variableBorrowBalance;\n        uint supplyRate;\n        uint stableBorrowRate;\n        uint userStableBorrowRate;\n        uint variableBorrowRate;\n        bool isCollateral;\n        AaveTokenData aaveTokenData;\n    }\n\n    struct AaveUserData {\n        uint totalCollateralETH;\n        uint totalBorrowsETH;\n        uint availableBorrowsETH;\n        uint currentLiquidationThreshold;\n        uint ltv;\n        uint healthFactor;\n        uint ethPriceInUsd;\n        uint pendingRewards;\n    }\n\n    struct AaveTokenData {\n        uint ltv;\n        uint threshold;\n        uint reserveFactor;\n        bool usageAsCollEnabled;\n        bool borrowEnabled;\n        bool stableBorrowEnabled;\n        bool isActive;\n        bool isFrozen;\n        uint totalSupply;\n        uint availableLiquidity;\n        uint totalStableDebt;\n        uint totalVariableDebt;\n        uint collateralEmission;\n        uint debtEmission;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n    }\n\n     struct TokenPrice {\n        uint priceInEth;\n        uint priceInUsd;\n    }\n\n    function getTokensPrices(AaveAddressProvider aaveAddressProvider, address[] memory tokens) \n    internal view returns(TokenPrice[] memory tokenPrices, uint ethPrice) {\n        uint[] memory _tokenPrices = AavePriceOracle(aaveAddressProvider.getPriceOracle()).getAssetsPrices(tokens);\n        ethPrice = uint(ChainLinkInterface(getChainlinkEthFeed()).latestAnswer());\n        tokenPrices = new TokenPrice[](_tokenPrices.length);\n        for (uint i = 0; i < _tokenPrices.length; i++) {\n            tokenPrices[i] = TokenPrice(\n                _tokenPrices[i],\n                wmul(_tokenPrices[i], uint(ethPrice) * 10 ** 10)\n            );\n        }\n    }\n\n    function collateralData(\n        AaveProtocolDataProvider aaveData,\n        address token\n    ) internal view returns (AaveTokenData memory aaveTokenData) {\n        (\n            ,\n            aaveTokenData.ltv,\n            aaveTokenData.threshold,\n            ,\n            aaveTokenData.reserveFactor,\n            aaveTokenData.usageAsCollEnabled,\n            aaveTokenData.borrowEnabled,\n            aaveTokenData.stableBorrowEnabled,\n            aaveTokenData.isActive,\n            aaveTokenData.isFrozen\n        ) = aaveData.getReserveConfigurationData(token);\n\n        (\n            aaveTokenData.aTokenAddress,\n            aaveTokenData.stableDebtTokenAddress,\n            aaveTokenData.variableDebtTokenAddress\n        ) = aaveData.getReserveTokensAddresses(token);\n\n        AaveIncentivesInterface.AssetData memory _data;\n        AaveIncentivesInterface incentives = AaveIncentivesInterface(getAaveIncentivesAddress());\n\n        _data = incentives.assets(aaveTokenData.aTokenAddress);\n        aaveTokenData.collateralEmission = _data.emissionPerSecond;\n        _data = incentives.assets(aaveTokenData.variableDebtTokenAddress);\n        aaveTokenData.debtEmission = _data.emissionPerSecond;\n        aaveTokenData.totalSupply = TokenInterface(aaveTokenData.aTokenAddress).totalSupply();\n    }\n\n    function getTokenData(\n        AaveProtocolDataProvider aaveData,\n        address user,\n        address token,\n        uint tokenPriceInEth,\n        uint tokenPriceInUsd\n    ) internal view returns(AaveUserTokenData memory tokenData) {\n        AaveTokenData memory aaveTokenData = collateralData(aaveData, token);\n\n        (\n            tokenData.supplyBalance,\n            tokenData.stableBorrowBalance,\n            tokenData.variableBorrowBalance,\n            ,,\n            tokenData.userStableBorrowRate,\n            ,,\n            tokenData.isCollateral\n        ) = aaveData.getUserReserveData(token, user);\n\n        (\n            aaveTokenData.availableLiquidity,\n            aaveTokenData.totalStableDebt,\n            aaveTokenData.totalVariableDebt,\n            tokenData.supplyRate,\n            tokenData.variableBorrowRate,\n            tokenData.stableBorrowRate,\n            ,,,\n        ) = aaveData.getReserveData(token);\n\n        tokenData.tokenPriceInEth = tokenPriceInEth;\n        tokenData.tokenPriceInUsd = tokenPriceInUsd;\n        tokenData.aaveTokenData = aaveTokenData;\n    }\n\n    function getPendingRewards(address[] memory _tokens, address user) internal view returns (uint rewards) {\n        uint arrLength = 2 * _tokens.length;\n        address[] memory _atokens = new address[](arrLength);\n        AaveProtocolDataProvider aaveData = AaveProtocolDataProvider(getAaveProtocolDataProvider());\n        for (uint i = 0; i < _tokens.length; i++) {\n            (_atokens[2*i],,_atokens[2*i + 1]) = aaveData.getReserveTokensAddresses(_tokens[i]);\n        }\n        rewards = AaveIncentivesInterface(getAaveIncentivesAddress()).getRewardsBalance(_atokens, user);\n    }\n\n    function getUserData(AaveLendingPool aave, address user, uint ethPriceInUsd, address[] memory tokens)\n    internal view returns (AaveUserData memory userData) {\n        (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        ) = aave.getUserAccountData(user);\n\n        uint256 pendingRewards = getPendingRewards(tokens, user);\n\n        userData = AaveUserData(\n            totalCollateralETH,\n            totalDebtETH,\n            availableBorrowsETH,\n            currentLiquidationThreshold,\n            ltv,\n            healthFactor,\n            ethPriceInUsd,\n            pendingRewards\n        );\n    }\n}\n\ncontract Resolver is AaveHelpers {\n    function getPosition(address user, address[] memory tokens) public view returns(AaveUserTokenData[] memory, AaveUserData memory) {\n        AaveAddressProvider addrProvider = AaveAddressProvider(getAaveAddressProvider());\n        uint length = tokens.length;\n        address[] memory _tokens = new address[](length);\n\n        for (uint i = 0; i < length; i++) {\n            _tokens[i] = tokens[i] == getEthAddr() ? getWethAddr() : tokens[i];\n        }\n\n        AaveUserTokenData[] memory tokensData = new AaveUserTokenData[](length);\n        (TokenPrice[] memory tokenPrices, uint ethPrice) = getTokensPrices(addrProvider, _tokens);\n\n        for (uint i = 0; i < length; i++) {\n            tokensData[i] = getTokenData(\n                AaveProtocolDataProvider(getAaveProtocolDataProvider()),\n                user,\n                _tokens[i],\n                tokenPrices[i].priceInEth,\n                tokenPrices[i].priceInUsd\n            );\n        }\n\n        return (tokensData, getUserData(AaveLendingPool(addrProvider.getLendingPool()), user, ethPrice, _tokens));\n    }\n}\n\ncontract InstaAaveV2Resolver is Resolver {\n    string public constant name = \"AaveV2-Resolver-v1.7\";\n}"}}}