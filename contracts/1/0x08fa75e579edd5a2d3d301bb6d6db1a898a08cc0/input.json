{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/MerkleMint.sol":{"content":"// hevm: flattened sources of src/MerkleMint.sol\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../utils/Context.sol\"; */\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n\n////// src/MerkleMint.sol\n/* pragma solidity ^0.8.0; */\n\n/* import \"@openzeppelin/contracts/access/Ownable.sol\"; */\n/* import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\"; */\n/* import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\"; */\n\ninterface IERC1155_2 {\n    function mint(address, uint256, uint256) external;\n    function totalSupply(uint256) external view returns (uint256);\n}\n\ncontract MerkleMint is Ownable, ReentrancyGuard {\n    IERC1155_2 public immutable token;\n    uint256 public immutable id;\n    bytes32 public immutable merkleRootPresale;\n    bytes32 public immutable merkleRoot;\n    uint256 public constant PRICE = 0.08 ether;\n    uint256 public constant START = 1634140800;\n    uint256 public constant MAX = 2949;\n\n    // This is a packed array of booleans.\n    mapping(uint256 => uint256) private claimedBitMapPresale;\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    event Minted(uint256 index, address account, uint256 amount);\n\n    constructor(\n        address _token,\n        uint256 _id,\n        bytes32 _merkleRoot,\n        bytes32 _merkleRootPresale\n    ) {\n        token = IERC1155_2(_token);\n        id = _id;\n        merkleRoot = _merkleRoot;\n        merkleRootPresale = _merkleRootPresale;\n    }\n\n    function amountLeft() public view returns(uint256) {\n        return MAX - token.totalSupply(id);\n    }\n\n    function isMintedPresale(uint256 index) public view returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMapPresale[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _setMintedPresale(uint256 index) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMapPresale[claimedWordIndex] =\n            claimedBitMapPresale[claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    function isMinted(uint256 index) public view returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _setMinted(uint256 index) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMap[claimedWordIndex] =\n            claimedBitMap[claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    function mintPresale(\n        uint256 amount,\n        uint256 index,\n        address account,\n        bytes32[] calldata merkleProof\n    ) external payable nonReentrant() {\n        require(block.timestamp > START, \"too soon\");\n        require(msg.value == amount * PRICE, \"wrong price\");\n        require(!isMintedPresale(index), \"already minted\");\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRootPresale, node),\n            \"invalid proof\"\n        );\n\n        // Mark it claimed and send the token.\n        _setMintedPresale(index);\n        _mint(account, amount, index);\n    }\n\n    function mint(\n        uint256 amount,\n        uint256 index,\n        address account,\n        bytes32[] calldata merkleProof\n    ) external payable nonReentrant() {\n        require(amount < 6, \"too many\");\n        require(!isMinted(index), \"already minted\");\n        require(block.timestamp > START + 1 days, \"too soon\");\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(index, account, uint256(1)));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoot, node),\n            \"invalid proof\"\n        );\n\n        // Mark it claimed and send the token.\n        _setMinted(index);\n        _mint(account, amount, index);\n    }\n\n    function mintLeftover(uint256 amount) external payable nonReentrant() {\n        require(block.timestamp > START + 2 days, \"too soon\");\n        _mint(msg.sender, amount, 99999);\n    }\n\n    function _mint(address to, uint256 amount, uint256 index) internal {\n        require(amount <= amountLeft(), \"too many\");\n        require(msg.value == amount * PRICE, \"wrong price\");\n        token.mint(to, id, amount);\n        emit Minted(index, msg.sender, amount);\n    }\n\n    function devMint(uint256 amount) external onlyOwner {\n        token.mint(owner(), id, amount);\n    }\n\n    function withdraw() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n}"}}}