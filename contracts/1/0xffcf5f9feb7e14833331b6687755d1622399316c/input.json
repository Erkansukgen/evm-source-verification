{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ICICB.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.4.0 <0.7.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ICICB is ERC20Interface {\r\n    \r\n    string public constant name = \"ICICB\";\r\n    string public constant symbol = \"ICICB\";\r\n    uint8 public constant decimals = 0;\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event RegistrationSuccessful(uint256 nonce);\r\n    event RegistrationFailed(uint256 nonce);\r\n    \r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    uint256 totalSupply_ = 100000000;\r\n    \r\n    mapping (string => address) addressTable;\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    constructor() public{\r\n\t    balances[msg.sender] = totalSupply_;\r\n    }\r\n    \r\n    function totalSupply() public override view returns (uint256) {\r\n\t    return totalSupply_;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public override view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function balanceOf(string memory tokenOwner) public view returns (uint) {\r\n        address userAddress;\r\n        userAddress = addressTable[tokenOwner];\r\n        return balances[userAddress];\r\n    }\r\n    \r\n    function transfer(address receiver, uint numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(string memory receiver, uint numTokens) public returns (bool) {\r\n        address receiverAddress;\r\n        receiverAddress = addressTable[receiver];\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiverAddress] = balances[receiverAddress].add(numTokens);\r\n        emit Transfer(msg.sender, receiverAddress, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address delegate, uint numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function approve(string memory delegate, uint numTokens) public returns (bool) {\r\n        address delegateAddress;\r\n        delegateAddress = addressTable[delegate];\r\n        allowed[msg.sender][delegateAddress] = numTokens;\r\n        emit Approval(msg.sender, delegateAddress, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n    \r\n    function allowance(string memory owner, string memory delegate) public view returns (uint) {\r\n        address ownerAddress;\r\n        ownerAddress = addressTable[owner];\r\n        address delegateAddress;\r\n        delegateAddress = addressTable[delegate];\r\n        return allowed[ownerAddress][delegateAddress];\r\n    }\r\n    \r\n     function transferFrom(address owner, address buyer, uint numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[owner]);    \r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n    \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(string memory owner, string memory buyer, uint numTokens) public returns (bool) {\r\n        address ownerAddress;\r\n        ownerAddress = addressTable[owner];\r\n        address buyerAddress;\r\n        buyerAddress = addressTable[buyer];\r\n        \r\n        require(numTokens <= balances[ownerAddress]);    \r\n        require(numTokens <= allowed[ownerAddress][msg.sender]);\r\n    \r\n        balances[ownerAddress] = balances[ownerAddress].sub(numTokens);\r\n        allowed[ownerAddress][msg.sender] = allowed[ownerAddress][msg.sender].sub(numTokens);\r\n        balances[buyerAddress] = balances[buyerAddress].add(numTokens);\r\n        emit Transfer(ownerAddress, buyerAddress, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function registerUser(string memory user, uint256 nonce) public returns (bool) {\r\n        if (addressTable[user] == address(0)) {\r\n            addressTable[user] = msg.sender;\r\n            emit RegistrationSuccessful(nonce);\r\n            return true;\r\n        } else {\r\n            emit RegistrationFailed(nonce);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}"
    }
  }
}