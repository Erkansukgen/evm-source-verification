{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AuthCheck.sol":{"content":"pragma solidity >=0.7.0 <0.9.0;\n\nabstract contract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n}\n\nabstract contract DSProxy {\n    DSAuthority public authority;\n}\n\ncontract AuthCheck {\n        function canCall(address src, address dst, bytes4 sig) public virtual returns (bool) {\n            (bool success,) = address(this).call(\n                abi.encodeWithSignature(\"_canCall(address,address,bytes4)\", src, dst, sig)\n            );\n            if (success) return _canCall(src, dst, sig);\n            return false;\n        }\n        \n        function _canCall(address src, address dst, bytes4 sig) public view virtual returns (bool) {\n            address _auth = address(DSProxy(dst).authority());\n            if (_auth == address(0)) return false;\n            return DSAuthority(_auth).canCall(src, dst, sig);\n        }\n}"}}}