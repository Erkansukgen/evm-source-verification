{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"/Users/ebonassi/Desktop/Active_Development/yearn-truffle-verify/contracts/SimpleGuestList.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n// Feel free to change the license, but this is what we use\n\npragma solidity 0.6.12;\n\ninterface IGuestList {\n    function authorized(address guest, uint256 amount) external view returns (bool);\n}\n\ncontract SimpleGuestList is IGuestList {\n\n    address public owner;\n\n    mapping (address => bool) internal authorizedUsers;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'only owner');\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function authorized(address guest, uint256 /*amount*/) public override view returns (bool) {\n        return authorizedUsers[guest];\n    }\n\n    function inviteGuest(address guest) public onlyOwner {\n        authorizedUsers[guest] = true;\n    }\n\n    function kickGuest(address guest) public onlyOwner {\n        authorizedUsers[guest] = false;\n    }\n}"}}}