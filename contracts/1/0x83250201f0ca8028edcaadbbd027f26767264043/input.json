{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/NastroAzzurro (1).sol": {
      "content": "pragma solidity >=0.4.22 <0.7.0;\n\ncontract NastroAzzurro {\n\n    struct Mais {\n        string id;\n        string data;\n    }\n\n    struct Agricoltore {\n        string id;\n        string data;\n    }\n\n    struct Granella {\n        string id;\n        string data;\n    }\n\n    struct Gritz {\n        string id;\n        string data;\n    }\n\n    struct Brewing {\n        string id;\n        string data;\n    }\n\n\n      // ************ Modifier *********** //\n    modifier onlyManager() {\n        require(msg.sender == owner, \"Not allowed\");\n        _;\n    }\n\n     // ************ Events ************ //\n    event MaisAdded(string, string);\n    event AgricoltoreAdded(string, string);\n    event GranellaAdded(string, string );\n    event GritzAdded(string, string);\n    event BrewingAdded(string, string);\n\n\n\n    address private owner;\n\n    mapping (string => bool) private mais_exist;\n    mapping (string => Mais) private mais_registry;\n\n    mapping (string => bool) private agricoltore_exist;\n    mapping (string => Agricoltore) private agricoltore_registry;\n\n    mapping (string => bool) private granella_exist;\n    mapping (string => Granella) private granella_registry;\n\n    mapping (string => bool) private gritz_exist;\n    mapping (string => Gritz) private gritz_registry;\n\n    mapping (string => bool) private brewing_exist;\n    mapping (string => Brewing) private brewing_registry;\n\n\n      constructor() public {\n        owner = msg.sender;\n    }\n\n\n    // *************** Setter Functions ************* //\n\n     function addMais (\n        string calldata id,\n        string calldata data\n        ) external onlyManager  {\n            require(bytes(id).length > 0, 'Id is required');\n            require(mais_exist[id] == false, 'Already exist');\n            require(bytes(data).length > 0, 'Data is required');\n\n            Mais memory mais_tmp;\n            mais_tmp.id = id;\n            mais_tmp.data = data;\n\n            mais_exist[id] = true;\n            mais_registry[id] = mais_tmp;\n\n            emit MaisAdded(\"New mais added with ID: \", id);\n        }\n\n\n    function addAgricoltore (\n        string calldata id,\n        string calldata data\n        ) external onlyManager  {\n            require(bytes(id).length > 0, 'Id is required');\n            require(agricoltore_exist[id] == false, 'Already exist');\n            require(bytes(data).length > 0, 'Data is required');\n\n            Agricoltore memory agricoltore_tmp;\n            agricoltore_tmp.id = id;\n            agricoltore_tmp.data = data;\n\n            agricoltore_exist[id] = true;\n            agricoltore_registry[id] = agricoltore_tmp;\n\n            emit AgricoltoreAdded(\"New agricoltore added with ID: \", id);\n        }\n\n\n    function addGranella (\n        string calldata id,\n        string calldata data\n        ) external onlyManager  {\n            require(bytes(id).length > 0, 'Id is required');\n            require(granella_exist[id] == false, 'Already exist');\n            require(bytes(data).length > 0, 'Data is required');\n\n            Granella memory granella_tmp;\n            granella_tmp.id = id;\n            granella_tmp.data = data;\n\n            granella_exist[id] = true;\n            granella_registry[id] = granella_tmp;\n\n            emit GranellaAdded(\"New granella added with ID: \", id);\n        }\n\n\n    function addGritz (\n        string calldata id,\n        string calldata data\n        ) external onlyManager  {\n            require(bytes(id).length > 0, 'Id is required');\n            require(gritz_exist[id] == false, 'Already exist');\n            require(bytes(data).length > 0, 'Data is required');\n\n            Gritz memory gritz_tmp;\n            gritz_tmp.id = id;\n            gritz_tmp.data = data;\n\n            gritz_exist[id] = true;\n            gritz_registry[id] = gritz_tmp;\n\n            emit GritzAdded(\"New gritz added with ID: \", id);\n        }\n\n\n    function addBrewing (\n        string calldata id,\n        string calldata data\n        ) external onlyManager  {\n            require(bytes(id).length > 0, 'Id is required');\n            require(brewing_exist[id] == false, 'Already exist');\n            require(bytes(data).length > 0, 'Data is required');\n\n            Brewing memory brewing_tmp;\n            brewing_tmp.id = id;\n            brewing_tmp.data = data;\n\n            brewing_exist[id] = true;\n            brewing_registry[id] = brewing_tmp;\n\n            emit GranellaAdded(\"New brewing added with ID: \", id);\n        }\n\n\n\n        // *************** Getter Functions ************* //\n\n    function getMais(string calldata  id) external view returns (string memory , string memory) {\n        require(bytes(id).length > 0, 'Id is required');\n        require(mais_exist[id] == true, 'Mais not found');\n\n        return (\n            mais_registry[id].id,\n            mais_registry[id].data\n            );\n    }\n\n    function getAgricoltore(string calldata  id) external view returns (string memory , string memory) {\n        require(bytes(id).length > 0, 'Id is required');\n        require(agricoltore_exist[id] == true, 'Agricoltore not found');\n\n        return (\n            agricoltore_registry[id].id,\n            agricoltore_registry[id].data\n            );\n    }\n\n\n    function getGranella(string calldata  id) external view returns (string memory , string memory) {\n        require(bytes(id).length > 0, 'Id is required');\n        require(granella_exist[id] == true, 'Granella not found');\n\n        return (\n            granella_registry[id].id,\n            granella_registry[id].data\n            );\n    }\n\n\n    function getGrotz(string calldata  id) external view returns (string memory , string memory) {\n        require(bytes(id).length > 0, 'Id is required');\n        require(gritz_exist[id] == true, 'Gritz not found');\n\n        return (\n            gritz_registry[id].id,\n            gritz_registry[id].data\n            );\n    }\n\n\n    function getBrewing(string calldata  id) external view returns (string memory , string memory) {\n        require(bytes(id).length > 0, 'Id is required');\n        require(brewing_exist[id] == true, 'Brewing not found');\n\n        return (\n            brewing_registry[id].id,\n            brewing_registry[id].data\n            );\n    }\n\n}"
    }
  }
}