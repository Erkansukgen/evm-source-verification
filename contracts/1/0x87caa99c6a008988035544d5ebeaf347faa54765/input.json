{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/NugBudz.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\r\r\r// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\rpragma solidity ^0.8.0;\r\r/**\r\r * @dev Interface of the ERC165 standard, as defined in the\r\r * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\r *\r\r * Implementers can declare support of contract interfaces, which can then be\r\r * queried by others ({ERC165Checker}).\r\r *\r\r * For an implementation, see {ERC165}.\r\r */\r\rinterface IERC165 {\r\r    /**\r\r     * @dev Returns true if this contract implements the interface defined by\r\r     * `interfaceId`. See the corresponding\r\r     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\r     * to learn more about how these ids are created.\r\r     *\r\r     * This function call must use less than 30 000 gas.\r\r     */\r\r    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\r}\r\r\r\r// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\rpragma solidity ^0.8.0;\r\r/**\r\r * @dev Required interface of an ERC721 compliant contract.\r\r */\r\rinterface IERC721 is IERC165 {\r\r    /**\r\r     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\r     */\r\r    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\r\r\r    /**\r\r     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\r     */\r\r    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\r\r\r    /**\r\r     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\r     */\r\r    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\r\r\r    /**\r\r     * @dev Returns the number of tokens in ``owner``'s account.\r\r     */\r\r    function balanceOf(address owner) external view returns (uint256 balance);\r\r\r\r    /**\r\r     * @dev Returns the owner of the `tokenId` token.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `tokenId` must exist.\r\r     */\r\r    function ownerOf(uint256 tokenId) external view returns (address owner);\r\r\r\r    /**\r\r     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\r     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `from` cannot be the zero address.\r\r     * - `to` cannot be the zero address.\r\r     * - `tokenId` token must exist and be owned by `from`.\r\r     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\r     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function safeTransferFrom(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId\r\r    ) external;\r\r\r\r    /**\r\r     * @dev Transfers `tokenId` token from `from` to `to`.\r\r     *\r\r     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `from` cannot be the zero address.\r\r     * - `to` cannot be the zero address.\r\r     * - `tokenId` token must be owned by `from`.\r\r     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function transferFrom(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId\r\r    ) external;\r\r\r\r    /**\r\r     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\r     * The approval is cleared when the token is transferred.\r\r     *\r\r     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - The caller must own the token or be an approved operator.\r\r     * - `tokenId` must exist.\r\r     *\r\r     * Emits an {Approval} event.\r\r     */\r\r    function approve(address to, uint256 tokenId) external;\r\r\r\r    /**\r\r     * @dev Returns the account approved for `tokenId` token.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `tokenId` must exist.\r\r     */\r\r    function getApproved(uint256 tokenId) external view returns (address operator);\r\r\r\r    /**\r\r     * @dev Approve or remove `operator` as an operator for the caller.\r\r     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - The `operator` cannot be the caller.\r\r     *\r\r     * Emits an {ApprovalForAll} event.\r\r     */\r\r    function setApprovalForAll(address operator, bool _approved) external;\r\r\r\r    /**\r\r     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\r     *\r\r     * See {setApprovalForAll}\r\r     */\r\r    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\r\r\r    /**\r\r     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `from` cannot be the zero address.\r\r     * - `to` cannot be the zero address.\r\r     * - `tokenId` token must exist and be owned by `from`.\r\r     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\r     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function safeTransferFrom(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId,\r\r        bytes calldata data\r\r    ) external;\r\r}\r\r\r\r\r\r// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\rpragma solidity ^0.8.0;\r\r/**\r\r * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\r * @dev See https://eips.ethereum.org/EIPS/eip-721\r\r */\r\rinterface IERC721Enumerable is IERC721 {\r\r    /**\r\r     * @dev Returns the total amount of tokens stored by the contract.\r\r     */\r\r    function totalSupply() external view returns (uint256);\r\r\r\r    /**\r\r     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\r     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\r     */\r\r    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\r\r\r    /**\r\r     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\r     * Use along with {totalSupply} to enumerate all tokens.\r\r     */\r\r    function tokenByIndex(uint256 index) external view returns (uint256);\r\r}\r\r\r\r\r\r// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\rpragma solidity ^0.8.0;\r\r/**\r\r * @dev Implementation of the {IERC165} interface.\r\r *\r\r * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\r * for the additional interface id that will be supported. For example:\r\r *\r\r * ```solidity\r\r * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\r *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\r * }\r\r * ```\r\r *\r\r * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\r */\r\rabstract contract ERC165 is IERC165 {\r\r    /**\r\r     * @dev See {IERC165-supportsInterface}.\r\r     */\r\r    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\r        return interfaceId == type(IERC165).interfaceId;\r\r    }\r\r}\r\r\r\r// File: @openzeppelin/contracts/utils/Strings.sol\r\r\r\r\r\r\r\rpragma solidity ^0.8.0;\r\r\r\r/**\r\r * @dev String operations.\r\r */\r\rlibrary Strings {\r\r    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\r\r\r    /**\r\r     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\r     */\r\r    function toString(uint256 value) internal pure returns (string memory) {\r\r        // Inspired by OraclizeAPI's implementation - MIT licence\r\r        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\r\r\r        if (value == 0) {\r\r            return \"0\";\r\r        }\r\r        uint256 temp = value;\r\r        uint256 digits;\r\r        while (temp != 0) {\r\r            digits++;\r\r            temp /= 10;\r\r        }\r\r        bytes memory buffer = new bytes(digits);\r\r        while (value != 0) {\r\r            digits -= 1;\r\r            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\r            value /= 10;\r\r        }\r\r        return string(buffer);\r\r    }\r\r\r\r    /**\r\r     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\r     */\r\r    function toHexString(uint256 value) internal pure returns (string memory) {\r\r        if (value == 0) {\r\r            return \"0x00\";\r\r        }\r\r        uint256 temp = value;\r\r        uint256 length = 0;\r\r        while (temp != 0) {\r\r            length++;\r\r            temp >>= 8;\r\r        }\r\r        return toHexString(value, length);\r\r    }\r\r\r\r    /**\r\r     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\r     */\r\r    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\r        bytes memory buffer = new bytes(2 * length + 2);\r\r        buffer[0] = \"0\";\r\r        buffer[1] = \"x\";\r\r        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\r            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\r            value >>= 4;\r\r        }\r\r        require(value == 0, \"Strings: hex length insufficient\");\r\r        return string(buffer);\r\r    }\r\r}\r\r\r\r// File: @openzeppelin/contracts/utils/Address.sol\r\r\r\r\r\r\r\rpragma solidity ^0.8.0;\r\r\r\r/**\r\r * @dev Collection of functions related to the address type\r\r */\r\rlibrary Address {\r\r    /**\r\r     * @dev Returns true if `account` is a contract.\r\r     *\r\r     * [IMPORTANT]\r\r     * ====\r\r     * It is unsafe to assume that an address for which this function returns\r\r     * false is an externally-owned account (EOA) and not a contract.\r\r     *\r\r     * Among others, `isContract` will return false for the following\r\r     * types of addresses:\r\r     *\r\r     *  - an externally-owned account\r\r     *  - a contract in construction\r\r     *  - an address where a contract will be created\r\r     *  - an address where a contract lived, but was destroyed\r\r     * ====\r\r     */\r\r    function isContract(address account) internal view returns (bool) {\r\r        // This method relies on extcodesize, which returns 0 for contracts in\r\r        // construction, since the code is only stored at the end of the\r\r        // constructor execution.\r\r\r\r        uint256 size;\r\r        assembly {\r\r            size := extcodesize(account)\r\r        }\r\r        return size > 0;\r\r    }\r\r\r\r    /**\r\r     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\r     * `recipient`, forwarding all available gas and reverting on errors.\r\r     *\r\r     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\r     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\r     * imposed by `transfer`, making them unable to receive funds via\r\r     * `transfer`. {sendValue} removes this limitation.\r\r     *\r\r     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\r     *\r\r     * IMPORTANT: because control is transferred to `recipient`, care must be\r\r     * taken to not create reentrancy vulnerabilities. Consider using\r\r     * {ReentrancyGuard} or the\r\r     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\r     */\r\r    function sendValue(address payable recipient, uint256 amount) internal {\r\r        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\r\r\r        (bool success, ) = recipient.call{value: amount}(\"\");\r\r        require(success, \"Address: unable to send value, recipient may have reverted\");\r\r    }\r\r\r\r    /**\r\r     * @dev Performs a Solidity function call using a low level `call`. A\r\r     * plain `call` is an unsafe replacement for a function call: use this\r\r     * function instead.\r\r     *\r\r     * If `target` reverts with a revert reason, it is bubbled up by this\r\r     * function (like regular Solidity function calls).\r\r     *\r\r     * Returns the raw returned data. To convert to the expected return value,\r\r     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `target` must be a contract.\r\r     * - calling `target` with `data` must not revert.\r\r     *\r\r     * _Available since v3.1._\r\r     */\r\r    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\r        return functionCall(target, data, \"Address: low-level call failed\");\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\r     * `errorMessage` as a fallback revert reason when `target` reverts.\r\r     *\r\r     * _Available since v3.1._\r\r     */\r\r    function functionCall(\r\r        address target,\r\r        bytes memory data,\r\r        string memory errorMessage\r\r    ) internal returns (bytes memory) {\r\r        return functionCallWithValue(target, data, 0, errorMessage);\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\r     * but also transferring `value` wei to `target`.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - the calling contract must have an ETH balance of at least `value`.\r\r     * - the called Solidity function must be `payable`.\r\r     *\r\r     * _Available since v3.1._\r\r     */\r\r    function functionCallWithValue(\r\r        address target,\r\r        bytes memory data,\r\r        uint256 value\r\r    ) internal returns (bytes memory) {\r\r        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\r     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\r     *\r\r     * _Available since v3.1._\r\r     */\r\r    function functionCallWithValue(\r\r        address target,\r\r        bytes memory data,\r\r        uint256 value,\r\r        string memory errorMessage\r\r    ) internal returns (bytes memory) {\r\r        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\r        require(isContract(target), \"Address: call to non-contract\");\r\r\r\r        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\r        return verifyCallResult(success, returndata, errorMessage);\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\r     * but performing a static call.\r\r     *\r\r     * _Available since v3.3._\r\r     */\r\r    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\r        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\r     * but performing a static call.\r\r     *\r\r     * _Available since v3.3._\r\r     */\r\r    function functionStaticCall(\r\r        address target,\r\r        bytes memory data,\r\r        string memory errorMessage\r\r    ) internal view returns (bytes memory) {\r\r        require(isContract(target), \"Address: static call to non-contract\");\r\r\r\r        (bool success, bytes memory returndata) = target.staticcall(data);\r\r        return verifyCallResult(success, returndata, errorMessage);\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\r     * but performing a delegate call.\r\r     *\r\r     * _Available since v3.4._\r\r     */\r\r    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\r        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\r     * but performing a delegate call.\r\r     *\r\r     * _Available since v3.4._\r\r     */\r\r    function functionDelegateCall(\r\r        address target,\r\r        bytes memory data,\r\r        string memory errorMessage\r\r    ) internal returns (bytes memory) {\r\r        require(isContract(target), \"Address: delegate call to non-contract\");\r\r\r\r        (bool success, bytes memory returndata) = target.delegatecall(data);\r\r        return verifyCallResult(success, returndata, errorMessage);\r\r    }\r\r\r\r    /**\r\r     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\r     * revert reason using the provided one.\r\r     *\r\r     * _Available since v4.3._\r\r     */\r\r    function verifyCallResult(\r\r        bool success,\r\r        bytes memory returndata,\r\r        string memory errorMessage\r\r    ) internal pure returns (bytes memory) {\r\r        if (success) {\r\r            return returndata;\r\r        } else {\r\r            // Look for revert reason and bubble it up if present\r\r            if (returndata.length > 0) {\r\r                // The easiest way to bubble the revert reason is using memory via assembly\r\r\r\r                assembly {\r\r                    let returndata_size := mload(returndata)\r\r                    revert(add(32, returndata), returndata_size)\r\r                }\r\r            } else {\r\r                revert(errorMessage);\r\r            }\r\r        }\r\r    }\r\r}\r\r\r\r// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\r\r\r\r\r\r\rpragma solidity ^0.8.0;\r\r\r\r\r\r/**\r\r * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\r * @dev See https://eips.ethereum.org/EIPS/eip-721\r\r */\r\rinterface IERC721Metadata is IERC721 {\r\r    /**\r\r     * @dev Returns the token collection name.\r\r     */\r\r    function name() external view returns (string memory);\r\r\r\r    /**\r\r     * @dev Returns the token collection symbol.\r\r     */\r\r    function symbol() external view returns (string memory);\r\r\r\r    /**\r\r     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\r     */\r\r    function tokenURI(uint256 tokenId) external view returns (string memory);\r\r}\r\r\r\r// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\r\r\r\r\r\r\rpragma solidity ^0.8.0;\r\r\r\r/**\r\r * @title ERC721 token receiver interface\r\r * @dev Interface for any contract that wants to support safeTransfers\r\r * from ERC721 asset contracts.\r\r */\r\rinterface IERC721Receiver {\r\r    /**\r\r     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\r     * by `operator` from `from`, this function is called.\r\r     *\r\r     * It must return its Solidity selector to confirm the token transfer.\r\r     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\r     *\r\r     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\r     */\r\r    function onERC721Received(\r\r        address operator,\r\r        address from,\r\r        uint256 tokenId,\r\r        bytes calldata data\r\r    ) external returns (bytes4);\r\r}\r\r\r\r// File: @openzeppelin/contracts/utils/Context.sol\r\rpragma solidity ^0.8.0;\r\r/**\r\r * @dev Provides information about the current execution context, including the\r\r * sender of the transaction and its data. While these are generally available\r\r * via msg.sender and msg.data, they should not be accessed in such a direct\r\r * manner, since when dealing with meta-transactions the account sending and\r\r * paying for execution may not be the actual sender (as far as an application\r\r * is concerned).\r\r *\r\r * This contract is only required for intermediate, library-like contracts.\r\r */\r\rabstract contract Context {\r\r    function _msgSender() internal view virtual returns (address) {\r\r        return msg.sender;\r\r    }\r\r\r\r    function _msgData() internal view virtual returns (bytes calldata) {\r\r        return msg.data;\r\r    }\r\r}\r\r\r\r\r\r// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\rpragma solidity ^0.8.0;\r\r/**\r\r * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\r * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\r * {ERC721Enumerable}.\r\r */\r\rcontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\r    using Address for address;\r\r    using Strings for uint256;\r\r\r\r    // Token name\r\r    string private _name;\r\r\r\r    // Token symbol\r\r    string private _symbol;\r\r\r\r    // Mapping from token ID to owner address\r\r    mapping(uint256 => address) private _owners;\r\r\r\r    // Mapping owner address to token count\r\r    mapping(address => uint256) private _balances;\r\r\r\r    // Mapping from token ID to approved address\r\r    mapping(uint256 => address) private _tokenApprovals;\r\r\r\r    // Mapping from owner to operator approvals\r\r    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\r\r\r    /**\r\r     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\r     */\r\r    constructor(string memory name_, string memory symbol_) {\r\r        _name = name_;\r\r        _symbol = symbol_;\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC165-supportsInterface}.\r\r     */\r\r    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\r        return\r\r            interfaceId == type(IERC721).interfaceId ||\r\r            interfaceId == type(IERC721Metadata).interfaceId ||\r\r            super.supportsInterface(interfaceId);\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-balanceOf}.\r\r     */\r\r    function balanceOf(address owner) public view virtual override returns (uint256) {\r\r        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\r        return _balances[owner];\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-ownerOf}.\r\r     */\r\r    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\r        address owner = _owners[tokenId];\r\r        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\r        return owner;\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721Metadata-name}.\r\r     */\r\r    function name() public view virtual override returns (string memory) {\r\r        return _name;\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721Metadata-symbol}.\r\r     */\r\r    function symbol() public view virtual override returns (string memory) {\r\r        return _symbol;\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721Metadata-tokenURI}.\r\r     */\r\r    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\r        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\r\r\r        string memory baseURI = _baseURI();\r\r        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\r    }\r\r\r\r    /**\r\r     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\r     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\r     * by default, can be overriden in child contracts.\r\r     */\r\r    function _baseURI() internal view virtual returns (string memory) {\r\r        return \"\";\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-approve}.\r\r     */\r\r    function approve(address to, uint256 tokenId) public virtual override {\r\r        address owner = ERC721.ownerOf(tokenId);\r\r        require(to != owner, \"ERC721: approval to current owner\");\r\r\r\r        require(\r\r            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\r            \"ERC721: approve caller is not owner nor approved for all\"\r\r        );\r\r\r\r        _approve(to, tokenId);\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-getApproved}.\r\r     */\r\r    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\r        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\r\r\r        return _tokenApprovals[tokenId];\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-setApprovalForAll}.\r\r     */\r\r    function setApprovalForAll(address operator, bool approved) public virtual override {\r\r        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\r\r\r        _operatorApprovals[_msgSender()][operator] = approved;\r\r        emit ApprovalForAll(_msgSender(), operator, approved);\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-isApprovedForAll}.\r\r     */\r\r    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\r        return _operatorApprovals[owner][operator];\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-transferFrom}.\r\r     */\r\r    function transferFrom(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId\r\r    ) public virtual override {\r\r        //solhint-disable-next-line max-line-length\r\r        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\r\r\r        _transfer(from, to, tokenId);\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-safeTransferFrom}.\r\r     */\r\r    function safeTransferFrom(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId\r\r    ) public virtual override {\r\r        safeTransferFrom(from, to, tokenId, \"\");\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721-safeTransferFrom}.\r\r     */\r\r    function safeTransferFrom(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId,\r\r        bytes memory _data\r\r    ) public virtual override {\r\r        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\r        _safeTransfer(from, to, tokenId, _data);\r\r    }\r\r\r\r    /**\r\r     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\r     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\r     *\r\r     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\r     *\r\r     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\r     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `from` cannot be the zero address.\r\r     * - `to` cannot be the zero address.\r\r     * - `tokenId` token must exist and be owned by `from`.\r\r     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function _safeTransfer(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId,\r\r        bytes memory _data\r\r    ) internal virtual {\r\r        _transfer(from, to, tokenId);\r\r        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\r    }\r\r\r\r    /**\r\r     * @dev Returns whether `tokenId` exists.\r\r     *\r\r     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\r     *\r\r     * Tokens start existing when they are minted (`_mint`),\r\r     * and stop existing when they are burned (`_burn`).\r\r     */\r\r    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\r        return _owners[tokenId] != address(0);\r\r    }\r\r\r\r    /**\r\r     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `tokenId` must exist.\r\r     */\r\r    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\r        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\r        address owner = ERC721.ownerOf(tokenId);\r\r        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\r    }\r\r\r\r    /**\r\r     * @dev Safely mints `tokenId` and transfers it to `to`.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `tokenId` must not exist.\r\r     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function _safeMint(address to, uint256 tokenId) internal virtual {\r\r        _safeMint(to, tokenId, \"\");\r\r    }\r\r\r\r    /**\r\r     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\r     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\r     */\r\r    function _safeMint(\r\r        address to,\r\r        uint256 tokenId,\r\r        bytes memory _data\r\r    ) internal virtual {\r\r        _mint(to, tokenId);\r\r        require(\r\r            _checkOnERC721Received(address(0), to, tokenId, _data),\r\r            \"ERC721: transfer to non ERC721Receiver implementer\"\r\r        );\r\r    }\r\r\r\r    /**\r\r     * @dev Mints `tokenId` and transfers it to `to`.\r\r     *\r\r     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `tokenId` must not exist.\r\r     * - `to` cannot be the zero address.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function _mint(address to, uint256 tokenId) internal virtual {\r\r        require(to != address(0), \"ERC721: mint to the zero address\");\r\r        require(!_exists(tokenId), \"ERC721: token already minted\");\r\r\r\r        _beforeTokenTransfer(address(0), to, tokenId);\r\r\r\r        _balances[to] += 1;\r\r        _owners[tokenId] = to;\r\r\r\r        emit Transfer(address(0), to, tokenId);\r\r    }\r\r\r\r    /**\r\r     * @dev Destroys `tokenId`.\r\r     * The approval is cleared when the token is burned.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `tokenId` must exist.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function _burn(uint256 tokenId) internal virtual {\r\r        address owner = ERC721.ownerOf(tokenId);\r\r\r\r        _beforeTokenTransfer(owner, address(0), tokenId);\r\r\r\r        // Clear approvals\r\r        _approve(address(0), tokenId);\r\r\r\r        _balances[owner] -= 1;\r\r        delete _owners[tokenId];\r\r\r\r        emit Transfer(owner, address(0), tokenId);\r\r    }\r\r\r\r    /**\r\r     * @dev Transfers `tokenId` from `from` to `to`.\r\r     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\r     *\r\r     * Requirements:\r\r     *\r\r     * - `to` cannot be the zero address.\r\r     * - `tokenId` token must be owned by `from`.\r\r     *\r\r     * Emits a {Transfer} event.\r\r     */\r\r    function _transfer(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId\r\r    ) internal virtual {\r\r        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\r        require(to != address(0), \"ERC721: transfer to the zero address\");\r\r\r\r        _beforeTokenTransfer(from, to, tokenId);\r\r\r\r        // Clear approvals from the previous owner\r\r        _approve(address(0), tokenId);\r\r\r\r        _balances[from] -= 1;\r\r        _balances[to] += 1;\r\r        _owners[tokenId] = to;\r\r\r\r        emit Transfer(from, to, tokenId);\r\r    }\r\r\r\r    /**\r\r     * @dev Approve `to` to operate on `tokenId`\r\r     *\r\r     * Emits a {Approval} event.\r\r     */\r\r    function _approve(address to, uint256 tokenId) internal virtual {\r\r        _tokenApprovals[tokenId] = to;\r\r        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\r    }\r\r\r\r    /**\r\r     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\r     * The call is not executed if the target address is not a contract.\r\r     *\r\r     * @param from address representing the previous owner of the given token ID\r\r     * @param to target address that will receive the tokens\r\r     * @param tokenId uint256 ID of the token to be transferred\r\r     * @param _data bytes optional data to send along with the call\r\r     * @return bool whether the call correctly returned the expected magic value\r\r     */\r\r    function _checkOnERC721Received(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId,\r\r        bytes memory _data\r\r    ) private returns (bool) {\r\r        if (to.isContract()) {\r\r            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\r                return retval == IERC721Receiver.onERC721Received.selector;\r\r            } catch (bytes memory reason) {\r\r                if (reason.length == 0) {\r\r                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\r                } else {\r\r                    assembly {\r\r                        revert(add(32, reason), mload(reason))\r\r                    }\r\r                }\r\r            }\r\r        } else {\r\r            return true;\r\r        }\r\r    }\r\r\r\r    /**\r\r     * @dev Hook that is called before any token transfer. This includes minting\r\r     * and burning.\r\r     *\r\r     * Calling conditions:\r\r     *\r\r     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\r     * transferred to `to`.\r\r     * - When `from` is zero, `tokenId` will be minted for `to`.\r\r     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\r     * - `from` and `to` are never both zero.\r\r     *\r\r     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\r     */\r\r    function _beforeTokenTransfer(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId\r\r    ) internal virtual {}\r\r}\r\r\r\r// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\r\r\r\r\r\r\rpragma solidity ^0.8.0;\r\r\r\r\r\r\r\r/**\r\r * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\r * enumerability of all the token ids in the contract as well as all token ids owned by each\r\r * account.\r\r */\r\rabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\r    // Mapping from owner to list of owned token IDs\r\r    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\r\r\r    // Mapping from token ID to index of the owner tokens list\r\r    mapping(uint256 => uint256) private _ownedTokensIndex;\r\r\r\r    // Array with all token ids, used for enumeration\r\r    uint256[] private _allTokens;\r\r\r\r    // Mapping from token id to position in the allTokens array\r\r    mapping(uint256 => uint256) private _allTokensIndex;\r\r\r\r    /**\r\r     * @dev See {IERC165-supportsInterface}.\r\r     */\r\r    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\r        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\r     */\r\r    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\r        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\r        return _ownedTokens[owner][index];\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721Enumerable-totalSupply}.\r\r     */\r\r    function totalSupply() public view virtual override returns (uint256) {\r\r        return _allTokens.length;\r\r    }\r\r\r\r    /**\r\r     * @dev See {IERC721Enumerable-tokenByIndex}.\r\r     */\r\r    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\r        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\r        return _allTokens[index];\r\r    }\r\r\r\r    /**\r\r     * @dev Hook that is called before any token transfer. This includes minting\r\r     * and burning.\r\r     *\r\r     * Calling conditions:\r\r     *\r\r     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\r     * transferred to `to`.\r\r     * - When `from` is zero, `tokenId` will be minted for `to`.\r\r     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\r     * - `from` cannot be the zero address.\r\r     * - `to` cannot be the zero address.\r\r     *\r\r     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\r     */\r\r    function _beforeTokenTransfer(\r\r        address from,\r\r        address to,\r\r        uint256 tokenId\r\r    ) internal virtual override {\r\r        super._beforeTokenTransfer(from, to, tokenId);\r\r\r\r        if (from == address(0)) {\r\r            _addTokenToAllTokensEnumeration(tokenId);\r\r        } else if (from != to) {\r\r            _removeTokenFromOwnerEnumeration(from, tokenId);\r\r        }\r\r        if (to == address(0)) {\r\r            _removeTokenFromAllTokensEnumeration(tokenId);\r\r        } else if (to != from) {\r\r            _addTokenToOwnerEnumeration(to, tokenId);\r\r        }\r\r    }\r\r\r\r    /**\r\r     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\r     * @param to address representing the new owner of the given token ID\r\r     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\r     */\r\r    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\r        uint256 length = ERC721.balanceOf(to);\r\r        _ownedTokens[to][length] = tokenId;\r\r        _ownedTokensIndex[tokenId] = length;\r\r    }\r\r\r\r    /**\r\r     * @dev Private function to add a token to this extension's token tracking data structures.\r\r     * @param tokenId uint256 ID of the token to be added to the tokens list\r\r     */\r\r    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\r        _allTokensIndex[tokenId] = _allTokens.length;\r\r        _allTokens.push(tokenId);\r\r    }\r\r\r\r    /**\r\r     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\r     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\r     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\r     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\r     * @param from address representing the previous owner of the given token ID\r\r     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\r     */\r\r    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\r        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\r        // then delete the last slot (swap and pop).\r\r\r\r        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\r        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\r\r\r        // When the token to delete is the last token, the swap operation is unnecessary\r\r        if (tokenIndex != lastTokenIndex) {\r\r            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\r\r\r            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\r            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\r        }\r\r\r\r        // This also deletes the contents at the last position of the array\r\r        delete _ownedTokensIndex[tokenId];\r\r        delete _ownedTokens[from][lastTokenIndex];\r\r    }\r\r\r\r    /**\r\r     * @dev Private function to remove a token from this extension's token tracking data structures.\r\r     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\r     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\r     */\r\r    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\r        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\r        // then delete the last slot (swap and pop).\r\r\r\r        uint256 lastTokenIndex = _allTokens.length - 1;\r\r        uint256 tokenIndex = _allTokensIndex[tokenId];\r\r\r\r        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\r        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\r        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\r        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\r\r\r        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\r        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\r\r\r        // This also deletes the contents at the last position of the array\r\r        delete _allTokensIndex[tokenId];\r\r        _allTokens.pop();\r\r    }\r\r}\r\r\r\r\r\r// File: @openzeppelin/contracts/access/Ownable.sol\r\rpragma solidity ^0.8.0;\r\r/**\r\r * @dev Contract module which provides a basic access control mechanism, where\r\r * there is an account (an owner) that can be granted exclusive access to\r\r * specific functions.\r\r *\r\r * By default, the owner account will be the one that deploys the contract. This\r\r * can later be changed with {transferOwnership}.\r\r *\r\r * This module is used through inheritance. It will make available the modifier\r\r * `onlyOwner`, which can be applied to your functions to restrict their use to\r\r * the owner.\r\r */\r\rabstract contract Ownable is Context {\r\r    address private _owner;\r\r\r\r    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\r\r\r    /**\r\r     * @dev Initializes the contract setting the deployer as the initial owner.\r\r     */\r\r    constructor() {\r\r        _setOwner(_msgSender());\r\r    }\r\r\r\r    /**\r\r     * @dev Returns the address of the current owner.\r\r     */\r\r    function owner() public view virtual returns (address) {\r\r        return _owner;\r\r    }\r\r\r\r    /**\r\r     * @dev Throws if called by any account other than the owner.\r\r     */\r\r    modifier onlyOwner() {\r\r        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\r        _;\r\r    }\r\r\r\r    /**\r\r     * @dev Leaves the contract without owner. It will not be possible to call\r\r     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\r     *\r\r     * NOTE: Renouncing ownership will leave the contract without an owner,\r\r     * thereby removing any functionality that is only available to the owner.\r\r     */\r\r    function renounceOwnership() public virtual onlyOwner {\r\r        _setOwner(address(0));\r\r    }\r\r\r\r    /**\r\r     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\r     * Can only be called by the current owner.\r\r     */\r\r    function transferOwnership(address newOwner) public virtual onlyOwner {\r\r        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\r        _setOwner(newOwner);\r\r    }\r\r\r\r    function _setOwner(address newOwner) private {\r\r        address oldOwner = _owner;\r\r        _owner = newOwner;\r\r        emit OwnershipTransferred(oldOwner, newOwner);\r\r    }\r\r}\r\r\r\r\r\r\r\r// Contract: NugBudz NFT\r\r// TokenID: NugBudz\r\r// Token Symbol: NBUDZ\r\r// Author: Sean Pentiboyina\r\r// ---- CONTRACT BEGINS HERE ----\r\r\r\rpragma solidity ^0.8.0;\r\r\r\rcontract NugBudzNFT is ERC721Enumerable, Ownable {\r\r  using Strings for uint256;\r\r\r\r  string public baseURI;\r\r  string public baseExtension = \"\";\r\r  uint256 public cost = 0.05 ether;\r\r  uint256 public maxSupply = 9420;\r\r  uint256 public maxMintAmount = 5;\r\r  bool public paused = false;\r\r  bool public whitelistOnly = false;\r\r  uint256 public walletLimit = 9420;\r\r  mapping(address => bool) public whitelisted;\r\r\r\r  constructor(\r\r    string memory _name,\r\r    string memory _symbol,\r\r    string memory _initBaseURI\r\r  ) ERC721(_name, _symbol) {\r\r    setBaseURI(_initBaseURI);\r\r    // To change the amount of Reserved Owner Tokens,\r\r    // change the number in the mint(msg.sender, 100) method below\r\r    // to any other number you want. The default is\r\r    // 100 reserve tokens for the owner.\r\r    maxMintAmount = 5;\r\r  }\r\r\r\r  // internal\r\r  function _baseURI() internal view virtual override returns (string memory) {\r\r    return baseURI;\r\r  }\r\r\r\r  // public\r\r  function mint(address _to, uint256 _mintAmount) public payable {\r\r    uint256 supply = totalSupply();\r\r    require(!paused);\r\r    require(_mintAmount > 0);\r\r    require(_mintAmount <= maxMintAmount);\r\r    require(supply + _mintAmount <= maxSupply);\r\r    require((balanceOf(msg.sender) + _mintAmount) <= walletLimit, 'Wallet limit is reached.');\r\r\r\r    if (whitelistOnly == false) {\r\r        if (msg.sender != owner()) {\r\r            if(whitelisted[msg.sender] != true) {\r\r              require(msg.value >= cost * _mintAmount);\r\r            }\r\r        }\r\r    \r\r        for (uint256 i = 1; i <= _mintAmount; i++) {\r\r          _safeMint(_to, supply + i);\r\r        }\r\r    }\r\r    else if (whitelistOnly == true) {\r\r        require(whitelisted[msg.sender] == true, 'Address is not whitelisted.');\r\r        for (uint256 i = 1; i <= _mintAmount; i++) {\r\r            _safeMint(_to, supply + i);\r\r        }\r\r    }\r\r  }\r\r  \r\r//   function whiteListMint(address _to, uint256 _mintAmount) public payable {\r\r//     uint256 supply = totalSupply();\r\r//     require(_mintAmount > 0);\r\r//     require(_mintAmount <= maxMintAmount);\r\r//     require(supply + _mintAmount <= maxSupply);\r\r//     require(whitelisted[msg.sender] == true, 'Address is not whitelisted.');\r\r//     require((balanceOf(msg.sender) + _mintAmount) <= walletLimit, 'Wallet limit is reached.');\r\r\r\r//     for (uint256 i = 1; i <= _mintAmount; i++) {\r\r//       _safeMint(_to, supply + i);\r\r//     }\r\r//   }\r\r  \r\r  \r\r\r\r  function walletOfOwner(address _owner)\r\r    public\r\r    view\r\r    returns (uint256[] memory)\r\r  {\r\r    uint256 ownerTokenCount = balanceOf(_owner);\r\r    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\r    for (uint256 i; i < ownerTokenCount; i++) {\r\r      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\r    }\r\r    return tokenIds;\r\r  }\r\r\r\r  function tokenURI(uint256 tokenId)\r\r    public\r\r    view\r\r    virtual\r\r    override\r\r    returns (string memory)\r\r  {\r\r    require(\r\r      _exists(tokenId),\r\r      \"ERC721Metadata: URI query for nonexistent NugBudz NFT\"\r\r    );\r\r\r\r    string memory currentBaseURI = _baseURI();\r\r    return bytes(currentBaseURI).length > 0\r\r        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\r\r        : \"\";\r\r  }\r\r\r\r //\r\r // ONLY THE OWNER CAN CALL THE FUNCTIONS BELOW.\r\r //\r\r  \r\r // This sets the minting price of each NFT.\r\r // Example: If you pass in 0.1, then you will need to pay 0.1 ETH + gas to mint 1 NFT.\r\r  function setCost(uint256 _newCost) public onlyOwner() {\r\r    cost = _newCost;\r\r  }\r\r\r\r // This sets the amount users can mint at once.\r\r // Example: If you want your users to be able to mint 20 NFTs at once,\r\r // then you can set the setMaxMintAmount to 20.\r\r //\r\r // *THIS IS NOT A WALLET LIMIT. THERE IS ANOTHER FUNCTION FOR THAT BELOW*\r\r  function setMaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner() {\r\r    maxMintAmount = _newmaxMintAmount;\r\r  }\r\r  \r\r // This sets the wallet limit.\r\r // Example: If you set the setWalletLimit function to 5, then users can have AT MOST 5 NFTs in their wallet.\r\r // You can change this to adjust the pre-mint wallet limit vs. the main minting phase's wallet limit.\r\r  function setWalletLimit(uint256 _newWalletLimit) public onlyOwner() {\r\r    walletLimit = _newWalletLimit;\r\r  }\r\r  \r\r // If you want to save gas by setting the maxMintAmount and walletLimit\r\r // at the same time, you can use this function.\r\r // Simply pass in the new maxMintAmount first, and the newWalletLimit second.\r\r // Example:\r\r // If you want to set a pre-mint phase where users can only mint 3 NFTs at a time,\r\r // and have a wallet limit of 9 NFTs, you can pass in the arguments\r\r // 3 and 9 respectively. \r\r // Then, to activate full minting for your official launch phase,\r\r // simply pass in new arguments to change the maxMintAmount and walletLimit.\r\r // Example:\r\r // Now that you're fully launching, you can pass in 10 to the newMaxMintAmount argument\r\r // which would allow users to mint up to 10 at a time, and pass in 20 to the\r\r // newWalletLimit argument which would create a wallet limit of 20 NFTs.\r\r  function setMaxMintAmountAndWalletLimit(uint256 _newmaxMintAmount, uint256 _newWalletLimit) public onlyOwner() {\r\r    maxMintAmount = _newmaxMintAmount;\r\r    walletLimit = _newWalletLimit;\r\r  }\r\r\r\r // This sets the max supply. This will be set to 10,000 by default, although it is changable.\r\r  function setMaxSupply(uint256 _newSupply) public onlyOwner() {\r\r    maxSupply = _newSupply;\r\r  }\r\r  \r\r // This changes the baseURI.\r\r // Example: If you pass in \"https://google.com/\", then every new NFT that is minted\r\r // will have a URI corresponding to the baseURI you passed in.\r\r // The first NFT you mint would have a URI of \"https://google.com/1\",\r\r // The second NFT you mint would have a URI of \"https://google.com/2\", etc.\r\r  function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\r    baseURI = _newBaseURI;\r\r  }\r\r\r\r // This sets the baseURI extension.\r\r // Example: If your database requires that the URI of each NFT\r\r // must have a .json at the end of the URI \r\r // (like https://google.com/1.json instead of just https://google.com/1)\r\r // then you can use this function to set the base extension.\r\r // For the above example, you would pass in \".json\" to add the .json extension.\r\r  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\r\r    baseExtension = _newBaseExtension;\r\r  }\r\r\r\r // This pauses or unpauses sales.\r\r  function pause(bool _state) public onlyOwner {\r\r    paused = _state;\r\r  }\r\r \r\r // This activates or deactivates the whitelist.\r\r // set to false = anyone can mint\r\r // set to true = only whitelisted users can mint\r\r  function activateWhitelist(bool _state) public onlyOwner {\r\r    whitelistOnly = _state;\r\r  }\r\r  \r\r // This whitelists users.\r\r // You MUST use an array for this function, and put quotes around the addresses you would like to whitelist.\r\r // Example:\r\r // If you want to whitelist 0x000000000000000000000000000000000000,\r\r // then pass in the argument:\r\r // [\"0x000000000000000000000000000000000000\"]\r\r //\r\r // If you want to whitelist multiple users, then pass in the argument with commas\r\r // seperating the user's addresses.\r\r // Example:\r\r // [\"0x000000000000000000000000000000000000\",\"0x111111111111111111111111111111111\", \"0x222222222222222222222222222222222\"]\r\r function whitelistUser(address[] memory _user) public onlyOwner {\r\r     uint256 x = 0;\r\r     for (x = 0; x < _user.length; x++) {\r\r         whitelisted[_user[x]] = true;\r\r     }\r\r  }\r\r \r\r // This removes whitelisted users.\r\r // It's arguments are the same as for whitelisting users.\r\r // You MUST use an array, and put quotes around the addresses you would like to remove from the whitelist.\r\r  function removeWhitelistUser(address[] memory _user) public onlyOwner {\r\r     uint256 x = 0;\r\r     for (x = 0; x < _user.length; x++) {\r\r         whitelisted[_user[x]] = false;\r\r     }\r\r  }\r\r  \r\r // This withdraws the contract's balance of ETH to the Owner's (whoever launched the contract) address.\r\r  function withdraw() public payable onlyOwner {\r\r    require(payable(msg.sender).send(address(this).balance));\r\r  }\r\r  \r\r\r\r}"}}}