{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/teset_final.sol":{"content":"pragma solidity  >= 0.5.0< 0.7.0;\r\n\r\ncontract PROCASH {\r\n    \r\n    address owner;\r\n    address  payable donde;\r\n    uint[] ident;\r\n    mapping(uint => username)  usuarios;\r\n    \r\n    struct username{\r\n           uint id;\r\n           string name;\r\n           address payable dir;\r\n    }\r\n\r\n    modifier valida_user(uint _id){\r\n\t    require(usuarios[_id].id != _id);\r\n\t    _;\r\n\t}\r\n\t\r\n  \tconstructor() public{\r\n  \t    owner = msg.sender;\r\n    }\r\n  \t\r\n  \tevent RegisterUserEvent(address indexed _dire, string  indexed name , uint time);\r\n  \tevent Recarga_pay(address indexed user, uint indexed amount, uint time);\r\n    event set_transfer(address indexed user,address indexed referrer,uint indexed amount, uint time);\r\n  \r\n    function fondos_contract(uint256 amount) public payable{\r\n            require(msg.value == amount);\r\n            emit Recarga_pay(msg.sender, amount, now);\r\n    }\r\n    \r\n   \tfunction Register(uint _id, address payable dire,  string memory _name ) payable public valida_user(_id){\r\n\t     \tident.push(_id);\r\n\t\t\tusuarios[_id] = username({\r\n\t\t\t    id: _id,\r\n\t\t\t\tname: _name,\r\n\t\t\t\tdir: dire\r\n \t\t\t});\r\n    \t    emit  RegisterUserEvent( dire , _name ,  now );\r\n\t}\r\n\t\r\n\t\r\n\tfunction update_register(uint _id, address payable dire,  string memory _name) public payable{\r\n\t      require(owner == msg.sender);\r\n\t      \tusuarios[_id] = username({\r\n\t\t\t    id: _id,\r\n\t\t\t    name: _name,\r\n\t\t\t\tdir: dire\r\n \t\t\t});\r\n\t       \r\n\t}\r\n\t\r\n\t\r\n\tfunction pay_now(uint[] memory valor, uint256[] memory monto) public payable {\r\n\t    uint i;\r\n\t    uint256 pagar;\r\n\r\n      for ( i = 0; i < valor.length ; i++)\r\n         {\r\n            donde  = usuarios[valor[i]].dir;\r\n            pagar  =    monto[i];\r\n             pagar_cuenta(donde, pagar);\r\n         } \r\n    \r\n    }\r\n    \r\n    function pagar_cuenta(address payable _dire, uint256 _monto)  payable public {\r\n             require(owner == msg.sender);\r\n            _dire.transfer(_monto);\r\n             emit set_transfer(msg.sender, _dire, _monto, now ); \r\n    }\r\n    \r\n    function total_register() public view returns(uint){\r\n         require(owner == msg.sender);\r\n         return ident.length;\r\n    } \r\n    \r\n    function mi_user(uint  valor) public view returns(string memory) {\r\n         return usuarios[valor].name;\r\n    }\r\n \r\n    function mi_wallet(uint  valor) public view returns(address payable) {\r\n         return usuarios[valor].dir;\r\n    }\r\n    \r\n}"}}}