{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/varistablecapital.sol": {
      "content": "// Vari-Stable Capital: $VSC\r\n// Deflationary DeFi-as-a-Service (DaaS) Token, with 60% supply burned to 0x0dEaD\r\n// You buy on Ethereum, we execute algorithmic stablecoin strategies on various chains and return the profits to $VSC holders.\r\n\r\n//Initial Supply: 1,000,000,000,000 $VSC \r\n//60% of $VSC burned to 0x0dEaD\r\n//10% of each buy goes to existing holders.\r\n//10% of each sell goes into various-chain algorithmic stablecoin investing to add to the treasury and buy back $VSC tokens.\r\n\r\n// Twitter: https://twitter.com/VariStableCap\r\n// Website: https://varistablecapital.link/\r\n// Medium: https://varistablecapital.medium.com/\r\n// Telegram: https://t.me/varistablecapital\r\n\r\n    interface IUniswapV2Factory {\r\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n        function feeTo() external view returns (address);\r\n        function feeToSetter() external view returns (address);\r\n\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n        function allPairs(uint) external view returns (address pair);\r\n        function allPairsLength() external view returns (uint);\r\n\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n        function setFeeTo(address) external;\r\n        function setFeeToSetter(address) external;\r\n    }\r\n\r\n    interface IUniswapV2Pair {\r\n        event Approval(address indexed owner, address indexed spender, uint value);\r\n        event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n        function name() external pure returns (string memory);\r\n        function symbol() external pure returns (string memory);\r\n        function decimals() external pure returns (uint8);\r\n        function totalSupply() external view returns (uint);\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function allowance(address owner, address spender) external view returns (uint);\r\n\r\n        function approve(address spender, uint value) external returns (bool);\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n        function nonces(address owner) external view returns (uint);\r\n\r\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n        event Mint(address indexed sender, uint amount0, uint amount1);\r\n        event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n        event Swap(\r\n            address indexed sender,\r\n            uint amount0In,\r\n            uint amount1In,\r\n            uint amount0Out,\r\n            uint amount1Out,\r\n            address indexed to\r\n        );\r\n        event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n        function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n        function factory() external view returns (address);\r\n        function token0() external view returns (address);\r\n        function token1() external view returns (address);\r\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n        function price0CumulativeLast() external view returns (uint);\r\n        function price1CumulativeLast() external view returns (uint);\r\n        function kLast() external view returns (uint);\r\n\r\n        function mint(address to) external returns (uint liquidity);\r\n        function burn(address to) external returns (uint amount0, uint amount1);\r\n        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n        function skim(address to) external;\r\n        function sync() external;\r\n\r\n        function initialize(address, address) external;\r\n    }\r\n\r\ninterface IUniswapV2Router01 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n\r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint amountADesired,\r\n            uint amountBDesired,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB, uint liquidity);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function removeLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETH(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function removeLiquidityWithPermit(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETHWithPermit(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapTokensForExactTokens(\r\n            uint amountOut,\r\n            uint amountInMax,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n\r\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    }\r\n\r\n\r\n   interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountETH);\r\n        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountETH);\r\n\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external payable;\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n\r\npragma solidity ^0.8.0;\r\n//SPDX-License-Identifier: MIT\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n    contract VariStableCapital is Context, IERC20, Ownable {\r\n        using SafeMath for uint256;\r\n        using Address for address;\r\n\r\n        mapping (address => uint256) private _rOwned;\r\n        mapping (address => uint256) private _tOwned;\r\n        mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n        mapping (address => bool) private _isExcludedFromFee;\r\n\r\n        mapping (address => bool) private _isExcluded;\r\n        address[] private _excluded;\r\n\r\n        uint256 private constant MAX = ~uint256(0);\r\n        uint256 private _tTotal = 1000000000000 * 10**9;\r\n        uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n        uint256 private _tFeeTotal;\r\n\r\n        string private _name = 'VariStableCapital';\r\n        string private _symbol = 'VSC';\r\n        uint8 private _decimals = 9;\r\n\r\n        uint256 private _taxFee = 10;\r\n        uint256 private _teamFee = 10;\r\n        uint256 private _previousTaxFee = _taxFee;\r\n        uint256 private _previousTeamFee = _teamFee;\r\n\r\n        address payable public _VSCWalletAddress;\r\n        address payable public _marketingWalletAddress;\r\n\r\n        IUniswapV2Router02 public immutable uniswapV2Router;\r\n        address public immutable uniswapV2Pair;\r\n\r\n        bool inSwap = false;\r\n        bool public swapEnabled = true;\r\n\r\n        uint256 private _maxTxAmount = 100000000000000e9;\r\n        // We will set a minimum amount of tokens to be swaped => 5M\r\n        uint256 private _numOfTokensToExchangeForTeam = 5 * 10**3 * 10**9;\r\n\r\n        event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n        event SwapEnabledUpdated(bool enabled);\r\n\r\n        modifier lockTheSwap {\r\n            inSwap = true;\r\n            _;\r\n            inSwap = false;\r\n        }\r\n\r\n        constructor (address payable VSCWalletAddress, address payable marketingWalletAddress) {\r\n            _VSCWalletAddress = VSCWalletAddress;\r\n            _marketingWalletAddress = marketingWalletAddress;\r\n            _rOwned[_msgSender()] = _rTotal;\r\n\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // UniswapV2 for Ethereum network\r\n            // Create a uniswap pair for this new token\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n            // set the rest of the contract variables\r\n            uniswapV2Router = _uniswapV2Router;\r\n\r\n            // Exclude owner and this contract from fee\r\n            _isExcludedFromFee[owner()] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n\r\n            emit Transfer(address(0), _msgSender(), _tTotal);\r\n        }\r\n\r\n        function name() public view returns (string memory) {\r\n            return _name;\r\n        }\r\n\r\n        function symbol() public view returns (string memory) {\r\n            return _symbol;\r\n        }\r\n\r\n        function decimals() public view returns (uint8) {\r\n            return _decimals;\r\n        }\r\n\r\n        function totalSupply() public view override returns (uint256) {\r\n            return _tTotal;\r\n        }\r\n\r\n        function balanceOf(address account) public view override returns (uint256) {\r\n            if (_isExcluded[account]) return _tOwned[account];\r\n            return tokenFromReflection(_rOwned[account]);\r\n        }\r\n\r\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address owner, address spender) public view override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n\r\n        function approve(address spender, uint256 amount) public override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n\r\n        function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n\r\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n            return true;\r\n        }\r\n\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n            return true;\r\n        }\r\n\r\n        function isExcluded(address account) public view returns (bool) {\r\n            return _isExcluded[account];\r\n        }\r\n\r\n        function setExcludeFromFee(address account, bool excluded) external onlyOwner() {\r\n            _isExcludedFromFee[account] = excluded;\r\n        }\r\n\r\n        function totalFees() public view returns (uint256) {\r\n            return _tFeeTotal;\r\n        }\r\n\r\n        function deliver(uint256 tAmount) public {\r\n            address sender = _msgSender();\r\n            require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rTotal = _rTotal.sub(rAmount);\r\n            _tFeeTotal = _tFeeTotal.add(tAmount);\r\n        }\r\n\r\n        function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n            require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n            if (!deductTransferFee) {\r\n                (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n                return rAmount;\r\n            } else {\r\n                (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n                return rTransferAmount;\r\n            }\r\n        }\r\n\r\n        function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n            require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n            uint256 currentRate =  _getRate();\r\n            return rAmount.div(currentRate);\r\n        }\r\n\r\n        function excludeAccount(address account) external onlyOwner() {\r\n            require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n            require(!_isExcluded[account], \"Account is already excluded\");\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        }\r\n\r\n        function includeAccount(address account) external onlyOwner() {\r\n            require(_isExcluded[account], \"Account is already excluded\");\r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_excluded[i] == account) {\r\n                    _excluded[i] = _excluded[_excluded.length - 1];\r\n                    _tOwned[account] = 0;\r\n                    _isExcluded[account] = false;\r\n                    _excluded.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        function removeAllFee() private {\r\n            if(_taxFee == 0 && _teamFee == 0) return;\r\n\r\n            _previousTaxFee = _taxFee;\r\n            _previousTeamFee = _teamFee;\r\n\r\n            _taxFee = 0;\r\n            _teamFee = 0;\r\n        }\r\n\r\n        function restoreAllFee() private {\r\n            _taxFee = _previousTaxFee;\r\n            _teamFee = _previousTeamFee;\r\n        }\r\n\r\n        function isExcludedFromFee(address account) public view returns(bool) {\r\n            return _isExcludedFromFee[account];\r\n        }\r\n\r\n        function _approve(address owner, address spender, uint256 amount) private {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n\r\n        function _transfer(address sender, address recipient, uint256 amount) private {\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n            require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n            if(sender != owner() && recipient != owner())\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n            // is the token balance of this contract address over the min number of\r\n            // tokens that we need to initiate a swap?\r\n            // also, don't get caught in a circular team event.\r\n            // also, don't swap if sender is uniswap pair.\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n\r\n            bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForTeam;\r\n            if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {\r\n                // We need to swap the current tokens to ETH and send to the team wallet\r\n                swapTokensForEth(contractTokenBalance);\r\n\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToTeam(address(this).balance);\r\n                }\r\n            }\r\n\r\n            //indicates if fee should be deducted from transfer\r\n            bool takeFee = true;\r\n\r\n            //if any account belongs to _isExcludedFromFee account then remove the fee\r\n            if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\r\n                takeFee = false;\r\n            }\r\n\r\n            //transfer amount, it will take tax and team fee\r\n            _tokenTransfer(sender,recipient,amount,takeFee);\r\n        }\r\n\r\n        function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{\r\n            // generate the uniswap pair path of token -> weth\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        function sendETHToTeam(uint256 amount) private {\r\n            _VSCWalletAddress.transfer(amount.div(2));\r\n            _marketingWalletAddress.transfer(amount.div(2));\r\n        }\r\n\r\n        // We are exposing these functions to be able to manual swap and send\r\n        // in case the token is highly valued and 5M becomes too much\r\n        function manualSwap() external onlyOwner() {\r\n            uint256 contractBalance = balanceOf(address(this));\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n\r\n        function manualSend() external onlyOwner() {\r\n            uint256 contractETHBalance = address(this).balance;\r\n            sendETHToTeam(contractETHBalance);\r\n        }\r\n\r\n        function setSwapEnabled(bool enabled) external onlyOwner(){\r\n            swapEnabled = enabled;\r\n        }\r\n\r\n        function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n            if(!takeFee)\r\n                removeAllFee();\r\n\r\n            if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n                _transferFromExcluded(sender, recipient, amount);\r\n            } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n                _transferToExcluded(sender, recipient, amount);\r\n            } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n                _transferStandard(sender, recipient, amount);\r\n            } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n                _transferBothExcluded(sender, recipient, amount);\r\n            } else {\r\n                _transferStandard(sender, recipient, amount);\r\n            }\r\n\r\n            if(!takeFee)\r\n                restoreAllFee();\r\n        }\r\n\r\n        function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _takeTeam(tTeam);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n\r\n        function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _takeTeam(tTeam);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n\r\n        function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _takeTeam(tTeam);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n\r\n        function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _takeTeam(tTeam);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n\r\n        function _takeTeam(uint256 tTeam) private {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rTeam = tTeam.mul(currentRate);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n            if(_isExcluded[address(this)])\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(tTeam);\r\n        }\r\n\r\n        function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n            _rTotal = _rTotal.sub(rFee);\r\n            _tFeeTotal = _tFeeTotal.add(tFee);\r\n        }\r\n\r\n         //to recieve ETH from uniswapV2Router when swaping\r\n        receive() external payable {}\r\n\r\n        function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n            (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\r\n            uint256 currentRate =  _getRate();\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\r\n            return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n        }\r\n\r\n        function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee) private pure returns (uint256, uint256, uint256) {\r\n            uint256 tFee = tAmount.mul(taxFee).div(100);\r\n            uint256 tTeam = tAmount.mul(teamFee).div(100);\r\n            uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n            return (tTransferAmount, tFee, tTeam);\r\n        }\r\n\r\n        function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n            uint256 rAmount = tAmount.mul(currentRate);\r\n            uint256 rFee = tFee.mul(currentRate);\r\n            uint256 rTransferAmount = rAmount.sub(rFee);\r\n            return (rAmount, rTransferAmount, rFee);\r\n        }\r\n\r\n        function _getRate() private view returns(uint256) {\r\n            (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n            return rSupply.div(tSupply);\r\n        }\r\n\r\n        function _getCurrentSupply() private view returns(uint256, uint256) {\r\n            uint256 rSupply = _rTotal;\r\n            uint256 tSupply = _tTotal;\r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n                rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n                tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n            }\r\n            if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n            return (rSupply, tSupply);\r\n        }\r\n\r\n        function _getTaxFee() private view returns(uint256) {\r\n            return _taxFee;\r\n        }\r\n\r\n        function _getMaxTxAmount() private view returns(uint256) {\r\n            return _maxTxAmount;\r\n        }\r\n\r\n        function _getETHBalance() public view returns(uint256 balance) {\r\n            return address(this).balance;\r\n        }\r\n\r\n        function _setTaxFee(uint256 taxFee) external onlyOwner() {\r\n            require(taxFee >= 1 && taxFee <= 25, 'taxFee should be in 1 - 25');\r\n            _taxFee = taxFee;\r\n        }\r\n\r\n        function _setTeamFee(uint256 teamFee) external onlyOwner() {\r\n            require(teamFee >= 1 && teamFee <= 25, 'teamFee should be in 1 - 25');\r\n            _teamFee = teamFee;\r\n        }\r\n\r\n        function _setVSCWallet(address payable VSCWalletAddress) external onlyOwner() {\r\n            _VSCWalletAddress = VSCWalletAddress;\r\n        }\r\n\r\n        function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n            require(maxTxAmount >= 100000000000000e9 , 'maxTxAmount should be greater than 100000000000000e9');\r\n            _maxTxAmount = maxTxAmount;\r\n        }\r\n    }"
    }
  }
}