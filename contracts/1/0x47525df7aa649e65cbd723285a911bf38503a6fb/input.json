{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ethereum.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.10;\n\ninterface IERC20Token {\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n}\n\ninterface IERC721 {\n\n    function mint(address to, uint32 _assetType, uint256 _value, uint32 _customDetails) external returns (bool success);\n\n}\ncontract Ownable {\n\n    address private owner;\n    \n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}\n\ncontract EQXPOLN3DSeller is Ownable {\n   // NFT Seller EQX token on ETHEREUM\n    address public nftAddress;\n    address public eqxToken;\n    address payable public sellingWallet;\n    bool public paused;\n    \n    mapping(uint => uint) public assets;\n    \n    constructor() {\n        sellingWallet = payable(0xAD334543437EF71642Ee59285bAf2F4DAcBA613F);\n        nftAddress = 0xB20217bf3d89667Fa15907971866acD6CcD570C8;\n        eqxToken = 0xBd3de9a069648c84d27d74d701C9fa3253098B15;\n        assets[60] = 6000 ether;\n    }\n    \n    function buyAsset(uint32 _details) public {\n        require(!paused, \"Contract is paused\");\n        IERC20Token token = IERC20Token(eqxToken);\n        require(token.transferFrom(msg.sender, sellingWallet, assets[60]), \"ERC20 Transfer error\");\n        IERC721 nft = IERC721(nftAddress);\n        require(nft.mint(msg.sender, 60, assets[60], _details), \"Not possible to mint this type of asset\");\n    }\n\n    function pauseContract(bool _paused) public onlyOwner {\n        paused = _paused;\n    }\n}\n    \n    \n\n    \n\n    \n    \n\n"}}}