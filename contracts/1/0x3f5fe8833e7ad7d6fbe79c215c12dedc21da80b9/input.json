{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Stake.sol":{"content":"pragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: MIT\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor  () public  { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n    \n    \n    \n    /**\n     * @dev Retuns the a%b.\n     */\n    \n    \n    function getPercentage(uint256 a, uint256 b) internal pure returns(uint256){\n        \n        uint256 value = (a * b)/100;\n        return value;\n    }\n    \n    /**\n     * @dev Retuns the maximum of two integers\n     */\n    \n    \n    function getMax(uint256 a, uint256 b) internal pure returns(uint256){\n        if(a>=b){\n            return a;\n        }\n        else\n        return b;\n    }\n    \n    /**\n     * @dev Retuns the minimum of two integers\n     */\n    \n    \n    function getMin(uint256 a, uint256 b) internal pure returns(uint256){\n        if(a<=b){\n            return a;\n        }\n        else\n        return b;\n    }\n}\n\n\ncontract Stake is Ownable {\n    \n    \n    IERC20 public tokenContract;\n    \n    using SafeMath for uint256;\n    \n    bool isContractOpen;\n    uint256 deployTimestamp;\n    \n    struct User {\n        address userAddress;\n        uint256 referralBalance;\n        bool    isPrivateInvestor;\n    }\n    \n    struct UserStake {\n        address userAddress;\n        uint256 amount;\n        uint256 startTimeStamp;\n        uint256 lockTime; // 12 months or 24 months in seconds;\n        uint8 lockChoice;\n        uint256 redemptionAllowedAfter;\n        uint256 lastRewardTimeStamp;\n        uint256 interestClaimed;\n        address refereeAddress;\n        bool    stakeOpen;\n    }\n    \n    struct UserLock {\n        address userAddress;\n        uint256 amount;\n        uint256 startTimeStamp;\n        uint256 lockChoice;\n        uint256 lockTime;\n        uint256 redemptionAllowedAfter;\n        bool    lockStatus;\n    }\n    \n    mapping (uint8=>uint256) lockTimes;\n    mapping (address=>User) usersList;\n    mapping (uint256=>UserStake) stakesList;\n    mapping (uint256=>UserLock) locksList;\n    mapping (address => uint256[]) userStakes;\n    mapping (address=> uint256[]) userLocks;\n    mapping (uint8=>uint256) interestRates;\n    mapping (address=>uint256) userTotalStakeBalance;\n    mapping (address=>uint256) userTotalLockBalance;\n\n    \n    uint256 stakeCount;\n    uint256 lockCount;\n    \n    uint256 public totalTokensStaked;\n    uint256 public totalTokensLocked;\n    \n    uint256 thrityDaysInSeconds;\n    uint256 threeYearsInSeconds;\n    uint256 thresHoldToMaintain;\n    uint256 minStakeAmount;\n    uint256 maxStakeAmount;\n    \n    bool emergencyWithdrwalEnabled;\n    \n    event InvestorListUpdated(address investorAddress,bool updateType);\n    event ReferralClaimed(address indexed userAddress,uint256 amount);\n    event ReferralAwarded(address indexed userAddress,uint256 amount);\n    event RewardsClaimed(address indexed userAddress,uint256 amount);\n    event Unstaked(address indexed userAddress,uint256 stakeId,uint256 amount);\n    event StakeRedeemed(address indexed userAddress,uint256 stakeId,uint256 amount);\n    event ContractStatusChanged(bool status,address indexed updatedBy);\n    event LockCreated(address indexed userAddress,uint256 amount,uint256 lockId,address indexed createdBy);\n    event StakeCreated(address indexed userAddress,uint256 amount,uint256 stakeId);\n    event LockRdeeemed(uint256 lockId,address indexed userAddress,uint256 amount,address indexed txnBy);\n    constructor(address _tokenContractAddress) public{\n        \n        tokenContract = IERC20(_tokenContractAddress);\n        \n        lockTimes[0] = 15552000; //need to replace with correct values later;\n        lockTimes[1] = 31104000;\n        lockTimes[2] = 62208000;\n        \n        interestRates[0] = 3;\n        interestRates[1] = 4;\n        interestRates[2] = 5;\n        \n        thrityDaysInSeconds =2592000;\n        threeYearsInSeconds = 93312000;\n        thresHoldToMaintain = 4000000*(10**18);\n        minStakeAmount =1*(10**18);\n        maxStakeAmount = 4000000*(10**18);\n        isContractOpen = true;\n        deployTimestamp = now;\n        \n        emergencyWithdrwalEnabled = false;\n        \n    }\n    \n    \n    function updateContractStatus(bool _contractStatus) public onlyOwner{\n        isContractOpen = _contractStatus;\n        emit ContractStatusChanged(_contractStatus,msg.sender);\n    }\n    \n    \n    function enableEmergencyWithdrawl() public onlyOwner {\n        emergencyWithdrwalEnabled = true;\n    }\n    \n    /**\n     * @dev updates a particular address as investor or not\n     * \n     * Emits an {InvestorListUpdated} event indicating the update.\n     *\n     * Requirements:\n     *\n     * - `sender` must be admin.\n     */\n    \n    function updateInvestorStatus(address _investorAddress,bool updateType) public onlyOwner {\n        \n        if(usersList[_investorAddress].userAddress == address(0)){\n            usersList[_investorAddress] = User(_investorAddress,0,true);\n        }\n        usersList[_investorAddress].isPrivateInvestor = updateType;\n        \n        emit InvestorListUpdated(_investorAddress,updateType);\n    }\n    \n    \n    /**\n     * @dev Transfers the referral balance amount to user\n     * \n     * Emits an {ReferralClaimed} event indicating the update.\n     *\n     * Requirements:\n     *\n     * - `sender` must have referralBalance of more than 0.\n     */\n    function claimReferral() public {\n        \n        require(usersList[msg.sender].referralBalance > 0,'No referral balance');\n        require(transferFunds(msg.sender,usersList[msg.sender].referralBalance));\n        \n        usersList[msg.sender].referralBalance = 0;\n        \n        emit ReferralClaimed(msg.sender,usersList[msg.sender].referralBalance);\n    }\n    \n    \n    function createStake(uint256 amount,uint8 lockChoice,address refereeAddress) public returns(uint256 stakeId){\n        \n        require(isContractOpen,'Staking is closed,please contact support');\n        require(amount>minStakeAmount);\n        require(amount<maxStakeAmount);\n        \n        if(usersList[msg.sender].userAddress == address(0)){\n            usersList[msg.sender] = User(msg.sender,0,false);\n        }\n        \n        require(tokenContract.transferFrom(msg.sender,address(this),amount),'Token tranfer to contract not completed');\n        stakesList[stakeCount++] = UserStake(msg.sender,amount,now,lockTimes[lockChoice],lockChoice,now+lockTimes[lockChoice],now,0,refereeAddress,true);\n        userStakes[msg.sender].push(stakeCount-1);\n        userTotalStakeBalance[msg.sender] = userTotalStakeBalance[msg.sender].add(amount);\n        totalTokensStaked = totalTokensStaked.add(amount);\n        \n        if(msg.sender != refereeAddress){\n            awardReferral(refereeAddress,(amount*10)/100);\n        }\n        \n        emit StakeCreated(msg.sender,amount,stakeCount-1);\n        return stakeCount-1;\n    }\n    \n    function createLock(address userAddress,uint256 amount,uint8 lockChoice) public returns(uint256 lockId){\n        \n        require(isContractOpen,'Contract is closed,please contact support');\n        \n        \n        if(usersList[userAddress].userAddress == address(0)){\n            usersList[userAddress] = User(userAddress,0,true);\n        }else{\n            usersList[userAddress].isPrivateInvestor = true;\n        }\n        \n        require(tokenContract.transferFrom(msg.sender,address(this),amount),'Token tranfer to contract not completed');\n        locksList[lockCount++] = UserLock(userAddress,amount,now,lockChoice,lockTimes[lockChoice],now+lockTimes[lockChoice],true);\n        userLocks[userAddress].push(lockCount-1);\n        userTotalLockBalance[userAddress] = userTotalLockBalance[userAddress].add(amount);\n        totalTokensLocked = totalTokensLocked.add(amount);\n        \n        emit LockCreated(userAddress,amount,lockCount-1,msg.sender);\n        return lockCount-1;\n    }\n    \n    function unLock(uint256 _lockId) public returns(bool){\n        \n        require(locksList[_lockId].lockStatus,'This Lock status is not proper');\n        require(msg.sender == owner() || now > locksList[_lockId].redemptionAllowedAfter);\n        \n        locksList[_lockId].lockStatus = false;\n        require(transferFunds(locksList[_lockId].userAddress,locksList[_lockId].amount));\n        totalTokensLocked = totalTokensLocked.sub(locksList[_lockId].amount);\n        \n        emit LockRdeeemed(_lockId,locksList[_lockId].userAddress,locksList[_lockId].amount,msg.sender);\n        \n    }\n    \n    function unStake(uint256 _stakeId) public returns (bool){\n        \n        require(stakesList[_stakeId].stakeOpen);\n        require(!usersList[msg.sender].isPrivateInvestor);\n        require(stakesList[_stakeId].userAddress == msg.sender);\n        \n        require(awardRewards(_stakeId));\n        \n        stakesList[_stakeId].stakeOpen = false;\n        stakesList[_stakeId].lockTime = now;\n        stakesList[_stakeId].redemptionAllowedAfter = stakesList[_stakeId].redemptionAllowedAfter.getMin(now +thrityDaysInSeconds);\n        userTotalStakeBalance[msg.sender] = userTotalStakeBalance[msg.sender].sub(stakesList[_stakeId].amount);\n        totalTokensStaked = totalTokensStaked.sub(stakesList[_stakeId].amount);\n        emit Unstaked(stakesList[_stakeId].userAddress,_stakeId,stakesList[_stakeId].amount);\n    }\n    \n    \n    function redeem(uint256 _stakeId) public returns (bool){\n        \n        require(stakesList[_stakeId].userAddress == msg.sender);\n    \n        require(now>stakesList[_stakeId].redemptionAllowedAfter);\n        \n        if(stakesList[_stakeId].stakeOpen){\n            require(awardRewards(_stakeId));\n            userTotalStakeBalance[msg.sender] = userTotalStakeBalance[msg.sender].sub(stakesList[_stakeId].amount);\n            totalTokensStaked = totalTokensStaked.sub(stakesList[_stakeId].amount);\n\n        }\n        \n        stakesList[_stakeId].stakeOpen = false;\n        \n        require(transferFunds(stakesList[_stakeId].userAddress,stakesList[_stakeId].amount));\n        \n        emit StakeRedeemed(stakesList[_stakeId].userAddress,_stakeId,stakesList[_stakeId].amount);\n    }\n    \n    function claimRewards(uint256 _stakeId) public returns (bool){\n        require(stakesList[_stakeId].stakeOpen);\n        require(stakesList[_stakeId].userAddress == msg.sender);\n        require(now >stakesList[_stakeId].lastRewardTimeStamp+thrityDaysInSeconds);\n        require(awardRewards(_stakeId));\n\n    }\n    \n    \n    function userDetails(address _userAddress) public view returns (uint256[] memory,uint256,bool,uint256,uint256){\n        return(userStakes[_userAddress],usersList[_userAddress].referralBalance,usersList[_userAddress].isPrivateInvestor,userTotalStakeBalance[_userAddress],userTotalLockBalance[_userAddress]);   \n    }\n    \n    function getUserLockList(address _userAddress) public view returns(uint256[] memory){\n        return userLocks[_userAddress];\n    }\n    \n    function getStakeDetails(uint256 _stakeId) public view returns(address userAddress,uint256 amount,uint256 startTimeStamp,uint256 lockChoice,uint256 lockTime,uint256 redemptionAllowedAfter,uint256 lastRewardTimeStamp,uint256 interestClaimed,address refereeAddress,bool stakeOpen){\n        UserStake memory temp = stakesList[_stakeId];\n        \n        return (temp.userAddress,temp.amount,temp.startTimeStamp,temp.lockChoice,temp.lockTime,temp.redemptionAllowedAfter,temp.lastRewardTimeStamp,temp.interestClaimed,temp.refereeAddress,temp.stakeOpen);\n    }\n    \n    function getLockDetails(uint256 _lockId) public view returns(address userAddress,uint256 amount,uint256 startTimeStamp,uint256 lockChoice,uint256 lockTime,uint256 redemptionAllowedAfter,bool lockStatus){\n        UserLock memory temp = locksList[_lockId];\n        \n        return (temp.userAddress,temp.amount,temp.startTimeStamp,temp.lockChoice,temp.lockTime,temp.redemptionAllowedAfter,temp.lockStatus);\n    }\n    \n    \n    function getPendingInterestDetails(uint256 _stakeId) public view returns(uint256 amount){\n        \n        UserStake memory temp = stakesList[_stakeId];\n        //require(temp.lastRewardTimeStamp<temp.redemptionAllowedAfter);\n        uint256 monthDiff;\n        if(now>stakesList[_stakeId].redemptionAllowedAfter){\n            monthDiff = (now-stakesList[_stakeId].redemptionAllowedAfter)/thrityDaysInSeconds;   \n        }\n        uint256 interesMonths = (now-temp.lastRewardTimeStamp)/thrityDaysInSeconds-monthDiff;\n        \n        if(interesMonths>0){\n            return (temp.amount*interesMonths*interestRates[temp.lockChoice])/100;\n        }\n        return 0;\n        \n    }\n    \n    \n    function awardRewards(uint256 _stakeId) internal returns (bool){\n        \n        uint256 rewards = getPendingInterestDetails(_stakeId);\n        if(rewards>0){\n            stakesList[_stakeId].lastRewardTimeStamp = now;\n            require(transferFunds(stakesList[_stakeId].userAddress,rewards));\n            emit RewardsClaimed(stakesList[_stakeId].userAddress,rewards);\n        }\n        return true;\n    }\n    \n    function awardReferral(address _refereeAddress,uint256 amount) internal returns (bool){\n        \n        if(_refereeAddress == address(this))\n        return false;\n        if(userTotalStakeBalance[_refereeAddress] <= 0)\n        return false;\n        \n        usersList[_refereeAddress].referralBalance=usersList[_refereeAddress].referralBalance.add(amount);\n        \n        emit ReferralAwarded(_refereeAddress,amount);\n        \n    }\n    function  transferFunds(address _transferTo,uint256 amount) internal returns (bool){\n        \n        require(tokenContract.balanceOf(address(this)) > amount,'Not enough balance in contract to make the transfer');\n        require(tokenContract.transfer(_transferTo,amount));\n        \n        return true;\n    }\n    \n    \n    function redeemTokens(uint256 amount)public onlyOwner{\n        \n        uint256 tokenBalance = tokenContract.balanceOf(address(this));\n        require(amount<=tokenBalance,\"not enough balance\");\n        if(now>deployTimestamp+threeYearsInSeconds){\n            require(tokenContract.transfer(msg.sender,amount));\n        }else{\n            require(amount<=(tokenBalance-thresHoldToMaintain),\"not enough balance to maintian threshold\");\n            require(tokenContract.transfer(msg.sender,amount));\n\n        }\n    }\n    \n    \n    function emergencyWithdraw(uint256 _stakeId) public {\n        require(stakesList[_stakeId].userAddress == msg.sender);\n        require(emergencyWithdrwalEnabled,\"Emergency withdraw not enabled\");\n        require(stakesList[_stakeId].stakeOpen,\"Stake status should be open\");\n        \n        stakesList[_stakeId].stakeOpen = false;\n        \n        require(transferFunds(stakesList[_stakeId].userAddress,stakesList[_stakeId].amount));\n        \n        emit StakeRedeemed(stakesList[_stakeId].userAddress,_stakeId,stakesList[_stakeId].amount);\n    }\n    \n    \n    function withdrawAdditionalFunds(uint256 amount) public onlyOwner {\n        \n        uint256 tokenBalance = tokenContract.balanceOf(address(this));\n        require(amount< tokenBalance.sub(totalTokensStaked));\n        require(transferFunds(owner(),amount));\n        \n    }\n    \n    \n    \n    \n    \n}\n"}}}