{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/uniutils.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: UNLICENSED\n\ninterface IUniswapV2Pair\n{\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    \n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ncontract UniUtils\n{\n    constructor() public\n    {\n    }\n\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\n        assembly {\n          addr := mload(add(bys,20))\n        } \n    }\n    \n    function copy(bytes memory dst, bytes memory src, uint start, uint count) private pure {\n        for(uint i = 0; i < count; i++)\n        {\n            dst[start+i] = src[i];\n        }\n    }\n\n    function getPackedReserves(bytes calldata pack) external view returns (bytes memory)\n    {\n        uint count = pack.length/20;\n        bytes memory result = new bytes(28*count);\n        \n        for(uint i = 0; i < count; i++)\n        {\n            uint s = i*20;\n            uint e = s + 20;\n            bytes calldata ab = pack[s:e];\n            \n            address a0 = bytesToAddress(ab);\n            \n            (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(a0).getReserves();\n            \n            bytes memory r = abi.encodePacked(reserve0,reserve1);\n            copy(result, r, i*28, 28);\n        }\n        \n        return result;\n    }\n}"
    }
  }
}