{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "efil.sol": {
      "content": "pragma solidity ^0.8.0;\n\n\ninterface IToken {\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n\ninterface IStake {\n    function property() external view returns (address property);\n\n    function accountState(address account) external view returns (uint share, uint accruedIndex, uint accruedAmount);\n}\n\ncontract FILSTUtils {\n\n    IToken filst;\n    IToken efil_filst_lp;\n    IToken filst_usdt_lp;\n    IToken cFILST;\n    IStake efil_filst_lp_stake;\n    IStake filst_usdt_lp_stake;\n    IStake filst_stake;\n\n\n    constructor(\n        address _filst,\n        address _cFILST,\n        address _efil_filst_lp,\n        address _filst_usdt_lp,\n        address _efil_filst_lp_stake,\n        address _filst_usdt_lp_stake,\n        address _filst_stake\n    ){\n        filst = IToken(_filst);\n        filst_usdt_lp = IToken(_filst_usdt_lp);\n        efil_filst_lp = IToken(_efil_filst_lp);\n        cFILST = IToken(_cFILST);\n        efil_filst_lp_stake = IStake(_efil_filst_lp_stake);\n        filst_usdt_lp_stake = IStake(_filst_usdt_lp_stake);\n        filst_stake = IStake(_filst_stake);\n    }\n\n\n    //获取LP中用户FILST量\n    function getLpFILSTAmount(IToken lp, address account) public view returns (uint amount){\n        return lp.balanceOf(account) * filst.balanceOf(address(lp)) / lp.totalSupply();\n    }\n\n\n    function getLpFILSTAmounts(IToken lp, address[] memory accounts) public view returns (uint[] memory amounts){\n        amounts = new uint[](accounts.length);\n        for (uint i = 0; i < accounts.length; i ++) {\n            amounts[i] = getLpFILSTAmount(lp, accounts[i]);\n        }\n        return amounts;\n    }\n\n    function getStakeFILSTAmount(IStake stake, address account) public view returns (uint amount){\n        uint stakeAmount = getLpFILSTAmount(IToken(stake.property()), address(stake));\n        (uint accountState,,) = stake.accountState(account);\n        return accountState * stakeAmount / IToken(stake.property()).balanceOf(address(stake));\n    }\n\n    function getStakeFILSTAmounts(IStake stake, address[] memory accounts) public view returns (uint[] memory amounts){\n        amounts = new uint[](accounts.length);\n        for (uint i = 0; i < accounts.length; i ++) {\n            amounts[i] = getStakeFILSTAmount(stake, accounts[i]);\n        }\n        return amounts;\n    }\n\n    function getTokenAmounts(IToken token, address[] memory accounts) public view returns (uint[] memory amounts){\n        amounts = new uint[](accounts.length);\n        for (uint i = 0; i < accounts.length; i ++) {\n            amounts[i] = token.balanceOf(accounts[i]);\n        }\n        return amounts;\n    }\n\n    function getFilstEfilLpAmounts(address[] memory accounts) public view returns (uint[] memory amounts){\n        return getLpFILSTAmounts(efil_filst_lp, accounts);\n    }\n\n    function getFilstUsdtLpAmounts(address[] memory accounts) public view returns (uint[] memory amounts){\n        return getLpFILSTAmounts(filst_usdt_lp, accounts);\n    }\n\n    function getFilstAmounts(address[] memory accounts) public view returns (uint[] memory amounts){\n        return getTokenAmounts(filst, accounts);\n    }\n\n    function getCFilstAmounts(address[] memory accounts) public view returns (uint[] memory amounts){\n        return getTokenAmounts(cFILST, accounts);\n    }\n\n    function getFilstEfilLpStakeAmounts(address[] memory accounts) public view returns (uint[] memory amounts){\n        return getStakeFILSTAmounts(efil_filst_lp_stake, accounts);\n    }\n\n    function getFilstUsdtLpStakeAmounts(address[] memory accounts) public view returns (uint[] memory amounts){\n        return getStakeFILSTAmounts(filst_usdt_lp_stake, accounts);\n    }\n\n    function getFilstStakeAmounts(address[] memory accounts) public view returns (uint[] memory amounts){\n        amounts = new uint[](accounts.length);\n        for (uint i = 0; i < accounts.length; i ++) {\n            (uint userStake,,) = filst_stake.accountState(accounts[i]);\n            amounts[i] = userStake;\n        }\n        return amounts;\n    }\n}\n"
    }
  }
}