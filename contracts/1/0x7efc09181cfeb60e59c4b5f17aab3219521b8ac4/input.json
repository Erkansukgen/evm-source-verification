{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Bridge.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\n// iRUNE Interface\ninterface iRUNE {\n    function transfer(address, uint) external returns (bool);\n    function transferTo(address, uint) external returns (bool);\n}\n\ncontract RUNE_Bridge {\n\n    address public owner;\n    address public server;\n    address public RUNE;\n\n    event Deposit(address indexed from, uint value, string memo);\n    event Outbound(address indexed to, uint value, string memo);\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Only Owner can execute\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Must be Owner\");\n        _;\n    }\n\n    // Only Owner/Server can execute\n    modifier onlyAdmin() {\n        require(msg.sender == server || msg.sender == owner, \"Must be Admin\");\n        _;\n    }\n\n    // Owner calls to set server\n    function setServer(address _server) public onlyOwner {\n        server = _server;\n    }\n\n    // Owner calls to set RUNE\n    function setRune(address _rune) public onlyOwner {\n        RUNE = _rune;\n    }\n\n    // User to deposit RUNE with a memo.\n    function deposit(uint value, string memory memo) public {\n        require(value > 0, \"user must send assets\");\n        iRUNE(RUNE).transferTo(address(this), value);\n        emit Deposit(msg.sender, value, memo);\n    }\n\n    // Admin to transfer to recipient\n    function transferOut(address to, uint value, string memory memo) public onlyAdmin {\n        iRUNE(RUNE).transfer(to, value);\n        emit Outbound(to, value, memo);\n    }\n\n}"}}}