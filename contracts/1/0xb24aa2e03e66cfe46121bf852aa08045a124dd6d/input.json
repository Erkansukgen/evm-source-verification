{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "sol-defifactory-token/CrossChainBridge.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.8;\n\nimport \"./openzeppelin/access/AccessControlEnumerable.sol\";\nimport \"./interfaces/IDefiFactoryToken.sol\";\nimport \"./interfaces/IDeftStorageContract.sol\";\n\nstruct BulkFeeDependingOnDestinationChainId {\n    address token;\n    uint chainId;\n    uint amountAsFee;\n}\n\ncontract CrossChainBridge is AccessControlEnumerable {\n    event ProofOfBurn(address addr, address token, uint amount, uint amountAsFee, uint currentNonce, uint sourceChain, uint destinationChain, bytes32 transactionHash);\n    event ProofOfMint(address addr, address token, uint amountAsFee, uint finalAmount, bytes32 transactionHash);\n    event ApprovedTransaction(bytes32 transactionHash);\n    event BulkApprovedTransactions(bytes32[] transactionHashes);\n    event FeeUpdated(uint newFeePercent);\n    \n    enum States{ DefaultValue, Burned, Approved, Executed }\n    mapping(bytes32 => States) public transactionStorage;\n    \n    uint constant NO_BOTS_TECH_CONTRACT_ID = 0;\n    uint constant DEFT_STORAGE_CONTRACT_ID = 3;\n    bytes32 public constant ROLE_APPROVER = keccak256(\"ROLE_APPROVER\");\n    \n    \n    address UNISWAP_V2_FACTORY_ADDRESS;\n    address WETH_TOKEN_ADDRESS;\n    \n    mapping(address => uint) public currentNonce;\n    address public beneficiaryAddress;\n    \n    mapping(address => mapping (uint => uint)) feeDependingOnDestinationChainId;\n    \n    uint constant ETH_MAINNET_CHAIN_ID = 1;\n    uint constant ETH_ROPSTEN_CHAIN_ID = 3;\n    uint constant ETH_KOVAN_CHAIN_ID = 42;\n    uint constant BSC_MAINNET_CHAIN_ID = 56;\n    uint constant BSC_TESTNET_CHAIN_ID = 97;\n    uint constant MATIC_MAINNET_CHAIN_ID = 137;\n    uint constant AVALANCHE_MAINNET_CHAIN_ID = 43114;\n    uint constant FANTOM_MAINNET_CHAIN_ID = 250;\n    \n    address constant APPROVER_WALLET = 0xdEF78a28c78A461598d948bc0c689ce88f812AD8;\n    \n    struct SourceProofOfBurn {\n        uint amountToBridge;\n        uint amountAsFee;\n        uint sourceChainId;\n        uint sourceNonce;\n        address sourceTokenAddr;\n        bytes32 transactionHash;\n    }\n    \n    constructor() {\n        _setupRole(ROLE_ADMIN, msg.sender);\n        _setupRole(ROLE_APPROVER, msg.sender);\n        _setupRole(ROLE_APPROVER, APPROVER_WALLET);\n        \n        \n        beneficiaryAddress = APPROVER_WALLET;\n        \n        BulkFeeDependingOnDestinationChainId[] memory bulkFees;\n        \n        /* Testnet */\n        /*if (block.chainid == ETH_KOVAN_CHAIN_ID)\n        {\n            _setupRole(ROLE_ADMIN, 0x539FaA851D86781009EC30dF437D794bCd090c8F);\n            _setupRole(ROLE_APPROVER, 0x539FaA851D86781009EC30dF437D794bCd090c8F);\n            \n            bulkFees = new BulkFeeDependingOnDestinationChainId[](1);\n            bulkFees[0] = BulkFeeDependingOnDestinationChainId(0x40A24Fe8E4F7dDd2F614C0BC7e3d405b60f6a248, BSC_TESTNET_CHAIN_ID, 1e5 * 1e18); // allow to bridge to bsc\n        } else if (block.chainid == BSC_TESTNET_CHAIN_ID)\n        {\n            _setupRole(ROLE_ADMIN, 0x539FaA851D86781009EC30dF437D794bCd090c8F);\n            _setupRole(ROLE_APPROVER, 0x539FaA851D86781009EC30dF437D794bCd090c8F);\n            \n            bulkFees = new BulkFeeDependingOnDestinationChainId[](1);\n            bulkFees[0] = BulkFeeDependingOnDestinationChainId(0x40A24Fe8E4F7dDd2F614C0BC7e3d405b60f6a248, ETH_KOVAN_CHAIN_ID, 500000 * 1e18); // allow to bridge to eth\n        }*/\n        \n        /* MAINNET */\n        if (block.chainid == ETH_MAINNET_CHAIN_ID)\n        {\n            bulkFees = new BulkFeeDependingOnDestinationChainId[](4);\n            bulkFees[0] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, BSC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to bsc\n            bulkFees[1] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, MATIC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to polygon\n            bulkFees[2] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, FANTOM_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to fantom\n            bulkFees[3] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, AVALANCHE_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to avalanche\n        } else if (block.chainid == BSC_MAINNET_CHAIN_ID)\n        {\n            bulkFees = new BulkFeeDependingOnDestinationChainId[](4);\n            bulkFees[0] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, ETH_MAINNET_CHAIN_ID, 500000 * 1e18); // allow to bridge to eth\n            bulkFees[1] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, MATIC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to polygon\n            bulkFees[2] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, FANTOM_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to fantom\n            bulkFees[3] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, AVALANCHE_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to avalanche\n        } else if (block.chainid == MATIC_MAINNET_CHAIN_ID)\n        {\n            bulkFees = new BulkFeeDependingOnDestinationChainId[](4);\n            bulkFees[0] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, ETH_MAINNET_CHAIN_ID, 500000 * 1e18); // allow to bridge to eth\n            bulkFees[1] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, BSC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to bsc\n            bulkFees[2] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, FANTOM_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to fantom\n            bulkFees[3] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, AVALANCHE_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to avalanche\n        } else if (block.chainid == FANTOM_MAINNET_CHAIN_ID)\n        {\n            bulkFees = new BulkFeeDependingOnDestinationChainId[](4);\n            bulkFees[0] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, ETH_MAINNET_CHAIN_ID, 500000 * 1e18); // allow to bridge to eth\n            bulkFees[1] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, BSC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to bsc\n            bulkFees[2] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, MATIC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to polygon\n            bulkFees[3] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, AVALANCHE_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to avalanche\n        } else if (block.chainid == AVALANCHE_MAINNET_CHAIN_ID)\n        {\n            bulkFees = new BulkFeeDependingOnDestinationChainId[](4);\n            bulkFees[0] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, ETH_MAINNET_CHAIN_ID, 500000 * 1e18); // allow to bridge to eth\n            bulkFees[1] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, BSC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to bsc\n            bulkFees[2] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, FANTOM_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to fantom\n            bulkFees[3] = BulkFeeDependingOnDestinationChainId(0xdef1fac7Bf08f173D286BbBDcBeeADe695129840, MATIC_MAINNET_CHAIN_ID, 25000 * 1e18); // allow to bridge to polygon\n        }\n\n        bulkUpdateFeeDependingOnDestinationChainId(bulkFees);\n    }\n    \n    function getFeeDependingOnDestinationChainId(address tokenAddr, uint destinationChainId)\n        public\n        view\n        returns(uint)\n    {\n        return feeDependingOnDestinationChainId[tokenAddr][destinationChainId];\n    }\n    \n    function bulkUpdateFeeDependingOnDestinationChainId(BulkFeeDependingOnDestinationChainId[] memory bulkFees)\n        public\n        onlyRole(ROLE_ADMIN)\n    {\n        for (uint i; i < bulkFees.length; i++)\n        {\n            feeDependingOnDestinationChainId[bulkFees[i].token][bulkFees[i].chainId] = bulkFees[i].amountAsFee;\n        }\n    }\n    \n    function updateBeneficiaryAddress(address newBeneficiaryAddr)\n        external\n        onlyRole(ROLE_ADMIN)\n    {\n        beneficiaryAddress = newBeneficiaryAddr;\n    }\n    \n    function markTransactionAsApproved(bytes32 transactionHash) \n        external\n        onlyRole(ROLE_APPROVER)\n    {\n        require(\n            transactionStorage[transactionHash] < States.Approved,\n            \"CCB: Already approved\"\n        );\n        transactionStorage[transactionHash] = States.Approved;\n        emit ApprovedTransaction(transactionHash);\n    }\n    \n    function bulkMarkTransactionsAsApproved(bytes32[] memory transactionHashes) \n        external\n        onlyRole(ROLE_APPROVER)\n    {\n        for(uint i=0; i<transactionHashes.length; i++)\n        {\n            if (transactionStorage[transactionHashes[i]] < States.Approved)\n            {\n                transactionStorage[transactionHashes[i]] = States.Approved;\n            } else\n            {\n                transactionHashes[i] = 0x0;\n            }\n        }\n        emit BulkApprovedTransactions(transactionHashes);\n    }\n    \n    function mintWithBurnProof(SourceProofOfBurn memory sourceProofOfBurn) \n        external\n    {\n        require(\n            transactionStorage[sourceProofOfBurn.transactionHash] == States.Approved,\n            \"CCB: Transaction is not approved or already executed\"\n        );\n        \n        bytes32 transactionHash = keccak256(abi.encodePacked(\n                msg.sender, sourceProofOfBurn.sourceTokenAddr, sourceProofOfBurn.amountToBridge, sourceProofOfBurn.amountAsFee, sourceProofOfBurn.sourceChainId, block.chainid, sourceProofOfBurn.sourceNonce\n            ));\n        require(\n            transactionHash == sourceProofOfBurn.transactionHash,\n            \"CCB: Provided hash is invalid\"\n        );\n        \n        uint amountAsFeeHasToBeLargerThanZero = feeDependingOnDestinationChainId[sourceProofOfBurn.sourceTokenAddr][sourceProofOfBurn.sourceChainId];\n        require(\n            amountAsFeeHasToBeLargerThanZero > 0,\n            \"CCB: Destination is forbidden (mint)\"\n        );\n        \n        IDefiFactoryToken iDefiFactoryToken = IDefiFactoryToken(sourceProofOfBurn.sourceTokenAddr);\n        /*if (\n                block.chainid != ETH_KOVAN_CHAIN_ID\n            )\n        {\n            IDeftStorageContract iDeftStorageContract = IDeftStorageContract(\n                iDefiFactoryToken.getUtilsContractAtPos(DEFT_STORAGE_CONTRACT_ID)\n            );\n            require(\n                !iDeftStorageContract.isBotAddress(msg.sender),\n                \"CCB: Minting is temporary disabled!\"\n            );\n        }*/\n        IDeftStorageContract iDeftStorageContract = IDeftStorageContract(\n            iDefiFactoryToken.getUtilsContractAtPos(DEFT_STORAGE_CONTRACT_ID)\n        );\n        require(\n            !iDeftStorageContract.isBotAddress(msg.sender),\n            \"CCB: Minting is temporary disabled!\"\n        );\n        \n        transactionStorage[sourceProofOfBurn.transactionHash] = States.Executed;\n        \n        uint amountAsFee = sourceProofOfBurn.amountAsFee;\n        uint finalAmount = sourceProofOfBurn.amountToBridge - amountAsFee; \n        \n        iDefiFactoryToken.mintByBridge(msg.sender, finalAmount);\n        \n        emit ProofOfMint(msg.sender, sourceProofOfBurn.sourceTokenAddr, amountAsFee, finalAmount, transactionHash);\n    }\n    \n    function burnAndCreateProof(address token, uint amount, uint destinationChainId) \n        external\n    {\n        IDefiFactoryToken iDefiFactoryToken = IDefiFactoryToken(token);\n        require(\n            amount <= iDefiFactoryToken.balanceOf(msg.sender),\n            \"CCB: Amount must not exceed available balance. Try reducing the amount.\"\n        );\n        require(\n            block.chainid != destinationChainId,\n            \"CCB: Destination chain must be different from current chain\"\n        );\n        \n        uint amountAsFee = feeDependingOnDestinationChainId[token][destinationChainId];\n        require(\n            amountAsFee > 0,\n            \"CCB: Destination is forbidden (burn)\"\n        );\n        require(\n            amount > amountAsFee,\n            \"CCB: Amount is lower than the minimum permitted amount\"\n        );\n        \n        /*if (\n                block.chainid != ETH_KOVAN_CHAIN_ID\n            )\n        {\n            IDeftStorageContract iDeftStorageContract = IDeftStorageContract(\n                iDefiFactoryToken.getUtilsContractAtPos(DEFT_STORAGE_CONTRACT_ID)\n            );\n            require(\n                !iDeftStorageContract.isBotAddress(msg.sender),\n                \"CCB: Burning is temporary disabled!\"\n            );\n        }*/\n        IDeftStorageContract iDeftStorageContract = IDeftStorageContract(\n            iDefiFactoryToken.getUtilsContractAtPos(DEFT_STORAGE_CONTRACT_ID)\n        );\n        require(\n            !iDeftStorageContract.isBotAddress(msg.sender),\n            \"CCB: Burning is temporary disabled!\"\n        );\n        \n        bytes32 transactionHash = keccak256(abi.encodePacked(\n                msg.sender, token, amount, amountAsFee, block.chainid, destinationChainId, currentNonce[token]\n            ));\n            \n        transactionStorage[transactionHash] = States.Burned;\n        \n        iDefiFactoryToken.burnByBridge(msg.sender, amount);\n        iDefiFactoryToken.mintHumanAddress(beneficiaryAddress, amountAsFee);\n        \n        emit ProofOfBurn(msg.sender, token, amount, amountAsFee, currentNonce[token], block.chainid, destinationChainId, transactionHash);\n        currentNonce[token]++;\n    }\n}"
    },
    "sol-defifactory-token/interfaces/IDefiFactoryToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nstruct AccessSettings {\n        bool isMinter;\n        bool isBurner;\n        bool isTransferer;\n        bool isModerator;\n        bool isTaxer;\n        \n        address addr;\n    }\n\ninterface IDefiFactoryToken {\n    \n    function allowance(\n        address owner, \n        address spender\n    ) external view returns (uint);\n    \n    function approve(\n        address _spender,\n        uint _value\n    )  external returns (\n        bool success\n    );\n    \n    function balanceOf(\n        address account\n    )\n        external\n        view\n        returns (uint);\n    \n    function totalSupply()\n        external\n        view\n        returns (uint);\n        \n    function chargeCustomTax(address from, uint amount)\n        external;\n        \n    function mintHumanAddress(address to, uint desiredAmountToMint) external;\n\n    function burnHumanAddress(address from, uint desiredAmountToBurn) external;\n\n    function mintByBridge(address to, uint realAmountToMint) external;\n\n    function burnByBridge(address from, uint realAmountBurn) external;\n    \n    function getUtilsContractAtPos(uint pos)\n        external\n        view\n        returns (address);\n        \n    function transferFromTeamVestingContract(address recipient, uint256 amount) external;\n    \n    function correctTransferEvents(address[] calldata addrs)\n        external;\n    \n    function publicForcedUpdateCacheMultiplier()\n        external;\n    \n    function updateUtilsContracts(AccessSettings[] calldata accessSettings)\n        external;\n    \n    function transferCustom(address sender, address recipient, uint256 amount)\n        external;\n}"
    },
    "sol-defifactory-token/interfaces/IDeftStorageContract.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nstruct TransactionInfo {\n    bool isBuy;\n    bool isSell;\n    bool isHumanTransaction;\n}\n\ninterface IDeftStorageContract {\n    \n    function getBuyTimestamp(address tokenAddr, address addr)\n        external\n        view\n        returns (uint);\n    \n    function updateBuyTimestamp(address tokenAddr, address addr, uint newBuyTimestamp)\n        external;\n        \n    function checkTransactionInfo(address tokenAddr, address sender, address recipient)\n        external\n        returns (TransactionInfo memory);\n    \n    function isBotAddress(address addr)\n        external\n        view\n        returns (bool);\n    \n    function isExcludedFromBalance(address addr)\n        external\n        view\n        returns (bool);\n    \n    function bulkMarkAddressAsBot(address[] calldata addrs)\n        external;\n    \n    function markAddressAsBot(address addr)\n        external;\n    \n    function markAddressAsNotBot(address addr)\n        external;\n        \n        \n    function markPairAsDeftEthPair(address addr, bool value)\n        external;\n    \n    function markPairAsDeftOtherPair(address addr, bool value)\n        external;\n}"
    },
    "sol-defifactory-token/openzeppelin/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n\nstruct RoleAccess {\n    bytes32 role;\n    address addr;\n}\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address account) external;\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `ROLE_ADMIN`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `ROLE_ADMIN` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping (address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant ROLE_ADMIN = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if(!hasRole(role, account)) {\n            revert(string(abi.encodePacked(\n                \"AccessControl: account \",\n                Strings.toHexString(uint160(account), 20),\n                \" is missing role \",\n                Strings.toHexString(uint256(role), 32)\n            )));\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(ROLE_ADMIN) {\n        _grantRole(role, account);\n    }\n    \n    function grantRolesBulk(RoleAccess[] calldata roles)\n        external\n        onlyRole(ROLE_ADMIN)\n    {\n        for(uint i = 0; i<roles.length; i++)\n        {\n            _setupRole(roles[i].role, roles[i].addr);\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "sol-defifactory-token/openzeppelin/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable {\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n}\n"
    },
    "sol-defifactory-token/openzeppelin/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "sol-defifactory-token/openzeppelin/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "sol-defifactory-token/openzeppelin/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "sol-defifactory-token/openzeppelin/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "sol-defifactory-token/openzeppelin/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    }
  }
}