{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ZapDelegator.sol": {
      "content": "pragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nabstract contract YToken {\r\n    function getPricePerFullShare() external view virtual returns (uint256);\r\n}\r\n\r\ncontract ZapDelegator {\r\n    address[] public _coins;\r\n    address[] public _underlying_coins;\r\n    address public curve;\r\n    address public token;\r\n    \r\n    constructor(address[4] memory _coinsIn, address[4] memory _underlying_coinsIn, address _curve, address _pool_token) public {\r\n        for (uint i = 0; i < 4; i++) {\r\n            require(_underlying_coinsIn[i] != address(0));\r\n            require(_coinsIn[i] != address(0));\r\n            _coins.push(_coinsIn[i]);\r\n            _underlying_coins.push(_underlying_coinsIn[i]);\r\n        }\r\n        curve = _curve;\r\n        token = _pool_token;\r\n    }\r\n    \r\n    function coins(int128 i) public view returns (address) {\r\n        return _coins[uint256(i)];\r\n    }\r\n    \r\n    function underlying_coins(int128 i) public view returns (address) {\r\n        return _underlying_coins[uint256(i)];\r\n    }\r\n\r\n    fallback() external payable {\r\n        address _target = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\r\n\r\n        assembly {\r\n            let _calldataMemOffset := mload(0x40)\r\n            let _callDataSZ := calldatasize()\r\n            let _size := and(add(_callDataSZ, 0x1f), not(0x1f))\r\n            mstore(0x40, add(_calldataMemOffset, _size))\r\n            calldatacopy(_calldataMemOffset, 0x0, _callDataSZ)\r\n            let _retval := delegatecall(gas(), _target, _calldataMemOffset, _callDataSZ, 0, 0)\r\n            switch _retval\r\n            case 0 {\r\n                revert(0,0)\r\n            } default {\r\n                let _returndataMemoryOff := mload(0x40)\r\n                mstore(0x40, add(_returndataMemoryOff, returndatasize()))\r\n                returndatacopy(_returndataMemoryOff, 0x0, returndatasize())\r\n                return(_returndataMemoryOff, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}"
    }
  }
}