{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DSPause.sol": {
      "content": "// hevm: flattened sources of lib/ds-pause/src/pause.sol\npragma solidity =0.5.12 >0.4.13 >0.4.20 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.6 <0.6.0;\n\n////// lib/ds-auth/src/auth.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n////// lib/ds-token/lib/ds-stop/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n\n        _;\n    }\n}\n\n////// lib/ds-pause/src/pause.sol\n// Copyright (C) 2019 David Terry <me@xwvvvvwx.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.0 <0.6.0; */\n\n/* import {DSNote} from \"ds-note/note.sol\"; */\n/* import {DSAuth, DSAuthority} from \"ds-auth/auth.sol\"; */\n\ncontract DSPause is DSAuth, DSNote {\n\n    // --- admin ---\n\n    modifier wait { require(msg.sender == address(proxy), \"ds-pause-undelayed-call\"); _; }\n\n    function setOwner(address owner_) public wait {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n    function setAuthority(DSAuthority authority_) public wait {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n    function setDelay(uint delay_) public note wait {\n        delay = delay_;\n    }\n\n    // --- math ---\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        z = x + y;\n        require(z >= x, \"ds-pause-addition-overflow\");\n    }\n\n    // --- data ---\n\n    mapping (bytes32 => bool) public plans;\n    DSPauseProxy public proxy;\n    uint         public delay;\n\n    // --- init ---\n\n    constructor(uint delay_, address owner_, DSAuthority authority_) public {\n        delay = delay_;\n        owner = owner_;\n        authority = authority_;\n        proxy = new DSPauseProxy();\n    }\n\n    // --- util ---\n\n    function hash(address usr, bytes32 tag, bytes memory fax, uint eta)\n        internal pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(usr, tag, fax, eta));\n    }\n\n    function soul(address usr)\n        internal view\n        returns (bytes32 tag)\n    {\n        assembly { tag := extcodehash(usr) }\n    }\n\n    // --- operations ---\n\n    function plot(address usr, bytes32 tag, bytes memory fax, uint eta)\n        public note auth\n    {\n        require(eta >= add(now, delay), \"ds-pause-delay-not-respected\");\n        plans[hash(usr, tag, fax, eta)] = true;\n    }\n\n    function drop(address usr, bytes32 tag, bytes memory fax, uint eta)\n        public note auth\n    {\n        plans[hash(usr, tag, fax, eta)] = false;\n    }\n\n    function exec(address usr, bytes32 tag, bytes memory fax, uint eta)\n        public note\n        returns (bytes memory out)\n    {\n        require(plans[hash(usr, tag, fax, eta)], \"ds-pause-unplotted-plan\");\n        require(soul(usr) == tag,                \"ds-pause-wrong-codehash\");\n        require(now >= eta,                      \"ds-pause-premature-exec\");\n\n        plans[hash(usr, tag, fax, eta)] = false;\n\n        out = proxy.exec(usr, fax);\n        require(proxy.owner() == address(this), \"ds-pause-illegal-storage-change\");\n    }\n}\n\n// plans are executed in an isolated storage context to protect the pause from\n// malicious storage modification during plan execution\ncontract DSPauseProxy {\n    address public owner;\n    modifier auth { require(msg.sender == owner, \"ds-pause-proxy-unauthorized\"); _; }\n    constructor() public { owner = msg.sender; }\n\n    function exec(address usr, bytes memory fax)\n        public auth\n        returns (bytes memory out)\n    {\n        bool ok;\n        (ok, out) = usr.delegatecall(fax);\n        require(ok, \"ds-pause-delegatecall-error\");\n    }\n}\n"
    }
  }
}