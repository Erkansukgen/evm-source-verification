{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"unibase.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.7.0;\r\n\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\nabstract contract WETH9_ {\r\n    mapping (address => uint) public  balanceOf;\r\n\r\n    function deposit() virtual external payable;\r\n    function withdraw(uint wad) virtual external;\r\n\r\n    function approve(address guy, uint wad) virtual external returns (bool) ;\r\n    function transfer(address dst, uint wad) virtual external returns (bool) ;\r\n    function transferFrom(address src, address dst, uint wad) virtual external returns (bool);\r\n}\r\n\r\ncontract hbSwapper {\r\n    address private owner;\r\n\r\n    address internal UNISWAP_ROUTER_ADDRESS = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address internal WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    WETH9_ internal weth; \r\n    bool internal verbose;\r\n\r\n    IUniswapV2Router02 public uniswapRouter;\r\n\r\n    //@dev events we want to emit go here\r\n    event SwapData(string status, uint[] swapValue, address[] path);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    constructor() payable {\r\n        owner = msg.sender;\r\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n        weth = WETH9_(WETH_ADDRESS);\r\n        verbose = true;\r\n\r\n        weth.deposit{ value: msg.value }();\r\n        weth.transfer(address(this), msg.value);\r\n    }\r\n\r\n    function swapVerbosity() public onlyOwner {\r\n        if (verbose) {\r\n            verbose = false;\r\n            } else {\r\n                verbose = true;\r\n                }\r\n    }\r\n\r\n    function verbosity() public view returns (bool) {\r\n        return verbose;\r\n    }\r\n\r\n    function depositETH() public payable {\r\n        weth.deposit{ value: msg.value }();\r\n        weth.transfer(address(this), msg.value);\r\n    }\r\n\r\n    function withdrawETH() public payable onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function getETHBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawWETH(uint _amount) public payable onlyOwner {\r\n        weth.withdraw(_amount);\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function getWETHBalance() public view returns (uint) {\r\n        return weth.balanceOf(address(this));\r\n    }\r\n    \r\n    function swap(address[] calldata _path, uint minOut) public onlyOwner {\r\n        \r\n        uint _ddline = block.timestamp;\r\n\r\n        uint _wethBalance = getWETHBalance();\r\n        weth.approve(address(UNISWAP_ROUTER_ADDRESS), _wethBalance);\r\n\r\n        if (verbose) {\r\n            try uniswapRouter.swapExactTokensForTokens(\r\n            _wethBalance, minOut, _path, address(this), _ddline\r\n            ) returns (uint[] memory _swapData) {\r\n                emit SwapData(\"Success\", _swapData, _path);\r\n            } catch {\r\n                uint[] memory _swapData = uniswapRouter.getAmountsOut(_wethBalance, _path);\r\n                emit SwapData(\"Failed\", _swapData, _path);\r\n            }\r\n        } else {\r\n            uint[] memory _swapData = uniswapRouter.swapExactTokensForTokens(\r\n            _wethBalance, minOut, _path, address(this), _ddline\r\n            );\r\n            emit SwapData(\"Success\", _swapData, _path);\r\n        }\r\n        \r\n    }\r\n    \r\n    function changeRouterLocation(address newLocation) public onlyOwner {\r\n        uniswapRouter = IUniswapV2Router02(newLocation);\r\n        UNISWAP_ROUTER_ADDRESS = newLocation;\r\n    }\r\n    \r\n    function destroy() public onlyOwner {\r\n        withdrawWETH(getWETHBalance());\r\n        selfdestruct(address(this));\r\n    }\r\n\r\n    fallback() external payable {\r\n    }\r\n}\r\n\r\n\r\n"}}}