{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Resolver.sol":{"content":"pragma solidity 0.5.12;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others (`ERC165Checker`).\n *\n * For an implementation, see `ERC165`.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * \n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either `approve` or `setApproveForAll`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either `approve` or `setApproveForAll`.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\ncontract IRegistry is IERC721Metadata {\n\n    event NewURI(uint256 indexed tokenId, string uri);\n\n    event NewURIPrefix(string prefix);\n\n    event Resolve(uint256 indexed tokenId, address indexed to);\n\n    event Sync(address indexed resolver, uint256 indexed updateId, uint256 indexed tokenId);\n\n    /**\n     * @dev Controlled function to set the token URI Prefix for all tokens.\n     * @param prefix string URI to assign\n     */\n    function controlledSetTokenURIPrefix(string calldata prefix) external;\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\n\n    /**\n     * @dev Mints a new a child token.\n     * Calculates child token ID using a namehash function.\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\n     * Requires the token not exist.\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the parent token\n     * @param label subdomain label of the child token ID\n     */\n    function mintChild(address to, uint256 tokenId, string calldata label) external;\n\n    /**\n     * @dev Controlled function to mint a given token ID.\n     * Requires the msg.sender to be controller.\n     * Requires the token ID to not exist.\n     * @param to address the given token ID will be minted to\n     * @param label string that is a subdomain\n     * @param tokenId uint256 ID of the parent token\n     */\n    function controlledMintChild(address to, uint256 tokenId, string calldata label) external;\n\n    /**\n     * @dev Transfers the ownership of a child token ID to another address.\n     * Calculates child token ID using a namehash function.\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\n     * Requires the token already exist.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param label subdomain label of the child token ID\n     */\n    function transferFromChild(address from, address to, uint256 tokenId, string calldata label) external;\n\n    /**\n     * @dev Controlled function to transfers the ownership of a token ID to\n     * another address.\n     * Requires the msg.sender to be controller.\n     * Requires the token already exist.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function controlledTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Safely transfers the ownership of a child token ID to another address.\n     * Calculates child token ID using a namehash function.\n     * Implements a ERC721Reciever check unlike transferFromChild.\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\n     * Requires the token already exist.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 parent ID of the token to be transferred\n     * @param label subdomain label of the child token ID\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFromChild(address from, address to, uint256 tokenId, string calldata label, bytes calldata _data) external;\n\n    /// Shorthand for calling the above ^^^ safeTransferFromChild function with an empty _data parameter. Similar to ERC721.safeTransferFrom.\n    function safeTransferFromChild(address from, address to, uint256 tokenId, string calldata label) external;\n\n    /**\n     * @dev Controlled frunction to safely transfers the ownership of a token ID\n     * to another address.\n     * Implements a ERC721Reciever check unlike controlledSafeTransferFrom.\n     * Requires the msg.sender to be controller.\n     * Requires the token already exist.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 parent ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function controlledSafeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data) external;\n\n    /**\n     * @dev Burns a child token ID.\n     * Calculates child token ID using a namehash function.\n     * Requires the msg.sender to be the owner, approved, or operator of tokenId.\n     * Requires the token already exist.\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param label subdomain label of the child token ID\n     */\n    function burnChild(uint256 tokenId, string calldata label) external;\n\n    /**\n     * @dev Controlled function to burn a given token ID.\n     * Requires the msg.sender to be controller.\n     * Requires the token already exist.\n     * @param tokenId uint256 ID of the token to be burned\n     */\n    function controlledBurn(uint256 tokenId) external;\n\n    /**\n     * @dev Sets the resolver of a given token ID to another address.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param to address the given token ID will resolve to\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function resolveTo(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gets the resolver of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the resolver of\n     * @return address currently marked as the resolver of the given token ID\n     */\n    function resolverOf(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Controlled function to sets the resolver of a given token ID.\n     * Requires the msg.sender to be controller.\n     * @param to address the given token ID will resolve to\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function controlledResolveTo(address to, uint256 tokenId) external;\n\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n/**\n * @dev Implementation of the `IERC165` interface.\n *\n * Contracts may inherit from this and call `_registerInterface` to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See `IERC165.supportsInterface`.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See `IERC165.supportsInterface`.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender, \"ERC721: approve to caller\");\n\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * This function is deprecated.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\ncontract ERC721Burnable is ERC721 {\n    /**\n     * @dev Burns a specific ERC721 token.\n     * @param tokenId uint256 id of the ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n// solium-disable error-reason\n\n/**\n * @title ControllerRole\n * @dev An Controller role defined using the Open Zeppelin Role system.\n */\ncontract ControllerRole {\n\n    using Roles for Roles.Role;\n\n    // NOTE: Commented out standard Role events to save gas.\n    // event ControllerAdded(address indexed account);\n    // event ControllerRemoved(address indexed account);\n\n    Roles.Role private _controllers;\n\n    constructor () public {\n        _addController(msg.sender);\n    }\n\n    modifier onlyController() {\n        require(isController(msg.sender));\n        _;\n    }\n\n    function isController(address account) public view returns (bool) {\n        return _controllers.has(account);\n    }\n\n    function addController(address account) public onlyController {\n        _addController(account);\n    }\n\n    function renounceController() public {\n        _removeController(msg.sender);\n    }\n\n    function _addController(address account) internal {\n        _controllers.add(account);\n        // emit ControllerAdded(account);\n    }\n\n    function _removeController(address account) internal {\n        _controllers.remove(account);\n        // emit ControllerRemoved(account);\n    }\n\n}\n\n// solium-disable no-empty-blocks,error-reason\n\n/**\n * @title Registry\n * @dev An ERC721 Token see https://eips.ethereum.org/EIPS/eip-721. With\n * additional functions so other trusted contracts to interact with the tokens.\n */\ncontract Registry is IRegistry, ControllerRole, ERC721Burnable {\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) internal _tokenURIs;\n\n    string internal _prefix;\n\n    // Mapping from token ID to resolver address\n    mapping (uint256 => address) internal _tokenResolvers;\n\n    // uint256(keccak256(abi.encodePacked(uint256(0x0), keccak256(abi.encodePacked(\"crypto\")))))\n    uint256 private constant _CRYPTO_HASH =\n        0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f;\n\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n        _;\n    }\n\n    constructor () public {\n        _mint(address(0xdead), _CRYPTO_HASH);\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(0x5b5e139f); // ERC721 Metadata Interface\n        _tokenURIs[root()] = \"crypto\";\n        emit NewURI(root(), \"crypto\");\n    }\n\n    /// ERC721 Metadata extension\n\n    function name() external view returns (string memory) {\n        return \".crypto\";\n    }\n\n    function symbol() external view returns (string memory) {\n        return \"UD\";\n    }\n\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId));\n        return string(abi.encodePacked(_prefix, _tokenURIs[tokenId]));\n    }\n\n    function controlledSetTokenURIPrefix(string calldata prefix) external onlyController {\n        _prefix = prefix;\n        emit NewURIPrefix(prefix);\n    }\n\n    /// Ownership\n\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool) {\n        return _isApprovedOrOwner(spender, tokenId);\n    }\n\n    /// Registry Constants\n\n    function root() public pure returns (uint256) {\n        return _CRYPTO_HASH;\n    }\n\n    function childIdOf(uint256 tokenId, string calldata label) external pure returns (uint256) {\n        return _childId(tokenId, label);\n    }\n\n    /// Minting\n\n    function mintChild(address to, uint256 tokenId, string calldata label) external onlyApprovedOrOwner(tokenId) {\n        _mintChild(to, tokenId, label);\n    }\n\n    function controlledMintChild(address to, uint256 tokenId, string calldata label) external onlyController {\n        _mintChild(to, tokenId, label);\n    }\n\n    function safeMintChild(address to, uint256 tokenId, string calldata label) external onlyApprovedOrOwner(tokenId) {\n        _safeMintChild(to, tokenId, label, \"\");\n    }\n\n    function safeMintChild(address to, uint256 tokenId, string calldata label, bytes calldata _data)\n        external\n        onlyApprovedOrOwner(tokenId)\n    {\n        _safeMintChild(to, tokenId, label, _data);\n    }\n\n    function controlledSafeMintChild(address to, uint256 tokenId, string calldata label, bytes calldata _data)\n        external\n        onlyController\n    {\n        _safeMintChild(to, tokenId, label, _data);\n    }\n\n    /// Transfering\n\n    function setOwner(address to, uint256 tokenId) external onlyApprovedOrOwner(tokenId)  {\n        super._transferFrom(ownerOf(tokenId), to, tokenId);\n    }\n\n    function transferFromChild(address from, address to, uint256 tokenId, string calldata label)\n        external\n        onlyApprovedOrOwner(tokenId)\n    {\n        _transferFrom(from, to, _childId(tokenId, label));\n    }\n\n    function controlledTransferFrom(address from, address to, uint256 tokenId) external onlyController {\n        _transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFromChild(\n        address from,\n        address to,\n        uint256 tokenId,\n        string memory label,\n        bytes memory _data\n    ) public onlyApprovedOrOwner(tokenId) {\n        uint256 childId = _childId(tokenId, label);\n        _transferFrom(from, to, childId);\n        require(_checkOnERC721Received(from, to, childId, _data));\n    }\n\n    function safeTransferFromChild(address from, address to, uint256 tokenId, string calldata label) external {\n        safeTransferFromChild(from, to, tokenId, label, \"\");\n    }\n\n    function controlledSafeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data)\n        external\n        onlyController\n    {\n        _transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    /// Burning\n\n    function burnChild(uint256 tokenId, string calldata label) external onlyApprovedOrOwner(tokenId) {\n        _burn(_childId(tokenId, label));\n    }\n\n    function controlledBurn(uint256 tokenId) external onlyController {\n        _burn(tokenId);\n    }\n\n    /// Resolution\n\n    function resolverOf(uint256 tokenId) external view returns (address) {\n        address resolver = _tokenResolvers[tokenId];\n        require(resolver != address(0));\n        return resolver;\n    }\n\n    function resolveTo(address to, uint256 tokenId) external onlyApprovedOrOwner(tokenId) {\n        _resolveTo(to, tokenId);\n    }\n\n    function controlledResolveTo(address to, uint256 tokenId) external onlyController {\n        _resolveTo(to, tokenId);\n    }\n\n    function sync(uint256 tokenId, uint256 updateId) external {\n        require(_tokenResolvers[tokenId] == msg.sender);\n        emit Sync(msg.sender, updateId, tokenId);\n    }\n\n    /// Internal\n\n    function _childId(uint256 tokenId, string memory label) internal pure returns (uint256) {\n        require(bytes(label).length != 0);\n        return uint256(keccak256(abi.encodePacked(tokenId, keccak256(abi.encodePacked(label)))));\n    }\n\n    function _mintChild(address to, uint256 tokenId, string memory label) internal {\n        uint256 childId = _childId(tokenId, label);\n        _mint(to, childId);\n\n        require(bytes(label).length != 0);\n        require(_exists(childId));\n\n        bytes memory domain = abi.encodePacked(label, \".\", _tokenURIs[tokenId]);\n\n        _tokenURIs[childId] = string(domain);\n        emit NewURI(childId, string(domain));\n    }\n\n    function _safeMintChild(address to, uint256 tokenId, string memory label, bytes memory _data) internal {\n        _mintChild(to, tokenId, label);\n        require(_checkOnERC721Received(address(0), to, _childId(tokenId, label), _data));\n    }\n\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        super._transferFrom(from, to, tokenId);\n        // Clear resolver (if any)\n        if (_tokenResolvers[tokenId] != address(0x0)) {\n            delete _tokenResolvers[tokenId];\n        }\n    }\n\n    function _burn(uint256 tokenId) internal {\n        super._burn(tokenId);\n        // Clear resolver (if any)\n        if (_tokenResolvers[tokenId] != address(0x0)) {\n            delete _tokenResolvers[tokenId];\n        }\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n\n    function _resolveTo(address to, uint256 tokenId) internal {\n        require(_exists(tokenId));\n        emit Resolve(tokenId, to);\n        _tokenResolvers[tokenId] = to;\n    }\n\n}\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * (.note) This call _does not revert_ if the signature is invalid, or\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\n     * the zero address is returned.\n     *\n     * (.warning) `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise)\n     * be too long), and then calling `toEthSignedMessageHash` on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return address(0);\n        }\n\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        return ecrecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)\n     * JSON-RPC method.\n     *\n     * See `recover`.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\n// solium-disable error-reason\n\ncontract SignatureUtil {\n    using ECDSA for bytes32;\n\n    // Mapping from owner to a nonce\n    mapping (uint256 => uint256) internal _nonces;\n\n    Registry internal _registry;\n\n    constructor(Registry registry) public {\n        _registry = registry;\n    }\n\n    function registry() external view returns (address) {\n        return address(_registry);\n    }\n\n    /**\n     * @dev Gets the nonce of the specified address.\n     * @param tokenId token ID for nonce query\n     * @return nonce of the given address\n     */\n    function nonceOf(uint256 tokenId) external view returns (uint256) {\n        return _nonces[tokenId];\n    }\n\n    function _validate(bytes32 hash, uint256 tokenId, bytes memory signature) internal {\n        uint256 nonce = _nonces[tokenId];\n\n        address signer = keccak256(abi.encodePacked(hash, address(this), nonce)).toEthSignedMessageHash().recover(signature);\n        require(\n            signer != address(0) &&\n            _registry.isApprovedOrOwner(\n                signer,\n                tokenId\n            ),\n            \"INVALID_SIGNATURE\"\n        );\n\n        _nonces[tokenId] += 1;\n    }\n\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ninterface IMintingController {\n\n    /**\n     * @dev Minter function that mints a Second Level Domain (SLD).\n     * @param to address to mint the new SLD to.\n     * @param label SLD label to mint.\n     */\n    function mintSLD(address to, string calldata label) external;\n\n    /**\n     * @dev Minter function that safely mints a Second Level Domain (SLD).\n     * Implements a ERC721Reciever check unlike mintSLD.\n     * @param to address to mint the new SLD to.\n     * @param label SLD label to mint.\n     */\n    function safeMintSLD(address to, string calldata label) external;\n\n    /**\n     * @dev Minter function that safely mints a Second Level Domain (SLD).\n     * Implements a ERC721Reciever check unlike mintSLD.\n     * @param to address to mint the new SLD to.\n     * @param label SLD label to mint.\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeMintSLD(address to, string calldata label, bytes calldata _data) external;\n\n}\n\n/**\n * @title MintingController\n * @dev Defines the functions for distribution of Second Level Domains (SLD)s.\n */\ncontract MintingController is IMintingController, MinterRole {\n\n    Registry internal _registry;\n\n    constructor (Registry registry) public {\n        _registry = registry;\n    }\n\n    function registry() external view returns (address) {\n        return address(_registry);\n    }\n\n    function mintSLD(address to, string memory label) public onlyMinter {\n        _registry.controlledMintChild(to, _registry.root(), label);\n    }\n\n    function safeMintSLD(address to, string calldata label) external {\n        safeMintSLD(to, label, \"\");\n    }\n\n    function safeMintSLD(address to, string memory label, bytes memory _data) public onlyMinter {\n        _registry.controlledSafeMintChild(to, _registry.root(), label, _data);\n    }\n\n    function mintSLDWithResolver(address to, string memory label, address resolver) public onlyMinter {\n        _registry.controlledMintChild(to, _registry.root(), label);\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\n    }\n\n    function safeMintSLDWithResolver(address to, string calldata label, address resolver) external {\n        safeMintSLD(to, label, \"\");\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\n    }\n\n    function safeMintSLDWithResolver(address to, string calldata label, address resolver, bytes calldata _data) external {\n        safeMintSLD(to, label, _data);\n        _registry.controlledResolveTo(resolver, _registry.childIdOf(_registry.root(), label));\n    }\n\n}\n\npragma experimental ABIEncoderV2;\n\n\n\n\n// solium-disable error-reason\n\ncontract Resolver is SignatureUtil {\n\n    event Set(uint256 indexed tokenId, string indexed keyIndex, string indexed valueIndex, string key, string value);\n    event NewKey(uint256 indexed tokenId, string indexed keyIndex, string key);\n    event ResetRecords(uint256 indexed tokenId);\n\n    // Mapping from token ID to preset id to key to value\n    mapping (uint256 => mapping (uint256 =>  mapping (string => string))) internal _records;\n\n    // Mapping from token ID to current preset id\n    mapping (uint256 => uint256) _tokenPresets;\n\n    // All keys that were set\n    mapping (uint256 => string) _hashedKeys;\n\n    MintingController internal _mintingController;\n\n    constructor(Registry registry, MintingController mintingController) public SignatureUtil(registry) {\n        require(address(registry) == mintingController.registry());\n        _mintingController = mintingController;\n    }\n\n    /**\n     * @dev Throws if called when not the resolver.\n     */\n    modifier whenResolver(uint256 tokenId) {\n        require(address(this) == _registry.resolverOf(tokenId), \"RESOLVER_DETACHED_FROM_DOMAIN\");\n        _;\n    }\n\n    modifier whenApprovedOrOwner(uint256 tokenId) {\n        require(_registry.isApprovedOrOwner(msg.sender, tokenId), \"SENDER_IS_NOT_APPROVED_OR_OWNER\");\n        _;\n    }\n\n    function reset(uint256 tokenId) external whenApprovedOrOwner(tokenId) {\n        _setPreset(now, tokenId);\n    }\n\n    function resetFor(uint256 tokenId, bytes calldata signature) external {\n        _validate(keccak256(abi.encodeWithSelector(this.reset.selector, tokenId)), tokenId, signature);\n        _setPreset(now, tokenId);\n    }\n\n    /**\n     * @dev Function to get record.\n     * @param key The key to query the value of.\n     * @param tokenId The token id to fetch.\n     * @return The value string.\n     */\n    function get(string memory key, uint256 tokenId) public view whenResolver(tokenId) returns (string memory) {\n        return _records[tokenId][_tokenPresets[tokenId]][key];\n    }\n\n    /**\n     * @dev Function to get key by provided hash. Keys hashes can be found in Sync event emitted by Registry.sol contract.\n     * @param keyHash The key to query the value of.\n     * @return The key string.\n     */\n    function hashToKey(uint256 keyHash) public view returns (string memory) {\n        return _hashedKeys[keyHash];\n    }\n\n    /**\n     * @dev Function to get keys by provided key hashes. Keys hashes can be found in Sync event emitted by Registry.sol contract.\n     * @param hashes The key to query the value of.\n     * @return Keys\n     */\n    function hashesToKeys(uint256[] memory hashes) public view returns (string[] memory) {\n        uint256 keyCount = hashes.length;\n        string[] memory values = new string[](keyCount);\n        for (uint256 i = 0; i < keyCount; i++) {\n            values[i] = hashToKey(hashes[i]);\n        }\n\n        return values;\n    }\n\n    /**\n     * @dev Function get value by provied key hash. Keys hashes can be found in Sync event emitted by Registry.sol contract.\n     * @param keyHash The key to query the value of.\n     * @param tokenId The token id to set.\n     * @return Key and value.\n     */\n    function getByHash(uint256 keyHash, uint256 tokenId) public view whenResolver(tokenId) returns (string memory key, string memory value) {\n        key = hashToKey(keyHash);\n        value = get(key, tokenId);\n    }\n\n    /**\n     * @dev Function get values by provied key hashes. Keys hashes can be found in Sync event emitted by Registry.sol contract.\n     * @param keyHashes The key to query the value of.\n     * @param tokenId The token id to set.\n     * @return Keys and values.\n     */\n    function getManyByHash(\n        uint256[] memory keyHashes,\n        uint256 tokenId\n    ) public view whenResolver(tokenId) returns (string[] memory keys, string[] memory values) {\n        uint256 keyCount = keyHashes.length;\n        keys = new string[](keyCount);\n        values = new string[](keyCount);\n        for (uint256 i = 0; i < keyCount; i++) {\n            (keys[i], values[i]) = getByHash(keyHashes[i], tokenId);\n        }\n    }\n\n    function preconfigure(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId\n    ) public {\n        require(_mintingController.isMinter(msg.sender), \"SENDER_IS_NOT_MINTER\");\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n    }\n\n    /**\n     * @dev Function to set record.\n     * @param key The key set the value of.\n     * @param value The value to set key to.\n     * @param tokenId The token id to set.\n     */\n    function set(string calldata key, string calldata value, uint256 tokenId) external whenApprovedOrOwner(tokenId) {\n        _set(_tokenPresets[tokenId], key, value, tokenId);\n    }\n\n    /**\n     * @dev Function to set record on behalf of an address.\n     * @param key The key set the value of.\n     * @param value The value to set key to.\n     * @param tokenId The token id to set.\n     * @param signature The signature to verify the transaction with.\n     */\n    function setFor(\n        string calldata key,\n        string calldata value,\n        uint256 tokenId,\n        bytes calldata signature\n    ) external {\n        _validate(keccak256(abi.encodeWithSelector(this.set.selector, key, value, tokenId)), tokenId, signature);\n        _set(_tokenPresets[tokenId], key, value, tokenId);\n    }\n\n    /**\n     * @dev Function to get multiple record.\n     * @param keys The keys to query the value of.\n     * @param tokenId The token id to fetch.\n     * @return The values.\n     */\n    function getMany(string[] calldata keys, uint256 tokenId) external view whenResolver(tokenId) returns (string[] memory) {\n        uint256 keyCount = keys.length;\n        string[] memory values = new string[](keyCount);\n        uint256 preset = _tokenPresets[tokenId];\n        for (uint256 i = 0; i < keyCount; i++) {\n            values[i] = _records[tokenId][preset][keys[i]];\n        }\n        return values;\n    }\n\n    function setMany(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId\n    ) public whenApprovedOrOwner(tokenId) {\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n    }\n\n    /**\n     * @dev Function to set record on behalf of an address.\n     * @param keys The keys set the values of.\n     * @param values The values to set keys to.\n     * @param tokenId The token id to set.\n     * @param signature The signature to verify the transaction with.\n     */\n    function setManyFor(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId,\n        bytes memory signature\n    ) public {\n        _validate(keccak256(abi.encodeWithSelector(this.setMany.selector, keys, values, tokenId)), tokenId, signature);\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n    }\n\n     /**\n     * @dev Function to reset all domain records and set new ones.\n     * @param keys records keys.\n     * @param values records values.\n     * @param tokenId domain token id.\n     */\n    function reconfigure(string[] memory keys, string[] memory values, uint256 tokenId) public whenApprovedOrOwner(tokenId) {\n        _reconfigure(keys, values, tokenId);\n    }\n\n    /**\n     * @dev Delegated version of reconfigure() function.\n     * @param keys records keys.\n     * @param values records values.\n     * @param tokenId domain token id.\n     * @param signature user signature.\n     */\n    function reconfigureFor(\n        string[] memory keys,\n        string[] memory values,\n        uint256 tokenId,\n        bytes memory signature\n    ) public {\n        _validate(keccak256(abi.encodeWithSelector(this.reconfigure.selector, keys, values, tokenId)), tokenId, signature);\n        _reconfigure(keys, values, tokenId);\n    }\n\n    // reset records\n    function _setPreset(uint256 presetId, uint256 tokenId) internal {\n        _tokenPresets[tokenId] = presetId;\n        _registry.sync(tokenId, 0); // notify registry that domain records were reset\n        emit ResetRecords(tokenId);\n    }\n\n    /**\n     * @dev Internal function to to set record. As opposed to set, this imposes no restrictions on msg.sender.\n     * @param preset preset to set key/values on\n     * @param key key of record to be set\n     * @param value value of record to be set\n     * @param tokenId uint256 ID of the token\n     */\n    function _set(uint256 preset, string memory key, string memory value, uint256 tokenId) internal {\n        uint256 keyHash = uint256(keccak256(bytes(key)));\n        bool isNewKey = bytes(_records[tokenId][preset][key]).length == 0;\n        _registry.sync(tokenId, keyHash);\n        _records[tokenId][preset][key] = value;\n\n        if (bytes(_hashedKeys[keyHash]).length == 0) {\n            _hashedKeys[keyHash] = key;\n        }\n\n        if (isNewKey) {\n            emit NewKey(tokenId, key, key);\n        }\n        emit Set(tokenId, key, value, key, value);\n    }\n\n    /**\n     * @dev Internal function to to set multiple records. As opposed to setMany, this imposes\n     * no restrictions on msg.sender.\n     * @param preset preset to set key/values on\n     * @param keys keys of record to be set\n     * @param values values of record to be set\n     * @param tokenId uint256 ID of the token\n     */\n    function _setMany(uint256 preset, string[] memory keys, string[] memory values, uint256 tokenId) internal {\n        uint256 keyCount = keys.length;\n        for (uint256 i = 0; i < keyCount; i++) {\n            _set(preset, keys[i], values[i], tokenId);\n        }\n    }\n\n    /**\n     * @dev Internal function to reset all domain records and set new ones.\n     * @param keys records keys.\n     * @param values records values.\n     * @param tokenId domain token id.\n     */\n    function _reconfigure(string[] memory keys, string[] memory values, uint256 tokenId) internal {\n        _setPreset(now, tokenId);\n        _setMany(_tokenPresets[tokenId], keys, values, tokenId);\n    }\n\n}"}}}