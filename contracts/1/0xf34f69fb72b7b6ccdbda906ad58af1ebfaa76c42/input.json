{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ethanolvault.sol": {
      "content": "// \"SPDX-License-Identifier: MIT\"\npragma solidity 0.7.3;\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract EthanolVault is Ownable {\n    using SafeMath for uint;\n    IERC20 public EthanolAddress;\n    address public admin;\n    uint public rewardPool;\n    uint public totalSharedRewards;\n\n    mapping(address => uint) private rewardsEarned;\n    mapping(address => Savings) private _savings;\n\n    struct Savings {\n        address user;\n        uint startTime;\n        uint duration;\n        uint amount;\n    }\n\n    event _LockSavings(\n        address indexed stakeholder, \n        uint indexed stake,\n        uint indexed unlockTime\n    );\n\n    event _UnLockSavings(\n        address indexed stakeholder,\n        uint indexed value,\n        uint indexed timestamp\n    );\n\n    event _RewardShared(\n        uint indexed timestamp,\n        uint indexed rewards\n    );\n\n    constructor(IERC20 _EthanolAddress) {\n        EthanolAddress = _EthanolAddress;\n        admin = _msgSender();\n    }\n\n    function shareReward(address[] memory _accounts, uint[] memory _rewards) public {\n        require(_msgSender() == admin, \"Caller is not a validator\");\n        uint _totalRewards = 0;\n\n        for(uint i = 0; i < _accounts.length; i++) {\n            address _user = _accounts[i];\n            uint _reward = _rewards[i];\n            _totalRewards = _totalRewards.add(_reward);\n            rewardsEarned[_user] = rewardsEarned[_user].add(_reward);\n        }\n        \n        totalSharedRewards = totalSharedRewards.add(_totalRewards);\n        EthanolAddress.transferFrom(_msgSender(), address(this), _totalRewards);\n        emit _RewardShared(block.timestamp, _totalRewards);\n    }\n\n    \n    function checkRewards(address _user) public view returns(uint) {\n        return rewardsEarned[_user];\n    }\n    \n    function withdrawRewards(uint _amount) public {\n        require(rewardsEarned[_msgSender()] > 0, \"You have zero rewards to claim\");\n\n        rewardsEarned[_msgSender()] = rewardsEarned[_msgSender()].sub(_amount);\n        uint _taxedAmount = _amount.mul(10).div(100);\n        uint _totalBalance = _amount.sub(_taxedAmount);\n        \n        rewardPool = rewardPool.add(_taxedAmount);\n        EthanolAddress.transfer(_msgSender(), _totalBalance);\n    }\n\n    function monthlySave(uint _numberOfMonths, uint _amount) public {\n        uint _numberOfDays = _numberOfMonths.mul(31 days);\n        timeLock(_numberOfDays, _amount);\n    }\n\n    function yearlySave(uint _amount) public {\n        uint _numberOfDays = 365 days;\n        timeLock(_numberOfDays, _amount);\n    }\n\n    function timeLock(uint _duration, uint _amount) private {\n        require(_savings[_msgSender()].amount == 0, \"Funds has already been locked\");\n        \n        uint _taxAmount = _amount.mul(4).div(100);\n        uint _balance = _amount.sub(_taxAmount);\n\n        EthanolAddress.transferFrom(_msgSender(), address(this), _amount);\n        \n        rewardPool = rewardPool.add(_taxAmount);\n        _savings[_msgSender()] = Savings(\n            _msgSender(), \n            block.timestamp, \n            _duration, \n            _balance\n        );  \n        emit _LockSavings(_msgSender(), _balance, block.timestamp);             \n    }\n\n    function releaseTokens() public {\n        require(\n            block.timestamp > _savings[_msgSender()].startTime.add(_savings[_msgSender()].duration), \n            \"Unable to withdraw funds while tokens is still locked\"\n        );\n        require(_savings[_msgSender()].amount > 0, \"You have zero savings\");\n\n        uint _amount = _savings[_msgSender()].amount;\n        _savings[_msgSender()].amount = 0;\n\n        \n        if(_savings[_msgSender()].duration >= 365 days) {\n            uint _rewards = _amount.mul(500).div(100);\n            _amount = _amount.add(_rewards);\n            \n        } else {\n            uint _rewards = _amount.mul(40).div(100);\n            uint _numberOfMonths = _savings[_msgSender()].duration.div(31 days);\n            _rewards = _rewards.mul(_numberOfMonths);\n            _amount = _amount.add(_rewards);\n        }\n        \n        rewardPool = rewardPool.sub(_amount);\n        EthanolAddress.transfer(_msgSender(), _amount);\n        emit _UnLockSavings(_msgSender(), _amount, block.timestamp);\n    }\n    \n    function getLockedTokens(address _user) external view returns(uint) {\n        return _savings[_user].amount;\n    }\n\n    receive() external payable {\n        revert(\"You can not send token directly to the contract\");\n    }\n}"
    }
  }
}