{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"EmiList.full.sol":{"content":"// File: @openzeppelin/contracts/utils/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/interfaces/IEmiList.sol\n\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.2;\n\n/*************************************************************************\n *    EmiList inerface\n *\n ************************************************************************/\ninterface IEmiList {\n    function approveTransfer(address from, address to, uint256 amount) external view returns (bool);\n}\n\n// File: contracts/EmiList.sol\n\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.2;\n\n\n\n\ncontract EmiList is Ownable, IEmiList {\n    using SafeMath for uint256;\n\n    //-----------------------------------------------------------------------------------\n    // Data Structures\n    //-----------------------------------------------------------------------------------\n                                           \n    event ActionModeChanged(uint256 oldMode, uint256 newMode);\n    //-----------------------------------------------------------------------------------\n    // Variables, Instances, Mappings\n    //-----------------------------------------------------------------------------------\n    mapping(address => bool) private blackList;\n    mapping(address => bool) private whiteList;\n\n    address[] private blackListSet;\n    address[] private whiteListSet;\n\n    uint256 public actionMode; // 0: off, 1: blacklist, 2: whitelist\n\n    //-----------------------------------------------------------------------------------\n    string public codeVersion = \"EmiList v1.0-145-gf234c9e\";\n\n    //-----------------------------------------------------------------------------------\n    // Smart contract Constructor\n    //-----------------------------------------------------------------------------------\n\n    //-----------------------------------------------------------------------------------\n    // Observers\n    //-----------------------------------------------------------------------------------\n    function approveTransfer(address from, address to, uint256 amount) external view override returns (bool)\n    {\n      if (actionMode==1) {\n          return checkBlacklist(from, to, amount);\n      }\n      if (actionMode==2) {\n          return checkWhitelist(from, to, amount);\n      }\n      return true; // default case\n    }\n\n    // Return unlock date and amount of given lock\n    function getWhiteListLen()\n        external\n        view\n        onlyOwner\n        returns (uint256)\n    {\n        return whiteListSet.length;\n    }\n\n    function getBlackListLen()\n        external\n        view\n        onlyOwner\n        returns (uint256)\n    {\n        return blackListSet.length;\n    }\n\n    function getWhiteListItem(uint256 idx)\n        external\n        view\n        onlyOwner\n        returns (address)\n    {\n        require(idx < whiteListSet.length, \"Wrong list idx\");\n        return whiteListSet[idx];\n    }\n\n    function getBlackListItem(uint256 idx)\n        external\n        view\n        onlyOwner\n        returns (address)\n    {\n        require(idx < blackListSet.length, \"Wrong list idx\");\n        return blackListSet[idx];\n    }\n\n    function setActionMode(uint256 mode) external onlyOwner\n    {\n        require(mode < 3 && mode != actionMode, \"Wrong action mode\");\n        emit ActionModeChanged(actionMode, mode);\n        actionMode = mode;\n    }\n\n    function addBlackListItems(address[] calldata items) external onlyOwner\n    {\n        address t;\n\n        for (uint256 i = 0; i < items.length; i++) {\n          t = items[i];\n          if (!blackList[t]) { // item not in the list, add\n            blackList[t] = true;\n            blackListSet.push(t);\n          }\n        }\n    }\n\n    function addWhiteListItems(address[] calldata items) external onlyOwner\n    {\n        address t;\n\n        for (uint256 i = 0; i < items.length; i++) {\n          t = items[i];\n          if (!whiteList[t]) { // item not in the list, add\n            whiteList[t] = true;\n            whiteListSet.push(t);\n          }\n        }\n    }\n\n    function removeBlackListItems(address[] calldata items) external onlyOwner\n    {\n        address t;\n\n        for (uint256 i = 0; i < items.length; i++) {\n          t = items[i];\n          if (blackList[t]) { // item is in the list, remove\n            blackList[t] = false;\n            for (uint256 j = 0; j < blackListSet.length; j++) {\n              if (blackListSet[j]==t) {\n                delete blackListSet[j];\n                break;\n              }\n            }\n          }\n        }\n    }\n\n    function removeWhiteListItems(address[] calldata items) external onlyOwner\n    {\n        address t;\n\n        for (uint256 i = 0; i < items.length; i++) {\n          t = items[i];\n          if (whiteList[t]) { // item is in the list, remove\n            whiteList[t] = false;\n            for (uint256 j = 0; j < whiteListSet.length; j++) {\n              if (whiteListSet[j]==t) {\n                delete whiteListSet[j];\n                break;\n              }\n            }\n          }\n        }\n    }\n\n    //-----------------------------------------------------------------------------------\n    // Observers\n    //-----------------------------------------------------------------------------------\n    function checkWhitelist(address from, address to, uint256 amount) internal view returns (bool)\n    {\n      return whiteList[from];\n    }\n\n    function checkBlacklist(address from, address to, uint256 amount) internal view returns (bool)\n    {\n      return !blackList[from];\n    }\n\n    // Return WhiteList\n    function getWhiteList()\n        external\n        view\n        onlyOwner\n        returns (address[] memory)\n    {        \n        return whiteListSet;\n    }\n\n    // Return BlackList\n    function getBlackList()\n        external\n        view\n        onlyOwner\n        returns (address[] memory)\n    {        \n        return blackListSet;\n    }\n\n}\n"}}}