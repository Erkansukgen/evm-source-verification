{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"deltabalances.sol":{"content":"pragma solidity ^0.8.3;\n\n\n// ERC20 contract interface.\ninterface Token {\n  function balanceOf(address tokenOwner) external view returns (uint balance);\n}\n\ncontract DeltaBalances {\n    \nfunction tokenBalances(address user,  address[] calldata tokens) external view returns (uint[] memory) {\n    uint[] memory balances = new uint[](tokens.length);\n    \n    for(uint i = 0; i < tokens.length; i++) {\n      if(tokens[i] != address(0x0)) { \n        balances[i] = tokenBalance(user, tokens[i]); // check token balance and catch errors\n      } else {\n        balances[i] = user.balance; // ETH balance    \n      }\n    }    \n    return balances;\n  }\n\n\n  function tokenBalance(address user, address token) internal view returns (uint) {\n      return Token(token).balanceOf(user);\n  }\n  \n\n}"}}}