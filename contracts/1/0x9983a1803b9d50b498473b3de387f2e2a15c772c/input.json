{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DEDC_Token_ERC20.sol": {
      "content": "pragma solidity ^0.4.25;\r\n\r\ninterface dedcNotifier { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n \r\ncontract DEDC_Token_ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;  \r\n    uint256 public totalSupply;\r\n \r\n    mapping (address => uint256) public balanceOf;  \r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n \r\n \r\n    function DEDC_Token_ERC20() public {\r\n        totalSupply = 21000000 * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = 'Decentralization Exchange Data Capital';\r\n        symbol = 'DEDC';\r\n    }\r\n \r\n  \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n \r\n    function transfer(address _to, uint256 _value) \r\n    public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);  \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n   \r\n   function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n     function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n     public returns (bool success) {\r\n        dedcNotifier spender = dedcNotifier(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n\r\n \r\n}"
    }
  }
}