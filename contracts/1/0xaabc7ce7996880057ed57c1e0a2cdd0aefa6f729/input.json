{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Babylonian.sol":{"content":"pragma solidity >=0.4.0;\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    // credit for this implementation goes to\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}"},"contracts/ChiToken.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\nimport \"./Math.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract ChiToken {\r\n\r\n    uint256 public totalMinted;\r\n    uint256 public totalBurned;\r\n\r\n    bytes32 immutable bytecodeWord1;\r\n    bytes3 immutable bytecodeWord2;\r\n    bytes32 immutable bytecodeHash;\r\n\r\n    constructor() public {\r\n        // Documentation adapted from https://github.com/projectchicago/gastoken/blob/master/contract/GST2_ETH.sol#L105\r\n        // For more information on the opcodes, cf. https://ethervm.io/\r\n        //\r\n        // EVM assembler of runtime portion of child contract:\r\n        //     ;; Pseudocode: if (msg.sender != <address>) { throw; }\r\n        //     ;;             suicide(msg.sender)\r\n        //     PUSH20 <address>\r\n        //     CALLER\r\n        //     XOR\r\n        //     PC\r\n        //     JUMPI\r\n        //     CALLER\r\n        //     SELFDESTRUCT\r\n        // Or in binary: 73____________20 bytes address____________3318585733ff\r\n        // Since the binary is so short (27 bytes), we can get away\r\n        // with a very simple initcode:\r\n        //     PUSH27 73____________20 bytes address____________3318585733ff\r\n        //     RETURNDATASIZE ;; Push offset 0 for MSTORE call on the stack\r\n        //     MSTORE ;; at this point, memory locations mem[5] through\r\n        //            ;; mem[31] contain the runtime portion of the child\r\n        //            ;; contract. all that's left to do is to RETURN this\r\n        //            ;; chunk of memory.\r\n        //     PUSH1 27 ;; length\r\n        //     PUSH1 5 ;; offset\r\n        //     RETURN\r\n        // Or in binary: 7a73____________20 bytes address____________3318585733ff3d52601b6005f3\r\n        // Almost done! All we have to do is put this short (35 bytes) blob into\r\n        // memory and call CREATE with the appropriate offsets.\r\n        bytes32 _bytecodeWord1 =\r\n            bytes32(\r\n                0x7a7300000000000000000000000000000000000000003318585733ff3d52601b\r\n            ) | (bytes32(uint256(address(this))) << 80);\r\n        bytes3 _bytecodeWord2 = 0x6005f3;\r\n        bytecodeHash = keccak256(\r\n            abi.encodePacked(_bytecodeWord1, _bytecodeWord2)\r\n        );\r\n        bytecodeWord1 = _bytecodeWord1;\r\n        bytecodeWord2 = _bytecodeWord2;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalMinted - totalBurned;\r\n    }\r\n\r\n    function mint(uint256 value) public {\r\n        uint256 offset = totalMinted;\r\n        bytes32 _bytecodeWord1 = bytecodeWord1;\r\n        bytes3 _bytecodeWord2 = bytecodeWord2;\r\n        assembly {\r\n            mstore(0, _bytecodeWord1)\r\n            mstore(32, _bytecodeWord2)\r\n            for {\r\n                let i := div(value, 32)\r\n            } i {\r\n                i := sub(i, 1)\r\n            } {\r\n                pop(create2(0, 0, 35, add(offset, 0)))\r\n                pop(create2(0, 0, 35, add(offset, 1)))\r\n                pop(create2(0, 0, 35, add(offset, 2)))\r\n                pop(create2(0, 0, 35, add(offset, 3)))\r\n                pop(create2(0, 0, 35, add(offset, 4)))\r\n                pop(create2(0, 0, 35, add(offset, 5)))\r\n                pop(create2(0, 0, 35, add(offset, 6)))\r\n                pop(create2(0, 0, 35, add(offset, 7)))\r\n                pop(create2(0, 0, 35, add(offset, 8)))\r\n                pop(create2(0, 0, 35, add(offset, 9)))\r\n                pop(create2(0, 0, 35, add(offset, 10)))\r\n                pop(create2(0, 0, 35, add(offset, 11)))\r\n                pop(create2(0, 0, 35, add(offset, 12)))\r\n                pop(create2(0, 0, 35, add(offset, 13)))\r\n                pop(create2(0, 0, 35, add(offset, 14)))\r\n                pop(create2(0, 0, 35, add(offset, 15)))\r\n                pop(create2(0, 0, 35, add(offset, 16)))\r\n                pop(create2(0, 0, 35, add(offset, 17)))\r\n                pop(create2(0, 0, 35, add(offset, 18)))\r\n                pop(create2(0, 0, 35, add(offset, 19)))\r\n                pop(create2(0, 0, 35, add(offset, 20)))\r\n                pop(create2(0, 0, 35, add(offset, 21)))\r\n                pop(create2(0, 0, 35, add(offset, 22)))\r\n                pop(create2(0, 0, 35, add(offset, 23)))\r\n                pop(create2(0, 0, 35, add(offset, 24)))\r\n                pop(create2(0, 0, 35, add(offset, 25)))\r\n                pop(create2(0, 0, 35, add(offset, 26)))\r\n                pop(create2(0, 0, 35, add(offset, 27)))\r\n                pop(create2(0, 0, 35, add(offset, 28)))\r\n                pop(create2(0, 0, 35, add(offset, 29)))\r\n                pop(create2(0, 0, 35, add(offset, 30)))\r\n                pop(create2(0, 0, 35, add(offset, 31)))\r\n                offset := add(offset, 32)\r\n            }\r\n            for {\r\n                let i := and(value, 0x1F)\r\n            } i {\r\n                i := sub(i, 1)\r\n            } {\r\n                pop(create2(0, 0, 35, offset))\r\n                offset := add(offset, 1)\r\n            }\r\n        }\r\n        totalMinted = offset;\r\n    }\r\n\r\n    function _destroyChildren(uint256 value) internal {\r\n        uint256 data;\r\n        uint256 i;\r\n        uint256 end;\r\n        bytes32 _bytecodeHash = bytecodeHash;\r\n        assembly {\r\n            i := sload(totalBurned_slot)\r\n            end := add(i, value)\r\n            sstore(totalBurned_slot, end)\r\n\r\n            data := mload(0x40)\r\n            mstore(\r\n                data,\r\n                add(\r\n                    0xff00000000000000000000000000000000000000000000000000000000000000,\r\n                    shl(0x58, address())\r\n                )\r\n            )\r\n            mstore(add(data, 53), _bytecodeHash)\r\n            let ptr := add(data, 21)\r\n            for {\r\n\r\n            } lt(i, end) {\r\n                i := add(i, 1)\r\n            } {\r\n                mstore(ptr, i)\r\n                pop(call(gas(), keccak256(data, 85), 0, 0, 0, 0, 0))\r\n            }\r\n        }\r\n    }\r\n\r\n    function free(uint256 value) public returns (uint256) {\r\n        if (value > 0) {\r\n            _destroyChildren(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function freeUpTo(uint256 value) public returns (uint256) {\r\n        return free(Math.min(value, totalSupply()));\r\n    }\r\n\r\n    function freeFrom(address from, uint256 value) public returns (uint256) {\r\n        if (value > 0) {\r\n            _destroyChildren(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function freeFromUpTo(address from, uint256 value)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return\r\n            freeFrom(\r\n                from,\r\n                Math.min(value, totalSupply())\r\n            );\r\n    }\r\n}"},"contracts/FullMath.sol":{"content":"pragma solidity >=0.4.0;\r\n\r\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\r\n// license is CC-BY-4.0\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n\r\n        if (h == 0) return l / d;\r\n\r\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}"},"contracts/IERC20.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"contracts/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"contracts/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"},"contracts/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\nimport './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"contracts/IWETH.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\ninterface IWETH {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address) external view returns (uint);\r\n\r\n    function allowance(address, address) external view returns (uint);\r\n    \r\n    function receive() external payable;\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint wad) external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function approve(address guy, uint wad) external returns (bool);\r\n\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n    external\r\n    returns (bool);\r\n}\r\n"},"contracts/Math.sol":{"content":"pragma solidity ^0.6.0;\n\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}"},"contracts/MjseoScript.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\nimport \"./IWETH.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./ChiToken.sol\";\r\nimport \"./Rlp.sol\";\r\nimport \"./IUniswapV2Pair.sol\";\r\n\r\ncontract MjseoScript is Rlp {\r\n    uint infinityAmount = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n    address constant owner = 0x6026fb226F20548D68a7aC0dFD584Fc051113da5; // todo change it\r\n    ChiToken chiToken = new ChiToken();\r\n    \r\n    address constant uniAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 constant uniRouter = IUniswapV2Router02(uniAddress);\r\n    address wethAddress;\r\n    IWETH WETH;\r\n    \r\n    constructor() public {\r\n        // require(owner == msg.sender);\r\n        wethAddress = uniRouter.WETH();\r\n        WETH = IWETH(wethAddress);\r\n    }\r\n    \r\n    function executeMjseo(address swapPairAddress, uint amountEntry0Token, uint amountEntry1Token,bytes calldata data) public {\r\n        IUniswapV2Pair(swapPairAddress).swap(amountEntry0Token, amountEntry1Token, address(this), data);\r\n    }\r\n    \r\n    function executeAndFreeMjseo(address swapPairAddress, uint amountEntry0Token, uint amountEntry1Token,bytes calldata data) external discount {\r\n        executeMjseo(swapPairAddress, amountEntry0Token, amountEntry1Token, data);\r\n    }\r\n    \r\n    function mint(uint256 value) public {\r\n        chiToken.mint(value);\r\n    }\r\n    \r\n    \r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return chiToken.totalSupply();\r\n    }\r\n    \r\n    function withdraw() public payable onlyOwner {\r\n        WETH.withdraw(WETH.balanceOf(address(this)));\r\n        (bool success,) = owner.call{ value: address(this).balance }(\"\");\r\n        require(success, \"refund failed\");\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier discount {\r\n        uint256 gasStart = gasleft();\r\n    \r\n        _;\r\n    \r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        chiToken.freeUpTo((gasSpent + 14154) / 21947);\r\n    }\r\n    \r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\r\n        require(_sender == address(this), \"wrong sender\");\r\n        (address repayRouterAddress, uint amountRequired) = abi.decode(_data, (address, uint));\r\n        address token0 = IUniswapV2Pair(msg.sender).token0();\r\n        address token1 = IUniswapV2Pair(msg.sender).token1();\r\n      if (_amount0 == 0) {\r\n        address[] memory path = getPath(token1, token0);\r\n        callSwapExactTokensForTokens(_amount1, repayRouterAddress, amountRequired, path);\r\n      } else {\r\n        address[] memory path = getPath(token0, token1);\r\n        callSwapExactTokensForTokens(_amount0, repayRouterAddress, amountRequired, path);  \r\n      }\r\n    }\r\n  \r\n  function callSwapExactTokensForTokens(uint amountEntryToken, address repayRouterAddress, uint amountRequired, address[] memory path) internal {\r\n        IERC20 entryToken = IERC20(path[0]);\r\n        IERC20 exitToken = IERC20(path[1]);\r\n        entryToken.approve(repayRouterAddress, infinityAmount);  \r\n        uint amountReceived = IUniswapV2Router02(repayRouterAddress).swapExactTokensForTokens(amountEntryToken, 0, path, address(this), now + 60 * 5)[1];\r\n        require(amountReceived > amountRequired,\"not enough back to repay flash swap\");\r\n        assert(exitToken.transfer(msg.sender, amountRequired));\r\n        exitToken.transfer(owner, amountReceived-amountRequired);\r\n  }\r\n  \r\n  \r\n\r\n    function getPath(address token0, address token1) private pure returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token0;\r\n        path[1] = token1;\r\n        return path;\r\n    }\r\n    \r\n    \r\n    receive() payable external {}\r\n}\r\n\r\n"},"contracts/Rlp.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\nimport \"./FullMath.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Babylonian.sol\";\r\n\r\ncontract Rlp {\r\n    \r\n    function computeProfitMaximizingTrade(\r\n        uint256 truePriceTokenA,\r\n        uint256 truePriceTokenB,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) pure public returns (bool aToB, uint256 amountIn) {\r\n        aToB = FullMath.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\r\n\r\n        uint256 invariant = SafeMath.mul(reserveA, reserveB);\r\n\r\n        uint256 leftSide = Babylonian.sqrt(\r\n            FullMath.mulDiv(\r\n                SafeMath.mul(invariant, 1000),\r\n                aToB ? truePriceTokenA : truePriceTokenB,\r\n                 SafeMath.mul((aToB ? truePriceTokenB : truePriceTokenA), 997)\r\n            )\r\n        );\r\n        uint256 rightSide = (aToB ? SafeMath.mul(reserveA, 1000) : SafeMath.mul(reserveB, 1000)) / 997;\r\n\r\n        if (leftSide < rightSide) return (false, 0);\r\n\r\n        // compute the amount that must be sent to move the price to the profit-maximizing price\r\n        amountIn = SafeMath.sub(leftSide, rightSide);\r\n    }\r\n    \r\n}\r\n\r\n"},"contracts/SafeMath.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"}}}