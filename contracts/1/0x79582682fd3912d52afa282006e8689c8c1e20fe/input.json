{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Tokenswap.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface iERC20 {\n\n\tfunction balanceOf(address who) external view returns (uint256 balance);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\tfunction transfer(address to, uint256 value) external returns (bool success);\n\n\tfunction approve(address spender, uint256 value) external returns (bool success);\n\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool success);\n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Context {\n\tfunction _msgSender() internal view returns (address) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view returns (bytes memory) {\n\t\tthis;\n\t\treturn msg.data;\n\t}\n}\n\nlibrary SafeMath {\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a - b;\n\t\tassert(b <= a && c <= a);\n\t\treturn c;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a && c>=b);\n\t\treturn c;\n\t}\n}\n\nlibrary SafeERC20 {\n\tfunction safeTransfer(iERC20 _token, address _to, uint256 _value) internal {\n\t\trequire(_token.transfer(_to, _value));\n\t}\n\tfunction safeTransferFrom(iERC20 _token, address _from, address _to, uint256 _value) internal {\n\t\trequire(_token.transferFrom(_from, _to, _value));\n\t}\n}\n\ncontract Controllable is Context {\n    mapping (address => bool) public controllers;\n\n\tconstructor () {\n\t\taddress msgSender = _msgSender();\n\t\tcontrollers[msgSender] = true;\n\t}\n\n\tmodifier onlyController() {\n\t\trequire(controllers[_msgSender()], \"Controllable: caller is not a controller\");\n\t\t_;\n\t}\n\n    function addController(address _address) public onlyController {\n        controllers[_address] = true;\n    }\n\n    function removeController(address _address) public onlyController {\n        delete controllers[_address];\n    }\n}\n\ncontract Pausable is Controllable {\n\tevent Pause();\n\tevent Unpause();\n\n\tbool public paused = false;\n\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\tmodifier whenPaused() {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\tfunction pause() public onlyController whenNotPaused {\n\t\tpaused = true;\n\t\temit Pause();\n\t}\n\n\tfunction unpause() public onlyController whenPaused {\n\t\tpaused = false;\n\t\temit Unpause();\n\t}\n}\n\ncontract MNW_tokenswap is Controllable, Pausable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for iERC20;\n\n\tmapping (address => bool) public blocklist;\n\n    iERC20 public tokenOld; // MRPH Rinkeby 0xd06f350F50AC1a3414762a617E1130ca1f079C77 Ethereum 0x7B0C06043468469967DBA22d1AF33d77d44056c8\n    iERC20 public tokenNew; // MNW Rinkeby 0x88d4067802186DD70704a85866974997F4DeD734 Ethereum 0xd3E4Ba569045546D09CF021ECC5dFe42b1d7f6E4\n    address public tokenPool; // 0x8BbF984Be7fc6db1602E056AA4256D7FB1954BF4\n    uint256 public blocked;\n\n\tconstructor(iERC20 _tokenOld, iERC20 _tokenNew, address _tokenPool) {\n        tokenOld = _tokenOld;\n        tokenNew = _tokenNew;\n        tokenPool = _tokenPool;\n    \tcontrollers[msg.sender] = true;\n    \tblocklist[0xCCE8D59AFFdd93be338FC77FA0A298C2CB65Da59] = true;\n        blocklist[0x3c11c3025ce387D76C2eDDf1493eC55a8cC2A0f7] = true;\n        blocklist[0x7B0C06043468469967DBA22d1AF33d77d44056c8] = true;\n        blocklist[0x8533A0bd9310Eb63E7CC8E1116c18a3D67B1976A] = true;\n\t}\n\t\n\tfunction switchPool(address _tokenPool) public onlyController {\n\t    tokenPool = _tokenPool;\n\t}\n\n\tfunction receiveEther() public payable {\n\t\trevert();\n\t}\n\n    function swap() public {\n        uint256 _amount = tokenOld.balanceOf(msg.sender);\n        require(_amount > 0,\"No balance of MRPH tokens\");\n        _swap(_amount);\n    }\n\n    function _swap(uint256 _amount) internal {\n        tokenOld.safeTransferFrom(address(msg.sender), tokenPool, _amount);\n        if (blocklist[msg.sender]) {\n            blocked.add(_amount);\n        } else {\n            tokenNew.safeTransferFrom(tokenPool, address(msg.sender), _amount * (10 ** 14));\n        }\n        emit swapped(_amount / (10 ** 4));\n    }\n    \n    function blockAddress(address _address, bool _state) external onlyController returns (bool) {\n\t\tblocklist[_address] = _state;\n\t\treturn true;\n\t}\n\n\tfunction transferToken(address tokenAddress, uint256 amount) external onlyController {\n\t\tiERC20(tokenAddress).safeTransfer(msg.sender,amount);\n\t}\n\n\tfunction flushToken(address tokenAddress) external onlyController {\n\t\tuint256 amount = iERC20(tokenAddress).balanceOf(address(this));\n\t\tiERC20(tokenAddress).safeTransfer(msg.sender,amount);\n\t}\n\n    event swapped(uint256 indexed amount);\n}"}}}