{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Salvage.sol":{"content":"pragma solidity ^0.7.0;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Salvage is IERC20 {\r\n \r\n    mapping (address => uint256) public _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    \r\n    uint256 private _totalSupply;\r\n    address private _owner;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    constructor ()  {\r\n        _name = 'Salvage';\r\n        _symbol = 'SAL';\r\n        _decimals = 18;\r\n        _owner = 0x25C11257947326bf5203716c31C8980a95A201fA;\r\n        \r\n        //1 million tokens to be generated  DeFiance DFN\r\n        //1 * (10**18)  = 1;\r\n        _totalSupply =  1000000000 * (10**_decimals);\r\n        \r\n        //transfer total supply to owner\r\n        _balances[_owner] = _totalSupply;\r\n        \r\n        //fire an event on transfer of tokens\r\n        emit Transfer(address(this),_owner,_totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n     function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n \r\n    function approve(address spender, uint256 amount) public  virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_allowances[sender][msg.sender]>=amount,\"In Sufficient allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,msg.sender, _allowances[sender][msg.sender]-=amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(sender != recipient,\"cannot send money to your Self\");\r\n        require(_balances[sender]>=amount,\"In Sufficiebt Funds\");\r\n        \r\n        _balances[sender] -= amount;\r\n        _balances[recipient] +=amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n     \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        require(owner != spender,\"cannot send allowances to yourself\");\r\n        require(_balances[owner]>=amount,\"In Sufficiebt Funds\");\r\n    \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}"}}}