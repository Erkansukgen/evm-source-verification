{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "OTC.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0 <0.7.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract OTC {\n    address public minter;\n    address public tokenAddress;\n    address public spender;\n    address[5] public destinations;\n    uint256 public locktime;\n    uint256 public islocked;\n    uint256 public delay;\n    constructor() public {\n        minter = msg.sender;\n        tokenAddress = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n        delay = 15552000;\n        locktime = block.timestamp;\n        islocked = 0;\n    }\n    function changeERCToken(address newaddress) public returns (bool) {\n        require(msg.sender == minter);\n        require(islocked == 0);\n        tokenAddress = newaddress;\n        return true;\n    }\n    function changeSpender(address newaddress) public returns (bool) {\n        require(msg.sender == minter);\n        require(islocked == 0);\n        spender = newaddress;\n        return true;\n    }\n    function changeDestination(address newaddress, uint index) public returns (bool) {\n        require(msg.sender == minter);\n        require(islocked == 0);\n        destinations[index] = newaddress;\n        return true;\n    }\n    function moveFunds(address to, uint amount) public returns (bool) {\n        require(msg.sender == minter || msg.sender == spender);\n        uint x = 0;\n        bool found = false;\n        while (x < 5) {\n            if (to == destinations[x]) {\n                found = true;\n                break;\n            }\n            x+=1;\n        }\n        require(found);\n        IERC20(tokenAddress).transfer(to, amount);\n        return true;\n    }\n    function lock() public returns (bool) {\n        require(msg.sender == minter);\n        locktime = block.timestamp;\n        islocked = 1;\n        return true;\n    }\n    function unlock() public returns (bool) {\n        require(msg.sender == minter || msg.sender == spender);\n        if (msg.sender == minter) {\n            if (locktime + delay > block.timestamp) {\n                return false;\n            }\n        }\n        locktime = block.timestamp;\n        islocked = 0;\n        return true;\n    }\n}"
    }
  }
}