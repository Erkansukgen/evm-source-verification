{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BasisDollar/BsdVote.2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IVoteProxy {\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _voter) external view returns (uint256);\n}\n\ninterface IFaasPool is IERC20 {\n    function getBalance(address token) external view returns (uint256);\n\n    function getUserInfo(uint256 _pid, address _account)\n        external\n        view\n        returns (\n            uint256 amount,\n            uint256 rewardDebt,\n            uint256 accumulatedEarned,\n            uint256 lockReward,\n            uint256 lockRewardReleased\n        );\n}\n\ncontract BsdVote is IVoteProxy {\n    using SafeMath for uint256;\n\n    IFaasPool[10] public faasPools;\n    IERC20[10] public stakePools;\n    IERC20 bsdsToken;\n    address public bsds;\n    uint256 public totalFaasPools;\n    uint256 public totalStakePools;\n    address public governance;\n\n    constructor(\n        address _bsds,\n        address[] memory _faasPoolAddresses,\n        address[] memory _stakePoolAddresses\n    ) public {\n        _setFaasPools(_faasPoolAddresses);\n        _setStakePools(_stakePoolAddresses);\n        bsds = _bsds;\n        bsdsToken = IERC20(bsds);\n        governance = msg.sender;\n    }\n\n    function _setFaasPools(address[] memory _faasPoolAddresses) internal {\n        totalFaasPools = _faasPoolAddresses.length;\n        for (uint256 i = 0; i < totalFaasPools; i++) {\n            faasPools[i] = IFaasPool(_faasPoolAddresses[i]);\n        }\n    }\n\n    function _setStakePools(address[] memory _stakePoolAddresses) internal {\n        totalStakePools = _stakePoolAddresses.length;\n        for (uint256 i = 0; i < totalStakePools; i++) {\n            stakePools[i] = IERC20(_stakePoolAddresses[i]);\n        }\n    }\n\n    function decimals() public pure virtual override returns (uint8) {\n        return uint8(18);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        uint256 totalSupplyPool = 0;\n        uint256 i;\n        for (i = 0; i < totalFaasPools; i++) {\n            totalSupplyPool = totalSupplyPool.add(bsdsToken.balanceOf(address(faasPools[i])));\n        }\n        uint256 totalSupplyStake = 0;\n        for (i = 0; i < totalStakePools; i++) {\n            totalSupplyStake = totalSupplyStake.add(bsdsToken.balanceOf(address(stakePools[i])));\n        }\n        return totalSupplyPool.add(totalSupplyStake);\n    }\n\n    function totalInFaaSPool() public view returns (uint256) {\n        uint256 total = 0;\n        uint256 i;\n        for (i = 0; i < totalFaasPools; i++) {\n            total = total.add(bsdsToken.balanceOf(address(faasPools[i])));\n        }\n        return total;\n    }\n\n    function totalInStakePool() public view returns (uint256) {\n        uint256 total = 0;\n        uint256 i;\n        for (i = 0; i < totalStakePools; i++) {\n            total = total.add(bsdsToken.balanceOf(address(stakePools[i])));\n        }\n        return total;\n    }\n\n    function getBsdsAmountInPool(address _voter) internal view returns (uint256) {\n        uint256 stakeAmount = 0;\n        for (uint256 i = 0; i < totalFaasPools; i++) {\n            (uint256 _stakeAmountInPool, , , , ) = faasPools[i].getUserInfo(0, _voter);\n            stakeAmount = stakeAmount.add(_stakeAmountInPool.mul(faasPools[i].getBalance(bsds)).div(faasPools[i].totalSupply()));\n        }\n        return stakeAmount;\n    }\n\n    function getBsdsAmountInStakeContracts(address _voter) internal view returns (uint256) {\n        uint256 stakeAmount = 0;\n        for (uint256 i = 0; i < totalStakePools; i++) {\n            stakeAmount = stakeAmount.add(stakePools[i].balanceOf(_voter));\n        }\n        return stakeAmount;\n    }\n\n    function balanceOf(address _voter) public view override returns (uint256) {\n        uint256 balanceInPool = getBsdsAmountInPool(_voter);\n        uint256 balanceInStakeContract = getBsdsAmountInStakeContracts(_voter);\n        return balanceInPool.add(balanceInStakeContract);\n    }\n\n    function setFaasPools(address[] memory _faasPoolAddresses) external {\n        require(msg.sender == governance, \"!governance\");\n        _setFaasPools(_faasPoolAddresses);\n    }\n\n    function setStakePools(address[] memory _stakePoolAddresses) external {\n        require(msg.sender == governance, \"!governance\");\n        _setStakePools(_stakePoolAddresses);\n    }\n}\n"
    }
  }
}