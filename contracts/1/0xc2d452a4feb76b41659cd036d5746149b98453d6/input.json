{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MergerGate.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n// import \"../dao/GovernorAlpha.sol\";\r\n\r\n/** \r\n @title Merger Gate\r\n @author Joey Santoro\r\n @notice a gate to make sure the FeiRari Merger proposal has executed on Rari side before executing Fei Side\r\n*/\r\ncontract MergerGate {   \r\n    event OnePlusOneEqualsThree(string note);\r\n\r\n    /// @notice the Rari DAO address\r\n    /// @dev Rari uses Governor Bravo not alpha, but the relevant interface is identical\r\n    GovernorAlpha public constant rgtGovernor = GovernorAlpha(0x91d9c2b5cF81D55a5f2Ecc0fC84E62f9cd2ceFd6);\r\n\r\n    uint256 public constant PROPOSAL_NUMBER = 9;\r\n\r\n    /// @notice ensures Rari proposal 9 has executed\r\n    /// @dev uses MakerDAO variable naming conventions for obvious reasons: https://github.com/makerdao/dss/issues/28\r\n    function floop() external {\r\n        require(rgtGovernor.state(PROPOSAL_NUMBER) == GovernorAlpha.ProposalState.Executed, \"rip\");\r\n        emit OnePlusOneEqualsThree(\"May the sun never set on the Tribe\");\r\n    }\r\n}   \r\n\r\ninterface GovernorAlpha {\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n    function state(uint proposalId) external view returns (ProposalState);\r\n}\r\n\r\n// Joey was here ;)"
    }
  }
}