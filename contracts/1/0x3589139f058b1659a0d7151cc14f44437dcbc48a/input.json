{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/tests/WhaleClub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\t\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface DefholdPools {\r\n\tfunction externalReward(uint256 _amount) external;\r\n}\r\n\r\ncontract DEFOERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\t\r\n    string public override name;\r\n    string public override symbol;\r\n    uint8 public override decimals;\r\n\tuint256 public override totalSupply;\r\n\t\r\n\tmapping (address => uint256) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) public override allowance;\r\n\r\n\tuint public buyStage;\r\n\tuint public sellStage;\r\n\tuint public maxStage = 3;\r\n\tuint256 public poolShare = 100 / maxStage;\r\n\tuint256 internal _divRate = 10000; // Using for div precentage rate\r\n\tuint256 public tokenVoteCount;\r\n\tuint256 public tokenVoteSupply;\r\n\t\r\n    // Info of Pool Stage.\r\n\tstruct PoolStage {\r\n\t\tuint256 amount;\r\n\t\tuint256 buyVoteWeight;\r\n\t\tuint256 buyAmount;\r\n\t\tuint256 sellVoteWeight;\r\n\t\tuint256 sellAmount;\r\n\t\tuint256 claimAmount;\r\n\t\tuint256 poolSupply;\r\n\t}\r\n\t\r\n\tPoolStage[] public poolStage;\r\n\t\r\n    // Info of User Stage weight.\r\n\tstruct UserStage {\r\n\t\tuint256 claimable;\r\n\t\tuint256 voteWeight;\r\n\t\tuint256 voteBuyUsed;\r\n\t\tuint256 voteSellUsed;\r\n\t}\r\n\t\r\n\tmapping (uint256 => mapping (address => UserStage)) public userStage;\r\n\t\t\r\n\t// Info of Token Vote.\r\n\tstruct TokenVote {\r\n\t\taddress token;\r\n\t\tuint256 voteWeight;\r\n\t}\r\n\tTokenVote[] public tokenVote;\r\n\tmapping(address => bool) public existingToken;\r\n\tmapping(address => uint256) public tokenIndex;\r\n\t\r\n\t// Info of User Token Vote.\r\n\tstruct UserTokenVote {\r\n\t\tuint256 voteWeight;\r\n\t\tuint256 voteUsed;\r\n\t}\r\n\tmapping (address => UserTokenVote) public userTokenVote;\r\n\t\r\n\tstruct StageTemp {\r\n\t\tuint256 counter;\r\n\t\tuint256 poolAmount;\r\n\t\tuint256 stageShare;\r\n\t\tuint256 userAmount;\r\n\t\tuint256 claimable;\r\n\t\tuint256 userClaimable;\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 voteUsed;\r\n\t\tuint256 voteBuyUsed;\r\n\t\tuint256 voteSellUsed;\r\n\t\tuint256 voteWeight;\r\n\t\tuint256 voteRemain;\r\n\t\tuint256 tokenIndex;\r\n\t}\r\n\t\r\n\tconstructor (string memory _name, string memory _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;\r\n\t\t\r\n\t\tfor(uint i = 0; i < maxStage;i++){\r\n\t\t\tpoolStage.push(PoolStage(0,0,0,0,0,0,0));\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction nextBuyStage() internal {\r\n\t\tbuyStage += 1;\r\n\t\tif(buyStage < maxStage){\r\n\t\t\tpoolStage[buyStage].poolSupply += totalSupply;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction nextSellStage() internal {\r\n\t\tsellStage += 1;\r\n\t}\r\n\t\r\n\tfunction _voteTokenProject(address tokenAddress) internal {\r\n\t\tStageTemp memory temp;\r\n\t\t\r\n\t\ttemp.voteWeight = userTokenVote[msg.sender].voteWeight;\r\n\t\ttemp.voteUsed = userTokenVote[msg.sender].voteUsed;\r\n\t\ttemp.voteRemain = temp.voteWeight - temp.voteUsed;\r\n\t\t\r\n\t\trequire(temp.voteRemain > 0, \"not have remain vote weight\");\r\n\t\t\r\n\t\tif(existingToken[tokenAddress] != true){\r\n\t\t\texistingToken[tokenAddress] = true;\r\n\t\t\ttokenIndex[tokenAddress] = tokenVoteCount;\r\n\t\t\ttokenVoteCount += 1;\r\n\t\t\t\r\n\t\t\ttokenVote.push(TokenVote(\r\n\t\t\t\ttokenAddress\r\n\t\t\t\t, temp.voteRemain\r\n\t\t\t));\r\n\t\t} else {\r\n\t\t\ttemp.tokenIndex = tokenIndex[tokenAddress];\r\n\t\t\ttokenVote[temp.tokenIndex].voteWeight += temp.voteRemain;\r\n\t\t}\r\n\t\t\r\n\t\tuserTokenVote[msg.sender].voteUsed += temp.voteRemain;\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction _voteBuy() internal {\r\n\t\tStageTemp memory temp;\r\n\t\t\r\n\t\ttemp.voteWeight = userStage[buyStage][msg.sender].voteWeight;\r\n\t\ttemp.voteBuyUsed = userStage[buyStage][msg.sender].voteBuyUsed;\r\n\t\ttemp.voteRemain = temp.voteWeight - temp.voteBuyUsed;\r\n\t\t\r\n\t\trequire(temp.voteRemain > 0, \"not have remain vote weight\");\r\n\t\t\r\n\t\tpoolStage[buyStage].buyVoteWeight += temp.voteRemain;\r\n\t\t\r\n\t\tuserStage[buyStage][msg.sender].voteBuyUsed += temp.voteRemain;\r\n\t}\r\n\t\r\n\tfunction _voteSell() internal {\r\n\t\tStageTemp memory temp;\r\n\t\t\r\n\t\ttemp.voteWeight = userStage[sellStage][msg.sender].voteWeight;\r\n\t\ttemp.voteSellUsed = userStage[sellStage][msg.sender].voteSellUsed;\r\n\t\ttemp.voteRemain = temp.voteWeight - temp.voteSellUsed;\r\n\t\t\r\n\t\trequire(temp.voteRemain > 0, \"not have remain vote weight\");\r\n\t\t\r\n\t\tpoolStage[sellStage].sellVoteWeight += temp.voteRemain;\r\n\t\t\r\n\t\tuserStage[sellStage][msg.sender].voteSellUsed += temp.voteRemain;\r\n\t}\r\n\t\r\n\tfunction distributeAmountWeight(address sender, address recipient, uint256 amount) internal {\r\n\t\tStageTemp memory temp;\r\n\t\t\r\n\t\ttemp.userAmount = amount;\r\n\t\ttemp.voteUsed = 0;\r\n\t\t\r\n\t\tif(sender != address(0)){\r\n\t\t\tuserTokenVote[sender].voteWeight -= temp.userAmount;\r\n\t\t\tif(userTokenVote[sender].voteUsed > temp.userAmount){\r\n\t\t\t\tuserTokenVote[sender].voteUsed -= temp.userAmount;\r\n\t\t\t\ttemp.voteUsed = temp.userAmount;\r\n\t\t\t} else {\r\n\t\t\t\ttemp.voteUsed = userTokenVote[sender].voteUsed;\r\n\t\t\t\tuserTokenVote[sender].voteUsed = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(recipient != address(0)){\r\n\t\t\t\tuserTokenVote[recipient].voteWeight += temp.userAmount;\r\n\t\t\t\tuserTokenVote[recipient].voteUsed += temp.voteUsed;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//Mint Transaction\r\n\t\t\ttokenVoteSupply += amount;\r\n\t\t\tuserTokenVote[recipient].voteWeight += temp.userAmount;\r\n\t\t}\r\n\t\t\r\n\t\ttemp.totalAmount = 0;\r\n\t\ttemp.voteBuyUsed = 0;\r\n\t\ttemp.voteSellUsed = 0;\r\n\t\t\r\n\t\tfor(temp.counter = 0; temp.counter < maxStage;temp.counter++){\r\n\t\t\tif(sender != address(0)){\r\n\t\t\t\tif(temp.userAmount > 0){\r\n\t\t\t\t\ttemp.userClaimable = userStage[temp.counter][sender].claimable;\r\n\t\t\t\t\tif(temp.userClaimable > temp.userAmount){\r\n\t\t\t\t\t\ttemp.claimable = temp.userAmount;\r\n\t\t\t\t\t\ttemp.userAmount = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttemp.claimable = temp.userClaimable;\r\n\t\t\t\t\t\ttemp.userAmount -= temp.userClaimable;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tuserStage[temp.counter][sender].claimable -= temp.claimable;\r\n\t\t\t\t\tuserStage[temp.counter][sender].voteWeight -= amount;\r\n\t\t\t\t\r\n\t\t\t\t\tif(userStage[temp.counter][sender].voteBuyUsed > amount){\r\n\t\t\t\t\t\tuserStage[temp.counter][sender].voteBuyUsed -= amount;\r\n\t\t\t\t\t\ttemp.voteBuyUsed = amount;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttemp.voteBuyUsed = userStage[temp.counter][sender].voteBuyUsed;\r\n\t\t\t\t\t\tuserStage[temp.counter][sender].voteBuyUsed = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(userStage[temp.counter][sender].voteSellUsed > amount){\r\n\t\t\t\t\t\tuserStage[temp.counter][sender].voteSellUsed -= amount;\r\n\t\t\t\t\t\ttemp.voteSellUsed = amount;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttemp.voteSellUsed = userStage[temp.counter][sender].voteSellUsed;\r\n\t\t\t\t\t\tuserStage[temp.counter][sender].voteSellUsed = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(recipient != address(0)){\r\n\t\t\t\t\t\tuserStage[temp.counter][recipient].voteWeight += amount;\r\n\t\t\t\t\t\tuserStage[temp.counter][recipient].claimable += temp.claimable;\r\n\t\t\t\t\t\tuserStage[temp.counter][recipient].voteBuyUsed += temp.voteBuyUsed;\r\n\t\t\t\t\t\tuserStage[temp.counter][recipient].voteSellUsed += temp.voteSellUsed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif(temp.counter == (maxStage-1)){\r\n\t\t\t\t\ttemp.claimable = amount - temp.totalAmount;\r\n\t\t\t\t\tuserStage[temp.counter][recipient].claimable += temp.claimable;\r\n\t\t\t\t\tuserStage[temp.counter][recipient].voteWeight += amount;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttemp.claimable = amount * poolShare / 100;\r\n\t\t\t\t\tuserStage[temp.counter][recipient].claimable += temp.claimable;\r\n\t\t\t\t\tuserStage[temp.counter][recipient].voteWeight += amount;\r\n\t\t\t\t\ttemp.totalAmount += temp.claimable;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction percent(uint numerator, uint denominator, uint precision) internal pure returns(uint quotient) {\r\n\t\tuint _numerator  = numerator * 10 ** (precision+1);\r\n\t\tuint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n\t\treturn ( _quotient);\r\n\t}\r\n\t\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\tStageTemp memory temp;\r\n\t\t\r\n\t\trequire(account != address(0), \"ERC20: generate to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\t\t\r\n\t\ttemp.totalAmount = 0;\r\n\t\tfor(temp.counter = 0; temp.counter < maxStage;temp.counter++){\t\t\r\n\t\t\tif(temp.counter == (maxStage-1)){\r\n\t\t\t\ttemp.poolAmount = amount - temp.totalAmount;\r\n\t\t\t\tpoolStage[temp.counter].amount += temp.poolAmount;\r\n\t\t\t} else {\r\n\t\t\t\ttemp.poolAmount = amount * poolShare / 100;\r\n\t\t\t\tpoolStage[temp.counter].amount += temp.poolAmount;\r\n\t\t\t\ttemp.totalAmount += temp.poolAmount;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\t\r\n\t\tpoolStage[0].poolSupply += amount;\t\t\r\n\t\tdistributeAmountWeight(address(0), account, amount);\r\n\t\t\r\n        totalSupply = totalSupply.add(amount);\r\n        balanceOf[account] = balanceOf[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\t\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\t\t\r\n\t\tif(buyStage < maxStage){\r\n\t\t\tpoolStage[buyStage].poolSupply -= amount;\r\n\t\t\tif(userStage[buyStage][account].voteBuyUsed > amount){\r\n\t\t\t\tpoolStage[buyStage].buyVoteWeight -= amount;\r\n\t\t\t} else {\r\n\t\t\t\tpoolStage[buyStage].buyVoteWeight -= userStage[buyStage][account].voteBuyUsed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(userStage[buyStage][account].voteSellUsed > amount){\r\n\t\t\t\tpoolStage[buyStage].sellVoteWeight -= amount;\r\n\t\t\t} else {\r\n\t\t\t\tpoolStage[buyStage].sellVoteWeight -= userStage[buyStage][account].voteSellUsed;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tdistributeAmountWeight(account, address(0), amount);\r\n\t\t\r\n        balanceOf[account] = balanceOf[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\t\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\t\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\t\t\r\n\t\tdistributeAmountWeight(sender, recipient, amount);\r\n\t\t\r\n        balanceOf[sender] = balanceOf[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n\t\tbalanceOf[recipient] = balanceOf[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\t\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\t\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, allowance[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\t\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\t\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\t\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract DEFOWhaleClub is DEFOERC20, Ownable, ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\t\r\n\tIERC20 defhold; // Defhold Token\r\n\tuint256 private _decimal = 18; //pool decimal\r\n\tuint256 private _decimalConverter = 10**18; //pool decimal converter\r\n\t\r\n\t// The Uniswap v2 Router\r\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t// The Uniswap v2 Router\r\n    IUniswapV2Pair internal uniswapPair;\r\n\t// The WETH Token\r\n    IERC20 internal weth;\r\n\t// The USDT Token\r\n    IERC20 internal usdt;\r\n\t// The DefholdPools\r\n    DefholdPools internal defholdPools;\r\n\r\n\t// Info of pool.\r\n\tstruct PoolInfo{\r\n\t\tbool depositOpen;\r\n\t\tuint256 depositFeeRate;\r\n\t\tIERC20 depositToken;\r\n\t\tuint256 depositMin;\r\n\t\tuint256 depositTime;\r\n\t\tuint256 depositOpenTime;\r\n\t\tuint256 depositCloseTime;\r\n\t\tbool voteTokenOpen;\r\n\t\tuint256 voteTokenTime;\r\n\t\tuint256 voteTokenOpenTime;\r\n\t\tuint256 voteTokenCloseTime;\r\n\t\tuint256 minLiquidity;\r\n\t\tIERC20 targetToken;\r\n\t\tuint256 profitShareRate;\r\n\t}\r\n\t\r\n\tstruct WhaleClubInfo{\r\n\t\tuint256 proposeProposalTime;\r\n\t\tuint256 proposeProposalOpenTime;\r\n\t\tuint256 proposeProposalCloseTime;\r\n\t\tuint256 whaleClubTime;\r\n\t\tuint256 whaleClubNextUpdateTime;\r\n\t}\r\n\t\t\r\n\tstruct PoolTemp {\r\n\t\tIERC20 tokenAddress;\r\n\t\tuint256 tokenDecimal;\r\n\t\tuint256 decimalDiff;\r\n\t\tuint256 decimalDiffConverter;\r\n\t\tuint256 tokenAmount;\r\n\t\tuint256 amount;\r\n\t\tuint256 amountFee;\r\n\t\tuint256 amountEnteranceFee;\r\n\t\tuint256 counter;\r\n\t\tuint256 voteWeight;\r\n\t\tuint256 voteUsed;\r\n\t\tuint256 voteBuyUsed;\r\n\t\tuint256 voteSellUsed;\r\n\t\tuint256 voteRemain;\r\n\t\tuint256 bestVoteWeight;\r\n\t\taddress targetToken;\r\n\t\tuint256 poolAmount;\r\n\t\tuint256 buyAmount;\r\n\t\tuint256 sellAmount;\r\n\t\tuint256 poolBuyVoteWeight;\r\n\t\tuint256 poolSellVoteWeight;\r\n\t\tuint256 poolRate;\r\n\t\tuint256 deadline;\r\n\t\tuint256 balanceBeforeSwap;\r\n\t\tuint256 tokensToSwap;\r\n\t\tuint256 balanceAfterSwap;\r\n\t\tuint256 profitShareAmount;\r\n\t\tuint256 defholdAmount;\r\n\t\tuint256 profitAmount;\r\n\t\tuint256 pendingClaim;\r\n\t\tuint256 claimable;\r\n\t\tuint256 claimShare;\r\n\t\tuint256 liquidity;\r\n\t\tuint256 defo_price;\r\n\t\tuint256 deposit_to_defo;\r\n\t\tuint256 stage;\r\n\t\tuint256[] getAmountsOut;\r\n\t\taddress token0;\r\n\t\taddress token1;\r\n\t\tuint112 reserve0;\r\n\t\tuint112 reserve1;\r\n\t\tuint32 blockTimestampLast;\r\n\t}\r\n\t\r\n\tPoolInfo public poolInfo;\r\n\tWhaleClubInfo public whaleClubInfo;\r\n\r\n\tconstructor (\r\n\t\tstring memory name\r\n\t\t, string memory symbol\r\n\t\t, address _defhold\r\n\t\t, address _weth\r\n\t\t, address _usdt\r\n\t\t, address _defholdPools\r\n\t\t, address _depositToken\r\n\t\t, uint256 _depositOpenTime\r\n\t\t, address _targetToken\r\n\t) public DEFOERC20(name, symbol) Ownable(){\r\n\t\tdefhold = IERC20(_defhold);\r\n\t\tweth = IERC20(_weth);\r\n\t\tusdt = IERC20(_usdt);\r\n\t\tdefholdPools = DefholdPools(_defholdPools);\r\n\t\t\r\n\t\tpoolInfo.depositOpen = true;\r\n\t\tpoolInfo.depositToken = IERC20(_depositToken);\r\n\t\t\r\n\t\tpoolInfo.depositMin = 1000000000000000000000;\r\n\t\tpoolInfo.minLiquidity = 100000;\r\n\t\tpoolInfo.depositTime = 259200;\t//3 days\r\n\t\tpoolInfo.depositFeeRate = 500;\r\n\t\tpoolInfo.profitShareRate = 500;\r\n\t\twhaleClubInfo.proposeProposalTime =  172800; //2 days\r\n\t\tpoolInfo.voteTokenTime = 86400; //1 day\r\n\t\twhaleClubInfo.whaleClubTime = 2592000; //30 days\r\n\t\t\r\n\t\tpoolInfo.depositOpenTime = _depositOpenTime;\r\n\t\tpoolInfo.depositCloseTime = poolInfo.depositOpenTime + poolInfo.depositTime; \r\n\t\t\r\n\t\tpoolInfo.targetToken = IERC20(_targetToken);\r\n\t\t\r\n\t\twhaleClubInfo.proposeProposalOpenTime = poolInfo.depositCloseTime;\r\n\t\twhaleClubInfo.proposeProposalCloseTime = whaleClubInfo.proposeProposalOpenTime + whaleClubInfo.proposeProposalTime;\r\n\t\t\r\n\t\tpoolInfo.voteTokenOpen = true;\r\n\t\tpoolInfo.voteTokenOpenTime = whaleClubInfo.proposeProposalCloseTime;\r\n\t\tpoolInfo.voteTokenCloseTime = poolInfo.voteTokenOpenTime + poolInfo.voteTokenTime;\r\n\t\t\r\n\t\twhaleClubInfo.whaleClubNextUpdateTime = poolInfo.voteTokenCloseTime + whaleClubInfo.whaleClubTime;\r\n\t\t\t\t\r\n\t\texistingToken[_targetToken] = true;\r\n\t\ttokenIndex[_targetToken] = tokenVoteCount;\r\n\t\ttokenVoteCount += 1;\r\n\t\t\r\n\t\ttokenVote.push(TokenVote(_targetToken, 0));\r\n\t}\r\n\t\t\t\t\r\n\tfunction deposit(uint256 _amount) external nonReentrant{\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\trequire(now > poolInfo.depositOpenTime, \"Deposit not yet started\");\r\n\t\trequire(now <= poolInfo.depositCloseTime, \"Deposit Closed\");\r\n\t\trequire(_amount >= poolInfo.depositMin, \"the deposit is smaller than the minimum\");\r\n\t\t\r\n\t\ttemp.tokenAmount = _getTokenAmount(address(poolInfo.depositToken), _amount);\r\n\t\ttemp.amountEnteranceFee = 0;\r\n\t\tif(poolInfo.depositFeeRate > 0){\r\n\t\t\t\r\n\t\t\taddress[] memory uniswapPath = new address[](3);\r\n            uniswapPath[0] = address(poolInfo.depositToken);\r\n            uniswapPath[1] = address(weth);\r\n            uniswapPath[2] = address(defhold);\r\n\t\t\t\r\n\t\t\ttemp.deposit_to_defo = _getTokenAmount(address(poolInfo.depositToken), 1*_decimalConverter);\r\n\t\t\ttemp.amountFee = _amount * poolInfo.depositFeeRate / _divRate;\r\n\t\t\t\r\n\t\t\ttemp.getAmountsOut = uniswapRouter.getAmountsOut(temp.deposit_to_defo, uniswapPath);\r\n\t\t\ttemp.defo_price = temp.getAmountsOut[(temp.getAmountsOut.length - 1)];\r\n\t\t\ttemp.amountEnteranceFee = temp.amountFee * temp.defo_price / _decimalConverter;\r\n\t\t}\r\n\t\t\r\n\t\tif(temp.amountEnteranceFee > 0){\r\n\t\t\tdefhold.safeTransferFrom(msg.sender, address(this), temp.amountEnteranceFee);\r\n\t\t\t\r\n\t\t\tdefhold.safeApprove(address(defholdPools), 0);\r\n            defhold.safeApprove(address(defholdPools), temp.amountEnteranceFee);\r\n\t\t\t\r\n\t\t\tdefholdPools.externalReward(temp.amountEnteranceFee);\r\n\t\t\temit EnteranceFee(msg.sender, address(defholdPools), temp.amountEnteranceFee);\r\n\t\t}\r\n\t\t\r\n\t\tif(temp.tokenAmount > 0){\r\n\t\t\tpoolInfo.depositToken.safeTransferFrom(msg.sender, address(this), temp.tokenAmount);\r\n\t\t\t_mint(msg.sender, _amount);\r\n\t\t}\r\n\t\t\r\n\t\temit Deposit(msg.sender, address(poolInfo.depositToken), temp.tokenAmount);\r\n    }\r\n\t\t\r\n\tfunction proposeProposal(address tokenAddress, address tokenLPAddress) external nonReentrant{\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\trequire(now > whaleClubInfo.proposeProposalOpenTime, \"Propose Proposal not yet started\");\r\n\t\trequire(now <= whaleClubInfo.proposeProposalCloseTime, \"Vote Token Closed\");\r\n\t\trequire(balanceOf[msg.sender] > 0 || msg.sender == owner(), \"not have authorities\");\r\n\t\t\t\t\r\n\t\tIUniswapV2Pair uniswapPair2 = IUniswapV2Pair(tokenLPAddress);\r\n\t\ttemp.token0 = uniswapPair2.token0();\r\n\t\ttemp.token1 = uniswapPair2.token1();\r\n\t\t(temp.reserve0, temp.reserve1, temp.blockTimestampLast) = uniswapPair2.getReserves();\r\n\t\t\t\t\t\t\r\n\t\ttemp.liquidity = 0;\r\n\t\tif(temp.token0 == tokenAddress && temp.token1 == address(weth)){\r\n\t\t\ttemp.liquidity = temp.reserve1 * 2;\r\n\t\t} else {\r\n\t\t\tif(temp.token1 == tokenAddress && temp.token0 == address(weth)){\r\n\t\t\t\ttemp.liquidity = temp.reserve0 * 2;\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\ttemp.liquidity = temp.liquidity * _getETHPrice() / _decimalConverter;\r\n\t\t\r\n\t\t// require(temp.liquidity >= poolInfo.minLiquidity, \"Liquid is not meet the minimum\");\r\n\t\t\r\n\t\tif(existingToken[tokenAddress] != true){\r\n\t\t\texistingToken[tokenAddress] = true;\r\n\t\t\ttokenIndex[tokenAddress] = tokenVoteCount;\r\n\t\t\ttokenVoteCount += 1;\r\n\t\t\t\r\n\t\t\ttokenVote.push(TokenVote(tokenAddress, 0));\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tfunction voteTokenProject(address tokenAddress, address tokenLPAddress) external nonReentrant{\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\trequire(now > poolInfo.voteTokenOpenTime, \"Vote Token not yet started\");\r\n\t\trequire(now <= poolInfo.voteTokenCloseTime, \"Vote Token Closed\");\r\n\t\t\t\t\r\n\t\tIUniswapV2Pair uniswapPair2 = IUniswapV2Pair(tokenLPAddress);\r\n\t\ttemp.token0 = uniswapPair2.token0();\r\n\t\ttemp.token1 = uniswapPair2.token1();\r\n\t\t(temp.reserve0, temp.reserve1, temp.blockTimestampLast) = uniswapPair2.getReserves();\r\n\t\t\t\t\t\t\r\n\t\ttemp.liquidity = 0;\r\n\t\tif(temp.token0 == tokenAddress && temp.token1 == address(weth)){\r\n\t\t\ttemp.liquidity = temp.reserve1 * 2;\r\n\t\t} else {\r\n\t\t\tif(temp.token1 == tokenAddress && temp.token0 == address(weth)){\r\n\t\t\t\ttemp.liquidity = temp.reserve0 * 2;\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\ttemp.liquidity = temp.liquidity * _getETHPrice() / _decimalConverter;\r\n\t\t\r\n\t\t// require(temp.liquidity >= poolInfo.minLiquidity, \"Liquid is not meet the minimum\");\r\n\t\t\t\t\r\n\t\ttemp.voteWeight = userTokenVote[msg.sender].voteWeight;\r\n\t\ttemp.voteUsed = userTokenVote[msg.sender].voteUsed;\r\n\t\ttemp.voteRemain = temp.voteWeight - temp.voteUsed;\r\n\t\t\r\n\t\t_voteTokenProject(tokenAddress);\r\n\t\t\r\n\t\temit VoteTokenProject(msg.sender, tokenAddress, temp.voteRemain);\r\n\t\t\r\n\t\ttemp.targetToken = address(poolInfo.targetToken);\r\n\t\ttemp.bestVoteWeight = 0;\r\n\t\t\r\n\t\tfor(temp.counter = 0; temp.counter < tokenVoteCount;temp.counter++){\t\t\r\n\t\t\ttemp.voteWeight = tokenVote[temp.counter].voteWeight;\r\n\t\t\tif(temp.voteWeight > temp.bestVoteWeight){\r\n\t\t\t\ttemp.targetToken = tokenVote[temp.counter].token;\r\n\t\t\t\ttemp.bestVoteWeight = temp.voteWeight;\r\n\t\t\t\tpoolInfo.targetToken = IERC20(temp.targetToken);\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction voteBuy() external nonReentrant{\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\trequire(now >= poolInfo.voteTokenCloseTime, \"Vote Buy/Sell not yet started\");\r\n\t\trequire(buyStage < maxStage, \"Vote Buy was ended\");\r\n\t\t\r\n\t\ttemp.voteWeight = userStage[buyStage][msg.sender].voteWeight;\r\n\t\ttemp.voteBuyUsed = userStage[buyStage][msg.sender].voteBuyUsed;\r\n\t\ttemp.voteRemain = temp.voteWeight - temp.voteBuyUsed;\r\n\t\t\r\n\t\t_voteBuy();\r\n\t\t\r\n\t\temit VoteBuy(msg.sender, temp.voteRemain);\r\n\t\t\r\n\t\ttemp.poolAmount = poolStage[buyStage].amount;\r\n\t\ttemp.poolBuyVoteWeight = poolStage[buyStage].buyVoteWeight;\t\t\r\n\t\t\r\n\t\ttemp.poolRate = percent(temp.poolBuyVoteWeight, totalSupply, 4);\r\n\t\t\r\n\t\tif(temp.poolRate >= 5000) {\r\n\t\t\t\r\n\t\t\ttemp.deadline = block.timestamp + 5 minutes;\r\n\t\t\ttemp.balanceBeforeSwap = poolInfo.targetToken.balanceOf(address(this));\r\n\t\t\t\r\n            // // Swap the depositToken for targetToken\r\n            temp.tokensToSwap = _getTokenAmount(address(poolInfo.depositToken), temp.poolAmount);\r\n            require(temp.tokensToSwap > 0, \"bad token swap\");\r\n            address[] memory uniswapPath = new address[](3);\r\n            uniswapPath[0] = address(poolInfo.depositToken);\r\n            uniswapPath[1] = address(weth);\r\n            uniswapPath[2] = address(poolInfo.targetToken);\r\n            poolInfo.depositToken.safeApprove(address(uniswapRouter), 0);\r\n            poolInfo.depositToken.safeApprove(address(uniswapRouter), temp.tokensToSwap);\r\n            uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(temp.tokensToSwap, 0, uniswapPath, address(this), temp.deadline);\r\n\t\t\t\r\n            temp.balanceAfterSwap = poolInfo.targetToken.balanceOf(address(this));\r\n            temp.buyAmount = temp.balanceAfterSwap - temp.balanceBeforeSwap;\r\n\t\t\ttemp.buyAmount = _getReverseTokenAmount(address(poolInfo.targetToken), temp.buyAmount);\r\n\t\t\tpoolStage[buyStage].buyAmount = temp.buyAmount;\r\n\t\t\t\r\n\t\t\twhaleClubInfo.whaleClubNextUpdateTime = now + whaleClubInfo.whaleClubTime;\r\n\t\t\tnextBuyStage();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction voteSell() external nonReentrant{\r\n\t\tPoolTemp memory temp;\r\n\t\trequire(now >= poolInfo.voteTokenCloseTime, \"Vote Buy/Sell not yet started\");\r\n\t\trequire(sellStage < buyStage, \"Vote Sell not found\");\r\n\t\trequire(sellStage < maxStage, \"Vote Sell was ended\");\r\n\t\t\r\n\t\ttemp.voteWeight = userStage[buyStage][msg.sender].voteWeight;\r\n\t\ttemp.voteSellUsed = userStage[buyStage][msg.sender].voteSellUsed;\r\n\t\ttemp.voteRemain = temp.voteWeight - temp.voteSellUsed;\r\n\t\t\r\n\t\t_voteSell();\r\n\t\t\r\n\t\temit VoteSell(msg.sender, temp.voteRemain);\r\n\t\t\r\n\t\ttemp.poolAmount = poolStage[sellStage].amount;\r\n\t\ttemp.buyAmount = poolStage[sellStage].buyAmount;\r\n\t\ttemp.poolSellVoteWeight = poolStage[sellStage].sellVoteWeight;\t\t\r\n\t\t\r\n\t\ttemp.poolRate = percent(temp.poolSellVoteWeight, totalSupply, 4);\r\n\t\t\r\n\t\tif(temp.poolRate >= 5000) {\r\n\t\t\t\r\n\t\t\ttemp.deadline = block.timestamp + 5 minutes;\r\n\t\t\ttemp.balanceBeforeSwap = poolInfo.depositToken.balanceOf(address(this));\r\n\t\t\t\r\n            // // Swap the targetToken for depositToken\r\n            temp.tokensToSwap = _getTokenAmount(address(poolInfo.targetToken), temp.buyAmount);\r\n            require(temp.tokensToSwap > 0, \"bad token swap\");\r\n            address[] memory uniswapPath = new address[](3);\r\n            uniswapPath[0] = address(poolInfo.targetToken);\r\n            uniswapPath[1] = address(weth);\r\n            uniswapPath[2] = address(poolInfo.depositToken);\r\n            poolInfo.targetToken.safeApprove(address(uniswapRouter), 0);\r\n            poolInfo.targetToken.safeApprove(address(uniswapRouter), temp.tokensToSwap);\r\n            uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(temp.tokensToSwap, 0, uniswapPath, address(this), temp.deadline);\r\n\t\t\t\r\n            temp.balanceAfterSwap = poolInfo.depositToken.balanceOf(address(this));\r\n            temp.sellAmount = temp.balanceAfterSwap - temp.balanceBeforeSwap;\r\n\t\t\ttemp.sellAmount = _getReverseTokenAmount(address(poolInfo.depositToken), temp.sellAmount);\r\n\t\t\t\r\n\t\t\tif(temp.sellAmount > temp.poolAmount){\r\n\t\t\t\ttemp.balanceBeforeSwap = defhold.balanceOf(address(this));\r\n\t\t\t\ttemp.profitAmount = temp.sellAmount - temp.poolAmount;\r\n\t\t\t\ttemp.profitShareAmount = temp.profitAmount * poolInfo.profitShareRate / _divRate;\r\n\t\t\t\ttemp.tokensToSwap = _getTokenAmount(address(poolInfo.depositToken), temp.profitShareAmount);\r\n\t\t\t\tuniswapPath = new address[](3);\r\n\t\t\t\tuniswapPath[0] = address(poolInfo.depositToken);\r\n\t\t\t\tuniswapPath[1] = address(weth);\r\n\t\t\t\tuniswapPath[2] = address(defhold);\r\n\t\t\t\tpoolInfo.depositToken.safeApprove(address(uniswapRouter), 0);\r\n\t\t\t\tpoolInfo.depositToken.safeApprove(address(uniswapRouter), temp.tokensToSwap);\r\n\t\t\t\tuniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(temp.tokensToSwap, 0, uniswapPath, address(this), temp.deadline);\r\n\t\t\t\ttemp.balanceAfterSwap = defhold.balanceOf(address(this));\r\n\t\t\t\t\r\n\t\t\t\ttemp.defholdAmount = temp.balanceAfterSwap - temp.balanceBeforeSwap;\r\n\t\t\t\ttemp.defholdAmount = _getReverseTokenAmount(address(defhold), temp.defholdAmount);\r\n\t\t\t\t\r\n\t\t\t\tdefhold.safeApprove(address(defholdPools), 0);\r\n\t\t\t\tdefhold.safeApprove(address(defholdPools), temp.defholdAmount);\r\n\t\t\t\tdefholdPools.externalReward(temp.defholdAmount);\r\n\t\t\t\t\r\n\t\t\t\temit PoolProfitShare(address(defholdPools), temp.defholdAmount);\r\n\t\t\t\t\r\n\t\t\t\ttemp.sellAmount -= temp.profitShareAmount;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpoolStage[sellStage].sellAmount = temp.sellAmount;\r\n\t\t\t\r\n\t\t\twhaleClubInfo.whaleClubNextUpdateTime = now + whaleClubInfo.whaleClubTime;\r\n\t\t\tnextSellStage();\r\n\t\t}\r\n\t}\r\n\t\t\r\n\tfunction updateWhaleClubStat() external nonReentrant{\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\trequire(now >= poolInfo.voteTokenCloseTime, \"Whale Club not yet started\");\r\n\t\t\r\n\t\ttemp.poolBuyVoteWeight = poolStage[buyStage].buyVoteWeight;\r\n\t\ttemp.poolRate = percent(temp.poolBuyVoteWeight, totalSupply, 4);\r\n\t\t\r\n\t\tif(now > whaleClubInfo.whaleClubNextUpdateTime){\r\n\t\t\tif(temp.poolRate < 5000) {\r\n\t\t\t\tif(buyStage == 0){\r\n\t\t\t\t\tsellStage = maxStage;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttemp.stage = buyStage;\r\n\t\t\t\t\r\n\t\t\t\tfor(temp.counter = temp.stage; temp.counter < maxStage;temp.counter++){\t\t\r\n\t\t\t\t\ttemp.poolAmount = poolStage[buyStage].amount;\t\t\r\n\t\t\t\t\tpoolStage[temp.counter].sellAmount = temp.poolAmount;\t\t\t\t\t\r\n\t\t\t\t\tnextBuyStage();\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tfunction pendingClaim(uint _poolStage, address _user) public view returns (uint256){\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\ttemp.pendingClaim = 0;\r\n\t\t\r\n\t\ttemp.sellAmount = poolStage[_poolStage].sellAmount;\r\n\t\tif(temp.sellAmount > 0){\r\n\t\t\ttemp.claimable = userStage[_poolStage][_user].claimable;\r\n\t\t\tif(temp.claimable > 0){\r\n\t\t\t\ttemp.poolAmount = poolStage[_poolStage].amount;\r\n\t\t\t\ttemp.claimShare = percent(temp.claimable, temp.poolAmount, 4);\r\n\t\t\t\ttemp.pendingClaim += temp.sellAmount * temp.claimShare / _divRate;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn temp.pendingClaim;\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction claim(uint _poolStage) external nonReentrant{\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\ttemp.claimable = userStage[_poolStage][msg.sender].claimable;\r\n\t\ttemp.pendingClaim = pendingClaim(_poolStage, msg.sender);\r\n\t\ttemp.pendingClaim = _getTokenAmount(address(poolInfo.depositToken), temp.pendingClaim);\r\n\t\t\r\n\t\trequire(temp.pendingClaim > 0, \"no Claim balance\");\r\n\t\t\r\n\t\tpoolInfo.depositToken.safeTransfer(msg.sender, temp.pendingClaim);\r\n\t\t// userStage[_poolStage][msg.sender].claimable -= temp.claimable;\r\n\t\tpoolStage[_poolStage].claimAmount += temp.claimable;\r\n\t\t\r\n\t\t_burn(msg.sender, temp.claimable);\r\n\t\t\r\n\t\temit Claim(msg.sender, address(poolInfo.depositToken), temp.claimable, temp.pendingClaim);\r\n\t}\r\n\t\r\n\tfunction _getTokenAmount(address _tokenAddress, uint256 _amount) internal view returns (uint256 quotient) {\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\ttemp.tokenAddress = IERC20(_tokenAddress);\r\n\t\ttemp.tokenDecimal = temp.tokenAddress.decimals();\r\n\t\t\t\r\n\t\tif(_decimal != temp.tokenDecimal){\r\n\t\t\tif(_decimal > temp.tokenDecimal){\r\n\t\t\t\ttemp.decimalDiff = _decimal - temp.tokenDecimal;\r\n\t\t\t\ttemp.decimalDiffConverter = 10**temp.decimalDiff;\r\n\t\t\t\ttemp.amount = _amount.div(temp.decimalDiffConverter);\r\n\t\t\t} else {\r\n\t\t\t\ttemp.decimalDiff = temp.tokenDecimal - _decimal;\r\n\t\t\t\ttemp.decimalDiffConverter = 10**temp.decimalDiff;\r\n\t\t\t\ttemp.amount = _amount.mul(temp.decimalDiffConverter);\r\n\t\t\t}\t\t\r\n\t\t} else {\r\n\t\t\ttemp.amount = _amount;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _quotient = temp.amount;\r\n\t\t\r\n\t\treturn (_quotient);\r\n    }\r\n\t\r\n\tfunction _getReverseTokenAmount(address _tokenAddress, uint256 _amount) internal view returns (uint256 quotient) {\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\ttemp.tokenAddress = IERC20(_tokenAddress);\r\n\t\ttemp.tokenDecimal = temp.tokenAddress.decimals();\r\n\t\t\t\r\n\t\tif(_decimal != temp.tokenDecimal){\r\n\t\t\tif(_decimal > temp.tokenDecimal){\r\n\t\t\t\ttemp.decimalDiff = _decimal - temp.tokenDecimal;\r\n\t\t\t\ttemp.decimalDiffConverter = 10**temp.decimalDiff;\r\n\t\t\t\ttemp.amount = _amount.mul(temp.decimalDiffConverter);\r\n\t\t\t} else {\r\n\t\t\t\ttemp.decimalDiff = temp.tokenDecimal - _decimal;\r\n\t\t\t\ttemp.decimalDiffConverter = 10**temp.decimalDiff;\r\n\t\t\t\ttemp.amount = _amount.div(temp.decimalDiffConverter);\r\n\t\t\t}\t\t\r\n\t\t} else {\r\n\t\t\ttemp.amount = _amount;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _quotient = temp.amount;\r\n\t\t\r\n\t\treturn (_quotient);\r\n    }\r\n\t\r\n\tfunction _getETHPrice() public view returns (uint256){\r\n\t\tPoolTemp memory temp;\r\n\t\t \r\n\t\taddress[] memory uniswapPath = new address[](2);\r\n\t\tuniswapPath[0] = address(weth);\r\n\t\tuniswapPath[1] = address(usdt);\r\n\t\t\r\n\t\ttemp.getAmountsOut = uniswapRouter.getAmountsOut(1 * _decimalConverter, uniswapPath);\r\n\t\tuint256 ethPrice = temp.getAmountsOut[1];\r\n\t\tethPrice = _getReverseTokenAmount(address(usdt), ethPrice) / _decimalConverter;\r\n\t\t\r\n\t\treturn ethPrice;\r\n\t}\r\n\t\r\n\tfunction changeDefholdPools(address _defholdPools) external onlyOwner{\r\n\t\tdefholdPools = DefholdPools(_defholdPools);\r\n\t}\r\n\t\r\n\tevent Deposit(address indexed user, address token, uint256 amount);\r\n\tevent EnteranceFee(address indexed user, address token, uint256 amount);\r\n\tevent VoteTokenProject(address indexed user,address token, uint256 voteWeight);\r\n\tevent VoteBuy(address indexed user, uint256 voteWeight);\r\n\tevent VoteSell(address indexed user, uint256 voteWeight);\r\n\tevent PoolProfitShare(address indexed poolAddress, uint256 amount);\r\n\tevent Claim(address indexed user, address token, uint256 amountClaim, uint256 amountReceived);\r\n}"
    }
  }
}