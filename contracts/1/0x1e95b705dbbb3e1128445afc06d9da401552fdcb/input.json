{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Contracts.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/ERC721Holder.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers. \n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721Holder is IERC721Receiver {\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\n// File: @openzeppelin/contracts/introspection/IERC165.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: contracts/v1.5/SafeERC721.sol\n\npragma solidity ^0.6.0;\n\n\n\nlibrary SafeERC721\n{\n\tfunction safeName(IERC721Metadata _metadata) internal view returns (string memory _name)\n\t{\n\t\ttry _metadata.name() returns (string memory _n) { return _n; } catch {}\n\t}\n\n\tfunction safeSymbol(IERC721Metadata _metadata) internal view returns (string memory _symbol)\n\t{\n\t\ttry _metadata.symbol() returns (string memory _s) { return _s; } catch {}\n\t}\n\n\tfunction safeTokenURI(IERC721Metadata _metadata, uint256 _tokenId) internal view returns (string memory _tokenURI)\n\t{\n\t\ttry _metadata.tokenURI(_tokenId) returns (string memory _t) { return _t; } catch {}\n\t}\n\n\tfunction safeTransfer(IERC721 _token, address _to, uint256 _tokenId) internal\n\t{\n\t\taddress _from = address(this);\n\t\ttry _token.transferFrom(_from, _to, _tokenId) { return; } catch {}\n\t\t// attempts to handle non-conforming ERC721 contracts\n\t\t_token.approve(_from, _tokenId);\n\t\t_token.transferFrom(_from, _to, _tokenId);\n\t}\n}\n\n// File: contracts/v1.5/CollectivePurchase.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n\n\n\n\ninterface IAuctionFractionalizer\n{\n\tfunction fractionalize(address _target, uint256 _tokenId, string memory _name, string memory _symbol, uint8 _decimals, uint256 _fractionsCount, uint256 _fractionPrice, address _paymentToken, uint256 _kickoff, uint256 _duration, uint256 _fee) external returns (address _fractions);\n}\n\ncontract CollectivePurchase is ERC721Holder, Ownable, ReentrancyGuard\n{\n\tusing SafeERC20 for IERC20;\n\tusing SafeERC721 for IERC721;\n\tusing SafeMath for uint256;\n\n\tenum State { Created, Funded, Started, Ended }\n\n\tstruct BuyerInfo {\n\t\tuint256 amount;\n\t}\n\n\tstruct ListingInfo {\n\t\tState state;\n\t\taddress payable seller;\n\t\taddress collection;\n\t\tuint256 tokenId;\n\t\taddress paymentToken;\n\t\tuint256 reservePrice;\n\t\tuint256 limitPrice;\n\t\tuint256 extension;\n\t\tuint256 priceMultiplier;\n\t\tbytes extra;\n\t\tuint256 amount;\n\t\tuint256 cutoff;\n\t\tuint256 fractionsCount;\n\t\taddress fractions;\n\t\tmapping (address => BuyerInfo) buyers;\n\t}\n\n\tuint8 constant public FRACTIONS_DECIMALS = 6;\n\tuint256 constant public FRACTIONS_COUNT = 100000e6;\n\n\tuint256 public immutable fee;\n\taddress payable public immutable vault;\n\tmapping (bytes32 => address) public fractionalizers;\n\n\tmapping (address => uint256) private balances;\n\tmapping (address => mapping (uint256 => bool)) private items;\n\n\tListingInfo[] public listings;\n\n\tmodifier onlySeller(uint256 _listingId)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\trequire(msg.sender == _listing.seller, \"access denied\");\n\t\t_;\n\t}\n\n\tmodifier inState(uint256 _listingId, State _state)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\trequire(_state == _listing.state, \"not available\");\n\t\t_;\n\t}\n\n\tmodifier notInState(uint256 _listingId, State _state)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\trequire(_state != _listing.state, \"not available\");\n\t\t_;\n\t}\n\n\tconstructor (uint256 _fee, address payable _vault) public\n\t{\n\t\trequire(_fee <= 1e18, \"invalid fee\");\n\t\trequire(_vault != address(0), \"invalid address\");\n\t\tfee = _fee;\n\t\tvault = _vault;\n\t}\n\n\tfunction listingCount() external view returns (uint256 _count)\n\t{\n\t\treturn listings.length;\n\t}\n\n\tfunction buyers(uint256 _listingId, address _buyer) external view returns (uint256 _amount)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tBuyerInfo storage _info = _listing.buyers[_buyer];\n\t\treturn _info.amount;\n\t}\n\n\tfunction status(uint256 _listingId) external view returns (string memory _status)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tif (_listing.state == State.Created) return \"CREATED\";\n\t\tif (_listing.state == State.Funded) return \"FUNDED\";\n\t\tif (_listing.state == State.Started) return now <= _listing.cutoff ? \"STARTED\" : \"ENDING\";\n\t\treturn \"ENDED\";\n\t}\n\n\tfunction maxJoinAmount(uint256 _listingId) external view returns (uint256 _amount)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\treturn _listing.limitPrice - _listing.amount;\n\t}\n\n\tfunction buyerFractionsCount(uint256 _listingId, address _buyer) external view inState(_listingId, State.Ended) returns (uint256 _fractionsCount)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tuint256 _amount = _listing.buyers[_buyer].amount;\n\t\t_fractionsCount = (_amount * _listing.fractionsCount) / _listing.reservePrice;\n\t\treturn _fractionsCount;\n\t}\n\n\tfunction sellerPayout(uint256 _listingId) external view returns (uint256 _netAmount, uint256 _feeAmount, uint256 _netFractionsCount, uint256 _feeFractionsCount)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tuint256 _reservePrice = _listing.reservePrice;\n\t\tuint256 _amount = _listing.amount;\n\t\t_feeAmount = (_amount * fee) / 1e18;\n\t\t_netAmount = _amount - _feeAmount;\n\t\t_feeFractionsCount = 0;\n\t\t_netFractionsCount = 0;\n\t\tif (_reservePrice > _amount) {\n\t\t\tuint256 _missingAmount = _reservePrice - _amount;\n\t\t\tuint256 _missingFeeAmount = (_missingAmount * fee) / 1e18;\n\t\t\tuint256 _missingNetAmount = _missingAmount - _missingFeeAmount;\n\t\t\tuint256 _fractionsCount = _issuing(_listing.extra);\n\t\t\t_feeFractionsCount = _fractionsCount * _missingFeeAmount / _reservePrice;\n\t\t\t_netFractionsCount = _fractionsCount * _missingNetAmount / _reservePrice;\n\t\t}\n\t}\n\n\tfunction addFractionalizer(bytes32 _type, address _fractionalizer) external onlyOwner\n\t{\n\t\trequire(fractionalizers[_type] == address(0), \"already defined\");\n\t\tfractionalizers[_type] = _fractionalizer;\n\t\temit AddFractionalizer(_type, _fractionalizer);\n\t}\n\n\tfunction list(address _collection, uint256 _tokenId, address _paymentToken, uint256 _reservePrice, uint256 _limitPrice, uint256 _extension, uint256 _priceMultiplier, bytes calldata _extra) external nonReentrant returns (uint256 _listingId)\n\t{\n\t\taddress payable _seller = msg.sender;\n\t\trequire(_limitPrice * 1e18 / _limitPrice == 1e18, \"price overflow\");\n\t\trequire(0 < _reservePrice && _reservePrice <= _limitPrice, \"invalid price\");\n\t\trequire(30 minutes <= _extension && _extension <= 731 days, \"invalid duration\");\n\t\trequire(0 < _priceMultiplier && _priceMultiplier <= 10000, \"invalid multiplier\"); // from 1% up to 100x\n\t\t_validate(_extra);\n\t\tIERC721(_collection).transferFrom(_seller, address(this), _tokenId);\n\t\titems[_collection][_tokenId] = true;\n\t\t_listingId = listings.length;\n\t\tlistings.push(ListingInfo({\n\t\t\tstate: State.Created,\n\t\t\tseller: _seller,\n\t\t\tcollection: _collection,\n\t\t\ttokenId: _tokenId,\n\t\t\tpaymentToken: _paymentToken,\n\t\t\treservePrice: _reservePrice,\n\t\t\tlimitPrice: _limitPrice,\n\t\t\textension: _extension,\n\t\t\tpriceMultiplier: _priceMultiplier,\n\t\t\textra: _extra,\n\t\t\tamount: 0,\n\t\t\tcutoff: uint256(-1),\n\t\t\tfractionsCount: 0,\n\t\t\tfractions: address(0)\n\t\t}));\n\t\temit Listed(_listingId);\n\t\treturn _listingId;\n\t}\n\n\tfunction cancel(uint256 _listingId) external nonReentrant onlySeller(_listingId) inState(_listingId, State.Created)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\t_listing.state = State.Ended;\n\t\titems[_listing.collection][_listing.tokenId] = false;\n\t\tIERC721(_listing.collection).safeTransfer(_listing.seller, _listing.tokenId);\n\t\temit Canceled(_listingId);\n\t}\n\n\tfunction updatePrice(uint256 _listingId, uint256 _newReservePrice, uint256 _newLimitPrice) external onlySeller(_listingId) inState(_listingId, State.Created)\n\t{\n\t\trequire(_newLimitPrice * 1e18 / _newLimitPrice == 1e18, \"price overflow\");\n\t\trequire(0 < _newReservePrice && _newReservePrice <= _newLimitPrice, \"invalid price\");\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tuint256 _oldReservePrice = _listing.reservePrice;\n\t\tuint256 _oldLimitPrice = _listing.limitPrice;\n\t\t_listing.reservePrice = _newReservePrice;\n\t\t_listing.limitPrice = _newLimitPrice;\n\t\temit UpdatePrice(_listingId, _oldReservePrice, _oldLimitPrice, _newReservePrice, _newLimitPrice);\n\t}\n\n\tfunction accept(uint256 _listingId) external onlySeller(_listingId) inState(_listingId, State.Funded)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tuint256 _amount = _listing.reservePrice - _listing.amount;\n\t\tuint256 _feeAmount = (_amount * fee) / 1e18;\n\t\tuint256 _netAmount = _amount - _feeAmount;\n\t\t_listing.state = State.Started;\n\t\t_listing.cutoff = now - 1;\n\t\t_listing.buyers[vault].amount += _feeAmount;\n\t\t_listing.buyers[_listing.seller].amount += _netAmount;\n\t\temit Sold(_listingId);\n\t}\n\n\tfunction join(uint256 _listingId, uint256 _amount) external payable nonReentrant notInState(_listingId, State.Ended)\n\t{\n\t\taddress payable _buyer = msg.sender;\n\t\tuint256 _value = msg.value;\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\trequire(now <= _listing.cutoff, \"not available\");\n\t\tuint256 _leftAmount = _listing.limitPrice - _listing.amount;\n\t\trequire(_amount <= _leftAmount, \"limit exceeded\");\n\t\t_safeTransferFrom(_listing.paymentToken, _buyer, _value, payable(address(this)), _amount);\n\t\tbalances[_listing.paymentToken] += _amount;\n\t\t_listing.amount += _amount;\n\t\t_listing.buyers[_buyer].amount += _amount;\n\t\tif (_listing.state == State.Created) _listing.state = State.Funded;\n\t\tif (_listing.state == State.Funded) {\n\t\t\tif (_listing.amount >= _listing.reservePrice) {\n\t\t\t\t_listing.state = State.Started;\n\t\t\t\t_listing.cutoff = now + _listing.extension;\n\t\t\t\temit Sold(_listingId);\n\t\t\t}\n\t\t}\n\t\tif (_listing.state == State.Started) _listing.reservePrice = _listing.amount;\n\t\temit Join(_listingId, _buyer, _amount);\n\t}\n\n\tfunction leave(uint256 _listingId) external nonReentrant inState(_listingId, State.Funded)\n\t{\n\t\taddress payable _buyer = msg.sender;\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tuint256 _amount = _listing.buyers[_buyer].amount;\n\t\trequire(_amount > 0, \"insufficient balance\");\n\t\t_listing.buyers[_buyer].amount = 0;\n\t\t_listing.amount -= _amount;\n\t\tbalances[_listing.paymentToken] -= _amount;\n\t\tif (_listing.amount == 0) _listing.state = State.Created;\n\t\t_safeTransfer(_listing.paymentToken, _buyer, _amount);\n\t\temit Leave(_listingId, _buyer, _amount);\n\t}\n\n\tfunction relist(uint256 _listingId) public nonReentrant inState(_listingId, State.Started)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\trequire(now > _listing.cutoff, \"not available\");\n\t\tuint256 _fractionPrice = (_listing.reservePrice + (FRACTIONS_COUNT - 1)) / FRACTIONS_COUNT;\n\t\tuint256 _relistFractionPrice = (_listing.priceMultiplier * _fractionPrice + 99) / 100;\n\t\t_listing.state = State.Ended;\n\t\t_listing.fractions = _fractionalize(_listingId, _relistFractionPrice);\n\t\t_listing.fractionsCount = _balanceOf(_listing.fractions);\n\t\titems[_listing.collection][_listing.tokenId] = false;\n\t\tbalances[_listing.fractions] = _listing.fractionsCount;\n\t\temit Relisted(_listingId);\n\t}\n\n\tfunction payout(uint256 _listingId) public nonReentrant inState(_listingId, State.Ended)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tuint256 _amount = _listing.amount;\n\t\trequire(_amount > 0, \"insufficient balance\");\n\t\tuint256 _feeAmount = (_amount * fee) / 1e18;\n\t\tuint256 _netAmount = _amount - _feeAmount;\n\t\t_listing.amount = 0;\n\t\tbalances[_listing.paymentToken] -= _amount;\n\t\t_safeTransfer(_listing.paymentToken, vault, _feeAmount);\n\t\t_safeTransfer(_listing.paymentToken, _listing.seller, _netAmount);\n\t\temit Payout(_listingId, _listing.seller, _netAmount, _feeAmount);\n\t}\n\n\tfunction claim(uint256 _listingId, address payable _buyer) public nonReentrant inState(_listingId, State.Ended)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tuint256 _amount = _listing.buyers[_buyer].amount;\n\t\trequire(_amount > 0, \"insufficient balance\");\n\t\tuint256 _fractionsCount = (_amount * _listing.fractionsCount) / _listing.reservePrice;\n\t\t_listing.buyers[_buyer].amount = 0;\n\t\tbalances[_listing.fractions] -= _fractionsCount;\n\t\t_safeTransfer(_listing.fractions, _buyer, _fractionsCount);\n\t\temit Claim(_listingId, _buyer, _amount, _fractionsCount);\n\t}\n\n\tfunction relistPayoutAndClaim(uint256 _listingId, address payable[] calldata _buyers) external\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\tif (_listing.state != State.Ended) {\n\t\t\trelist(_listingId);\n\t\t}\n\t\tif (_listing.amount > 0) {\n\t\t\tpayout(_listingId);\n\t\t}\n\t\tif (_listing.buyers[vault].amount > 0) {\n\t\t\tclaim(_listingId, vault);\n\t\t}\n\t\tif (_listing.buyers[_listing.seller].amount > 0) {\n\t\t\tclaim(_listingId, _listing.seller);\n\t\t}\n\t\tfor (uint256 _i = 0; _i < _buyers.length; _i++) {\n\t\t\taddress payable _buyer = _buyers[_i];\n\t\t\tif (_listing.buyers[_buyer].amount > 0) {\n\t\t\t\tclaim(_listingId, _buyer);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction recoverLostFunds(address _token, address payable _to) external onlyOwner nonReentrant\n\t{\n\t\tuint256 _balance = balances[_token];\n\t\tuint256 _current = _balanceOf(_token);\n\t\tif (_current > _balance) {\n\t\t\tuint256 _excess = _current - _balance;\n\t\t\t_safeTransfer(_token, _to, _excess);\n\t\t}\n\t}\n\n\tfunction recoverLostItem(address _collection, uint256 _tokenId, address _to) external onlyOwner nonReentrant\n\t{\n\t\tif (items[_collection][_tokenId]) return;\n\t\tIERC721(_collection).safeTransfer(_to, _tokenId);\n\t}\n\n\tfunction _validate(bytes calldata _extra) internal view\n\t{\n\t\t(bytes32 _type,,, uint256 _duration, uint256 _fee) = abi.decode(_extra, (bytes32, string, string, uint256, uint256));\n\t\trequire(fractionalizers[_type] != address(0), \"unsupported type\");\n\t\trequire(30 minutes <= _duration && _duration <= 731 days, \"invalid duration\");\n\t\trequire(_fee <= 1e18, \"invalid fee\");\n\t}\n\n\tfunction _issuing(bytes storage _extra) internal pure returns (uint256 _fractionsCount)\n\t{\n\t\t(,,,, uint256 _fee) = abi.decode(_extra, (bytes32, string, string, uint256, uint256));\n\t\treturn FRACTIONS_COUNT - (FRACTIONS_COUNT * _fee / 1e18);\n\t}\n\n\tfunction _fractionalize(uint256 _listingId, uint256 _fractionPrice) internal returns (address _fractions)\n\t{\n\t\tListingInfo storage _listing = listings[_listingId];\n\t\t(bytes32 _type, string memory _name, string memory _symbol, uint256 _duration, uint256 _fee) = abi.decode(_listing.extra, (bytes32, string, string, uint256, uint256));\n\t\tIERC721(_listing.collection).approve(fractionalizers[_type], _listing.tokenId);\n\t\treturn IAuctionFractionalizer(fractionalizers[_type]).fractionalize(_listing.collection, _listing.tokenId, _name, _symbol, FRACTIONS_DECIMALS, FRACTIONS_COUNT, _fractionPrice, _listing.paymentToken, 0, _duration, _fee);\n\t}\n\n\tfunction _balanceOf(address _token) internal view returns (uint256 _balance)\n\t{\n\t\tif (_token == address(0)) {\n\t\t\treturn address(this).balance;\n\t\t} else {\n\t\t\treturn IERC20(_token).balanceOf(address(this));\n\t\t}\n\t}\n\n\tfunction _safeTransfer(address _token, address payable _to, uint256 _amount) internal\n\t{\n\t\tif (_token == address(0)) {\n\t\t\t_to.transfer(_amount);\n\t\t} else {\n\t\t\tIERC20(_token).safeTransfer(_to, _amount);\n\t\t}\n\t}\n\n\tfunction _safeTransferFrom(address _token, address payable _from, uint256 _value, address payable _to, uint256 _amount) internal\n\t{\n\t\tif (_token == address(0)) {\n\t\t\trequire(_value == _amount, \"invalid value\");\n\t\t\tif (_to != address(this)) _to.transfer(_amount);\n\t\t} else {\n\t\t\trequire(_value == 0, \"invalid value\");\n\t\t\tIERC20(_token).safeTransferFrom(_from, _to, _amount);\n\t\t}\n\t}\n\n\tevent AddFractionalizer(bytes32 indexed _type, address indexed _fractionalizer);\n\tevent Listed(uint256 indexed _listingId);\n\tevent Sold(uint256 indexed _listingId);\n\tevent Relisted(uint256 indexed _listingId);\n\tevent Canceled(uint256 indexed _listingId);\n\tevent UpdatePrice(uint256 indexed _listingId, uint256 _oldReservePrice, uint256 _oldLimitPrice, uint256 _newReservePrice, uint256 _newLimitPrice);\n\tevent Join(uint256 indexed _listingId, address indexed _buyer, uint256 _amount);\n\tevent Leave(uint256 indexed _listingId, address indexed _buyer, uint256 _amount);\n\tevent Payout(uint256 indexed _listingId, address indexed _seller, uint256 _netAmount, uint256 _feeAmount);\n\tevent Claim(uint256 indexed _listingId, address indexed _buyer, uint256 _amount, uint256 _fractionsCount);\n}"}}}