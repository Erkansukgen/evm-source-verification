{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/lbp/GUniAddLiquidity.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface GUniRouter {\n  function addLiquidity(\n    address pool,\n    uint256 amount0Max,\n    uint256 amount1Max,\n    uint256 amount0Min,\n    uint256 amount1Min,\n    address receiver\n  )\n    external\n    returns (\n      uint256 amount0,\n      uint256 amount1,\n      uint256 mintAmount\n    );\n}\n\ncontract GUniAddLiquidity {\n  address public constant GUNI_ROUTER = 0x14E6D67F824C3a7b4329d3228807f8654294e4bd;\n  address public constant POP = 0xD0Cd466b34A24fcB2f87676278AF2005Ca8A78c4;\n  address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n  address public constant POOL = 0xBBA11b41407dF8793A89b44ee4b50AfAD4508555;\n\n  uint256 public popLiquidity = 0;\n  uint256 public usdcLiquidity = 0;\n  uint256 public minPopLiquidity = 0;\n  uint256 public minUsdcLiquidity = 0;\n\n  address public immutable dao;\n  address public immutable admin;\n\n  constructor(address _admin, address _dao) {\n    admin = _admin;\n    dao = _dao;\n  }\n\n  function setLiquidity(\n    uint256 _popLiquidity,\n    uint256 _usdcLiquidity,\n    uint256 _minPopLiquidity,\n    uint256 _minUsdcLiquidity\n  ) public {\n    require(msg.sender == admin, \"Sender must be admin\");\n    require(_popLiquidity <= 750_000e18, \"POP liquidity must not exceed maximum\");\n    require(_usdcLiquidity <= 2_000_000e6, \"USDC liquidity must not exceed maximum\");\n    require(_minPopLiquidity <= _popLiquidity, \"min pop liquidity must be less than pop liquidity\");\n    require(_minUsdcLiquidity <= _usdcLiquidity, \"min usdc liquidity must be less than usdc liquidity\");\n\n    popLiquidity = _popLiquidity;\n    usdcLiquidity = _usdcLiquidity;\n    minPopLiquidity = _minPopLiquidity;\n    minUsdcLiquidity = _minUsdcLiquidity;\n  }\n\n  function addLiquidity() public {\n    require(IERC20(POP).transferFrom(msg.sender, address(this), popLiquidity), \"Transfer of POP must succeed\");\n    require(IERC20(USDC).transferFrom(msg.sender, address(this), usdcLiquidity), \"Transfer of USDC must succeed\");\n    IERC20(POP).approve(GUNI_ROUTER, popLiquidity);\n    IERC20(USDC).approve(GUNI_ROUTER, usdcLiquidity);\n    GUniRouter(GUNI_ROUTER).addLiquidity(POOL, usdcLiquidity, popLiquidity, minUsdcLiquidity, minPopLiquidity, dao);\n  }\n}\n"
    }
  }
}