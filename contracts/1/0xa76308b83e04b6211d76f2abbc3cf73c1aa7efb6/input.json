{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"lpstaking.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract FeeTokenLpStaking is Ownable { \n    IERC20 public immutable FeeToken;\n    IERC20 public immutable FeeTokenLpPair;\n    uint256 public totalStakedAmount;\n    uint256 public rewardsPool;\n    uint256 public rewardsPerBlock;\n\n    mapping(address /* Account */ => Stake /* Stake details */) public stakes;\n\n    event STAKE(address indexed account, uint256 indexed amount);\n    event UNSTAKE(address indexed account, uint256 indexed amount);\n    event REWARDS_CLAIMED(address indexed account, uint256 indexed rewards);\n    event REWARDS_POOL(address indexed account, uint256 amount);\n    event REWARDS_PER_BLOCK(uint256 oldRewardsPerBlock, uint256 newRewardsPerBlock);\n\n\n    struct Stake {\n        address user;\n        uint256 amount;\n        uint256 rewardsBlockNumber;\n        uint256 totalClaimedRewards;\n    }\n\n    constructor(IERC20 _feeToken, IERC20 _feeTokenLpAddress) {\n        FeeToken = _feeToken;\n        FeeTokenLpPair = _feeTokenLpAddress;\n        rewardsPerBlock = 10 ether;\n    }\n\n    function deposit(uint256 _amount) external {\n        FeeToken.transferFrom(_msgSender(), address(this), _amount);\n        rewardsPool += _amount;\n        emit REWARDS_POOL(_msgSender(), _amount);\n    }\n\n    function withdraw(uint256 _amount) external onlyOwner {\n        require(_amount <= rewardsPool, \"FeeTokenStaking: amount exceed rewardsPool\");\n        rewardsPool -= _amount;\n        FeeToken.transfer(_msgSender(), _amount);\n    }\n\n    function updateRewardsPerBlock(uint256 _rewardsPerBlock) external onlyOwner {\n        emit REWARDS_PER_BLOCK(rewardsPerBlock, _rewardsPerBlock);\n        rewardsPerBlock = _rewardsPerBlock;\n    }\n\n    function stake(uint256 _amount) external {\n        require(_amount > 0, \"FeeTokenStaking: Amount must be greater than zero\");\n\n        FeeTokenLpPair.transferFrom(_msgSender(), address(this), _amount);\n        totalStakedAmount += _amount;\n\n        stakes[_msgSender()] = Stake(\n            _msgSender(),\n            stakes[_msgSender()].amount + _amount,\n            block.number,\n            stakes[_msgSender()].totalClaimedRewards\n        );\n\n        emit STAKE(_msgSender(), _amount);\n    }\n\n    function unstake() external {\n        uint256 _amount = stakes[_msgSender()].amount;\n        require(_amount > 0, \"FeeTokenStaking: No active stakes found\");\n        _claimRewards(); // claim stake rewards\n        _unstake(_amount);\n    }\n\n    function emergencyUnStake() external {\n        uint256 _amount = stakes[_msgSender()].amount;\n        require(_amount > 0, \"FeeTokenStaking: No active stakes found\");\n        _unstake(_amount);\n    }\n\n    function _unstake(uint256 _amount) private {\n        Stake storage _stake = stakes[_msgSender()];\n\n        totalStakedAmount -= _amount;\n        _stake.amount -= _amount;\n        FeeTokenLpPair.transfer(_msgSender(), _amount);\n        emit UNSTAKE(_msgSender(), _amount);\n    }\n\n    function claimRewards() external {\n        require(stakes[_msgSender()].amount > 0, \"FeeTokenStaking: No active stakes found\");\n        _claimRewards();\n    }\n\n\n    function pendingRewards(address _account) public view returns(uint256 _rewardsAmount) {\n        uint256 _stakedBalance = stakes[_account].amount;\n        if(_stakedBalance <= 0) return 0;\n\n        uint256 _startRewardsBlock = stakes[_account].rewardsBlockNumber;\n        uint256 _currentBlock = block.number;\n        uint256 _totalStakedBlock = _currentBlock - _startRewardsBlock;\n        uint256 _stakePercentage = (_stakedBalance * 100) / totalStakedAmount;\n        uint256 _rewardsPerBlock = (rewardsPerBlock * _stakePercentage) / 100;\n        _rewardsAmount = _totalStakedBlock * _rewardsPerBlock;\n    }\n\n    function _claimRewards() private {\n        uint256 _rewardsAmount = pendingRewards(_msgSender());\n\n        stakes[_msgSender()].rewardsBlockNumber = block.number; // update rewardsBlockNumber\n        stakes[_msgSender()].totalClaimedRewards += _rewardsAmount;\n\n        rewardsPool -= _rewardsAmount;\n        FeeToken.transfer(_msgSender(), _rewardsAmount);\n        emit REWARDS_CLAIMED(_msgSender(), _rewardsAmount);\n    }\n\n}"}}}