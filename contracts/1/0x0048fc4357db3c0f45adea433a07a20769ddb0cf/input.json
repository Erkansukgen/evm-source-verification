{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DssBlow.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface DaiLike {\r\n    function balanceOf(address) external returns (uint256);\r\n    function approve(address usr, uint wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n}\r\n    \r\ninterface DaiJoinLike {\r\n    function dai() external view returns (address);\r\n    function join(address, uint256) external;\r\n}\r\n\r\ncontract DssBlow {\r\n    DaiJoinLike public immutable daiJoin;\r\n    DaiLike     public immutable dai;\r\n    address     public immutable vow;\r\n\r\n    // --- Events ---\r\n    event Blow(uint256 amount);\r\n\r\n    // --- Init ---\r\n    constructor(address daiJoin_, address vow_) public { \r\n        daiJoin = DaiJoinLike(daiJoin_);\r\n        dai = DaiLike(DaiJoinLike(daiJoin_).dai());\r\n        vow = vow_;\r\n        DaiLike(DaiJoinLike(daiJoin_).dai()).approve(daiJoin_, uint256(-1));\r\n    }\r\n\r\n    // `join` Dai deposited in this contract to the `vow`\r\n    function blow() public {\r\n        uint256 balance = dai.balanceOf(address(this));\r\n        daiJoin.join(vow, balance);\r\n        emit Blow(balance);\r\n    }\r\n\r\n    // `join` `wad` amount of Dai from your wallet to the `vow`. Requires Dai approval of this contract.\r\n    function blow(uint256 wad) public {\r\n        dai.transferFrom(msg.sender, address(this), wad);\r\n        daiJoin.join(vow, wad);\r\n        emit Blow(wad);\r\n    }\r\n}"
    }
  }
}