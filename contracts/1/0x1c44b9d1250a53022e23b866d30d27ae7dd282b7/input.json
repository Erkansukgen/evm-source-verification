{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/sniper.sol":{"content":"// File: node_modules\\@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\SniperChi.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n\r\ninterface ICHI {\r\n    // function freeFromUpTo(address from, uint256 value) external returns (uint256);\r\n    function freeUpTo(uint256 value) external returns (uint256);\r\n}\r\n\r\ncontract SniperChi {\r\n    using SafeMath for uint256;\r\n    address payable public manager;\r\n    // uint256 public buyAmt;\r\n    ICHI public chi;\r\n\r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 *\r\n                        msg.data.length;\r\n        chi.freeUpTo((gasSpent + 14154) / 41947);\r\n    }\r\n\r\n    mapping (address => bool) whitelistedAddresses;\r\n    // address private whitelistedAddresses[];\r\n    IUniswapV2Router02 router;\r\n\r\n    receive() external payable {\r\n        // emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == manager, \"manager allowed only\");\r\n        _;\r\n    }\r\n    modifier whitelisted() {\r\n        require(whitelistedAddresses[msg.sender] == true || msg.sender == manager, \"not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _router, address _chi) public {\r\n        manager = msg.sender;\r\n        router = IUniswapV2Router02(_router);\r\n        chi = ICHI(_chi);\r\n    }\r\n    function setRouter(address _router) external whitelisted {\r\n        router = IUniswapV2Router02(_router);\r\n    }\r\n\r\n    event TestAmt(uint256 inAmt, uint256 expectedOutAmt, uint256 outAmt, uint256 i);\r\n\r\n    function buyMulti(uint256 bnbAmtToBuy, uint256 tokenPerBuy, address[] memory path, address[] memory recipients) external discountCHI whitelisted {    \r\n        // address[] memory path = new address[](2);\r\n        // path[0] = router.WETH();\r\n        // path[1] = tok;\r\n        for (uint i = 0; i < recipients.length; i++){\r\n\r\n            try router.swapETHForExactTokens{value: bnbAmtToBuy}(\r\n                tokenPerBuy,\r\n                path,\r\n                recipients[i],\r\n                block.timestamp\r\n            ){\r\n                if (address(this).balance < bnbAmtToBuy){\r\n                    break;\r\n                }\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n\r\n \r\n    }\r\n\r\n\r\n    function buyLoop(uint256 buyAmt, uint256 maxSpent, address[] memory path, uint256 amtReceived, bool fee) external discountCHI whitelisted {\r\n        \r\n        uint256 bal = address(this).balance;\r\n\r\n        // find amount to buy.\r\n        uint256 loopIndex = 1;\r\n        uint256 actualBuyAmtFinal = 0;\r\n        for (uint256 actualBuyAmt = buyAmt; actualBuyAmt <= maxSpent; actualBuyAmt += buyAmt){\r\n            if (actualBuyAmt > bal){\r\n                break;\r\n            }\r\n            uint256 expectedAmtReceived = amtReceived.mul(loopIndex);\r\n            uint256 testAmount = (router.getAmountsOut(actualBuyAmt, path))[path.length - 1];\r\n            emit TestAmt(actualBuyAmt, expectedAmtReceived, testAmount, loopIndex);\r\n\r\n            if (testAmount < expectedAmtReceived){\r\n                break;\r\n            }\r\n\r\n            actualBuyAmtFinal = actualBuyAmt;\r\n\r\n            loopIndex += 1;\r\n        }\r\n        // require(actualBuyAmtFinal > 0, \"price too high\");\r\n        if (actualBuyAmtFinal > 0){\r\n            if (fee){\r\n                router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: actualBuyAmtFinal}(\r\n                    amtReceived,\r\n                    path,\r\n                    manager,\r\n                    block.timestamp\r\n                );\r\n            }else {\r\n                router.swapExactETHForTokens{value: actualBuyAmtFinal}(\r\n                    amtReceived,\r\n                    path,\r\n                    manager,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n    function buy(uint256 buyAmt, address[] memory path, uint256 amtReceived, bool fee, bool test) external discountCHI whitelisted {\r\n        // address[] memory path = new address[](2);\r\n        // path[0] = router.WETH();\r\n        // path[1] = tok;\r\n        require(address(this).balance >= buyAmt,\"bo\");\r\n\r\n        require((router.getAmountsOut(buyAmt, path))[path.length - 1] >= amtReceived, \"amt\");\r\n        if (fee){\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: buyAmt}(\r\n                amtReceived,\r\n                path,\r\n                (test ? address(this) : manager),\r\n                block.timestamp\r\n            );\r\n        }else {\r\n            router.swapExactETHForTokens{value: buyAmt}(\r\n                amtReceived,\r\n                path,\r\n                (test ? address(this) : manager),\r\n                block.timestamp\r\n            );\r\n\r\n        }\r\n\r\n        if (test){\r\n            // test honeypot\r\n            IERC20 erc = IERC20(path[1]);\r\n\r\n            uint256 bal = erc.balanceOf(address(this));\r\n            require(bal > 0, \"b=0\");\r\n\r\n\r\n            uint256 amtToSell = bal.div(33);\r\n\r\n            erc.approve(\r\n                address(router),\r\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n            );\r\n\r\n\r\n            testsell(path[1], amtToSell, buyAmt.div(50)); // at least get back 2% of my buy amt by selling 3%.\r\n            \r\n            uint256 amtRemaining = bal.sub(amtToSell);\r\n            erc.transfer(manager, amtRemaining);\r\n\r\n        }\r\n\r\n\r\n        // emit Bought(amts[1]);\r\n    }\r\n\r\n    function testsell(address tok, uint256 amt, uint256 minReceive) internal {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = tok;\r\n        path[1] = router.WETH();\r\n        uint256 b1 = address(this).balance;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amt, minReceive, path, address(this), block.timestamp);\r\n        uint256 b2 = address(this).balance;\r\n        require(b2 > b1);\r\n\r\n\r\n    }\r\n\r\n    function kill() external restricted {\r\n        selfdestruct(manager);\r\n    }\r\n\r\n    // function approve(address _token, address payable _uni) external restricted {\r\n    //     IERC20 token = IERC20(_token);\r\n    //     token.approve(\r\n    //         _uni,\r\n    //         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n    //     );\r\n    // }\r\n    function drainEth() external restricted {\r\n        uint256 b = address(this).balance;\r\n        manager.send(b);\r\n    }\r\n\r\n    function drainToken(IERC20 _token) external restricted {\r\n        IERC20 token = IERC20(_token);\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        token.transfer(manager, tokenBalance);\r\n    }\r\n\r\n    function sendEth(address payable dest) payable external whitelisted{\r\n        dest.send(msg.value);\r\n    }\r\n    function setWhitelist(address[] memory addresses) external discountCHI restricted {\r\n        for (uint i=0; i < addresses.length; i++) {\r\n            whitelistedAddresses[addresses[i]] = true;\r\n        }\r\n\r\n    }\r\n    function isWhitelist(address a) view external returns (bool isW){\r\n        return whitelistedAddresses[a];\r\n    }\r\n}\r\n"}}}