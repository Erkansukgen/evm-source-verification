{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/tete_dhistrion.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Artiox{\n    mapping(address => uint256) private _balances;\n    string private _name;\n    string private _symbol;\n    address private _owner;\n    uint256 private _totalSupply;\n    uint256 private _lockedSupply;\n    uint256 private _releaseTime;\n\n    constructor(string memory name_, string memory symbol_, uint256 totalSupply_, uint256 lockedSupply_, uint256 releaseTime_) {\n        _name = name_;\n        _symbol = symbol_;\n        _owner = msg.sender;\n        require(lockedSupply_ <= totalSupply_, \"Locked supply can't be greater than total supply\");\n        _lockedSupply = lockedSupply_ * 10 ** decimals();\n        _mint(msg.sender, totalSupply_ * 10 ** decimals());\n        require(releaseTime_ >= block.timestamp, \"New release time is before current time\");\n        _releaseTime = releaseTime_;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 2;\n    }\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n    function lockedSupply() public view returns (uint256) {\n        return _lockedSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function releaseTime() public view returns (uint256) {\n        return _releaseTime;\n    }\n    \n    function setReleaseTime(uint256 releaseTime_) public returns (bool) {\n        require(msg.sender == owner(), \"Only contract owner can set release time\");\n        require(block.timestamp >= releaseTime(), \"Current time is before release time\");\n        require(releaseTime_ >= block.timestamp, \"New release time is before current time\");\n        _releaseTime = releaseTime_;\n        return true;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n    \n    function lock(uint256 amount) public returns (bool) {\n        require(msg.sender == owner(), \"Only contract owner can lock tokens\");\n        require(balanceOf(msg.sender) - lockedSupply() >= amount, \"Lock amount exceeds balance\");\n        _lockedSupply += amount;\n        return true;\n    }\n    \n    function release(uint256 amount) public returns (bool) {\n        require(msg.sender == owner(), \"Only contract owner can release tokens\");\n        require(block.timestamp >= releaseTime(), \"Current time is before release time\");\n        require(lockedSupply() >= amount, \"Release amount exceeds locked balance\");\n        _lockedSupply -= amount;\n        return true;\n    }\n\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        if (msg.sender == owner()){\n            require(balanceOf(msg.sender) - lockedSupply() >= amount, \"Can't transfer locked tokes\");\n            _transfer(msg.sender, recipient, amount);\n        }\n        else{\n            _transfer(msg.sender, recipient, amount);\n        }\n        return true;\n    }\n    \n    function burn(uint256 amount) public {\n        if (msg.sender == owner()){\n            require(balanceOf(msg.sender) - lockedSupply() >= amount, \"Can't burn locked tokes\");\n            _burn(msg.sender, amount);\n        }\n        else{\n            _burn(msg.sender, amount);\n        }\n    }\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"Transfer from the zero address\");\n        require(recipient != address(0), \"Transfer to the zero address\");\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"Transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"Mint to the zero address\");\n        \n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"Burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"Burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n}\n\ncontract Tete_dHistrion is Artiox{\n    constructor() Artiox(\"Tete dHistrion, Picasso Pablo\", \"TETE\", 250000, 0, block.timestamp + 1 days) {}\n}"}}}