{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/frontrunme.sol": {
      "content": "//SPDX-License-Identifier: unlicensed\r\npragma solidity ^0.6.10;\r\n\r\n\r\ncontract FrontRunMe {\r\n    \r\n    uint256 public secretHash;\r\n    \r\n    constructor(uint256 secretHashInput) public payable {\r\n        secretHash = secretHashInput;\r\n    }\r\n    \r\n    event somethingHappened(address cunt, string whatHappened);\r\n    \r\n    function take(uint256 secret) external {\r\n        if(secret == secretHash){\r\n            uint256 myBalance = address(this).balance;\r\n            address payable temp = payable(msg.sender);\r\n            temp.transfer(myBalance);\r\n            emit somethingHappened(msg.sender, \"won\");\r\n        } else {\r\n            emit somethingHappened(msg.sender, \"lost\");\r\n        }\r\n    }\r\n    \r\n}"
    }
  }
}