{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled.sol":{"content":"abstract contract TokenManager {\n    \n    address constant COMPOUND_DEPOSIT_ADDRESS = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\n    address constant Y_DEPOSIT_ADDRESS      = 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\n    address constant BUSD_DEPOSIT_ADDRESS   = 0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB;\n    address constant PAX_DEPOSIT_ADDRESS    = 0xA50cCc70b6a011CffDdf45057E39679379187287;\n    address constant REN_DEPOSIT_ADDRESS    = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\n    address constant SBTC_DEPOSIT_ADDRESS   = 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;\n    address constant HBTC_DEPOSIT_ADDRESS   = 0x4CA9b3063Ec5866A4B82E437059D2C43d1be596F;\n    \n    address constant SWERVE_DEPOSIT_ADDRESS     = 0x329239599afB305DA0A2eC69c58F8a6697F9F88d;\n\n\n    address constant COMPOUND_TOKEN_ADDRESS     = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\n    address constant Y_TOKEN_ADDRESS        = 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\n    address constant BUSD_TOKEN_ADDRESS         = 0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B;\n    address constant PAX_TOKEN_ADDRESS      = 0xD905e2eaeBe188fc92179b6350807D8bd91Db0D8;\n    address constant REN_TOKEN_ADDRESS      = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\n    address constant SBTC_TOKEN_ADDRESS         = 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\n    address constant HBTC_TOKEN_ADDRESS         = 0xb19059ebb43466C323583928285a49f558E572Fd;\n    address constant SRW_TOKEN_ADDRESS      = 0x77C6E4a580c0dCE4E5c7a17d0bc077188a83A059;\n    \n\n    address constant COMPOUND_GAUGE_ADDRESS     = 0x7ca5b0a2910B33e9759DC7dDB0413949071D7575;\n    address constant Y_GAUGE_ADDRESS        = 0xFA712EE4788C042e2B7BB55E6cb8ec569C4530c1;\n    address constant BUSD_GAUGE_ADDRESS         = 0x69Fb7c45726cfE2baDeE8317005d3F94bE838840;\n    address constant PAX_GAUGE_ADDRESS      = 0x64E3C23bfc40722d3B649844055F1D51c1ac041d;\n    address constant REN_GAUGE_ADDRESS      = 0xB1F2cdeC61db658F091671F5f199635aEF202CAC;\n    address constant SBTC_GAUGE_ADDRESS         = 0x705350c4BcD35c9441419DdD5d2f097d7a55410F;\n    address constant SWERVE_GAUGE_ADDRESS   = 0xb4d0C929cD3A1FbDc6d57E7D3315cF0C4d6B4bFa;\n    address constant HBTC_GAUGE_ADDRESS         = 0x4c18E409Dc8619bFb6a1cB56D114C3f592E0aE79;\n\n    address constant CRV_TOKEN_MINTER_ADDRESS   = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n    address constant SWERVE_TOKEN_MINTER_ADDRESS = 0x2c988c3974AD7E604E276AE0294a7228DEf67974;\n    \n    address constant CRV_TOKEN_ADDRESS      = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n    address constant SWERVE_TOKEN_ADDRESS   = 0xB8BAa0e4287890a5F79863aB62b7F175ceCbD433;\n    \n\n    address constant VOTING_ESCROW          = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;\n    \n    address constant EXCHANGE_CONTRACT  = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\n    address constant ETH_ADDRESS        = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address constant DAI_ADDRESS        = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address constant WBTC_ADDRESS        = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    \n    address constant USDC_ADDRESS        = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address constant USDT_ADDRESS        = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address constant TUSD_ADDRESS        = 0x0000000000085d4780B73119b644AE5ecd22b376;\n    \n    mapping(address => address[]) public supportAddresses;\n    \n    function getSupportAddresses(address _depositAddress) public view returns(address[] memory){\n        return supportAddresses[_depositAddress];\n    }\n    \n    \n    constructor() public {\n        \n        supportAddresses[COMPOUND_DEPOSIT_ADDRESS].push(COMPOUND_TOKEN_ADDRESS);\n        supportAddresses[COMPOUND_DEPOSIT_ADDRESS].push(COMPOUND_GAUGE_ADDRESS);\n        \n        supportAddresses[Y_DEPOSIT_ADDRESS].push(Y_TOKEN_ADDRESS);\n        supportAddresses[Y_DEPOSIT_ADDRESS].push(Y_GAUGE_ADDRESS);\n        \n        supportAddresses[BUSD_DEPOSIT_ADDRESS].push(BUSD_TOKEN_ADDRESS);\n        supportAddresses[BUSD_DEPOSIT_ADDRESS].push(BUSD_GAUGE_ADDRESS);\n        \n        supportAddresses[PAX_DEPOSIT_ADDRESS].push(PAX_TOKEN_ADDRESS);\n        supportAddresses[PAX_DEPOSIT_ADDRESS].push(PAX_GAUGE_ADDRESS);\n        \n        supportAddresses[REN_DEPOSIT_ADDRESS].push(REN_TOKEN_ADDRESS);\n        supportAddresses[REN_DEPOSIT_ADDRESS].push(REN_GAUGE_ADDRESS);\n        \n        supportAddresses[SBTC_DEPOSIT_ADDRESS].push(SBTC_TOKEN_ADDRESS);\n        supportAddresses[SBTC_DEPOSIT_ADDRESS].push(SBTC_GAUGE_ADDRESS);\n        \n        supportAddresses[HBTC_DEPOSIT_ADDRESS].push(HBTC_TOKEN_ADDRESS);\n        supportAddresses[HBTC_DEPOSIT_ADDRESS].push(HBTC_GAUGE_ADDRESS);\n        \n        supportAddresses[SWERVE_DEPOSIT_ADDRESS].push(SRW_TOKEN_ADDRESS);\n        supportAddresses[SWERVE_DEPOSIT_ADDRESS].push(SWERVE_GAUGE_ADDRESS);\n        \n    }\n}\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\ncontract PoolToken is ERC20 {\n    address public owner;\n    address public poolManager;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() public ERC20(\"PRJ Token BTC\", \"PRJ BTC\") {\n        owner = msg.sender;\n    }\n    \n    function setPoolManager(address _newManagerAddress) public onlyOwner {\n        poolManager = _newManagerAddress;\n    }\n    \n    function mint(address account, uint amount) public {\n        require(msg.sender == poolManager);\n        _mint(account, amount);\n    }\n    \n    function burn(address account, uint256 amount) public {\n        require(msg.sender == poolManager);\n         _burn(account, amount);\n    }\n}\n\nabstract contract IOneSplitView {\n    // disableFlags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_KYBER + ...\n    uint256 public constant FLAG_DISABLE_UNISWAP = 0x01;\n    uint256 public constant FLAG_DISABLE_KYBER = 0x02;\n    uint256 public constant FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\n    uint256 public constant FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\n    uint256 public constant FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\n    uint256 public constant FLAG_DISABLE_BANCOR = 0x04;\n    uint256 public constant FLAG_DISABLE_OASIS = 0x08;\n    uint256 public constant FLAG_DISABLE_COMPOUND = 0x10;\n    uint256 public constant FLAG_DISABLE_FULCRUM = 0x20;\n    uint256 public constant FLAG_DISABLE_CHAI = 0x40;\n    uint256 public constant FLAG_DISABLE_AAVE = 0x80;\n    uint256 public constant FLAG_DISABLE_SMART_TOKEN = 0x100;\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Turned off by default\n    uint256 public constant FLAG_DISABLE_BDAI = 0x400;\n    uint256 public constant FLAG_DISABLE_IEARN = 0x800;\n    uint256 public constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\n    uint256 public constant FLAG_DISABLE_CURVE_USDT = 0x2000;\n    uint256 public constant FLAG_DISABLE_CURVE_Y = 0x4000;\n    uint256 public constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Turned off by default\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Turned off by default\n    uint256 public constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\n    uint256 public constant FLAG_DISABLE_WETH = 0x80000;\n    uint256 public constant FLAG_ENABLE_UNISWAP_COMPOUND = 0x100000; // Works only with FLAG_ENABLE_MULTI_PATH_ETH\n\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 disableFlags\n    )\n        virtual\n        public\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution\n        );\n}\n\n\nabstract contract IOneSplit is IOneSplitView {\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] memory distribution,\n        uint256 disableFlags\n    ) virtual public payable;\n}\n\ncontract PoolFactoryProxy is TokenManager {\n    address public owner;\n    address public implementation;\n    \n    address public poolTokenAddress;\n    address public poolTokenBTCAddress;\n    address public poolProxy;\n    \n    mapping (address => address) public usersStablePools;\n    mapping (address => address) public usersBTCPools;\n    uint public totalBalance;\n    \n    mapping(bool => address) public bestBoost;\n    \n    \n    constructor(address _poolProxyAddress, address _poolTokenAddress, address _poolTokenBTCAddress, address _impl) public {\n        implementation = _impl;\n        poolProxy = _poolProxyAddress;\n        poolTokenAddress = _poolTokenAddress;\n        poolTokenBTCAddress = _poolTokenBTCAddress;\n        owner = msg.sender;\n    }\n\n    function setImplementation(address _newImpl) public {\n        require(msg.sender == owner);\n\n        implementation = _newImpl;\n    }\n   \n    fallback() virtual external {\n        address impl = implementation;\n        assembly {\n            let ptr := mload(0x40)\n \n            // (1) copy incoming call data\n            calldatacopy(ptr, 0, calldatasize())\n \n             // (2) forward call to logic contract\n            let result := delegatecall(gas(), impl, ptr, calldatasize(), 0, 0)\n            let size := returndatasize()\n \n            // (3) retrieve return data\n            returndatacopy(ptr, 0, size)\n \n            // (4) forward return data back to caller\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }   \n    }\n}\n\ncontract PoolFactory is TokenManager {\n    \n    address public owner;\n    address public implementation;\n    \n    address public poolTokenAddress;\n    address public poolTokenBTCAddress;\n    address public poolProxy;\n    \n    mapping (address => address) public usersStablePools;\n    mapping (address => address) public usersBTCPools;\n    uint public totalBalance;\n    \n    mapping(bool => address) public bestBoost;\n    \n    event NewPool(address indexed poolAddress, address indexed sender, bool isBTC);\n\n    modifier poolOnly(address userAddress) {\n        require(msg.sender == usersStablePools[userAddress] || msg.sender == usersBTCPools[userAddress]);\n        _;\n    }\n    \n    \n    function setPoolProxyAddress(address _newProxy) public {\n        require(msg.sender == owner);\n        poolProxy = _newProxy;\n    }\n    \n    function newStablePool() public {\n        require(usersStablePools[msg.sender] == address(0), \"pool already created\");\n        PoolProxy pool = new PoolProxy(msg.sender, false);\n        usersStablePools[msg.sender] = address(pool);\n        \n        emit NewPool(address(pool), msg.sender, false);\n    }\n    \n    function newBTCPool() public {\n        require(usersBTCPools[msg.sender] == address(0), \"pool already created\");\n        PoolProxy pool = new PoolProxy(msg.sender, true);\n        usersBTCPools[msg.sender] = address(pool);\n        \n        emit NewPool(address(pool), msg.sender, true);\n    }\n\n    function setBestBoost(address _newBestBoost, address _newBestBoostBTC) public {\n        require(msg.sender == owner);\n        bestBoost[false] = _newBestBoost;\n        bestBoost[true] = _newBestBoostBTC;\n    }\n    \n    function mint(address to, uint amount, bool isBTCPool) public poolOnly(to) {\n        if(isBTCPool) {\n            PoolToken(poolTokenBTCAddress).mint(to, amount);\n        } else {\n            PoolToken(poolTokenAddress).mint(to, amount);\n        }\n        \n    }\n    \n    function burn(address from, uint amount, bool isBTCPool) public poolOnly(from) {\n        if(isBTCPool) {\n            if (PoolToken(poolTokenBTCAddress).balanceOf(from) > amount) {\n                PoolToken(poolTokenBTCAddress).burn(from, amount);\n            } else {\n                PoolToken(poolTokenBTCAddress).burn(from, PoolToken(poolTokenBTCAddress).balanceOf(from));\n            }\n            \n        } else {\n            if (PoolToken(poolTokenAddress).balanceOf(from) > amount) {\n                PoolToken(poolTokenAddress).burn(from, amount);\n            } else {\n               PoolToken(poolTokenAddress).burn(from, PoolToken(poolTokenAddress).balanceOf(from));\n            }\n            \n        }\n    }\n}\n\ncontract Deposit2Tokens {\n    function add_liquidity(uint256[2] memory uamounts, uint256 min_mint_amount) public{}\n    \n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount, bool donate_dust) public{}\n    uint[100000000000000000000000000000] public period_timestamp;\n}\n\ncontract Deposit3Tokens {\n    function add_liquidity(uint256[3] memory uamounts, uint256 min_mint_amount) public{}\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount) public{}\n    uint[100000000000000000000000000000] public period_timestamp;\n}\n\nabstract contract Deposit4Tokens {\n    function add_liquidity(uint[4] memory uamounts, uint256 min_mint_amount) virtual public;\n    function remove_liquidity(uint256 _amount, uint256[4] memory min_amounts) public{}\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount, bool donate_dust) virtual public;\n    uint[100000000000000000000000000000] public period_timestamp;\n}\n\nabstract contract IGauge {\n  function deposit(uint256 _value) virtual public;\n  function withdraw(uint256 _value) virtual public;\n\n  mapping(address => uint) public balanceOf;\n}\n\n\nabstract contract TokenMinter {\n    function mint(address gauge_addr) virtual public;\n}\n\ncontract PoolProxy is TokenManager {\n    \n    address public owner;\n    address public poolFactoryAddress;\n    bool public isBTCPool;\n\n    constructor(address _owner, bool _isBTCPool) public {\n        poolFactoryAddress = msg.sender;\n        owner = _owner;\n        isBTCPool = _isBTCPool;\n    }\n\n    fallback() external payable {\n        address impl = implementation();\n        assembly {\n            let ptr := mload(0x40)\n \n            // (1) copy incoming call data\n            calldatacopy(ptr, 0, calldatasize())\n \n             // (2) forward call to logic contract\n            let result := delegatecall(gas(), impl, ptr, calldatasize(), 0, 0)\n            let size := returndatasize()\n \n            // (3) retrieve return data\n            returndatacopy(ptr, 0, size)\n \n            // (4) forward return data back to caller\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }   \n    }\n\n    function implementation() public view returns(address) {\n        return PoolFactory(poolFactoryAddress).poolProxy();\n    }\n}\n\ncontract Pool is TokenManager {\n    \n    address public owner;\n    address public poolFactoryAddress;\n    bool public isBTCPool;\n    \n    modifier onlyOwner() {\n        require (msg.sender == owner); \n        _; \n    }\n\n    function deposit(address tokenAddress, uint amount) public payable {\n        \n        address poolAddress = PoolFactory(poolFactoryAddress).bestBoost(isBTCPool);\n       \n        if (isBTCPool) {\n            _btcDeposit(poolAddress, tokenAddress, amount);\n            return;\n        }\n        \n        \n        if (msg.value > 0) {\n            _ethDeposit(poolAddress);\n            return;\n        }\n        \n        uint _amount = amount;\n        uint[] memory _distribution;\n\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n\n        if (tokenAddress != DAI_ADDRESS) {\n            IERC20(tokenAddress).approve(EXCHANGE_CONTRACT, amount);\n            (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(tokenAddress), IERC20(DAI_ADDRESS), amount, 100, 0);\n            IOneSplit(EXCHANGE_CONTRACT).swap(IERC20(tokenAddress), IERC20(DAI_ADDRESS), amount, _amount, _distribution, 0);\n        }\n\n        \n        (address lpTokenAddress, address gaugeAddress) = _deposit(poolAddress, _amount);\n        \n        PoolFactory(poolFactoryAddress).mint(msg.sender, IERC20(lpTokenAddress).balanceOf(address(this)), isBTCPool);\n\n        depositLPTokens(lpTokenAddress, gaugeAddress, IERC20(lpTokenAddress).balanceOf(address(this)));\n        \n        \n    }\n    \n    function _btcDeposit(address poolAddress, address tokenAddress, uint amount) internal {\n        uint _amount = amount;\n        uint[] memory _distribution;\n            \n        if (msg.value > 0) {\n            (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(ETH_ADDRESS), IERC20(WBTC_ADDRESS), msg.value, 100, 0);\n            IOneSplit(EXCHANGE_CONTRACT).swap.value(msg.value)(IERC20(ETH_ADDRESS), IERC20(WBTC_ADDRESS), msg.value, _amount, _distribution, 0);\n\n            uint wBTCamount = IERC20(WBTC_ADDRESS).balanceOf(address(this));\n            \n            (address lpTokenAddress, address gaugeAddress) = _deposit(poolAddress, _amount);\n            \n            uint lpAmount = IERC20(lpTokenAddress).balanceOf(address(this));\n            \n            \n            PoolFactory(poolFactoryAddress).mint(msg.sender, IERC20(lpTokenAddress).balanceOf(address(this)), isBTCPool);\n            depositLPTokens(lpTokenAddress, gaugeAddress, IERC20(lpTokenAddress).balanceOf(address(this)));\n            return;\n        }\n        \n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n\n        if (tokenAddress != WBTC_ADDRESS) {\n            IERC20(tokenAddress).approve(EXCHANGE_CONTRACT, amount);\n            (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(tokenAddress), IERC20(WBTC_ADDRESS), amount, 100, 0);\n            IOneSplit(EXCHANGE_CONTRACT).swap(IERC20(tokenAddress), IERC20(WBTC_ADDRESS), amount, _amount, _distribution, 0);\n        }\n\n        (address lpTokenAddress, address gaugeAddress) = _deposit(poolAddress, _amount);\n        \n        \n        PoolFactory(poolFactoryAddress).mint(msg.sender, IERC20(lpTokenAddress).balanceOf(address(this)), isBTCPool);\n        depositLPTokens(lpTokenAddress, gaugeAddress, IERC20(lpTokenAddress).balanceOf(address(this)));\n    }\n\n    function claimReward(address _depositAddress, bool isHarvest) public onlyOwner {\n        \n        address[] memory supAddresses = getSupportAddresses(_depositAddress); \n        if (supAddresses[1] == SWERVE_GAUGE_ADDRESS) {\n            TokenMinter(SWERVE_TOKEN_MINTER_ADDRESS).mint(supAddresses[1]);\n        } else {\n            TokenMinter(CRV_TOKEN_MINTER_ADDRESS).mint(supAddresses[1]);\n        }\n        \n        \n        uint swerveTokenBalance = IERC20(SWERVE_TOKEN_ADDRESS).balanceOf(address(this));\n        uint crvTokenBalance = IERC20(CRV_TOKEN_ADDRESS).balanceOf(address(this));\n        \n        if (isHarvest) {\n            uint _amount;\n            uint[] memory _distribution;\n            \n            if (swerveTokenBalance > 0) {\n                IERC20(SWERVE_TOKEN_ADDRESS).approve(EXCHANGE_CONTRACT, swerveTokenBalance);\n                (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(SWERVE_TOKEN_ADDRESS), IERC20(DAI_ADDRESS), swerveTokenBalance, 100, 0);\n                IOneSplit(EXCHANGE_CONTRACT).swap(IERC20(SWERVE_TOKEN_ADDRESS), IERC20(DAI_ADDRESS), swerveTokenBalance, _amount, _distribution, 0);\n            }\n            \n            if (crvTokenBalance > 0) {\n                IERC20(CRV_TOKEN_ADDRESS).approve(EXCHANGE_CONTRACT, crvTokenBalance);\n                (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(CRV_TOKEN_ADDRESS), IERC20(DAI_ADDRESS), crvTokenBalance, 100, 0);\n                IOneSplit(EXCHANGE_CONTRACT).swap(IERC20(CRV_TOKEN_ADDRESS), IERC20(DAI_ADDRESS), crvTokenBalance, _amount, _distribution, 0);\n            }\n            \n            uint daiBalance = IERC20(DAI_ADDRESS).balanceOf(address(this));\n            \n            if(daiBalance > 0) {\n                IERC20(DAI_ADDRESS).transfer(msg.sender, daiBalance);\n            }\n            \n            return;\n        }\n        \n        \n        if(swerveTokenBalance > 0) {\n            IERC20(SWERVE_TOKEN_ADDRESS).transfer(msg.sender, swerveTokenBalance);\n        }\n        \n        if(crvTokenBalance > 0) {\n            IERC20(CRV_TOKEN_ADDRESS).transfer(msg.sender, crvTokenBalance);\n        }\n    }\n\n    function exit(address _depositAddress, uint value) public onlyOwner {\n        claimReward(_depositAddress, false);\n       \n            \n        address[] memory supAddresses = getSupportAddresses(_depositAddress);\n          \n        require(IGauge(supAddresses[1]).balanceOf(address(this)) > 0);\n        \n        IGauge(supAddresses[1]).withdraw(IGauge(supAddresses[1]).balanceOf(address(this)));\n        \n        uint bal = IERC20(supAddresses[0]).balanceOf(address(this));\n        \n        require(bal > 0);\n        \n        PoolFactory(poolFactoryAddress).burn(msg.sender, bal, isBTCPool);\n            \n        IERC20(supAddresses[0]).approve(_depositAddress, bal);\n        if (!isBTCPool) {\n          if (_depositAddress == SWERVE_DEPOSIT_ADDRESS) {\n              uint[4] memory buf;\n              Deposit4Tokens(_depositAddress).remove_liquidity(bal, buf);\n          } else {\n                Deposit2Tokens(_depositAddress).remove_liquidity_one_coin(bal, 0, 1, true);\n          }\n        } else {\n            Deposit3Tokens(_depositAddress).remove_liquidity_one_coin(bal, 1, 1);\n           \n        }\n        \n        if (!isBTCPool) {\n            if(IERC20(DAI_ADDRESS).balanceOf(address(this)) > 0) {\n                IERC20(DAI_ADDRESS).transfer(msg.sender, IERC20(DAI_ADDRESS).balanceOf(address(this)));\n            }\n            \n            if(IERC20(USDC_ADDRESS).balanceOf(address(this)) > 0) {\n                IERC20(USDC_ADDRESS).transfer(msg.sender, IERC20(USDC_ADDRESS).balanceOf(address(this)));\n            }\n            \n            // if(IERC20(USDT_ADDRESS).balanceOf(address(this)) > 0) {\n            //     IERC20(USDT_ADDRESS).transfer(msg.sender, IERC20(USDT_ADDRESS).balanceOf(address(this)));\n            // }\n            \n            if(IERC20(TUSD_ADDRESS).balanceOf(address(this)) > 0) {\n                IERC20(TUSD_ADDRESS).transfer(msg.sender, IERC20(TUSD_ADDRESS).balanceOf(address(this)));\n            }\n        } else {\n            IERC20(WBTC_ADDRESS).transfer(msg.sender, IERC20(WBTC_ADDRESS).balanceOf(address(this)));\n        }\n        \n    }\n\n    function withdrawTokenFromContract(address tokenAddress, uint amount) public onlyOwner {\n        IERC20(tokenAddress).transfer(msg.sender, amount);\n    }\n    \n    function _ethDeposit(address poolAddress) private {\n        uint _amount;\n        uint[] memory _distribution;\n\n        (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(ETH_ADDRESS), IERC20(DAI_ADDRESS), msg.value, 100, 0);\n        IOneSplit(EXCHANGE_CONTRACT).swap.value(msg.value)(IERC20(ETH_ADDRESS), IERC20(DAI_ADDRESS), msg.value, _amount, _distribution, 0);\n\n        (address lpTokenAddress, address gaugeAddress) = _deposit(poolAddress, _amount);\n        \n        \n        PoolFactory(poolFactoryAddress).mint(msg.sender, IERC20(lpTokenAddress).balanceOf(address(this)), isBTCPool);\n        depositLPTokens(lpTokenAddress, gaugeAddress, IERC20(lpTokenAddress).balanceOf(address(this)));\n    }\n    \n    function depositLPTokens(address lpTokenAddress, address gaugeAddress, uint value) internal {\n        IERC20(lpTokenAddress).approve(gaugeAddress, value);\n        IGauge(gaugeAddress).deposit(value);\n    }\n\n    function _deposit(address _depositPool, uint amount) internal returns(address, address) {\n        IERC20(DAI_ADDRESS).approve(_depositPool, amount);\n\n        if(_depositPool == COMPOUND_DEPOSIT_ADDRESS) {\n            uint[2] memory uamounts;\n            uamounts[0] = amount;\n            Deposit2Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (COMPOUND_TOKEN_ADDRESS, COMPOUND_GAUGE_ADDRESS);\n        }\n        \n        if(_depositPool == Y_DEPOSIT_ADDRESS) {\n            uint[4] memory uamounts;\n            uamounts[0] = amount;\n            Deposit4Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (Y_TOKEN_ADDRESS, Y_GAUGE_ADDRESS);\n        }\n\n        if(_depositPool == BUSD_DEPOSIT_ADDRESS) {\n            uint[4] memory uamounts;\n            uamounts[0] = amount;\n            Deposit4Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (BUSD_TOKEN_ADDRESS, BUSD_GAUGE_ADDRESS);\n        }\n\n        if(_depositPool == PAX_DEPOSIT_ADDRESS) {\n            uint[4] memory uamounts;\n            uamounts[0] = amount;\n            Deposit4Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (PAX_TOKEN_ADDRESS, PAX_GAUGE_ADDRESS);\n        } \n\n        if(_depositPool == REN_DEPOSIT_ADDRESS) {\n            IERC20(WBTC_ADDRESS).approve(_depositPool, amount);\n            uint[2] memory uamounts;\n            uamounts[1] = amount;\n            Deposit2Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (REN_TOKEN_ADDRESS, REN_GAUGE_ADDRESS);\n        } \n\n        if(_depositPool == SBTC_DEPOSIT_ADDRESS) {\n            IERC20(WBTC_ADDRESS).approve(_depositPool, amount);\n            uint[3] memory uamounts;\n            uamounts[1] = amount;\n            Deposit3Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (SBTC_TOKEN_ADDRESS, SBTC_GAUGE_ADDRESS);\n        }\n        \n        if(_depositPool == HBTC_DEPOSIT_ADDRESS) {\n            IERC20(WBTC_ADDRESS).approve(_depositPool, amount);\n            uint[2] memory uamounts;\n            uamounts[1] = amount;\n            Deposit2Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (HBTC_TOKEN_ADDRESS, HBTC_GAUGE_ADDRESS);\n        }\n\n        if(_depositPool == SWERVE_DEPOSIT_ADDRESS) {\n            uint[4] memory uamounts;\n            uamounts[0] = amount;\n            Deposit4Tokens(_depositPool).add_liquidity(uamounts, 0);\n            return (SRW_TOKEN_ADDRESS, SWERVE_GAUGE_ADDRESS);\n        }\n    }\n}"}}}