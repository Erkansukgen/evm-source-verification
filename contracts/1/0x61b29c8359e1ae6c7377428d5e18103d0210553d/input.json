{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BundleExecutor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.12;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// This contract simply calls multiple targets sequentially, ensuring WETH balance before and after\r\n\r\ncontract FlashBotsMultiCall {\r\n    address private immutable owner;\r\n    address private immutable executor;\r\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == executor);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _executor) public payable {\r\n        owner = msg.sender;\r\n        executor = _executor;\r\n        if (msg.value > 0) {\r\n            WETH.deposit{value: msg.value}();\r\n        }\r\n    }\r\n\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function uniswapWeth(uint256 _wethAmountToFirstMarket, uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) external onlyExecutor payable {\r\n        require (_targets.length == _payloads.length);\r\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\r\n        WETH.transfer(_targets[0], _wethAmountToFirstMarket);\r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\r\n            require(_success); _response;\r\n        }\r\n\r\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\r\n        require(_wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase);\r\n        if (_ethAmountToCoinbase == 0) return;\r\n\r\n        uint256 _ethBalance = address(this).balance;\r\n        if (_ethBalance < _ethAmountToCoinbase) {\r\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\r\n        }\r\n        block.coinbase.transfer(_ethAmountToCoinbase);\r\n    }\r\n\r\n    function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {\r\n        require(_to != address(0));\r\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\r\n        require(_success);\r\n        return _result;\r\n    }\r\n    \r\n    function recoverERC20(address tokenAddress, address to) external onlyOwner {\r\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\r\n        TransferHelper.safeTransfer(tokenAddress, to, balance);\r\n    }\r\n\r\n    function recoverETH(address to) external onlyOwner {\r\n        TransferHelper.safeTransferETH(to, address(this).balance);\r\n    }\r\n}\r\n"
    }
  }
}