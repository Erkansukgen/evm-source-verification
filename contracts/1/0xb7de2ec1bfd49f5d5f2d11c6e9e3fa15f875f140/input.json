{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DFBTCPoolsLP.sol": {
      "content": "pragma solidity =0.6.6;\npragma experimental ABIEncoderV2;\n\nimport './interfaces/IUniswapV2Factory.sol';\nimport './libraries/TransferHelper.sol';\nimport './libraries/UniswapV2Library.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IDFBTCPoolsLPStakingPools.sol';\n\ncontract DFBTCPoolsLP {\n    using SafeMath for uint;\n    \n    struct UserSingleAssetsRecord {\n        address _tokenAddress;\n        uint _startTime;\n        uint _pledgeCycle;\n        uint _amount;\n        uint _hasTakeOut;\n        uint _beginDayCount;\n        bool _bFinished;\n    }\n    \n    struct UserDualAssetsRecord {\n        address _tokenAaddress;\n        address _tokenBaddress;\n        address _pairAddress;\n        uint _startTime;\n        uint _pledgeCycle;\n        uint _amountA;\n        uint _amountB;\n        uint _liquidity;\n        uint _hasTakeOut;\n        uint _beginDayCount;\n        bool _bFinished;\n    }\n    \n    mapping(address=>UserSingleAssetsRecord[]) public userSingleAmounts;\n    mapping(address=>UserDualAssetsRecord[]) public userDualAmounts;\n    mapping(address=>mapping(uint=>address[])) public tokenToUserList;\n    mapping(address=>mapping(uint=>mapping(uint=>uint))) public daysToTotal;\n    mapping(address=>mapping(uint=>uint)) public tokenToTime;\n    mapping(address=>mapping(uint=>uint)) public tokenToCycleToTotal;\n    mapping(address=>mapping(address=>mapping(uint=>uint))) public tokenToTokenToCycleToTotal;\n    \n    mapping(address=>uint) public tokenToUniswapMin;\n    mapping(address=>address) public tokenTotoken;\n    mapping(address=>uint) public tokenToPools;\n    \n    IDFBTCPoolsLPStakingPools public singleEarnings = IDFBTCPoolsLPStakingPools(0x2b9F8827B27EC792C3b0Ee28fBeF82c0943219f3);\n    mapping(uint=>bool) public pledgeCyclemap;\n\n    address public factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n    address public owner;\n    \n    uint public dayTakeout = 40;\n    uint public cycleWei = 1 days;\n    \n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'dfbtc: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\n        _;\n    }\n    \n    modifier onlyOnwer {\n        require(owner == msg.sender, \"dfbtc: The caller must be onwer!!!\");\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n        \n        pledgeCyclemap[30] = true;\n        pledgeCyclemap[90] = true;\n        pledgeCyclemap[180] = true;\n        pledgeCyclemap[360] = true;\n        \n        tokenToUniswapMin[0x060924FB947e37EEE230d0B1A71D9618aEc269fC] = 5000e18;\n        tokenToUniswapMin[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 5000e6;\n        \n        tokenTotoken[0x060924FB947e37EEE230d0B1A71D9618aEc269fC] = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n        tokenTotoken[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 0x060924FB947e37EEE230d0B1A71D9618aEc269fC;\n        \n        tokenToPools[0x060924FB947e37EEE230d0B1A71D9618aEc269fC] = 80;\n        tokenToPools[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 80;\n    }\n    \n    function setCycleWei(uint valin) public onlyOnwer {\n        cycleWei = valin;\n    }\n    \n    function setDayTakeout(uint valin) public onlyOnwer {\n        dayTakeout = valin;\n    }\n    \n    function setTokenToUniswapMin(address tokenAddress, uint minVal) public onlyOnwer {\n        tokenToUniswapMin[tokenAddress] = minVal;\n    }\n    \n    function setTokenToToken(address tokenA, address tokenB) public onlyOnwer {\n        tokenTotoken[tokenA] = tokenB;\n    }\n\n    function setTkenToPools(address tokenAddress, uint toPools) public onlyOnwer {\n        tokenToPools[tokenAddress] = toPools;\n    }\n    \n    function setCycle(uint _value, bool _bVal) public onlyOnwer {\n        pledgeCyclemap[_value] = _bVal;\n    }\n    \n    function setFactory(address newFactory) public onlyOnwer {\n        factory = newFactory;\n    }\n    \n    function setOwner(address newOwner) public onlyOnwer {\n        owner = newOwner;\n    }\n    \n    function setSingleEarnings(address contractAddress) public onlyOnwer {\n        singleEarnings = IDFBTCPoolsLPStakingPools(contractAddress);\n    }\n    \n    function bUserExit(address token, uint cycle, address user) public view returns(bool ret){\n        ret = false;\n        for(uint i=0; i<tokenToUserList[token][cycle].length; i++){\n            if(user == tokenToUserList[token][cycle][i]){\n                ret = true;\n                break;\n            }\n        }\n    }\n    \n    function addSingleAssets(address tokenAddress, uint pledgeCycle, uint amount) internal returns(bool){\n        require(amount>0, \"dfbtc: You have no assets!!!\");\n        require(IERC20(tokenAddress).balanceOf(msg.sender)>=amount, \"dfbtc: Insufficient quantity!!!\");\n        require(pledgeCyclemap[pledgeCycle], \"dfbtc: no this cycle!!!\");\n        \n        TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), amount);\n\n        if(tokenToTime[tokenAddress][pledgeCycle] == 0){\n            tokenToTime[tokenAddress][pledgeCycle] = now;\n        }\n        uint difcount = (now.sub(tokenToTime[tokenAddress][pledgeCycle])).div(cycleWei);\n        \n        UserSingleAssetsRecord memory record = UserSingleAssetsRecord({\n            _tokenAddress : tokenAddress,\n            _startTime : now,\n            _pledgeCycle : pledgeCycle,\n            _amount : amount,\n            _hasTakeOut : 0,\n            _beginDayCount : difcount,\n            _bFinished: false\n        });\n        userSingleAmounts[msg.sender].push(record);\n        tokenToCycleToTotal[tokenAddress][pledgeCycle] = tokenToCycleToTotal[tokenAddress][pledgeCycle].add(amount);\n        daysToTotal[tokenAddress][pledgeCycle][difcount] = tokenToCycleToTotal[tokenAddress][pledgeCycle];\n        \n        if(bUserExit(tokenAddress, pledgeCycle, msg.sender)==false){\n            tokenToUserList[tokenAddress][pledgeCycle].push(msg.sender);\n        }\n        return true;\n    }\n    \n    function addSingleAssetsToPools(address tokenAddress, uint pledgeCycle, uint amount) public lock returns(bool ret) {\n        ret = addSingleAssets(tokenAddress, pledgeCycle, amount);\n    }\n    \n    function addSingleAssetsAndToUniswap(address tokenAddress, uint pledgeCycle, uint amount) public lock returns(bool ret){\n        ret = addSingleAssets(tokenAddress, pledgeCycle, amount);\n        if(ret){\n            addAssetsToUniswap(tokenAddress,tokenTotoken[tokenAddress]);\n        }\n    }\n    \n    function addAssetsToUniswapPublic(address tokenA, address tokenB) public lock {\n        addAssetsToUniswap(tokenA, tokenB);\n    }\n    \n    function addAssetsToUniswap(address tokenA, address tokenB) internal {\n        if((IERC20(tokenA).balanceOf(address(this)).mul(tokenToPools[tokenA]).div(100))>=tokenToUniswapMin[tokenA] && IERC20(tokenB).balanceOf(address(this)).mul(tokenToPools[tokenB]).div(100)>=tokenToUniswapMin[tokenB]){\n            uint amountA = 0;\n            uint amountB = 0;\n            (amountA, amountB) = _addLiquidity(tokenA, tokenB, tokenToUniswapMin[tokenA], tokenToUniswapMin[tokenB], 10000, 1000);\n            addLiquidityFromPools(tokenA, tokenB, amountA, amountB, 10000, 1000, address(this), now);\n        }\n    }\n    \n    function addDualAssets(address tokenA, address tokenB, uint pledgeCycle, uint amountA, uint amountB, uint amountMinA, uint amountMinB) public lock returns(address pair, uint intoA, uint intoB, uint liquidity){\n        require(amountA>0 && amountB>0, \"dfbtc: You have no assets!!!\");\n        require(IERC20(tokenA).balanceOf(msg.sender)>=amountA, \"dfbtc: Insufficient quantity!!!\");\n        require(IERC20(tokenB).balanceOf(msg.sender)>=amountB, \"dfbtc: Insufficient quantity!!!\");\n        require(pledgeCyclemap[pledgeCycle], \"dfbtc: no this cycle!!!\");\n        \n        (pair,intoA,intoB,liquidity) = addLiquidity(tokenA, tokenB, amountA, amountB, amountMinA, amountMinB, address(this), now);\n        \n        if(tokenToTime[pair][pledgeCycle] == 0){\n            tokenToTime[pair][pledgeCycle] = now;\n        }\n        \n        uint difcount = (now.sub(tokenToTime[pair][pledgeCycle])).div(cycleWei);\n        \n        UserDualAssetsRecord memory record = UserDualAssetsRecord({\n            _tokenAaddress : tokenA,\n            _tokenBaddress : tokenB,\n            _pairAddress : pair,\n            _startTime : now,\n            _pledgeCycle : pledgeCycle,\n            _amountA : intoA,\n            _amountB : intoB,\n            _liquidity : liquidity,\n            _hasTakeOut : 0,\n            _beginDayCount : difcount,\n            _bFinished: false\n        });\n        \n        userDualAmounts[msg.sender].push(record);\n        tokenToTokenToCycleToTotal[pair][tokenA][pledgeCycle] = tokenToTokenToCycleToTotal[pair][tokenA][pledgeCycle] + intoA;\n        tokenToTokenToCycleToTotal[pair][tokenB][pledgeCycle] = tokenToTokenToCycleToTotal[pair][tokenB][pledgeCycle] + intoB;\n        \n        if(bUserExit(pair, pledgeCycle, msg.sender)==false){\n            tokenToUserList[pair][pledgeCycle].push(msg.sender);\n        }\n        \n        daysToTotal[pair][pledgeCycle][difcount] = tokenToTokenToCycleToTotal[pair][tokenA][pledgeCycle] + tokenToTokenToCycleToTotal[pair][tokenB][pledgeCycle];\n    }\n    \n    function takeOutSingleAssets(uint order) public lock returns(bool ret){\n        ret = takeOutSingleAssetsInternal(order);\n        if(ret){\n            removeLiquidityFromSingleLP(order);\n        }\n    }\n    \n    function takeOutStakingSingleAssets(uint order) public lock returns(bool ret){\n        ret = takeOutSingleAssetsInternal(order);\n    }\n    \n    function takeOutSingleAssetsInternal(uint order) internal returns(bool){\n        require(userSingleAmounts[msg.sender].length>order, \"dfbtc: You have not this order!!!\");\n        require(userSingleAmounts[msg.sender][order]._bFinished == false, \"dfbtc: You have no assets!!!\");\n        \n        uint totalAom = calSingleEaningsByUserIndex(msg.sender, order);\n        require(totalAom>0, \"dfbtc: You have no assets!!!\");\n        \n        uint hasDays = (now.sub(userSingleAmounts[msg.sender][order]._startTime)).div(cycleWei);\n        \n        bool isEnd = hasDays>userSingleAmounts[msg.sender][order]._pledgeCycle ? true : false;\n        \n        uint remainingAom = 0;\n        if(isEnd){\n            remainingAom = totalAom.sub(userSingleAmounts[msg.sender][order]._hasTakeOut);\n        }else{\n            remainingAom = totalAom.mul(dayTakeout).div(100).sub(userSingleAmounts[msg.sender][order]._hasTakeOut);\n        }\n        \n        require(remainingAom>0, \"dfbtc: You have no assets!!!\");\n        userSingleAmounts[msg.sender][order]._hasTakeOut = remainingAom.add(userSingleAmounts[msg.sender][order]._hasTakeOut);\n       \n        singleEarnings.safeTransferAomToUser(msg.sender, remainingAom);\n        \n        return isEnd;\n    }\n    \n    function takeOutDualAssets(uint order) public lock returns(bool ret){\n        ret = takeOutDualAssetsInternal(order);\n        if(ret){\n            removeLiquidityFromDualLP(order);\n        }\n    }\n    \n    function takeOutStakingDualAssets(uint order) public lock returns(bool ret){\n        ret = takeOutDualAssetsInternal(order);\n    }\n    \n    function takeOutDualAssetsInternal(uint order) internal returns(bool){\n        require(userDualAmounts[msg.sender].length>order, \"dfbtc: You have not this order!!!\");\n        require(userDualAmounts[msg.sender][order]._bFinished == false, \"dfbtc: You have no assets!!!\");\n        \n        uint totalAom = calDualEaningsByUserIndex(msg.sender, order);\n        require(totalAom>0, \"dfbtc: You have no assets!!!\");\n        \n        uint hasDays = (now.sub(userDualAmounts[msg.sender][order]._startTime)).div(cycleWei);\n        \n        bool isEnd = hasDays>userDualAmounts[msg.sender][order]._pledgeCycle ? true : false;\n        \n        uint remainingAom = 0;\n        if(isEnd){\n            remainingAom = totalAom.sub(userDualAmounts[msg.sender][order]._hasTakeOut);\n        }else{\n            remainingAom = totalAom.mul(dayTakeout).div(100).sub(userDualAmounts[msg.sender][order]._hasTakeOut);\n        }\n        \n        require(remainingAom>0, \"dfbtc: You have no assets!!!\");\n        userDualAmounts[msg.sender][order]._hasTakeOut = remainingAom.add(userDualAmounts[msg.sender][order]._hasTakeOut);\n        \n        singleEarnings.safeTransferAomToUser(msg.sender, remainingAom);\n        \n        return isEnd;\n    }\n    \n    function calSingleEaningsByUserIndex(address user, uint indexVal) public view returns(uint){\n        uint hasDays = (now.sub(userSingleAmounts[user][indexVal]._startTime)).div(cycleWei);\n        uint difcount = 0;\n        uint curTotalIncome = 0;\n        address tokenAddress = userSingleAmounts[user][indexVal]._tokenAddress;\n        uint pledgeCycle = userSingleAmounts[user][indexVal]._pledgeCycle;\n        uint pledgeAmount = userSingleAmounts[user][indexVal]._amount;\n        uint beginIndex = userSingleAmounts[user][indexVal]._beginDayCount;\n        uint dayTotal = daysToTotal[tokenAddress][pledgeCycle][beginIndex];\n        uint starttime = userSingleAmounts[user][indexVal]._startTime;\n        if(hasDays<=userSingleAmounts[user][indexVal]._pledgeCycle){\n            difcount = (now.sub(tokenToTime[tokenAddress][pledgeCycle])).div(cycleWei);\n        }else{\n            difcount = ((starttime.add(pledgeCycle.mul(cycleWei))).sub(tokenToTime[tokenAddress][pledgeCycle])).div(cycleWei);\n        }\n        \n        for(uint i=beginIndex; i<difcount; i++){\n            if(daysToTotal[tokenAddress][pledgeCycle][i] > 0){\n                dayTotal = daysToTotal[tokenAddress][pledgeCycle][i];\n            }\n            uint everyDayTotal = singleEarnings.calEveryDayAom(tokenAddress, dayTotal, pledgeCycle, pledgeAmount);\n            curTotalIncome = curTotalIncome.add(everyDayTotal);\n        }\n        \n        return curTotalIncome;\n    }\n    \n    function calDualEaningsByUserIndex(address user, uint indexVal) public view returns(uint){\n        uint hasDays = (now.sub(userDualAmounts[user][indexVal]._startTime)).div(cycleWei);\n        uint difcount = 0;\n        uint curTotalIncome = 0;\n        address tokenAddress = userDualAmounts[user][indexVal]._pairAddress;\n        uint pledgeCycle = userDualAmounts[user][indexVal]._pledgeCycle;\n        uint amountA = userDualAmounts[user][indexVal]._amountA;\n        uint amountB = userDualAmounts[user][indexVal]._amountB;\n        uint starttime = userDualAmounts[user][indexVal]._startTime;\n        uint beginIndex = userDualAmounts[user][indexVal]._beginDayCount;\n        \n        uint dayTotal = daysToTotal[tokenAddress][pledgeCycle][beginIndex];\n        \n        if(hasDays<=userDualAmounts[user][indexVal]._pledgeCycle){\n            difcount = (now.sub(tokenToTime[tokenAddress][pledgeCycle])).div(cycleWei);\n        }else{\n            difcount = ((starttime.add(pledgeCycle.mul(cycleWei))).sub(tokenToTime[tokenAddress][pledgeCycle])).div(cycleWei);\n        }\n        \n        for(uint i=beginIndex; i<difcount; i++){\n            if(daysToTotal[tokenAddress][pledgeCycle][i] > 0){\n                dayTotal = daysToTotal[tokenAddress][pledgeCycle][i];\n            }\n            \n            uint totalAB = amountA.add(amountB);\n            curTotalIncome = curTotalIncome.add(singleEarnings.calEveryDayAom(tokenAddress, dayTotal, pledgeCycle, totalAB));\n        }\n        \n        return curTotalIncome;\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal virtual returns (uint amountA, uint amountB) {\n        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\n            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\n        }\n        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n    \n    function addLiquidityFromPools(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) internal virtual ensure(deadline) returns (address pair, uint amountA, uint amountB, uint liquidity) {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransfer(tokenA, pair, amountA);\n        TransferHelper.safeTransfer(tokenB, pair, amountB);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n    \n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) internal virtual ensure(deadline) returns (address pair, uint amountA, uint amountB, uint liquidity) {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n    \n    function removeLiquidityFromDualLPPublic(uint indexVal) public lock returns (uint amountA, uint amountB) {\n        (amountA, amountB) = removeLiquidityFromDualLP(indexVal);\n    }\n    \n    function removeLiquidityFromDualLP(uint indexVal) internal returns (uint amountA, uint amountB) {\n        require(now >= (userDualAmounts[msg.sender][indexVal]._startTime + (userDualAmounts[msg.sender][indexVal]._pledgeCycle.mul(cycleWei))), \"dfbtc: It's not time!!!\");\n        require(!userDualAmounts[msg.sender][indexVal]._bFinished, \"dfbtc: Order has finished!!!\");\n        \n        address pair = userDualAmounts[msg.sender][indexVal]._pairAddress;\n        uint pledgeCycle = userDualAmounts[msg.sender][indexVal]._pledgeCycle;\n        uint difcount = (now.sub(tokenToTime[pair][pledgeCycle])).div(cycleWei);\n        address tokenA = userDualAmounts[msg.sender][indexVal]._tokenAaddress;\n        address tokenB = userDualAmounts[msg.sender][indexVal]._tokenBaddress;\n        \n        (amountA,amountB) = removeLiquidity(tokenA, tokenB, userDualAmounts[msg.sender][indexVal]._liquidity, 0, 0, msg.sender, now);\n        \n        userDualAmounts[msg.sender][indexVal]._bFinished = true;\n        tokenToTokenToCycleToTotal[pair][tokenA][pledgeCycle] = tokenToTokenToCycleToTotal[pair][tokenA][pledgeCycle] - amountA;\n        tokenToTokenToCycleToTotal[pair][tokenB][pledgeCycle] = tokenToTokenToCycleToTotal[pair][tokenB][pledgeCycle] - amountB;\n        daysToTotal[pair][pledgeCycle][difcount] = tokenToTokenToCycleToTotal[pair][tokenA][pledgeCycle] + tokenToTokenToCycleToTotal[pair][tokenB][pledgeCycle];\n    }\n    \n    function removeLiquidityFromSingleLPPublic(uint indexVal) public lock {\n        removeLiquidityFromSingleLP(indexVal);\n    }\n\n    function removeLiquidityFromSingleLP(uint indexVal) internal {\n        require(now >= (userSingleAmounts[msg.sender][indexVal]._startTime+userSingleAmounts[msg.sender][indexVal]._pledgeCycle.mul(cycleWei)), \"dfbtc: It's not time!!!\");\n        require(!userSingleAmounts[msg.sender][indexVal]._bFinished, \"dfbtc: Order has finished!!!\");\n        \n        address token = userSingleAmounts[msg.sender][indexVal]._tokenAddress;\n        uint pledgeCycle = userSingleAmounts[msg.sender][indexVal]._pledgeCycle;\n        uint difcount = (now.sub(tokenToTime[token][pledgeCycle])).div(cycleWei);\n        uint amount = userSingleAmounts[msg.sender][indexVal]._amount;\n        \n        TransferHelper.safeTransfer(token, msg.sender, amount);\n        userSingleAmounts[msg.sender][indexVal]._bFinished = true;\n        \n        tokenToCycleToTotal[token][pledgeCycle] = tokenToCycleToTotal[token][pledgeCycle].sub(amount);\n        daysToTotal[token][pledgeCycle][difcount] = tokenToCycleToTotal[token][pledgeCycle];\n    }\n    \n    function removeLiquidityFromUniswapV2(address tokenA, address tokenB, uint liquidity, uint amountAmin, uint amountBmin) public lock onlyOnwer returns(uint amountA, uint amountB){\n        (amountA,amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAmin, amountBmin, address(this), now);\n    }\n    \n    function safeTransferToOtherPools(address tokenAddress, address toAdddress, uint transferValue) public lock onlyOnwer {\n        TransferHelper.safeTransfer(tokenAddress, toAdddress, transferValue);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) internal virtual ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransfer(pair, pair, liquidity);\n        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\n        (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB) {\n        return UniswapV2Library.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        returns (uint amountOut)\n    {\n        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        returns (uint amountIn)\n    {\n        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n        public\n        view\n        virtual\n        returns (uint[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint amountOut, address[] memory path)\n        public\n        view\n        virtual\n        returns (uint[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n    }\n    \n    function getAomPrice(address tokenA, address tokenB) public view returns(uint, uint){\n        (uint reserve0, uint reserve1) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\n        return (reserve0, reserve1);\n    }\n    \n    function getTokenAmount(address tokenA, address tokenB, uint amountA) public view returns(uint){\n        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\n        uint amountB = UniswapV2Library.quote(amountA, reserveA, reserveB);\n        return amountB;\n    }\n    \n    function getUserSingleAmounts(address user) public view returns(UserSingleAssetsRecord[] memory){\n        return userSingleAmounts[user];\n    }\n    \n    function getUserDualAmount(address user) public view returns(UserDualAssetsRecord[] memory){\n        return userDualAmounts[user];\n    }\n    \n    function getTokenAndTokenAmount(address tokenA, address tokenB) public view returns(uint balance0, uint balance1, uint amountA, uint amountB, uint liquidity){\n        balance0 = IERC20(tokenA).balanceOf(address(this));\n        balance1 = IERC20(tokenB).balanceOf(address(this));\n        \n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        liquidity = IUniswapV2Pair(pair).balanceOf(address(this));\n\n        uint balanceUni0 = IERC20(tokenA).balanceOf(pair);\n        uint balanceUni1 = IERC20(tokenB).balanceOf(pair);\n        uint _totalSupply = IUniswapV2Pair(pair).totalSupply();\n        amountA = liquidity.mul(balanceUni0) / _totalSupply;\n        amountB = liquidity.mul(balanceUni1) / _totalSupply;\n    }\n}\n"
    },
    "interfaces/IDFBTCPoolsLPStakingPools.sol": {
      "content": "pragma solidity =0.6.6;\n\ninterface IDFBTCPoolsLPStakingPools {\n    function calEveryDayAom(address token, uint dayTotal, uint pledgeCycle, uint amount) external view returns(uint);\n    function safeTransferAomToUser(address to, uint amount) external;\n}"
    },
    "interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n    function burn(uint value) external;\r\n}"
    },
    "interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "libraries/SafeMath.sol": {
      "content": "pragma solidity =0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    require(c / _a == _b, \"mul error!!\");\n    return c;\n  }\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a / _b;\n  }\n\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a, \"sub error!!\");\n    return _a - _b;\n  }\n\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    require(c >= _a, \"add error!!\");\n    return c;\n  }\n}\n"
    },
    "libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.6;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n  function safeApprove(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'TransferHelper::safeApprove: approve failed'\n    );\n  }\n\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'TransferHelper::safeTransfer: transfer failed'\n    );\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'TransferHelper::transferFrom: transferFrom failed'\n    );\n  }\n}\n"
    },
    "libraries/UniswapV2Library.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport '../interfaces/IUniswapV2Pair.sol';\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    }
  }
}