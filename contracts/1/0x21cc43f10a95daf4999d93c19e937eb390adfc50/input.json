{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"CARETH.sol":{"content":"// CapitalAggregatorMeme: $CAR\n// Deflationary DeFi-as-a-Service (DaaS) Token, with 60% supply burned to 0x0dEaD\n\n//Initial Supply: 1,000,000,000,000 $CAR \n//60% of $CAR burned to 0x0dEaD\n//10% of each buy goes to existing holders.\n//10% of each sell goes into marketing/development/buybacks and staking\n\n// Twitter: https://twitter.com/CARETHTOKEN\n// Website: https://capitalaggregatorrewards.com/\n// Telegram: https://t.me/CARETH\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: contracts/varistablecapital.sol\n\n// Vari-Stable Capital: $VSC\n// Deflationary DeFi-as-a-Service (DaaS) Token, with 60% supply burned to 0x0dEaD\n// You buy on Ethereum, we execute algorithmic stablecoin strategies on various chains and return the profits to $VSC holders.\n\n//Initial Supply: 1,000,000,000,000 $VSC \n//60% of $VSC burned to 0x0dEaD\n//10% of each buy goes to existing holders.\n//10% of each sell goes into various-chain algorithmic stablecoin investing to add to the treasury and buy back $VSC tokens.\n\n// Twitter: \n// Website: \n// Medium: \n// Telegram: \n\n    interface IUniswapV2Factory {\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n        function feeTo() external view returns (address);\n        function feeToSetter() external view returns (address);\n\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\n        function allPairs(uint) external view returns (address pair);\n        function allPairsLength() external view returns (uint);\n\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n\n        function setFeeTo(address) external;\n        function setFeeToSetter(address) external;\n    }\n\n    interface IUniswapV2Pair {\n        event Approval(address indexed owner, address indexed spender, uint value);\n        event Transfer(address indexed from, address indexed to, uint value);\n\n        function name() external pure returns (string memory);\n        function symbol() external pure returns (string memory);\n        function decimals() external pure returns (uint8);\n        function totalSupply() external view returns (uint);\n        function balanceOf(address owner) external view returns (uint);\n        function allowance(address owner, address spender) external view returns (uint);\n\n        function approve(address spender, uint value) external returns (bool);\n        function transfer(address to, uint value) external returns (bool);\n        function transferFrom(address from, address to, uint value) external returns (bool);\n\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\n        function nonces(address owner) external view returns (uint);\n\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n        event Mint(address indexed sender, uint amount0, uint amount1);\n        event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n        event Swap(\n            address indexed sender,\n            uint amount0In,\n            uint amount1In,\n            uint amount0Out,\n            uint amount1Out,\n            address indexed to\n        );\n        event Sync(uint112 reserve0, uint112 reserve1);\n\n        function MINIMUM_LIQUIDITY() external pure returns (uint);\n        function factory() external view returns (address);\n        function token0() external view returns (address);\n        function token1() external view returns (address);\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n        function price0CumulativeLast() external view returns (uint);\n        function price1CumulativeLast() external view returns (uint);\n        function kLast() external view returns (uint);\n\n        function mint(address to) external returns (uint liquidity);\n        function burn(address to) external returns (uint amount0, uint amount1);\n        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n        function skim(address to) external;\n        function sync() external;\n\n        function initialize(address, address) external;\n    }\n\ninterface IUniswapV2Router01 {\n        function factory() external pure returns (address);\n        function WETH() external pure returns (address);\n\n        function addLiquidity(\n            address tokenA,\n            address tokenB,\n            uint amountADesired,\n            uint amountBDesired,\n            uint amountAMin,\n            uint amountBMin,\n            address to,\n            uint deadline\n        ) external returns (uint amountA, uint amountB, uint liquidity);\n        function addLiquidityETH(\n            address token,\n            uint amountTokenDesired,\n            uint amountTokenMin,\n            uint amountETHMin,\n            address to,\n            uint deadline\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n        function removeLiquidity(\n            address tokenA,\n            address tokenB,\n            uint liquidity,\n            uint amountAMin,\n            uint amountBMin,\n            address to,\n            uint deadline\n        ) external returns (uint amountA, uint amountB);\n        function removeLiquidityETH(\n            address token,\n            uint liquidity,\n            uint amountTokenMin,\n            uint amountETHMin,\n            address to,\n            uint deadline\n        ) external returns (uint amountToken, uint amountETH);\n        function removeLiquidityWithPermit(\n            address tokenA,\n            address tokenB,\n            uint liquidity,\n            uint amountAMin,\n            uint amountBMin,\n            address to,\n            uint deadline,\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\n        ) external returns (uint amountA, uint amountB);\n        function removeLiquidityETHWithPermit(\n            address token,\n            uint liquidity,\n            uint amountTokenMin,\n            uint amountETHMin,\n            address to,\n            uint deadline,\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\n        ) external returns (uint amountToken, uint amountETH);\n        function swapExactTokensForTokens(\n            uint amountIn,\n            uint amountOutMin,\n            address[] calldata path,\n            address to,\n            uint deadline\n        ) external returns (uint[] memory amounts);\n        function swapTokensForExactTokens(\n            uint amountOut,\n            uint amountInMax,\n            address[] calldata path,\n            address to,\n            uint deadline\n        ) external returns (uint[] memory amounts);\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n            external\n            payable\n            returns (uint[] memory amounts);\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            external\n            returns (uint[] memory amounts);\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            external\n            returns (uint[] memory amounts);\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n            external\n            payable\n            returns (uint[] memory amounts);\n\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n    }\n\n\n   interface IUniswapV2Router02 is IUniswapV2Router01 {\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\n            address token,\n            uint liquidity,\n            uint amountTokenMin,\n            uint amountETHMin,\n            address to,\n            uint deadline\n        ) external returns (uint amountETH);\n        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n            address token,\n            uint liquidity,\n            uint amountTokenMin,\n            uint amountETHMin,\n            address to,\n            uint deadline,\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\n        ) external returns (uint amountETH);\n\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            uint amountIn,\n            uint amountOutMin,\n            address[] calldata path,\n            address to,\n            uint deadline\n        ) external;\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\n            uint amountOutMin,\n            address[] calldata path,\n            address to,\n            uint deadline\n        ) external payable;\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\n            uint amountIn,\n            uint amountOutMin,\n            address[] calldata path,\n            address to,\n            uint deadline\n        ) external;\n    }\n\npragma solidity ^0.8.0;\n//SPDX-License-Identifier: MIT\n\n\n\n\n\n\n    contract CAR is Context, IERC20, Ownable {\n        using SafeMath for uint256;\n        using Address for address;\n\n        mapping (address => uint256) private _rOwned;\n        mapping (address => uint256) private _tOwned;\n        mapping (address => mapping (address => uint256)) private _allowances;\n\n        mapping (address => bool) private _isExcludedFromFee;\n\n        mapping (address => bool) private _isExcluded;\n        address[] private _excluded;\n\n        uint256 private constant MAX = ~uint256(0);\n        uint256 private _tTotal = 1000000000000 * 10**9;\n        uint256 private _rTotal = (MAX - (MAX % _tTotal));\n        uint256 private _tFeeTotal;\n\n        string private _name = 'CapitalAggregatorRewards';\n        string private _symbol = 'CAR';\n        uint8 private _decimals = 9;\n\n        uint256 private _taxFee = 10;\n        uint256 private _teamFee = 10;\n        uint256 private _previousTaxFee = _taxFee;\n        uint256 private _previousTeamFee = _teamFee;\n\n        address payable public _VSCWalletAddress;\n        address payable public _marketingWalletAddress;\n\n        IUniswapV2Router02 public immutable uniswapV2Router;\n        address public immutable uniswapV2Pair;\n\n        bool inSwap = false;\n        bool public swapEnabled = true;\n\n        uint256 private _maxTxAmount = 100000000000000e9;\n        // We will set a minimum amount of tokens to be swaped => 5M\n        uint256 private _numOfTokensToExchangeForTeam = 5 * 10**3 * 10**9;\n\n        event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n        event SwapEnabledUpdated(bool enabled);\n\n        modifier lockTheSwap {\n            inSwap = true;\n            _;\n            inSwap = false;\n        }\n\n        constructor (address payable VSCWalletAddress, address payable marketingWalletAddress) {\n            _VSCWalletAddress = VSCWalletAddress;\n            _marketingWalletAddress = marketingWalletAddress;\n            _rOwned[_msgSender()] = _rTotal;\n\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // UniswapV2 for Ethereum network\n            // Create a uniswap pair for this new token\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n                .createPair(address(this), _uniswapV2Router.WETH());\n\n            // set the rest of the contract variables\n            uniswapV2Router = _uniswapV2Router;\n\n            // Exclude owner and this contract from fee\n            _isExcludedFromFee[owner()] = true;\n            _isExcludedFromFee[address(this)] = true;\n\n            emit Transfer(address(0), _msgSender(), _tTotal);\n        }\n\n        function name() public view returns (string memory) {\n            return _name;\n        }\n\n        function symbol() public view returns (string memory) {\n            return _symbol;\n        }\n\n        function decimals() public view returns (uint8) {\n            return _decimals;\n        }\n\n        function totalSupply() public view override returns (uint256) {\n            return _tTotal;\n        }\n\n        function balanceOf(address account) public view override returns (uint256) {\n            if (_isExcluded[account]) return _tOwned[account];\n            return tokenFromReflection(_rOwned[account]);\n        }\n\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\n            _transfer(_msgSender(), recipient, amount);\n            return true;\n        }\n\n        function allowance(address owner, address spender) public view override returns (uint256) {\n            return _allowances[owner][spender];\n        }\n\n        function approve(address spender, uint256 amount) public override returns (bool) {\n            _approve(_msgSender(), spender, amount);\n            return true;\n        }\n\n        function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n            _transfer(sender, recipient, amount);\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n            return true;\n        }\n\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n            return true;\n        }\n\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n            return true;\n        }\n\n        function isExcluded(address account) public view returns (bool) {\n            return _isExcluded[account];\n        }\n\n        function setExcludeFromFee(address account, bool excluded) external onlyOwner() {\n            _isExcludedFromFee[account] = excluded;\n        }\n\n        function totalFees() public view returns (uint256) {\n            return _tFeeTotal;\n        }\n\n        function deliver(uint256 tAmount) public {\n            address sender = _msgSender();\n            require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _rTotal = _rTotal.sub(rAmount);\n            _tFeeTotal = _tFeeTotal.add(tAmount);\n        }\n\n        function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n            require(tAmount <= _tTotal, \"Amount must be less than supply\");\n            if (!deductTransferFee) {\n                (uint256 rAmount,,,,,) = _getValues(tAmount);\n                return rAmount;\n            } else {\n                (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n                return rTransferAmount;\n            }\n        }\n\n        function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n            require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n            uint256 currentRate =  _getRate();\n            return rAmount.div(currentRate);\n        }\n\n        function excludeAccount(address account) external onlyOwner() {\n            require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\n            require(!_isExcluded[account], \"Account is already excluded\");\n            if(_rOwned[account] > 0) {\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\n            }\n            _isExcluded[account] = true;\n            _excluded.push(account);\n        }\n\n        function includeAccount(address account) external onlyOwner() {\n            require(_isExcluded[account], \"Account is already excluded\");\n            for (uint256 i = 0; i < _excluded.length; i++) {\n                if (_excluded[i] == account) {\n                    _excluded[i] = _excluded[_excluded.length - 1];\n                    _tOwned[account] = 0;\n                    _isExcluded[account] = false;\n                    _excluded.pop();\n                    break;\n                }\n            }\n        }\n\n        function removeAllFee() private {\n            if(_taxFee == 0 && _teamFee == 0) return;\n\n            _previousTaxFee = _taxFee;\n            _previousTeamFee = _teamFee;\n\n            _taxFee = 0;\n            _teamFee = 0;\n        }\n\n        function restoreAllFee() private {\n            _taxFee = _previousTaxFee;\n            _teamFee = _previousTeamFee;\n        }\n\n        function isExcludedFromFee(address account) public view returns(bool) {\n            return _isExcludedFromFee[account];\n        }\n\n        function _approve(address owner, address spender, uint256 amount) private {\n            require(owner != address(0), \"ERC20: approve from the zero address\");\n            require(spender != address(0), \"ERC20: approve to the zero address\");\n\n            _allowances[owner][spender] = amount;\n            emit Approval(owner, spender, amount);\n        }\n\n        function _transfer(address sender, address recipient, uint256 amount) private {\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\n            require(amount > 0, \"Transfer amount must be greater than zero\");\n\n            if(sender != owner() && recipient != owner())\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n\n            // is the token balance of this contract address over the min number of\n            // tokens that we need to initiate a swap?\n            // also, don't get caught in a circular team event.\n            // also, don't swap if sender is uniswap pair.\n            uint256 contractTokenBalance = balanceOf(address(this));\n\n            if(contractTokenBalance >= _maxTxAmount)\n            {\n                contractTokenBalance = _maxTxAmount;\n            }\n\n            bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForTeam;\n            if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {\n                // We need to swap the current tokens to ETH and send to the team wallet\n                swapTokensForEth(contractTokenBalance);\n\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToTeam(address(this).balance);\n                }\n            }\n\n            //indicates if fee should be deducted from transfer\n            bool takeFee = true;\n\n            //if any account belongs to _isExcludedFromFee account then remove the fee\n            if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\n                takeFee = false;\n            }\n\n            //transfer amount, it will take tax and team fee\n            _tokenTransfer(sender,recipient,amount,takeFee);\n        }\n\n        function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{\n            // generate the uniswap pair path of token -> weth\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = uniswapV2Router.WETH();\n\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n            // make the swap\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0, // accept any amount of ETH\n                path,\n                address(this),\n                block.timestamp\n            );\n        }\n\n        function sendETHToTeam(uint256 amount) private {\n            _VSCWalletAddress.transfer(amount.div(2));\n            _marketingWalletAddress.transfer(amount.div(2));\n        }\n\n        // We are exposing these functions to be able to manual swap and send\n        // in case the token is highly valued and 5M becomes too much\n        function manualSwap() external onlyOwner() {\n            uint256 contractBalance = balanceOf(address(this));\n            swapTokensForEth(contractBalance);\n        }\n\n        function manualSend() external onlyOwner() {\n            uint256 contractETHBalance = address(this).balance;\n            sendETHToTeam(contractETHBalance);\n        }\n\n        function setSwapEnabled(bool enabled) external onlyOwner(){\n            swapEnabled = enabled;\n        }\n\n        function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n            if(!takeFee)\n                removeAllFee();\n\n            if (_isExcluded[sender] && !_isExcluded[recipient]) {\n                _transferFromExcluded(sender, recipient, amount);\n            } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n                _transferToExcluded(sender, recipient, amount);\n            } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n                _transferStandard(sender, recipient, amount);\n            } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n                _transferBothExcluded(sender, recipient, amount);\n            } else {\n                _transferStandard(sender, recipient, amount);\n            }\n\n            if(!takeFee)\n                restoreAllFee();\n        }\n\n        function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeTeam(tTeam);\n            _reflectFee(rFee, tFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        }\n\n        function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeTeam(tTeam);\n            _reflectFee(rFee, tFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        }\n\n        function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeTeam(tTeam);\n            _reflectFee(rFee, tFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        }\n\n        function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeTeam(tTeam);\n            _reflectFee(rFee, tFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        }\n\n        function _takeTeam(uint256 tTeam) private {\n            uint256 currentRate =  _getRate();\n            uint256 rTeam = tTeam.mul(currentRate);\n            _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n            if(_isExcluded[address(this)])\n                _tOwned[address(this)] = _tOwned[address(this)].add(tTeam);\n        }\n\n        function _reflectFee(uint256 rFee, uint256 tFee) private {\n            _rTotal = _rTotal.sub(rFee);\n            _tFeeTotal = _tFeeTotal.add(tFee);\n        }\n\n         //to recieve ETH from uniswapV2Router when swaping\n        receive() external payable {}\n\n        function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n            (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\n            uint256 currentRate =  _getRate();\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\n            return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n        }\n\n        function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee) private pure returns (uint256, uint256, uint256) {\n            uint256 tFee = tAmount.mul(taxFee).div(100);\n            uint256 tTeam = tAmount.mul(teamFee).div(100);\n            uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n            return (tTransferAmount, tFee, tTeam);\n        }\n\n        function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n            uint256 rAmount = tAmount.mul(currentRate);\n            uint256 rFee = tFee.mul(currentRate);\n            uint256 rTransferAmount = rAmount.sub(rFee);\n            return (rAmount, rTransferAmount, rFee);\n        }\n\n        function _getRate() private view returns(uint256) {\n            (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n            return rSupply.div(tSupply);\n        }\n\n        function _getCurrentSupply() private view returns(uint256, uint256) {\n            uint256 rSupply = _rTotal;\n            uint256 tSupply = _tTotal;\n            for (uint256 i = 0; i < _excluded.length; i++) {\n                if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n                rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n                tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n            }\n            if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n            return (rSupply, tSupply);\n        }\n\n        function _getTaxFee() private view returns(uint256) {\n            return _taxFee;\n        }\n\n        function _getMaxTxAmount() private view returns(uint256) {\n            return _maxTxAmount;\n        }\n\n        function _getETHBalance() public view returns(uint256 balance) {\n            return address(this).balance;\n        }\n\n        function _setTaxFee(uint256 taxFee) external onlyOwner() {\n            require(taxFee >= 1 && taxFee <= 25, 'taxFee should be in 1 - 25');\n            _taxFee = taxFee;\n        }\n\n        function _setTeamFee(uint256 teamFee) external onlyOwner() {\n            require(teamFee >= 1 && teamFee <= 25, 'teamFee should be in 1 - 25');\n            _teamFee = teamFee;\n        }\n\n        function _setVSCWallet(address payable VSCWalletAddress) external onlyOwner() {\n            _VSCWalletAddress = VSCWalletAddress;\n        }\n\n        function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n            require(maxTxAmount >= 100000000000000e9 , 'maxTxAmount should be greater than 100000000000000e9');\n            _maxTxAmount = maxTxAmount;\n        }\n    }"}}}