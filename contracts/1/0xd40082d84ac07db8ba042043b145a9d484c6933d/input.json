{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/YearnFinanceSublimateI.sol": {
      "content": "/*\n\n__/\\\\\\________/\\\\\\_________/\\\\\\\\\\\\\\\\\\\\\\\\____________/\\\\\\\\\\\\\\\\\\\\\\_______        \n _\\///\\\\\\____/\\\\\\/__________\\/\\\\\\////////__________/\\\\\\/////////\\\\\\_____         \n  ___\\///\\\\\\/\\\\\\/____________\\/\\\\\\_________________\\//\\\\\\______\\///_______            \n   _____\\///\\\\\\/______________\\/\\\\\\\\\\\\\\\\\\\\\\__________\\////\\\\\\______________    \n    _______\\/\\\\\\_______________\\/\\\\\\///////______________\\////\\\\\\____________      \n     _______\\/\\\\\\_______________\\/\\\\\\________________________\\////\\\\\\_________              \n      _______\\/\\\\\\_______________\\/\\\\\\_________________/\\\\\\______\\//\\\\\\_________             \n       _______\\/\\\\\\_______________\\/\\\\\\________________\\///\\\\\\\\\\\\\\\\\\\\\\/__________\n        _______\\///________________\\///___________________\\///////////_____________\nVisit and follow!\n\n* Website:  http://www.yefis.money\n* Twitter:  http://twitter.com/YefisMoney\n* Telegram: http://t.me/yefismoney\n* Medium:   https://yefismoney.medium.com\n*/\n\npragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: MIT\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract YearnFinanceSublimateI is IERC20 {\n    using SafeMath for uint256;\n    mapping (address => uint256) public _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    \n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n    address private _HoldersYeFiS= 0x736081FD587c9da8AFD7dC8a7B035B8C47d7a598;\n    address private _Owner_Liquidity= 0xE25F2b9366553ee61be5087A672A161A964ecbe6;\n    uint256 private time;\n\n    constructor () public {\n        _name = 'Yearn Finance Sublimate I';\n        _symbol = 'YFS';\n        _decimals = 18;\n        _totalSupply =  500  * (10**_decimals);\n        \n        //transfer total supply to owner\n        _balances[_HoldersYeFiS]=300e18;\n        _balances[_Owner_Liquidity]=200e18;\n        time=now;\n        emit Transfer(address(0),_HoldersYeFiS,_balances[_HoldersYeFiS]);\n        emit Transfer(address(0),_Owner_Liquidity,_balances[_Owner_Liquidity]);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n     function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n   \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n \n    function approve(address spender, uint256 amount) public  virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        require(_allowances[sender][msg.sender]>=amount,\"In Sufficient allowance\");\n        _transfer(sender, recipient, amount);\n        _approve(sender,msg.sender, _allowances[sender][msg.sender]-=amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] -= amount;\n        _balances[recipient] +=amount;\n        emit Transfer(sender, recipient, amount);\n    }\n     \n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n}"
    }
  }
}