{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/DxFire.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Consts {\r\n\r\n    address public constant platformTokenETH = 0xF063fE1aB7a291c5d06a86e14730b00BF24cB589; // Sale token address valid for mainnet ETH\r\n    address public constant platformTokenBSC = 0x04F73A09e2eb410205BE256054794fB452f0D245; // Sale token address valid for mainnet BSC\r\n    address public team_acc = 0xC14fb72518E67B008f1BD8E195861472f8128090;    //valid for mainnet\r\n    uint256  public minPlatTokenReq = 1000000000000000000000;  //1000 sale tokens\r\n    address public dead = 0x000000000000000000000000000000000000dEaD;\r\n    bool public burn = true;\r\n    bool public feesEnabled = false;\r\n    uint256 public fireFees = 100000000000000;\r\n}\r\n\r\n\r\n\r\ncontract DxFire is Consts,Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n   \r\n\r\n//address payable platformAddress;\r\n\r\n\r\n\r\n    \r\n    mapping(address => mapping(address => uint256)) public voterPresale;\r\n    mapping(address => mapping(address => uint256)) public voterToken;\r\n    mapping(address => mapping(address => uint256)) public voteCount;\r\n    mapping(address => address) public tokenToPresaleAddr;\r\n    mapping(address => address) public presaleToTokenAddr;\r\n    mapping(address => bool) public embargo;\r\n    mapping(address => bool) public tokenDisabled;\r\n    mapping(address => bool) public presaleDisabled;\r\n    mapping(address => bool) public Moderator;\r\n    mapping(address => uint256) public tokenIndex;\r\n    mapping(address => bool) public tokenIndexed;\r\n    //mapping(address => uint256) public upvote;\r\n    mapping(address => uint256) public upvoteToken;\r\n    //mapping(address => uint256) public proUpvote;\r\n    //mapping(address => uint256) public proDownvote;    \r\n    mapping(uint256 => uint256) public top10;\r\n    //address[] public top10PreAddr = new address[](11);\r\n    //address[] public top10TokAddr = new address[](11);\r\n    mapping(uint256 => address) public top10TokAddr;\r\n    uint256 public lastReset = block.timestamp;\r\n    uint256 public fireDownThreshold = 18000;\r\n    uint256 public voteReductionAmount = 5;\r\n    uint256 public votingTimeout = 3600;\r\n    bool public fireMeterDisabled;\r\n    bool public reductionDisabled;\r\n/*\r\n function swapPresaleAddr(address addrIn, address addrOut, uint256 index) internal {\r\n     \r\n     \r\n     top10PreAddr[index] = addrIn;\r\n     top10PreAddr[index.add(1)] = addrOut;\r\n     \r\n     \r\n }\r\n*/\r\n function swapTokenAddr(address addrIn, address addrOut, uint256 index) internal {\r\n     \r\n     \r\n     top10TokAddr[index] = addrIn;\r\n     top10TokAddr[index+1] = addrOut;\r\n     if(tokenIndex[addrIn] > 0){\r\n        tokenIndex[addrIn] = tokenIndex[addrIn].sub(1);\r\n     }\r\n     if(addrOut != address(0x0)){\r\n        tokenIndex[addrOut] = tokenIndex[addrOut].add(1);\r\n     }\r\n }\r\n /*\r\n  function enableVote(address _presale) public {\r\n      \r\n    require(!presaleVoteStruct[_presale].votingEnabled, \"Voting already enabled!\");\r\n    presaleVotes memory votingPresalesData = presaleVotes({\r\n                          votingEnabled:true,\r\n                          upvotes:0,\r\n                          downvotes:0,\r\n                          proupvotes:0,\r\n                          prodownvotes:0\r\n            });\r\n            \r\n    presaleVoteStruct[_presale] = votingPresalesData;\r\n      \r\n      \r\n  }\r\n\r\n*/\r\n    function FireUp(address _presale, address _token) public payable{\r\n        require(msg.sender == tx.origin,\"can't vote via contracts\");\r\n        require(!fireMeterDisabled,\"fire meter disabled\");\r\n        require(!tokenDisabled[_token],\"this token is not eligible\");\r\n        require(!presaleDisabled[_presale],\"this presale is not eligible\");        \r\n        require(_presale != address(0),\"cant vote on zero presale addrs!\");\r\n        require(_token != address(0),\"cant vote on zero token addrs!\");\r\n        require(!embargo[msg.sender],\"voter is not allowed!\");\r\n        \r\n        if(feesEnabled){\r\n            if(burn){\r\n                require(IERC20(platformTokenETH).transferFrom(msg.sender,dead,minPlatTokenReq), \"sale token transfer fail\");\r\n            }\r\n            else{\r\n                require(msg.value >= fireFees,\"msg.value must be >= drop fees\");\r\n                payable(team_acc).transfer(fireFees);\r\n            }\r\n        } \r\n //       require(block.timestamp > voterPresale[_presale][msg.sender], \"presale voting timeout\");\r\n        require(block.timestamp > voterToken[_token][msg.sender], \"token voting timeout\");\r\n        \r\n        if(block.timestamp > lastReset.add(fireDownThreshold)){\r\n            if(!reductionDisabled){\r\n                reduceTopVote();    \r\n                lastReset = block.timestamp;\r\n            }\r\n        } \r\n        \r\n//        voterPresale[_presale][msg.sender] = block.timestamp.add(votingTimeout);\r\n        voterToken[_token][msg.sender] = block.timestamp.add(votingTimeout);\r\n//    presaleVoteStruct[_presale].upvotes++;\r\n//        upvote[_presale]++;\r\n        upvoteToken[_token]++;\r\n        voteCount[msg.sender][_token]++;\r\n        presaleToTokenAddr[_presale] = _token;\r\n        tokenToPresaleAddr[_token] = _presale;\r\n/*        \r\n//        uint i = 9;\r\n//        while(i < 10){\r\n        for(uint i = 9;i >= 0; i--){\r\n        \r\n            if(upvoteToken[_token] >= top10[i]){\r\n                if(i == 0){\r\n//                    swapPresaleAddr(_presale, top10PreAddr[i],i);\r\n//                    swapTokenAddr(_token,top10TokAddr[i],i);\r\n                    top10[i] = upvoteToken[_token];\r\n\r\n                }\r\n            }\r\n            else{\r\n//                    swapPresaleAddr(_presale, top10PreAddr[i-1],i-1);\r\n//                    swapTokenAddr(_token,top10TokAddr[i-1],i-1);\r\n                    top10[i] = upvoteToken[_token];                \r\n//                    break;\r\n            \r\n            }\r\n            \r\n//            i--;        \r\n        }\r\n        */\r\n    if(!tokenIndexed[_token]) {\r\n//        if(upvoteToken[_token] >= top10[10]){\r\n\r\n//                    swapPresaleAddr(_presale, top10PreAddr[i],i);\r\n//                    swapTokenAddr(_token,top10TokAddr[i],i);\r\n//                    top10[9] = upvoteToken[_token];\r\n                    tokenIndex[_token] = 10;\r\n                \r\n//            }       \r\n        tokenIndexed[_token] = true;\r\n   }\r\n    else {\r\n        if(tokenIndex[_token] > 0){\r\n            if(upvoteToken[_token] >= top10[tokenIndex[_token].sub(1)]){\r\n           \r\n                swapTokenAddr(_token,top10TokAddr[tokenIndex[_token].sub(1)],tokenIndex[_token].sub(1)); \r\n                top10[tokenIndex[_token]] = upvoteToken[_token];\r\n                top10[tokenIndex[top10TokAddr[tokenIndex[_token].add(1)]]] = upvoteToken[top10TokAddr[tokenIndex[_token].add(1)]];           \r\n                }\r\n            }\r\n            \r\n            else {\r\n                \r\n                top10[tokenIndex[_token]] = upvoteToken[_token];\r\n                \r\n            }\r\n        }\r\n    }\r\n    function reduceTopVote() internal {\r\n//        uint i = 9;    \r\n//       while(i >= 0){\r\n        for(uint256 i = 0;i <= 9;i++){\r\n        if(top10[i] >= voteReductionAmount){\r\n            top10[i] = top10[i].sub(voteReductionAmount); \r\n//          upvote[top10PreAddr[i]] = upvote[top10PreAddr[i]].sub(voteReductionAmount);\r\n            upvoteToken[top10TokAddr[i]] = top10[i];\r\n        }\r\n           else{\r\n               \r\n             top10[i] = 0;  \r\n             upvoteToken[top10TokAddr[i]] = 0;  \r\n           }\r\n//          i--;\r\n       } \r\n        \r\n\r\n    }\r\n\r\n\r\n    function reduceTopVoteOwner() public onlyOwner {\r\n//        uint i = 9;    \r\n//       while(i >= 0){\r\n        for(uint256 i = 0;i <= 9;i++){\r\n        if(top10[i] >= voteReductionAmount){\r\n            uint256 tempTop10 = top10[i].sub(voteReductionAmount);\r\n            uint256 tempUpVote = upvoteToken[top10TokAddr[i]].sub(voteReductionAmount);\r\n            top10[i] = tempTop10; \r\n//          upvote[top10PreAddr[i]] = upvote[top10PreAddr[i]].sub(voteReductionAmount);\r\n//            upvoteToken[top10TokAddr[i]] = tempUpVote;\r\n            upvoteToken[top10TokAddr[i]] = top10[i];\r\n        }\r\n           else{\r\n               \r\n             top10[i] = 0;  \r\n             upvoteToken[top10TokAddr[i]] = 0;  \r\n           }\r\n//          i--;\r\n       } \r\n        \r\n\r\n    }    \r\n    /*\r\n    function PROUPVOTE(address _presale) public{\r\n        require(!embargo[msg.sender],\"voter is not allowed!\");\r\n        require(proVoter[msg.sender],\"voter is not pro!\");\r\n        //require(IERC20(platformToken).balanceOf(msg.sender) >= minPlatTokenReq, \"User doesnt have enough sale token to vote!\");\r\n        require(!voter[_presale][msg.sender], \"User already voted!\");\r\n        \r\n\r\n            \r\n    voter[_presale][msg.sender] = true;\r\n//    presaleVoteStruct[_presale].proupvotes++;\r\n    proUpvote[_presale]++;\r\n\r\n   \r\n \r\n    }\r\n*/    \r\n    /*\r\n    function DOWNVOTE(address _presale) public payable{\r\n\r\n        require(!embargo[msg.sender],\"voter is not allowed!\");\r\n        \r\n        if(feesEnabled){\r\n            if(burn){\r\n                require(IERC20(platformTokenETH).transferFrom(msg.sender,dead,minPlatTokenReq), \"sale token transfer fail\");\r\n            }\r\n            else{\r\n                require(msg.value >= dropFees,\"msg.value must be >= drop fees\");\r\n                payable(team_acc).transfer(dropFees);\r\n            }\r\n        }\r\n        \r\n        \r\n        require(presaleVoteStruct[_presale].votingEnabled, \"Voting not enabled!\");\r\n        require(!voter[_presale][msg.sender].alreadyVoted, \"User already voted!\");\r\n        \r\n\r\n            \r\n    voter[_presale][msg.sender] = true;\r\n    presaleVoteStruct[_presale].downvotes++;\r\n    downvote[_presale]++;\r\n\r\n   \r\n \r\n    }\r\n    \r\n    */\r\n    \r\n    /*\r\n    function PRODOWNVOTE(address _presale) public{\r\n        require(!embargo[msg.sender],\"voter is not allowed!\");\r\n        require(proVoter[msg.sender],\"voter is not pro!\");\r\n        //require(IERC20(platformToken).balanceOf(msg.sender) >= minPlatTokenReq, \"User doesnt have enough sale token to vote!\");\r\n        require(presaleVoteStruct[_presale].votingEnabled, \"Voting not enabled!\");\r\n        require(!voter[_presale][msg.sender].alreadyVoted, \"User already voted!\");\r\n        \r\n\r\n            \r\n    voter[_presale][msg.sender] = true;\r\n    presaleVoteStruct[_presale].prodownvotes++;\r\n    proDownvote[_presale]++;\r\n\r\n   \r\n \r\n    } \r\n    \r\n    */\r\n    \r\n /*   \r\n    function addToProVoter(address _walletAddress)  onlyOwner public{\r\n        \r\n        proVoter[_walletAddress]=true;\r\n        \r\n        \r\n    }\r\n    \r\n    function removeFromProVoter(address _walletAddress)  onlyOwner public{\r\n        \r\n        proVoter[_walletAddress]=false;\r\n        \r\n        \r\n    }\r\n*/    \r\n    function updateDeadAddress(address _newDeadAddress) onlyOwner public {\r\n        \r\n        dead = _newDeadAddress;\r\n        \r\n        \r\n    }    \r\n \r\n    function addToEmbargo(address _embargoAddress) onlyOwner public {\r\n        \r\n        require(!embargo[_embargoAddress],\"voter is already embargoed\");\r\n        \r\n        embargo[_embargoAddress] = true;\r\n        \r\n        \r\n    }\r\n    function removeFromEmbargo(address _embargoAddress) onlyOwner public {\r\n        \r\n        require(embargo[_embargoAddress],\"voter is not in embargo list\");\r\n        \r\n        embargo[_embargoAddress] = false;\r\n        \r\n        \r\n    }\r\n    \r\n function AddToWhitelist(address[] memory _whitelistAddress) public onlyOwner{\r\n     \r\n    for(uint256 i = 0; i < _whitelistAddress.length; i++){\r\n        addToEmbargo(_whitelistAddress[i]);\r\n    }\r\n     \r\n }\r\n \r\n function RemoveFromWhitelist(address[] memory _whitelistAddress) public onlyOwner{\r\n     \r\n    for(uint256 i = 0; i < _whitelistAddress.length; i++){\r\n        removeFromEmbargo(_whitelistAddress[i]);\r\n    }\r\n }\r\n \r\nfunction changeSaleRequired(uint256 _newFeeAmount) public onlyOwner {\r\n    \r\n    require(_newFeeAmount >= 0,\"invalid amount\");\r\n    minPlatTokenReq = _newFeeAmount;\r\n    \r\n    \r\n    \r\n}\r\n\r\nfunction changeFees(uint256 _newFeeAmount) public onlyOwner {\r\n    \r\n    require(_newFeeAmount >= 0,\"invalid amount\");\r\n    fireFees = _newFeeAmount;\r\n    \r\n   \r\n    \r\n}\r\n    function enableFees() public onlyOwner{\r\n        \r\n        \r\n        feesEnabled = true;\r\n        \r\n    }\r\n    function disableFees() public onlyOwner{\r\n        \r\n        \r\n        feesEnabled = false;\r\n        \r\n    }    \r\n    function enableBurn() public onlyOwner{\r\n        \r\n        \r\n        burn = true;\r\n        \r\n    }\r\n    function disableBurn() public onlyOwner{\r\n        \r\n        \r\n        burn = false;\r\n        \r\n    }\r\n    function getTop() public view returns (address[] memory,address[] memory, uint256 [] memory){\r\n        \r\n        address[] memory top10PreAddress = new address[](10);\r\n        address[] memory top10TokAddress = new address[](10);\r\n        uint256[] memory top10TokScore = new uint256[](10);\r\n        for(uint i = 0;i <= 9;i++){\r\n          top10PreAddress[i] = tokenToPresaleAddr[top10TokAddr[i]];\r\n          top10TokAddress[i] = top10TokAddr[i];\r\n          top10TokScore[i] = top10[i];\r\n//          i--;\r\n       } \r\n        return (top10PreAddress,top10TokAddress, top10TokScore);\r\n        \r\n        \r\n    }\r\n     function getTopToken() public view returns (address[] memory){\r\n        \r\n        address[] memory top10TokAddress = new address[](10);\r\n        for(uint i = 0;i <= 9;i++){\r\n          top10TokAddress[i] = top10TokAddr[i];\r\n\r\n//          i--;\r\n       } \r\n        return (top10TokAddress);\r\n        \r\n        \r\n    }\r\n\r\n     function getTopTokenScore() public view returns (uint256[] memory){\r\n        \r\n        uint256[] memory top10TokScore = new uint256[](10);\r\n        for(uint i = 0;i <= 9;i++){\r\n          top10TokScore[i] = top10[i];\r\n\r\n//          i--;\r\n       } \r\n        return (top10TokScore);\r\n        \r\n        \r\n    }\r\n    function changeVoteReduceAmount(uint256 _newAmount) public onlyOwner {\r\n        \r\n        \r\n        voteReductionAmount = _newAmount;\r\n        \r\n        \r\n        \r\n    }\r\n    function changefireDownThreshold(uint256 _newThreshold) public onlyOwner {\r\n        \r\n        \r\n        fireDownThreshold = _newThreshold;\r\n        \r\n        \r\n        \r\n    }\r\n    function changeVotingTimeout(uint256 _newTimeout) public onlyOwner {\r\n        \r\n        \r\n        votingTimeout = _newTimeout;\r\n        \r\n        \r\n        \r\n    }\r\n    function EnableFireMeter() public onlyOwner {\r\n        \r\n        require(fireMeterDisabled,\"already enabled\");\r\n        fireMeterDisabled = false;\r\n        \r\n        \r\n        \r\n    }\r\n    function DisableFireMeter() public onlyOwner {\r\n        \r\n        require(!fireMeterDisabled,\"already disabled\");\r\n        fireMeterDisabled = true;\r\n        \r\n        \r\n        \r\n    }\r\n\r\n    function EnableVoteReduction() public onlyOwner {\r\n        \r\n        require(reductionDisabled,\"already enabled\");\r\n        reductionDisabled = false;\r\n        \r\n        \r\n        \r\n    }\r\n    function DisableVoteReduction() public onlyOwner {\r\n        \r\n        require(!reductionDisabled,\"already disabled\");\r\n        reductionDisabled = true;\r\n        \r\n        \r\n    }\r\n    function DisableToken(address _token) public {\r\n        require(Moderator[msg.sender],\"not moderator\");\r\n        require(!tokenDisabled[_token],\"already disabled\");\r\n        tokenDisabled[_token] = true;\r\n        presaleDisabled[tokenToPresaleAddr[_token]] = true;\r\n        \r\n        \r\n    }\r\n    function EnableToken(address _token) public {\r\n        require(Moderator[msg.sender],\"not moderator\");        \r\n        require(tokenDisabled[_token],\"already enabled\");\r\n        tokenDisabled[_token] = false;\r\n        presaleDisabled[tokenToPresaleAddr[_token]] = false;        \r\n        \r\n    }\r\n\r\n    function addToModerator(address _newModerator) public onlyOwner {\r\n        require(!Moderator[_newModerator],\"already added\");\r\n        Moderator[_newModerator] = true;\r\n    \r\n    }    \r\n    function removeFromModerator(address _oldModerator) public onlyOwner {\r\n        require(Moderator[_oldModerator],\"already removed or never added\");\r\n        Moderator[_oldModerator] = false;\r\n    \r\n    }\r\n    \r\n    function updateListScore(uint256 _index,  uint256 _updateScore) public onlyOwner {\r\n        top10[_index] = _updateScore;\r\n    \r\n    }\r\n    function updateListTokenAddress(uint256 _index,  address _updateAddress) public onlyOwner {\r\n        top10TokAddr[_index] = _updateAddress;\r\n    \r\n    }\r\n    function updateListPresaleAddress(address _indexTokenAddress,  address _updatePresaleAddress) public onlyOwner {\r\n        tokenToPresaleAddr[_indexTokenAddress] = _updatePresaleAddress;\r\n    \r\n    }\r\n    \r\n    function getTimeStamp() public view returns(uint256) {\r\n        return block.timestamp;\r\n    \r\n    }\r\n    function withdrawToken(address _token) public onlyOwner {\r\n        IERC20(_token).transfer(team_acc, IERC20(_token).balanceOf(address(this)));\r\n    \r\n    }\r\n    function withdrawNative(uint256 _amount) public payable onlyOwner {\r\n        payable(team_acc).transfer(_amount);\r\n    \r\n    }  \r\n}"
    }
  }
}