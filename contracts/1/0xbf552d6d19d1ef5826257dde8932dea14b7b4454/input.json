{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/AppCoinsTracker.sol":{"content":"pragma solidity >=0.4.25 <0.7.0;\npragma experimental ABIEncoderV2;\n\ncontract AppCoinsTracker {\n\n    ///////// STRUCTS /////////\n    struct CampaignLaunchedInformation {\n        bytes32 bidId;\n        string packageName;\n        string endPoint;\n        uint[3] countries;\n        uint price;\n        uint budget;\n        uint startDate;\n        uint endDate;\n    }\n\n    struct BulkPoaInformation {\n        bytes32 bidId;\n        bytes rootHash;\n        bytes signature;\n        uint256 newHashes;\n    }\n\n    struct OffChainBuyInformation {\n        address wallet;\n        bytes32 rootHash;\n    }\n    ///////// END: STRUCTS /////////\n\n    ///////// EVENTS /////////\n    event CampaignLaunched(\n        address owner,\n        bytes32 bidId,\n        string packageName,\n        uint[3] countries,\n        uint price,\n        uint budget,\n        uint startDate,\n        uint endDate,\n        string endPoint\n    );\n\n    event CampaignCancelled(\n        address owner,\n        bytes32 bidId\n    );\n\n    event BulkPoARegistered(\n        address owner,\n        bytes32 bidId,\n        bytes rootHash,\n        bytes signature,\n        uint256 newHashes\n    );\n\n    event OffChainBuy(\n        address _wallet,\n        bytes32 _rootHash\n    );\n    ///////// END: EVENTS /////////\n\n    /**\n    @notice Emits events informing the launch of campaigns.\n    @dev For each CampaignLaunchedInformation passed as argument is emited in\n         a CampaignedLaunched event.\n    @param _campaigns_launched_information List of CampaignLaunchedInformation\n           containing the information of campaigns that have been lauched.\n    */\n    function createCampaigns (CampaignLaunchedInformation[] memory\n                _campaigns_launched_information)public {\n        for(uint i = 0; i < _campaigns_launched_information.length; i++){\n            emit CampaignLaunched(\n                msg.sender,\n                _campaigns_launched_information[i].bidId,\n                _campaigns_launched_information[i].packageName,\n                _campaigns_launched_information[i].countries,\n                _campaigns_launched_information[i].price,\n                _campaigns_launched_information[i].budget,\n                _campaigns_launched_information[i].startDate,\n                _campaigns_launched_information[i].endDate,\n                _campaigns_launched_information[i].endPoint\n            );\n        }\n    }\n\n    /**\n    @notice Emits events informing the cancelation of campaigns.\n    @dev For each bidId passed as argument is emited in a CampaignedCancel event.\n    @param _bidIdList List of bidId of campaigns that have been cancelled.\n    */\n    function cancelCampaigns (bytes32[] memory _bidIdList) public {\n        for(uint i = 0; i < _bidIdList.length; i++) {\n            emit CampaignCancelled(msg.sender, _bidIdList[i]);\n        }\n    }\n\n    /**\n    @notice Emits events registering the root hash of the proof-of-attentions\n            transactions of a multiple blockchain_events.\n    @dev For each BulkPoaInformation passed as argument is emited in a\n         BulkPoARegistered event.\n    @param _bulks_poa_information List of BulkPoaInformation of campaigns that\n                                  have PoA that haven't been registered.\n    */\n    function bulkRegisterPoaOfMultipleCampaigns\n                (BulkPoaInformation[] memory _bulks_poa_information) public {\n        for(uint i = 0; i < _bulks_poa_information.length; i++) {\n            emit BulkPoARegistered(\n                msg.sender,\n                _bulks_poa_information[i].bidId,\n                _bulks_poa_information[i].rootHash,\n                _bulks_poa_information[i].signature,\n                _bulks_poa_information[i].newHashes\n            );\n        }\n    }\n\n    /**\n    @notice Emits events informing offchain transactions for in-app-billing\n    @dev For each OffChainBuyInformation passed as argument is emited in a OffChainBuyInformation\n         event.\n    @param _off_chain_buys List of OffChainBuyInformation - wallets and rootHashes - for\n                           which a OffChainBuyInformation event will be issued.\n    */\n    function informOffChainBuys(OffChainBuyInformation[] memory\n                _off_chain_buys) public {\n        for(uint i = 0; i < _off_chain_buys.length; i++){\n            emit OffChainBuy(_off_chain_buys[i].wallet,\n                             _off_chain_buys[i].rootHash);\n        }\n    }\n}\n"}}}