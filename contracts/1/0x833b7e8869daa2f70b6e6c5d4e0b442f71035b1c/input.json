{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/MultiSendNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC1155 {\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\r\n}\r\n \r\n\r\n\r\ncontract MultiSendNFT is Ownable {\r\n\r\n    uint256 public fee = 0.03 ether;\r\n    uint256 public feeInTokens = 1 ether;\r\n    \r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    //event MultiSendDetails(address indexed to, uint256 indexed tokenId, address indexed owner);\r\n\r\n    bool private _paused = false;\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n    \r\n    bool private _pausedToken = false;\r\n    event PausedToken(address account);\r\n    event UnpausedToken(address account);\r\n\r\n\r\n    IERC20 feeToken;\r\n\r\n    constructor(IERC20 _feeToken) {\r\n        feeToken = _feeToken;\r\n    }\r\n\r\n    function multiSendIERC1155(\r\n        IERC1155 token,\r\n        address[] calldata recipients,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data) external payable {\r\n\r\n        require(!paused(), \"Pausable: paused\");\r\n        require(token.isApprovedForAll(msg.sender, address(this)), \"Sender has not approved MultiSendNFT contract\");\r\n        require(msg.value >= fee, \"Insufficient eth fee value provided\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 preBalance = token.balanceOf(msg.sender, ids[i]);\r\n            uint256 reqBalance = recipients.length * values[i];\r\n\r\n            require(reqBalance <= preBalance, \"Insufficient balance\");\r\n        }\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            token.safeBatchTransferFrom(msg.sender, recipients[i], ids, values, data);\r\n        }\r\n    }\r\n\r\n    function multiSendERC721(\r\n        IERC721 token, \r\n        address[] calldata recipients, \r\n        uint256[] calldata ids) external payable {\r\n\r\n        require(!paused(), \"Pausable: paused\");\r\n        require(token.isApprovedForAll(msg.sender, address(this)), \"Sender has not approved MultiSendNFT contract\");\r\n        require(msg.value >= fee, \"Insufficient eth fee value provided\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            //address owner = token.ownerOf(ids[i]);\r\n            //emit MultiSendDetails(recipients[i], ids[i], owner);\r\n\r\n            //from, to, tokenId\r\n            token.safeTransferFrom(msg.sender, recipients[i], ids[i]);\r\n        }\r\n    }\r\n\r\n    function multiBurnERC721(\r\n        IERC721 token, \r\n        uint256[] calldata ids) external payable {\r\n\r\n        require(!paused(), \"Pausable: paused\");\r\n        require(token.isApprovedForAll(msg.sender, address(this)), \"Sender has not approved MultiSendNFT contract\");\r\n        require(msg.value >= fee, \"Insufficient eth fee value provided\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            token.safeTransferFrom(msg.sender, burnAddress, ids[i]);\r\n        }\r\n    }\r\n\r\n    function multiSendERC721Token(\r\n        IERC721 token, \r\n        address[] calldata recipients, \r\n        uint256[] calldata ids) external payable {\r\n\r\n        require(!pausedToken(), \"Pausable: paused\");\r\n        require(token.isApprovedForAll(msg.sender, address(this)), \"Sender has not approved MultiSendNFT contract\");\r\n \r\n        require(\r\n            feeToken.transferFrom(msg.sender, address(this), feeInTokens)\r\n            , \"Could not transfer payment tokens to contract\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            token.safeTransferFrom(msg.sender, recipients[i], ids[i]);\r\n        }\r\n    }\r\n\r\n    function multiBurnERC721Token(\r\n        IERC721 token, \r\n        uint256[] calldata ids) external payable {\r\n\r\n        require(!pausedToken(), \"Pausable: paused\");\r\n        require(token.isApprovedForAll(msg.sender, address(this)), \"Sender has not approved MultiSendNFT contract\");\r\n\r\n        require(\r\n            feeToken.transferFrom(msg.sender, address(this), feeInTokens)\r\n            , \"Could not transfer payment tokens to contract\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            token.safeTransferFrom(msg.sender, burnAddress, ids[i]);\r\n        }\r\n    }\r\n\r\n    function setFeeToken(IERC20 _feeToken) external onlyOwner {\r\n        feeToken = _feeToken;\r\n    }\r\n\r\n    function setFee(uint256 _newFee) external onlyOwner {\r\n        fee = _newFee;\r\n    }\r\n\r\n    function setBurnAddress(address _newBurnAddress) external onlyOwner {\r\n        burnAddress = _newBurnAddress;\r\n    }\r\n\r\n    function adminWithdrawETH() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function adminWithdrawERC20(address token) external onlyOwner {\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function adminWithdrawERC721(address token, uint256 _tokenId) external onlyOwner {\r\n        IERC721(token).transferFrom(address(this), msg.sender, _tokenId);\r\n    }\r\n\r\n    function adminWithdrawERC721Multi(address token, uint256[] calldata _tokenIds) external onlyOwner {\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            IERC721(token).transferFrom(address(this), msg.sender, _tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        require(!paused(), \"Already paused\");\r\n\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        require(paused(), \"Already un-paused\");\r\n\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function pauseToken() external onlyOwner {\r\n        require(!pausedToken(), \"Already paused for tokens\");\r\n\r\n        _pausedToken = true;\r\n        emit PausedToken(_msgSender());\r\n    }\r\n\r\n    function unpauseToken() external onlyOwner {\r\n        require(pausedToken(), \"Already un-paused for tokens\");\r\n\r\n        _pausedToken = false;\r\n        emit UnpausedToken(_msgSender());\r\n    }\r\n\r\n    function pausedToken() public view virtual returns (bool) {\r\n        return _pausedToken;\r\n    }\r\n\r\n}\r\n"
    }
  }
}