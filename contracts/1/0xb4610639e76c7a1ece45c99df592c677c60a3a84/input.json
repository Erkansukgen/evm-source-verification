{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "VoteProxy.sol": {
      "content": "/// VoteProxy.sol\r\n\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n// vote w/ a hot or cold wallet using a proxy identity\r\npragma solidity >=0.4.24;\r\n\r\ninterface TokenLike {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function approve(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function push(address, uint256) external;\r\n}\r\n\r\ninterface ChiefLike {\r\n    function GOV() external view returns (TokenLike);\r\n    function IOU() external view returns (TokenLike);\r\n    function deposits(address) external view returns (uint256);\r\n    function lock(uint256) external;\r\n    function free(uint256) external;\r\n    function vote(address[] calldata) external returns (bytes32);\r\n    function vote(bytes32) external;\r\n}\r\n\r\ncontract VoteProxy {\r\n    address   public cold;\r\n    address   public hot;\r\n    TokenLike public gov;\r\n    TokenLike public iou;\r\n    ChiefLike public chief;\r\n\r\n    constructor(address _chief, address _cold, address _hot) public {\r\n        chief = ChiefLike(_chief);\r\n        cold = _cold;\r\n        hot = _hot;\r\n\r\n        gov = chief.GOV();\r\n        iou = chief.IOU();\r\n        gov.approve(address(chief), uint256(-1));\r\n        iou.approve(address(chief), uint256(-1));\r\n    }\r\n\r\n    modifier auth() {\r\n        require(msg.sender == hot || msg.sender == cold, \"Sender must be a Cold or Hot Wallet\");\r\n        _;\r\n    }\r\n\r\n    function lock(uint256 wad) public auth {\r\n        gov.pull(cold, wad);   // mkr from cold\r\n        chief.lock(wad);       // mkr out, ious in\r\n    }\r\n\r\n    function free(uint256 wad) public auth {\r\n        chief.free(wad);       // ious out, mkr in\r\n        gov.push(cold, wad);   // mkr to cold\r\n    }\r\n\r\n    function freeAll() public auth {\r\n        chief.free(chief.deposits(address(this)));\r\n        gov.push(cold, gov.balanceOf(address(this)));\r\n    }\r\n\r\n    function vote(address[] memory yays) public auth returns (bytes32) {\r\n        return chief.vote(yays);\r\n    }\r\n\r\n    function vote(bytes32 slate) public auth {\r\n        chief.vote(slate);\r\n    }\r\n}"
    }
  }
}