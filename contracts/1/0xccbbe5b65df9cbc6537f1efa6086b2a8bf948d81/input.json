{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 5
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "presales pro pair dep.sol": {
      "content": "\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.6;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// SafeMath library\r\n// ----------------------------------------------------------------------------\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Prince is ReentrancyGuard {\r\n    uint public constant BASE              = 10**18;\r\n    uint public  tx1; // Token tx fee\r\n    uint public  tx2 = 99;  // Main tx fee\r\n    uint public constant MIN_BPOW_BASE     = 1 wei;\r\n    uint public constant MAX_BPOW_BASE     = (2 * BASE) - 1 wei;\r\n    uint public constant BPOW_PRECISION    = BASE / 10**10;\r\n    uint public decimals;\r\n}\r\n\r\n\r\ncontract RMath is ReentrancyGuard, Prince {\r\n\r\n    function btoi(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return a / BASE;\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * BASE;\r\n    }\r\n\r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + (BASE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / BASE;\r\n        return c2;\r\n    }\r\n\r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * BASE;\r\n        require(a == 0 || c0 / a == BASE, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    // DSMath.wpow\r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : BASE;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\r\n\r\n        uint whole  = bfloor(exp);\r\n        uint remain = bsub(exp, whole);\r\n\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n\r\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        // term 0:\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, BASE);\r\n        uint term = BASE;\r\n        uint sum   = term;\r\n        bool negative = false;\r\n\r\n\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * BASE;\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BASE));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint a, uint m) internal pure returns (uint r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n    function burnTokens(uint256 _amount) external;\r\n    function decimals() external view returns (uint8);\r\n    \r\n    function calculateFeesBeforeSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external view returns (uint256, uint256);\r\n    \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n         bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface FEGdeployer {\r\n    function createPair(address token, uint256 liqmain, uint256 liqtoken, address owner) external returns (address pair);\r\n    function getPairContract(address tokenA, address tokenB) external returns (address);\r\n    function changeAddys(address fegstake, address _fegp, address se) external;\r\n    function dockPair(address token, bool _bool) external;\r\n    \r\n}\r\n\r\ninterface PROpair{\r\n    function addWhiteListContract(address _addy, bool boolean) external;\r\n    function setStakePool(address _stake, address _fegp, address newd) external;\r\n    function setPRP(address prp) external;\r\n    function setTX1(uint256 amt) external;\r\n}\r\n\r\ninterface psDep {\r\n    function reportTotalRaised(uint256 amt, address token) external;\r\n    function dockit(address token) external;\r\n    function resetIsPresale(address tokenA) external;\r\n}\r\n\r\ninterface PreSalePair {\r\n    function initialize(address, address, address, address, address, uint256) external; \r\n}\r\n\r\ninterface swap {\r\n        function BUY(\r\n        uint256 dot,\r\n        address to,\r\n        uint256 minAmountOut\r\n    )\r\n        external payable\r\n        returns(uint256 tokenAmountOut);\r\n}\r\n\r\ninterface wrap {\r\n    function deposit() external payable;\r\n    function withdraw(uint amt) external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract smartPresaleDeployer{\r\n    using Address for address;\r\n    event PreSaleCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n    address public Main   = 0xf786c34106762Ab4Eeb45a51B42a62470E9D5332;\r\n    address public setter = 0x86882FA66aC57039b10D78e2D3205592A44664c0;\r\n    mapping(address => mapping(address => address)) public getPreSale;\r\n    address[] public allPreSales;\r\n    uint256 public totalRaisedAll;\r\n    address public FEGpair = 0xf2bda964ec2D2fcB1610c886eD4831bf58f64948;\r\n    address public Deploy   = 0x87d7adDa3Fb7d6C34cCC3e57C11874c04318A9CC;\r\n    FEGdeployer public FEGexV2Contract; //FEGdeployer\r\n    mapping(address=>bool) public isPresale;\r\n    \r\n    constructor(){\r\n    FEGexV2Contract = FEGdeployer(Deploy);\r\n    }\r\n    \r\n    /*function createPreSale(address token) external returns (address presale) {\r\n    address got = FEGdeployer(Deploy).getPairContract(Main, token);    \r\n    uint256 hold = IERC20(token).balanceOf(msg.sender);\r\n    require(hold > 0, \"You do not hold\");\r\n    require(got == address(0), \"Pair Exists\");    \r\n    require(isPresale[token] == false, \"PreSale_EXISTS\"); // single check is sufficient \r\n        bytes memory bytecode = type(SMARTPreSale).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(Main, token));\r\n        assembly {\r\n            presale := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        \r\n    uint8 _decimals = IERC20(token).decimals();   \r\n    getPreSale[Main][token] = presale;\r\n    getPreSale[token][Main] = presale;\r\n    allPreSales.push(presale);\r\n    isPresale[token] = true;\r\n    isPresale[presale] = true;\r\n    FEGdeployer(Deploy).dockPair(token, true);\r\n    PreSalePair(presale).initialize(msg.sender, token, address(this), Deploy, FEGpair, _decimals);\r\n    emit PreSaleCreated(Main, token, presale, allPreSales.length);\r\n    \r\n    return presale;\r\n    }   */\r\n    \r\n    function setFP(address addy) public {\r\n        require(msg.sender == setter && addy != address(0), \"No permission\");\r\n        FEGpair = addy;\r\n    }\r\n    \r\n    function setSetter(address addy) public {\r\n        require(msg.sender == setter && addy != address(0), \"No permission\");\r\n        setter = addy;\r\n    }\r\n    \r\n    function setDeploy(address addy) public {\r\n        require(msg.sender == setter && addy != address(0), \"You do not have permission\");\r\n        Deploy = addy;\r\n    }\r\n    \r\n    function reportTotalRaised(uint256 amt, address token) external  {\r\n        address presale = getPreSale[Main][token];\r\n        require(msg.sender == presale, \"Only PreSale Contract can report\");\r\n        totalRaisedAll += amt;\r\n    }\r\n    \r\n    function getPreSaleContract(address tokenA, address tokenB) public view returns(address){\r\n        return getPreSale[tokenA][tokenB];\r\n    }\r\n    \r\n    function resetIsPresale(address tokenA) external{\r\n        require(msg.sender == setter || isPresale[msg.sender] == true, \"You do not have permission\");\r\n        isPresale[tokenA] = false;\r\n        isPresale[msg.sender] = false;\r\n        getPreSale[Main][tokenA] = address(0);\r\n        getPreSale[tokenA][Main] = address(0);\r\n    }\r\n    \r\n    function dockit(address token) external {\r\n        require(isPresale[msg.sender] == true, \"Only presales can call this\");\r\n        FEGdeployer(Deploy).dockPair(token, false);\r\n    }\r\n    \r\n    function changeaddy(address fegstake, address _fegp, address se) public {\r\n        require(msg.sender == setter, \"You do not have permission\");\r\n        FEGdeployer(Deploy).changeAddys(fegstake, _fegp, se);\r\n    }\r\n    \r\n    function dock(address token, bool _bool) public{\r\n        require(msg.sender == setter, \"You do not have permission\");\r\n        FEGdeployer(Deploy).dockPair(token, _bool);\r\n    }\r\n    \r\n    function dockBulk(address token0, address token1, address token2, address token3, address token4, address token5, address token6, address token7, address token8, address token9, bool _bool) public{\r\n        require(msg.sender == setter, \"You do not have permission\");\r\n        FEGdeployer(Deploy).dockPair(token0, _bool);\r\n        FEGdeployer(Deploy).dockPair(token1, _bool);\r\n        FEGdeployer(Deploy).dockPair(token2, _bool);\r\n        FEGdeployer(Deploy).dockPair(token3, _bool);\r\n        FEGdeployer(Deploy).dockPair(token4, _bool);\r\n        FEGdeployer(Deploy).dockPair(token5, _bool);\r\n        FEGdeployer(Deploy).dockPair(token6, _bool);\r\n        FEGdeployer(Deploy).dockPair(token7, _bool);\r\n        FEGdeployer(Deploy).dockPair(token8, _bool);\r\n        FEGdeployer(Deploy).dockPair(token9, _bool);\r\n    }\r\n    \r\n    function addWhiteList(address addy, address pair, bool _bool) public {\r\n        require(msg.sender == setter, \"You do not have permission\");\r\n        PROpair(pair).addWhiteListContract(addy, _bool);\r\n    }\r\n    \r\n    function setSPool(address _stake, address _fegp, address newd, address pair) public {\r\n        require(msg.sender == setter, \"You do not have permission\");\r\n        PROpair(pair).setStakePool(_stake, _fegp, newd);\r\n    }\r\n    \r\n    function setPairPool(address addy, address pair) public {\r\n        require(msg.sender == setter, \"You do not have permission\");\r\n        PROpair(pair).setPRP(addy);\r\n    }\r\n    \r\n    function setTx1(uint256 tx1, address pair) public {\r\n        require(msg.sender == setter, \"You do not have permission\");\r\n        PROpair(pair).setTX1(tx1);\r\n    }\r\n}\r\n"
    }
  }
}