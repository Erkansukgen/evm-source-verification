{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "tests/Fryer.sol": {
      "content": "// Dependency file: @openzeppelin/contracts/math/Math.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\n\n\n// pragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// Dependency file: contracts/interfaces/IChainlink.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\ninterface IChainlink {\n  function latestAnswer() external view returns (int256);\n}\n\n// Dependency file: contracts/interfaces/IFryerConfig.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\ninterface IFryerConfig {\n    function getConfigValue(bytes32 _name) external view returns (uint256);\n\n    function PERCENT_DENOMINATOR() external view returns (uint256);\n\n    function ZERO_ADDRESS() external view returns (address);\n}\n\n\n// Dependency file: contracts/interfaces/IVaultAdapter.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n/// Interface for all Vault Adapter implementations.\ninterface IVaultAdapter {\n\n  /// @dev Gets the token that the adapter accepts.\n  function token() external view returns (address);\n\n  /// @dev The total value of the assets deposited into the vault.\n  function totalValue() external view returns (uint256);\n\n  /// @dev Deposits funds into the vault.\n  ///\n  /// @param _amount  the amount of funds to deposit.\n  function deposit(uint256 _amount) external;\n\n  /// @dev Attempts to withdraw funds from the wrapped vault.\n  ///\n  /// The amount withdrawn to the recipient may be less than the amount requested.\n  ///\n  /// @param _recipient the recipient of the funds.\n  /// @param _amount    the amount of funds to withdraw.\n  function withdraw(address _recipient, uint256 _amount) external;\n}\n\n// Dependency file: contracts/interfaces/IOven.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n\n\n\ninterface IOven {\n    function distribute (address origin, uint256 amount) external;\n}\n\n// Dependency file: contracts/interfaces/IMintableERC20.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n\ninterface IMintableERC20 {\n  function mint(address _recipient, uint256 _amount) external;\n  function burnFrom(address account, uint256 amount) external;\n  function lowerHasMinted(uint256 amount)external;\n}\n\n\n// Dependency file: contracts/interfaces/IDetailedERC20.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\ninterface IDetailedERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\n\n// Dependency file: contracts/interfaces/IERC3156FlashBorrower.sol\n\n// pragma solidity >=0.6.0 <=0.8.0;\n\n\ninterface IERC3156FlashBorrower {\n\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n\n\n// Dependency file: contracts/interfaces/IERC3156FlashLender.sol\n\n// pragma solidity >=0.6.0 <=0.8.0;\n// import \"contracts/interfaces/IERC3156FlashBorrower.sol\";\n\n\ninterface IERC3156FlashLender {\n\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(\n        address token\n    ) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(\n        address token,\n        uint256 amount\n    ) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n\n// Dependency file: contracts/libraries/Upgradable.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\ncontract UpgradableProduct {\n    address public impl;\n\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\n\n    constructor() public {\n        impl = msg.sender;\n    }\n\n    modifier requireImpl() {\n        require(msg.sender == impl, \"FORBIDDEN\");\n        _;\n    }\n\n    function upgradeImpl(address _newImpl) public requireImpl {\n        require(_newImpl != address(0), \"INVALID_ADDRESS\");\n        require(_newImpl != impl, \"NO_CHANGE\");\n        address lastImpl = impl;\n        impl = _newImpl;\n        emit ImplChanged(lastImpl, _newImpl);\n    }\n}\n\ncontract UpgradableGovernance {\n    address public governor;\n\n    event GovernorChanged(\n        address indexed _oldGovernor,\n        address indexed _newGovernor\n    );\n\n    constructor() public {\n        governor = msg.sender;\n    }\n\n    modifier requireGovernor() {\n        require(msg.sender == governor, \"FORBIDDEN\");\n        _;\n    }\n\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\n        require(_newGovernor != address(0), \"INVALID_ADDRESS\");\n        require(_newGovernor != governor, \"NO_CHANGE\");\n        address lastGovernor = governor;\n        governor = _newGovernor;\n        emit GovernorChanged(lastGovernor, _newGovernor);\n    }\n}\n\n\n// Dependency file: contracts/libraries/FixedPointMath.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n\nlibrary FixedPointMath {\n  uint256 public constant DECIMALS = 18;\n  uint256 public constant SCALAR = 10**DECIMALS;\n\n  struct uq192x64 {\n    uint256 x;\n  }\n\n  function fromU256(uint256 value) internal pure returns (uq192x64 memory) {\n    uint256 x;\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\n    return uq192x64(x);\n  }\n\n  function maximumValue() internal pure returns (uq192x64 memory) {\n    return uq192x64(uint256(-1));\n  }\n\n  function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\n    uint256 x;\n    require((x = self.x + value.x) >= self.x);\n    return uq192x64(x);\n  }\n\n  function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n    return add(self, fromU256(value));\n  }\n\n  function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\n    uint256 x;\n    require((x = self.x - value.x) <= self.x);\n    return uq192x64(x);\n  }\n\n  function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n    return sub(self, fromU256(value));\n  }\n\n  function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n    uint256 x;\n    require(value == 0 || (x = self.x * value) / value == self.x);\n    return uq192x64(x);\n  }\n\n  function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n    require(value != 0);\n    return uq192x64(self.x / value);\n  }\n\n  function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {\n    if (self.x < value.x) {\n      return -1;\n    }\n\n    if (self.x > value.x) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  function decode(uq192x64 memory self) internal pure returns (uint256) {\n    return self.x / SCALAR;\n  }\n}\n\n// Dependency file: contracts/libraries/TransferHelper.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// Dependency file: contracts/libraries/Vault.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol';\n// import 'contracts/interfaces/IVaultAdapter.sol';\n// import 'contracts/libraries/TransferHelper.sol';\n\n/// @title Pool\n///\n/// @dev A library which provides the Vault data struct and associated functions.\nlibrary Vault {\n\tusing Vault for Data;\n\tusing Vault for List;\n\tusing TransferHelper for address;\n\tusing SafeMath for uint256;\n\n\tstruct Data {\n\t\tIVaultAdapter adapter;\n\t\tuint256 totalDeposited;\n\t}\n\n\tstruct List {\n\t\tData[] elements;\n\t}\n\n\t/// @dev Gets the total amount of assets deposited in the vault.\n\t///\n\t/// @return the total assets.\n\tfunction totalValue(Data storage _self) internal view returns (uint256) {\n\t\treturn _self.adapter.totalValue();\n\t}\n\n\t/// @dev Gets the token that the vault accepts.\n\t///\n\t/// @return the accepted token.\n\tfunction token(Data storage _self) internal view returns (address) {\n\t\treturn _self.adapter.token();\n\t}\n\n\t/// @dev Deposits funds from the caller into the vault.\n\t///\n\t/// @param _amount the amount of funds to deposit.\n\tfunction deposit(Data storage _self, uint256 _amount) internal returns (uint256) {\n\t\t// Push the token that the vault accepts onto the stack to save gas.\n\t\taddress _token = _self.token();\n\t\t_token.safeTransfer(address(_self.adapter), _amount);\n\t\t_self.adapter.deposit(_amount);\n\t\t_self.totalDeposited = _self.totalDeposited.add(_amount);\n\n\t\treturn _amount;\n\t}\n\n\t/// @dev Withdraw deposited funds from the vault.\n\t///\n\t/// @param _recipient the account to withdraw the tokens to.\n\t/// @param _amount    the amount of tokens to withdraw.\n\tfunction withdraw(\n\t\tData storage _self,\n\t\taddress _recipient,\n\t\tuint256 _amount\n\t) internal returns (uint256, uint256) {\n\t\t(uint256 _withdrawnAmount, uint256 _decreasedValue) = _self.directWithdraw(_recipient, _amount);\n\t\t_self.totalDeposited = _self.totalDeposited.sub(_decreasedValue);\n\t\treturn (_withdrawnAmount, _decreasedValue);\n\t}\n\n\t/// @dev Directly withdraw deposited funds from the vault.\n\t///\n\t/// @param _recipient the account to withdraw the tokens to.\n\t/// @param _amount    the amount of tokens to withdraw.\n\tfunction directWithdraw(\n\t\tData storage _self,\n\t\taddress _recipient,\n\t\tuint256 _amount\n\t) internal returns (uint256, uint256) {\n\t\taddress _token = _self.token();\n\n\t\tuint256 _startingBalance = IERC20(_token).balanceOf(_recipient);\n\t\tuint256 _startingTotalValue = _self.totalValue();\n\n\t\t_self.adapter.withdraw(_recipient, _amount);\n\n\t\tuint256 _endingBalance = IERC20(_token).balanceOf(_recipient);\n\t\tuint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\n\n\t\tuint256 _endingTotalValue = _self.totalValue();\n\t\tuint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\n\n\t\treturn (_withdrawnAmount, _decreasedValue);\n\t}\n\n\t/// @dev Withdraw all the deposited funds from the vault.\n\t///\n\t/// @param _recipient the account to withdraw the tokens to.\n\tfunction withdrawAll(Data storage _self, address _recipient) internal returns (uint256, uint256) {\n\t\treturn _self.withdraw(_recipient, _self.totalDeposited);\n\t}\n\n\t/// @dev Harvests yield from the vault.\n\t///\n\t/// @param _recipient the account to withdraw the harvested yield to.\n\tfunction harvest(Data storage _self, address _recipient) internal returns (uint256, uint256) {\n\t\tif (_self.totalValue() <= _self.totalDeposited) {\n\t\t\treturn (0, 0);\n\t\t}\n\t\tuint256 _withdrawAmount = _self.totalValue().sub(_self.totalDeposited);\n\t\treturn _self.directWithdraw(_recipient, _withdrawAmount);\n\t}\n\n\t/// @dev Adds a element to the list.\n\t///\n\t/// @param _element the element to add.\n\tfunction push(List storage _self, Data memory _element) internal {\n\t\tfor (uint256 i = 0; i < _self.elements.length; i++) {\n\t\t\t// Avoid duplicated adapter\n\t\t\trequire(address(_element.adapter) != address(_self.elements[i].adapter), '!Repeat adapter');\n\t\t}\n\t\t_self.elements.push(_element);\n\t}\n\n\t/// @dev Gets a element from the list.\n\t///\n\t/// @param _index the index in the list.\n\t///\n\t/// @return the element at the specified index.\n\tfunction get(List storage _self, uint256 _index) internal view returns (Data storage) {\n\t\treturn _self.elements[_index];\n\t}\n\n\t/// @dev Gets the last element in the list.\n\t///\n\t/// This function will revert if there are no elements in the list.\n\t///\n\t/// @return the last element in the list.\n\tfunction last(List storage _self) internal view returns (Data storage) {\n\t\treturn _self.elements[_self.lastIndex()];\n\t}\n\n\t/// @dev Gets the index of the last element in the list.\n\t///\n\t/// This function will revert if there are no elements in the list.\n\t///\n\t/// @return the index of the last element.\n\tfunction lastIndex(List storage _self) internal view returns (uint256) {\n\t\tuint256 _length = _self.length();\n\t\treturn _length.sub(1, 'Vault.List: empty');\n\t}\n\n\t/// @dev Gets the number of elements in the list.\n\t///\n\t/// @return the number of elements.\n\tfunction length(List storage _self) internal view returns (uint256) {\n\t\treturn _self.elements.length;\n\t}\n}\n\n\n// Dependency file: contracts/libraries/ConfigNames.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\nlibrary ConfigNames {\n    bytes32 public constant FRYER_LTV = bytes32(\"FRYER_LTV\");\n    bytes32 public constant FRYER_HARVEST_FEE = bytes32(\"FRYER_HARVEST_FEE\");\n    bytes32 public constant FRYER_VAULT_PERCENTAGE =\n        bytes32(\"FRYER_VAULT_PERCENTAGE\");\n\n    bytes32 public constant FRYER_FLASH_FEE_PROPORTION =\n        bytes32(\"FRYER_FLASH_FEE_PROPORTION\");\n\n    bytes32 public constant PRIVATE = bytes32(\"PRIVATE\");\n    bytes32 public constant STAKE = bytes32(\"STAKE\");\n}\n\n\n// Dependency file: contracts/libraries/CDP.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\n// import 'contracts/libraries/FixedPointMath.sol';\n// import 'contracts/libraries/TransferHelper.sol';\n// import 'contracts/libraries/ConfigNames.sol';\n// import 'contracts/interfaces/IFryerConfig.sol';\n\nlibrary CDP {\n\tusing CDP for Data;\n\tusing FixedPointMath for FixedPointMath.uq192x64;\n\tusing SafeMath for uint256;\n\n\tuint256 public constant MAXIMUM_COLLATERALIZATION_LIMIT = 4000000000000000000;\n\n\tstruct Context {\n\t\tIFryerConfig fryerConfig;\n\t\tFixedPointMath.uq192x64 accumulatedYieldWeight;\n\t}\n\n\tstruct Data {\n\t\tuint256 totalDeposited;\n\t\tuint256 totalDebt;\n\t\tuint256 totalCredit;\n\t\tuint256 lastDeposit;\n\t\tFixedPointMath.uq192x64 lastAccumulatedYieldWeight;\n\t}\n\n\tfunction update(Data storage _self, Context storage _ctx) internal {\n\t\tuint256 _earnedYield = _self.getEarnedYield(_ctx);\n\t\tif (_earnedYield > _self.totalDebt) {\n\t\t\tuint256 _currentTotalDebt = _self.totalDebt;\n\t\t\t_self.totalDebt = 0;\n\t\t\t_self.totalCredit = _earnedYield.sub(_currentTotalDebt);\n\t\t} else {\n\t\t\t_self.totalCredit = 0;\n\t\t\t_self.totalDebt = _self.totalDebt.sub(_earnedYield);\n\t\t}\n\t\t_self.lastAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\n\t}\n\n\tfunction checkHealth(\n\t\tData storage _self,\n\t\tContext storage _ctx,\n\t\tstring memory _msg\n\t) internal view {\n\t\trequire(_self.isHealthy(_ctx), _msg);\n\t}\n\n\tfunction isHealthy(Data storage _self, Context storage _ctx) internal view returns (bool) {\n\t\treturn collateralizationLimit(_ctx).cmp(_self.getCollateralizationRatio(_ctx)) <= 0;\n\t}\n\n\tfunction collateralizationLimit(Context storage _ctx) internal view returns (FixedPointMath.uq192x64 memory) {\n\t\treturn\n\t\t\tFixedPointMath.uq192x64(\n\t\t\t\tMAXIMUM_COLLATERALIZATION_LIMIT.mul(_ctx.fryerConfig.getConfigValue(ConfigNames.FRYER_LTV)).div(\n\t\t\t\t\t_ctx.fryerConfig.PERCENT_DENOMINATOR()\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\tfunction getUpdatedTotalDebt(Data storage _self, Context storage _ctx) internal view returns (uint256) {\n\t\tuint256 _unclaimedYield = _self.getEarnedYield(_ctx);\n\t\tif (_unclaimedYield == 0) {\n\t\t\treturn _self.totalDebt;\n\t\t}\n\n\t\tuint256 _currentTotalDebt = _self.totalDebt;\n\t\tif (_unclaimedYield >= _currentTotalDebt) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn _currentTotalDebt.sub(_unclaimedYield);\n\t}\n\n\tfunction getUpdatedTotalCredit(Data storage _self, Context storage _ctx) internal view returns (uint256) {\n\t\tuint256 _unclaimedYield = _self.getEarnedYield(_ctx);\n\t\tif (_unclaimedYield == 0) {\n\t\t\treturn _self.totalCredit;\n\t\t}\n\n\t\tuint256 _currentTotalDebt = _self.totalDebt;\n\t\tif (_unclaimedYield <= _currentTotalDebt) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn _self.totalCredit.add(_unclaimedYield.sub(_currentTotalDebt));\n\t}\n\n\tfunction getEarnedYield(Data storage _self, Context storage _ctx) internal view returns (uint256) {\n\t\tFixedPointMath.uq192x64 memory _currentAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\n\t\tFixedPointMath.uq192x64 memory _lastAccumulatedYieldWeight = _self.lastAccumulatedYieldWeight;\n\n\t\tif (_currentAccumulatedYieldWeight.cmp(_lastAccumulatedYieldWeight) == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn _currentAccumulatedYieldWeight.sub(_lastAccumulatedYieldWeight).mul(_self.totalDeposited).decode();\n\t}\n\n\tfunction getCollateralizationRatio(Data storage _self, Context storage _ctx)\n\t\tinternal\n\t\tview\n\t\treturns (FixedPointMath.uq192x64 memory)\n\t{\n\t\tuint256 _totalDebt = _self.getUpdatedTotalDebt(_ctx);\n\t\tif (_totalDebt == 0) {\n\t\t\treturn FixedPointMath.maximumValue();\n\t\t}\n\t\treturn FixedPointMath.fromU256(_self.totalDeposited).div(_totalDebt);\n\t}\n}\n\n\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n// import \"@openzeppelin/contracts/utils/Context.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n// Dependency file: contracts/libraries/Convert.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\npragma experimental ABIEncoderV2;\n\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol';\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\n\ncontract Convert {\n\tusing SafeMath for uint256;\n\n\tfunction convertTokenAmount(\n\t\taddress _fromToken,\n\t\taddress _toToken,\n\t\tuint256 _fromAmount\n\t) public view returns (uint256 toAmount) {\n\t\tuint256 fromDecimals = uint256(ERC20(_fromToken).decimals());\n\t\tuint256 toDecimals = uint256(ERC20(_toToken).decimals());\n\t\tif (fromDecimals > toDecimals) {\n\t\t\ttoAmount = _fromAmount.div(10**(fromDecimals.sub(toDecimals)));\n\t\t} else if (toDecimals > fromDecimals) {\n\t\t\ttoAmount = _fromAmount.mul(10**(toDecimals.sub(fromDecimals)));\n\t\t} else {\n\t\t\ttoAmount = _fromAmount;\n\t\t}\n\t\treturn toAmount;\n\t}\n}\n\n\n// Dependency file: contracts/libraries/NoDelegateCall.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n\n/// @title Prevents delegatecall to a contract\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\nabstract contract NoDelegateCall {\n    /// @dev The original address of this contract\n    address private immutable original;\n\n    constructor() public {\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\n        // In other words, this variable won't change when it's checked at runtime.\n        original = address(this);\n    }\n\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\n    function checkNotDelegateCall() private view {\n        require(address(this) == original);\n    }\n\n    /// @notice Prevents delegatecall into the modified method\n    modifier noDelegateCall() {\n        checkNotDelegateCall();\n        _;\n    }\n}\n\n// Root file: contracts/Fryer.sol\n\npragma solidity >=0.6.5 <0.8.0;\n\n// pragma experimental ABIEncoderV2;\n\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/Math.sol\";\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/utils/Address.sol\";\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol\";\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// import \"contracts/interfaces/IChainlink.sol\";\n// import \"contracts/interfaces/IFryerConfig.sol\";\n// import \"contracts/interfaces/IVaultAdapter.sol\";\n// import \"contracts/interfaces/IOven.sol\";\n// import \"contracts/interfaces/IMintableERC20.sol\";\n// import \"contracts/interfaces/IDetailedERC20.sol\";\n// import \"contracts/interfaces/IERC3156FlashLender.sol\";\n// import \"contracts/interfaces/IERC3156FlashBorrower.sol\";\n// import \"contracts/libraries/Upgradable.sol\";\n// import \"contracts/libraries/FixedPointMath.sol\";\n// import \"contracts/libraries/Vault.sol\";\n// import \"contracts/libraries/CDP.sol\";\n// import \"contracts/libraries/TransferHelper.sol\";\n// import \"contracts/libraries/ConfigNames.sol\";\n// import \"contracts/libraries/Convert.sol\";\n// import \"contracts/libraries/NoDelegateCall.sol\";\n\ncontract Fryer is\n    ReentrancyGuard,\n    UpgradableProduct,\n    IERC3156FlashLender,\n    Convert,\n    NoDelegateCall\n{\n    using CDP for CDP.Data;\n    using FixedPointMath for FixedPointMath.uq192x64;\n    using Vault for Vault.Data;\n    using Vault for Vault.List;\n    using TransferHelper for address;\n    using SafeMath for uint256;\n    using Address for address;\n\n    event OvenUpdated(address indexed newOven);\n    event ConfigUpdated(address indexed newConfig);\n    event RewardsUpdated(address indexed reward);\n    event EmergencyExitUpdated(bool indexed emergencyExit);\n    event ActiveVaultUpdated(address indexed adapter);\n    event FundsHarvested(\n        uint256 indexed harvestedAmount,\n        uint256 indexed decreasedValue\n    );\n    event FundsFlushed(uint256 indexed depositedAmount);\n    event TokensDeposited(address indexed user, uint256 indexed amount);\n    event TokensWithdrawn(\n        address indexed user,\n        uint256 indexed amount,\n        uint256 withdrawnAmount,\n        uint256 decreasedValue\n    );\n    event TokensRepaid(\n        address indexed user,\n        uint256 indexed parentAmount,\n        uint256 indexed childAmount\n    );\n    event TokensLiquidated(\n        address indexed user,\n        uint256 indexed amount,\n        uint256 withdrawnAmount,\n        uint256 decreasedValue\n    );\n    event FundsRecalled(\n        uint256 indexed vaultId,\n        uint256 withdrawnAmount,\n        uint256 decreasedValue\n    );\n    event UseFlashloan(\n        address indexed user,\n        address token,\n        uint256 amount,\n        uint256 fee\n    );\n\n    bytes32 public constant FLASH_CALLBACK_SUCCESS =\n        keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    // DAI/USDT/ALUSD\n    address public token;\n\n    // FiresToken\n    address public friesToken;\n\n    address public oven;\n\n    address public rewards;\n\n    uint256 public totalDeposited;\n\n    uint256 public flushActivator;\n\n    bool public initialized;\n\n    bool public emergencyExit;\n\n    CDP.Context private _ctx;\n\n    mapping(address => CDP.Data) private _cdps;\n\n    Vault.List private _vaults;\n\n    address public _linkGasOracle;\n\n    uint256 public pegMinimum;\n\n    IFryerConfig public fryerConfig;\n\n    constructor(\n        address _token,\n        address _friesToken,\n        address _fryerConfig\n    ) public {\n        token = _token;\n        friesToken = _friesToken;\n        flushActivator = 100000 * 10**uint256(IDetailedERC20(token).decimals());\n        fryerConfig = IFryerConfig(_fryerConfig);\n        _ctx.fryerConfig = fryerConfig;\n        _ctx.accumulatedYieldWeight = FixedPointMath.uq192x64(0);\n    }\n\n    modifier expectInitialized() {\n        require(initialized, \"not initialized.\");\n        _;\n    }\n\n    function setOven(address _oven) external requireImpl {\n        require(\n            _oven != fryerConfig.ZERO_ADDRESS(),\n            \"oven address cannot be 0x0.\"\n        );\n        oven = _oven;\n        emit OvenUpdated(_oven);\n    }\n\n    function setConfig(address _config) external requireImpl {\n        require(\n            _config != fryerConfig.ZERO_ADDRESS(),\n            \"config address cannot be 0x0.\"\n        );\n        fryerConfig = IFryerConfig(_config);\n        _ctx.fryerConfig = fryerConfig;\n        emit ConfigUpdated(_config);\n    }\n\n    function setFlushActivator(uint256 _flushActivator) external requireImpl {\n        flushActivator = _flushActivator;\n    }\n\n    function setRewards(address _rewards) external requireImpl {\n        require(\n            _rewards != fryerConfig.ZERO_ADDRESS(),\n            \"rewards address cannot be 0x0.\"\n        );\n        rewards = _rewards;\n        emit RewardsUpdated(_rewards);\n    }\n\n    function setOracleAddress(address Oracle, uint256 peg)\n        external\n        requireImpl\n    {\n        _linkGasOracle = Oracle;\n        pegMinimum = peg;\n    }\n\n    function setEmergencyExit(bool _emergencyExit) external requireImpl {\n        emergencyExit = _emergencyExit;\n\n        emit EmergencyExitUpdated(_emergencyExit);\n    }\n\n    function collateralizationLimit()\n        external\n        view\n        returns (FixedPointMath.uq192x64 memory)\n    {\n        return CDP.collateralizationLimit(_ctx);\n    }\n\n    function initialize(address _adapter) external requireImpl {\n        require(!initialized, \"already initialized\");\n        require(\n            oven != fryerConfig.ZERO_ADDRESS(),\n            \"cannot initialize oven address to 0x0\"\n        );\n        require(\n            rewards != fryerConfig.ZERO_ADDRESS(),\n            \"cannot initialize rewards address to 0x0\"\n        );\n        _updateActiveVault(_adapter);\n        initialized = true;\n    }\n\n    function migrate(address _adapter) external expectInitialized requireImpl {\n        _updateActiveVault(_adapter);\n    }\n\n    function _updateActiveVault(address _adapter) internal {\n        require(\n            _adapter != fryerConfig.ZERO_ADDRESS(),\n            \"active vault address cannot be 0x0.\"\n        );\n        IVaultAdapter adapter = IVaultAdapter(_adapter);\n        require(adapter.token() == token, \"token mismatch.\");\n        _vaults.push(Vault.Data({adapter: adapter, totalDeposited: 0}));\n        emit ActiveVaultUpdated(_adapter);\n    }\n\n    function harvest(uint256 _vaultId)\n        external\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        Vault.Data storage _vault = _vaults.get(_vaultId);\n\n        (uint256 _harvestedAmount, uint256 _decreasedValue) =\n            _vault.harvest(address(this));\n\n        _incomeDistribution(_harvestedAmount);\n\n        emit FundsHarvested(_harvestedAmount, _decreasedValue);\n\n        return (_harvestedAmount, _decreasedValue);\n    }\n\n    function _incomeDistribution(uint256 amount) internal {\n        if (amount > 0) {\n            uint256 feeRate = fryerConfig.getConfigValue(ConfigNames.FRYER_HARVEST_FEE);\n            uint256 _feeAmount =  amount.mul(feeRate).div(fryerConfig.PERCENT_DENOMINATOR());\n            uint256 _distributeAmount = amount.sub(_feeAmount);\n\n            if (totalDeposited > 0) {\n                FixedPointMath.uq192x64 memory _weight =\n                    FixedPointMath.fromU256(_distributeAmount).div(\n                        totalDeposited\n                    );\n                _ctx.accumulatedYieldWeight = _ctx.accumulatedYieldWeight.add(\n                    _weight\n                );\n            }\n\n            if (_feeAmount > 0) {\n                token.safeTransfer(rewards, _feeAmount);\n            }\n\n            if (_distributeAmount > 0) {\n                _distributeToOven(_distributeAmount);\n            }\n        }\n    }\n\n    function recall(uint256 _vaultId, uint256 _amount)\n        external\n        nonReentrant\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        return _recallFunds(_vaultId, _amount);\n    }\n\n    function recallAll(uint256 _vaultId)\n        external\n        nonReentrant\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        Vault.Data storage _vault = _vaults.get(_vaultId);\n        return _recallFunds(_vaultId, _vault.totalDeposited);\n    }\n\n    function flush() external nonReentrant expectInitialized returns (uint256) {\n        require(!emergencyExit, \"emergency pause enabled\");\n\n        return flushActiveVault();\n    }\n\n    function flushActiveVault() internal returns (uint256) {\n        Vault.Data storage _activeVault = _vaults.last();\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        uint256 ratio = fryerConfig.getConfigValue(ConfigNames.FRYER_VAULT_PERCENTAGE);\n        uint256 pendingTotal =\n            balance.add(_activeVault.totalDeposited).mul(ratio)\n                .div(fryerConfig.PERCENT_DENOMINATOR());\n        if (pendingTotal > _activeVault.totalDeposited) {\n            uint256 _depositedAmount =\n                _activeVault.deposit(\n                    pendingTotal.sub(_activeVault.totalDeposited)\n                );\n            emit FundsFlushed(_depositedAmount);\n            return _depositedAmount;\n        } else {\n            return 0;\n        }\n    }\n\n    function deposit(uint256 _amount)\n        external\n        nonReentrant\n        noDelegateCall\n        noContractAllowed\n        expectInitialized\n    {\n        require(!emergencyExit, \"emergency pause enabled\");\n\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        totalDeposited = totalDeposited.add(_amount);\n\n        _cdp.totalDeposited = _cdp.totalDeposited.add(_amount);\n        _cdp.lastDeposit = block.number;\n\n        if (_amount >= flushActivator) {\n            flushActiveVault();\n        }\n\n        emit TokensDeposited(msg.sender, _amount);\n    }\n\n    function withdraw(uint256 _amount)\n        external\n        nonReentrant\n        noDelegateCall\n        noContractAllowed\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        require(block.number > _cdp.lastDeposit, \"\");\n\n        _cdp.update(_ctx);\n\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) =\n            _withdrawFundsTo(msg.sender, _amount);\n\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(\n            _decreasedValue,\n            \"Exceeds withdrawable amount\"\n        );\n        _cdp.checkHealth(\n            _ctx,\n            \"Action blocked: unhealthy collateralization ratio\"\n        );\n        if (_amount >= flushActivator) {\n            flushActiveVault();\n        }\n        emit TokensWithdrawn(\n            msg.sender,\n            _amount,\n            _withdrawnAmount,\n            _decreasedValue\n        );\n\n        return (_withdrawnAmount, _decreasedValue);\n    }\n\n    function repay(uint256 _parentAmount, uint256 _childAmount)\n        external\n        nonReentrant\n        noDelegateCall\n        noContractAllowed\n        onLinkCheck\n        expectInitialized\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        if (_parentAmount > 0) {\n            token.safeTransferFrom(msg.sender, address(this), _parentAmount);\n            _distributeToOven(_parentAmount);\n        }\n\n        uint256 childAmount_ =\n            convertTokenAmount(friesToken, token, _childAmount);\n        // friesUsd convert USDT/DAI/USDC > 0\n        if (childAmount_ > 0) {\n            IMintableERC20(friesToken).burnFrom(msg.sender, _childAmount);\n            IMintableERC20(friesToken).lowerHasMinted(_childAmount);\n        } else {\n            _childAmount = 0;\n        }\n\n        uint256 _totalAmount = _parentAmount.add(childAmount_);\n        _cdp.totalDebt = _cdp.totalDebt.sub(_totalAmount);\n\n        emit TokensRepaid(msg.sender, _parentAmount, _childAmount);\n    }\n\n    function liquidate(uint256 _amount)\n        external\n        nonReentrant\n        noDelegateCall\n        noContractAllowed\n        onLinkCheck\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        if (_amount > _cdp.totalDebt) {\n            _amount = _cdp.totalDebt;\n        }\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) =\n            _withdrawFundsTo(address(this), _amount);\n        _distributeToOven(_withdrawnAmount);\n\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(_decreasedValue);\n        _cdp.totalDebt = _cdp.totalDebt.sub(_withdrawnAmount);\n        emit TokensLiquidated(\n            msg.sender,\n            _amount,\n            _withdrawnAmount,\n            _decreasedValue\n        );\n\n        return (_withdrawnAmount, _decreasedValue);\n    }\n\n    function borrow(uint256 _amount)\n        external\n        nonReentrant\n        noDelegateCall\n        noContractAllowed\n        onLinkCheck\n        expectInitialized\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        uint256 _totalCredit = _cdp.totalCredit;\n\n        if (_totalCredit < _amount) {\n            uint256 _remainingAmount = _amount.sub(_totalCredit);\n            _cdp.totalDebt = _cdp.totalDebt.add(_remainingAmount);\n            _cdp.totalCredit = 0;\n            _cdp.checkHealth(_ctx, \"Loan-to-value ratio breached\");\n        } else {\n            _cdp.totalCredit = _totalCredit.sub(_amount);\n        }\n        uint256 mint = convertTokenAmount(token, friesToken, _amount);\n        IMintableERC20(friesToken).mint(msg.sender, mint);\n        if (_amount >= flushActivator) {\n            flushActiveVault();\n        }\n    }\n\n    function vaultCount() external view returns (uint256) {\n        return _vaults.length();\n    }\n\n    function getVaultAdapter(uint256 _vaultId)\n        external\n        view\n        returns (IVaultAdapter)\n    {\n        Vault.Data storage _vault = _vaults.get(_vaultId);\n        return _vault.adapter;\n    }\n\n    function getVaultTotalDeposited(uint256 _vaultId)\n        external\n        view\n        returns (uint256)\n    {\n        Vault.Data storage _vault = _vaults.get(_vaultId);\n        return _vault.totalDeposited;\n    }\n\n    function getCdpTotalDeposited(address _account)\n        external\n        view\n        returns (uint256)\n    {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.totalDeposited;\n    }\n\n    function getCdpTotalDebt(address _account) external view returns (uint256) {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.getUpdatedTotalDebt(_ctx);\n    }\n\n    function getCdpTotalCredit(address _account)\n        external\n        view\n        returns (uint256)\n    {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.getUpdatedTotalCredit(_ctx);\n    }\n\n    function getCdpLastDeposit(address _account)\n        external\n        view\n        returns (uint256)\n    {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.lastDeposit;\n    }\n\n    function _distributeToOven(uint256 amount) internal {\n        token.safeApprove(oven, amount);\n        IOven(oven).distribute(address(this), amount);\n        uint256 mintAmount = convertTokenAmount(token, friesToken, amount);\n        IMintableERC20(friesToken).lowerHasMinted(mintAmount);\n    }\n\n    modifier onLinkCheck() {\n        if (pegMinimum > 0) {\n            uint256 oracleAnswer =\n                uint256(IChainlink(_linkGasOracle).latestAnswer());\n            require(oracleAnswer > pegMinimum, \"off peg limitation\");\n        }\n        _;\n    }\n\n    modifier noContractAllowed() {\n        require(\n            !address(msg.sender).isContract() && msg.sender == tx.origin,\n            \"Sorry we do not accept contract!\"\n        );\n        _;\n    }\n\n    function _recallFunds(uint256 _vaultId, uint256 _amount)\n        internal\n        returns (uint256, uint256)\n    {\n        require(\n            emergencyExit ||\n                msg.sender == impl ||\n                _vaultId != _vaults.lastIndex(),\n            \"not an emergency, not governance, and user does not have permission to recall funds from active vault\"\n        );\n\n        Vault.Data storage _vault = _vaults.get(_vaultId);\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) =\n            _vault.withdraw(address(this), _amount);\n\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\n\n        return (_withdrawnAmount, _decreasedValue);\n    }\n\n    function _withdrawFundsTo(address _recipient, uint256 _amount)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _bufferedAmount =\n            Math.min(_amount, IERC20(token).balanceOf(address(this)));\n\n        if (_recipient != address(this)) {\n            token.safeTransfer(_recipient, _bufferedAmount);\n        }\n\n        uint256 _totalWithdrawn = _bufferedAmount;\n        uint256 _totalDecreasedValue = _bufferedAmount;\n\n        uint256 _remainingAmount = _amount.sub(_bufferedAmount);\n        if (_remainingAmount > 0) {\n            Vault.Data storage _activeVault = _vaults.last();\n            (uint256 _withdrawAmount, uint256 _decreasedValue) =\n                _activeVault.withdraw(_recipient, _remainingAmount);\n\n            _totalWithdrawn = _totalWithdrawn.add(_withdrawAmount);\n            _totalDecreasedValue = _totalDecreasedValue.add(_decreasedValue);\n        }\n\n        totalDeposited = totalDeposited.sub(_totalDecreasedValue);\n\n        return (_totalWithdrawn, _totalDecreasedValue);\n    }\n\n    // flash\n\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token_,\n        uint256 amount,\n        bytes calldata data\n    ) external override returns (bool) {\n        require(token == token_, \"FlashLender: Unsupported currency\");\n        uint256 _fee = _flashFee(amount);\n        token.safeTransfer(address(receiver), amount);\n        require(\n            receiver.onFlashLoan(msg.sender, token, amount, _fee, data) ==\n                FLASH_CALLBACK_SUCCESS,\n            \"FlashLender: Callback failed\"\n        );\n        token.safeTransferFrom(\n            address(receiver),\n            address(this),\n            amount.add(_fee)\n        );\n\n        _incomeDistribution(_fee);\n        emit UseFlashloan(tx.origin, token, amount, _fee);\n        return true;\n    }\n\n    function flashFee(address token_, uint256 amount)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        require(token == token_, \"FlashLender: Unsupported currency\");\n        return _flashFee(amount);\n    }\n\n    function _flashFee(uint256 amount) internal view returns (uint256) {\n        uint256 prop =\n            fryerConfig.getConfigValue(ConfigNames.FRYER_FLASH_FEE_PROPORTION);\n        uint256 PERCENT_DENOMINATOR = fryerConfig.PERCENT_DENOMINATOR();\n        return amount.mul(prop).div(PERCENT_DENOMINATOR);\n    }\n\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token_ The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token_)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        if (token == token_) {\n            return IERC20(token).balanceOf(address(this));\n        } else {\n            return 0;\n        }\n    }\n}\n"
    }
  }
}