{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SyncAndWorkHelper.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n\r\n// remixd -s E:\\WorkForTokensBot --remix-ide https://remix.ethereum.org\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() virtual external view returns (string memory);\r\n    function symbol() virtual external view returns (string memory);\r\n    function decimals() virtual external view returns (uint8);\r\n    function totalSupply() virtual external view returns (uint);\r\n    function balanceOf(address owner) virtual external view returns (uint);\r\n    function allowance(address owner, address spender) virtual external view returns (uint);\r\n\r\n    function approve(address spender, uint value) virtual external returns (bool);\r\n    function transfer(address to, uint value) virtual external returns (bool);\r\n    function transferFrom(address from, address to, uint value) virtual external returns (bool);\r\n}\r\n\r\n\r\nabstract contract IOracleKeeper\r\n{\r\n    function work(address pair) virtual external;\r\n}\r\n\r\nabstract contract IPair\r\n{\r\n    function sync() virtual external;\r\n}\r\n\r\ncontract ConvexBot\r\n{\r\n    address public minter;\r\n    IERC20 keeperToken = IERC20(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\r\n\r\n    constructor() public\r\n    {\r\n        minter = msg.sender;\r\n\r\n        // Allow\r\n        uint256 allowance = keeperToken.allowance(address(this), minter);\r\n        if (allowance == 0)\r\n        {\r\n            keeperToken.approve(minter, 2**256 - 1);\r\n        }\r\n    }\r\n\r\n    // these functions ARE REQUIRED to receive ether\r\n    fallback() external payable {\r\n        // custom function code\r\n    }\r\n\r\n    receive() external payable {\r\n        // custom function code\r\n    }\r\n\r\n    function transferEth(uint256 amount) public returns (uint256)\r\n    {\r\n        require (msg.sender == minter, \"1\");\r\n        msg.sender.transfer(amount);\r\n        return amount;\r\n    }\r\n\r\n    function transferToken(uint256 amount) public returns (uint256)\r\n    {\r\n        require (msg.sender == minter, \"2\");\r\n\r\n        keeperToken.transfer(msg.sender, amount);\r\n        return amount;\r\n    }\r\n\r\n    function earmarkRewardsHelper(uint64 targetBlockNumber, address oracleKeeperAddress, address pairAddress) public\r\n    {\r\n        if (targetBlockNumber != 0)\r\n        {\r\n            require(block.number <= targetBlockNumber, \"No thanks, Jeff.\");\r\n        }\r\n        require (msg.sender == minter, \"5\");\r\n\r\n        IPair sushiPair = IPair(pairAddress);\r\n        sushiPair.sync();\r\n\r\n        IOracleKeeper oracleKeeper = IOracleKeeper(oracleKeeperAddress);\r\n        oracleKeeper.work(pairAddress);\r\n    }\r\n}"}}}