{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AA.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function balanceOf(address) external view returns (uint256);\n}\n\n\n/**\n * @title Protocol adapter interface.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface ProtocolAdapter {\n\n    /**\n     * @dev MUST return \"Asset\" or \"Debt\".\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function adapterType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return token type (default is \"ERC20\").\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function tokenType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\n     */\n    function getBalance(address token, address account) external view returns (uint256);\n}\n\n\n/**\n * @dev CurveRewards contract interface.\n * Only the functions required for SynthetixAssetAdapter contract are added.\n * The CurveRewards contract is available here\n * github.com/Synthetixio/Unipool/blob/master/contracts/CurveRewards.sol.\n */\ninterface CurveRewards {\n    function earned(address) external view returns (uint256);\n}\n\n\n/**\n * @dev iETHRewards contract interface.\n * Only the functions required for SynthetixAssetAdapter contract are added.\n * The iETHRewards contract is available here\n * github.com/Synthetixio/Unipool/blob/master/contracts/iETHRewards.sol.\n */\ninterface iETHRewards {\n    function earned(address) external view returns (uint256);\n}\n\n\n/**\n * @dev Unipool contract interface.\n * Only the functions required for SynthetixAssetAdapter contract are added.\n * The Unipool contract is available here\n * github.com/Synthetixio/Unipool/blob/master/contracts/Unipool.sol.\n */\ninterface Unipool {\n    function earned(address) external view returns (uint256);\n}\n\n\n/**\n * @dev Synthetix contract interface.\n * Only the functions required for SynthetixAssetAdapter contract are added.\n * The Synthetix contract is available here\n * github.com/Synthetixio/synthetix/blob/master/contracts/Synthetix.sol.\n */\ninterface Synthetix {\n    function collateral(address) external view returns (uint256);\n}\n\n\n/**\n * @title Asset adapter for Synthetix protocol.\n * @dev Implementation of ProtocolAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract SynthetixAssetAdapter is ProtocolAdapter {\n\n    string public constant override adapterType = \"Asset\";\n\n    string public constant override tokenType = \"ERC20\";\n\n    address internal constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\n    address internal constant SUSD_POOL_TOKEN = 0xC25a3A3b969415c80451098fa907EC722572917F;\n    address internal constant IETH = 0xA9859874e1743A32409f75bB11549892138BBA1E;\n    address internal constant UNISWAP_SETH = 0xe9Cf7887b93150D4F2Da7dFc6D502B216438F244;\n    address internal constant LP_REWARD_CURVE = 0xDCB6A51eA3CA5d3Fd898Fd6564757c7aAeC3ca92;\n    address internal constant LP_REWARD_IETH = 0xC746bc860781DC90BBFCD381d6A058Dc16357F8d;\n    address internal constant LP_REWARD_UNISWAP = 0x48D7f315feDcaD332F68aafa017c7C158BC54760;\n\n    /**\n     * @return Amount of SNX locked on the protocol by the given account.\n     * @dev Implementation of ProtocolAdapter interface function.\n     */\n    function getBalance(address token, address account) external view override returns (uint256) {\n        if (token == SNX) {\n            uint256 balance = Synthetix(SNX).collateral(account);\n            balance = balance + CurveRewards(LP_REWARD_CURVE).earned(account);\n            balance = balance + iETHRewards(LP_REWARD_IETH).earned(account);\n            balance = balance + Unipool(LP_REWARD_UNISWAP).earned(account);\n            return balance;\n        } else if (token == SUSD_POOL_TOKEN) {\n            return ERC20(LP_REWARD_CURVE).balanceOf(account);\n        } else if (token == IETH) {\n            return ERC20(LP_REWARD_IETH).balanceOf(account);\n        } else if (token == UNISWAP_SETH) {\n            return ERC20(LP_REWARD_UNISWAP).balanceOf(account);\n        } else {\n            return 0;\n        }\n    }\n}\n"
    }
  }
}