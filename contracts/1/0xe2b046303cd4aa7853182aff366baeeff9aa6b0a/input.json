{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"stabilizer.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface curve {\r\n    function add_liquidity(uint[2] memory, uint) external returns (uint);\r\n    function remove_liquidity_imbalance(uint[2] memory, uint) external returns (uint);\r\n    function calc_token_amount(uint[2] memory, bool) external view returns (uint);\r\n}\r\n\r\ninterface erc20 { \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ncontract stabilizer {\r\n    \r\n    address immutable public pool;\r\n    address immutable public ib;\r\n    address immutable public coin;\r\n    \r\n    address immutable owner;\r\n    \r\n    \r\n    constructor(address _pool, address _ib, address _coin) {\r\n        pool = _pool;\r\n        ib = _ib;\r\n        coin = _coin;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function add_liquidity_calc() external view returns (uint, uint) {\r\n        uint _ib = erc20(ib).balanceOf(pool);\r\n        uint _coin = erc20(coin).balanceOf(pool);\r\n        uint _deposit = _coin - _ib;\r\n        uint _min = curve(pool).calc_token_amount([_deposit,0],true);\r\n        return (_deposit, _min);\r\n    }\r\n    \r\n    function add_liquidity() external {\r\n        uint _ib = erc20(ib).balanceOf(pool);\r\n        uint _coin = erc20(coin).balanceOf(pool);\r\n        uint _deposit = _coin - _ib;\r\n        uint _min = curve(pool).calc_token_amount([_deposit,0],true);\r\n        _safeApprove(ib, pool, _deposit);\r\n        curve(pool).add_liquidity([_deposit,0], _min);\r\n    }\r\n    \r\n    function remove_liquidity() external {\r\n        uint _ib = erc20(ib).balanceOf(pool);\r\n        uint _coin = erc20(coin).balanceOf(pool);\r\n        uint _withdraw = _ib - _coin;\r\n        uint _max = curve(pool).calc_token_amount([_withdraw,0], false);\r\n        curve(pool).remove_liquidity_imbalance([_withdraw,0], _max);\r\n    }\r\n    \r\n    function withdraw(address token) external {\r\n        require(msg.sender == owner);\r\n        _safeTransfer(token, owner, erc20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeApprove(address token, address spender, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.approve.selector, spender, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}"}}}