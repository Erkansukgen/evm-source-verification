{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"stakingPool1week.sol":{"content":"/**\n    BETA POOL :\n    Pool Details - 10%, 7 days (1 Week)\n    Early Maturity - 1/2 Week ,3.5 Days, 20% Of Pool Rewards\n**/\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable  {\n    address payable public _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        _owner = payable(msg.sender);\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ninterface Token {\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function balanceOf(address who) external view returns (uint256);\n\n}\n\n\ncontract MU_StakePool is Ownable{\n    \n    using SafeMath for uint;\n\n    struct User {\n        uint256 poolBal;\n        uint40 pool_deposit_time;\n        uint256 total_deposits;\n        uint256 pool_payouts;\n        uint256 rewardEarned;\n        uint256 rewardUnWithdrawed;\n        uint256 earlyRewardUnWithdrawed;\n        uint256 afterEarlyRewardUnWithdrawed;\n    }\n    \n    address public tokenAddr;\n    uint256 public Pool = 100000;\n    uint256 public PoolBalance;\n    uint256 public tokenDecimal = 18;\n\n    uint256 public poolNumber = 1;\n    uint256 public poolRewardPercent = 10;\n    uint256 public poolDurationMonths = 1;\n   \n\n    mapping(address => User) public users;\n\n    event TokenTransfer(address beneficiary, uint amount);\n    event PoolTransfer(address beneficiary, uint amount);\n    event RewardClaimed(address beneficiary, uint amount);\n    \n    mapping (address => uint256) public balances;\n\n\n    constructor(address _tokenAddr) {\n        tokenAddr = _tokenAddr;\n    }\n    \n    /* Recieve Accidental ETH Transfers */\n    receive() payable external {\n        _owner.transfer(msg.value);\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\n    }\n\n\n    /* Stake Token Function */\n    function PoolStake(uint256  _amount) public returns (bool) {\n        require(_amount <= Token(tokenAddr).balanceOf(msg.sender),\"Token Balance of user is less\");\n        require(Token(tokenAddr).transferFrom(msg.sender,address(this), _amount),\"BEP20: Amount Transfer Failed Check id Amount is Approved\");\n        PoolBalance += _amount;\n        require(PoolBalance <= Pool * (10**tokenDecimal),\"Pool is Full, Enter Amount Equal to Pool Holding or remaining pool balance\");\n        require(users[msg.sender].poolBal == 0,\"Already Staked\");\n        users[msg.sender].poolBal = _amount;\n        users[msg.sender].total_deposits += _amount;\n        users[msg.sender].pool_deposit_time = uint40(block.timestamp);\n        users[msg.sender].rewardUnWithdrawed = (_amount*10)/100; // 10% Total Reward After 1 Week Stake\n        users[msg.sender].earlyRewardUnWithdrawed = (((_amount*10)/100)*20)/100; // 20% of Reward After 3.5 Days Stake - Early Maturity\n        users[msg.sender].afterEarlyRewardUnWithdrawed = (((_amount*10)/100)*80)/100; // 80% of Reward After 1 week Stake Early Withdrawal - Full Maturity\n        emit PoolTransfer(msg.sender, _amount);\n        return true;\n    }\n    \n    /* Claims Principal Token and Rewards Collected */\n    function claimPool() public returns(bool){\n        require(users[msg.sender].poolBal > 0,\"There is no deposit for this address in Pool\");\n        require(block.timestamp > users[msg.sender].pool_deposit_time + 5040 minutes, \"Minimum 3.5 Days to be completed - 1/2 Week\");\n        \n        if(block.timestamp > users[msg.sender].pool_deposit_time + 5040 minutes && block.timestamp < users[msg.sender].pool_deposit_time + 7 days){\n            \n            require(Token(tokenAddr).transfer(msg.sender, users[msg.sender].earlyRewardUnWithdrawed),\"Cannot Transfer Reward Funds\");\n            users[msg.sender].rewardEarned += (users[msg.sender].earlyRewardUnWithdrawed);\n            users[msg.sender].rewardUnWithdrawed = users[msg.sender].rewardUnWithdrawed - users[msg.sender].earlyRewardUnWithdrawed;\n            users[msg.sender].earlyRewardUnWithdrawed = 0;\n            emit RewardClaimed(msg.sender, users[msg.sender].earlyRewardUnWithdrawed);\n            return true;\n\n        }else{\n            require(block.timestamp > users[msg.sender].pool_deposit_time + 7 days, \"Minimum 7 Days to be completed  - 1 Week\");\n            uint256 amount = users[msg.sender].poolBal;\n            require(Token(tokenAddr).transfer(msg.sender, amount),\"Cannot Transfer Principal Funds\");\n            require(Token(tokenAddr).transfer(msg.sender, users[msg.sender].earlyRewardUnWithdrawed + users[msg.sender].afterEarlyRewardUnWithdrawed),\"Cannot Transfer Reward Funds\");\n            \n            uint256 totalReward= (users[msg.sender].earlyRewardUnWithdrawed + users[msg.sender].afterEarlyRewardUnWithdrawed);\n            users[msg.sender].rewardEarned += totalReward;\n            \n            users[msg.sender].rewardUnWithdrawed = users[msg.sender].rewardUnWithdrawed - (users[msg.sender].earlyRewardUnWithdrawed + users[msg.sender].afterEarlyRewardUnWithdrawed);\n            users[msg.sender].earlyRewardUnWithdrawed = 0;\n            users[msg.sender].afterEarlyRewardUnWithdrawed = 0;\n            users[msg.sender].poolBal = 0;\n            users[msg.sender].pool_deposit_time = 0;\n            users[msg.sender].pool_payouts += amount;\n            \n            emit TokenTransfer(msg.sender, amount);\n            emit RewardClaimed(msg.sender, totalReward);\n            return true;\n        \n            \n        }\n\n            \n    }\n\n    \n    /* Check Token Balance inside Contract */\n    function tokenBalance() public view returns (uint256){\n        return Token(tokenAddr).balanceOf(address(this));\n    }\n\n    /* Check ETH Balance inside Contract */\n    function ethBalance() public view returns (uint256){\n        return address(this).balance;\n    }\n\n    /* Calculate Remaining Staking Claim time of Users */\n    function stakeTimeRemaining(address _userAdd) public view returns (uint256){\n        if(users[_userAdd].pool_deposit_time > 0){\n            uint256 stakeTime = users[_userAdd].pool_deposit_time + 7 days;\n            if(stakeTime > block.timestamp){\n                return (stakeTime - block.timestamp);\n            }else{\n                return 0;\n            }\n        }else{\n            return 0;\n        }\n    }\n    \n    /* Calculate Early Remaining Staking Claim time of Users */\n    function earlyStakeTimeRemaining(address _userAdd) public view returns (uint256){\n        if(users[_userAdd].pool_deposit_time > 0){\n            uint256 stakeTime = users[_userAdd].pool_deposit_time + 5040 minutes;\n            if(stakeTime > block.timestamp){\n                return (stakeTime - block.timestamp);\n            }else{\n                return 0;\n            }\n        }else{\n            return 0;\n        }\n    }\n\n    /* Admin function to update the Pool Total Stake Capacity */\n    function updatePoolCapacity(uint256 PoolAmount) public onlyOwner() returns(bool){\n        Pool = PoolAmount;\n        return true;\n    }\n    \n    \n    /* Maturity Date */\n    function maturityDate(address userAdd) public view returns(uint256){\n        return (users[userAdd].pool_deposit_time + 7 days);\n    }\n    \n    /* Early Maturity Date */\n    function earlyMaturityDate(address userAdd) public view returns(uint256){\n        return (users[userAdd].pool_deposit_time + 5040 minutes);\n    }\n    \n\n}"}}}