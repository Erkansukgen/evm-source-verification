{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.6.11;\n\ncontract AccessControl {\n    event GrantRole(bytes32 indexed role, address indexed addr);\n    event RevokeRole(bytes32 indexed role, address indexed addr);\n\n    mapping(bytes32 => mapping(address => bool)) public hasRole;\n\n    modifier onlyAuthorized(bytes32 _role) {\n        require(hasRole[_role][msg.sender], \"!authorized\");\n        _;\n    }\n\n    function _grantRole(bytes32 _role, address _addr) internal {\n        require(_addr != address(0), \"address = zero\");\n\n        hasRole[_role][_addr] = true;\n\n        emit GrantRole(_role, _addr);\n    }\n\n    function _revokeRole(bytes32 _role, address _addr) internal {\n        require(_addr != address(0), \"address = zero\");\n\n        hasRole[_role][_addr] = false;\n\n        emit RevokeRole(_role, _addr);\n    }\n}\n"
    },
    "contracts/Controller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.6.11;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./protocol/IController.sol\";\nimport \"./protocol/IVault.sol\";\nimport \"./protocol/IStrategy.sol\";\nimport \"./AccessControl.sol\";\n\ncontract Controller is IController, AccessControl {\n    using SafeMath for uint;\n\n    bytes32 public constant override ADMIN_ROLE = keccak256(abi.encodePacked(\"ADMIN\"));\n    bytes32 public constant override HARVESTER_ROLE =\n        keccak256(abi.encodePacked(\"HARVESTER\"));\n\n    address public override admin;\n    address public override treasury;\n\n    constructor(address _treasury) public {\n        require(_treasury != address(0), \"treasury = zero address\");\n\n        admin = msg.sender;\n        treasury = _treasury;\n\n        _grantRole(ADMIN_ROLE, admin);\n        _grantRole(HARVESTER_ROLE, admin);\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"!admin\");\n        _;\n    }\n\n    modifier isCurrentStrategy(address _strategy) {\n        address vault = IStrategy(_strategy).vault();\n        /*\n        Check that _strategy is the current strategy used by the vault.\n        */\n        require(IVault(vault).strategy() == _strategy, \"!strategy\");\n        _;\n    }\n\n    function setAdmin(address _admin) external override onlyAdmin {\n        require(_admin != address(0), \"admin = zero address\");\n\n        _revokeRole(ADMIN_ROLE, admin);\n        _revokeRole(HARVESTER_ROLE, admin);\n\n        _grantRole(ADMIN_ROLE, _admin);\n        _grantRole(HARVESTER_ROLE, _admin);\n\n        admin = _admin;\n    }\n\n    function setTreasury(address _treasury) external override onlyAdmin {\n        require(_treasury != address(0), \"treasury = zero address\");\n        treasury = _treasury;\n    }\n\n    function grantRole(bytes32 _role, address _addr) external override onlyAdmin {\n        require(_role == ADMIN_ROLE || _role == HARVESTER_ROLE, \"invalid role\");\n        _grantRole(_role, _addr);\n    }\n\n    function revokeRole(bytes32 _role, address _addr) external override onlyAdmin {\n        require(_role == ADMIN_ROLE || _role == HARVESTER_ROLE, \"invalid role\");\n        _revokeRole(_role, _addr);\n    }\n\n    function setStrategy(\n        address _vault,\n        address _strategy,\n        uint _min\n    ) external override onlyAuthorized(ADMIN_ROLE) {\n        IVault(_vault).setStrategy(_strategy, _min);\n    }\n\n    function invest(address _vault) external override onlyAuthorized(HARVESTER_ROLE) {\n        IVault(_vault).invest();\n    }\n\n    function harvest(address _strategy)\n        external\n        override\n        isCurrentStrategy(_strategy)\n        onlyAuthorized(HARVESTER_ROLE)\n    {\n        IStrategy(_strategy).harvest();\n    }\n\n    function skim(address _strategy)\n        external\n        override\n        isCurrentStrategy(_strategy)\n        onlyAuthorized(HARVESTER_ROLE)\n    {\n        IStrategy(_strategy).skim();\n    }\n\n    modifier checkWithdraw(address _strategy, uint _min) {\n        address vault = IStrategy(_strategy).vault();\n        address token = IVault(vault).token();\n\n        uint balBefore = IERC20(token).balanceOf(vault);\n        _;\n        uint balAfter = IERC20(token).balanceOf(vault);\n\n        require(balAfter.sub(balBefore) >= _min, \"withdraw < min\");\n    }\n\n    function withdraw(\n        address _strategy,\n        uint _amount,\n        uint _min\n    )\n        external\n        override\n        isCurrentStrategy(_strategy)\n        onlyAuthorized(HARVESTER_ROLE)\n        checkWithdraw(_strategy, _min)\n    {\n        IStrategy(_strategy).withdraw(_amount);\n    }\n\n    function withdrawAll(address _strategy, uint _min)\n        external\n        override\n        isCurrentStrategy(_strategy)\n        onlyAuthorized(HARVESTER_ROLE)\n        checkWithdraw(_strategy, _min)\n    {\n        IStrategy(_strategy).withdrawAll();\n    }\n\n    function exit(address _strategy, uint _min)\n        external\n        override\n        isCurrentStrategy(_strategy)\n        onlyAuthorized(ADMIN_ROLE)\n        checkWithdraw(_strategy, _min)\n    {\n        IStrategy(_strategy).exit();\n    }\n}\n"
    },
    "contracts/protocol/IController.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.6.11;\n\ninterface IController {\n    function ADMIN_ROLE() external view returns (bytes32);\n\n    function HARVESTER_ROLE() external view returns (bytes32);\n\n    function admin() external view returns (address);\n\n    function treasury() external view returns (address);\n\n    function setAdmin(address _admin) external;\n\n    function setTreasury(address _treasury) external;\n\n    function grantRole(bytes32 _role, address _addr) external;\n\n    function revokeRole(bytes32 _role, address _addr) external;\n\n    /*\n    @notice Set strategy for vault\n    @param _vault Address of vault\n    @param _strategy Address of strategy\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\n    */\n    function setStrategy(\n        address _vault,\n        address _strategy,\n        uint _min\n    ) external;\n\n    // calls to strategy\n    /*\n    @notice Invest token in vault into strategy\n    @param _vault Address of vault\n    */\n    function invest(address _vault) external;\n\n    function harvest(address _strategy) external;\n\n    function skim(address _strategy) external;\n\n    /*\n    @notice Withdraw from strategy to vault\n    @param _strategy Address of strategy\n    @param _amount Amount of underlying token to withdraw\n    @param _min Minimum amount of underlying token to withdraw\n    */\n    function withdraw(\n        address _strategy,\n        uint _amount,\n        uint _min\n    ) external;\n\n    /*\n    @notice Withdraw all from strategy to vault\n    @param _strategy Address of strategy\n    @param _min Minimum amount of underlying token to withdraw\n    */\n    function withdrawAll(address _strategy, uint _min) external;\n\n    /*\n    @notice Exit from strategy\n    @param _strategy Address of strategy\n    @param _min Minimum amount of underlying token to withdraw\n    */\n    function exit(address _strategy, uint _min) external;\n}\n"
    },
    "contracts/protocol/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.6.11;\n\ninterface IStrategy {\n    function admin() external view returns (address);\n\n    function controller() external view returns (address);\n\n    function vault() external view returns (address);\n\n    /*\n    @notice Returns address of underlying token\n    */\n    function underlying() external view returns (address);\n\n    /*\n    @notice Returns total amount of underlying transferred from vault\n    */\n    function totalDebt() external view returns (uint);\n\n    function performanceFee() external view returns (uint);\n\n    /*\n    @notice Returns true if token cannot be swept\n    */\n    function assets(address _token) external view returns (bool);\n\n    function setAdmin(address _admin) external;\n\n    function setController(address _controller) external;\n\n    function setPerformanceFee(uint _fee) external;\n\n    /*\n    @notice Returns amount of underlying stable coin locked in this contract\n    @dev Output may vary depending on price of liquidity provider token\n         where the underlying token is invested\n    */\n    function totalAssets() external view returns (uint);\n\n    /*\n    @notice Deposit `amount` underlying token for yield token\n    @param amount Amount of underlying token to deposit\n    */\n    function deposit(uint _amount) external;\n\n    /*\n    @notice Withdraw `amount` yield token to withdraw\n    @param amount Amount of yield token to withdraw\n    */\n    function withdraw(uint _amount) external;\n\n    /*\n    @notice Withdraw all underlying token from strategy\n    */\n    function withdrawAll() external;\n\n    function harvest() external;\n\n    /*\n    @notice Exit from strategy\n    @dev Must transfer all underlying tokens back to vault\n    */\n    function exit() external;\n\n    /*\n    @notice Transfer profit over total debt to vault\n    */\n    function skim() external;\n\n    /*\n    @notice Transfer token in strategy to admin\n    @param _token Address of token to transfer\n    @dev Must transfer token to admin\n    @dev _token must not be equal to underlying token\n    @dev Used to transfer token that was accidentally sent or\n         claim dust created from this strategy\n    */\n    function sweep(address _token) external;\n}\n"
    },
    "contracts/protocol/IVault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.6.11;\n\ninterface IVault {\n    function admin() external view returns (address);\n\n    function controller() external view returns (address);\n\n    function timeLock() external view returns (address);\n\n    function token() external view returns (address);\n\n    function strategy() external view returns (address);\n\n    function strategies(address _strategy) external view returns (bool);\n\n    function reserveMin() external view returns (uint);\n\n    function withdrawFee() external view returns (uint);\n\n    function paused() external view returns (bool);\n\n    function whitelist(address _addr) external view returns (bool);\n\n    function setWhitelist(address _addr, bool _approve) external;\n\n    function setAdmin(address _admin) external;\n\n    function setController(address _controller) external;\n\n    function setTimeLock(address _timeLock) external;\n\n    function setPause(bool _paused) external;\n\n    function setReserveMin(uint _reserveMin) external;\n\n    function setWithdrawFee(uint _fee) external;\n\n    /*\n    @notice Returns the amount of token in the vault\n    */\n    function balanceInVault() external view returns (uint);\n\n    /*\n    @notice Returns the estimate amount of token in strategy\n    @dev Output may vary depending on price of liquidity provider token\n         where the underlying token is invested\n    */\n    function balanceInStrategy() external view returns (uint);\n\n    /*\n    @notice Returns amount of tokens invested strategy\n    */\n    function totalDebtInStrategy() external view returns (uint);\n\n    /*\n    @notice Returns the total amount of token in vault + total debt\n    */\n    function totalAssets() external view returns (uint);\n\n    /*\n    @notice Returns minimum amount of tokens that should be kept in vault for\n            cheap withdraw\n    @return Reserve amount\n    */\n    function minReserve() external view returns (uint);\n\n    /*\n    @notice Returns the amount of tokens available to be invested\n    */\n    function availableToInvest() external view returns (uint);\n\n    /*\n    @notice Approve strategy\n    @param _strategy Address of strategy\n    */\n    function approveStrategy(address _strategy) external;\n\n    /*\n    @notice Revoke strategy\n    @param _strategy Address of strategy\n    */\n    function revokeStrategy(address _strategy) external;\n\n    /*\n    @notice Set strategy\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\n    */\n    function setStrategy(address _strategy, uint _min) external;\n\n    /*\n    @notice Transfers token in vault to strategy\n    */\n    function invest() external;\n\n    /*\n    @notice Deposit undelying token into this vault\n    @param _amount Amount of token to deposit\n    */\n    function deposit(uint _amount) external;\n\n    /*\n    @notice Calculate amount of token that can be withdrawn\n    @param _shares Amount of shares\n    @return Amount of token that can be withdrawn\n    */\n    function getExpectedReturn(uint _shares) external view returns (uint);\n\n    /*\n    @notice Withdraw token\n    @param _shares Amount of shares to burn\n    @param _min Minimum amount of token expected to return\n    */\n    function withdraw(uint _shares, uint _min) external;\n\n    /*\n    @notice Transfer token in vault to admin\n    @param _token Address of token to transfer\n    @dev _token must not be equal to vault token\n    */\n    function sweep(address _token) external;\n}\n"
    }
  }
}