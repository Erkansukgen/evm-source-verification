{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/contracts/Bill/Bill.sol": {
      "content": "/**\n * SPDX-License-Identifier: LGPL\n *\n * Copyright (c) Invest & Pay International(Singapore) Pte. Ltd., 2020-2022\n *\n */\npragma solidity ^0.6.0;\n\nimport \"../Common/MultiOwnable.sol\";\nimport \"../Common/Owners.sol\";\nimport \"../math/SafeMath.sol\";\nimport \"../ERC1155/ERC1155Receiver.sol\";\n\n/// @title Bill\n/// @author Juu17\ncontract Bill is MultiOwnable, ERC1155Receiver {\n    using SafeMath for uint256;\n\n    uint256 public immutable id;\n    uint256 public immutable billAmount;\n    uint256 public issuedAmount;\n    string public drawer;\n    string public draweeBankName;\n    bytes8 public immutable draweeDate;\n    string public accepter;\n    string public accepterBankName;\n    bytes8 public immutable expireDate;\n\n    uint256 public initialIssueTime;\n\n    address public immutable managerAddress;\n\n    constructor(\n        Owners owners,\n        uint256 _id,\n        uint256 _billAmount,\n        string memory _drawer,\n        string memory _draweeBankName,\n        string memory _accepter,\n        string memory _accepterBankName,\n        bytes8 _draweeDate,\n        bytes8 _expireDate\n    ) public MultiOwnable(owners) {\n        id = _id;\n        billAmount = _billAmount;\n        // issuedAmount is set to 0\n        issuedAmount = 0;\n        drawer = _drawer;\n        draweeBankName = _draweeBankName;\n        accepter = _accepter;\n        accepterBankName = _accepterBankName;\n        draweeDate = _draweeDate;\n        expireDate = _expireDate;\n\n        managerAddress = msg.sender;\n    }\n\n    /// @notice Only allowed to the BillManager who created me\n    function addIssueAmount(uint256 _amount) external returns (bool isInitialIssue) {\n        require(msg.sender == managerAddress, \"[CNHC] Manager required\");\n\n        uint256 newIssueAmount = issuedAmount.add(_amount);\n        require(newIssueAmount <= billAmount, \"[CNHC] Bill amount overflow warning\");\n\n        if (issuedAmount == 0) {\n            initialIssueTime = now;\n            isInitialIssue = true;\n        }\n        issuedAmount = newIssueAmount;\n    }\n\n    /// @notice Exposed for callers to judge the status of the bill\n    function isClaimed() external view returns (bool) {\n        return initialIssueTime != 0;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) external virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) external virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "localhost/contracts/Bill/BillCommon.sol": {
      "content": "/**\n * SPDX-License-Identifier: LGPL\n *\n * Copyright (c) Invest & Pay International(Singapore) Pte. Ltd., 2020-2022\n *\n */\npragma solidity ^0.6.0;\n\nlibrary BillCommon {\n    enum BillState {Invalid, Normal, Discarded}\n\n    bytes constant ISSUE = \"I\";\n    bytes constant ISSUE_INTEREST = \"I|I\";\n    bytes constant DISPATCH = \"D\";\n    bytes constant REDEEM_DESTROY = \"R|D\";\n    bytes constant REDEEM_DISPATCH = \"R|DI\";\n}\n"
    },
    "localhost/contracts/BillManager.sol": {
      "content": "/**\n * SPDX-License-Identifier: LGPL\n *\n * Copyright (c) Invest & Pay International(Singapore) Pte. Ltd., 2020-2022\n *\n */\npragma solidity ^0.6.0;\n\nimport {MultiOwnable} from \"./Common/MultiOwnable.sol\";\nimport \"./Common/Owners.sol\";\nimport \"./Bill/BillCommon.sol\";\nimport \"./Bill/Bill.sol\";\n\n/// @title BillManager\n/// @author Juu17\ncontract BillManager is MultiOwnable {\n    mapping(uint256 => Bill) public bills;\n    mapping(uint256 => BillCommon.BillState) public billStates;\n\n    constructor(Owners _owners) public MultiOwnable(_owners) {}\n\n    event CreateBill(uint256 indexed id, Bill indexed bill);\n    event DiscardBill(uint256 indexed id);\n    event DiscardBills(uint256[] indexed ids);\n\n    modifier onlyExistedId(uint256 _id) {\n        require(address(bills[_id]) != address(0), \"[BM] Bill id not found\");\n        _;\n    }\n    modifier onlyExistedIds(uint256[] memory _ids) {\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            require(address(bills[_ids[i]]) != address(0), \"[BM] Some bill ids not found\");\n        }\n        _;\n    }\n\n    /// @notice Create a new Bill contract object and deploy\n    function createBill(\n        uint256 _id,\n        uint256 _billAmount,\n        string memory _drawer,\n        string memory _draweeBankName,\n        string memory _accepter,\n        string memory _accepterBankName,\n        bytes8 _draweeDate,\n        bytes8 _expireDate\n    ) external onlyOwners returns (Bill) {\n        require(address(bills[_id]) == address(0), \"[BM] Bill id already exist\");\n\n        Bill bill = new Bill(ownersContract, _id, _billAmount, _drawer, _draweeBankName, _accepter, _accepterBankName, _draweeDate, _expireDate);\n        bills[_id] = bill;\n        billStates[_id] = BillCommon.BillState.Normal;\n        emit CreateBill(_id, bill);\n\n        return bill;\n    }\n\n    function tryAddBillIssueAmount(uint256 _id, uint256 _amount) external onlyOwners returns (bool isInitialIssue, address billAddr) {\n        Bill bill = bills[_id];\n        require(address(bill) != address(0), \"[BM] Bill id not found\");\n        isInitialIssue = bill.addIssueAmount(_amount);\n        billAddr = address(bill);\n    }\n\n    /// @notice Discard a single Bill contract, set the status to Discarded\n    function discardBill(uint256 _id) external onlyOwners onlyExistedId(_id) {\n        billStates[_id] = BillCommon.BillState.Discarded;\n        emit DiscardBill(_id);\n    }\n\n    /// @notice Discard a bunch of Bill contracts, set the statuses to Discarded\n    function discardBills(uint256[] calldata _ids) external onlyOwners onlyExistedIds(_ids) {\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            billStates[_ids[i]] = BillCommon.BillState.Discarded;\n        }\n        emit DiscardBills(_ids);\n    }\n\n    function uploadBills(\n        uint256[] calldata _ids,\n        Bill[] calldata _bills,\n        BillCommon.BillState[] calldata _states\n    ) external onlyOwners {\n        require(_ids.length == _bills.length, \"[BM] Parameters (_ids) and (_bills) must be the same length\");\n        require(_bills.length == _states.length, \"[BM] Parameters (_bills) and (_states) must be the same length\");\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            uint256 id = _ids[i];\n            bills[id] = _bills[i];\n            billStates[id] = _states[i];\n        }\n    }\n\n    /// @notice Inspect the statues of specified bills\n    function verifyIds(uint256[] calldata _ids, BillCommon.BillState expectedState) external view returns (bool) {\n        require(_ids.length < 30, \"[BM] Parameter (_ids) size too large\");\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            if (billStates[_ids[i]] != expectedState) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"
    },
    "localhost/contracts/Common/MultiOwnable.sol": {
      "content": "/**\n * SPDX-License-Identifier: MIT\n *\n * Copyright (c) 2018 zOS Global Limited.\n * Copyright (c) CENTRE SECZ 2018-2020\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npragma solidity ^0.6.0;\n\nimport \"./Owners.sol\";\n\n/**\n * @notice The Ownable contract has an owner address, and provides basic\n * authorization control functions\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-labs/blob/3887ab77b8adafba4a26ace002f3a684c1a3388b/upgradeability_ownership/contracts/ownership/Ownable.sol\n * Modifications:\n * 1. Consolidate OwnableStorage into this contract (7/13/18)\n * 2. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\n * 3. Make public functions external (5/27/20)\n */\ncontract MultiOwnable {\n    Owners public ownersContract;\n\n    /**\n     * @dev The constructor sets the original owner of the contract to the sender account.\n     */\n    constructor(Owners _owners) public {\n        ownersContract = _owners;\n    }\n\n    // Deprecated\n    // function setOwnersContract(Owners _owners) external onlyOwners {\n    //     ownersContract = _owners;\n    // }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    // modifier onlyMainOwner() {\n    //     require(\n    //         tx.origin == ownersContract.mainOwner(),\n    //         \"MultiOwnable: caller is not the main owner\");\n    //     _;\n    // }\n\n    /**\n     * @dev Throws if called by any account other than the main owner or other owners.\n     */\n    modifier onlyOwners() {\n        require(tx.origin == ownersContract.mainOwner() || ownersContract.isOwner(tx.origin), \"MultiOwnable: caller is not the owner members\");\n        _;\n    }\n\n    //    modifier onlyOwnersIncludeOrigin() {\n    //        if (tx.origin == msg.sender) {\n    //            require(\n    //                msg.sender == _mainOwner || msg.sender == _contractOwner || owners[msg.sender],\n    //                \"MultiOwnable: caller is not the owner members\"\n    //            );\n    //        } else {\n    //            require(\n    //                tx.origin == _mainOwner || msg.sender == _mainOwner\n    //                || tx.origin == _contractOwner || msg.sender == _contractOwner\n    //                || owners[tx.origin] || owners[msg.sender],\n    //                \"MultiOwnable: caller is not the owner members\"\n    //            );\n    //        }\n    //        _;\n    //    }\n}\n"
    },
    "localhost/contracts/Common/Owners.sol": {
      "content": "pragma solidity ^0.6.0;\n\ncontract Owners {\n    // Owner of the contract\n    address private _mainOwner;\n    mapping(address => bool) private _owners;\n    /**\n     * @dev Event to show ownership has been transferred\n     * @param previousOwner representing the address of the previous owner\n     * @param newOwner representing the address of the new owner\n     */\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    event AddNewOwner(address indexed newOwner);\n\n    event RemoveOwner(address indexed owner);\n\n    modifier onlyMainOwner() {\n        require(msg.sender == _mainOwner, \"[OWN] Caller is not the main owner\");\n        _;\n    }\n\n    constructor() public {\n        setMainOwner(msg.sender);\n    }\n\n    /**\n     * @dev Tells the address of the owner\n     * @return the address of the owner\n     */\n    function mainOwner() external view returns (address) {\n        return _mainOwner;\n    }\n\n    function isOwner(address who) external view returns (bool) {\n        return who == _mainOwner || _owners[who];\n    }\n\n    /**\n     * @dev Sets a new owner address\n     */\n    function setMainOwner(address newOwner) private {\n        _mainOwner = newOwner;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferMainOwnership(address newOwner) external onlyMainOwner {\n        require(newOwner != address(0), \"[OWN] New owner is the zero address\");\n        emit OwnershipTransferred(_mainOwner, newOwner);\n        setMainOwner(newOwner);\n    }\n\n    function addOwner(address owner) external onlyMainOwner {\n        require(owner != address(0), \"[OWN] New owner is the zero address\");\n        _owners[owner] = true;\n\n        emit AddNewOwner(owner);\n    }\n\n    function removeOwner(address owner) external onlyMainOwner {\n        require(owner != address(0), \"[OWN] New owner is the zero address\");\n        require(_owners[owner], \"[OWN] Owner is not existed\");\n\n        delete _owners[owner];\n\n        emit RemoveOwner(owner);\n    }\n}\n"
    },
    "localhost/contracts/ERC1155/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC1155Receiver.sol\";\nimport \"../introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    constructor() public {\n        _registerInterface(ERC1155Receiver(0).onERC1155Received.selector ^ ERC1155Receiver(0).onERC1155BatchReceived.selector);\n    }\n}\n"
    },
    "localhost/contracts/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "localhost/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor() internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "localhost/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "localhost/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  }
}