{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/SenateProxiedV1.sol": {
      "content": "// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\nimport \"./VCProxy.sol\";\nimport \"./SenateV1.sol\";\n\n/// @author Guillaume Gonnaud 2019\n/// @title  Senate Proxy Smart Contract\n/// @notice The Senate proxy : this is this contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\ncontract SenateProxiedV1 is VCProxy, SenateHeaderV1, SenateStorageInternalV1  {\n\n    constructor(uint256 _version, address _vc)  public\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\n    {\n        lawmaker = msg.sender; //Only the creator of this smart contract will be able to submit new addresses to be voted on\n    }\n\n    //No other logic code as it is all proxied\n\n}\n\n\n"
    },
    "browser/SenateV1.sol": {
      "content": "// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\n/// @author Guillaume Gonnaud 2019\n/// @title Senate Header\n/// @notice Contain all the events emitted by the Senate\ncontract SenateHeaderV1 {\n    event AddedLogicCodeToVC(address law); //A new logic code address (law) was added to the available pool\n    event RemovedLogicCodeToVC(address law); //A logic code address (law) was removed from the available pool\n    event NewLawProposal(uint256 lawIndex, address law, uint256 enactionTime, bool revokeLaw, bool stateOfEmergency); //A new law proposal to vote on\n    event EnactProposal(uint256 lawIndex, address law, uint256 enactionTime, bool revokeLaw, bool stateOfEmergency); //The lawmaker applied a proposal\n    event Voted(bool vote, uint256 lawIndex, uint256 issueNumber, uint256 SerialNumber); //Emitted when a token holder vote on a low\n    event DemocracyOn(); //Enable voting before adding new laws\n    event DemocracyOff(); //Give back the ability to the lawmaker to add any law without a vote\n}\n\n\n/// @author Guillaume Gonnaud\n/// @title Senate Storage Internal\n/// @notice Contain all the storage of the Senate declared in a way that does not generate getters for Proxy use\ncontract SenateStorageInternalV1 {\n\n    bool internal democracy; //A bool controlling if address addition/removal is subject to vote\n    mapping (address => bool) internal laws; //The list of allowed smart contract addresses for use in the Version Control\n    address internal lawmaker; //Address allowed to sumbmit new address to be voted upon.\n    address[] internal lawPropositions; //List of proposed laws to be voted upon\n    address internal cryptographIndex; //The cryptograph index address\n    uint256 internal totalLaws; //The total number of published laws\n\n}\n\n\n/// @author Guillaume Gonnaud\n/// @title Senate Storage External\n/// @notice Contain all the storage of the Senate declared in a way that generates getters for Logic Code use\ncontract SenateStorageExternalV1 {\n\n    bool public democracy; //A bool controlling if address addition/removal is subject to vote\n    mapping(address => bool) public laws; //The list of allowed smart contract addresses for use in the VC\n    address public lawmaker; //Address allowed to sumbmit new address to be voted upon.\n    address[] public lawPropositions; //List of proposed laws to be voted upon\n    address public cryptographIndex; //The cryptograph index address\n    uint256 public totalLaws; //The total number of published laws\n}\n\n"
    },
    "browser/VCProxy.sol": {
      "content": "// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\n/* Based on a variation of https://blog.gnosis.pm/solidity-delegateproxy-contracts-e09957d0f201\nThis generic proxy is gonna ask a version control smart contract for its logic code instead\nof storing the remote address himself\n*/\n\n/*\nSmart contract only containing a public array named the same as VC so that the compiler call the proper\nfunction signature in our generic proxy\n*/\ncontract VersionControlStoragePublic {\n    address[] public code;\n}\n\n\n/*\nStorage stack of a proxy contract. VCproxy inherit this, as well as ALL logic contracts associated to a proxy for storage alignment reasons.\n*/\ncontract VCProxyData {\n    address internal vc; //Version Control Smart Contract Address\n    uint256 internal version; //The index of our logic code in the Version Control array.\n}\n\n\n/*\nLogic of a proxy contract. EVERY proxied contract inherit this\n*/\ncontract VCProxy is VCProxyData {\n    constructor(uint256 _version, address _vc) public {\n        version = _version;\n        vc = _vc;\n    }\n\n    fallback () virtual external payable {\n\n        address addr = VersionControlStoragePublic(vc).code(version);\n        assembly {\n            let freememstart := mload(0x40)\n            calldatacopy(freememstart, 0, calldatasize())\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\n            returndatacopy(freememstart, 0, returndatasize())\n            switch success\n            case 0 { revert(freememstart, returndatasize()) }\n            default { return(freememstart, returndatasize()) }\n        }\n    }\n\n    \n    /// @notice Generic catch-all function that refuse payments to prevent accidental Eth burn.\n    receive() virtual external payable{\n       require(false, \"Do not send me Eth without a reason\");\n    }\n}"
    }
  }
}