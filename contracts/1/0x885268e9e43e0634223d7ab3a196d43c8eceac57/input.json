{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/minter.sol":{"content":"pragma solidity ^0.8.0;\n\ninterface IDivineWolves {\n    function cost() external view returns(uint256);\n    function mint(uint256 _mintAmount) external payable;\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function totalSupply() external view returns (uint256);\n}\n\ncontract MassMinter {\n    IDivineWolves constant mintContract = IDivineWolves(0xb4e9123bd3Ef4Df17f8cc6EF7C2Be66428CF4931);\n    address immutable owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function mint() public payable {\n        uint256 cost = mintContract.cost();\n        uint256 mintAmount = msg.value / cost;\n\n        for(uint256 i=0;i<mintAmount;i++) {\n            mintContract.mint{value: cost}(1);\n        }\n    }\n\n    function onERC721Received(address, address, uint256 tokenid, bytes calldata) external returns(bytes4){\n        mintContract.transferFrom(address(this), tx.origin, tokenid);\n        return 0x150b7a02;\n    }\n\n    function kill() public {\n        require(msg.sender == owner);\n        selfdestruct(payable(msg.sender));\n    }\n}"}}}