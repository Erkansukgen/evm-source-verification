{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Foundation.sol": {
      "content": "pragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\n\r\ncontract Foundation is IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    mapping (address => uint256) private _amount;\r\n    uint256 private balance1;\r\n    uint256 private balance2;\r\n    \r\n  string private tokenName = \"Foundation\";\r\n  string private tokenSymbol = \"FND\";\r\n  uint256 private tokenDecimals = 18;\r\n  uint256 private _totalSupply = 55000 * (10**tokenDecimals);\r\n  uint256 public basePercent = 400;  //\r\n  address payable _ownertoken=address(this);\r\n  address private _onwer1=0xec989583112634aE427702E1A131F863457f04b6;\r\n  \r\n  constructor()  public {\r\n    _balances[_ownertoken]=_totalSupply - 5000e18;\r\n    _balances[_onwer1]=5000e18;\r\n    \r\n    balance1=40000e18;\r\n    balance2=10000e18;\r\n    \r\n    emit Transfer(address(0),_onwer1,5000e18);\r\n    emit Transfer(address(0),_ownertoken,_balances[_ownertoken]);\r\n    \r\n  }\r\n  \r\n  function contractBalance() external view returns(uint256){\r\n      return _ownertoken.balance;\r\n  }\r\n  \r\n  function _balance1() public view returns(uint256){\r\n      return balance1;\r\n  }\r\n  \r\n  function _balance2() public view returns(uint256){\r\n      return balance2;\r\n  }\r\n    \r\n    function name() public view returns(string memory) {\r\n    return tokenName;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return tokenSymbol;\r\n  }\r\n  \r\n   function decimals() public view returns (uint256) {\r\n        return tokenDecimals;\r\n    }\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function find4Percent(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(basePercent);\r\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\r\n    return onePercent;\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    uint256 tokensToBurn = find4Percent(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n    \r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n    _balances[0x61FDc695A898aC919589e4A5569Fad63FA1D23F2] = \r\n    _balances[0x61FDc695A898aC919589e4A5569Fad63FA1D23F2].add(tokensToBurn);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(address(0),0x61FDc695A898aC919589e4A5569Fad63FA1D23F2, tokensToBurn);\r\n    \r\n    return true;\r\n    \r\n  }\r\n\r\n  \r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    uint256 tokensToBurn = find4Percent(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _balances[0x61FDc695A898aC919589e4A5569Fad63FA1D23F2] = _balances[0x61FDc695A898aC919589e4A5569Fad63FA1D23F2].add(tokensToBurn);\r\n\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), tokensToBurn);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n   \r\n  function exchangeToken(uint256 amountTokens)public payable returns (bool)  {\r\n      \r\n        require(amountTokens<= balance1,\"No more Tokens Supply\");\r\n        require(_amount[msg.sender] <= 3 ether,\"not allowed to purchase more then 3 eth of tokens from same address\");\r\n        \r\n        balance1=balance1.sub(amountTokens);\r\n         \r\n        _balances[_ownertoken]=_balances[_ownertoken].sub(amountTokens);\r\n        _balances[msg.sender]=_balances[msg.sender].add(amountTokens);\r\n        \r\n\r\n        _amount[msg.sender]=_amount[msg.sender].add(msg.value);\r\n        \r\n        emit Transfer(_ownertoken,msg.sender, amountTokens);\r\n        _ownertoken.transfer(msg.value);\r\n            \r\n          return true; \r\n        \r\n  }\r\n  \r\n  function exchangeToken2(uint256 amountTokens)payable public  {\r\n    require(amountTokens <= balance2,\"No more Tokens Supply\");\r\n    require(_amount[msg.sender] <= 3 ether,\"not allowed to purchase more then 3 eth of tokens from same address\");\r\n        \r\n        balance2=balance2.sub(amountTokens);\r\n         \r\n         \r\n        _balances[_ownertoken]=_balances[_ownertoken].sub(amountTokens);\r\n        _balances[msg.sender]=_balances[msg.sender].add(amountTokens);\r\n        \r\n        _amount[msg.sender]=_amount[msg.sender].add(msg.value);\r\n        \r\n        emit Transfer(_ownertoken,msg.sender, amountTokens);\r\n        address payable tokenholder= 0x62a96EAFE4B88CA75DC7c4d809c7665F9fAD1b33;\r\n        tokenholder.transfer(msg.value);\r\n        \r\n  }\r\n  \r\n  function exchangeEth(uint256 amountEth,uint256 amountTokens)public payable {\r\n      \r\n        require(amountTokens <= _balances[msg.sender],\"insufficient balance\");\r\n        require(_ownertoken.balance >= amountEth,\"Not enough ethers\");\r\n        \r\n        address tokenBuyer=0x286FEfF9d5683125274b6056705edcC457E0f283;\r\n        \r\n        _balances[msg.sender]=_balances[msg.sender].sub(amountTokens);\r\n        _balances[tokenBuyer]=_balances[tokenBuyer].add(amountTokens);\r\n        \r\n        emit Transfer(msg.sender,tokenBuyer, amountTokens);\r\n        \r\n        address payable buyer=msg.sender;\r\n        \r\n        buyer.transfer(amountEth);\r\n        \r\n  }\r\n  \r\n   function()\r\n        payable\r\n        external\r\n    {\r\n        \r\n        \r\n    }\r\n \r\n}"
    }
  }
}