{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"tests/uni.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address account) external view returns (uint);\n    function transfer(address recipient, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ninterface IUniswapV2Router {\n  function swapExactTokensForTokens(\n  \n    //amount of tokens we are sending in\n    uint256 amountIn,\n    //the minimum amount of tokens we want out of the trade\n    uint256 amountOutMin,\n    //list of token addresses we are going to trade in.  this is necessary to calculate amounts\n    address[] calldata path,\n    //this is the address we are going to send the output tokens to\n    address to,\n    //the last time that the trade is valid for\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n}\n\ncontract contract58614fx{\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    function swap5zXfq(\n        uint _amountIn,\n        uint _amountOutMin,\n        address[] memory path\n    ) external {\n        require(IERC20(path[0]).approve(address(UNISWAP_V2_ROUTER), _amountIn), 'approve failed.');\n        IERC20(path[0]).transferFrom(msg.sender, address(this), _amountIn);\n\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\n            _amountIn,\n            _amountOutMin,\n            path,\n            msg.sender,\n            block.timestamp\n        );\n    }\n\n}"}}}