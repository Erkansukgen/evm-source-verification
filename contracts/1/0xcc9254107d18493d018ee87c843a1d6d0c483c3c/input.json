{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/GBPT.sol": {
      "content": "pragma solidity ^0.6.3;\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n}\n\ncontract GBPT {\n    string public name;\n    address public manager;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public isBlackListed;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n    event QE(address indexed from, uint256 value);\n    event AddedBlackList(address _user);\n    event RemovedBlackList(address _user);\n    \n\n    constructor(\n        uint256 initialSupply,\n        string memory tokenName,\n        string memory tokenSymbol\n    ) public {\n        initialSupply = 20000000  * 10 ** uint256(decimals);\n        tokenName = \"GBPT\";\n        tokenSymbol = \"GBPT\";\n        manager = msg.sender;\n        balanceOf[msg.sender] = initialSupply;\n        totalSupply =  initialSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(!isBlackListed[msg.sender]);\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n    \n    function QuantitaveEasing(uint256 _value) public returns (bool success) {\n        require(msg.sender == manager);   // Check if the sender is manager\n        balanceOf[msg.sender] += _value;        \n        totalSupply += _value;                      // Updates totalSupply\n        emit QE(msg.sender, _value);\n        return true;\n    }\n    \n    function transferOwnership(address newOwner) public{\n        require(msg.sender == manager);   // Check if the sender is manager\n        if (newOwner != address(0)) {\n            manager = newOwner;\n        }\n    }\n    \n    \n    function addBlackList (address _evilUser)  public{\n         require(msg.sender == manager);\n        isBlackListed[_evilUser] = true;\n        AddedBlackList(_evilUser);\n    }\n    \n    function removeBlackList (address _clearedUser) public {\n        require(msg.sender == manager);\n        isBlackListed[_clearedUser] = false;\n        RemovedBlackList(_clearedUser);\n    }\n\n  struct memoIncDetails {\n       uint256 _receiveTime;\n       uint256 _receiveAmount;\n       address _senderAddr;\n       string _senderMemo;\n   }\n  mapping(address => memoIncDetails[]) textPurchases;\n  \n  \n  function sendtokenwithmemo(uint256 _amount, address _to, string memory _memo)  public returns(uint256) {\n      textPurchases[_to].push(memoIncDetails(now, _amount, msg.sender, _memo));\n      _transfer(msg.sender, _to, _amount);\n      return 200;\n  }\n\n\n   function checkmemopurchases(address _addr, uint256 _index) view public returns(uint256,\n   uint256,\n   string memory,\n   address) {\n       uint256 rTime = textPurchases[_addr][_index]._receiveTime;\n       uint256 rAmount = textPurchases[_addr][_index]._receiveAmount;\n       string memory sMemo = textPurchases[_addr][_index]._senderMemo;\n       address sAddr = textPurchases[_addr][_index]._senderAddr;\n       if(textPurchases[_addr][_index]._receiveTime == 0){\n            return (0, 0,\"0\", _addr);\n       }else {\n            return (rTime, rAmount,sMemo, sAddr);\n       }\n   }\n\n\n   function getmemotextcountforaddr(address _addr) view public returns(uint256) {\n       return  textPurchases[_addr].length;\n   }\n   \n   \n   \n  \n  \n }"
    }
  }
}