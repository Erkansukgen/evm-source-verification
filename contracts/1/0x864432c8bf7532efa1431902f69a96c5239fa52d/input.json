{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\ninterface IPepsi {\n    function mint(bytes32[] memory proof, bytes32 leaf) external returns (uint256);\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function merkleEnabled() external view returns (bool);\n}\n\n\ncontract Miner {\n    IPepsi pepsi = IPepsi(0xa67D63E68715DCF9b65e45e5118b5fcD1e554b5f); // TODO: update this\n    bytes32 leaf = 0x5468616e6b20796f752c20506570736921000000000000000000000000000000; // Thank you, Pepsi!\n    bytes32[]  proof;\n\n    constructor(address owner) {\n        uint256 id = pepsi.mint(proof, leaf);\n        pepsi.transferFrom(address(this), owner, id-1);\n        selfdestruct(payable(owner));\n    }\n}\n\ncontract Helper {\n\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function mint() public {\n        new Miner(owner);\n    }\n\n    function mintBatch(uint256 amount) public {\n        uint i;\n        for (i = 0; i < amount; i++) {\n            new Miner(owner);\n        }\n    }\n}"
    }
  }
}