{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Gen1StakingPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nlibrary SafeMath {\n\n  /**\n   * @dev Multiplies two unsigned integers, reverts on overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\n\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath#sub: UNDERFLOW\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Adds two unsigned integers, reverts on overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath#add: OVERFLOW\");\n\n    return c; \n  }\n\n  /**\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n   * reverts when dividing by zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\n    return a % b;\n  }\n\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Gen1DNXFarm is Ownable {\n    \n    using SafeMath for uint256;\n    \n    struct StakerInfo {\n        uint256 amount;\n        uint256 startStakeTime;\n        uint256[] amounts;\n        uint256[] times;\n    }\n      uint256 public stakingStart;\n      uint256 public stakingEnd;\n      uint256 public stakingClosed;\n    \n    uint256 public maximumStakers;       // points generated per LP token per second staked\n    uint256 public currentStakers;\n    uint256 public minimumStake;\n    uint256 public stakingFee;\n    IERC20 dnxcToken;                    // token being staked\n    \n    address private _rewardDistributor;\n    mapping(address => StakerInfo) public stakerInfo;\n    uint256 internal fee;\n    bool paused;\n    bool emergencyUnstake;\n    \n    constructor(uint256 _minimumStake, uint256 _maximumStakers, uint256 _stakingFee, uint256 _stakingStart, uint256 _stakingClosed, uint256 _stakingEnd, IERC20 _dnxcToken) \n     {\n        \n        minimumStake = _minimumStake;\n        maximumStakers = _maximumStakers;\n        stakingFee = _stakingFee;\n        stakingStart = _stakingStart;\n        stakingClosed = _stakingClosed;\n        stakingEnd = _stakingEnd;\n        paused = true;\n        \n        dnxcToken = _dnxcToken;\n        _rewardDistributor = address(owner());\n    }\n    \n    function changePause(bool _pause) onlyOwner public {\n        paused = _pause;\n    }\n    \n    function changeEmergency(bool _emergencyUnstake) onlyOwner public {\n        emergencyUnstake = _emergencyUnstake;\n    }\n    \n    function changeDistributor(address _address) onlyOwner public {\n        _rewardDistributor = _address;\n    }\n    \n    function changeStakingFees(uint256 _stakingFee) onlyOwner public {\n        stakingFee = _stakingFee;\n    }\n    \n    function changeEndTime(uint256 endTime) public onlyOwner {\n      stakingEnd = endTime;\n    }\n    function changeCloseTime(uint256 closeTime) public onlyOwner {\n      stakingClosed = closeTime;\n    }\n    function changeStartTime(uint256 startTime) public onlyOwner {\n      stakingStart = startTime;\n    }\n      \n    function stake(uint256 _amount) public payable {\n        require (paused == false, \"E09\");\n        require (block.timestamp >= stakingStart, \"E07\");\n        require (block.timestamp <= stakingClosed, \"E08\");\n        require (currentStakers < maximumStakers, \"E09\");\n        require (_amount % minimumStake == 0, 'E10');\n        \n        StakerInfo storage user = stakerInfo[msg.sender];\n        require (user.amount.add(_amount) >= minimumStake, \"E01\");\n        require (dnxcToken.transferFrom(msg.sender, address(this), _amount), \"E02\");\n        \n        uint256 count = _amount.div(minimumStake);\n        require (msg.value >= stakingFee.mul(count), \"E04\");\n        \n        if (user.amount == 0) {\n            user.startStakeTime = block.timestamp;\n            currentStakers = currentStakers.add(1);\n        }\n        user.amount = user.amount.add(_amount);\n        user.amounts.push(user.amount);\n        user.times.push(block.timestamp);\n    }\n    \n    function unstake() public {\n        \n        require (emergencyUnstake || block.timestamp >= stakingEnd || block.timestamp <= stakingClosed, \"E08\");\n        StakerInfo storage user = stakerInfo[msg.sender];\n        \n        dnxcToken.transfer(\n            msg.sender,\n            user.amount\n        );\n        \n        currentStakers = currentStakers.sub(1);\n        user.amount = 0;\n    }\n    \n    function getUsersAmounts(address _user) public view returns (uint256[] memory) {\n        StakerInfo storage user = stakerInfo[_user];\n        return user.amounts;\n    }\n    \n    \n    function getUsersTimes(address _user) public view returns (uint256[] memory) {\n        StakerInfo storage user = stakerInfo[_user];\n        return user.times;\n    }\n    \n    function getTimestampOfStartedStaking(address _user) public view returns (uint256) {\n        StakerInfo storage user = stakerInfo[_user];\n        return user.startStakeTime;\n    }\n    \n    function withdrawFees() onlyOwner external {\n        require(payable(msg.sender).send(address(this).balance));\n    }\n    \n\n}"}}}