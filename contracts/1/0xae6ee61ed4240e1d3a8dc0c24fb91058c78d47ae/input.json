{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/3_Ballot.sol":{"content":"// Sources flattened with hardhat v2.4.1 https://hardhat.org\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File contracts/interfaces/utils/IUtils.sol\n\npragma solidity ^0.8.0;\n\ninterface IUtils {\n    function isContract(address addr) external view returns (bool);\n\n    function isContracts(address[] calldata addrs) external view returns (bool[] memory);\n\n    function getBalances(address token, address[] calldata addrs) external view returns (uint256[] memory);\n}\n\n// File contracts/utils/SNXAirDropHelper.sol\n\npragma solidity ^0.8.0;\n\ninterface IIssuer {\n    function collateral(address addr) external view returns (uint256);\n}\n\ncontract SNXAirDropHelper {\n    IERC20 public snx;\n    IUtils public utils;\n    IIssuer public issuer;\n\n    struct Info {\n        uint256 snx;\n        uint256 collateral;\n    }\n\n    constructor(\n        IERC20 _snx,\n        IUtils _utils,\n        IIssuer _issuer\n    ) {\n        require(address(_snx) != address(0), \"Invalid _snx\");\n        require(address(_utils) != address(0), \"Invalid _utils\");\n        require(address(_issuer) != address(0), \"Invalid _issuer\");\n\n        snx = _snx;\n        utils = _utils;\n        issuer = _issuer;\n    }\n\n    function getBalances(address[] calldata addrs) external view returns (Info[] memory) {\n        Info[] memory results = new Info[](addrs.length);\n\n        for (uint256 index = 0; index < addrs.length; index++) {\n            address addr = addrs[index];\n            if (!utils.isContract(addr)) {\n                // EOA address\n\n                results[index].snx = snx.balanceOf(addr);\n                results[index].collateral = issuer.collateral(addr);\n            }\n        }\n\n        return results;\n    }\n}\n"}}}