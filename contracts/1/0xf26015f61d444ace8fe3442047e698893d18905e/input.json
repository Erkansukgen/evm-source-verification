{"language":"Solidity","settings":{"libraries":{"mytest.sol":{"MLB":"0x15bd6f38056a7b094a9f7004f918863d792ff2f9"}},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"mytest.sol":{"content":"/*                                      .--.   \n                                      !      \\ \n                                      \\      | \n                                       '.__.'\n\n\n                                 -                                  --                   \n                               /- \\-                              --  \\-                 \n                             /-     \\           -\\              -/      \\-               \n             -            /--        \\-       /- -\\           -/          \\-             \n           -/ \\-        /-             \\    /-     \\       --/              \\-           \n         -/     \\-    /-                \\---        -\\   -/                   \\--        \n       -/         \\ --                    \\-          --/                       \\-      \n     -/            \\-                       \\       -/            On-chain        \\-    \n   -/                \\-                      \\-   -/             Mountains          \\-  \n -/                    \\                       \\-/                                    \\-\n________________________________________________________________________________________\n\n5000 beautiful animated mountain views with realistic atmospheric effects. Generated and stored completely on-chain. No IPFS.\nUnique linear mint system for each wallet with 10 different scenes:\n\n1st mint - you get Sunrise, \n2th - Day,\n3th - Cloudy Day, \n4th - Sunset,\n5th - Night Stars, \n6th - Night Crescent, \n7th - Night Moon, \n8th - Mars, \n9th - Mars Sunset, \n10th - Halloween Mystic Night,\nall next - random scene.\n\nWebsite: http://onchainmountains.art \nTwitter: https://twitter.com/Chain_Mountains\n\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n\n    /**\n     * @dev Converts a `hex string` to uint256\n     */\n     function fromHex(string memory c) internal pure returns (uint256) {\n        string memory s1 = Strings.substr(c,0,1);\n        string memory s2 = Strings.substr(c,1,2);\n        uint a;\n        uint b;\n        \n        if (bytes1(bytes(s1)) >= bytes1('0') && bytes1(bytes(s1)) <= bytes1('9')) {\n            a = strToUint(s1);\n        }\n        if (bytes1(bytes(s1)) >= bytes1('a') && bytes1(bytes(s1)) <= bytes1('f')) {\n            a = 10 + uint256(uint8(bytes1(bytes(s1)))) -  uint256(uint8(bytes1('a')));\n        }\n        \n        if (bytes1(bytes(s2)) >= bytes1('0') && bytes1(bytes(s2)) <= bytes1('9')) {\n            b = strToUint(s2);\n        }\n        if (bytes1(bytes(s2)) >= bytes1('a') && bytes1(bytes(s2)) <= bytes1('f')) {\n            b = 10 + uint256(uint8(bytes1(bytes(s2)))) -  uint256(uint8(bytes1('a')));\n        }\n        return b + 16 * a;\n     }\n     \n    \n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return Strings.substr(string(buffer), 2,4);\n    }\n    \n      function strToUint(string memory s) internal pure returns (uint256) {\n        bytes memory b = bytes(s);\n        uint256 result = 0;\n        for (uint256 i = 0; i < b.length; i++) { // c = b[i] was not needed\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint(uint8((b[i]))) - 48); // bytes and int are not compatible with the operator -.\n            }\n        }\n        return result; // this was missing\n    }\n\n    function substr(\n        string memory str,\n        uint256 startIndex,\n        uint256 endIndex\n    ) internal pure returns (string memory) {\n        bytes memory strBytes = bytes(str);\n        bytes memory result = new bytes(endIndex - startIndex);\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            result[i - startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n}\n\n\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping scenes to tokens\n    mapping(uint256 => uint256) public scenes;\n    \n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n    \n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        if (_balances[to] < 10) {\n            scenes[tokenId] = _balances[to];\n        } else {\n            scenes[tokenId] = uint256(keccak256(abi.encodePacked(string(abi.encodePacked(MLB.t(tokenId)))))) % 10;   \n        }\n        \n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n\n\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\n \ncontract GMGN is ERC721Enumerable, ReentrancyGuard, Ownable {\n    using Strings for string;\n    using MLB for *;\n        \n    uint256 public constant MINT_PRICE = 30000000000000000; \n    uint256 public constant MAX_PER_TX = 10; \n    uint256 public MAX_TOKENS = 5000;\n    bool public saleIsActive = true;\n     \n    string[] public TYPES = [\n        \"sunrise\",\n        \"day\",\n        \"dayClouds\",\n        \"sunset\",\n        \"nightStars\"\n        \"nightCres\",\n        \"nightMoon\",\n        \"mars\",\n        \"marsSunset\",\n        \"halloween\"\n    ];\n           \n    \n    function getScene(uint tokenId) public view returns (string memory) {\n        require(tokenId < totalSupply(), \"Scene not minted yet.\");\n        \n        uint lp = scenes[tokenId];\n            \n        MLB.chartCoords memory cr;\n        MLB.layerSettings memory ls;\n        MLB.layout memory out;\n        MLB.colorSettings memory cs;\n        MLB.draw memory d;\n\n        uint[13] memory rands = MLB.getRand(tokenId, lp);\n               \n        cr.sx = 0;    \n        cr.sy = 5050;          \n        cr.x = cr.sx;      \n        cr.xold = cr.x;\n        cr.n = 12;\n        cr.xstep = 40 * 12 / cr.n;        \n        cr.y = [cr.sy, cr.sy, cr.sy, cr.sy, cr.sy];  \n        cr.yold = [cr.sy, cr.sy, cr.sy, cr.sy, cr.sy];  \n        cr.sunOffset = rands[10] % 101;        \n        \n        ls.kHighs = [10, 7, 5, 4, 3];\n        ls.maxHighs = [80, 100, 140, 160, 200];\n        ls.probMove = [6,5,4,4,4];\n        ls.moveThres = [4,5,5,5,5];\n        ls.layersAmount = 2 + rands[11] % 4;\n        if (lp == 9 && ls.layersAmount > 3) ls.layersAmount = 3;\n        if (lp == 3 && ls.layersAmount < 4) ls.layersAmount = 4;\n        cs.delta[0] = 0; cs.delta[1] = 0; cs.delta[2] = 0;\n        cs.delta[rands[6] % 3] = 5 + rands[7] % 8;\n\n        out.o = \"\";      \n        out.pathCloud = \"\";\n        out.paths = [\"\", \"\", \"\", \"\", \"\"];\n            \n        for (uint i = 0; i < cr.n; i++) {   \n            cr.x += cr.xstep;\n            for (uint k = 0; k < ls.layersAmount; k++) {\n                \n                d.move = Strings.strToUint(Strings.substr(MLB.t(rands[k]), i, i + 1));\n                d.direction = d.move > ls.moveThres[k] ? 1 : 0;   \n                if (i == cr.n - 2) d.direction = 0;\n                d.offset = 20 + k * 10 + k * 5 * (1+d.move % 4);\n                if (i == 0) {\n                    cr.y[k] = cr.y[k] - d.offset;    \n                    cr.yold[k] = cr.y[k];\n                    out.paths[k] = string(abi.encodePacked(out.paths[k], \" L\", MLB.t(cr.sx), \",\", MLB.t(cr.y[k]))); \n                }\n                if (d.direction > 0) {\n                    cr.y[k] = cr.y[k] - (1+d.move % ls.probMove[k]) * ls.kHighs[k];\n                } else {\n                    cr.y[k] = cr.y[k] + (1+d.move % ls.probMove[k]) * ls.kHighs[k];\n                }\n                \n                if (cr.y[k] < cr.sy - ls.maxHighs[k]) cr.y[k] = cr.sy -  ls.maxHighs[k];\n                if (cr.y[k] > cr.sy - d.offset) cr.y[k] = cr.sy - d.offset;                  \n                \n                if (i == cr.n - 1) {        \n                    cr.y[k] = cr.sy - d.offset;   \n                }\n                \n                d.flipflag = 1;\n                d.kflip = 1 + d.move % 3;\n                d.pointsMax = 4 + d.move % 4;        \n                d.y1old = cr.yold[k];\n                for (uint j = 1; j <= d.pointsMax; j++) { \n                    d.x1 = cr.xold + (cr.x - cr.xold) / d.pointsMax * j;        \n                    if (d.flipflag == 1) {\n                        if (cr.y[k] > cr.yold[k]) {\n                            d.y1 = cr.yold[k] + (cr.y[k] - cr.yold[k]) / d.pointsMax * j + d.kflip * ((d.move * j) % 11 > 4 ? 1 : 0);                           \n                        } else {\n                            d.y1 = cr.yold[k] - (cr.yold[k] - cr.y[k]) / d.pointsMax * j + d.kflip * ((d.move * j) % 11 > 4 ? 1 : 0);                           \n                        }\n                    } else {\n                        if (cr.y[k] > cr.yold[k]) {\n                            d.y1 = cr.yold[k] + (cr.y[k] - cr.yold[k]) / d.pointsMax * j - d.kflip * ((d.move * j) % 11 > 4 ? 1 : 0);                       \n                        } else {\n                            d.y1 = cr.yold[k] - (cr.yold[k] - cr.y[k]) / d.pointsMax * j - d.kflip * ((d.move * j) % 11 > 4 ? 1 : 0);                       \n                        }\n                    }\n                    if (j < d.pointsMax - 1) {\n                        if (d.flipflag == 1) {\n                            d.flipflag = 0;\n                        } else {\n                            d.flipflag = 1;\n                        }\n                    }\n                    if (d.move > 7 && k < 3) {\n                        if (j < d.pointsMax) {\n                            if (d.direction > 0) {\n                                d.y1 = d.y1 + d.move;                \n                            } else {\n                                d.y1 = d.y1 - d.move;                \n                            }\n                        }\n                        out.paths[k] = string(abi.encodePacked(out.paths[k], \" L\",MLB.t(cr.xold + (cr.x - cr.xold) / d.pointsMax * (j-1)),\",\",MLB.t(d.y1)));  \n                        \n                    } else {\n                        out.paths[k] = string(abi.encodePacked(out.paths[k], \" C\", MLB.t(cr.xold + (cr.x - cr.xold) / d.pointsMax * (j-1)),\",\"));\n                        out.paths[k] = string(abi.encodePacked(out.paths[k], MLB.t(d.y1old),\" \",MLB.t(d.x1),\",\",MLB.t(d.y1),\" \"));\n                        out.paths[k] = string(abi.encodePacked(out.paths[k],MLB.t((cr.xold + (cr.x - cr.xold) / d.pointsMax * (2*j-1)/2)),\",\",MLB.t((d.y1+d.y1old)/2))); \n                    }           \n                    \n                    d.y1old = d.y1;   \n                }             \n                if (i == cr.n - 1) {\n                    out.paths[k] = string(abi.encodePacked(out.paths[k], \" L\",MLB.t(cr.x),\",\",MLB.t(cr.y[k]),\" L\",MLB.t(cr.x),\",\",MLB.t(cr.sy)));                      \n                }\n                cr.yold[k] = cr.y[k];                 \n                \n            }\n            \n            cr.xold = cr.x;\n            \n            /* clouds */\n            d.move = rands[5];\n            d.direction = d.move > 4 ? 1 : 0;  \n            if (lp == 2) {    \n                if (i == 0) { \n                    d.yc = cr.sy - 200;\n                } else if(i == cr.n - 1) {\n                    d.yc = cr.sy - 200;\n                } else {\n                    if (d.direction > 0) {\n                        d.yc = cr.sy - 200 - (d.move%3) * 30;\n                    } else {\n                        d.yc = cr.sy - 200 + (d.move%3) * 30;\n                    }\n                    if (d.yc < cr.sy - 300) d.yc = cr.sy - 300;\n                    if (d.yc > cr.sy) d.yc = cr.sy + 50;\n                }\n            } else {   \n                if (i == 0) { \n                    d.yc = cr.sy - 100;\n                }  else if(i == cr.n - 1) {\n                    d.yc = cr.sy - 100;\n                } else {\n                    if (d.direction > 0) {\n                        d.yc = cr.sy - 100 - (d.move%7) * 20;\n                    } else {\n                        d.yc = cr.sy - 100 + (d.move%7) * 20;\n                    }\n                    if (d.yc < cr.sy - 300) d.yc = cr.sy - 300;\n                    if (d.yc > cr.sy) d.yc = cr.sy + 50;\n                }\n            }         \n            out.pathCloud = string(abi.encodePacked(out.pathCloud,\" L\",MLB.t(cr.x),\",\",MLB.t(d.yc)));\n        }\n        \n        cs.fillopacity = \"30%\";\n        if (lp == 2 || lp == 0 || lp == 3 || lp == 8 ) cs.fillopacity = \"10%\";\n        if (lp >= 0 && lp <= 9) out.o = string(abi.encodePacked(MLB.getLP(tokenId, lp, cs, cr, ls)));\n\n        out.o = string(abi.encodePacked(out.o,'<filter id=\"farBlur\"><feGaussianBlur stdDeviation=\"2\"/></filter><filter id=\"farBlur2\"><feGaussianBlur stdDeviation=\"1\"/></filter>'));\n                \n        /* mountains layer 3-5 */\n        if (ls.layersAmount == 4) out.o = string(abi.encodePacked(out.o, '<path d=\"M',MLB.t(cr.sx),',',MLB.t(cr.sy),out.paths[4],' z\" stroke=\"none\" fill-opacity=\"',cs.fillopacity,'%\" fill=\"url(#gradient5)\" filter=\"url(#farBlur)\"></path>'));\n        if (ls.layersAmount >= 3) out.o = string(abi.encodePacked(out.o, '<path d=\"M',MLB.t(cr.sx),',',MLB.t(cr.sy),out.paths[3],' z\" stroke=\"none\" fill=\"url(#gradient4)\" filter=\"url(#farBlur2)\"></path>'));\n        if (ls.layersAmount >= 2) out.o = string(abi.encodePacked(out.o, '<path d=\"M',MLB.t(cr.sx),',',MLB.t(cr.sy),out.paths[2],' z\" stroke=\"none\" fill=\"url(#gradient3)\"></path>'));\n        \n        /* clouds */\n        if (lp == 2) {    \n            out.o = string(abi.encodePacked(out.o, '<filter id=\"clouds2\" height=\"300%\" width=\"200%\" x=\"-50%\" y=\"-100%\"><feTurbulence type=\"fractalNoise\" baseFrequency=\".05\" numOctaves=\"10\" /><feDisplacementMap in=\"SourceGraphic\" scale=\"120\" result=\"cloud\"/><feGaussianBlur in=\"cloud\" stdDeviation=\"8\" /></filter>'));\n            out.o = string(abi.encodePacked(out.o, '<path d=\"M',MLB.t(cr.sx),',',MLB.t(cr.sy-200),out.pathCloud,' L',MLB.t(cr.sx),',',MLB.t(cr.sy-200),' z\" stroke=\"#000\" filter=\"url(#clouds2)\" fill=\"#888\" fill-opacity=\"40%\"><animateMotion dur=\"240s\" repeatCount=\"indefinite\" path=\"M0,0 L480,0 L0,0z\" /></path>'));\n        } else {\n            out.o = string(abi.encodePacked(out.o,  '<filter id=\"clouds\" height=\"1000%\" width=\"400%\" x=\"-200%\" y=\"-500%\"><feTurbulence type=\"fractalNoise\" baseFrequency=\".005\" numOctaves=\"10\" /><feDisplacementMap in=\"SourceGraphic\" scale=\"240\" result=\"cloud\"/><feGaussianBlur in=\"cloud\" stdDeviation=\"15\" /></filter>'));\n            out.o = string(abi.encodePacked(out.o, '<path d=\"M',MLB.t(cr.sx),',',MLB.t(cr.sy-100),out.pathCloud,' L',MLB.t(cr.sx),',',MLB.t(cr.sy-100),' z\" stroke=\"#000\" filter=\"url(#clouds)\" fill=\"#fff\" fill-opacity=\"30%\"><animateMotion dur=\"180s\" repeatCount=\"indefinite\" path=\"M0,0 L480,0 L0,0z\" /></path>')); \n        }\n        \n        /* mountains layer 1,2 */\n        if (ls.layersAmount >= 1) out.o = string(abi.encodePacked(out.o,  '<path d=\"M',MLB.t(cr.sx),',',MLB.t(cr.sy),out.paths[1],' z\" stroke=\"none\" fill=\"url(#gradient2)\"></path>'));\n        out.o = string(abi.encodePacked(out.o, '<path d=\"M',MLB.t(cr.sx),',',MLB.t(cr.sy),out.paths[0],' z\" stroke=\"none\" fill=\"url(#gradient1)\" ></path>'));        \n        return string(abi.encodePacked('<svg id=\"lps\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 4750 480 300\"><style>text { font-family: arial }.t{font-size: 10px; fill: #adadad}.at{font-size: 10px; fill:#f6cb27} rect { width:10px; stroke: none}</style><rect x=\"0\" y=\"4750\" style=\"width:480px;height:100%;fill:url(#lsstyle',MLB.t(lp),'); stroke:none\"/>',out.o,'</svg>'));        \n     }\n\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\n        require(tokenId < totalSupply(), \"Scene not minted yet.\");\n        string memory o = getScene(tokenId);\n        \n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Mountains #', MLB.t(tokenId), '\", \"description\": \"5000 beautiful animated mountain views. Generated and stored completely on-chain. No IPFS.\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(o)), '\"}'))));\n        o = string(abi.encodePacked('data:application/json;base64,', json));\n\n        return o;\n    }\n\n    function flipSaleState() external onlyOwner {\n        saleIsActive = !saleIsActive;\n    }\n    \n    function mint(uint256 amount) external nonReentrant payable {\n        require(saleIsActive, \"Sale inactive\");\n        require(amount <= MAX_PER_TX, \"Mint up to 10 per tx.\");\n        require(totalSupply() + amount <= MAX_TOKENS, \"Max supply reached\");\n        require(msg.value >= MINT_PRICE * amount || owner() == _msgSender(), \"Try 0.03 eth per scene\");\n        uint256 index;\n        for (uint256 i = 0; i < amount; i++) {\n            index = totalSupply();        \n            _safeMint(_msgSender(), index);    \n        }\n    }\n    \n    function withdrawFunds() external onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n    \n    constructor() ERC721(\"On-Chain Mountains\", \"GMGN\") Ownable() {}\n}\n\n/// [MIT License]\n/// @title Spectacular mountains\n/// @notice functions\n/// @author @Cryptodizzie\n\nlibrary MLB {\n    \n      /* struct draw */\n    struct draw {        \n        uint move;\n        uint direction;\n        uint offset;\n        uint flipflag;\n        uint kflip;\n        uint pointsMax;\n        uint y1old; uint y1; uint x1;\n        uint yc;\n    }\n    \n    /* struct chartCoords */\n    struct chartCoords {        \n        uint n;\n        uint sx; uint sy;  \n        uint x; uint xold; uint xstep;          \n        uint[5] y;\n        uint[5] yold;\n        uint sunOffset;\n    }\n    \n    /* struct layerSettings */\n    struct layerSettings {\n        uint layersAmount;\n        uint8[5] kHighs;\n        uint8[5] maxHighs;\n        uint8[5] probMove;\n        uint8[5] moveThres;\n    }\n\n    struct layout {\n        string[5] paths;\n        string o;\n        string pathCloud;\n    }\n\n    struct colorSettings{        \n        uint256[3] delta;\n        string sc;\n        string sc2;\n        string offset_canvas;\n        string bottomcolor;\n        string fillopacity;\n        string[6] bc;\n    }\n    \n        \n    function getLP(uint tokenId, uint lp, colorSettings memory cs, chartCoords memory cr, layerSettings memory ls) public pure returns (string memory) {\n        uint[13] memory rands = getRand(tokenId, lp);\n        string memory dummy;\n        \n        cs.offset_canvas = \"30%\";\n        \n        string memory aer = string(abi.encodePacked('<g transform=\"translate(100,4720) scale(0.04,0.04)\"><path style=\"fill-opacity:10%\" fill=\"#264823\" d=\"M',t(cr.sx + 150),',',t(cr.sy - 100),'.32c2.97-9.83,9.83-15.37,19.46-18.19c4.14-1.22,9.64-2.21,11.62-5.21c2.09-3.18,0.81-8.63,0.84-13.09c0.06-8.85-0.01-17.71,0.03-26.56c0.04-8.7,3.91-12.62,12.48-12.64c11.97-0.02,23.95,0.08,35.92-0.05c4.3-0.05,7.69,1.34,10.63,4.44c4.97,5.25,10.21,10.26,15.12,15.57c2.06,2.22,3.71,2.7,6.7,1.53c27.01-10.59,53.76-21.94,81.23-31.19c60.14-20.25,115.01-9.4,162.86,32.23c36.03,31.34,34.98,87.11-1.01,118.55c-12.77,11.16-26.8,20.3-42.42,26.93c-2.17,0.92-3.22,2.24-3.86,4.5c-2.9,10.3-5.99,20.56-9.07,30.81c-2.09,6.96-5.32,9.4-12.46,9.4c-27.44,0.02-54.88,0.02-82.31,0c-7.08-0.01-10.41-2.57-12.39-9.49c-3.11-10.89-6.08-21.83-9.36-32.67c-0.48-1.6-2.07-3.44-3.6-4.06c-22.97-9.27-46.04-18.32-69.03-27.55c-2.27-0.91-3.53-0.46-5.11,1.2c-5.05,5.35-10.33,10.49-15.41,15.8c-2.84,2.97-6.12,4.44-10.28,4.41c-12.22-0.1-24.44,0-36.67-0.05c-7.83-0.03-11.91-4.13-11.96-12.06c-0.07-12.47-0.08-24.94,0.03-37.41c0.02-2.46-0.54-3.85-3.08-4.65c-3.55-1.11-6.87-2.98-10.43-4.06c-9.4-2.86-15.83-8.57-18.47-18.2Cz\"/><animateMotion dur=\"1800s\" repeatCount=\"indefinite\" path=\"M0,0 A 600,150 1 0 1 600,100 A 600,150 0 0 1 -600,150z\" /></g>'));\n        \n        if (lp == 0) {\n            /* sunrise */\n            cs.bottomcolor = \"#474747\";\n            cs.bc[1] = \"#676767\";\n            cs.sc = \"#e1866f\";\n            cs.sc2 = \"#f7e68c\";\n\n            \n            for (uint i = 1; i<=4; i++) {\n                cs.bc[i+1] =  rgbTint(cs.bc[i], i, 1);\n            }\n            cs.sc  =  rgbShift(cs.sc, cs.delta[0]*2, cs.delta[1]*2, cs.delta[2]*2, 1);\n\n            /* sunrise */            \n            dummy = string(abi.encodePacked('<filter id=\"sun\"><feGaussianBlur stdDeviation=\"3\"/></filter>', stars(4, cr.sx, cr.sy - 300, cr.sx + 400, cr.sy - 100, tokenId),'<circle r=\"40\" cx=\"',t(cr.sx + 200 + cr.sunOffset),'\" cy=\"',t(cr.sy - 100),'\" filter=\"url(#sun)\" fill-opacity=\"100%\" fill=\"#ffffaa\"><animate attributeName=\"cy\" begin=\"0s\" dur=\"90s\" repeatCount=\"0\" from=\"',t(cr.sy - 100),'\" to =\"',t(cr.sy - 150),'\" fill=\"freeze\"/><animate attributeName=\"r\" begin=\"0s\" dur=\"15s\" repeatCount=\"0\" from=\"40\" to=\"34\" fill=\"freeze\"/></circle>'));\n            \n        }\n        if (lp == 1) {\n            \n            /* daylight */\n            cs.bottomcolor = \"#163042\";\n            cs.bc[1] = \"#356382\";\n            cs.sc = \"#0487e2\";            \n            cs.sc2 = \"#afafaf\";    \n            \n            cs.bottomcolor = rgbShift(cs.bottomcolor, cs.delta[0], cs.delta[1], cs.delta[2], 1);\n            cs.bc[1] =  rgbShift(cs.bc[1], cs.delta[0], cs.delta[1], cs.delta[2], 1);\n            \n            /* daylight */\n            for (uint i = 1; i<=4; i++) {\n                cs.bc[i+1] = rgbTint(cs.bc[i], i, 1);\n            }\n            /* daylight sun */            \n            dummy = string(abi.encodePacked('<filter id=\"sun\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\"><feGaussianBlur stdDeviation=\"3\"/></filter><circle r=\"20\" cx=\"',t(cr.sx+100),'\" cy=\"',t(cr.sy-200),'\" filter=\"url(#sun)\" fill=\"#ffffaa\"><animateMotion dur=\"3600s\" repeatCount=\"indefinite\" path=\"M0,0 A 600,150 1 0 1 600,100 A 600,150 0 0 1 -600,150z\" /></circle>'));\n            \n        }   \n        \n        if (lp == 2) {\n            \n             /* daycloudy */\n            cs.bottomcolor = \"#111111\";\n            cs.bc[1] = \"#333333\";\n            cs.sc = \"#cccccc\";\n            cs.sc2 = \"#8f8f8f\";\n            \n            if (cs.delta[0] > 5) cs.delta[0] -=4;\n            if (cs.delta[1] > 5) cs.delta[1] -=4; \n            if (cs.delta[2] > 5) cs.delta[2] -=4;\n            cs.bottomcolor =  rgbShift(cs.bottomcolor, cs.delta[0],cs.delta[1],cs.delta[2], 1);\n            cs.bc[1] =  rgbShift(cs.bc[1], cs.delta[0],cs.delta[1],cs.delta[2], 1);\n            \n            /* daycloudy */\n            for (uint i = 1; i<=4; i++) {\n                cs.bc[i+1] =  rgbTint(cs.bc[i], i, 1);\n            }\n\n            /* daycloudy sun */            \n            dummy = string(abi.encodePacked('<filter id=\"sun\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\"><feGaussianBlur stdDeviation=\"8\"/></filter><circle r=\"20\" cx=\"',t(cr.sx+100),'\" cy=\"',t(cr.sy-200),'\" filter=\"url(#sun)\" fill-opacity=\"60%\" fill=\"#ffffff\"><animateMotion dur=\"3600s\" repeatCount=\"indefinite\" path=\"M0,0 A 600,150 1 0 1 600,100 A 600,150 0 0 1 -600,150z\" /></circle>','<circle r=\"80\" cx=\"',t(cr.sx+100),'\" cy=\"',t(cr.sy-200),'\" filter=\"url(#sun)\" fill-opacity=\"20%\" fill=\"#ffffff\"><animateMotion dur=\"3600s\" repeatCount=\"indefinite\" path=\"M0,0 A 600,150 1 0 1 600,100 A 600,150 0 0 1 -600,150z\" /></circle>'));\n     \n        }\n        \n        if (lp == 3) {\n             /* sunset */\n            cs.bottomcolor = \"#241818\";\n            cs.bc[1] = \"#4d3535\";\n            cs.sc = \"#0487e2\";\n            cs.sc2 = \"#d44e41\";\n            cs.offset_canvas = \"10%\";\n\n            cs.bc[1] =  rgbTint(cs.bc[1], 2, 1);\n            cs.bc[2] =  rgbTint(cs.bc[1], 1, 1);\n            cs.bc[3] =  rgbTint(cs.bc[1], 2, 1);            \n            cs.bc[4] = \"#8a5047\";\n            cs.bc[5] =  rgbTint(cs.bc[1], 4, 1);\n            \n            cs.sc  =  rgbShift(cs.sc, cs.delta[0]*2, cs.delta[1]*2, cs.delta[2]*2, 1);\n            /* sunset */\n            dummy = string(abi.encodePacked('<filter id=\"sun\"><feGaussianBlur stdDeviation=\"3\"/></filter><linearGradient id=\"sungrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"30%\" stop-color=\"#ffff88\"/><stop offset=\"90%\" stop-color=\"#cf4b3e\"/><animate attributeName=\"y2\" begin=\"0s\" dur=\"90s\" repeatCount=\"0\" from=\"100%\" to=\"0%\" fill=\"freeze\"></animate></linearGradient>'));\n            dummy = string(abi.encodePacked(dummy, stars(6, cr.sx, cr.sy - 300, cr.sx + 400, cr.sy - 150, tokenId),'<circle id=\"suncircle\" r=\"34\" cx=\"',t(cr.sx + 200 + cr.sunOffset),'\" cy=\"',t(cr.sy - 150),'\" filter=\"url(#sun)\" fill-opacity=\"100%\" fill=\"url(#sungrad)\"><animate attributeName=\"cy\" begin=\"0s\" dur=\"90s\" repeatCount=\"0\" from=\"',t(cr.sy - 150),'\" to =\"',t(cr.sy - 50),'\" fill=\"freeze\"/><animate attributeName=\"r\" begin=\"0s\" dur=\"15s\" repeatCount=\"0\" from=\"34\" to=\"40\" fill=\"freeze\"/></circle>'));\n        }\n        if (lp == 4) {\n            /* night stars */  \n            cs.sc = \"#000000\";\n            cs.sc2 = \"#99a0b4\";\n            cs.bottomcolor = \"#272823\";\n            cs.bc[1] = \"#292927\";\n\n            /* night */\n            for (uint i = 1; i<=4; i++) {\n                cs.bc[i+1] =  rgbTint(cs.bc[1], i, 1);\n            }\n            /* night stars */                \n            dummy = string(abi.encodePacked(stars(100, cr.sx, cr.sy-300, cr.sx+400, cr.sy, tokenId)));                                 \n        }\n        if (lp == 5) {\n            /* night crescent moon*/\n            cs.sc = \"#000000\";\n            cs.sc2 = \"#99a0b4\";\n            cs.bottomcolor = \"#272823\";\n            cs.bc[1] = \"#292927\";\n            for (uint i = 1; i<=4; i++) {\n                cs.bc[i+1] =  rgbTint(cs.bc[1], i, 1);\n            }\n            \n            dummy = string(abi.encodePacked('<radialGradient id=\"half_moon\" fx=\"15%\" fy=\"40%\" r=\"100%\" spreadMethod=\"pad\"><stop offset=\"50%\" stop-color=\"#000\"/><stop offset=\"100%\" stop-color=\"#ffffdd\"/></radialGradient>'));            \n            dummy = string(abi.encodePacked(dummy, '<filter id=\"moon\"><feGaussianBlur stdDeviation=\"1\"/></filter>', stars(20, cr.sx, cr.sy - 300, cr.sx + 400, cr.sy, tokenId)));\n            dummy = string(abi.encodePacked(dummy, '<circle r=\"20\" cx=\"',t(cr.sx + 100),'\" cy=\"',t(cr.sy - 200),'\" filter=\"url(#moon)\" fill-opacity=\"100%\" fill=\"url(#half_moon)\"><animateMotion dur=\"3600s\" repeatCount=\"indefinite\" path=\"M0,0 A 600,150 1 0 1 600,100 A 600,150 0 0 1 -600,150z\" /></circle>'));\n        }\n        if (lp == 6) {\n            /* night full moon */  \n            cs.sc = \"#000000\";\n            cs.sc2 = \"#99a0b4\";\n            cs.bottomcolor = \"#272823\";\n            cs.bc[1] = \"#292927\";\n            for (uint i = 1; i<=4; i++) {\n                cs.bc[i+1] =  rgbTint(cs.bc[1], i, 1);\n            }\n                                              \n            dummy = string(abi.encodePacked('<filter id=\"moon\"><feGaussianBlur stdDeviation=\"1\"/></filter>', stars(20, cr.sx, cr.sy - 300, cr.sx + 400, cr.sy, tokenId)));\n            dummy = string(abi.encodePacked(dummy, '<circle r=\"20\" cx=\"',t(cr.sx + 100),'\" cy=\"',t(cr.sy - 200),'\" filter=\"url(#moon)\" fill-opacity=\"100%\" fill=\"#c8c0b9\"><animateMotion dur=\"3600s\" repeatCount=\"indefinite\" path=\"M0,0 A 600,150 1 0 1 600,100 A 600,150 0 0 1 -600,150z\" /></circle>'));\n        }\n        if (lp == 7) {\n            cs.bottomcolor = \"#413023\";\n            cs.bc[1] = \"#754f33\";\n            cs.sc = \"#f1e0c4\";\n            cs.sc2 = \"#907c55\";\n            \n            cs.bottomcolor =  rgbShift(cs.bottomcolor, cs.delta[0], 0, 0, 1);\n            cs.bc[1] =  rgbShift(cs.bc[1], cs.delta[0], 0, 0, 1);\n            \n            /* mars */\n            for (uint i = 1; i<=4; i++) {\n                cs.bc[i+1] =  rgbTint(cs.bc[i], i, 1);\n            }\n            \n            /* mars sun */            \n            dummy = string(abi.encodePacked('<filter id=\"sun\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\"><feGaussianBlur stdDeviation=\"2\"/></filter><circle r=\"10\" cx=\"',t(cr.sx + 100),'\" cy=\"',t(cr.sy - 200),'\" filter=\"url(#sun)\" fill=\"#ffffff\"><animateMotion dur=\"3600s\" repeatCount=\"indefinite\" path=\"M0,0 A 600,150 1 0 1 600,100 A 600,150 0 0 1 -600,150z\" /></circle>'));  \n        }\n        if (lp == 8) {\n            cs.bottomcolor = \"#000000\";\n            cs.bc[1] = \"#33394d\";\n            cs.sc = \"#51698c\";\n            cs.sc2 = \"#4d4240\";\n            cs.offset_canvas = \"10%\";\n           \n            /* mars sunset */\n            cs.bc[1] =  rgbTint(cs.bc[1], 2, 0);\n            cs.bc[2] =  rgbTint(cs.bc[1], 1, 1);\n            cs.bc[3] =  rgbTint(cs.bc[1], 2, 1);            \n            cs.bc[4] = \"#33394d\";\n            cs.bc[5] =  rgbTint(cs.bc[1], 4, 1);            \n\n            /* mars sunset */            \n            dummy = string(abi.encodePacked('<filter id=\"sun\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\"><feGaussianBlur stdDeviation=\"2\"/></filter><filter id=\"sunhalo\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\"><feGaussianBlur stdDeviation=\"18\"/></filter><ellipse rx=\"70\" ry=\"100\" cx=\"',t(cr.sx + 200 + cr.sunOffset),'\" cy=\"',t(cr.sy - 120),'\" filter=\"url(#sunhalo)\" fill-opacity=\"50%\" fill=\"#a6b9dc\"><animate attributeName=\"cy\" begin=\"0s\" dur=\"85s\" repeatCount=\"0\" from=\"',t(cr.sy - 120),'\" to =\"',t(cr.sy - 20),'\" fill=\"freeze\"/></ellipse>'));            \n            dummy = string(abi.encodePacked(dummy, '<circle id=\"suncircle\" r=\"10\" cx=\"',t(cr.sx + 200 + cr.sunOffset),'\" cy=\"',t(cr.sy - 150),'\" filter=\"url(#sun)\" fill-opacity=\"100%\" fill=\"#fff\"><animate attributeName=\"cy\" begin=\"0s\" dur=\"90s\" repeatCount=\"0\" from=\"',t(cr.sy - 150),'\" to =\"',t(cr.sy - 50),'\" fill=\"freeze\"/><animate attributeName=\"r\" begin=\"0s\" dur=\"15s\" repeatCount=\"0\" from=\"10\" to=\"14\" fill=\"freeze\"/></circle>'));\n        }\n        if (lp == 9) {\n            cs.sc = \"#000000\";\n            cs.sc2 = \"#99a0b4\";\n            cs.bottomcolor = \"#000000\";\n            cs.bc[1] = \"#4f1511\";\n\n            /* halloween */\n            cs.bc[2] =  rgbTint(cs.bc[1], 1, 1);\n            cs.bc[3] =  rgbTint(cs.bc[1], 2, 1);\n            \n            /* halloween */                                    \n            dummy = string(abi.encodePacked('<filter x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\" id=\"pumpkin\"><feColorMatrix type=\"matrix\" result=\"color\" values=\"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\"></feColorMatrix><feGaussianBlur in=\"color\" stdDeviation=\"40\" result=\"blur\"></feGaussianBlur><feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offset\"></feOffset><feMerge><feMergeNode in=\"bg\"></feMergeNode><feMergeNode in=\"offset\"></feMergeNode><feMergeNode in=\"SourceGraphic\"></feMergeNode></feMerge></filter>',stars(20, cr.sx, cr.sy - 300, cr.sx + 400, cr.sy, tokenId)));\n\n            uint trx; uint trxy;\n            trx = rands[8] % 101;\n            trxy = 50 + rands[9] % 251;\n            dummy = string(abi.encodePacked(dummy , '<g transform=\"translate(100,4700) scale(0.04,0.04)\"><animateMotion dur=\"600s\" repeatCount=\"indefinite\" path=\"M0,0 C',t(trx),',-100 200,',t(trxy),' 200,50 C200-100 20,',t(trxy),' ',t(trx),',50 z\" />'));\n            dummy = string(abi.encodePacked(dummy, '<path filter=\"url(#pumpkin)\" style=\"stroke:none;fill:#c9782c;\" d=\"M ',t(cr.sx + 400),' ',t(cr.sy - 100),'l-4,13l-4,12l-5,13l-5,12l-5,12l-8,11l-8,11l-8,10l-9,10l-8,11l-8,10l-10,9l-10,10l-10,9l-10,-14l-9,-14l-10,-13l-3,15l-4,15l-3,16l-3,15l-13,3l-13,3l-12,3l-13,2l-13,0l-13,1l-12,-1l-13,-3l-13,-1l-12,-4l-12,-3l-12,-4l-4,-15l-4,-14l-3,-15l-4,-15l-8,13l-7,14l-8,13l-12,-11l-12,-10l-11,-10l-10,-13l-10,-12l-10,-12l-8,-14l-8,-14l-7,-14l-5,-14l-6,-15l-6,-15l13,9l14,8l13,8l14,7l15,5l14,7l3,14l3,13l3,14l3,14l7,-11l8,-10l7,-11l6,-11l14,2l13,3l13,2l13,2l13,1l14,1l13,0l14,0l13,-1l13,-1l14,-2l13,-1l13,-4l13,-3l14,-1l9,13l9,14l9,14l4,-14l2,-13l3,-14l3,-13l13,-8l14,-7l13,-9l14,-7l13,-9l13,-9zm-420,-94l8,-20l11,-19l14,-15l15,-16l12,17l13,16l12,16l13,15l15,14l13,15l15,14l-22,3l-21,0l-21,0l-21,-2l-21,-5l-21,-5l-20,-8zm9,-66l8,-12l10,-13l9,-12l10,-10l6,-4l9,17l9,12l9,12l9,11l9,12l10,12l11,12l11,11l10,12l1,2l-1,-1l-13,-11l-13,-10l-12,-11l-9,-9l-9,-9l-9,-9l-6,-6l-9,-13l-11,-12l-13,9l-12,11l-15,11zm147,124l11,4l11,1l10,3l11,1l11,-2l10,-4l11,-3l10,-4l9,-5l-12,17l-9,18l-10,18l-8,18l-8,19l-10,-18l-11,-17l-11,-17l-12,-17l-12,-16zm102,-39l12,-16l13,-16l12,-16l12,-16l11,-17l10,-18l18,14l14,16l12,17l10,19l7,20l-19,10l-20,7l-21,5l-21,3l-21,3l-21,1l-21,-1zm-12,-18l9,-14l9,-13l9,-14l8,-15l8,-15l9,-14l5,-13l6,-13l5,-13l0,0l16,10l11,11l11,10l11,11l3,3l-3,-1l-10,-7l-12,-5l-11,-6l-10,-4l-8,14l-9,13l-8,14l-8,10l-7,11l-9,11l-8,10l-9,10l-9,11zm234,-133c-1,-1,-2,-2,-3,-2c2,6,3,14,5,18c4,8,8,15,11,19c3,4,6,23,5,43c-1,20,-5,30,-10,41c-1,-3,2,-19,2,-27c0,-8,0,-32,-1,-37c-3,-15,-24,-55,-36,-69c-6,-2,-12,-4,-18,-7c-16,-9,-22,-21,-49,-27c-18,-5,-34,-1,-46,1c2,3,10,9,10,9c5,6,9,13,13,20c1,5,3,10,3,13c0,3,9,16,13,21c7,10,3,26,4,36c-6,-8,-8,-18,-9,-25c-1,-7,-12,-20,-17,-30c-6,-10,-15,-16,-16,-20c1,-8,-4,-13,-7,-14c-3,-2,-14,-6,-21,-8c-4,-8,-14,-12,-44,-11c0,-7,-2,-10,-10,-12c-9,-4,-16,7,-23,-23c-7,-30,-52,-71,-67,-92c-15,-21,-32,17,-18,34c39,48,19,79,-3,78c-12,0,-16,6,-17,11c-9,0,-17,-2,-26,1c-4,1,-8,4,-9,6c-2,4,-18,24,-22,30c-2,12,-9,20,-15,28c1,-15,2,-25,6,-39c4,-7,9,-14,15,-20c-19,0,-30,-5,-58,-1c-14,3,-26,8,-36,14c-6,4,-13,11,-14,14c-1,2,-23,16,-24,28c-1,10,-6,25,-10,32c-6,12,-7,44,-7,44c0,0,-4,-23,-4,-23c1,-12,3,-24,4,-36c0,0,4,-18,9,-22c2,-2,5,-12,8,-19c-8,4,-17,9,-23,14c-53,43,-81,110,-84,188c-3,105,35,202,123,263c15,10,36,20,57,28c-17,-14,-36,-33,-51,-52c-5,-19,-10,-37,-11,-57c-1,-15,1,-26,6,-39c1,50,3,63,24,102c13,8,13,15,27,23c9,12,19,22,29,31c10,2,20,3,29,4c9,5,17,9,25,13c18,2,31,-1,49,-3c-8,-5,-17,-11,-20,-10c-8,3,-30,-26,-30,-31c-1,-9,-3,-23,-7,-36c12,16,21,36,24,45c4,5,11,8,24,12c9,9,18,20,28,25c10,2,86,8,102,-1c3,-6,14,-13,16,-18c4,-8,11,-14,16,-22c5,-7,9,-15,12,-24c5,-5,6,-13,14,-18c-4,11,-8,22,-13,33c0,8,-1,17,-4,24c-10,10,-18,19,-28,26c5,0,12,-1,18,-3c15,-3,42,-9,49,-12c3,-6,5,-12,7,-18c6,-5,13,-10,18,-16c9,-7,17,-15,24,-24c6,-7,12,-15,17,-23c5,-11,10,-24,14,-37c0,17,-2,34,-5,50c-9,11,-18,21,-27,30c-4,7,-8,12,-13,18c-3,4,-6,8,-9,12c10,-4,20,-9,30,-15c83,-55,142,-154,146,-253c3,-81,5,-146,-71,-206 \"/></g>'));                            \n        }\n        \n        if (rands[12] % 337 < 110 && lp < 4) dummy = string(abi.encodePacked(aer, dummy));\n        \n        dummy = string(abi.encodePacked(dummy, '<linearGradient id=\"lsstyle',t(lp),'\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"',cs.offset_canvas,'\" stop-color=\"',cs.sc,'\"/><stop offset=\"',(lp == 3 ? '60' : '100'),'%\" stop-color=\"',cs.sc2,'\"/>',(lp == 3 ? '<stop offset=\"70%\" stop-color=\"#974638\"/><animate attributeName=\"y2\" begin=\"0s\" dur=\"15s\" repeatCount=\"0\" from=\"100%\" to=\"90%\" fill=\"freeze\"></animate>' : ''),'</linearGradient>'));\n        \n        /* mountains */\n        for (uint layer = 1; layer <= ls.layersAmount; layer++) {    \n            dummy = string(abi.encodePacked(dummy, '<linearGradient id=\"gradient',t(layer),'\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"',(layer == 3 ? \"40%\" : (layer == 2 ? \"60%\" : \"20%\")),'\" stop-color=\"',cs.bc[layer],'\"/><stop offset=\"100%\" stop-color=\"',(layer == 1 ? cs.bottomcolor : cs.bc[5]),'\"/></linearGradient>'));\n        }\n        return dummy;\n    }\n    \n    function bytesToUint(bytes memory b) internal pure returns (uint256) {\n        uint256 number;\n        for(uint i=0;i<b.length;i++){\n            number = number + uint(uint8(b[i])*(2**(8*(b.length-(i+1)))));\n        }\n        return number;\n    }\n    \n    function t(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n    \n     function getRand(uint tokenId, uint lp) public pure returns(uint[13] memory) {\n         string memory tid = t(tokenId);\n         string memory lid = t(lp);\n         \n         return [\n                random(abi.encodePacked(\"FIRST\",  tid, lid)),\n                random(abi.encodePacked(\"SECOND\", tid, lid)),\n                random(abi.encodePacked(\"THIRD\",  tid, lid)),\n                random(abi.encodePacked(\"FOURTH\", tid, lid)),\n                random(abi.encodePacked(\"FIFTH\",  tid, lid)),\n                random(abi.encodePacked(\"CLOUDS\", tid, lid)),\n                random(abi.encodePacked(\"CHANNEL\",  tid, lid)),\n                random(abi.encodePacked(\"RGBVALUE\", tid, lid)),\n                random(abi.encodePacked(\"TR1X\",  tid, lid)),\n                random(abi.encodePacked(\"TR1Y\",  tid, lid)),\n                random(abi.encodePacked(\"SUNOFFSET\", tid, lid)),\n                random(abi.encodePacked(\"LAYERS\", tid, lid)),\n                random(abi.encodePacked(\"AEROSTAT\", tid, lid))\n        ];\n    } \n    \n    function random(bytes memory input) public pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(string(input))));\n    }\n    \n        \n\n    function hexToRGB(string memory rgb) public pure returns (uint[3] memory) {\n        return [\n            Strings.fromHex(Strings.substr(rgb, 1, 3)),\n            Strings.fromHex(Strings.substr(rgb, 3, 5)),\n            Strings.fromHex(Strings.substr(rgb, 5, 7))\n        ];\n    }\n    \n    function rgbTint(string memory rgb, uint k, uint sig)  public pure returns (string memory) {\n        return rgbShift(rgb, k*10, k*10, k*10, sig);\n    }\n    \n    function rgbShift(string memory rgb, uint dr, uint dg, uint db, uint sig) public pure returns (string memory) {            \n        uint[3] memory rgbarr = hexToRGB(rgb);\n        uint[3] memory rgbres;\n        \n        if (sig == 1) {\n            rgbres = [rgbarr[0] + (255 - rgbarr[0]) * dr / 100, rgbarr[1] + (255 - rgbarr[1]) * dg / 100, rgbarr[2] + (255 - rgbarr[2]) * db / 100];\n        } else {\n            rgbres = [rgbarr[0] - (255 - rgbarr[0]) * dr / 100, rgbarr[1] - (255 - rgbarr[1]) * dg / 100, rgbarr[2] - (255 - rgbarr[2]) * db / 100];\n        }\n        \n        if (rgbres[0] > 255) rgbres[0] = 255; \n        if (rgbres[1] > 255) rgbres[1] = 255;\n        if (rgbres[2] > 255) rgbres[2] = 255;        \n        return rgbToHex(rgbres);\n    }\n    \n    function rgbToHex(uint[3] memory rgbres) public pure returns (string memory)  {\n        return string(abi.encodePacked(\"#\",Strings.toHexString(rgbres[0]),Strings.toHexString(rgbres[1]),Strings.toHexString(rgbres[2])));\n    }\n      \n    function stars(uint n, uint fromx, uint fromy, uint tox, uint toy, uint tokenId)  public pure returns (string memory)  {\n        require(toy != fromy, \"Error toy and fromy\");\n        string memory result = \"\";\n        uint x; uint y; uint opacity; uint offsetx; uint offsety; \n        for (uint i = 1; i<=n; i++) {\n            \n            offsetx = random(abi.encodePacked(\"XFAEB\", t(tokenId * i))) % 201;    \n            offsety = random(abi.encodePacked(\"YF24C\", t(tokenId * i))) % 201;    \n            \n            x = (fromx * 100 + (tox * 100 - fromx * 100) / 200 * offsetx) / 100;\n            y = (fromy * 100 + (toy * 100 - fromy * 100) / 200 * offsety) / 100;            \n            if (y < fromy && toy >= fromy)  {\n                opacity = 0;\n            } else if (toy < fromy && y >= fromy) {\n                opacity = 0;\n            } else {\n                opacity = 100 - 100 * (y-fromy) / (toy-fromy);\n            }\n            result = string(abi.encodePacked(result, '<circle cx=\"',t(x),'\" cy=\"',t(y),'\" r=\"0.5\" fill=\"#fff\" fill-opacity=\"',t(opacity),'%\"></circle>'));\n        }\n        return result;\n    }\n}\n\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}"}}}