{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "stake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n}\n\ninterface IQLF {\n    function ifQualified(address addr) external view returns (bool qualified);\n}\n\ncontract Stake is Ownable {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    uint256 private constant ONE_YEAR = 365;\n    uint256 private MIN_STAKE_TIME = 1 days;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 pid; // Pool id\n        uint256 index; // Deposit index\n        string name; // name\n        uint256 amount; // How many tokens the user has provided.\n        uint256 depositAt; // User deposit block timestamp.\n        uint256 expireAt; // User deposit expire timestamp.\n        bool compound; // User compound to demand deposit\n        bool settled; // User settle flag.\n    }\n\n    struct WithdrawInfo {\n        uint256 pid; // pool id\n        uint256 dIndex; // index for deposit record\n        uint256 wIndex; // index for withdraw record\n        uint256 depositAt; // deposit at timestamp\n        uint256 withdrawAt; // withdraw at timestamp\n        uint256 dAmount; // user deposit amount\n        uint256 wAmount; // withdraw amount\n        uint256 reward; // withdraw reward\n        uint256 rAmount; // remain amount\n    }\n\n    struct RecurringAPY {\n        uint256 recurringDuration; // pool recurring reward duration\n        uint256 recurringRewardNumerator; // recurring reward apy numerator\n        uint256 recurringRewardDenominator; // recurring reward apy denominator\n    }\n\n    struct APY {\n        uint256 duration; // Demand deposit duration\n        uint256 rewardNumerator; // Demand deposit reward apy numerator\n        uint256 rewardDenominator; // Demand deposit reward apy denominator\n    }\n\n    // Info of each pool\n    struct PoolInfo {\n        uint256 pid; // pool id\n        IERC20 pToken; // pool deposit token\n        string name; // pool name\n        bool isDepositPaused; // is pool paused\n        bool isWithdrawPaused; // is withdraw paused\n        bool isWhiteList; // is whitelist\n        bool isRecurring; // is pool recurring stake\n        uint256 startTime; // pool start timestamp\n        uint256 totalStake; // total stake\n        uint256 settledReward; // already settled reward\n        RecurringAPY recurringAPY; // pool recurring apy\n        APY apy; // pool apy\n    }\n\n    IQLF public addressQLF;\n    // Info of each user that stakes tokens.\n    mapping(uint256 => mapping(address => UserInfo[])) public userInfo;\n\n    // Info of each user that withdraw.\n    mapping(uint256 => mapping(address => WithdrawInfo[])) public withdrawInfos;\n\n    // User join pool ids\n    mapping(address => uint256[]) public userPids;\n\n    // Each pool info\n    PoolInfo[] public poolInfo;\n\n    // All participant address\n    address[] public participants;\n\n    // Allow emergency withdraw if needed\n    bool private allowEmergencyWithdraw;\n\n    event AddPool(uint256 pid, string name, uint256 startTime);\n\n    event Deposit(\n        uint256 pid,\n        address indexed user,\n        uint256 amount,\n        uint256 index\n    );\n    event Withdraw(\n        address indexed user,\n        uint256 pid,\n        uint256 index,\n        uint256 amount,\n        uint256 reward\n    );\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 pid,\n        uint256 index,\n        uint256 amount\n    );\n\n    // receive ethers\n    receive() external payable {}\n\n    // Add a new round. Can only be called by the owner.\n    function addPool(\n        IERC20 _pToken,\n        string memory _name,\n        bool _isWhiteList,\n        bool _isRecurring,\n        uint256 _startTime,\n        uint256 _recurringDuration,\n        uint256 _recurringRewardNumerator,\n        uint256 _recurringRewardDenominator,\n        uint256 _duration,\n        uint256 _rewardNumerator,\n        uint256 _rewardDenominator\n    ) external onlyOwner {\n        require(\n            _recurringRewardNumerator > 0,\n            \"reward denominator can't be zero\"\n        );\n        require(_recurringDuration >= MIN_STAKE_TIME, \"at least one day\");\n        uint256 pid = poolInfo.length;\n        poolInfo.push(\n            PoolInfo({\n                pid: pid,\n                name: _name,\n                pToken: _pToken,\n                isDepositPaused: false,\n                isWithdrawPaused: false,\n                isWhiteList: _isWhiteList,\n                isRecurring: _isRecurring,\n                startTime: _startTime,\n                totalStake: 0,\n                settledReward: 0,\n                recurringAPY: RecurringAPY({\n                    recurringDuration: _recurringDuration,\n                    recurringRewardNumerator: _recurringRewardNumerator,\n                    recurringRewardDenominator: _recurringRewardDenominator\n                }),\n                apy: APY({\n                    duration: _duration,\n                    rewardNumerator: _rewardNumerator,\n                    rewardDenominator: _rewardDenominator\n                })\n            })\n        );\n\n        emit AddPool(pid, _name, _startTime);\n    }\n\n    function setEmergencyWithdraw(bool _allow) external onlyOwner {\n        allowEmergencyWithdraw = _allow;\n    }\n\n    function setMinStakeTime(uint256 _time) external onlyOwner {\n        MIN_STAKE_TIME = _time;\n    }\n\n    function setPoolPaused(\n        uint256 _pid,\n        bool _isDepositPaused,\n        bool _isWithdrawPaused\n    ) external onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        pool.isDepositPaused = _isDepositPaused;\n        pool.isWithdrawPaused = _isWithdrawPaused;\n    }\n\n    function setPoolName(uint256 _pid, string memory _name) external onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        pool.name = _name;\n    }\n\n    function getPoolName(uint256 _pid) external view returns (string memory) {\n        PoolInfo storage pool = poolInfo[_pid];\n        return pool.name;\n    }\n\n    function setPoolWhiteList(uint256 _pid, bool _isWhiteList)\n        external\n        onlyOwner\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        pool.isWhiteList = _isWhiteList;\n    }\n\n    function updatePoolAPY(\n        uint256 _pid,\n        bool _isRecurring,\n        uint256 _recurringDuration,\n        uint256 _recurringRewardNumerator,\n        uint256 _recurringRewardDenominator,\n        uint256 _duration,\n        uint256 _rewardNumerator,\n        uint256 _rewardDenominator\n    ) external onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        pool.isRecurring = _isRecurring;\n        pool.recurringAPY.recurringDuration = _recurringDuration;\n        pool.recurringAPY.recurringRewardNumerator = _recurringRewardNumerator;\n        pool\n            .recurringAPY\n            .recurringRewardDenominator = _recurringRewardDenominator;\n        pool.apy.duration = _duration;\n        pool.apy.rewardNumerator = _rewardNumerator;\n        pool.apy.rewardDenominator = _rewardDenominator;\n    }\n\n    function getAllPools() external view returns (PoolInfo[] memory) {\n        return poolInfo;\n    }\n\n    function allPoolsLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function allParticipantsLength() external view returns (uint256) {\n        return participants.length;\n    }\n\n    function getAllParticipants() external view returns (address[] memory) {\n        return participants;\n    }\n\n    function getUserDepositLength(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        return userInfo[_pid][_user].length;\n    }\n\n    function getPoolTotalStake(uint256 _pid) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        return pool.totalStake;\n    }\n\n    function setAddressQLF(IQLF _qlf) public onlyOwner returns (bool) {\n        addressQLF = _qlf;\n        return true;\n    }\n\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _compound\n    ) external {\n        require(_amount > 0, \"invalid amount\");\n        require(_pid < poolInfo.length, \"invalid pool\");\n        PoolInfo storage pool = poolInfo[_pid];\n        require(!pool.isDepositPaused, \"pool is paused\");\n        bool qualified =\n            !pool.isWhiteList || addressQLF.ifQualified(msg.sender);\n        require(qualified, \"user not in whitelist\");\n\n        // deposit to pool\n        TransferHelper.safeTransferFrom(\n            address(pool.pToken),\n            address(msg.sender),\n            address(this),\n            _amount\n        );\n\n        pool.totalStake = pool.totalStake.add(_amount);\n\n        uint256 index = userInfo[_pid][msg.sender].length;\n        if (index == 0) {\n            participants.push(msg.sender);\n            userPids[msg.sender].push(_pid);\n        }\n\n        uint256 expiredAt = 0;\n        if (pool.isRecurring) {\n            expiredAt = block.timestamp.add(\n                pool.recurringAPY.recurringDuration\n            );\n        }\n        userInfo[_pid][msg.sender].push(\n            UserInfo({\n                pid: _pid,\n                name: pool.name,\n                index: index,\n                amount: _amount,\n                compound: _compound,\n                settled: false,\n                depositAt: block.timestamp,\n                expireAt: expiredAt\n            })\n        );\n\n        emit Deposit(_pid, msg.sender, _amount, index);\n    }\n\n    function withdraw(\n        uint256 _pid,\n        uint256 _index,\n        address _receiver,\n        uint256 _amount\n    ) public {\n        require(\n            allowWithdraw(_pid, _index, block.timestamp),\n            \"withdraw isn't allow\"\n        );\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender][_index];\n\n        uint256 reward = getReward(_pid, _index, msg.sender, block.timestamp);\n\n        uint256 totalAmount = reward.add(user.amount);\n        require(\n            pool.pToken.balanceOf(address(this)) > totalAmount,\n            \"insufficient balance\"\n        );\n        require(totalAmount >= _amount, \"insufficient amount\");\n        if (_amount == 0) {\n            _amount = totalAmount;\n        }\n        emit Withdraw(msg.sender, _pid, _index, _amount, reward);\n        TransferHelper.safeTransfer(\n            address(pool.pToken),\n            address(_receiver),\n            _amount\n        );\n\n        uint256 wIndex = withdrawInfos[_pid][msg.sender].length;\n        // deposit amount is user's amount\n        uint256 dAmount = user.amount;\n        uint256 wAmount = 0;\n        uint256 wReward = 0;\n\n        pool.totalStake = pool.totalStake.sub(user.amount);\n        pool.settledReward = pool.settledReward.add(reward);\n        if (totalAmount == _amount) {\n            wAmount = user.amount;\n            wReward = reward;\n            user.settled = true;\n            user.amount = 0;\n        } else {\n            user.amount = totalAmount.sub(_amount);\n            pool.totalStake = pool.totalStake.add(user.amount);\n            if (_amount <= reward) {\n                wReward = _amount;\n            } else {\n                wReward = reward;\n                wAmount = _amount.sub(reward);\n            }\n        }\n\n        // remain deposit amount is the new user's amount\n        uint256 rAmount = user.amount;\n        withdrawInfos[_pid][msg.sender].push(\n            WithdrawInfo({\n                pid: _pid,\n                dIndex: _index,\n                wIndex: wIndex,\n                depositAt: user.depositAt,\n                withdrawAt: block.timestamp,\n                dAmount: dAmount,\n                wAmount: wAmount,\n                reward: wReward,\n                rAmount: rAmount\n            })\n        );\n    }\n\n    function getUserAllDepositLength(address _user)\n        public\n        view\n        returns (uint256)\n    {\n        uint256[] memory pids = userPids[_user];\n\n        uint256 count = 0;\n        for (uint256 i = 0; i < pids.length; i++) {\n            uint256 depositLength = userInfo[pids[i]][_user].length;\n            count = count.add(depositLength);\n        }\n\n        return count;\n    }\n\n    function getUserAllPoolDeposit(address _user)\n        public\n        view\n        returns (UserInfo[] memory)\n    {\n        uint256[] memory pids = userPids[_user];\n\n        UserInfo[] memory infos =\n            new UserInfo[](getUserAllDepositLength(_user));\n\n        uint256 index = 0;\n        for (uint256 i = 0; i < pids.length; i++) {\n            uint256 depositLength = userInfo[pids[i]][_user].length;\n            for (uint256 j = 0; j < depositLength; j++) {\n                infos[index] = userInfo[pids[i]][_user][j];\n                index++;\n            }\n        }\n        return infos;\n    }\n\n    // getUserAllPoolDepositAndReward. get user all pool deposit, and sum all reward.\n    function getUserAllPoolDepositAndReward(address _user, uint256 _curTime)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        UserInfo[] memory infos = getUserAllPoolDeposit(_user);\n        uint256 totalAmount = 0;\n        uint256 totalReward = 0;\n\n        for (uint256 i = 0; i < infos.length; i++) {\n            if (infos[i].settled) {\n                continue;\n            }\n            totalAmount = totalAmount.add(infos[i].amount);\n            totalReward = totalReward.add(\n                getReward(infos[i].pid, infos[i].index, _user, _curTime)\n            );\n        }\n\n        return (totalAmount, totalReward);\n    }\n\n    // allWithdrawablePoolDepositAndReward. get user all withdrawable pool deposit, and sum all reward.\n    function allWithdrawablePoolDepositAndReward(\n        address _user,\n        uint256 _curTime\n    ) external view returns (uint256, uint256) {\n        UserInfo[] memory infos = getUserAllPoolDeposit(_user);\n        uint256 totalAmount = 0;\n        uint256 totalReward = 0;\n        for (uint256 i = 0; i < infos.length; i++) {\n            if (infos[i].settled) {\n                continue;\n            }\n            uint256 pid = infos[i].pid;\n            uint256 index = infos[i].index;\n            if (poolInfo[pid].isWithdrawPaused) {\n                continue;\n            }\n            if (poolInfo[pid].isWhiteList) {\n                if (!addressQLF.ifQualified(_user)) {\n                    continue;\n                }\n            }\n            if (\n                !_allowWithdraw(\n                    _curTime,\n                    infos[i].depositAt,\n                    poolInfo[pid].startTime,\n                    poolInfo[pid].recurringAPY.recurringDuration,\n                    poolInfo[pid].isRecurring\n                )\n            ) {\n                continue;\n            }\n            totalAmount = totalAmount.add(infos[i].amount);\n            totalReward = totalReward.add(\n                getReward(pid, index, _user, _curTime)\n            );\n        }\n        return (totalAmount, totalReward);\n    }\n\n    function withdrawAll(address _receiver) external {\n        UserInfo[] memory infos = getUserAllPoolDeposit(msg.sender);\n        for (uint256 i = 0; i < infos.length; i++) {\n            if (infos[i].settled) {\n                continue;\n            }\n            if (poolInfo[infos[i].pid].isWithdrawPaused) {\n                continue;\n            }\n            if (poolInfo[infos[i].pid].isWhiteList) {\n                if (!addressQLF.ifQualified(msg.sender)) {\n                    continue;\n                }\n            }\n            if (!allowWithdraw(infos[i].pid, infos[i].index, block.timestamp)) {\n                continue;\n            }\n            withdraw(infos[i].pid, infos[i].index, _receiver, 0);\n        }\n    }\n\n    // allowWithdraw. check if allow user to withdraw staked token\n    function allowWithdraw(\n        uint256 _pid,\n        uint256 _index,\n        uint256 _curTime\n    ) public view returns (bool) {\n        require(_pid < poolInfo.length, \"invalid pool\");\n        require(_index < userInfo[_pid][msg.sender].length, \"invalid index\");\n\n        UserInfo storage user = userInfo[_pid][msg.sender][_index];\n        require(!user.settled, \"already settled\");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        require(!pool.isWithdrawPaused, \"pool is paused\");\n\n        bool qualified =\n            !pool.isWhiteList || addressQLF.ifQualified(msg.sender);\n        require(qualified, \"user not in whitelist\");\n\n        // If user deposit before pool start, use pool start timestamp to calculate\n        uint256 startTime =\n            user.depositAt > pool.startTime ? user.depositAt : pool.startTime;\n\n        if (_curTime < startTime) {\n            return false;\n        }\n\n        if (pool.isRecurring) {\n            if (_curTime.sub(startTime) < pool.recurringAPY.recurringDuration) {\n                return false;\n            }\n        } else {\n            return true;\n        }\n\n        return true;\n    }\n\n    function _allowWithdraw(\n        uint256 _curTime,\n        uint256 _depositAt,\n        uint256 _poolStartTime,\n        uint256 _recurringDuration,\n        bool _isRecurring\n    ) internal pure returns (bool) {\n        uint256 _statTime =\n            _depositAt > _poolStartTime ? _depositAt : _poolStartTime;\n        if (_curTime < _statTime) {\n            return false;\n        }\n        if (_isRecurring) {\n            if (_curTime.sub(_statTime) < _recurringDuration) {\n                return false;\n            }\n        } else {\n            return true;\n        }\n        return true;\n    }\n\n    function getAllRewards(address _user, uint256 _curTime)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        UserInfo[] memory infos = getUserAllPoolDeposit(_user);\n        uint256[] memory rewards = new uint256[](infos.length);\n        for (uint256 i = 0; i < infos.length; i++) {\n            uint256 reward =\n                getReward(infos[i].pid, infos[i].index, _user, _curTime);\n            rewards[i] = reward;\n        }\n        return rewards;\n    }\n\n    // getReward. get user stake reward\n    function getReward(\n        uint256 _pid,\n        uint256 _index,\n        address _user,\n        uint256 _curTime\n    ) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage info = userInfo[_pid][_user][_index];\n        if (info.amount == 0) {\n            return 0;\n        }\n        uint256 startTime =\n            info.depositAt > pool.startTime ? info.depositAt : pool.startTime;\n        if (startTime >= _curTime) {\n            return 0;\n        }\n\n        uint256 recurringReward = 0;\n\n        if (pool.isRecurring) {\n            if (_curTime.sub(startTime) < pool.recurringAPY.recurringDuration) {\n                return 0;\n            }\n            uint256 recurringDepositDay =\n                pool.recurringAPY.recurringDuration.div(MIN_STAKE_TIME);\n            recurringReward = info\n                .amount\n                .mul(recurringDepositDay)\n                .mul(pool.recurringAPY.recurringRewardNumerator)\n                .div(pool.recurringAPY.recurringRewardDenominator)\n                .div(ONE_YEAR);\n\n            if (!info.compound) {\n                // User only care about recurring reward;\n                return recurringReward;\n            }\n\n            // Calculate demand deposit reward\n            uint256 demandDepositDay =\n                _curTime\n                    .sub(startTime)\n                    .sub(pool.recurringAPY.recurringDuration)\n                    .div(pool.apy.duration);\n            if (demandDepositDay == 0) {\n                return recurringReward;\n            }\n            uint256 demandDepositReward =\n                info\n                    .amount\n                    .add(recurringReward)\n                    .mul(demandDepositDay)\n                    .mul(pool.apy.rewardNumerator)\n                    .div(pool.apy.rewardDenominator)\n                    .div(ONE_YEAR);\n            return recurringReward.add(demandDepositReward);\n        } else {\n            if (_curTime.sub(startTime) < pool.apy.duration) {\n                return 0;\n            }\n            uint256 demandDepositDay =\n                _curTime.sub(startTime).div(pool.apy.duration);\n\n            uint256 demandDepositReward =\n                info\n                    .amount\n                    .mul(demandDepositDay)\n                    .mul(pool.apy.rewardNumerator)\n                    .div(pool.apy.rewardDenominator)\n                    .div(ONE_YEAR);\n            return demandDepositReward;\n        }\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid, uint256 _index) external {\n        require(allowEmergencyWithdraw, \"emergency withdraw disallowed\");\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender][_index];\n        TransferHelper.safeTransfer(\n            address(pool.pToken),\n            address(msg.sender),\n            user.amount\n        );\n        emit EmergencyWithdraw(msg.sender, _pid, _index, user.amount);\n\n        uint256 wIndex = withdrawInfos[_pid][msg.sender].length;\n        withdrawInfos[_pid][msg.sender].push(\n            WithdrawInfo({\n                pid: _pid,\n                dIndex: _index,\n                wIndex: wIndex,\n                depositAt: user.depositAt,\n                withdrawAt: block.timestamp,\n                dAmount: user.amount,\n                wAmount: user.amount,\n                reward: 0,\n                rAmount: 0\n            })\n        );\n\n        pool.totalStake = pool.totalStake.sub(user.amount);\n        user.settled = true;\n        user.amount = 0;\n    }\n\n    function settleReward(\n        uint256 _pid,\n        uint256 _index,\n        address _user,\n        uint256 _curTime\n    ) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage info = userInfo[_pid][_user][_index];\n        if (info.amount == 0) {\n            return 0;\n        }\n        uint256 startTime =\n            info.depositAt > pool.startTime ? info.depositAt : pool.startTime;\n        if (startTime >= _curTime) {\n            return 0;\n        }\n\n        if (pool.isRecurring) {\n            uint256 recurringDepositDay = 0;\n            if (_curTime.sub(startTime) < pool.recurringAPY.recurringDuration) {\n                recurringDepositDay = _curTime.sub(startTime).div(\n                    MIN_STAKE_TIME\n                );\n            } else {\n                recurringDepositDay = pool.recurringAPY.recurringDuration.div(\n                    MIN_STAKE_TIME\n                );\n            }\n            if (recurringDepositDay == 0) {\n                return 0;\n            }\n            uint256 recurringReward =\n                info\n                    .amount\n                    .mul(recurringDepositDay)\n                    .mul(pool.recurringAPY.recurringRewardNumerator)\n                    .div(pool.recurringAPY.recurringRewardDenominator)\n                    .div(ONE_YEAR);\n\n            if (!info.compound) {\n                // User only care about recurring reward;\n                return recurringReward;\n            }\n\n            if (_curTime.sub(startTime) < pool.recurringAPY.recurringDuration) {\n                return recurringReward;\n            }\n\n            // Calculate demand deposit reward\n            uint256 demandDepositDay =\n                _curTime\n                    .sub(startTime)\n                    .sub(pool.recurringAPY.recurringDuration)\n                    .div(pool.apy.duration);\n            if (demandDepositDay == 0) {\n                return recurringReward;\n            }\n            uint256 demandDepositReward =\n                info\n                    .amount\n                    .add(recurringReward)\n                    .mul(demandDepositDay)\n                    .mul(pool.apy.rewardNumerator)\n                    .div(pool.apy.rewardDenominator)\n                    .div(ONE_YEAR);\n            return recurringReward.add(demandDepositReward);\n        } else {\n            if (_curTime.sub(startTime) < pool.apy.duration) {\n                return 0;\n            }\n            uint256 demandDepositDay =\n                _curTime.sub(startTime).div(pool.apy.duration);\n\n            uint256 demandDepositReward =\n                info\n                    .amount\n                    .mul(demandDepositDay)\n                    .mul(pool.apy.rewardNumerator)\n                    .div(pool.apy.rewardDenominator)\n                    .div(ONE_YEAR);\n            return demandDepositReward;\n        }\n    }\n\n    // Admin settle all deposit and return user fund and income\n    function settle(address _admin) external onlyOwner {\n        for (uint256 i = 0; i < participants.length; i++) {\n            address addr = participants[i];\n            UserInfo[] memory infos = getUserAllPoolDeposit(addr);\n\n            for (uint256 j = 0; j < infos.length; j++) {\n                if (infos[j].settled) {\n                    continue;\n                }\n                uint256 pid = infos[j].pid;\n                uint256 index = infos[j].index;\n                uint256 reward =\n                    settleReward(pid, index, addr, block.timestamp);\n\n                // settle and refund user's token and income\n                uint256 totalAmount = reward.add(infos[j].amount);\n                poolInfo[pid].settledReward = poolInfo[pid].settledReward.add(\n                    reward\n                );\n\n                TransferHelper.safeTransfer(\n                    address(poolInfo[pid].pToken),\n                    address(addr),\n                    totalAmount\n                );\n\n                uint256 wIndex = withdrawInfos[pid][addr].length;\n                withdrawInfos[pid][addr].push(\n                    WithdrawInfo({\n                        pid: pid,\n                        dIndex: index,\n                        wIndex: wIndex,\n                        depositAt: infos[j].depositAt,\n                        withdrawAt: block.timestamp,\n                        dAmount: infos[j].amount,\n                        wAmount: infos[j].amount,\n                        reward: reward,\n                        rAmount: 0\n                    })\n                );\n\n                userInfo[pid][addr][index].settled = true;\n                userInfo[pid][addr][index].amount = 0;\n            }\n        }\n\n        // refund all remain pool token to admin\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n            // reset total stake amount\n            poolInfo[i].totalStake = 0;\n            // check remain balance\n            uint256 remain =\n                IERC20(poolInfo[i].pToken).balanceOf(address(this));\n            if (remain == 0) {\n                continue;\n            }\n            TransferHelper.safeTransfer(\n                address(poolInfo[i].pToken),\n                _admin,\n                remain\n            );\n        }\n    }\n\n    // getAllSettledReward. get all pool settled reward\n    function getAllSettledReward() external view returns (uint256) {\n        uint256 poolLength = poolInfo.length;\n        uint256 totalSettledReward = 0;\n        for (uint256 i = 0; i < poolLength; i++) {\n            totalSettledReward.add(poolInfo[i].settledReward);\n        }\n        return totalSettledReward;\n    }\n\n    // getUserAllPoolWithdraw. get all withdraw infos\n    function getUserAllPoolWithdraw(address _user)\n        external\n        view\n        returns (WithdrawInfo[] memory)\n    {\n        uint256[] memory pids = userPids[_user];\n\n        uint256 count = 0;\n        for (uint256 i = 0; i < pids.length; i++) {\n            uint256 len = withdrawInfos[pids[i]][_user].length;\n            count = count.add(len);\n        }\n\n        WithdrawInfo[] memory infos = new WithdrawInfo[](count);\n\n        uint256 index = 0;\n        for (uint256 i = 0; i < pids.length; i++) {\n            uint256 len = withdrawInfos[pids[i]][_user].length;\n            for (uint256 j = 0; j < len; j++) {\n                infos[index] = withdrawInfos[pids[i]][_user][j];\n                index++;\n            }\n        }\n        return infos;\n    }\n\n    // getRemainTokenBalance. calculate user debt, and returns remain balance\n    function getRemainTokenBalance(address _token, uint256 _curTime)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 debt = 0;\n        for (uint256 i = 0; i < participants.length; i++) {\n            address addr = participants[i];\n            UserInfo[] memory infos = getUserAllPoolDeposit(addr);\n\n            for (uint256 j = 0; j < infos.length; j++) {\n                if (infos[j].settled) {\n                    continue;\n                }\n                if (address(poolInfo[infos[j].pid].pToken) != _token) {\n                    continue;\n                }\n                uint256 reward =\n                    settleReward(infos[j].pid, infos[j].index, addr, _curTime);\n                debt = debt.add(infos[j].amount).add(reward);\n            }\n        }\n\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        if (balance >= debt) {\n            return (balance, debt, balance.sub(debt));\n        }\n        return (balance, debt, 0);\n    }\n}\n"
    }
  }
}