{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/FrontRunExample.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Storage\n * @dev Store & retrieve value in a variable\n */\ncontract FrontRunExample {\n\n    event success();\n    event fail();\n    \n    bytes32 public secretHash;\n    \n    constructor (bytes32 _secretHash) payable {\n        secretHash = _secretHash;\n    }\n    \n    function take(string calldata _secret) external {\n        if (keccak256(abi.encodePacked(_secret)) == secretHash) {\n            uint256 _myBalance = address(this).balance;\n            payable(msg.sender).transfer(_myBalance);\n            emit success();\n        } else {\n            emit fail();\n        }\n    }\n\n}"
    }
  }
}