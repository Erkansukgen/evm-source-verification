{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ncontract Enum {\n  enum Operation {\n    Call,\n    DelegateCall\n  }\n}\n\ninterface IERC20 {\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address to, uint256 value) external returns (bool);\n}\n\ncontract Wallet {\n  address public owner;\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  function executeCall(\n    address to,\n    uint256 value,\n    bytes memory data,\n    uint256 txGas\n  ) internal returns (bool success) {\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n    }\n  }\n\n  function updateOwner(address newOwner) public {\n    require(msg.sender == owner, \"Only owner\");\n    owner = newOwner;\n  }\n\n  function executeDelegateCall(\n    address to,\n    bytes memory data,\n    uint256 txGas\n  ) internal returns (bool success) {\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n    }\n  }\n\n  function send(address payable to, uint256 value)\n    external\n    returns (bool, bytes memory)\n  {\n    return to.call{ value: value }(\"\");\n  }\n\n  function execTransaction(\n    address to,\n    uint256 value,\n    bytes calldata data,\n    Enum.Operation operation,\n    uint256 gasLimit\n  ) external returns (bool success) {\n    require(msg.sender == owner, \"Only owner\");\n    require(\n      gasleft() >= gasLimit,\n      \"Not enough gas to execute safe transaction\"\n    );\n    if (operation == Enum.Operation.Call)\n      success = executeCall(to, value, data, gasLimit);\n    else if (operation == Enum.Operation.DelegateCall)\n      success = executeDelegateCall(to, data, gasLimit);\n    require(success == true, \"Transaction failed\");\n  }\n\n  receive() external payable {}\n}\n"
    }
  }
}