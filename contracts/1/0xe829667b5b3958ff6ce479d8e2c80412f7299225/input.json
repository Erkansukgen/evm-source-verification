{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/BasisDollar/Treasury.2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\nlibrary Babylonian {\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract Operator is Context, Ownable {\n    address private _operator;\n\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\n\n    constructor() internal {\n        _operator = _msgSender();\n        emit OperatorTransferred(address(0), _operator);\n    }\n\n    function operator() public view returns (address) {\n        return _operator;\n    }\n\n    modifier onlyOperator() {\n        require(_operator == msg.sender, \"operator: caller is not the operator\");\n        _;\n    }\n\n    function isOperator() public view returns (bool) {\n        return _msgSender() == _operator;\n    }\n\n    function transferOperator(address newOperator_) public onlyOwner {\n        _transferOperator(newOperator_);\n    }\n\n    function _transferOperator(address newOperator_) internal {\n        require(newOperator_ != address(0), \"operator: zero address given for new operator\");\n        emit OperatorTransferred(address(0), newOperator_);\n        _operator = newOperator_;\n    }\n}\n\ncontract ContractGuard {\n    mapping(uint256 => mapping(address => bool)) private _status;\n\n    function checkSameOriginReentranted() internal view returns (bool) {\n        return _status[block.number][tx.origin];\n    }\n\n    function checkSameSenderReentranted() internal view returns (bool) {\n        return _status[block.number][msg.sender];\n    }\n\n    modifier onlyOneBlock() {\n        require(!checkSameOriginReentranted(), \"ContractGuard: one block, one function\");\n        require(!checkSameSenderReentranted(), \"ContractGuard: one block, one function\");\n\n        _;\n\n        _status[block.number][tx.origin] = true;\n        _status[block.number][msg.sender] = true;\n    }\n}\n\ninterface IBasisAsset {\n    function mint(address recipient, uint256 amount) external returns (bool);\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address from, uint256 amount) external;\n\n    function isOperator() external returns (bool);\n\n    function operator() external view returns (address);\n}\n\ninterface IOracle {\n    function update() external;\n\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\n}\n\ninterface IBoardroom {\n    function setOperator(address _operator) external;\n\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\n\n    function allocateSeigniorage(uint256 amount) external;\n\n    function governanceRecoverUnsupported(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external;\n}\n\n/**\n * @title Basis Dollar Treasury contract\n * @notice Monetary policy logic to adjust supplies of basis dollar assets\n * @author Summer Smith & Rick Sanchez\n */\ncontract Treasury is ContractGuard {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    /* ========= CONSTANT VARIABLES ======== */\n\n    uint256 public constant PERIOD = 12 hours;\n\n    /* ========== STATE VARIABLES ========== */\n\n    // governance\n    address public operator;\n\n    // flags\n    bool public migrated = false;\n    bool public initialized = false;\n\n    // epoch\n    uint256 public startTime;\n    uint256 public epoch = 0;\n    uint256 public epochSupplyContractionLeft = 0;\n\n    // core components\n    address public dollar = address(0x003e0af2916e598Fa5eA5Cb2Da4EDfdA9aEd9Fde);\n    address public bond = address(0x9f48b2f14517770F2d238c787356F3b961a6616F);\n    address public share = address(0xE7C9C188138f7D70945D420d75F8Ca7d8ab9c700);\n\n    address public boardroom;\n    address public dollarOracle;\n\n    // price\n    uint256 public dollarPriceOne;\n    uint256 public dollarPriceCeiling;\n\n    uint256 public seigniorageSaved;\n\n    // protocol parameters - https://docs.basisdollar.fi/ProtocolParameters\n    uint256 public maxSupplyExpansionPercent;\n    uint256 public bondDepletionFloorPercent;\n    uint256 public seigniorageExpansionFloorPercent;\n    uint256 public maxSupplyContractionPercent;\n    uint256 public maxDeptRatioPercent;\n\n    /* =================== BDIPs (BasisDollar Improvement Proposals) =================== */\n\n    // BDIP01\n    uint256 public bdip01SharedIncentiveForLpEpochs;\n    uint256 public bdip01SharedIncentiveForLpPercent;\n    address[] public bdip01LiquidityPools;\n\n    // BDIP02\n    uint256 public bdip02BootstrapEpochs;\n    uint256 public bdip02BootstrapSupplyExpansionPercent;\n\n    /* =================== Events =================== */\n\n    event Initialized(address indexed executor, uint256 at);\n    event Migration(address indexed target);\n    event RedeemedBonds(address indexed from, uint256 amount);\n    event BoughtBonds(address indexed from, uint256 amount);\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\n\n    /* =================== Modifier =================== */\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"Treasury: caller is not the operator\");\n        _;\n    }\n\n    modifier checkCondition {\n        require(!migrated, \"Treasury: migrated\");\n        require(now >= startTime, \"Treasury: not started yet\");\n\n        _;\n    }\n\n    modifier checkEpoch {\n        require(now >= nextEpochPoint(), \"Treasury: not opened yet\");\n\n        _;\n\n        epoch = epoch.add(1);\n        epochSupplyContractionLeft = IERC20(dollar).totalSupply().mul(maxSupplyContractionPercent).div(10000);\n    }\n\n    modifier checkOperator {\n        require(\n            IBasisAsset(dollar).operator() == address(this) &&\n                IBasisAsset(bond).operator() == address(this) &&\n                IBasisAsset(share).operator() == address(this) &&\n                Operator(boardroom).operator() == address(this),\n            \"Treasury: need more permission\"\n        );\n\n        _;\n    }\n\n    modifier notInitialized {\n        require(!initialized, \"Treasury: already initialized\");\n\n        _;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    // flags\n    function isMigrated() public view returns (bool) {\n        return migrated;\n    }\n\n    function isInitialized() public view returns (bool) {\n        return initialized;\n    }\n\n    // epoch\n    function nextEpochPoint() public view returns (uint256) {\n        return startTime.add(epoch.mul(PERIOD));\n    }\n\n    // oracle\n    function getDollarPrice() public view returns (uint256 dollarPrice) {\n        try IOracle(dollarOracle).consult(dollar, 1e18) returns (uint256 price) {\n            return price;\n        } catch {\n            revert(\"Treasury: failed to consult dollar price from the oracle\");\n        }\n    }\n\n    // budget\n    function getReserve() public view returns (uint256) {\n        return seigniorageSaved;\n    }\n\n    /* ========== GOVERNANCE ========== */\n\n    function initialize(\n        address _dollar,\n        address _bond,\n        address _share,\n        uint256 _startTime\n    ) public notInitialized {\n        dollar = _dollar;\n        bond = _bond;\n        share = _share;\n        startTime = _startTime;\n\n        dollarPriceOne = 10**18;\n        dollarPriceCeiling = dollarPriceOne.mul(105).div(100);\n\n        maxSupplyExpansionPercent = 450; // Upto 4.5% supply for expansion\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\n        maxSupplyContractionPercent = 450; // Upto 4.5% supply for contraction (to burn BSD and mint BSDB)\n        maxDeptRatioPercent = 3500; // Upto 35% supply of BSDB to purchase\n\n        // BDIP01: 75% of X $BSD from expansion to BSDS stakers and 25% to LPs for 14 epochs\n        bdip01SharedIncentiveForLpEpochs = 14;\n        bdip01SharedIncentiveForLpPercent = 2500;\n        bdip01LiquidityPools = [\n            address(0x71661297e9784f08fd5d840D4340C02e52550cd9), // DAI/BSD\n            address(0x9E7a4f7e4211c0CE4809cE06B9dDA6b95254BaaC), // USDC/BSD\n            address(0xc259bf15BaD4D870dFf1FE1AAB450794eB33f8e8), // DAI/BSDS\n            address(0xE0e7F7EB27CEbCDB2F1DA5F893c429d0e5954468) // USDC/BSDS\n        ];\n\n        // BDIP02: 14 first epochs with 9% max expansion\n        bdip02BootstrapEpochs = 14;\n        bdip02BootstrapSupplyExpansionPercent = 900;\n\n        // set seigniorageSaved to it's balance\n        seigniorageSaved = IERC20(dollar).balanceOf(address(this));\n\n        initialized = true;\n        operator = msg.sender;\n        emit Initialized(msg.sender, block.number);\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function setBoardroom(address _boardroom) external onlyOperator {\n        boardroom = _boardroom;\n    }\n\n    function setDollarOracle(address _dollarOracle) external onlyOperator {\n        dollarOracle = _dollarOracle;\n    }\n\n    function setDollarPriceCeiling(uint256 _dollarPriceCeiling) external onlyOperator {\n        require(_dollarPriceCeiling >= dollarPriceOne && _dollarPriceCeiling <= dollarPriceOne.mul(120).div(100), \"out of range\"); // [$1.0, $1.2]\n        dollarPriceCeiling = _dollarPriceCeiling;\n    }\n\n    function setMaxSupplyExpansionPercent(uint256 _maxSupplyExpansionPercent) external onlyOperator {\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1500, \"out of range\"); // [0.1%, 15%]\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\n    }\n\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \"out of range\"); // [5%, 100%]\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\n    }\n\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \"out of range\"); // [0.1%, 15%]\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\n    }\n\n    function setMaxDeptRatioPercent(uint256 _maxDeptRatioPercent) external onlyOperator {\n        require(_maxDeptRatioPercent >= 1000 && _maxDeptRatioPercent <= 10000, \"out of range\"); // [10%, 100%]\n        maxDeptRatioPercent = _maxDeptRatioPercent;\n    }\n\n    function setBDIP01(\n        uint256 _bdip01SharedIncentiveForLpEpochs,\n        uint256 _bdip01SharedIncentiveForLpPercent,\n        address[] memory _bdip01LiquidityPools\n    ) external onlyOperator {\n        require(_bdip01SharedIncentiveForLpEpochs <= 730, \"_bdip01SharedIncentiveForLpEpochs: out of range\"); // <= 1 year\n        require(_bdip01SharedIncentiveForLpPercent <= 10000, \"_bdip01SharedIncentiveForLpPercent: out of range\"); // [0%, 100%]\n        bdip01SharedIncentiveForLpEpochs = _bdip01SharedIncentiveForLpEpochs;\n        bdip01SharedIncentiveForLpPercent = _bdip01SharedIncentiveForLpPercent;\n        bdip01LiquidityPools = _bdip01LiquidityPools;\n    }\n\n    function setBDIP02(uint256 _bdip02BootstrapEpochs, uint256 _bdip02BootstrapSupplyExpansionPercent) external onlyOperator {\n        require(_bdip02BootstrapEpochs <= 60, \"_bdip02BootstrapEpochs: out of range\"); // <= 1 month\n        require(\n            _bdip02BootstrapSupplyExpansionPercent >= 100 && _bdip02BootstrapSupplyExpansionPercent <= 1500,\n            \"_bdip02BootstrapSupplyExpansionPercent: out of range\"\n        ); // [1%, 15%]\n        bdip02BootstrapEpochs = _bdip02BootstrapEpochs;\n        bdip02BootstrapSupplyExpansionPercent = _bdip02BootstrapSupplyExpansionPercent;\n    }\n\n    function migrate(address target) external onlyOperator checkOperator {\n        require(!migrated, \"Treasury: migrated\");\n\n        // dollar\n        Operator(dollar).transferOperator(target);\n        Operator(dollar).transferOwnership(target);\n        IERC20(dollar).transfer(target, IERC20(dollar).balanceOf(address(this)));\n\n        // bond\n        Operator(bond).transferOperator(target);\n        Operator(bond).transferOwnership(target);\n        IERC20(bond).transfer(target, IERC20(bond).balanceOf(address(this)));\n\n        // share\n        Operator(share).transferOperator(target);\n        Operator(share).transferOwnership(target);\n        IERC20(share).transfer(target, IERC20(share).balanceOf(address(this)));\n\n        migrated = true;\n        emit Migration(target);\n    }\n\n    /* ========== MUTABLE FUNCTIONS ========== */\n\n    function _updateDollarPrice() internal {\n        try IOracle(dollarOracle).update() {} catch {}\n    }\n\n    function buyBonds(uint256 amount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\n        require(amount > 0, \"Treasury: cannot purchase bonds with zero amount\");\n\n        uint256 dollarPrice = getDollarPrice();\n        require(dollarPrice == targetPrice, \"Treasury: dollar price moved\");\n        require(\n            dollarPrice < dollarPriceOne, // price < $1\n            \"Treasury: dollarPrice not eligible for bond purchase\"\n        );\n\n        require(amount <= epochSupplyContractionLeft, \"Treasury: not enough bond left to purchase\");\n\n        uint256 _boughtBond = amount.mul(1e18).div(dollarPrice);\n        uint256 dollarSupply = IERC20(dollar).totalSupply();\n        uint256 newBondSupply = IERC20(bond).totalSupply().add(_boughtBond);\n        require(newBondSupply <= dollarSupply.mul(maxDeptRatioPercent).div(10000), \"over max debt ratio\");\n\n        IBasisAsset(dollar).burnFrom(msg.sender, amount);\n        IBasisAsset(bond).mint(msg.sender, _boughtBond);\n\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(amount);\n        _updateDollarPrice();\n\n        emit BoughtBonds(msg.sender, amount);\n    }\n\n    function redeemBonds(uint256 amount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\n        require(amount > 0, \"Treasury: cannot redeem bonds with zero amount\");\n\n        uint256 dollarPrice = getDollarPrice();\n        require(dollarPrice == targetPrice, \"Treasury: dollar price moved\");\n        require(\n            dollarPrice > dollarPriceCeiling, // price > $1.05\n            \"Treasury: dollarPrice not eligible for bond purchase\"\n        );\n        require(IERC20(dollar).balanceOf(address(this)) >= amount, \"Treasury: treasury has no more budget\");\n\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, amount));\n\n        IBasisAsset(bond).burnFrom(msg.sender, amount);\n        IERC20(dollar).safeTransfer(msg.sender, amount);\n\n        _updateDollarPrice();\n\n        emit RedeemedBonds(msg.sender, amount);\n    }\n\n    function _sendToBoardRoom(uint256 _amount) internal {\n        IBasisAsset(dollar).mint(address(this), _amount);\n        if (epoch < bdip01SharedIncentiveForLpEpochs) {\n            uint256 _addedPoolReward = _amount.mul(bdip01SharedIncentiveForLpPercent).div(40000);\n            for (uint256 i = 0; i < 4; i++) {\n                IERC20(dollar).transfer(bdip01LiquidityPools[i], _addedPoolReward);\n                _amount = _amount.sub(_addedPoolReward);\n            }\n        }\n        IERC20(dollar).safeApprove(boardroom, _amount);\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\n        emit BoardroomFunded(now, _amount);\n    }\n\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\n        _updateDollarPrice();\n        uint256 dollarSupply = IERC20(dollar).totalSupply().sub(seigniorageSaved);\n        // BDIP02: 14 first epochs with 9% max expansion\n        if (epoch < bdip02BootstrapEpochs) {\n            _sendToBoardRoom(dollarSupply.mul(bdip02BootstrapSupplyExpansionPercent).div(10000));\n        } else {\n            uint256 dollarPrice = getDollarPrice();\n            if (dollarPrice > dollarPriceCeiling) {\n                // Expansion ($BSD Price > 1$): there is some seigniorage to be allocated\n                uint256 bondSupply = IERC20(bond).totalSupply();\n                uint256 _percentage = dollarPrice.sub(dollarPriceOne);\n                uint256 _savedForBond;\n                uint256 _savedForBoardRoom;\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\n                    // saved enough to pay dept, mint as usual rate\n                    uint256 _mse = maxSupplyExpansionPercent.mul(1e14);\n                    if (_percentage > _mse) {\n                        _percentage = _mse;\n                    }\n                    _savedForBoardRoom = dollarSupply.mul(_percentage).div(1e18);\n                } else {\n                    // have not saved enough to pay dept, mint double\n                    uint256 _mse = maxSupplyExpansionPercent.mul(2e14);\n                    if (_percentage > _mse) {\n                        _percentage = _mse;\n                    }\n                    uint256 _seigniorage = dollarSupply.mul(_percentage).div(1e18);\n                    _savedForBoardRoom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\n                    _savedForBond = _seigniorage.sub(_savedForBoardRoom);\n                }\n                if (_savedForBoardRoom > 0) {\n                    _sendToBoardRoom(_savedForBoardRoom);\n                }\n                if (_savedForBond > 0) {\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\n                    IBasisAsset(dollar).mint(address(this), _savedForBond);\n                    emit TreasuryFunded(now, _savedForBond);\n                }\n            }\n        }\n    }\n\n    function governanceRecoverUnsupported(\n        IERC20 _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        // do not allow to drain core tokens\n        require(address(_token) != address(dollar), \"dollar\");\n        require(address(_token) != address(bond), \"bond\");\n        require(address(_token) != address(share), \"share\");\n        _token.safeTransfer(_to, _amount);\n    }\n\n    /* ========== BOARDROOM CONTROLLING FUNCTIONS ========== */\n\n    function boardroomSetOperator(address _operator) external onlyOperator {\n        IBoardroom(boardroom).setOperator(_operator);\n    }\n\n    function boardroomSetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\n        IBoardroom(boardroom).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\n    }\n\n    function boardroomAllocateSeigniorage(uint256 amount) external onlyOperator {\n        IBoardroom(boardroom).allocateSeigniorage(amount);\n    }\n\n    function boardroomGovernanceRecoverUnsupported(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        IBoardroom(boardroom).governanceRecoverUnsupported(_token, _amount, _to);\n    }\n}\n"}}}