{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/SafeMath.sol":{"content":"pragma solidity 0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}"},"contracts/UniswapTriSwapper.sol":{"content":"pragma solidity 0.6.6;\n\nimport \"./UniswapV2Interfaces.sol\";\nimport \"./SafeMath.sol\";\n\ncontract UniswapTriSwapper {\n    using SafeMath for uint;\n    \n    // CONSTANTS\n    IUniswapV2Factory constant uniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f); // same for all networks\n\n    address public admin;\n\n    address WETH;\n    constructor(address _admin, address _WETH) public {\n        admin = _admin;\n        WETH = _WETH;\n    }\n    \n    function changeAdmin(address _address) public {\n        require(admin == msg.sender, \"ca11\");\n        admin = _address;\n    }\n\n    function requireAdmin(address _address) public view {\n        require(_address == admin, \"ra11\"); // only by admin\n    }\n    \n    function depositETH(uint _amount) external payable {\n        requireAdmin(msg.sender);\n        \n        uint amount = _amount == 0? msg.value : _amount;\n        IWETH(WETH).deposit{value:amount}();\n    }\n    \n    /* https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol */\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) public {\n        requireAdmin(msg.sender);\n        \n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) public {\n        requireAdmin(msg.sender);\n        \n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) public {\n        requireAdmin(msg.sender);\n        \n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) public {\n        requireAdmin(msg.sender);\n        \n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n\n     receive() external payable {\n         assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n     }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n    \n    function getAmountsOut(address token, uint amountIn, address[] memory pathes) public view returns (uint[] memory amounts) {\n         amounts = new uint[](pathes.length);\n         address token_in = token;\n         uint amount_in = amountIn;\n         for (uint i=0; i < pathes.length; i++) {\n            address token0 = IUniswapV2Pair(pathes[i]).token0();\n            address token1 = IUniswapV2Pair(pathes[i]).token1();\n            (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pathes[i]).getReserves();\n\n            if(token_in == token0) {\n                amount_in = getAmountOut(amount_in, reserve0, reserve1);\n                token_in = token1;\n                amounts[i] = amount_in;\n            } else {\n                amount_in = getAmountOut(amount_in, reserve1, reserve0);\n                token_in = token0;\n                amounts[i] = amount_in;\n            }\n         }\n    }\n\n    function myTraingularExecute(\n        address _token,\n        uint _amount,\n        uint _amountOutMin,\n        address[] calldata _pathes, //pair addresses\n        address _to\n    ) external payable {\n        requireAdmin(msg.sender);\n        \n        /* check min amount */\n        address token_in = _token;\n        if(token_in == address(0)) token_in = WETH;\n        \n        uint[] memory _values = getAmountsOut(token_in, _amount, _pathes);\n        require(_amountOutMin <= _values[_values.length-1], \"mte11\");\n        \n        if (_token == address(0)) {\n            IWETH(WETH).deposit{value: _amount}();\n            require(IWETH(WETH).transfer(address(_pathes[0]), _amount), \"execute: transfer failed\");\n        } else {\n            IERC20(_token).transferFrom(msg.sender, address(_pathes[0]), _amount); //transfer the origin token\n        }\n        \n        for (uint i=0; i < _pathes.length; i++) {\n            address token0 = IUniswapV2Pair(_pathes[i]).token0();\n            address token1 = IUniswapV2Pair(_pathes[i]).token1();\n\n            uint amount0Out = 0;\n            uint amount1Out = 0;\n            \n            if(token_in == token0) {\n                amount1Out = _values[i];\n                token_in = token1;\n            } else {\n                amount0Out = _values[i];\n                token_in = token0;\n            }\n\n            address target_address = _to;\n            if(i < (_pathes.length - 1)) {\n                target_address = _pathes[i+1];\n            }\n            IUniswapV2Pair(_pathes[i]).swap(amount0Out, amount1Out, target_address, bytes(\"\"));\n        }\n    }\n}\n"},"contracts/UniswapV2Interfaces.sol":{"content":"pragma solidity 0.6.6;\n\n\ninterface IUniswapV2Factory {\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\n  function allPairs(uint) external view returns (address pair);\n  function allPairsLength() external view returns (uint);\n  function feeTo() external view returns (address);\n  function feeToSetter() external view returns (address);\n  function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n  function name() external pure returns (string memory);\n  function symbol() external pure returns (string memory);\n  function decimals() external pure returns (uint8);\n  function totalSupply() external view returns (uint);\n  function balanceOf(address owner) external view returns (uint);\n  function allowance(address owner, address spender) external view returns (uint);\n  function approve(address spender, uint value) external returns (bool);\n  function transfer(address to, uint value) external returns (bool);\n  function transferFrom(address from, address to, uint value) external returns (bool);\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n  function nonces(address owner) external view returns (uint);\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n      address indexed sender,\n      uint amount0In,\n      uint amount1In,\n      uint amount0Out,\n      uint amount1Out,\n      address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\n  function factory() external view returns (address);\n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n  function price0CumulativeLast() external view returns (uint);\n  function price1CumulativeLast() external view returns (uint);\n  function kLast() external view returns (uint);\n  function mint(address to) external returns (uint liquidity);\n  function burn(address to) external returns (uint amount0, uint amount1);\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n  function skim(address to) external;\n  function sync() external;\n}\n\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function name() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IWETH {\n    function withdraw(uint) external;\n    function transfer(address to, uint value) external returns (bool);\n    function deposit() external payable;\n}\n"}}}