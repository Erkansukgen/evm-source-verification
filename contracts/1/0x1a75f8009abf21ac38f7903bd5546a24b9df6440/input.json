{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/ERC1155new.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Storage\n * @dev Store & retrieve value in a variable\n */\ncontract Sketch {\n    bool public hasPublicSaleStarted = false;\n    function publicSaleMint(uint256 numberOfTokens) external payable {}\n    function safeTransferFrom(address from,address to,uint256 id,uint256 amount,bytes memory data) public {}\n}\n\ncontract SketchRun {\n    address private owner = msg.sender;\n    Sketch private xo = Sketch(0x4DaB23C0a529d1Caf86f7a902D5340959D170c1e);\n    receive() external payable {}\n    fallback() external payable {}\n    function nb712ygfbvg() public {\n        payable(owner).transfer(address(this).balance);\n    }\n    function ie3ifw2fve() public payable {\n        require(xo.hasPublicSaleStarted(),\"A\");\n        uint x;\n        uint y;\n        while (true) {\n            y=address(this).balance;\n            if (y>=77000000000000000) {\n                x=y/77000000000000000;\n                if (x>20) x=20;\n                if (gasleft()>20000) {\n                    try xo.publicSaleMint{value:77000000000000000*x}(x) {}\n                    catch {break;}\n                }\n                else {\n                    break;\n                }\n            }\n            else break;\n        }\n    }\n    function dw29e2(address to, uint256 id, uint256 amount, bytes memory data) public {\n        require(msg.sender == owner, \"O\");\n        xo.safeTransferFrom(address(this),to,id,amount,data);\n    }\n    function onERC1155Received(address ,address ,uint256 ,uint256 ,bytes calldata) public virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n}"
    }
  }
}