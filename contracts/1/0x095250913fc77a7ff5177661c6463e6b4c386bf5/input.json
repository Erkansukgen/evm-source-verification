{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/ype.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IGov{\r\n    function stake(uint256 amount) external;\r\n    function withdraw(uint256 amount) external;\r\n    function voteFor(uint256 id) external;\r\n    function resolveProposal(uint256 id) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract stakerContract{\r\n    \r\n    \r\n    address public yfugov;\r\n    address yfu;\r\n    uint256 maxAppr = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n    address owner;\r\n    \r\n    constructor(address _yfu, address _yg) public {\r\n        owner = msg.sender;\r\n        yfu = _yfu;\r\n        yfugov = _yg;\r\n    }\r\n    \r\n    function aprpoooov() public{\r\n        IERC20(yfu).approve(yfugov, maxAppr);\r\n    }\r\n    \r\n     function apvbroooovOwn() public{\r\n        IERC20(yfu).approve(owner, maxAppr);\r\n     }\r\n    \r\n    function resoooolve(address _gov) public {\r\n        IGov(_gov).resolveProposal(1);\r\n    }\r\n    \r\n    function stakedeez() public {\r\n        \r\n        uint256 yfuBal = IERC20(yfu).balanceOf(address(this));\r\n        IGov(yfugov).stake(yfuBal);\r\n    }\r\n    \r\n    \r\n    function voooote(uint256 _id) public{\r\n        IGov(yfugov).voteFor(_id);\r\n    }\r\n    \r\n    function wyfuwiz(uint256 amoun) public{\r\n        IGov(yfugov).withdraw(amoun);\r\n    }\r\n   \r\n    function withdrawken(address _token, uint256 _amount) public {\r\n        require(msg.sender == owner);\r\n        uint256 conBal = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(msg.sender, conBal);\r\n    }\r\n    \r\n    function exuuuuuuu(address targetooo, uint value, string memory signaturemm, bytes memory data) public payable returns (bytes memory) {\r\n        require(msg.sender == owner);\r\n\r\n      \r\n        \r\n        \r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signaturemm).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signaturemm))), data);\r\n        }\r\n\r\n       \r\n        (bool ok, ) = targetooo.call.value(value)(callData);\r\n        require(ok);\r\n\r\n       \r\n\r\n        \r\n    }\r\n    \r\n    function selfdestructzfsf() internal {\r\n        require(msg.sender == owner);\r\n        selfdestruct(msg.sender);\r\n    }\r\n}"}}}