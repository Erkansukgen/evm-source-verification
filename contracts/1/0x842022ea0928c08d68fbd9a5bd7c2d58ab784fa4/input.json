{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/3_Ballot.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.21 <0.7.0;\n\ninterface KyberNetworkProxyInterface {\n    function maxGasPrice() external view returns(uint);\n    function getUserCapInWei(address user) external view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n    function enabled() external view returns(bool);\n    function info(bytes32 id) external view returns(uint);\n\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\n        returns (uint expectedRate, uint slippageRate);\n\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\n\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\n\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\n\n\n}\n\nabstract contract UniswapExchangeInterface {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view virtual returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view virtual returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable virtual returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external virtual returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view virtual returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view virtual returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view virtual returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view virtual returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable virtual returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable virtual returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable virtual returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable virtual returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external virtual returns (uint256  eth_bought);\n    function tokenToEthTransferInput\n    (uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external virtual returns (uint256  eth_bought);\n    function tokenToEthSwapOutput\n    (uint256 eth_bought, uint256 max_tokens, uint256 deadline) external virtual returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput\n    (uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external virtual returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external virtual returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external virtual returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external virtual returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external virtual returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external virtual returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput\n    (uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external virtual returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external virtual returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput\n    (uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external virtual returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) external virtual returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external virtual returns (bool);\n    function approve(address _spender, uint256 _value) external virtual returns (bool);\n    function allowance(address _owner, address _spender) external view virtual returns (uint256);\n    function balanceOf(address _owner) external view virtual returns (uint256);\n    function totalSupply() external view virtual returns (uint256);\n    // Never use\n    function setup(address token_addr) virtual external;\n}\n\ninterface OrFeedInterface {\n  function getExchangeRate \n  ( string calldata fromSymbol, string calldata toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\n  function getTokenAddress ( string calldata symbol ) external view returns ( address );\n  function getSynthBytes32 ( string calldata symbol ) external view returns ( bytes32 );\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract FlashIt {\n\n    using SafeMath for uint256;\n\n    address public owner;\n    address public uniswapToken;\n    KyberNetworkProxyInterface public kyberProxy;\n    OrFeedInterface internal orfeed = OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert(\"Is not the owner\");\n        }\n        _;\n    }\n\n    event ArbComplete(bool _success, uint256 _initialAmount, uint256 _finalAmount);\n\n    constructor(address _kyberProxyAddress, address _uniswapProxyAddress) public {\n        owner = msg.sender;\n        changeKyberUniswapAddresses(_kyberProxyAddress, _uniswapProxyAddress);\n    }\n\n    function executeOperation(\n        address _reserve,\n        uint256 _amount,\n        uint256 _fee,\n        bytes calldata _params\n    ) external {\n\n        /*---Trades---*/\n\n        kyber2UniswapArb(_reserve, _amount);\n\n        /*---EndTrades---*/\n\n        ERC20 _token = ERC20(_reserve);\n        _token.transfer(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3, _amount.add(_fee));\n        \n    }\n\n    function kyber2UniswapArb(address _tokenAddress, uint256 _amount) public onlyOwner returns (bool){\n\n        ERC20 _token = ERC20(_tokenAddress);\n        uint256 ethBack = swapToken2Ether(_token, _amount);\n        uint256 tokenAmount = swapEther2Token(ethBack);\n\n        emit ArbComplete(true, _amount, tokenAmount);\n        return true;\n    }\n\n    function swapToken2Ether(ERC20 token, uint256 tokenQty) internal returns (uint256) {\n\n        uint256 balance = token.balanceOf(address(this));\n\n        require(balance > 0, \"Balance of token equal to 0\");\n\n        if (balance < tokenQty) {\n            tokenQty = balance;\n        }\n\n       token.approve(address(kyberProxy), 0);\n\n       token.approve(address(kyberProxy), tokenQty);\n\n        uint destAmount = kyberProxy.tradeWithHint(\n           token,\n           tokenQty,\n           ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee),\n           address(this),\n           8000000000000000000000000000000000000000000000000000000000000000,\n           0,\n           0x0000000000000000000000000000000000000004,\n           \"PERM\"\n        );\n\n        return destAmount;\n    }\n\n    function swapEther2Token(uint256 _amount) internal returns (uint256) {\n        UniswapExchangeInterface usi = UniswapExchangeInterface(uniswapToken);\n        usi.ethToTokenSwapInput{value: _amount}(1, block.timestamp);\n    }\n\n    function withdrawETHAndTokens(address _tokenAddress) public onlyOwner{\n        msg.sender.call{value: (address(this).balance)};\n        ERC20 token = ERC20(_tokenAddress);\n        uint256 currentTokenBalance = token.balanceOf(address(this));\n        token.transfer(msg.sender, currentTokenBalance);\n    }\n\n    function changeKyberUniswapAddresses(address _kyberProxy, address _uniswapProxy) public onlyOwner {\n        kyberProxy = KyberNetworkProxyInterface(_kyberProxy);\n        uniswapToken = _uniswapProxy;\n    }\n\n    function getKyberSellPrice(string memory _token) public view returns (uint256){\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", _token, \"SELL-KYBER-EXCHANGE\", 1000000000000000000);\n        return currentPrice;\n    }\n\n    function getUniswapBuyPrice(string memory _token) public view returns (uint256){\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", _token, \"BUY-UNISWAP-EXCHANGE\", 1000000000000000000);\n        return currentPrice;\n    }\n}\n\n"}}}