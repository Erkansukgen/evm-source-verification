{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/HEXMEGA.sol":{"content":"interface Callable {\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\n}\n\ncontract HEXMEGA {\n\tstring constant public name = \"HEXMEGA\";\n\tstring constant public symbol = \"HEXMEGA\";\n\tuint256 constant private FLOAT_SCALAR = 2**64;\n\tuint256 constant private INITIAL_SUPPLY = 6e26; \n\tuint256 constant private BURN_RATE = 20; \n\tuint256 constant private SUPPLY_FLOOR = 1; \n\tuint256 constant private MIN_FREEZE_AMOUNT = 1e20; \n\tuint8 constant public decimals = 18;\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\n\tevent Whitelist(address indexed user, bool status);\n\tevent Stake(address indexed owner, uint256 tokens);\n\tevent Burn(uint256 tokens);\n\tevent Unstake(address indexed owner, uint256 tokens);\n\tevent Yield(address indexed owner, uint256 tokens);\n\tstruct User {\n\t\tbool whitelisted;\n\t\tuint256 balance;\n\t\tuint256 frozen;\n\t\tmapping(address => uint256) allowance;\n\t\tint256 scaledPayout;\n\t}\n\tstruct Info {\n\t\tuint256 totalSupply;\n\t\tuint256 totalFrozen;\n\t\tmapping(address => User) users;\n\t\tuint256 scaledPayoutPerToken;\n\t\taddress admin;\n\t}\n\tInfo private info;\n\n\tconstructor() public {\n\t\tinfo.admin = msg.sender;\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\n\t\tinfo.users[msg.sender].balance = INITIAL_SUPPLY;\n\t\temit Transfer(address(0x0), msg.sender, INITIAL_SUPPLY);\n\t\twhitelist(msg.sender, true);\n\t}\n\n\tfunction yield() external returns (uint256) {\n\t\tuint256 _dividends = dividendsOf(msg.sender);\n\t\trequire(_dividends >= 0);\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);\n\t\tinfo.users[msg.sender].balance += _dividends;\n\t\temit Transfer(address(this), msg.sender, _dividends);\n\t\temit Yield(msg.sender, _dividends);\n\t\treturn _dividends;\n\t}\n\n\tfunction burn(uint256 _tokens) external {\n\t\trequire(balanceOf(msg.sender) >= _tokens);\n\t\tinfo.users[msg.sender].balance -= _tokens;\n\t\tuint256 _burnedAmount = _tokens;\n\t\tif (info.totalFrozen > 0) {\n\t\t\t_burnedAmount /= 2;\n\t\t\tinfo.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;\n\t\t\temit Transfer(msg.sender, address(this), _burnedAmount);\n\t\t}\n\t\tinfo.totalSupply -= _burnedAmount;\n\t\temit Transfer(msg.sender, address(0x0), _burnedAmount);\n\t\temit Burn(_burnedAmount);\n\t}\n\n\tfunction distribute(uint256 _tokens) external {\n\t\trequire(info.totalFrozen > 0);\n\t\trequire(balanceOf(msg.sender) >= _tokens);\n\t\tinfo.users[msg.sender].balance -= _tokens;\n\t\tinfo.scaledPayoutPerToken += _tokens * FLOAT_SCALAR / info.totalFrozen;\n\t\temit Transfer(msg.sender, address(this), _tokens);\n\t}\n\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\n\t\t_transfer(msg.sender, _to, _tokens);\n\t\treturn true;\n\t}\n\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\n\t\temit Approval(msg.sender, _spender, _tokens);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\n\t\t_transfer(_from, _to, _tokens);\n\t\treturn true;\n\t}\n\n\tfunction bulkTransfer(address[] calldata _receivers, uint256[] calldata _amounts) external {\n\t\trequire(_receivers.length == _amounts.length);\n\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\n\t\t\t_transfer(msg.sender, _receivers[i], _amounts[i]);\n\t\t}\n\t}\n\n\tfunction whitelist(address _user, bool _status) public {\n\t\trequire(msg.sender == info.admin);\n\t\tinfo.users[_user].whitelisted = _status;\n\t\temit Whitelist(_user, _status);\n\t}\n\n\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn info.totalSupply;\n\t}\n\n\tfunction totalFrozen() public view returns (uint256) {\n\t\treturn info.totalFrozen;\n\t}\n\n\tfunction balanceOf(address _user) public view returns (uint256) {\n\t\treturn info.users[_user].balance - frozenOf(_user);\n\t}\n\n\tfunction frozenOf(address _user) public view returns (uint256) {\n\t\treturn info.users[_user].frozen;\n\t}\n\n\tfunction dividendsOf(address _user) public view returns (uint256) {\n\t\treturn uint256(int256(info.scaledPayoutPerToken * info.users[_user].frozen) - info.users[_user].scaledPayout) / FLOAT_SCALAR;\n\t}\n\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\n\t\treturn info.users[_user].allowance[_spender];\n\t}\n\n\tfunction isWhitelisted(address _user) public view returns (bool) {\n\t\treturn info.users[_user].whitelisted;\n\t}\n\n\tfunction allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 totalTokensFrozen, uint256 userBalance, uint256 userFrozen, uint256 userDividends) {\n\t\treturn (totalSupply(), totalFrozen(), balanceOf(_user), frozenOf(_user), dividendsOf(_user));\n\t}\n\n\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\n\t\trequire(balanceOf(_from) >= _tokens);\n\t\tinfo.users[_from].balance -= _tokens;\n\t\tuint256 _burnedAmount = _tokens * BURN_RATE / 100;\n\t\tif (totalSupply() - _burnedAmount < INITIAL_SUPPLY * SUPPLY_FLOOR / 100 || isWhitelisted(_from)) {\n\t\t\t_burnedAmount = 0;\n\t\t}\n\t\tuint256 _transferred = _tokens - _burnedAmount;\n\t\tinfo.users[_to].balance += _transferred;\n\t\temit Transfer(_from, _to, _transferred);\n\t\tif (_burnedAmount > 0) {\n\t\t\tif (info.totalFrozen > 0) {\n\t\t\t\t_burnedAmount /= 2;\n\t\t\t\tinfo.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;\n\t\t\t\temit Transfer(_from, address(this), _burnedAmount);\n\t\t\t}\n\t\t\tinfo.totalSupply -= _burnedAmount;\n\t\t\temit Transfer(_from, address(0x0), _burnedAmount);\n\t\t\temit Burn(_burnedAmount);\n\t\t}\n\t\treturn _transferred;\n\t}\n\n\tfunction stakeInt(uint256 _amount) internal {\n\t\trequire(balanceOf(msg.sender) >= _amount);\n\t\trequire(frozenOf(msg.sender) + _amount >= MIN_FREEZE_AMOUNT);\n\t\tinfo.totalFrozen += _amount;\n\t\tinfo.users[msg.sender].frozen += _amount;\n\t\tinfo.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken);\n\t\temit Transfer(msg.sender, address(this), _amount);\n\t\temit Stake(msg.sender, _amount);\n\t}\n\n\tfunction unstakeInt(uint256 _amount) internal {\n\t\trequire(frozenOf(msg.sender) >= _amount);\n\t\tuint256 _burnedAmount = _amount * BURN_RATE / 100;\n\t\tinfo.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;\n\t\tinfo.totalFrozen -= _amount;\n\t\tinfo.users[msg.sender].balance -= _burnedAmount;\n\t\tinfo.users[msg.sender].frozen -= _amount;\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);\n\t\temit Transfer(address(this), msg.sender, _amount - _burnedAmount);\n\t\temit Unstake(msg.sender, _amount);\n\t}\n\t\n\tfunction stake(uint256 amount) external {\n\t\tstakeInt(amount);\n\t}\n\n\tfunction unstake(uint256 amount) external {\n\t\tunstakeInt(amount);\n\t}\n}"}}}