{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/CWSForwarder.sol": {
      "content": "pragma solidity ^0.6.1;\n\nimport \"./ERC20.sol\";\n\n\ncontract CWSForwarder {\n\n  address payable parentAddress;\n\n  event ForwarderDeposited(address from, uint value, bytes data);\n\n  constructor() public {\n    parentAddress = msg.sender;\n  }\n\n  modifier onlyParent {\n    if (msg.sender != parentAddress) {\n      revert(\"Not Privileged\");\n    }\n    _;\n  }\n\n  receive() external payable {\n    (bool success, ) = parentAddress.call.value(msg.value)(\"\");\n    require(success, \"\");\n    emit ForwarderDeposited(msg.sender, msg.value, msg.data);\n  }\n\n  function flushTokens(address tokenContractAddress) public onlyParent {\n    ERC20 instance = ERC20(tokenContractAddress);\n    address payable forwarderAddress = address(this);\n    uint256 forwarderBalance = instance.balanceOf(forwarderAddress);\n    if (forwarderBalance == 0) {\n      return;\n    }\n    if (!instance.transfer(parentAddress, forwarderBalance)) {\n      revert(\"Couldn't send\");\n    }\n  }\n\n  function flush() public {\n    parentAddress.transfer(address(this).balance);\n  }\n}\n"
    },
    "browser/CWSWallet.sol": {
      "content": "pragma solidity ^0.6.1;\n\nimport \"./ERC20.sol\";\nimport \"./CWSForwarder.sol\";\n\nlibrary Library {\n    struct uniqueIDLib {\n        string val;\n        bool isValue;\n    }\n}\n\ncontract CWSWallet {\n\n    event Deposited(address indexed from, uint value);\n    event Transacted(address indexed msgSender, address payable[] toAddresses, uint[] amounts);\n\n    using Library for Library.uniqueIDLib;\n    mapping(string => Library.uniqueIDLib) uniqueIds;\n    address[] private forwarders;\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlySigner {\n        require(owner == msg.sender, \"Not Privileged\");\n        _;\n    }\n\n    function getOwner() public view returns (address){\n        return owner;\n    }\n\n    function getForwarders() public view returns (address[] memory) {\n        return forwarders;\n    }\n\n    function getTokenBalance(address[] memory tokenContractAddresses) public view onlySigner returns (uint[] memory) {\n\n        uint balancesSize = uint(tokenContractAddresses.length);\n        uint[] memory balances = new uint[](balancesSize);\n\n        for (uint i = 0; i < tokenContractAddresses.length; i++) {\n            uint result = 0;\n            ERC20 instance = ERC20(tokenContractAddresses[i]);\n            for (uint x = 0; x < forwarders.length; x++) {\n                result += instance.balanceOf(forwarders[x]);\n            }\n            result += instance.balanceOf(address(this));\n            balances[i] = result;\n        }\n\n        return balances;\n    }\n\n    receive() external payable {\n        if (msg.value > 0) {\n            emit Deposited(msg.sender, msg.value);\n        }\n    } \n\n    function createForwarder() public returns (address) {\n        address forwarder = address(new CWSForwarder());\n        forwarders.push(forwarder);\n        return forwarder;\n    }\n\n    function getForwardersToFlush(address tokenContractAddress) public view onlySigner returns (address[] memory) {\n        address[] memory result = new address[](forwarders.length);\n        ERC20 instance = ERC20(tokenContractAddress);\n        for (uint i = 0; i < forwarders.length; i++) {\n            if (instance.balanceOf(forwarders[i]) > 0) {\n                result[i] = forwarders[i];\n            } else {\n                result[i] = address(0);\n            }\n        }\n        return result;\n    }\n\n    function sendEther(\n        address payable[] memory toAddresses,\n        uint[] memory amounts,\n        string memory uniqueID) public onlySigner {\n\n        if (bytes(uniqueID).length != 0) {\n            if (uniqueIds[uniqueID].isValue) {\n                revert(\"Duplicate UniquieId\");\n            }\n        }\n\n        for (uint i = 0; i < toAddresses.length; i++) {\n            require(amounts[i] > 0 && toAddresses[i] != address(0), \"Invalid Address or Amount\");\n            (bool send,) = (toAddresses[i].call.value(amounts[i])(\"\"));\n            require(send, \"Couldn't send\");\n        }\n\n        if (bytes(uniqueID).length != 0) {\n           uniqueIds[uniqueID].isValue = true;\n        }\n\n        emit Transacted(msg.sender, toAddresses, amounts);\n    }\n\n\n    function sendToken(\n        address payable[] memory toAddresses,\n        uint[] memory amounts,\n        address payable[] memory forwardersToFlush,\n        address tokenContractAddress,\n        string memory uniqueID) public onlySigner {\n\n        if (bytes(uniqueID).length != 0) {\n            if (uniqueIds[uniqueID].isValue) {\n                revert(\"Duplicate UniquieId\");\n            }\n        }\n\n        if (forwardersToFlush.length > 0) {\n            for (uint i = 0; i < forwardersToFlush.length; i++) {\n                flushForwarderTokens(forwardersToFlush[i], tokenContractAddress);\n            }\n        }\n\n        ERC20 instance = ERC20(tokenContractAddress);\n\n        for (uint i = 0; i < toAddresses.length; i++) {\n            require(amounts[i] > 0 && toAddresses[i] != address(0), \"Invalid Address or Amount\");\n            if (!instance.transfer(toAddresses[i], amounts[i])) {\n                revert(\"Couldn't send\");\n            }\n        }\n\n        if (bytes(uniqueID).length != 0) {\n            uniqueIds[uniqueID].isValue = true;\n        }\n\n        emit Transacted(tokenContractAddress, toAddresses, amounts);\n    }\n\n    function flushForwarderTokens(address payable forwarderAddress, address tokenContractAddress) public onlySigner {\n        CWSForwarder forwarder = CWSForwarder(forwarderAddress);\n        forwarder.flushTokens(tokenContractAddress);\n    }\n\n}\n"
    },
    "browser/ERC20.sol": {
      "content": "pragma solidity ^0.6.1;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface ERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    }
  }
}