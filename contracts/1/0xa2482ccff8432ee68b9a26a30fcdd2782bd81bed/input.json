{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/WrappedLeviathan.sol":{"content":"pragma solidity ^0.6.12;\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function approve(address to, uint256 tokenId) external;\n    function getApproved(uint256 tokenId) external view returns (address operator);\n    function setApprovalForAll(address operator, bool _approved) external;\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\nlibrary SafeMath {\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow.\");\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow.\");\n\t}\n\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow.\");\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn div(a, b, \"SafeMath: division by zero.\");\n\t}\n\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\t// Solidity only automatically asserts when dividing by 0\n\t\trequire(b > 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn mod(a, b, \"SafeMath: modulo by zero.\");\n\t}\n\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b != 0, errorMessage);\n\t\treturn a % b;\n\t}\n}\n\ninterface IERC20 {\n\tfunction totalSupply() external view returns (uint256);\n\tfunction balanceOf(address account) external view returns (uint256);\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nabstract contract ERC20 is IERC20 {\n\tusing SafeMath for uint256;\n\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\n\tuint256 public _totalSupply;\n\tmapping (address => uint256) public _balanceOf;\n\tmapping (address => mapping (address => uint256)) public _allowance;\n\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals) public {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t}\n\n\tfunction totalSupply() public view override returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\tfunction balanceOf(address account) public view override returns (uint256) {\n\t\treturn _balanceOf[account];\n\t}\n\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\n\t\treturn _allowance[owner][spender];\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public override returns (bool _success) {\n\t\t_allowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public override returns (bool _success) {\n\t\trequire(_to != address(0), \"ERC20: Recipient address is null.\");\n\t\t_balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n\t\t_balanceOf[_to] = _balanceOf[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public override returns (bool _success) {\n\t\trequire(_to != address(0), \"ERC20: Recipient address is null.\");\n\t\t_balanceOf[_from] = _balanceOf[_from].sub(_value);\n\t\t_balanceOf[_to] = _balanceOf[_to].add(_value);\n\t\t_allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction _mint(address _to, uint256 _amount) internal {\n\t\t_totalSupply = _totalSupply.add(_amount);\n\t\t_balanceOf[_to] = _balanceOf[_to].add(_amount);\n\t\temit Transfer(address(0), _to, _amount);\n\t}\n\n\tfunction _burn(address _from, uint256 _amount) internal {\n\t\trequire(_from != address(0), \"ERC20: Burning from address 0.\");\n\t\t_balanceOf[_from] = _balanceOf[_from].sub(_amount, \"ERC20: burn amount exceeds balance.\");\n\t\t_totalSupply = _totalSupply.sub(_amount);\n\t\temit Transfer(_from, address(0), _amount);\n\t}\n}\n\ncontract Ownable {\n\taddress public owner;\n\n\tconstructor () public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner, \"Not owner\");\n\t\t_;\n\t}\n\t\n\tfunction setOwnership(address _newOwner) external onlyOwner {\n\t\towner = _newOwner;\n\t}\n}\n\ncontract Pausable is Ownable {\n\tbool public isPaused;\n\t\n\tconstructor () public {\n\t\tisPaused = false;\n\t}\n\t\n\tmodifier notPaused() {\n\t\trequire(!isPaused, \"paused\");\n\t\t_;\n\t}\n\t\n\tfunction pause() external onlyOwner {\n\t\tisPaused = true;\n\t}\n\t\n\tfunction unpause() external onlyOwner {\n\t\tisPaused = false;\n\t}\n}\n\ninterface ILeviathanClaim {\n    function release(uint256 payID) external;\n    function totalReleased() external view returns (uint256);\n    function released(uint256 payID) external view returns (uint256);\n}\n\ncontract WrappedLeviathan is ERC20(\"Wrapped Leviathan\", \"WLEV\", 18), Pausable {\n\tusing SafeMath for uint256;\n\n\tIERC721 public constant LEVIATHAN = IERC721(0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc);\n    address private _leviathanClaim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\n    address private _surf = 0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c;\n\n\tuint256[] public leviathans;\n\n\tevent LeviathanWrapped(uint256 leviathanID);\n\tevent LeviathanUnwrapped(uint256 leviathanID);\n\n    function _getSeed(uint256 _seed, address _sender) internal view returns (uint256) {\n\t\tif (_seed == 0)\n\t\t\treturn uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _sender)));\n\t\telse\n\t\t\treturn uint256(keccak256(abi.encodePacked(_seed)));\n\t}\n\n    function checkClaim(uint ID)\n    public view returns (uint256) {\n        uint256 totalReleased = ILeviathanClaim(_leviathanClaim).totalReleased();\n        uint256 released = ILeviathanClaim(_leviathanClaim).released(ID);\n        uint256 totalReceived = IERC20(_surf).balanceOf(_leviathanClaim).add(totalReleased);\n        return totalReceived.mul(1).div(333).sub(released);\n    }\n\n\tfunction wrap(uint256[] calldata _leviathansToWrap) public notPaused {\n\t\tfor (uint256 i = 0; i < _leviathansToWrap.length; i++) {\n\t\t\trequire(_leviathansToWrap[i] >= 1 && _leviathansToWrap[i] <= 333, \"WrappedLeviathan: Invalid ID.\");\n\t\t\tleviathans.push(_leviathansToWrap[i]);\n\t\t\tLEVIATHAN.transferFrom(msg.sender, address(this), _leviathansToWrap[i]);\n\n            if(checkClaim(_leviathansToWrap[i]) > 0 )\n                ILeviathanClaim(_leviathanClaim).release(_leviathansToWrap[i]);\n            \n\t\t\temit LeviathanWrapped(_leviathansToWrap[i]);\n\t\t}\n\t\t_mint(msg.sender, _leviathansToWrap.length * (10**uint256(decimals)));\n\n        uint surfBalance = IERC20(_surf).balanceOf(address(this));\n        if(surfBalance > 0)\n            IERC20(_surf).transfer(_leviathanClaim, surfBalance);\n\t}\n\n\tfunction unwrap(uint256 _amount) public notPaused{\n\t\tunwrapFor(_amount, msg.sender);\n\t}\n\n\tfunction unwrapFor(uint256 _amount, address _recipient) public notPaused {\n\t\trequire(_recipient != address(0), \"WrappedLeviathan: Cannot send to void address.\");\n\n\t\t_burn(msg.sender, _amount * (10**uint256(decimals)));\n\t\tuint256 _seed = 0;\n\t\tfor (uint256 i = 0; i < _amount; i++) {\n\t\t\t_seed = _getSeed(_seed, msg.sender);\n\t\t\tuint256 _index = _seed % leviathans.length;\n\t\t\tuint256 _tokenId = leviathans[_index];\n\n\t\t\tleviathans[_index] = leviathans[leviathans.length - 1];\n\t\t\tleviathans.pop();\n\n            if(checkClaim(_tokenId) > 0)\n                ILeviathanClaim(_leviathanClaim).release(_tokenId);\n\n\t\t\tLEVIATHAN.transferFrom(address(this), _recipient, _tokenId);\n\n\t\t\temit LeviathanUnwrapped(_tokenId);\n\t\t}\n\n        uint surfBalance = IERC20(_surf).balanceOf(address(this));\n        if(surfBalance > 0)\n            IERC20(_surf).transfer(_leviathanClaim, surfBalance);\n\t}\n\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes calldata _data) external view returns (bytes4) {\n\t\trequire(msg.sender == address(LEVIATHAN), \"Not Leviathan NFT\");\n\t\treturn WrappedLeviathan.onERC721Received.selector;\n\t}\n}"}}}