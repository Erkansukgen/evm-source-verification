{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CaptainCook.sol":{"content":"//\r// \"Here's to the crazy ones...\" the degens, the chads, the farmers.\r//\r// Welcome to SwapShip RTC. You know this game.\r//\r// Stake your Uniswap UNI-V2 LP tokens OR SushiSwap SLP tokens!! Farm SWSH.\r// And go on a mission! PS. LIQLO stakers are rewarded 10x!\r//\r// * Mission: *\r//\r// On October 10, 2020 at 11:00 AM UTC the top 32 SWSH token holders will receive\r// a very special token airdrop of a project some of you have already heard about.\r//\r// * Available pools: *\r//\r// ID   DEX         Pool        Multiplier   LP Token Info\r// -----------------------------------------------------------------------------------\r//  0   SushiSwap   ETH-USDT    1x           https://etherscan.io/address/0x06da0fd433c1a5d7a4faa01111c044910a184553\r//  1   SushiSwap   USDC-ETH    1x           https://etherscan.io/address/0x397ff1542f962076d0bfe58ea045ffa2d347aca0\r//  2   SushiSwap   SUSHI-ETH   1x           https://etherscan.io/address/0x795065dcc9f64b5614c407a6efdc400da6221fb0\r//  3   SushiSwap   DAI-ETH     1x           https://etherscan.io/address/0xc3d03e4f041fd4cd388c549ee2a29a9e5075882f\r//  4   SushiSwap   YFI-ETH     1x           https://etherscan.io/address/0x088ee5007c98a9677165d78dd2109ae4a3d04d0c\r//  5   SushiSwap   LINK-ETH    1x           https://etherscan.io/address/0xc40d16476380e4037e6b1a2594caf6a6cc8da967\r//  6   SushiSwap   sUSD-ETH    1x           https://etherscan.io/address/0xf1f85b2c54a2bd284b1cf4141d64fd171bd85539\r//  7   SushiSwap   LEND-ETH    1x           https://etherscan.io/address/0x5e63360e891bd60c69445970256c260b0a6a54c6\r//  8   UniswapV2   DAI-ETH     1x           https://etherscan.io/address/0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\r//  9   UniswapV2   ETH-AMPL    1x           https://etherscan.io/address/0xc5be99a02c6857f9eac67bbce58df5572498f40c\r//\r// * Superpools: *\r//\r// ID   DEX         Pool        Multiplier   LP Token Info\r// -----------------------------------------------------------------------------------\r// 10   UniswapV2   SWSH-ETH    2x \r//\r// 11   UniswapV2   RTC-ETH     3x           https://etherscan.io/address/0xfde42a9422cb0ee84ede728ab503487b382d135e\r//      (xoxo for patience it pays off)\r//\r// 12   UniswapV2   LIQLO-ETH   5x           https://etherscan.io/address/0xd18aea36557ade95d23fb051b68443dd99b1b663\r//      (liqlos are diamonds)\r//\r// 13   UniswapV2   LIQLO-RTC   10x          https://etherscan.io/address/0xfe830ed3885e655621f8bcfc4d19abbca42bff9c\r//      (liqlos mixed with rtc are magic)\r//\r// * How to join: *\r//\r// 1. Go to etherscan of LP token. Click \"Contract\" > \"Write Contract\".\r// 2. Connect your wallet by clicking \"Connect to Web3\".\r// 3. Go to \"Approve\", type in CaptainCook contract addresss:\r//    Then type the amount of LP tokens you wish to approve and click \"Write\".\r//    * Remember, the numbers at 18 decimals work like this:\r//      1.00 = 1000000000000000000 (18 zeros)\r//      1.10 = 1100000000000000000\r//      10.0 = 10000000000000000000 and so on\r//\r// 4. Go to etherscan of CaptainCook contract: https://etherscan.io/address/\r//    Click \"Contract\" > \"Write Contract\".\r// 5. Connect your wallet by clicking \"Connect to Web3\".\r// 6. Go to \"Deposit\", type in the pool ID and LP token amount you want to deposit (18 decimals!). Click \"Write\".\r// 7. Complete the transaction with your wallet and wait. You are farming.\r// 8. When you want to withdraw, go to \"Widthdraw\", type in the pool ID and LP token amount\r//    you originally deposited and click \"Write\". You get your LP tokens back along with SWSH rewards!\r//\r// Maybe some good soul will create a frontend for this, who knows.\r//\r// * Security notes: *\r//\r// Now here's the thing. This contract is a fork of sushi, but the og dev didnt\r// even try to make it safe for farmers. You should see the dump coming! So this is what I did:\r//\r// 1. Remove 10% dev fee on every pool reward update (what?!).\r//\r// 2. Timelock setMigrator() and dev() updates to 30 days from contract creation.\r//\r// 3. Mint 22,000 SWSH with 20K going into the SWSH-ETH Uniswap pool along with 2 ETH.\r//    As og RTC contract states, RTC holders will get the 2K SWSH via airdrop.\r//    This time the airdrop will also include RTC-ETH Uniswap pool liquidity providers.\r//\r// 4. My SWSH-ETH Uniswap LP tokens will be burned 1 hour after creation.\r//\r// Good luck!\r//\r// Veronika\r//\r\r// //////////////////////////////////////////////////////////////////////////////// //\r//                                                                                  //\r//                               ////   //////   /////                              //\r//                              //        //     //                                 //\r//                              //        //     /////                              //\r//                                                                                  //\r//                              Never break the chain.                              //\r//                                                                                  //\r// //////////////////////////////////////////////////////////////////////////////// //\r\r\r// File: @openzeppelin/contracts/GSN/Context.sol\r\rpragma solidity ^0.6.0;\r\r/*\r * @dev Provides information about the current execution context, including the\r * sender of the transaction and its data. While these are generally available\r * via msg.sender and msg.data, they should not be accessed in such a direct\r * manner, since when dealing with GSN meta-transactions the account sending and\r * paying for execution may not be the actual sender (as far as an application\r * is concerned).\r *\r * This contract is only required for intermediate, library-like contracts.\r */\rabstract contract Context {\r    function _msgSender() internal view virtual returns (address payable) {\r        return msg.sender;\r    }\r\r    function _msgData() internal view virtual returns (bytes memory) {\r        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r        return msg.data;\r    }\r}\r\r// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\r\r\rpragma solidity ^0.6.0;\r\r/**\r * @dev Interface of the ERC20 standard as defined in the EIP.\r */\rinterface IERC20 {\r    /**\r     * @dev Returns the amount of tokens in existence.\r     */\r    function totalSupply() external view returns (uint256);\r\r    /**\r     * @dev Returns the amount of tokens owned by `account`.\r     */\r    function balanceOf(address account) external view returns (uint256);\r\r    /**\r     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transfer(address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Returns the remaining number of tokens that `spender` will be\r     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r     * zero by default.\r     *\r     * This value changes when {approve} or {transferFrom} are called.\r     */\r    function allowance(address owner, address spender) external view returns (uint256);\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r     * that someone may use both the old and the new allowance by unfortunate\r     * transaction ordering. One possible solution to mitigate this race\r     * condition is to first reduce the spender's allowance to 0 and set the\r     * desired value afterwards:\r     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r     *\r     * Emits an {Approval} event.\r     */\r    function approve(address spender, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r     * allowance mechanism. `amount` is then deducted from the caller's\r     * allowance.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r     * another (`to`).\r     *\r     * Note that `value` may be zero.\r     */\r    event Transfer(address indexed from, address indexed to, uint256 value);\r\r    /**\r     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r     * a call to {approve}. `value` is the new allowance.\r     */\r    event Approval(address indexed owner, address indexed spender, uint256 value);\r}\r\r// File: @openzeppelin/contracts/math/SafeMath.sol\r\r\r\rpragma solidity ^0.6.0;\r\r/**\r * @dev Wrappers over Solidity's arithmetic operations with added overflow\r * checks.\r *\r * Arithmetic operations in Solidity wrap on overflow. This can easily result\r * in bugs, because programmers usually assume that an overflow raises an\r * error, which is the standard behavior in high level programming languages.\r * `SafeMath` restores this intuition by reverting the transaction when an\r * operation overflows.\r *\r * Using this library instead of the unchecked operations eliminates an entire\r * class of bugs, so it's recommended to use it always.\r */\rlibrary SafeMath {\r    /**\r     * @dev Returns the addition of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `+` operator.\r     *\r     * Requirements:\r     *\r     * - Addition cannot overflow.\r     */\r    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r        uint256 c = a + b;\r        require(c >= a, \"SafeMath: addition overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r        return sub(a, b, \"SafeMath: subtraction overflow\");\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b <= a, errorMessage);\r        uint256 c = a - b;\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the multiplication of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `*` operator.\r     *\r     * Requirements:\r     *\r     * - Multiplication cannot overflow.\r     */\r    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r        // benefit is lost if 'b' is also tested.\r        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r        if (a == 0) {\r            return 0;\r        }\r\r        uint256 c = a * b;\r        require(c / a == b, \"SafeMath: multiplication overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r        return div(a, b, \"SafeMath: division by zero\");\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b > 0, errorMessage);\r        uint256 c = a / b;\r        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r        return mod(a, b, \"SafeMath: modulo by zero\");\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts with custom message when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b != 0, errorMessage);\r        return a % b;\r    }\r}\r\r\r// File: @openzeppelin/contracts/utils/SafeERC20.sol\r\rpragma solidity ^0.6.0;\r\r/**\r * @title SafeERC20\r * @dev Wrappers around ERC20 operations that throw on failure (when the token\r * contract returns false). Tokens that return no value (and instead revert or\r * throw on failure) are also supported, non-reverting calls are assumed to be\r * successful.\r * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r */\rlibrary SafeERC20 {\r    using SafeMath for uint256;\r    using Address for address;\r\r    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r    }\r\r    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r    }\r\r    /**\r     * @dev Deprecated. This function has issues similar to the ones found in\r     * {IERC20-approve}, and its usage is discouraged.\r     *\r     * Whenever possible, use {safeIncreaseAllowance} and\r     * {safeDecreaseAllowance} instead.\r     */\r    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r        // safeApprove should only be called when setting an initial allowance,\r        // or when resetting it to zero. To increase and decrease it, use\r        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r        // solhint-disable-next-line max-line-length\r        require((value == 0) || (token.allowance(address(this), spender) == 0),\r            \"SafeERC20: approve from non-zero to non-zero allowance\"\r        );\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r    }\r\r    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r    }\r\r    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r    }\r\r    /**\r     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r     * on the return value: the return value is optional (but if data is returned, it must not be false).\r     * @param token The token targeted by the call.\r     * @param data The call data (encoded using abi.encode or one of its variants).\r     */\r    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r        // the target address contains contract code and also asserts for success in the low-level call.\r\r        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r        if (returndata.length > 0) { // Return data is optional\r            // solhint-disable-next-line max-line-length\r            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r        }\r    }\r}\r\r\r// File: @openzeppelin/contracts/utils/Address.sol\r\r\r\rpragma solidity ^0.6.0;\r\r/**\r * @dev Collection of functions related to the address type\r */\rlibrary Address {\r    /**\r     * @dev Returns true if `account` is a contract.\r     *\r     * [IMPORTANT]\r     * ====\r     * It is unsafe to assume that an address for which this function returns\r     * false is an externally-owned account (EOA) and not a contract.\r     *\r     * Among others, `isContract` will return false for the following\r     * types of addresses:\r     *\r     *  - an externally-owned account\r     *  - a contract in construction\r     *  - an address where a contract will be created\r     *  - an address where a contract lived, but was destroyed\r     * ====\r     */\r    function isContract(address account) internal view returns (bool) {\r        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r        // for accounts without code, i.e. `keccak256('')`\r        bytes32 codehash;\r        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r        // solhint-disable-next-line no-inline-assembly\r        assembly { codehash := extcodehash(account) }\r        return (codehash != accountHash && codehash != 0x0);\r    }\r\r    /**\r     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r     * `recipient`, forwarding all available gas and reverting on errors.\r     *\r     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r     * imposed by `transfer`, making them unable to receive funds via\r     * `transfer`. {sendValue} removes this limitation.\r     *\r     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r     *\r     * IMPORTANT: because control is transferred to `recipient`, care must be\r     * taken to not create reentrancy vulnerabilities. Consider using\r     * {ReentrancyGuard} or the\r     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r     */\r    function sendValue(address payable recipient, uint256 amount) internal {\r        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\r        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r        (bool success, ) = recipient.call{ value: amount }(\"\");\r        require(success, \"Address: unable to send value, recipient may have reverted\");\r    }\r\r    /**\r     * @dev Performs a Solidity function call using a low level `call`. A\r     * plain`call` is an unsafe replacement for a function call: use this\r     * function instead.\r     *\r     * If `target` reverts with a revert reason, it is bubbled up by this\r     * function (like regular Solidity function calls).\r     *\r     * Returns the raw returned data. To convert to the expected return value,\r     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r     *\r     * Requirements:\r     *\r     * - `target` must be a contract.\r     * - calling `target` with `data` must not revert.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r      return functionCall(target, data, \"Address: low-level call failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r     * `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r        return _functionCallWithValue(target, data, 0, errorMessage);\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r     * but also transferring `value` wei to `target`.\r     *\r     * Requirements:\r     *\r     * - the calling contract must have an ETH balance of at least `value`.\r     * - the called Solidity function must be `payable`.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r     * with `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r        return _functionCallWithValue(target, data, value, errorMessage);\r    }\r\r    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r        require(isContract(target), \"Address: call to non-contract\");\r\r        // solhint-disable-next-line avoid-low-level-calls\r        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r        if (success) {\r            return returndata;\r        } else {\r            // Look for revert reason and bubble it up if present\r            if (returndata.length > 0) {\r                // The easiest way to bubble the revert reason is using memory via assembly\r\r                // solhint-disable-next-line no-inline-assembly\r                assembly {\r                    let returndata_size := mload(returndata)\r                    revert(add(32, returndata), returndata_size)\r                }\r            } else {\r                revert(errorMessage);\r            }\r        }\r    }\r}\r\r// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\r\r\rpragma solidity ^0.6.0;\r\r\r\r\r\r/**\r * @dev Implementation of the {IERC20} interface.\r *\r * This implementation is agnostic to the way tokens are created. This means\r * that a supply mechanism has to be added in a derived contract using {_mint}.\r * For a generic mechanism see {ERC20PresetMinterPauser}.\r *\r * TIP: For a detailed writeup see our guide\r * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r * to implement supply mechanisms].\r *\r * We have followed general OpenZeppelin guidelines: functions revert instead\r * of returning `false` on failure. This behavior is nonetheless conventional\r * and does not conflict with the expectations of ERC20 applications.\r *\r * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r * This allows applications to reconstruct the allowance for all accounts just\r * by listening to said events. Other implementations of the EIP may not emit\r * these events, as it isn't required by the specification.\r *\r * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r * functions have been added to mitigate the well-known issues around setting\r * allowances. See {IERC20-approve}.\r */\rcontract ERC20 is Context, IERC20 {\r    using SafeMath for uint256;\r    using Address for address;\r\r    mapping (address => uint256) private _balances;\r\r    mapping (address => mapping (address => uint256)) private _allowances;\r\r    uint256 private _totalSupply;\r\r    string private _name;\r    string private _symbol;\r    uint8 private _decimals;\r\r    /**\r     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r     * a default value of 18.\r     *\r     * To select a different value for {decimals}, use {_setupDecimals}.\r     *\r     * All three of these values are immutable: they can only be set once during\r     * construction.\r     */\r    constructor (string memory name, string memory symbol) public {\r        _name = name;\r        _symbol = symbol;\r        _decimals = 18;\r    }\r\r    /**\r     * @dev Returns the name of the token.\r     */\r    function name() public view returns (string memory) {\r        return _name;\r    }\r\r    /**\r     * @dev Returns the symbol of the token, usually a shorter version of the\r     * name.\r     */\r    function symbol() public view returns (string memory) {\r        return _symbol;\r    }\r\r    /**\r     * @dev Returns the number of decimals used to get its user representation.\r     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r     *\r     * Tokens usually opt for a value of 18, imitating the relationship between\r     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r     * called.\r     *\r     * NOTE: This information is only used for _display_ purposes: it in\r     * no way affects any of the arithmetic of the contract, including\r     * {IERC20-balanceOf} and {IERC20-transfer}.\r     */\r    function decimals() public view returns (uint8) {\r        return _decimals;\r    }\r\r    /**\r     * @dev See {IERC20-totalSupply}.\r     */\r    function totalSupply() public view override returns (uint256) {\r        return _totalSupply;\r    }\r\r    /**\r     * @dev See {IERC20-balanceOf}.\r     */\r    function balanceOf(address account) public view override returns (uint256) {\r        return _balances[account];\r    }\r\r    /**\r     * @dev See {IERC20-transfer}.\r     *\r     * Requirements:\r     *\r     * - `recipient` cannot be the zero address.\r     * - the caller must have a balance of at least `amount`.\r     */\r    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(_msgSender(), recipient, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-allowance}.\r     */\r    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r        return _allowances[owner][spender];\r    }\r\r    /**\r     * @dev See {IERC20-approve}.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r        _approve(_msgSender(), spender, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-transferFrom}.\r     *\r     * Emits an {Approval} event indicating the updated allowance. This is not\r     * required by the EIP. See the note at the beginning of {ERC20};\r     *\r     * Requirements:\r     * - `sender` and `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     * - the caller must have allowance for ``sender``'s tokens of at least\r     * `amount`.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(sender, recipient, amount);\r        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r        return true;\r    }\r\r    /**\r     * @dev Atomically increases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r        return true;\r    }\r\r    /**\r     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     * - `spender` must have allowance for the caller of at least\r     * `subtractedValue`.\r     */\r    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r        return true;\r    }\r\r    /**\r     * @dev Moves tokens `amount` from `sender` to `recipient`.\r     *\r     * This is internal function is equivalent to {transfer}, and can be used to\r     * e.g. implement automatic token fees, slashing mechanisms, etc.\r     *\r     * Emits a {Transfer} event.\r     *\r     * Requirements:\r     *\r     * - `sender` cannot be the zero address.\r     * - `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     */\r    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r        require(sender != address(0), \"ERC20: transfer from the zero address\");\r        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\r        _beforeTokenTransfer(sender, recipient, amount);\r\r        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r        _balances[recipient] = _balances[recipient].add(amount);\r        emit Transfer(sender, recipient, amount);\r    }\r\r    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r     * the total supply.\r     *\r     * Emits a {Transfer} event with `from` set to the zero address.\r     *\r     * Requirements\r     *\r     * - `to` cannot be the zero address.\r     */\r    function _mint(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: mint to the zero address\");\r\r        _beforeTokenTransfer(address(0), account, amount);\r\r        _totalSupply = _totalSupply.add(amount);\r        _balances[account] = _balances[account].add(amount);\r        emit Transfer(address(0), account, amount);\r    }\r\r    /**\r     * @dev Destroys `amount` tokens from `account`, reducing the\r     * total supply.\r     *\r     * Emits a {Transfer} event with `to` set to the zero address.\r     *\r     * Requirements\r     *\r     * - `account` cannot be the zero address.\r     * - `account` must have at least `amount` tokens.\r     */\r    function _burn(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: burn from the zero address\");\r\r        _beforeTokenTransfer(account, address(0), amount);\r\r        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r        _totalSupply = _totalSupply.sub(amount);\r        emit Transfer(account, address(0), amount);\r    }\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r     *\r     * This is internal function is equivalent to `approve`, and can be used to\r     * e.g. set automatic allowances for certain subsystems, etc.\r     *\r     * Emits an {Approval} event.\r     *\r     * Requirements:\r     *\r     * - `owner` cannot be the zero address.\r     * - `spender` cannot be the zero address.\r     */\r    function _approve(address owner, address spender, uint256 amount) internal virtual {\r        require(owner != address(0), \"ERC20: approve from the zero address\");\r        require(spender != address(0), \"ERC20: approve to the zero address\");\r\r        _allowances[owner][spender] = amount;\r        emit Approval(owner, spender, amount);\r    }\r\r    /**\r     * @dev Sets {decimals} to a value other than the default one of 18.\r     *\r     * WARNING: This function should only be called from the constructor. Most\r     * applications that interact with token contracts will not expect\r     * {decimals} to ever change, and may work incorrectly if it does.\r     */\r    function _setupDecimals(uint8 decimals_) internal {\r        _decimals = decimals_;\r    }\r\r    /**\r     * @dev Hook that is called before any transfer of tokens. This includes\r     * minting and burning.\r     *\r     * Calling conditions:\r     *\r     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r     * will be to transferred to `to`.\r     * - when `from` is zero, `amount` tokens will be minted for `to`.\r     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r     * - `from` and `to` are never both zero.\r     *\r     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r     */\r    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r}\r\r// File: @openzeppelin/contracts/access/Ownable.sol\r\r\r\rpragma solidity ^0.6.0;\r\r/**\r * @dev Contract module which provides a basic access control mechanism, where\r * there is an account (an owner) that can be granted exclusive access to\r * specific functions.\r *\r * By default, the owner account will be the one that deploys the contract. This\r * can later be changed with {transferOwnership}.\r *\r * This module is used through inheritance. It will make available the modifier\r * `onlyOwner`, which can be applied to your functions to restrict their use to\r * the owner.\r */\rcontract Ownable is Context {\r    address private _owner;\r\r    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\r    /**\r     * @dev Initializes the contract setting the deployer as the initial owner.\r     */\r    constructor () internal {\r        address msgSender = _msgSender();\r        _owner = msgSender;\r        emit OwnershipTransferred(address(0), msgSender);\r    }\r\r    /**\r     * @dev Returns the address of the current owner.\r     */\r    function owner() public view returns (address) {\r        return _owner;\r    }\r\r    /**\r     * @dev Throws if called by any account other than the owner.\r     */\r    modifier onlyOwner() {\r        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r        _;\r    }\r\r    /**\r     * @dev Leaves the contract without owner. It will not be possible to call\r     * `onlyOwner` functions anymore. Can only be called by the current owner.\r     *\r     * NOTE: Renouncing ownership will leave the contract without an owner,\r     * thereby removing any functionality that is only available to the owner.\r     */\r    function renounceOwnership() public virtual onlyOwner {\r        emit OwnershipTransferred(_owner, address(0));\r        _owner = address(0);\r    }\r\r    /**\r     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r     * Can only be called by the current owner.\r     */\r    function transferOwnership(address newOwner) public virtual onlyOwner {\r        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r        emit OwnershipTransferred(_owner, newOwner);\r        _owner = newOwner;\r    }\r}\r\rpragma solidity ^0.6.0;\r\rcontract TokenRecover is Ownable {\r\r\r    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r        IERC20(tokenAddress).transfer(owner(), tokenAmount);\r    }\r}\r\r// //////////////////////////////////////////////////////////////////////////////// //\r\r\r\rpragma solidity ^0.6.0;\r\r\r// SwapShipToken.\rcontract SwapShipToken is ERC20(\"SwapShip RTC\", \"SWSH\"), Ownable {\r    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (CaptainCook).\r    function mint(address _to, uint256 _amount) public onlyOwner {\r        _mint(_to, _amount);\r    }\r}\r\r\r\r// //////////////////////////////////////////////////////////////////////////////// //\r\r\r\rinterface IMigratorCaptain {\r    // Perform LP token migration from legacy UniswapV2 to SwapShip.\r    // Take the current LP token address and return the new LP token address.\r    // Migrator should have full access to the caller's LP token.\r    // Return the new LP token address.\r    //\r    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\r    // SwapShip must mint EXACTLY the same amount of SwapShip LP tokens or\r    // else something bad will happen. Traditional UniswapV2 does not\r    // do that so be careful!\r    function migrate(IERC20 token) external returns (IERC20);\r}\r\rcontract CaptainCook is Ownable {\r    using SafeMath for uint256;\r    using SafeERC20 for IERC20;\r\r    // Info of each user.\r    struct UserInfo {\r        uint256 amount;     // How many LP tokens the user has provided.\r        uint256 rewardDebt; // Reward debt. See explanation below.\r        //\r        // We do some fancy math here. Basically, any point in time, the amount of SWSHs\r        // entitled to a user but is pending to be distributed is:\r        //\r        //   pending reward = (user.amount * pool.accSwapShipPerShare) - user.rewardDebt\r        //\r        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r        //   1. The pool's `accSwapShipPerShare` (and `lastRewardBlock`) gets updated.\r        //   2. User receives the pending reward sent to his/her address.\r        //   3. User's `amount` gets updated.\r        //   4. User's `rewardDebt` gets updated.\r    }\r\r    // Info of each pool.\r    struct PoolInfo {\r        IERC20 lpToken;           // Address of LP token contract.\r        uint256 allocPoint;       // How many allocation points assigned to this pool. SWSHs to distribute per block.\r        uint256 lastRewardBlock;  // Last block number that SWSHs distribution occurs.\r        uint256 accSwapShipPerShare; // Accumulated SWSHs per share, times 1e12. See below.\r    }\r\r    // Contract creation time\r    uint256 public inceptionTime;\r    // Timelock date\r    uint256 public timelockTime;\r\r    // The SWSH TOKEN!\r    SwapShipToken public swapship;\r    // Dev address.\r    address public devaddr;\r    // Block number when bonus SWSH period ends.\r    uint256 public bonusEndBlock;\r    // SWSH tokens created per block.\r    uint256 public swapshipPerBlock;\r    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\r    IMigratorCaptain public migrator;\r\r    // Info of each pool.\r    PoolInfo[] public poolInfo;\r    // Info of each user that stakes LP tokens.\r    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r    uint256 public totalAllocPoint = 0;\r    // The block number when SWSH mining starts.\r    uint256 public startBlock;\r\r    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\r    constructor(\r        SwapShipToken _swapship,\r        address _devaddr,\r        uint256 _swapshipPerBlock,\r        uint256 _startBlock,\r        uint256 _bonusEndBlock\r    ) public {\r        swapship = _swapship;\r        devaddr = _devaddr;\r        swapshipPerBlock = _swapshipPerBlock;\r        bonusEndBlock = _bonusEndBlock;\r        startBlock = _startBlock;\r        inceptionTime = block.timestamp;\r        timelockTime = inceptionTime + 30 days;\r    }\r\r    function poolLength() external view returns (uint256) {\r        return poolInfo.length;\r    }\r\r    // Add a new lp to the pool. Can only be called by the owner.\r    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\r        if (_withUpdate) {\r            massUpdatePools();\r        }\r        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r        poolInfo.push(PoolInfo({\r            lpToken: _lpToken,\r            allocPoint: _allocPoint,\r            lastRewardBlock: lastRewardBlock,\r            accSwapShipPerShare: 0\r        }));\r    }\r\r    // Update the given pool's SWSH allocation point. Can only be called by the owner.\r    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r        if (_withUpdate) {\r            massUpdatePools();\r        }\r        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r        poolInfo[_pid].allocPoint = _allocPoint;\r    }\r\r    // Set the migrator contract. Can only be called by the owner.\r    function setMigrator(IMigratorCaptain _migrator) public onlyOwner {\r        require(block.timestamp >= timelockTime, \"SwapShip: current time is before release time\");\r        migrator = _migrator;\r    }\r\r    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r    function migrate(uint256 _pid) public {\r        require(address(migrator) != address(0), \"migrate: no migrator\");\r        PoolInfo storage pool = poolInfo[_pid];\r        IERC20 lpToken = pool.lpToken;\r        uint256 bal = lpToken.balanceOf(address(this));\r        lpToken.safeApprove(address(migrator), bal);\r        IERC20 newLpToken = migrator.migrate(lpToken);\r        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\r        pool.lpToken = newLpToken;\r    }\r\r    // Return reward multiplier over the given _from to _to block.\r    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r        if (_to <= bonusEndBlock) {\r            return _to.sub(_from);\r        } else if (_from >= bonusEndBlock) {\r            return _to.sub(_from);\r        } else {\r            return bonusEndBlock.sub(_from).add(\r                _to.sub(bonusEndBlock)\r            );\r        }\r    }\r\r    // View function to see pending SWSHs on frontend.\r    function pendingSwapShip(uint256 _pid, address _user) external view returns (uint256) {\r        PoolInfo storage pool = poolInfo[_pid];\r        UserInfo storage user = userInfo[_pid][_user];\r        uint256 accSwapShipPerShare = pool.accSwapShipPerShare;\r        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r            uint256 swapshipReward = multiplier.mul(swapshipPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r            accSwapShipPerShare = accSwapShipPerShare.add(swapshipReward.mul(1e12).div(lpSupply));\r        }\r        return user.amount.mul(accSwapShipPerShare).div(1e12).sub(user.rewardDebt);\r    }\r\r    // Update reward variables for all pools. Be careful of gas spending!\r    function massUpdatePools() public {\r        uint256 length = poolInfo.length;\r        for (uint256 pid = 0; pid < length; ++pid) {\r            updatePool(pid);\r        }\r    }\r\r    // Update reward variables of the given pool to be up-to-date.\r    function updatePool(uint256 _pid) public {\r        PoolInfo storage pool = poolInfo[_pid];\r        if (block.number <= pool.lastRewardBlock) {\r            return;\r        }\r        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r        if (lpSupply == 0) {\r            pool.lastRewardBlock = block.number;\r            return;\r        }\r        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r        uint256 swapshipReward = multiplier.mul(swapshipPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r        // swapship.mint(devaddr, swapshipReward.div(10)); // remove dev 10% fee, wtf...\r        swapship.mint(address(this), swapshipReward);\r        pool.accSwapShipPerShare = pool.accSwapShipPerShare.add(swapshipReward.mul(1e12).div(lpSupply));\r        pool.lastRewardBlock = block.number;\r    }\r\r    // Deposit LP tokens to CaptainCook for SWSH allocation.\r    function deposit(uint256 _pid, uint256 _amount) public {\r        PoolInfo storage pool = poolInfo[_pid];\r        UserInfo storage user = userInfo[_pid][msg.sender];\r        updatePool(_pid);\r        if (user.amount > 0) {\r            uint256 pending = user.amount.mul(pool.accSwapShipPerShare).div(1e12).sub(user.rewardDebt);\r            safeSwapShipTransfer(msg.sender, pending);\r        }\r        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r        user.amount = user.amount.add(_amount);\r        user.rewardDebt = user.amount.mul(pool.accSwapShipPerShare).div(1e12);\r        emit Deposit(msg.sender, _pid, _amount);\r    }\r\r    // Withdraw LP tokens from CaptainCook.\r    function withdraw(uint256 _pid, uint256 _amount) public {\r        PoolInfo storage pool = poolInfo[_pid];\r        UserInfo storage user = userInfo[_pid][msg.sender];\r        require(user.amount >= _amount, \"withdraw: not good\");\r        updatePool(_pid);\r        uint256 pending = user.amount.mul(pool.accSwapShipPerShare).div(1e12).sub(user.rewardDebt);\r        safeSwapShipTransfer(msg.sender, pending);\r        user.amount = user.amount.sub(_amount);\r        user.rewardDebt = user.amount.mul(pool.accSwapShipPerShare).div(1e12);\r        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r        emit Withdraw(msg.sender, _pid, _amount);\r    }\r\r    // Withdraw without caring about rewards. EMERGENCY ONLY.\r    function emergencyWithdraw(uint256 _pid) public {\r        PoolInfo storage pool = poolInfo[_pid];\r        UserInfo storage user = userInfo[_pid][msg.sender];\r        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r        user.amount = 0;\r        user.rewardDebt = 0;\r    }\r\r    // Safe swapship transfer function, just in case if rounding error causes pool to not have enough SWSHs.\r    function safeSwapShipTransfer(address _to, uint256 _amount) internal {\r        uint256 swapshipBal = swapship.balanceOf(address(this));\r        if (_amount > swapshipBal) {\r            swapship.transfer(_to, swapshipBal);\r        } else {\r            swapship.transfer(_to, _amount);\r        }\r    }\r\r    // Update dev address by the previous dev.\r    function dev(address _devaddr) public {\r        require(block.timestamp >= timelockTime, \"SwapShip: current time is before release time\");\r        require(msg.sender == devaddr, \"dev: wut?\");\r        devaddr = _devaddr;\r    }\r}"}}}