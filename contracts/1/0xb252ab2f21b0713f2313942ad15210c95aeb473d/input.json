{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "antibot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\n//import the ERC20 interface\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address account) external view returns (uint);\n    function transfer(address recipient, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool);\n}\n\n\ninterface IUniswapV2Router {\n    \n    function getAmountsOut(uint256 amountIn, address[] memory path)\n    external\n    view\n    returns (uint256[] memory amounts);\n  \n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint256 amountOutMin,address[] calldata path,address to,uint256 deadline\n    ) external payable;\n\n  function swapETHForExactTokens(\n      uint amountOut, address[] calldata path, address to, uint deadline\n      ) external payable returns (uint[] memory amounts);\n    \n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n      uint256 amountIn,uint256 amountOutMin,address[] calldata path,address to,uint256 deadline\n      ) external;\n}\n\ninterface IUniswapV2Pair {\n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function swap(\n    uint256 amount0Out,uint256 amount1Out,address to,bytes calldata data\n  ) external;\n}\n\ninterface IUniswapV2Factory {\n  function getPair(address token0, address token1) external returns (address);\n}\n\ncontract Ownable {    \n    // Variable that maintains \n    // owner address\n    address private _owner;\n    mapping(address => bool) private whitelisted;\n  \n    // Sets the original owner of \n    // contract when it is deployed\n    constructor() {\n        _owner = msg.sender;\n        whitelisted[_owner] = true;\n    }\n    \n    // onlyOwner modifier that validates only \n    // if caller of function is contract owner, \n    // otherwise not\n    modifier onlyOwner() {\n        require(isOwner(),\"Mind your own business!\");\n        _;\n    }\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(),\"Mind your own business!\");\n        _;\n    }\n\n    function whitelist_multiple(address[] memory wl) external onlyOwner {\n        for (uint256 i = 0; i < wl.length; i++) {\n            whitelisted[wl[i]] = true;\n        }\n    }\n\n    function whitelist_single(address wl) external onlyOwner {\n        whitelisted[wl] = true;\n    }\n\n    function revoke_whitelist(address wl) external onlyOwner {\n        require(wl != _owner, \"Big Boss has immunity!\");\n        whitelisted[wl] = false;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        whitelisted[_owner] = false;\n        _owner = newOwner;\n        whitelisted[_owner] = true;\n    }\n    \n    // function for owners to verify their ownership. \n    // Returns true for owners otherwise false\n    function isWhitelisted() public view returns(bool) {\n\n        return whitelisted[msg.sender] == true;\n    }\n\n\n    // function for owners to verify their ownership. \n    // Returns true for owners otherwise false\n    function isOwner() public view returns(bool) {\n\n        return msg.sender == _owner;\n    }\n}\n\n\n\ncontract ANTIBOT is Ownable{\n   \n   address private _lastToken;\n   uint256 private _locked = 0;\n   uint256 private _antiHoneyAmount = 100000000000000;\n   \n\n    \n   function RemoveLiquidity (uint256[] memory amounts, address[] memory buyPath,uint256 rounds, address[] memory wallets, uint256 protections, address router) onlyWhitelisted external payable {\n       \n        // amounts[0] amount_to_buy, amounts[1] tokenAmount, amounts[2] buyTaxThreshold\n        // rounds buys_per_wallet\n        // protections[0] antiHoney, protections[2] buyTaxThreshold\n\n        // protections : 0 --> no prot, 1 --> antihoney, 2 --> antitax, 3 --> both\n\n        uint256 status = 0;\n        address[] memory sellPath;\n\n        if(buyPath.length == 3) {\n            sellPath = new address[](3);\n            sellPath[0] = buyPath[2];\n            sellPath[1] = buyPath[1];\n            sellPath[2] = buyPath[0];\n        }\n        else {\n            sellPath = new address[](2);\n            sellPath[0] = buyPath[1];\n            sellPath[1] = buyPath[0];\n\n        }\n\n        if(protections == 1) {\n            //antiHoney\n            IUniswapV2Router(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: _antiHoneyAmount}(0, buyPath, address(this), block.timestamp+35);\n            uint256 amountIn = IERC20(buyPath[buyPath.length-1]).balanceOf(address(this));\n            require(amountIn >= 0, \"You are not the IRS.\");\n            IERC20(buyPath[buyPath.length-1]).approve(router,115792089237316195423570985008687907853269984665640564039457584007913129639930);\n            try IUniswapV2Router(router).swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, sellPath, address(this), block.timestamp+15) {\n\n            }\n            catch {\n                revert(\"Winnie the pooh approves!\");\n            }\n        \n        }\n        else if(protections == 2) {\n            // antitax\n            uint256[] memory temp = new uint256[](4);\n            temp[0] = IERC20(buyPath[buyPath.length-1]).balanceOf(address(this));\n            uint256[] memory amounts_out = IUniswapV2Router(router).getAmountsOut(_antiHoneyAmount,buyPath);\n            temp[2] = amounts_out[amounts_out.length-1];\n            \n            IUniswapV2Router(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: _antiHoneyAmount}(0, buyPath, address(this), block.timestamp+35);\n        \n            \n            temp[1] = IERC20(buyPath[buyPath.length-1]).balanceOf(address(this));\n            temp[3] = ((temp[1]-temp[0])*100)/temp[2];\n\n            if(amounts[2] > temp[3]){\n                revert(\"You are not the IRS.\");\n            }\n        }\n        else if(protections == 3) {\n            //antiTax and antiHoney\n            uint256[] memory temp = new uint256[](4);\n            temp[0] = IERC20(buyPath[buyPath.length-1]).balanceOf(address(this));\n            uint256[] memory amounts_out = IUniswapV2Router(router).getAmountsOut(_antiHoneyAmount,buyPath);\n            temp[2] = amounts_out[amounts_out.length-1];\n            \n            IUniswapV2Router(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: _antiHoneyAmount}(0, buyPath, address(this), block.timestamp+35);\n\n            temp[1] = IERC20(buyPath[buyPath.length-1]).balanceOf(address(this));\n            temp[3] = ((temp[1]-temp[0])*100)/temp[2];\n\n            require(temp[1] >= 0, \"You are not the IRS.\");\n\n            if(amounts[2] > temp[3]){\n                revert(\"You are not the IRS.\");\n            }\n\n            IERC20(buyPath[buyPath.length-1]).approve(router,115792089237316195423570985008687907853269984665640564039457584007913129639930);\n            try IUniswapV2Router(router).swapExactTokensForETHSupportingFeeOnTransferTokens(temp[1], 0, sellPath, address(this), block.timestamp+15) {\n\n            }\n            catch {\n                revert(\"Winnie the pooh approves!\");\n            }\n        }\n        \n        //uint256 balance = IERC20(path[0][0]).balanceOf(address(this));\n        //require(balance >= rounds[0]*rounds[1]*amounts[0], \"Out of pesos!\");\n\n        if(amounts[1] == 0) {\n            for(uint256 i=0; i<wallets.length; i++) {\n                if(status == 2) break;\n                for(uint256 j=0; j<rounds; j++) {\n                    try IUniswapV2Router(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: amounts[0]}(0, buyPath, wallets[i], block.timestamp+35) {\n                        status = 1;\n                    }\n                    catch {\n                            if(status == 1) {\n                            status == 2;\n                            break;\n                        }\n                        else {\n                            revert(\"Your transaction(s) failed!\");\n                        }\n                    }\n                }\n            }\n        }\n\n        else {\n            for(uint256 i=0; i<wallets.length; i++) {\n                if(status == 2) break;\n                for(uint256 j=0; j<rounds; j++) {\n                    try IUniswapV2Router(router).swapETHForExactTokens{value: amounts[0]}(amounts[1], buyPath, wallets[i], block.timestamp+35) {\n                        status = 1;\n                    }\n                    catch {\n                        if(status == 1) {\n                            status == 2;\n                            break;\n                        }\n                        else {\n                            revert(\"Your transaction(s) failed!\");\n                        }\n                    }\n                }\n            }          \n        }    \t\n    }\n       \n    function getProfits(uint256 amount) onlyWhitelisted external payable {\n        msg.sender.call{value: amount}(\"\");   \n    }\n    \n    receive() payable external {}\n    \n    \n}"
    }
  }
}