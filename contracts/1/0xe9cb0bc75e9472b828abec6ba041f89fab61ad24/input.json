{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DracoExec2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.4;\n\ninterface UniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface UniswapV2ERC20 {\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function transfer(address to, uint value) external returns (bool);\n    function approve(address spender, uint value) external returns (bool);\n}\n\ninterface UniswapV2Pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function token0() external view returns (address);\n}\n\ninterface UniswapV2Router02 {\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ncontract DracoExec {\n    \n    address owner;\n    \n    mapping (address => bool) whitelist;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be Owner\");\n        _;\n    }\n    \n    modifier onlyWhitelist(address _tocheck) {\n        require(whitelist[_tocheck], \"Address is not in whitelist\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n        whitelist[msg.sender] = true;\n    }\n    \n    function getOwner() external view onlyOwner returns(address) {\n        return owner;\n    }\n    \n    function addWhitelist(address _to_add) external onlyOwner {\n        whitelist[_to_add] = true;\n    }\n    \n    function removeWhitelist(address _to_remove) external onlyOwner {\n        whitelist[_to_remove] = false;\n    }\n    \n    function getWhitelist(address _to_get) external view onlyOwner returns(bool) {\n        return whitelist[_to_get];\n    }\n    \n    function transferToken(address _token, address _to, uint _amount) external onlyOwner {\n        UniswapV2ERC20(_token).transfer(_to, _amount);\n    }\n    \n    function changeOwner(address _new_owner) external onlyOwner {\n        owner = _new_owner;\n    }\n    \n    function withdrawToken(address _token, uint _amount) external onlyOwner {\n        UniswapV2ERC20(_token).transfer(msg.sender, _amount);\n    }\n    \n    function dracoTrade(address _factory, address _router, address _weth, uint _reserveA, uint _reserveB, uint _min_front, address[] memory _path, uint _deadline, uint _min_child_gas) external onlyWhitelist(msg.sender) {\n\n        uint _amount_in = UniswapV2ERC20(_path[0]).balanceOf(address(this));\n        uint _amount_out_min = 0;\n        \n        if (_amount_in == 0) {\n            revert(\"token balance is zero\");\n        }\n        \n        if (_path[0] != _weth) {\n            \n            if (UniswapV2ERC20(_path[0]).allowance(address(this), _router) < _amount_in) {\n                UniswapV2ERC20(_path[0]).approve(_router, _amount_in);\n            }\n            \n        }\n        \n        else if (_path[0] == _weth) {\n            \n            if (UniswapV2ERC20(_path[0]).allowance(address(this), _router) < _amount_in) {\n                UniswapV2ERC20(_path[0]).approve(_router, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\n            }\n            \n            address pair = UniswapV2Factory(_factory).getPair(_path[0],_path[1]);\n            (uint112 reserve0, uint112 reserve1, ) = UniswapV2Pair(pair).getReserves();\n            \n            if (UniswapV2Pair(pair).token0() != _weth) {\n                (reserve0, reserve1) = (reserve1, reserve0);\n            }\n            \n            if (reserve0 * reserve1 < _reserveA * _reserveB) {\n                revert(\"constant data is lower\");\n            }\n            \n            if (reserve0 >= _reserveA) {\n                revert(\"reserve is already same or higher\");\n            }\n            \n            if (_reserveA - reserve0 < _min_front) {\n                revert(\"Amount is lower than minimum required\");\n            }\n            \n            if (_reserveA - reserve0 < _amount_in) {\n                _amount_in = _reserveA - reserve0;\n            }\n              \n        }\n        \n        uint[] memory amount_out_list = UniswapV2Router02(_router).getAmountsOut(_amount_in, _path);\n        _amount_out_min = amount_out_list[amount_out_list.length - 1];\n        \n        UniswapV2Router02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(_amount_in, _amount_out_min*9998/10000, _path, address(this), _deadline);\n        \n        if (_path[0] != _weth) {\n            uint child_balance = UniswapV2ERC20(_path[1]).balanceOf(msg.sender);\n            if (child_balance < _min_child_gas) {\n                address[] memory __path;\n                __path[0] = _path[1];\n                __path[1] = _path[1];\n                UniswapV2Router02(_router).swapExactTokensForETH(_min_child_gas, _min_child_gas, __path, msg.sender, _deadline);\n            }\n        }\n        \n    }\n    \n    function killMe() external onlyOwner {\n        selfdestruct(msg.sender);\n    }\n    \n}"
    }
  }
}