{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/RushChaining.sol":{"content":"/**\n * \n * ██████╗ ██╗   ██╗███████╗██╗  ██╗ ██████╗██╗  ██╗ █████╗ ██╗███╗   ██╗██╗███╗   ██╗ ██████╗\n * ██╔══██╗██║   ██║██╔════╝██║  ██║██╔════╝██║  ██║██╔══██╗██║████╗  ██║██║████╗  ██║██╔════╝\n * ██████╔╝██║   ██║███████╗███████║██║     ███████║███████║██║██╔██╗ ██║██║██╔██╗ ██║██║  ███╗\n * ██╔══██╗██║   ██║╚════██║██╔══██║██║     ██╔══██║██╔══██║██║██║╚██╗██║██║██║╚██╗██║██║   ██║\n * ██║  ██║╚██████╔╝███████║██║  ██║╚██████╗██║  ██║██║  ██║██║██║ ╚████║██║██║ ╚████║╚██████╔╝\n * ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝\n * \n * \n * Auto Run Queue 1 Line Concept !\n * URL: https://rushchaining.com/\n **/\npragma solidity 0.6.4;\n\n\ncontract RushChaining {\n    address public ownerWallet;\n\n    struct QueueStruct {\n        uint256 id;\n        address addr;\n    }\n    mapping(uint256 => QueueStruct) public queue;\n\n    struct UserStruct {\n        bool isExist;\n        uint256 id;\n        uint256 invest;\n        uint256 profit;\n        address refAddr;\n        uint256 referral;\n    }\n    mapping(address => UserStruct) public users;\n\n    // Fee for ownerWallet in percentage\n    uint256 FEE = 3;\n    // Rewards for invitation in percentage\n    uint256 REWARD = 7;\n\n    mapping(uint256 => address) public addrByID;\n    uint256 public currQueue = 0;\n\n    // Event for notification\n    event regEvent(\n        address indexed _user,\n        address indexed _refAddr,\n        uint256 currQueue\n    );\n\n    constructor() public {\n        ownerWallet = msg.sender;\n\n        UserStruct memory userStruct;\n        QueueStruct memory queueStruct;\n        currQueue++;\n\n        queueStruct = QueueStruct({id: currQueue, addr: msg.sender});\n\n        userStruct = UserStruct({\n            isExist: true,\n            id: currQueue,\n            invest: 0,\n            profit: 0,\n            refAddr: msg.sender,\n            referral: 0\n        });\n\n        users[ownerWallet] = userStruct;\n        queue[currQueue] = queueStruct;\n        addrByID[currQueue] = ownerWallet;\n    }\n\n    function regByID(uint256 _referrerID) public payable {\n        require(msg.value == 0.1 ether, \"Require 0.1 ether\");\n\n        require(_referrerID <= currQueue, \"Incorrect referrer Id\");\n        if (_referrerID <= 0) _referrerID = 1;\n\n        UserStruct memory userStruct;\n        QueueStruct memory queueStruct;\n        currQueue++;\n\n        queueStruct = QueueStruct({id: currQueue, addr: msg.sender});\n\n        if (!users[msg.sender].isExist) {\n            userStruct = UserStruct({\n                isExist: true,\n                id: currQueue,\n                invest: msg.value,\n                profit: 0,\n                refAddr: addrByID[_referrerID],\n                referral: 0\n            });\n\n            users[msg.sender] = userStruct;\n        } else {\n            users[msg.sender].invest = users[msg.sender].invest + msg.value;\n        }\n\n        queue[currQueue] = queueStruct;\n        addrByID[currQueue] = msg.sender;\n\n        users[addrByID[_referrerID]].referral++;\n\n        // Send fee to ownerWallet\n        address(uint160(ownerWallet)).transfer((msg.value * FEE) / 100);\n        users[ownerWallet].profit =\n            users[ownerWallet].profit +\n            (msg.value * FEE) /\n            100;\n\n        // Pay for referral\n        address(uint160(addrByID[_referrerID])).transfer(\n            (msg.value * REWARD) / 100\n        );\n        users[addrByID[_referrerID]].profit =\n            users[addrByID[_referrerID]].profit +\n            (msg.value * REWARD) /\n            100;\n\n        emit regEvent(msg.sender, addrByID[_referrerID], currQueue);\n\n        if (currQueue > 11) {\n            address(uint160(addrByID[currQueue - 11])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 11]].profit =\n                users[addrByID[currQueue - 11]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 10])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 10]].profit =\n                users[addrByID[currQueue - 10]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 9])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 9]].profit =\n                users[addrByID[currQueue - 9]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 8])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 8]].profit =\n                users[addrByID[currQueue - 8]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 7])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 7]].profit =\n                users[addrByID[currQueue - 7]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 6])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 6]].profit =\n                users[addrByID[currQueue - 6]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 5])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 5]].profit =\n                users[addrByID[currQueue - 5]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 4])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 4]].profit =\n                users[addrByID[currQueue - 4]].profit +\n                (msg.value * 10) /\n                100;\n\n            address(uint160(addrByID[currQueue - 3])).transfer(\n                (msg.value * 10) / 100\n            );\n            users[addrByID[currQueue - 3]].profit =\n                users[addrByID[currQueue - 3]].profit +\n                (msg.value * 10) /\n                100;\n        } else {\n            address(uint160(ownerWallet)).transfer(\n                (msg.value * (100 - FEE - REWARD)) / 100\n            );\n            users[ownerWallet].profit =\n                users[ownerWallet].profit +\n                (msg.value * (100 - FEE - REWARD)) /\n                100;\n        }\n    }\n}\n"}}}