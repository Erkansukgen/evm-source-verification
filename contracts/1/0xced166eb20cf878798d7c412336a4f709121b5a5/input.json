{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/IBPool.sol": {
      "content": "pragma solidity ^0.7.3;\n\n\ninterface IBPool { \n    function getSpotPrice(\n        address tokenIn, \n        address tokenOut\n    )\n        external \n        view\n        returns (uint spotPrice);\n        \n    \n    function swapExactAmountOut(\n        address tokenIn,\n        uint maxAmountIn,\n        address tokenOut,\n        uint tokenAmountOut,\n        uint maxPrice\n    )\n        external \n        returns (uint tokenAmountIn, uint spotPriceAfter);\n}\n"
    },
    "browser/IWeth.sol": {
      "content": "pragma solidity ^0.7.3;\n\ninterface IWeth{\n\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n    function approve(address guy, uint wad) external returns (bool);\n    function balanceOf(address owner) external view returns(uint);\n    }"
    },
    "browser/MyContract.sol": {
      "content": "pragma solidity ^0.7.3;\n\n\nimport 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0-solc-0.7/contracts/token/ERC20/IERC20.sol';\nimport './IBPool.sol';\nimport './IWeth.sol';\n\n\ncontract MyContact{\n    IBPool public bPool;\n    IERC20 public dai;\n    IWeth public weth;\n    \n    constructor(address _bPool, address _dai, address _weth){\n        bPool = IBPool(_bPool);\n        dai = IERC20(_dai);\n        weth = IWeth(_weth);\n        \n    }\n    \n    function swapEthrForDai(uint daiAmount) external payable{\n        weth.deposit{value: msg.value}();\n        uint price = 110 * bPool.getSpotPrice(address(weth), address(dai)) /100;\n        uint wethAmount = price * daiAmount;\n        weth.approve(address(bPool), wethAmount);\n        bPool.swapExactAmountOut( \n            address(weth), \n            wethAmount,\n            address(dai),\n            daiAmount,\n            price\n            );\n            \n        dai.transfer(msg.sender, daiAmount);\n        uint wethBalance = weth.balanceOf(address(this));\n        if(wethBalance > 0){\n            msg.sender.transfer(address(this).balance);\n        }\n    }\n    \n    function getSpotPrice() external view returns(uint) {\n        return bPool.getSpotPrice(address(weth), address(dai));\n    }\n}"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0-solc-0.7/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  }
}