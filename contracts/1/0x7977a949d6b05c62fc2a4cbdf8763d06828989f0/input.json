{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Contracts/IERC20.sol":{"content":"pragma solidity ^0.7.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}"},"Contracts/IUniswapV2Router01.sol":{"content":"pragma solidity ^0.7.0;\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"Contracts/IUniswapV2Router02.sol":{"content":"pragma solidity ^0.7.0;\nimport \"./IUniswapV2Router01.sol\";\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"Contracts/Uniswap_Bulk_Sender.sol":{"content":"pragma solidity ^0.7.0;\n// pragma abicoder v2;\n\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IERC20.sol\";\ncontract UniBulknig {\n    address payable _owner;\n    \n    constructor() public{\n        _owner = msg.sender;\n    }\n    mapping(uint256 => address[]) public path;\n    IUniswapV2Router02 router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    \n    function setPath(uint256 _index, address[] memory _path) public{\n        path[_index] = _path;\n    }\n    \n    //approve uniswap's router to spend a token behalf of smart contract\n    function approveUniswapForToken(address _token_address, uint256 _amount, address _router_address) public payable {\n        IERC20 _token = IERC20(_token_address);\n        _token.approve(_router_address, _amount);\n    }\n    \n    // swap ethereum for token:\n    // function swapETHForToken(uint256 _amount, address [] calldata _path, address _receiver) public payable {\n    //     router.swapExactETHForTokens{value:_amount}(_amount, _path, _receiver,(block.timestamp + 3600));\n    // }\n    \n    \n    //swap batch of uniswap transactions:\n    function batchSwapETHForToken(uint256 [] memory _amounts, address [] memory _receivers, uint256[] memory _path_number) public payable {\n        // uint256 amounts_length = _amounts.length;\n        // uint256 receivers_length = _receivers.length;\n        // uint256 path_length = _path_number.length;\n        // uint128 sum_of_sent_values = 0;\n        require( _amounts.length == _receivers.length &&  _amounts.length == _path_number.length, \"Check Variables Length\");\n        for(uint96 i=0; i<_amounts.length; i++){\n            router.swapExactETHForTokens{value:_amounts[i]}(_amounts[i], path[_path_number[i]], _receivers[i],(block.timestamp + 3600));\n        }\n    }\n    \n    function returnContractBalance() public view returns(uint256){\n        return address(this).balance;\n    }\n    \n    function returnPath(uint256 _index) public view returns(address[] memory){\n        return path[_index];\n    }\n    \n    function withrawETH() public{\n        require(msg.sender == _owner, \"only owner can call this function\");\n        _owner.transfer(address(this).balance);\n    }\n    \n\n    receive () external payable {\n    }\n    \n\n}"}}}