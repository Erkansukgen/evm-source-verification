{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ForeignNFTOmnibridge-cutted.sol":{"content":"pragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: contracts/upgradeability/Proxy.sol\n\npragma solidity 0.7.5;\n\n/**\n * @title Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\nabstract contract Proxy {\n    /**\n     * @dev Tells the address of the implementation where every call will be delegated.\n     * @return address of the implementation to which it will be delegated\n     */\n    function implementation() public view virtual returns (address);\n\n    /**\n     * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n     * This function will return whatever the implementation call returns\n     */\n    fallback() external payable {\n        // solhint-disable-previous-line no-complex-fallback\n        address _impl = implementation();\n        require(_impl != address(0));\n        assembly {\n            /*\n                0x40 is the \"free memory slot\", meaning a pointer to next slot of empty memory. mload(0x40)\n                loads the data in the free memory slot, so `ptr` is a pointer to the next slot of empty\n                memory. It's needed because we're going to write the return data of delegatecall to the\n                free memory slot.\n            */\n            let ptr := mload(0x40)\n            /*\n                `calldatacopy` is copy calldatasize bytes from calldata\n                First argument is the destination to which data is copied(ptr)\n                Second argument specifies the start position of the copied data.\n                    Since calldata is sort of its own unique location in memory,\n                    0 doesn't refer to 0 in memory or 0 in storage - it just refers to the zeroth byte of calldata.\n                    That's always going to be the zeroth byte of the function selector.\n                Third argument, calldatasize, specifies how much data will be copied.\n                    calldata is naturally calldatasize bytes long (same thing as msg.data.length)\n            */\n            calldatacopy(ptr, 0, calldatasize())\n            /*\n                delegatecall params explained:\n                gas: the amount of gas to provide for the call. `gas` is an Opcode that gives\n                    us the amount of gas still available to execution\n\n                _impl: address of the contract to delegate to\n\n                ptr: to pass copied data\n\n                calldatasize: loads the size of `bytes memory data`, same as msg.data.length\n\n                0, 0: These are for the `out` and `outsize` params. Because the output could be dynamic,\n                        these are set to 0, 0 so the output data will not be written to memory. The output\n                        data will be read using `returndatasize` and `returdatacopy` instead.\n\n                result: This will be 0 if the call fails and 1 if it succeeds\n            */\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n            /*\n\n            */\n            /*\n                ptr current points to the value stored at 0x40,\n                because we assigned it like ptr := mload(0x40).\n                Because we use 0x40 as a free memory pointer,\n                we want to make sure that the next time we want to allocate memory,\n                we aren't overwriting anything important.\n                So, by adding ptr and returndatasize,\n                we get a memory location beyond the end of the data we will be copying to ptr.\n                We place this in at 0x40, and any reads from 0x40 will now read from free memory\n            */\n            mstore(0x40, add(ptr, returndatasize()))\n            /*\n                `returndatacopy` is an Opcode that copies the last return data to a slot. `ptr` is the\n                    slot it will copy to, 0 means copy from the beginning of the return data, and size is\n                    the amount of data to copy.\n                `returndatasize` is an Opcode that gives us the size of the last return data. In this case, that is the size of the data returned from delegatecall\n            */\n            returndatacopy(ptr, 0, returndatasize())\n\n            /*\n                if `result` is 0, revert.\n                if `result` is 1, return `size` amount of data from `ptr`. This is the data that was\n                copied to `ptr` from the delegatecall return data\n            */\n            switch result\n                case 0 {\n                    revert(ptr, returndatasize())\n                }\n                default {\n                    return(ptr, returndatasize())\n                }\n        }\n    }\n}\n\n// File: contracts/interfaces/IOwnable.sol\n\npragma solidity 0.7.5;\n\ninterface IOwnable {\n    function owner() external view returns (address);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: contracts/upgradeable_contracts/omnibridge_nft/components/bridged/ERC721TokenProxy.sol\n\npragma solidity 0.7.5;\n\n\n\n\n/**\n * @title ERC721TokenProxy\n * @dev Helps to reduces the size of the deployed bytecode for automatically created tokens, by using a proxy contract.\n */\ncontract ERC721TokenProxy is Proxy {\n    // storage layout is copied from ERC721BridgeToken.sol\n    mapping(bytes4 => bool) private _supportedInterfaces;\n    mapping(address => uint256) private _holderTokens;\n\n    //EnumerableMap.UintToAddressMap private _tokenOwners;\n    uint256[] private _tokenOwnersEntries;\n    mapping(bytes32 => uint256) private _tokenOwnersIndexes;\n\n    mapping(uint256 => address) private _tokenApprovals;\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n    string private name;\n    string private symbol;\n    mapping(uint256 => string) private _tokenURIs;\n    string private _baseURI;\n    address private bridgeContract;\n\n    /**\n     * @dev Creates an upgradeable token proxy for ERC721BridgeToken.sol, initializes its eternalStorage.\n     * @param _tokenImage address of the token image used for mirroring all functions.\n     * @param _name token name.\n     * @param _symbol token symbol.\n     * @param _owner address of the owner for this contract.\n     */\n    constructor(\n        address _tokenImage,\n        string memory _name,\n        string memory _symbol,\n        address _owner\n    ) {\n        assembly {\n            // EIP 1967\n            // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\n            sstore(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, _tokenImage)\n        }\n        name = _name;\n        symbol = _symbol;\n        bridgeContract = _owner; // _owner == HomeOmnibridgeNFT/ForeignOmnibridgeNFT mediator\n    }\n\n    /**\n     * @dev Retrieves the implementation contract address, mirrored token image.\n     * @return impl token image address.\n     */\n    function implementation() public view override returns (address impl) {\n        assembly {\n            impl := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\n        }\n    }\n\n    /**\n     * @dev Updates the implementation contract address.\n     * Only the bridge and bridge owner can call this method.\n     * @param _implementation address of the new implementation.\n     */\n    function setImplementation(address _implementation) external {\n        require(msg.sender == bridgeContract || msg.sender == IOwnable(bridgeContract).owner());\n        require(_implementation != address(0));\n        require(Address.isContract(_implementation));\n        assembly {\n            // EIP 1967\n            // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\n            sstore(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, _implementation)\n        }\n    }\n\n    /**\n     * @dev Tells the current version of the ERC721 token proxy interfaces.\n     */\n    function getTokenProxyInterfacesVersion()\n        external\n        pure\n        returns (\n            uint64 major,\n            uint64 minor,\n            uint64 patch\n        )\n    {\n        return (1, 0, 0);\n    }\n}\n\n// File: contracts/upgradeability/EternalStorage.sol\n\npragma solidity 0.7.5;\n\n/**\n * @title EternalStorage\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\n */\ncontract EternalStorage {\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n}\n\n// File: contracts/upgradeable_contracts/omnibridge_nft/components/bridged/TokenImageStorage.sol\n\npragma solidity 0.7.5;\n\n\n\n/**\n * @title TokenImageStorage\n * @dev Storage functionality for working with ERC721/ERC1155 image contract.\n */\ncontract TokenImageStorage is EternalStorage {\n    bytes32 internal constant ERC721_TOKEN_IMAGE_CONTRACT =\n        0x20b8ca26cc94f39fab299954184cf3a9bd04f69543e4f454fab299f015b8130f; // keccak256(abi.encodePacked(\"tokenImageContract\"))\n\n    /**\n     * @dev Tells the address of the used ERC721 token image.\n     * @return address of the used token image.\n     */\n    function tokenImageERC721() public view returns (address) {\n        return addressStorage[ERC721_TOKEN_IMAGE_CONTRACT];\n    }\n}\n\n// File: contracts/upgradeable_contracts/omnibridge_nft/components/bridged/BridgedTokensRegistry.sol\n\npragma solidity 0.7.5;\n\n\n/**\n * @title BridgedTokensRegistry\n * @dev Functionality for keeping track of registered bridged token pairs.\n */\ncontract BridgedTokensRegistry is EternalStorage {\n    event NewTokenRegistered(address indexed nativeToken, address indexed bridgedToken);\n\n    /**\n     * @dev Internal function for updating a pair of addresses for the bridged token.\n     * @param _nativeToken address of the native token contract on the other side.\n     * @param _bridgedToken address of the created bridged token contract on this side.\n     */\n    function _setTokenAddressPair(address _nativeToken, address _bridgedToken) internal {\n        addressStorage[keccak256(abi.encodePacked(\"homeTokenAddress\", _nativeToken))] = _bridgedToken;\n        addressStorage[keccak256(abi.encodePacked(\"foreignTokenAddress\", _bridgedToken))] = _nativeToken;\n\n        emit NewTokenRegistered(_nativeToken, _bridgedToken);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\npragma solidity ^0.7.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\n\npragma solidity ^0.7.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: contracts/upgradeable_contracts/omnibridge_nft/components/native/MetadataReader.sol\n\npragma solidity 0.7.5;\n\n\n\n\n\n/**\n * @title MetadataReader\n * @dev Functionality for reading metadata from ERC721/ERC1155 tokens.\n */\ncontract MetadataReader is EternalStorage {\n    /**\n     * @dev Internal function for reading ERC721/ERC1155 token name.\n     * Use custom predefined name in case name() function is not implemented.\n     * @param _token address of the ERC721/ERC1155 token contract.\n     * @return name for the token.\n     */\n    function _readName(address _token) internal view returns (string memory) {\n        (bool status, bytes memory data) = _token.staticcall(abi.encodeWithSelector(IERC721Metadata.name.selector));\n        return status ? abi.decode(data, (string)) : stringStorage[keccak256(abi.encodePacked(\"customName\", _token))];\n    }\n\n    /**\n     * @dev Internal function for reading ERC721/ERC1155 token symbol.\n     * Use custom predefined symbol in case symbol() function is not implemented.\n     * @param _token address of the ERC721/ERC1155 token contract.\n     * @return symbol for the token.\n     */\n    function _readSymbol(address _token) internal view returns (string memory) {\n        (bool status, bytes memory data) = _token.staticcall(abi.encodeWithSelector(IERC721Metadata.symbol.selector));\n        return status ? abi.decode(data, (string)) : stringStorage[keccak256(abi.encodePacked(\"customSymbol\", _token))];\n    }\n\n}\n\n// File: contracts/interfaces/IBurnableMintableERC721Token.sol\n\npragma solidity 0.7.5;\n\n\ninterface IBurnableMintableERC721Token is IERC721 {\n    function mint(address _to, uint256 _tokeId) external;\n\n    function burn(uint256 _tokenId) external;\n\n    function setTokenURI(uint256 _tokenId, string calldata _tokenURI) external;\n}\n\n/**\n * @title ForeignNFTOmnibridge\n * @dev Foreign side implementation for multi-token ERC721 mediator intended to work on top of AMB bridge.\n * It is designed to be used as an implementation contract of EternalStorageProxy contract.\n */\ncontract ForeignNFTOmnibridge is \n    BridgedTokensRegistry,\n    MetadataReader, \n    TokenImageStorage\n{\n    event TokensBridged(\n        address indexed token,\n        address indexed recipient,\n        uint256[] tokenIds,\n        uint256[] values,\n        bytes32 indexed messageId\n    );\n    \n    event Upgraded(uint256 version, address indexed implementation);\n    \n    function tokensRedploymentAndRemint() external {\n\t\t// ---------------------------------------------------------\n\n\t\taddress tokenImage = tokenImageERC721();\n\n\t\tuint256[] memory ids = new uint256[](1);\n\t\tuint256[] memory values = new uint256[](1);\n\t\tvalues[0] = 0;\n\n\t\t// ---------------------------------------------------------\n\t\t// Handle 0xCF964c89f509a8c0Ac36391c5460dF94B91daba5\n\t\t// bridged as 0x9a6E7ddFF15BbBA5E2B464677BD1dD06512E7e00\n\t\t// ---------------------------------------------------------\n\n\t\t// f09f8ea8204e696674792e496e6b2066726f6d2078446169\n\n\t\taddress bridgedToken = address(new ERC721TokenProxy(tokenImage, \n\t\t                                                    hex\"f09f8ea8204e696674792e496e6b2066726f6d2078446169\",\n\t\t                                                    _readSymbol(address(0x9a6E7ddFF15BbBA5E2B464677BD1dD06512E7e00)),\n\t\t                                                    address(this)));\n\n\t\t_setTokenAddressPair(address(0xCF964c89f509a8c0Ac36391c5460dF94B91daba5), bridgedToken);\n\t\tdelete addressStorage[keccak256(abi.encodePacked(\"foreignTokenAddress\", address(0x9a6E7ddFF15BbBA5E2B464677BD1dD06512E7e00)))];\n\n\t\tids[0] = 6355;\n\t\tIBurnableMintableERC721Token(bridgedToken).mint(address(0xBF3d6f830CE263CAE987193982192Cd990442B53), 6355);\n\t\temit TokensBridged(bridgedToken, address(0xBF3d6f830CE263CAE987193982192Cd990442B53), ids, values, 0x00050000a7823d6f1e31569f51861e345b30c6bebf70ebe70000000000002266);\n\t\tIBurnableMintableERC721Token(bridgedToken).setTokenURI(6355, \"ipfs://ipfs/QmQMjuyCSZTaztnu9e6ntmQsxfhz72YYp5s8vsjZERaDBq\");\n\n\t\tids[0] = 6391;\n\t\tIBurnableMintableERC721Token(bridgedToken).mint(address(0x50c87176BcD227aB083A6B4Cf2038b0D5081fFe5), 6391);\n\t\temit TokensBridged(bridgedToken, address(0x50c87176BcD227aB083A6B4Cf2038b0D5081fFe5), ids, values, 0x00050000a7823d6f1e31569f51861e345b30c6bebf70ebe700000000000022da);\n\t\tIBurnableMintableERC721Token(bridgedToken).setTokenURI(6391, \"ipfs://ipfs/QmR7iUWuSY8ax9fbGYXMK1UWm16uCk9GxMzu7ZnT3PCrdE\");\n\n\t\t// ---------------------------------------------------------\n\t\t// Handle 0x93dfaf57D986B9cA77Df9376c50878E013D9c7C8\n\t\t// bridged as 0x2542478cd824f674cE41732bFf24eF4921e739FF\n\t\t// ---------------------------------------------------------\n\n\t\tbridgedToken = address(new ERC721TokenProxy(tokenImage, \n\t\t                                            hex\"556e69717565204f6e652066726f6d2078446169\",\n\t\t                                            _readSymbol(address(0x2542478cd824f674cE41732bFf24eF4921e739FF)),\n\t\t                                            address(this)));\n\n\t\t_setTokenAddressPair(address(0x93dfaf57D986B9cA77Df9376c50878E013D9c7C8), bridgedToken);\n\t\tdelete addressStorage[keccak256(abi.encodePacked(\"foreignTokenAddress\", address(0x2542478cd824f674cE41732bFf24eF4921e739FF)))];\n\n\t\tids[0] = 4868;\n\t\tIBurnableMintableERC721Token(bridgedToken).mint(address(0x3564d78458309789fCF06F6145D5FECB924F2A49), 4868);\n\t\temit TokensBridged(bridgedToken, address(0x3564d78458309789fCF06F6145D5FECB924F2A49), ids, values, 0x00050000a7823d6f1e31569f51861e345b30c6bebf70ebe70000000000002f60);\n\t\tIBurnableMintableERC721Token(bridgedToken).setTokenURI(4868, \"https://ipfs.infura.io/ipfs/QmdaRchdmN4pGyk8cLuA9fD8G5K6GBZCc6sdVPhDZGNbgs\");\n\n\t\t// ---------------------------------------------------------\n\t\t// Handle 0x2c58650C3ef8Eb4853c0ac65DB54B62c07329691\n\t\t// bridged as 0x2F5Fa2759D7a428435530dC497d01621e1aEe9F6\n\t\t// ---------------------------------------------------------\n\n\t\tbridgedToken = address(new ERC721TokenProxy(tokenImage, \n\t\t                                            _readName(address(0x2F5Fa2759D7a428435530dC497d01621e1aEe9F6)),\n\t\t                                            _readSymbol(address(0x2F5Fa2759D7a428435530dC497d01621e1aEe9F6)),\n\t\t                                            address(this)));\n\n\t\t_setTokenAddressPair(address(0x2c58650C3ef8Eb4853c0ac65DB54B62c07329691), bridgedToken);\n\t\tdelete addressStorage[keccak256(abi.encodePacked(\"foreignTokenAddress\", address(0x2F5Fa2759D7a428435530dC497d01621e1aEe9F6)))];\n\n\t\tids[0] = 127;\n\t\tIBurnableMintableERC721Token(bridgedToken).mint(address(0x8b96B68c21eeD4c58cf1dC367109222B51afc2e7), 127);\n\t\temit TokensBridged(bridgedToken, address(0x8b96B68c21eeD4c58cf1dC367109222B51afc2e7), ids, values, 0x00050000a7823d6f1e31569f51861e345b30c6bebf70ebe70000000000004099);\n\t\tIBurnableMintableERC721Token(bridgedToken).setTokenURI(127, \"https://ipfs.io/ipfs/QmNhUxY5YXdyjxmRNo4teKk7UZVvQSuxkTdV3vZkTtZvzA\");\n\n\t\t// ---------------------------------------------------------\n\t\t// Handle 0xeC0794b4e10b953def629E2cd27b15A056002a57\n\t\t// bridged as 0x68AdA066b5c98A576CCa343A68CAC1487A91d076\n\t\t// ---------------------------------------------------------\n\n\t\tbridgedToken = address(new ERC721TokenProxy(tokenImage, \n\t\t                                            _readName(address(0x68AdA066b5c98A576CCa343A68CAC1487A91d076)),\n\t\t                                            _readSymbol(address(0x68AdA066b5c98A576CCa343A68CAC1487A91d076)),\n\t\t                                            address(this)));\n\n\t\t_setTokenAddressPair(address(0xeC0794b4e10b953def629E2cd27b15A056002a57), bridgedToken);\n\t\tdelete addressStorage[keccak256(abi.encodePacked(\"foreignTokenAddress\", address(0x68AdA066b5c98A576CCa343A68CAC1487A91d076)))];\n\n\t\tids[0] = 0;\n\t\tIBurnableMintableERC721Token(bridgedToken).mint(address(0x8b96B68c21eeD4c58cf1dC367109222B51afc2e7), 0);\n\t\temit TokensBridged(bridgedToken, address(0x8b96B68c21eeD4c58cf1dC367109222B51afc2e7), ids, values, 0x00050000a7823d6f1e31569f51861e345b30c6bebf70ebe70000000000003b2b);\n\t\tIBurnableMintableERC721Token(bridgedToken).setTokenURI(0, \"https://my-json-server.typicode.com/xaviers1998/test/tokens/0\");\n\n\t\t// ---------------------------------------------------------\n\t\t// Handle 0x22C1f6050E56d2876009903609a2cC3fEf83B415\n\t\t// bridged as 0x2884220b55615C48B656Ea57C467206756378F88\n\t\t// ---------------------------------------------------------\n\n\t\tbridgedToken = address(new ERC721TokenProxy(tokenImage, \n\t\t                                            _readName(address(0x2884220b55615C48B656Ea57C467206756378F88)),\n\t\t                                            _readSymbol(address(0x2884220b55615C48B656Ea57C467206756378F88)),\n\t\t                                            address(this)));\n\n\t\t_setTokenAddressPair(address(0x22C1f6050E56d2876009903609a2cC3fEf83B415), bridgedToken);\n\t\tdelete addressStorage[keccak256(abi.encodePacked(\"foreignTokenAddress\", address(0x2884220b55615C48B656Ea57C467206756378F88)))];\n\n\t\t// No need to mint tokens because the bridged token was burnt\n\t\t\n        assembly {\n            sstore(0x0000000000000000000000000000000000000000000000000000000000000007, 5)\n            sstore(0x0000000000000000000000000000000000000000000000000000000000000008, 0x56478532d0D6451E87dCc32Fe9701CC6c7Daf036)\n        }\n        \n        emit Upgraded(5, address(0x56478532d0D6451E87dCc32Fe9701CC6c7Daf036));\n    }\n\n    \n}\n"}}}