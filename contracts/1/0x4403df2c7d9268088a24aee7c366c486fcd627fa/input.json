{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/dydxFlashLoanMainnetV4.sol":{"content":"\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/dydx/DyDxFlashLoan.sol\n\npragma solidity >=0.4.22 <0.7.0;\npragma experimental ABIEncoderV2;\n\n\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n    struct Storage {\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n}\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (externally)\n        Sell, // sell an amount of some token (externally)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n}\n\nlibrary Decimal {\n    struct D256 {\n        uint256 value;\n    }\n}\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n}\n\n\nabstract contract DyDxPool {\n    //function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory); // this seems not being used.\n    //function operate(Info[] memory, ActionArgs[] memory) public;\n    function operate(Account.Info[] memory, Actions.ActionArgs[] memory) public virtual;\n}\n\ncontract DyDxFlashLoan {\n\n  DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\n  address payable public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n  address payable public SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n  address payable public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n  address payable public DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n  mapping(address => uint256) public currencies;\n\n  constructor() public {\n    currencies[WETH] = 1;\n    currencies[SAI] = 2;\n    currencies[USDC] = 3;\n    currencies[DAI] = 4;\n  }\n\n  modifier onlyPool() {\n    require(\n      msg.sender == address(pool),\n      \"FlashLoan: could be called by DyDx pool only\"\n    );\n    _;\n  }\n\n    function tokenToMarketId(address token) public view returns (uint256) {\n        uint256 marketId = currencies[token];\n        require(marketId != 0, \"FlashLoan: Unsupported token\");\n        return marketId - 1;\n    }\n\n    // the DyDx will call `callFunction(address sender, Info memory accountInfo,\n    // bytes memory data) public` after during `operate` call\n    function flashloan(address token, uint256 amount, bytes memory data)\n        internal\n    {\n      // Revert reason: OperationImpl: Undercollateralized account <0x9561c133dd8580860b6b7e504bc5aa500f0f06a7, 0>\n        IERC20(token).approve(address(pool), amount + 1);\n\n        Account.Info[] memory infos = new Account.Info[](1);\n        Actions.ActionArgs[] memory args = new Actions.ActionArgs[](3);\n\n        infos[0] = Account.Info(address(this), 0);\n\n        Types.AssetAmount memory wamt = Types.AssetAmount(\n            false,\n            Types.AssetDenomination.Wei,\n            Types.AssetReference.Delta,\n            amount\n        );\n        Actions.ActionArgs memory withdraw;\n        withdraw.actionType = Actions.ActionType.Withdraw;\n        withdraw.accountId = 0;\n        withdraw.amount = wamt;\n        withdraw.primaryMarketId = tokenToMarketId(token);\n        withdraw.otherAddress = address(this);\n\n        args[0] = withdraw;\n\n        Actions.ActionArgs memory call;\n        call.actionType = Actions.ActionType.Call;\n        call.accountId = 0;\n        call.otherAddress = address(this);\n        call.data = data;\n\n        args[1] = call;\n\n        Actions.ActionArgs memory deposit;\n        Types.AssetAmount memory damt = Types.AssetAmount(\n            true,\n            Types.AssetDenomination.Wei,\n            Types.AssetReference.Delta,\n            amount + 1\n        );\n        deposit.actionType = Actions.ActionType.Deposit;\n        deposit.accountId = 0;\n        deposit.amount = damt;\n        deposit.primaryMarketId = tokenToMarketId(token);\n        deposit.otherAddress = address(this);\n\n        args[2] = deposit;\n\n        pool.operate(infos, args);\n    }\n}\n\n// File: contracts/chi/IFreeFromUpTo.sol\n\npragma solidity >=0.4.22 <0.7.0;\n\n// this is for CHI from 1inch\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n    function balanceOf(address account) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n// File: contracts/dydxFlashLoanMainnetV4.sol\n\npragma solidity >=0.4.22 <0.7.0;\n\n\n\n\n\n\n\ncontract dydxFlashLoanMainnetV4 is DyDxFlashLoan {\n\n  using Address for address;\n  using SafeERC20 for IERC20;\n\n  address owner;\n\n  // we want to receive because we might sweep tokens between actions\n  // TODO: be careful not to leave coins here!\n  receive() external payable {}\n\n  event paramsLog(\n    address flToken,\n    uint256 flashAmount,\n    uint256 balanceBefore,\n    address tradeToken,\n    uint256 profit\n  );\n  event resultLog(\n    address flToken,\n    uint256 flashAmount,\n    uint256 balanceBefore,\n    address tradeToken,\n    uint256 profit\n  );\n  event gasLog(\n    address msgsender,\n    uint256 gasUseed\n  );\n\n  // CHI gastoken integration for 1Inch\n  IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n  constructor() public payable {\n    owner = msg.sender;\n    (bool success, ) = WETH.call.value(msg.value)(\"\");\n    require(success, \"fail to get weth\");\n    require(chi.approve(address(this), uint256(-1)));\n  }\n\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      revert();\n    }\n    _;\n  }\n\n  modifier discountCHI {\n    uint256 gasStart = gasleft();\n    _;\n    uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n\n    if(chi.balanceOf(address(this)) > 0){\n      chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n    } else {\n      chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n      emit gasLog(msg.sender, (gasSpent + 14154) / 41947);\n    }\n  }\n\n  struct dexActions {\n    address payable target;\n    address targetToken;\n    bytes actionData;\n    uint256 gas;\n  }\n\n\n  function getFlashloan\n  (\n    address _flashToken,\n    uint256 _flashAmount,\n    address _tradeToken,\n    dexActions[] memory _actions\n  )\n    public\n    discountCHI\n  {\n    uint256 _balanceBefore = IERC20(_flashToken).balanceOf(address(this));\n    bytes memory _data = abi.encode(\n      _flashToken,\n      _flashAmount,\n      _balanceBefore,\n      _tradeToken,\n      _actions\n    );\n    // execution goes to `callFunction`\n    flashloan(_flashToken, _flashAmount, _data);\n    // and this point we have succefully paid the dept\n    // withdraw profits\n    uint256 profit = IERC20(_flashToken).balanceOf(address(this));\n    IERC20(_flashToken).transfer(msg.sender, profit);\n    emit resultLog(_flashToken, _flashAmount, _balanceBefore, _tradeToken, profit);\n  }\n\n\n  function callFunction(\n    address, /* sender */\n    Account.Info calldata, /* accountInfo */\n    bytes calldata _data\n  )\n    external\n    payable\n    onlyPool\n    discountCHI\n  {\n    (\n      address flToken,\n      uint256 flashAmount,\n      uint256 balanceBefore,\n      address tradeToken,\n      dexActions[] memory actions\n    ) = abi.decode(_data, (address, uint256, uint256, address, dexActions[]));\n\n    uint256 balanceAfter = IERC20(flToken).balanceOf(address(this));\n    require(balanceAfter - balanceBefore == flashAmount, \"contract did not get the loan\");\n\n    uint256 actionNum = actions.length;\n\n    for(uint256 i = 0; i < actionNum; i++){\n      address targetAddress = actions[i].target;\n      address targetToken = actions[i].targetToken;\n      bytes memory targetAction = actions[i].actionData;\n      uint256 targetGas = actions[i].gas;\n\n      uint256 tokenBalance = IERC20(targetToken).balanceOf(address(this));\n      IERC20(targetToken).safeApprove(targetAddress, 0);\n      IERC20(targetToken).safeApprove(targetAddress, uint256(-1));\n      IERC20(targetToken).safeTransfer(targetAddress, tokenBalance);\n\n      if(targetGas == 0){\n        targetAddress.functionCall(targetAction,\"functionDelegateCall: external call failed +_+;\");\n      } else {\n        (bool success, bytes memory returndata) = targetAddress.call{gas: targetGas}(targetAction);\n        require(success == true, \"Exteranl Call failed +_+;\");\n      }\n    }\n\n    uint256 balance = IERC20(flToken).balanceOf(address(this));\n    emit paramsLog(flToken, flashAmount, balanceBefore, tradeToken, balance);\n  }\n\n\n\n  function directChildCall(\n    address _flashToken,\n    uint256 _flashAmount,\n    address _tradeToken,\n    dexActions[] calldata actions\n  )\n    external\n    payable\n    discountCHI\n  {\n    uint256 actionNum = actions.length;\n\n    for(uint256 i = 0; i < actionNum; i++){\n      address targetAddress = actions[i].target;\n      address targetToken = actions[i].targetToken;\n      bytes memory targetAction = actions[i].actionData;\n      uint256 targetGas = actions[i].gas;\n\n      uint256 tokenBalance = IERC20(targetToken).balanceOf(address(this));\n      IERC20(targetToken).safeApprove(targetAddress, 0);\n      IERC20(targetToken).safeApprove(targetAddress, uint256(-1));\n      IERC20(targetToken).safeTransfer(targetAddress, tokenBalance);\n\n      if(targetGas == 0){\n        targetAddress.functionCall(targetAction,\"functionDelegateCall: external call failed +_+;\");\n      } else {\n        (bool success, bytes memory returndata) = targetAddress.call{gas: targetGas}(targetAction);\n        require(success == true, \"Exteranl Call failed +_+;\");\n      }\n    }\n\n    uint256 balance = IERC20(_flashToken).balanceOf(address(this));\n  }\n\n\n\n\n}\n"}}}