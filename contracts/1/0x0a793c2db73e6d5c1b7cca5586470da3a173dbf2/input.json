{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Simpli.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\n\npragma solidity 0.6.9;\n\ncontract SIMPLI {\n\nusing SafeMath for uint256;\n\nstring public constant symbol = \"SIMPLI DEFI TOKEN\";\nstring public constant name = \"SIMPLI\";\nuint8 public constant decimals = 16;\nuint256 _totalSupply;\naddress public owner;\n\nmapping(address => uint256) balances;\nmapping(address => mapping (address => uint256)) allowances;\n\nconstructor() public {\n    owner = msg.sender;\n    _totalSupply = 100000000 * 10 ** uint256(decimals);\n    balances[owner] = _totalSupply;\n    emit Transfer(address(0), owner, _totalSupply);\n}\nfunction totalSupply() public view returns (uint256) {\n   return _totalSupply;\n}\nfunction balanceOf(address account) public view returns (uint256 balance) {\n   return balances[account];\n}\nfunction transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(msg.sender != address(0), \"ERC20: approve from the zero address\");\n    require(_to != address(0), \"ERC20: approve from the zero address\");\n    require(balances[msg.sender] >= _amount);\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(msg.sender, _to, _amount);\n    return true;\n}\nfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    require(_from != address(0), \"ERC20: approve from the zero address\");\n    require(_to != address(0), \"ERC20: approve from the zero address\");\n    require(balances[_from] >= _amount && allowances[_from][msg.sender] >= _amount);\n    balances[_from] = balances[_from].sub(_amount);\n    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(_from, _to, _amount);\n    return true;\n}\nfunction approve(address spender, uint256 _amount) public returns (bool) {\n    _approve(msg.sender, spender, _amount);\n    return true;\n}\nfunction _approve(address _owner, address _spender, uint256 _amount) internal {\n    require(_owner != address(0), \"ERC20: approve from the zero address\");\n    require(_spender != address(0), \"ERC20: approve to the zero address\");\n    allowances[_owner][_spender] = _amount;\n    emit Approval(_owner, _spender, _amount);\n    }\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n   return allowances[_owner][_spender];\n}\n\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(msg.sender, spender, allowances[msg.sender][spender].sub(subtractedValue));\n    return true;\n}\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, allowances[msg.sender][spender].add(addedValue));\n        return true;\n}\n\nevent Transfer(address indexed _from, address indexed _to, uint _value);\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\n\n}\n\nlibrary SafeMath {\n    \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n    return c;\n}\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n    return c;\n}\n}"}}}