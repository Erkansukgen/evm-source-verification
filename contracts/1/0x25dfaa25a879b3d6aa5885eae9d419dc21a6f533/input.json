{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Roflkopter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.0;\n\ncontract Roflkopter {\n    address payable public owner;\n\n    constructor(){\n        owner = msg.sender;\n    }\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'EXPIRED');\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address payable newOwner) external onlyOwner {\n        if (newOwner != address(0)) owner = newOwner;\n    }\n\n\n    function externalCall(\n        bytes memory callDataConcat, \n        address[] memory callAddresses, \n        uint256[] memory starts, \n        uint256[] memory gasLimitsAndValues, \n        uint32 deadline) external payable ensure(deadline) {\n\n        for(uint i = 0; i < callAddresses.length; i++){\n           require(ExternalCall(callAddresses[i], gasLimitsAndValues[i] & ((1 << 128) - 1), callDataConcat, starts[i], starts[i + 1] - starts[i], gasLimitsAndValues[i] >> 128));\n        }\n    }\n\n\n    function ExternalCall(address destination, uint value, bytes memory data, uint dataOffset, uint dataLength, uint gasLimit) internal returns(bool result) {\n        // solium-disable-next-line security/no-inline-assembly\n        if (gasLimit == 0) {\n            gasLimit = gasleft() - 40000;\n        }\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                gasLimit,\n                destination,\n                value,\n                add(d, dataOffset),\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n    }\n\n    function destroy() external onlyOwner{\n        selfdestruct(owner);\n    }\n}\n"
    }
  }
}