{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/test444.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.1 <0.9.0;\r\n\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\n//===============================interfaces======================================//\r\n\r\ncontract Eagle {\r\n    address private owner = msg.sender;\r\n    address internal constant UNISWAP_ROUTER_ADDRESS =\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    address public seller = 0xaf1fDe4EAC0cb2c70901d162f0cAa49fA709b172;\r\n    address public token = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    uint256 public price = 589870000000000;\r\n\r\n    IUniswapV2Router02 public uniswapRouter;\r\n    uint256 public amountMin;\r\n    address[] tokenPath;\r\n    mapping(address => bool) private whitelist;\r\n\r\n    constructor() payable {\r\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n        setTokenPath();\r\n        setAmountMin();\r\n        updateWhitelist(0xaf1fDe4EAC0cb2c70901d162f0cAa49fA709b172, true);\r\n        updateWhitelist(0xb71EA94763A7294C5205feD031a20ce283bB92e6, true);\r\n        updateWhitelist(0xAec9c9F692E9ca2089A3Ce641744Da8a997D9621, true);\r\n        updateWhitelist(0x4D5A491fCA078B96B5Bd9ef6d019d92502fEacA2, true);\r\n        updateWhitelist(0x8f092F450C651456236e466Eef2FE34169B7485d, true);\r\n        updateWhitelist(0xE972A4721Ef380025dd6Be8315e0EA6eC137e28f, true);\r\n        updateWhitelist(0x1A5b69d8B3965e6db1a086A63bd3A8e9336fC809, true);\r\n        updateWhitelist(0x9c65114dFa39B6785e3a38F7414D05e1ed212cd7, true);\r\n        updateWhitelist(0x532a4a39E4F684352a53413EB19e88c752C66bbb, true);\r\n        updateWhitelist(0x251EaC46450E3A86Ca68F3e2c3B755690A5274C2, true);\r\n        updateWhitelist(0x855E30bb54EDdAC553B7Da90BAec26a1B699C30B, true);\r\n        updateWhitelist(0x7633aF5B7cFCBe5E6300e20385449f4E481e87D1, true);\r\n        updateWhitelist(0x475770967DDdBF9914599a98A74f18092bD7995a, true);\r\n        updateWhitelist(0x55eD530D099A547cecf25a1244d1f8E567E6415c, true);\r\n        updateWhitelist(0x67457D2F02cAA141056847c89c09CE9042F291e3, true);\r\n        updateWhitelist(0x70f4C94EC905321d6f7096C21BfE5015B222d961, true);\r\n        updateWhitelist(0xF4D7451401009bd5813e91a92bB44FA9cE4106e7, true);\r\n        updateWhitelist(0xdd137aCd68763685663e4c9bfFfc77B398f7fc3A, true);\r\n        updateWhitelist(0x8B7F94296E4f3DAeEaDb68b03CaE3cbe58355157, true);\r\n        updateWhitelist(0xBEB86D2c37878ef682c7B96212465fD24Aa40C0f, true);\r\n        updateWhitelist(0x227a30d6498039Ee870E1274158D50d29848b3B5, true);\r\n        updateWhitelist(0xfA6F5c1dCe3e8681e33Cef7E4B2adc4C1B013cCc, true);\r\n        updateWhitelist(0xBF6CF0342D61cF2cAe6EA4DAf1D1F19155E09AFB, true);\r\n        updateWhitelist(0xCFAD6F6b176fbeD43edACa4AE25319F977C33E57, true);\r\n        updateWhitelist(0xb67A99D7A36e860b7E8fa51Fd5EE41C265E1688a, true);\r\n        updateWhitelist(0xE3E6163841C8f3AA51e4a19F419f333281c8D1Ab, true);\r\n        updateWhitelist(0x143a67edd18607C3C6a7b8AE92A65F88bB2D7c1b, true);\r\n        updateWhitelist(0xd78F3D9F85f64800B97A67e3d7e65449074DDb37, true);\r\n        updateWhitelist(0x8CB8182A2961BD38e014BF331803417fe98Ba90d, true);\r\n        updateWhitelist(0x6D3b9A2Ab2d48d5D28e48Dd015D3B9599aD10Bf5, true);\r\n        updateWhitelist(0x3Afa330a4c7d2340B02AF9c13280235B07AbCDfE, true);\r\n        updateWhitelist(0x5D5c7F06EaC8C9F620A5D71228948cd868eBBe8D, true);\r\n    }\r\n\r\n    modifier whitelisted() {\r\n        require(whitelist[msg.sender] == true, \"Not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function swap() public payable whitelisted {\r\n        uint256 funds = address(this).balance;\r\n\r\n        if (funds > 0) {\r\n            uniswapRouter.swapExactETHForTokens{value: funds}(\r\n                amountMin,\r\n                tokenPath,\r\n                seller,\r\n                block.timestamp + 1\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawAllEth() public restricted {\r\n        uint256 amount = address(this).balance;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function updateWhitelist(address peon, bool isWhitelisted) public payable {\r\n        whitelist[peon] = isWhitelisted;\r\n    }\r\n\r\n    function setPrice(uint256 tokenPrice) public payable restricted {\r\n        price = tokenPrice;\r\n        setAmountMin();\r\n    }\r\n\r\n    function setSeller(address sellerAddress) public payable restricted {\r\n        seller = sellerAddress;\r\n    }\r\n\r\n    function setTokenAndPrice(address tokenAddress, uint256 tokenPrice)\r\n        public\r\n        payable\r\n        restricted\r\n    {\r\n        token = tokenAddress;\r\n        setPrice(tokenPrice);\r\n        setTokenPath();\r\n    }\r\n\r\n    function destroy() public restricted {\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function setTokenPath() private {\r\n        tokenPath = [uniswapRouter.WETH(), token];\r\n    }\r\n\r\n    function setAmountMin() private {\r\n        uint256 funds = address(this).balance;\r\n        amountMin = (funds / price) * 10**18;\r\n    }\r\n\r\n    // important to receive ETH\r\n    receive() external payable {\r\n        setAmountMin();\r\n    }\r\n}\r\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    }
  }
}