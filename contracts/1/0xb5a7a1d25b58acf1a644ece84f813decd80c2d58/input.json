{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/test.sol":{"content":"pragma solidity ^0.7.5;\n\ninterface erc20 {\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);    \n}\n\ninterface erc20Validation {\n    function balanceOf(address _address, address _tokenAddress) external view returns (uint balance);    \n}\n\ncontract TestBZS\n{\t\n\nerc20 public _erc20;\n\n\nevent AddTokenEvent(address indexed _tokenAddress);\nevent SetForSaleEvent(address indexed _seller, address indexed _tokenAddress, uint _balance, uint _weiPriceUnitToken, bool update);\n\nmapping (address => address) public SecondaryValidation;\nmapping (address => mapping (address => uint)) public weiPriceUnitTokenList;\n\nfunction SetForSale(address tokenAddress, uint weiPriceUnitToken) public\n{\t\n\tif (weiPriceUnitToken == 0) revert('price cannot be zero');\n\t\t\n\tif (SecondaryValidation[tokenAddress] != 0x0000000000000000000000000000000000000000)\n\t{\n\t\terc20Validation vc = erc20Validation(SecondaryValidation[tokenAddress]);\n\t\tvc.balanceOf(msg.sender, tokenAddress);\n\t}\n\t\n\tif (erc20(tokenAddress).balanceOf(msg.sender) == 0) revert('balance cannot be zero');\n\tif (erc20(tokenAddress).allowance(msg.sender, address(this)) < erc20(tokenAddress).balanceOf(msg.sender)) revert('Approve not granted');\n\t\n\tif (weiPriceUnitTokenList[msg.sender][tokenAddress] == 0)\n\t{\n\t\temit AddTokenEvent(tokenAddress);\n\t\temit SetForSaleEvent(msg.sender, tokenAddress, erc20(tokenAddress).balanceOf(msg.sender), weiPriceUnitToken, false);\n\t}\n\telse\n\t{\n\t\temit SetForSaleEvent(msg.sender, tokenAddress, erc20(tokenAddress).balanceOf(msg.sender), weiPriceUnitToken, true);\n\t}\n\t\n\tweiPriceUnitTokenList[msg.sender][tokenAddress] = weiPriceUnitToken;\n}\n}"}}}