{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/inm.sol":{"content":"pragma solidity 0.7.1;\n\ncontract SimpleERC20Token {\n    string public constant name = \"inMatch token\";\n    string public constant symbol = \"INM\";\n    uint8 public constant decimals = 3;\n    uint256 public totalSupply = 0;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping (address => uint256) public balanceOf;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() {\n        balanceOf[msg.sender] = 200000000;\n        totalSupply = 200000000;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value);\n\n        balanceOf[msg.sender] -= value;  // deduct from sender's balance\n        balanceOf[to] += value;          // add to recipient's balance\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 value) public returns (bool success) {\n        _allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        require(value <= balanceOf[from]);\n        require(value <= _allowances[from][msg.sender]);\n\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        _allowances[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n}\n"}}}