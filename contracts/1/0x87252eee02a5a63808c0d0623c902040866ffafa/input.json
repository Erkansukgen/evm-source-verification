{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Controller.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Requried one small change in openzeppelin version of ownable, so imported\n// source code here. Notice line 26 for change.\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    /**\n     * @dev Changed _owner from 'private' to 'internal'\n     */\n    address internal _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Contract module extends Ownable and provide a way for safe transfer ownership.\n * New owner has to call acceptOwnership in order to complete ownership trasnfer.\n */\ncontract Owned is Ownable {\n    address private _newOwner;\n\n    /**\n     * @dev Initiate transfer ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner. Current owner will still be owner until\n     * new owner accept ownership.\n     * @param newOwner new owner address\n     */\n    function transferOwnership(address newOwner) public override onlyOwner {\n        require(newOwner != address(0), \"New owner is the zero address\");\n        _newOwner = newOwner;\n    }\n\n    /**\n     * @dev Allows new owner to accept ownership of the contract.\n     */\n    function acceptOwnership() public {\n        require(msg.sender == _newOwner, \"Caller is not the new owner\");\n        emit OwnershipTransferred(_owner, _newOwner);\n        _owner = _newOwner;\n        _newOwner = address(0);\n    }\n}\n\n\ninterface IVesperPool is IERC20 {\n    function approveToken() external;\n\n    function deposit() external payable;\n\n    function deposit(uint256) external;\n\n    function multiTransfer(uint256[] memory) external returns (bool);\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function rebalance() external;\n\n    function resetApproval() external;\n\n    function sweepErc20(address) external;\n\n    function withdraw(uint256) external;\n\n    function withdrawETH(uint256) external;\n\n    function withdrawByStrategy(uint256) external;\n\n    function feeCollector() external view returns (address);\n\n    function getPricePerShare() external view returns (uint256);\n\n    function token() external view returns (address);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n\n    function withdrawFee() external view returns (uint256);\n}\n\n\ninterface IStrategy {\n    function rebalance() external;\n\n    function deposit(uint256 amount) external;\n\n    function beforeWithdraw() external;\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawAll() external;\n\n    function isUpgradable() external view returns (bool);\n\n    function isReservedToken(address _token) external view returns (bool);\n\n    function token() external view returns (address);\n\n    function pool() external view returns (address);\n\n    function totalLocked() external view returns (uint256);\n\n    //Lifecycle functions\n    function pause() external;\n\n    function unpause() external;\n}\n\ninterface IPoolRewards {\n    function notifyRewardAmount(uint256) external;\n\n    function claimReward(address) external;\n\n    function updateReward(address) external;\n\n    function rewardForDuration() external view returns (uint256);\n\n    function claimable(address) external view returns (uint256);\n\n    function pool() external view returns (address);\n\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n}\n\n\ninterface IAddressList {\n    event AddressUpdated(address indexed a, address indexed sender);\n    event AddressRemoved(address indexed a, address indexed sender);\n\n    function add(address a) external returns (bool);\n\n    function addValue(address a, uint256 v) external returns (bool);\n\n    function addMulti(address[] calldata addrs) external returns (uint256);\n\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\n\n    function remove(address a) external returns (bool);\n\n    function removeMulti(address[] calldata addrs) external returns (uint256);\n\n    function get(address a) external view returns (uint256);\n\n    function contains(address a) external view returns (bool);\n\n    function at(uint256 index) external view returns (address, uint256);\n\n    function length() external view returns (uint256);\n}\n\n\ninterface IAddressListFactory {\n    event ListCreated(address indexed _sender, address indexed _newList);\n\n    function ours(address a) external view returns (bool);\n\n    function listCount() external view returns (uint256);\n\n    function listAt(uint256 idx) external view returns (address);\n\n    function createList() external returns (address listaddr);\n}\n\ncontract Controller is Owned {\n    using SafeMath for uint256;\n\n    // Pool specific params\n    mapping(address => uint256) public withdrawFee;\n    mapping(address => uint256) public interestFee;\n    mapping(address => address) public feeCollector;\n    mapping(address => uint256) public rebalanceFriction;\n    mapping(address => address) public strategy;\n    mapping(address => address) public poolRewards;\n    uint16 public aaveReferralCode;\n    address public founderVault;\n    uint256 public founderFee = 5e16;\n    address public treasuryPool;\n    address public uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    IAddressList public immutable pools;\n\n    constructor() public {\n        IAddressListFactory addressFactory =\n            IAddressListFactory(0x96655e307344C9153f5780f08422EC4EEBB35236);\n        pools = IAddressList(addressFactory.createList());\n    }\n\n    modifier validPool(address pool) {\n        require(pools.contains(pool), \"Not a valid pool\");\n        _;\n    }\n\n    /**\n     * @dev Add new pool in vesper system\n     * @param _pool Address of new pool\n     */\n    function addPool(address _pool) external onlyOwner {\n        require(_pool != address(0), \"invalid-pool\");\n        IERC20 pool = IERC20(_pool);\n        require(pool.totalSupply() == 0, \"Zero supply required\");\n        pools.add(_pool);\n    }\n\n    /**\n     * @dev Remove pool from vesper system\n     * @param _pool Address of pool to be removed\n     */\n    function removePool(address _pool) external onlyOwner {\n        IERC20 pool = IERC20(_pool);\n        require(pool.totalSupply() == 0, \"Zero supply required\");\n        pools.remove(_pool);\n    }\n\n    /**\n     * @dev Execute transaction in given target contract\n     * @param target Address of target contract\n     * @param value Ether amount to transfer\n     * @param signature Signature of function in target contract\n     * @param data Encoded data for function call\n     */\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data\n    ) external payable onlyOwner returns (bytes memory) {\n        return _executeTransaction(target, value, signature, data);\n    }\n\n    /// @dev Execute multiple transactions.\n    function executeTransactions(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas\n    ) external payable onlyOwner {\n        require(targets.length != 0, \"Must provide actions\");\n        require(\n            targets.length == values.length &&\n                targets.length == signatures.length &&\n                targets.length == calldatas.length,\n            \"Transaction data mismatch\"\n        );\n\n        for (uint256 i = 0; i < targets.length; i++) {\n            _executeTransaction(targets[i], values[i], signatures[i], calldatas[i]);\n        }\n    }\n\n    function updateAaveReferralCode(uint16 referralCode) external onlyOwner {\n        aaveReferralCode = referralCode;\n    }\n\n    function updateFeeCollector(address _pool, address _collector)\n        external\n        onlyOwner\n        validPool(_pool)\n    {\n        require(_collector != address(0), \"invalid-collector\");\n        require(feeCollector[_pool] != _collector, \"same-collector\");\n        feeCollector[_pool] = _collector;\n    }\n\n    function updateFounderVault(address _founderVault) external onlyOwner {\n        founderVault = _founderVault;\n    }\n\n    function updateFounderFee(uint256 _founderFee) external onlyOwner {\n        require(founderFee != _founderFee, \"same-founderFee\");\n        require(_founderFee <= 1e18, \"founderFee-above-100%\");\n        founderFee = _founderFee;\n    }\n\n    function updateInterestFee(address _pool, uint256 _interestFee) external onlyOwner {\n        require(_interestFee <= 1e18, \"Fee limit reached\");\n        require(feeCollector[_pool] != address(0), \"FeeCollector not set\");\n        interestFee[_pool] = _interestFee;\n    }\n\n    function updateStrategy(address _pool, address _newStrategy)\n        external\n        onlyOwner\n        validPool(_pool)\n    {\n        require(_newStrategy != address(0), \"invalid-strategy-address\");\n        address currentStrategy = strategy[_pool];\n        require(currentStrategy != _newStrategy, \"same-pool-strategy\");\n        require(IStrategy(_newStrategy).pool() == _pool, \"wrong-pool\");\n        IVesperPool vpool = IVesperPool(_pool);\n        if (currentStrategy != address(0)) {\n            require(IStrategy(currentStrategy).isUpgradable(), \"strategy-is-not-upgradable\");\n            vpool.resetApproval();\n        }\n        strategy[_pool] = _newStrategy;\n        vpool.approveToken();\n    }\n\n    function updateRebalanceFriction(address _pool, uint256 _f)\n        external\n        onlyOwner\n        validPool(_pool)\n    {\n        require(rebalanceFriction[_pool] != _f, \"same-friction\");\n        rebalanceFriction[_pool] = _f;\n    }\n\n    function updatePoolRewards(address _pool, address _poolRewards)\n        external\n        onlyOwner\n        validPool(_pool)\n    {\n        require(IPoolRewards(_poolRewards).pool() == _pool, \"wrong-pool\");\n        poolRewards[_pool] = _poolRewards;\n    }\n\n    function updateTreasuryPool(address _pool) external onlyOwner validPool(_pool) {\n        treasuryPool = _pool;\n    }\n\n    function updateUniswapRouter(address _uniswapRouter) external onlyOwner {\n        uniswapRouter = _uniswapRouter;\n    }\n\n    function updateWithdrawFee(address _pool, uint256 _newWithdrawFee)\n        external\n        onlyOwner\n        validPool(_pool)\n    {\n        require(_newWithdrawFee <= 1e18, \"withdraw-fee-limit-reached\");\n        require(withdrawFee[_pool] != _newWithdrawFee, \"same-withdraw-fee\");\n        require(feeCollector[_pool] != address(0), \"FeeCollector-not-set\");\n        withdrawFee[_pool] = _newWithdrawFee;\n    }\n\n    function isPool(address _pool) external view returns (bool) {\n        return pools.contains(_pool);\n    }\n\n    function _executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data\n    ) internal onlyOwner returns (bytes memory) {\n        bytes memory callData;\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, \"Transaction execution reverted.\");\n        return returnData;\n    }\n}"}}}