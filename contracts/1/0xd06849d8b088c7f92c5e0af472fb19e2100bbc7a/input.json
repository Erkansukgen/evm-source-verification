{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/uniswap_bobot_test.sol":{"content":"\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//this is the uniswap interface\n\npragma solidity ^0.6.6;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n\n\npragma solidity ^0.6.0;\n\nabstract contract ERC20WithoutTotalSupply is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal {\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//this is the ChiToken interface\n\ncontract ChiToken is IERC20, ERC20WithoutTotalSupply {\n    string constant public name = \"Chi Gastoken by 1inch\";\n    string constant public symbol = \"CHI\";\n    uint8 constant public decimals = 0;\n\n    uint256 public totalMinted;\n    uint256 public totalBurned;\n\n    function totalSupply() public view override returns(uint256) {\n        return totalMinted.sub(totalBurned);\n    }\n\n    function mint(uint256 value) public {\n        uint256 offset = totalMinted;\n        assembly {\n            mstore(0, 0x746d4946c0e9F43F4Dee607b0eF1fA1c3318585733ff6000526015600bf30000)\n\n            for {let i := div(value, 32)} i {i := sub(i, 1)} {\n                pop(create2(0, 0, 30, add(offset, 0))) pop(create2(0, 0, 30, add(offset, 1)))\n                pop(create2(0, 0, 30, add(offset, 2))) pop(create2(0, 0, 30, add(offset, 3)))\n                pop(create2(0, 0, 30, add(offset, 4))) pop(create2(0, 0, 30, add(offset, 5)))\n                pop(create2(0, 0, 30, add(offset, 6))) pop(create2(0, 0, 30, add(offset, 7)))\n                pop(create2(0, 0, 30, add(offset, 8))) pop(create2(0, 0, 30, add(offset, 9)))\n                pop(create2(0, 0, 30, add(offset, 10))) pop(create2(0, 0, 30, add(offset, 11)))\n                pop(create2(0, 0, 30, add(offset, 12))) pop(create2(0, 0, 30, add(offset, 13)))\n                pop(create2(0, 0, 30, add(offset, 14))) pop(create2(0, 0, 30, add(offset, 15)))\n                pop(create2(0, 0, 30, add(offset, 16))) pop(create2(0, 0, 30, add(offset, 17)))\n                pop(create2(0, 0, 30, add(offset, 18))) pop(create2(0, 0, 30, add(offset, 19)))\n                pop(create2(0, 0, 30, add(offset, 20))) pop(create2(0, 0, 30, add(offset, 21)))\n                pop(create2(0, 0, 30, add(offset, 22))) pop(create2(0, 0, 30, add(offset, 23)))\n                pop(create2(0, 0, 30, add(offset, 24))) pop(create2(0, 0, 30, add(offset, 25)))\n                pop(create2(0, 0, 30, add(offset, 26))) pop(create2(0, 0, 30, add(offset, 27)))\n                pop(create2(0, 0, 30, add(offset, 28))) pop(create2(0, 0, 30, add(offset, 29)))\n                pop(create2(0, 0, 30, add(offset, 30))) pop(create2(0, 0, 30, add(offset, 31)))\n                offset := add(offset, 32)\n            }\n\n            for {let i := and(value, 0x1F)} i {i := sub(i, 1)} {\n                pop(create2(0, 0, 30, offset))\n                offset := add(offset, 1)\n            }\n        }\n\n        _mint(msg.sender, value);\n        totalMinted = offset;\n    }\n\n    function computeAddress2(uint256 salt) public view returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), address(this), salt, bytes32(0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348))\n        );\n        return address(uint256(_data));\n    }\n\n    function _destroyChildren(uint256 value) internal {\n        uint256 _totalBurned = totalBurned;\n        for (uint256 i = 0; i < value; i++) {\n            computeAddress2(_totalBurned + i).call(\"\");\n        }\n        totalBurned = _totalBurned + value;\n    }\n\n    function free(uint256 value) public returns (uint256)  {\n        _burn(msg.sender, value);\n        _destroyChildren(value);\n        return value;\n    }\n\n    function freeUpTo(uint256 value) public returns (uint256) {\n      //  return free(Math.min(value, balanceOf(msg.sender)));\n    }\n\n    function freeFrom(address from, uint256 value) public returns (uint256) {\n        _burnFrom(from, value);\n        _destroyChildren(value);\n        return value;\n    }\n\n    function freeFromUpTo(address from, uint256 value) public returns (uint256) {\n        //return freeFrom(from, Math.min(Math.min(value, balanceOf(from)), allowance(from, msg.sender)));\n    }\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//this is the balancer interface\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\ninterface PoolInterface {\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n    function getDenormalizedWeight(address) external view returns (uint);\n    function getBalance(address) external view returns (uint);\n    function getSwapFee() external view returns (uint);\n}\n\ninterface TokenInterface {\n    function balanceOf(address) external view returns (uint);\n    function allowance(address, address) external view returns (uint);\n    function approve(address, uint) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface RegistryInterface {\n    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\n}\n\ncontract ExchangeProxy is Ownable {\n\n    using SafeMath for uint256;\n\n    struct Pool {\n        address pool;\n        uint    tokenBalanceIn;\n        uint    tokenWeightIn;\n        uint    tokenBalanceOut;\n        uint    tokenWeightOut;\n        uint    swapFee;\n        uint    effectiveLiquidity;\n    }\n\n    struct Swap {\n        address pool;\n        address tokenIn;\n        address tokenOut;\n        uint    swapAmount; // tokenInAmount / tokenOutAmount\n        uint    limitReturnAmount; // minAmountOut / maxAmountIn\n        uint    maxPrice;\n    }\n\n    TokenInterface weth;\n    RegistryInterface registry;\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    uint private constant BONE = 10**18;\n\n    constructor(address _weth) public {\n        weth = TokenInterface(_weth);\n    }\n\n    function setRegistry(address _registry) external onlyOwner {\n        registry = RegistryInterface(_registry);\n    }\n\n    function batchSwapExactIn(\n        Swap[] memory swaps,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountIn,\n        uint minTotalAmountOut\n    )\n        public payable\n        returns (uint totalAmountOut)\n    {\n        transferFromAll(tokenIn, totalAmountIn);\n\n        for (uint i = 0; i < swaps.length; i++) {\n            Swap memory swap = swaps[i];\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n            PoolInterface pool = PoolInterface(swap.pool);\n\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                SwapTokenIn.approve(swap.pool, 0);\n            }\n            SwapTokenIn.approve(swap.pool, swap.swapAmount);\n\n            (uint tokenAmountOut,) = pool.swapExactAmountIn(\n                                        swap.tokenIn,\n                                        swap.swapAmount,\n                                        swap.tokenOut,\n                                        swap.limitReturnAmount,\n                                        swap.maxPrice\n                                    );\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n        }\n\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\n\n        transferAll(tokenOut, totalAmountOut);\n        transferAll(tokenIn, getBalance(tokenIn));\n    }\n\n    function batchSwapExactOut(\n        Swap[] memory swaps,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint maxTotalAmountIn\n    )\n        public payable\n        returns (uint totalAmountIn)\n    {\n        transferFromAll(tokenIn, maxTotalAmountIn);\n\n        for (uint i = 0; i < swaps.length; i++) {\n            Swap memory swap = swaps[i];\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n            PoolInterface pool = PoolInterface(swap.pool);\n\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                SwapTokenIn.approve(swap.pool, 0);\n            }\n            SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\n\n            (uint tokenAmountIn,) = pool.swapExactAmountOut(\n                                        swap.tokenIn,\n                                        swap.limitReturnAmount,\n                                        swap.tokenOut,\n                                        swap.swapAmount,\n                                        swap.maxPrice\n                                    );\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\n        }\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\n\n        transferAll(tokenOut, getBalance(tokenOut));\n        transferAll(tokenIn, getBalance(tokenIn));\n\n    }\n\n    function multihopBatchSwapExactIn(\n        Swap[][] memory swapSequences,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountIn,\n        uint minTotalAmountOut\n    )\n        public payable\n        returns (uint totalAmountOut)\n    {\n\n        transferFromAll(tokenIn, totalAmountIn);\n\n        for (uint i = 0; i < swapSequences.length; i++) {\n            uint tokenAmountOut;\n            for (uint k = 0; k < swapSequences[i].length; k++) {\n                Swap memory swap = swapSequences[i][k];\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n                if (k == 1) {\n                    // Makes sure that on the second swap the output of the first was used\n                    // so there is not intermediate token leftover\n                    swap.swapAmount = tokenAmountOut;\n                }\n\n                PoolInterface pool = PoolInterface(swap.pool);\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                    SwapTokenIn.approve(swap.pool, 0);\n                }\n                SwapTokenIn.approve(swap.pool, swap.swapAmount);\n                (tokenAmountOut,) = pool.swapExactAmountIn(\n                                            swap.tokenIn,\n                                            swap.swapAmount,\n                                            swap.tokenOut,\n                                            swap.limitReturnAmount,\n                                            swap.maxPrice\n                                        );\n            }\n            // This takes the amountOut of the last swap\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n        }\n\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\n\n        transferAll(tokenOut, totalAmountOut);\n        transferAll(tokenIn, getBalance(tokenIn));\n\n    }\n\n    function multihopBatchSwapExactOut(\n        Swap[][] memory swapSequences,\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint maxTotalAmountIn\n    )\n        public payable\n        returns (uint totalAmountIn)\n    {\n\n        transferFromAll(tokenIn, maxTotalAmountIn);\n\n        for (uint i = 0; i < swapSequences.length; i++) {\n            uint tokenAmountInFirstSwap;\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\n            if (swapSequences[i].length == 1) {\n                Swap memory swap = swapSequences[i][0];\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\n\n                PoolInterface pool = PoolInterface(swap.pool);\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\n                    SwapTokenIn.approve(swap.pool, 0);\n                }\n                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\n\n                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\n                                        swap.tokenIn,\n                                        swap.limitReturnAmount,\n                                        swap.tokenOut,\n                                        swap.swapAmount,\n                                        swap.maxPrice\n                                    );\n            } else {\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\n                // of token C. But first we need to buy B with A so we can then buy C with B\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\n                uint intermediateTokenAmount; // This would be token B as described above\n                Swap memory secondSwap = swapSequences[i][1];\n                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\n                                        poolSecondSwap.getBalance(secondSwap.tokenIn),\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\n                                        poolSecondSwap.getBalance(secondSwap.tokenOut),\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\n                                        secondSwap.swapAmount,\n                                        poolSecondSwap.getSwapFee()\n                                    );\n\n                //// Buy intermediateTokenAmount of token B with A in the first pool\n                Swap memory firstSwap = swapSequences[i][0];\n                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\n                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\n                    FirstSwapTokenIn.approve(firstSwap.pool, uint(-1));\n                }\n\n                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\n                                        firstSwap.tokenIn,\n                                        firstSwap.limitReturnAmount,\n                                        firstSwap.tokenOut,\n                                        intermediateTokenAmount, // This is the amount of token B we need\n                                        firstSwap.maxPrice\n                                    );\n\n                //// Buy the final amount of token C desired\n                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\n                    SecondSwapTokenIn.approve(secondSwap.pool, uint(-1));\n                }\n\n                poolSecondSwap.swapExactAmountOut(\n                                        secondSwap.tokenIn,\n                                        secondSwap.limitReturnAmount,\n                                        secondSwap.tokenOut,\n                                        secondSwap.swapAmount,\n                                        secondSwap.maxPrice\n                                    );\n            }\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\n        }\n\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\n\n        transferAll(tokenOut, getBalance(tokenOut));\n        transferAll(tokenIn, getBalance(tokenIn));\n\n    }\n\n    function smartSwapExactIn(\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountIn,\n        uint minTotalAmountOut,\n        uint nPools\n    )\n        public payable\n        returns (uint totalAmountOut)\n    {\n        Swap[] memory swaps;\n        if (isETH(tokenIn)) {\n          (swaps,) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\n        } else if (isETH(tokenOut)){\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\n        } else {\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\n        }\n\n        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut);\n    }\n\n    function smartSwapExactOut(\n        TokenInterface tokenIn,\n        TokenInterface tokenOut,\n        uint totalAmountOut,\n        uint maxTotalAmountIn,\n        uint nPools\n    )\n        public payable\n        returns (uint totalAmountIn)\n    {\n        Swap[] memory swaps;\n        if (isETH(tokenIn)) {\n          (swaps,) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\n        } else if (isETH(tokenOut)){\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\n        } else {\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\n        }\n\n        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn);\n    }\n\n    function viewSplitExactIn(\n        address tokenIn,\n        address tokenOut,\n        uint swapAmount,\n        uint nPools\n    )\n        public view\n        returns (Swap[] memory swaps, uint totalOutput)\n    {\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n\n        Pool[] memory pools = new Pool[](poolAddresses.length);\n        uint sumEffectiveLiquidity;\n        for (uint i = 0; i < poolAddresses.length; i++) {\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n        }\n\n        uint[] memory bestInputAmounts = new uint[](pools.length);\n        uint totalInputAmount;\n        for (uint i = 0; i < pools.length; i++) {\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n        }\n\n        if (totalInputAmount < swapAmount) {\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n        } else {\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n        }\n\n        swaps = new Swap[](pools.length);\n\n        for (uint i = 0; i < pools.length; i++) {\n            swaps[i] = Swap({\n                        pool: pools[i].pool,\n                        tokenIn: tokenIn,\n                        tokenOut: tokenOut,\n                        swapAmount: bestInputAmounts[i],\n                        limitReturnAmount: 0,\n                        maxPrice: uint(-1)\n                    });\n        }\n\n        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\n\n        return (swaps, totalOutput);\n    }\n\n    function viewSplitExactOut(\n        address tokenIn,\n        address tokenOut,\n        uint swapAmount,\n        uint nPools\n    )\n        public view\n        returns (Swap[] memory swaps, uint totalOutput)\n    {\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\n\n        Pool[] memory pools = new Pool[](poolAddresses.length);\n        uint sumEffectiveLiquidity;\n        for (uint i = 0; i < poolAddresses.length; i++) {\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\n        }\n\n        uint[] memory bestInputAmounts = new uint[](pools.length);\n        uint totalInputAmount;\n        for (uint i = 0; i < pools.length; i++) {\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\n        }\n        \n         if (totalInputAmount < swapAmount) {\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\n        } else {\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\n        }\n\n        swaps = new Swap[](pools.length);\n\n        for (uint i = 0; i < pools.length; i++) {\n            swaps[i] = Swap({\n                        pool: pools[i].pool,\n                        tokenIn: tokenIn,\n                        tokenOut: tokenOut,\n                        swapAmount: bestInputAmounts[i],\n                        limitReturnAmount: uint(-1),\n                        maxPrice: uint(-1)\n                    });\n        }\n\n        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\n\n        return (swaps, totalOutput);\n    }\n\n    function getPoolData(\n        address tokenIn,\n        address tokenOut,\n        address poolAddress\n    )\n        internal view\n        returns (Pool memory)\n    {\n        PoolInterface pool = PoolInterface(poolAddress);\n        uint tokenBalanceIn = pool.getBalance(tokenIn);\n        uint tokenBalanceOut = pool.getBalance(tokenOut);\n        uint tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\n        uint tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\n        uint swapFee = pool.getSwapFee();\n\n        uint effectiveLiquidity = calcEffectiveLiquidity(\n                                            tokenWeightIn,\n                                            tokenBalanceOut,\n                                            tokenWeightOut\n                                        );\n        Pool memory returnPool = Pool({\n            pool: poolAddress,\n            tokenBalanceIn: tokenBalanceIn,\n            tokenWeightIn: tokenWeightIn,\n            tokenBalanceOut: tokenBalanceOut,\n            tokenWeightOut: tokenWeightOut,\n            swapFee: swapFee,\n            effectiveLiquidity: effectiveLiquidity\n        });\n\n        return returnPool;\n    }\n\n    function calcEffectiveLiquidity(\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut\n    )\n        internal pure\n        returns (uint effectiveLiquidity)\n    {\n\n        // Bo * wi/(wi+wo)\n        effectiveLiquidity = \n            tokenWeightIn.mul(BONE).div(\n                tokenWeightOut.add(tokenWeightIn)\n            ).mul(tokenBalanceOut).div(BONE);\n\n        return effectiveLiquidity;\n    }\n\n    function calcTotalOutExactIn(\n        uint[] memory bestInputAmounts,\n        Pool[] memory bestPools\n    )\n        internal pure\n        returns (uint totalOutput)\n    {\n        totalOutput = 0;\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\n            uint output = PoolInterface(bestPools[i].pool).calcOutGivenIn(\n                                bestPools[i].tokenBalanceIn,\n                                bestPools[i].tokenWeightIn,\n                                bestPools[i].tokenBalanceOut,\n                                bestPools[i].tokenWeightOut,\n                                bestInputAmounts[i],\n                                bestPools[i].swapFee\n                            );\n\n            totalOutput = totalOutput.add(output);\n        }\n        return totalOutput;\n    }\n\n    function calcTotalOutExactOut(\n        uint[] memory bestInputAmounts,\n        Pool[] memory bestPools\n    )\n        internal pure\n        returns (uint totalOutput)\n    {\n        totalOutput = 0;\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\n            uint output = PoolInterface(bestPools[i].pool).calcInGivenOut(\n                                bestPools[i].tokenBalanceIn,\n                                bestPools[i].tokenWeightIn,\n                                bestPools[i].tokenBalanceOut,\n                                bestPools[i].tokenWeightOut,\n                                bestInputAmounts[i],\n                                bestPools[i].swapFee\n                            );\n\n            totalOutput = totalOutput.add(output);\n        }\n        return totalOutput;\n    }\n\n    function transferFromAll(TokenInterface token, uint amount) internal returns(bool) {\n        if (isETH(token)) {\n            weth.deposit.value(msg.value)();\n        } else {\n            require(token.transferFrom(msg.sender, address(this), amount), \"ERR_TRANSFER_FAILED\");\n        }\n    }\n\n    function getBalance(TokenInterface token) internal view returns (uint) {\n        if (isETH(token)) {\n            return weth.balanceOf(address(this));\n        } else {\n            return token.balanceOf(address(this));\n        }\n    }\n\n    function transferAll(TokenInterface token, uint amount) internal returns(bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (isETH(token)) {\n            weth.withdraw(amount);\n            (bool xfer,) = msg.sender.call.value(amount)(\"\");\n            require(xfer, \"ERR_ETH_FAILED\");\n        } else {\n            require(token.transfer(msg.sender, amount), \"ERR_TRANSFER_FAILED\");\n        }\n    }\n\n    function isETH(TokenInterface token) internal pure returns(bool) {\n        return (address(token) == ETH_ADDRESS);\n    }\n\n    //function() external payable {}\n}\n\n\n\n//__________________________________________________________________________________________________________________________________________________\n//__________________________________________________________________________________________________________________________________________________\n//__________________________________________________________________________________________________________________________________________________\n//__________________________________________________________________________________________________________________________________________________\n//__________________________________________________________________________________________________________________________________________________\n//__________________________________________________________________________________________________________________________________________________\n// this is my bot contract\n\npragma solidity ^0.6.6;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\n\n\ncontract exchange_bot is Ownable{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    address public wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address   public  uniswapAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address   public  sushiswapAddress = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n    address   public  balancerAddress = 0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21;\n   // address   public  oxAddress = 0xDef1C0ded9bec7F1a1670819833240f027b25EfF;\n//    address   public  kyberAddress = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    address  public my_address = 0x54921D329b9619DF8ee1AeEC8a9e811A3274b190;\n  //  address public chi_address = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\n    uint  public  approve_amounts = 10**40;\n    uint public deadline = 10**40;\n    \n    IUniswapV2Router02 uniswapV2Router02_instance = IUniswapV2Router02(uniswapAddress);\n    IUniswapV2Router02 sushiswapV2Router02_instance = IUniswapV2Router02(sushiswapAddress);\n    ExchangeProxy balancer_instance = ExchangeProxy(balancerAddress);\n    TokenInterface weth_instance = TokenInterface(wethAddress);\n\n    \n   // IUniswapV2Router02 bancorAddress_instance = IUniswapV2Router02(bancorAddress);\n   // IUniswapV2Router02 ox_instance = IUniswapV2Router02(oxAddress);\n   // IUniswapV2Router02 kyber_instance = IUniswapV2Router02(kyberAddress);\n    \n    //此处还需要倒入sushi和balancer的合约代码接口，确保可以使用他们的函数\n   \n //   ChiToken ChiToken_instance = ChiToken(chi_address);\n  /**  \n    modifier discountCHI {\n       uint256 gasStart = gasleft();\n       _;\n       uint256 gasSpent = 21000 + gasStart - gasleft() + 16*msg.data.length;\n       ChiToken_instance.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n    }\n    */\n    \n    function approveForWSwap(address coinA_address, address swap_address) public onlyOwner {\n        IERC20 coinA_instance = IERC20(coinA_address);\n        coinA_instance.approve(swap_address,approve_amounts);\n    }\n    \n     function withdrawTheToken(address coinA_address, uint withdraw_amount) public onlyOwner {\n        IERC20 coinA_instance = IERC20(coinA_address);\n        coinA_instance.transfer(my_address, withdraw_amount);\n    }\n    \n    \n    function uniswap_to_uniswap(\n        uint amountIn,\n        uint amountOutMin,\n        address[] memory path) public {\n        uniswapV2Router02_instance.swapExactTokensForTokens(amountIn,amountOutMin,path,address(this),deadline);\n    }\n    \n     function sushiswap_to_sushiswap(\n        uint amountIn,\n        uint amountOutMin,\n        address[] memory path) public {\n        sushiswapV2Router02_instance.swapExactTokensForTokens(amountIn,amountOutMin,path,address(this),deadline);\n    }\n    \n     function balancer_to_balancer(\n        address In_address,\n        address Out_address,\n        uint amountIn,\n        uint amountOutMin) public {\n        TokenInterface In_instance = TokenInterface(In_address);\n        TokenInterface Out_instance = TokenInterface(Out_address);\n        balancer_instance.smartSwapExactIn(In_instance,Out_instance,amountIn,amountOutMin,1);\n    }\n    \n    //above swaps are in uniswap\n    //------------------------------------------------------------------------------------------------------------------------------------\n    //------------------------------------------------------------------------------------------------------------------------------------\n    // below swaps are from uniswap to sushi or balancer or bancor or 0x exchange\n    // marker_the_swap, uniswap = 0 , sushiswap = 1, balancer =2, bancor = 3, 0X = 4,kyber = 5\n    // exchange_for_all function may coust more gas, so if you exhcange in uniswap , please use the uniswap_to_uniswap function\n    \n    function from_uniswap_to_sushiswap (\n        address coinA_address,\n        uint amountIn,\n        uint amountOutMinOfCoinA,\n        uint amountOutMinOfWeth,\n        address[] memory path_from,\n        address[] memory path_to) public {\n            IERC20 coinA_instance = IERC20(coinA_address);\n            if(coinA_instance.allowance(address(this),sushiswapAddress) < 1){coinA_instance.approve(sushiswapAddress,approve_amounts);}\n            uniswapV2Router02_instance.swapExactTokensForTokens(amountIn,amountOutMinOfCoinA,path_from,address(this),deadline);\n            sushiswapV2Router02_instance.swapExactTokensForTokens(coinA_instance.balanceOf(address(this)),amountOutMinOfWeth,path_to,address(this),deadline);\n        }\n        \n    function from_sushiswap_to_uniswap (\n        address coinA_address,\n        uint amountIn,\n        uint amountOutMinOfCoinA,\n        uint amountOutMinOfWeth,\n        address[] memory path_from,\n        address[] memory path_to) public {\n            IERC20 coinA_instance = IERC20(coinA_address);\n            if(coinA_instance.allowance(address(this),uniswapAddress) < 1){coinA_instance.approve(uniswapAddress,approve_amounts);}\n            sushiswapV2Router02_instance.swapExactTokensForTokens(amountIn,amountOutMinOfCoinA,path_from,address(this),deadline);\n            uniswapV2Router02_instance.swapExactTokensForTokens(coinA_instance.balanceOf(address(this)),amountOutMinOfWeth,path_to,address(this),deadline);\n        }\n        \n    function from_uniswap_to_balancer (\n        address coinA_address,\n        uint amountIn,\n        uint amountOutMinOfCoinA,\n        uint amountOutMinOfWeth,\n        address[] memory path_from,\n        address[] memory path_to) public {\n            TokenInterface coinA_instance = TokenInterface(coinA_address);\n            if(coinA_instance.allowance(address(this),balancerAddress) < 1){coinA_instance.approve(balancerAddress,approve_amounts);}\n            uniswapV2Router02_instance.swapExactTokensForTokens(amountIn,amountOutMinOfCoinA,path_from,address(this),deadline);\n            balancer_instance.smartSwapExactIn(coinA_instance,weth_instance,coinA_instance.balanceOf(address(this)),amountOutMinOfWeth,1);\n        }\n\n     function from_sushiswap_to_balancer (\n        address coinA_address,\n        uint amountIn,\n        uint amountOutMinOfCoinA,\n        uint amountOutMinOfWeth,\n        address[] memory path_from,\n        address[] memory path_to) public {\n            TokenInterface coinA_instance = TokenInterface(coinA_address);\n            if(coinA_instance.allowance(address(this),balancerAddress) < 1){coinA_instance.approve(balancerAddress,approve_amounts);}\n            sushiswapV2Router02_instance.swapExactTokensForTokens(amountIn,amountOutMinOfCoinA,path_from,address(this),deadline);\n            balancer_instance.smartSwapExactIn(coinA_instance,weth_instance,coinA_instance.balanceOf(address(this)),amountOutMinOfWeth,1);\n        }\n        \n    function from_balancer_to_uniswap (\n        address coinA_address,\n        uint amountIn,\n        uint amountOutMinOfCoinA,\n        uint amountOutMinOfWeth,\n        address[] memory path_from,\n        address[] memory path_to) public {\n            TokenInterface coinA_instance = TokenInterface(coinA_address);\n            if(coinA_instance.allowance(address(this),uniswapAddress) < 1){coinA_instance.approve(uniswapAddress,approve_amounts);}\n            balancer_instance.smartSwapExactIn(weth_instance,coinA_instance,amountIn,amountOutMinOfCoinA,1);\n            uniswapV2Router02_instance.swapExactTokensForTokens(coinA_instance.balanceOf(address(this)),amountOutMinOfWeth,path_to,address(this),deadline);\n        }\n        \n    function from_balancer_to_sushiswap (\n        address coinA_address,\n        uint amountIn,\n        uint amountOutMinOfCoinA,\n        uint amountOutMinOfWeth,\n        address[] memory path_from,\n        address[] memory path_to) public {\n            TokenInterface coinA_instance = TokenInterface(coinA_address);\n            if(coinA_instance.allowance(address(this),sushiswapAddress) < 1){coinA_instance.approve(sushiswapAddress,approve_amounts);}\n            balancer_instance.smartSwapExactIn(weth_instance,coinA_instance,amountIn,amountOutMinOfCoinA,1);\n            sushiswapV2Router02_instance.swapExactTokensForTokens(coinA_instance.balanceOf(address(this)),amountOutMinOfWeth,path_to,address(this),deadline);\n        }\n        \n    \n}\n    "},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}}}