{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AaveSaverProxy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     */\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nabstract contract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4 indexed sig,\n        address indexed guy,\n        bytes32 indexed foo,\n        bytes32 indexed bar,\n        uint256 wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract DFSExchangeHelper {\n\n    string public constant ERR_OFFCHAIN_DATA_INVALID = \"Offchain data invalid\";\n\n    using SafeERC20 for ERC20;\n\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    IFeeRecipient public constant _feeRecipient = IFeeRecipient(0xB1a379f31374e80EEbF701d6a96dF5B716E2C246);\n\n    address public constant DISCOUNT_ADDRESS = 0xB942bC835eE5E2eb166f8A6A171e59D247a14C9e;\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x60B43DF7293814Ba3B09c4b8Ba1940803A2be13E;\n\n    address public constant ZRX_ALLOWLIST_ADDR = 0x204D84cF28fbdE05183a484B1382447D5771E316;\n\n\n    function getDecimals(address _token) internal view returns (uint256) {\n        if (_token == KYBER_ETH_ADDRESS) return 18;\n\n        return ERC20(_token).decimals();\n    }\n\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n            balance = address(this).balance;\n        } else {\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\n        }\n    }\n\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\n        // send back any leftover ether or tokens\n        if (address(this).balance > 0) {\n            _to.transfer(address(this).balance);\n        }\n\n        if (getBalance(_srcAddr) > 0) {\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\n        }\n\n        if (getBalance(_destAddr) > 0) {\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\n        }\n    }\n\n    /// @notice Takes a feePercentage and sends it to wallet\n    /// @param _amount Dai amount of the whole trade\n    /// @param _user Address of the user\n    /// @param _token Address of the token\n    /// @param _dfsFeeDivider Dfs fee divider\n    /// @return feeAmount Amount in Dai owner earned on the fee\n    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\n        }\n\n        if (_dfsFeeDivider == 0) {\n            feeAmount = 0;\n        } else {\n            feeAmount = _amount / _dfsFeeDivider;\n\n            // fee can't go over 10% of the whole amount\n            if (feeAmount > (_amount / 10)) {\n                feeAmount = _amount / 10;\n            }\n\n            address walletAddr = _feeRecipient.getFeeAddr();\n\n            if (_token == KYBER_ETH_ADDRESS) {\n                payable(walletAddr).transfer(feeAmount);\n            } else {\n                ERC20(_token).safeTransfer(walletAddr, feeAmount);\n            }\n        }\n    }\n\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n        require(bs.length >= start + 32, \"slicing out of range\");\n\n        uint256 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n\n        return x;\n    }\n\n        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\n        if (_b.length < _index + 32) {\n            revert(ERR_OFFCHAIN_DATA_INVALID);\n        }\n\n        bytes32 input = bytes32(_input);\n\n        _index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(_b, _index), input)\n        }\n    }\n\n    /// @notice Converts Kybers Eth address -> Weth\n    /// @param _src Input address\n    function ethToWethAddr(address _src) internal pure returns (address) {\n        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\n    }\n}\n\ninterface ExchangeInterfaceV3 {\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\n\n    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\n\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n}\n\nabstract contract TokenInterface {\n\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    \n    function allowance(address, address) public virtual returns (uint256);\n\n    function balanceOf(address) public virtual returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(address, address, uint256) public virtual returns (bool);\n\n    function deposit() public virtual payable;\n\n    function withdraw(uint256) public virtual;\n}\n\n/************\n@title IPriceOracleGetterAave interface\n@notice Interface for the Aave price oracle.*/\nabstract contract IPriceOracleGetterAave {\n    function getAssetPrice(address _asset) external virtual view returns (uint256);\n    function getAssetsPrices(address[] calldata _assets) external virtual view returns(uint256[] memory);\n    function getSourceOfAsset(address _asset) external virtual view returns(address);\n    function getFallbackOracle() external virtual view returns(address);\n}\n\n/**\n@title ILendingPoolAddressesProvider interface\n@notice provides the interface to fetch the LendingPoolCore address\n */\nabstract contract ILendingPoolAddressesProvider {\n\n    function getLendingPool() public virtual view returns (address);\n    function getLendingPoolCore() public virtual view returns (address payable);\n    function getLendingPoolConfigurator() public virtual view returns (address);\n    function getLendingPoolDataProvider() public virtual view returns (address);\n    function getLendingPoolParametersProvider() public virtual view returns (address);\n    function getTokenDistributor() public virtual view returns (address);\n    function getFeeProvider() public virtual view returns (address);\n    function getLendingPoolLiquidationManager() public virtual view returns (address);\n    function getLendingPoolManager() public virtual view returns (address);\n    function getPriceOracle() public virtual view returns (address);\n    function getLendingRateOracle() public virtual view returns (address);\n}\n\nabstract contract IFeeRecipient {\n    function getFeeAddr() public view virtual returns (address);\n    function changeWalletAddr(address _newWallet) public virtual;\n}\n\ncontract Discount {\n    address public owner;\n    mapping(address => CustomServiceFee) public serviceFees;\n\n    uint256 constant MAX_SERVICE_FEE = 400;\n\n    struct CustomServiceFee {\n        bool active;\n        uint256 amount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint256) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint256 _fee) public {\n        require(msg.sender == owner, \"Only owner\");\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n    }\n\n    function disableServiceFee(address _user) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n    }\n}\n\nabstract contract GasTokenInterface is ERC20 {\n    function free(uint256 value) public virtual returns (bool success);\n\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\n\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\n\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\n}\n\ncontract GasBurner {\n    // solhint-disable-next-line const-name-snakecase\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n\n    modifier burnGas(uint _amount) {\n        if (gasToken.balanceOf(address(this)) >= _amount) {\n            gasToken.free(_amount);\n        }\n\n        _;\n    }\n}\n\ncontract ElixyrsaverLogger {\n    event LogEvent(\n        address indexed contractAddress,\n        address indexed caller,\n        string indexed logName,\n        bytes data\n    );\n\n    // solhint-disable-next-line func-name-mixedcase\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n        public\n    {\n        emit LogEvent(_contract, _caller, _logName, _data);\n    }\n}\n\nabstract contract IAToken {\n    function redeem(uint256 _amount) external virtual;\n    function balanceOf(address _owner) external virtual view returns (uint256 balance);\n}\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\nabstract contract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache; // global cache for contracts\n\n    constructor(address _cacheAddr) public {\n        require(setCache(_cacheAddr));\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    // use the proxy to execute calldata _data on contract _code\n    // function execute(bytes memory _code, bytes memory _data)\n    //     public\n    //     payable\n    //     virtual\n    //     returns (address target, bytes32 response);\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (bytes32 response);\n\n    //set new cache\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\n}\n\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n                case 1 {\n                    // throw if contract failed to deploy\n                    revert(0, 0)\n                }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract AdminAuth {\n\n    using SafeERC20 for ERC20;\n\n    address public owner;\n    address public admin;\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(admin == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        admin = 0xac04A6f65491Df9634f6c5d640Bcc7EfFdbea326;\n    }\n\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n    /// @param _admin Address of multisig that becomes admin\n    function setAdminByOwner(address _admin) public {\n        require(msg.sender == owner);\n        require(admin == address(0));\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function setAdminByAdmin(address _admin) public {\n        require(msg.sender == admin);\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function setOwnerByAdmin(address _owner) public {\n        require(msg.sender == admin);\n\n        owner = _owner;\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyOwner {\n        selfdestruct(payable(owner));\n    }\n\n    /// @notice  withdraw stuck funds\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(owner).transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(owner, _amount);\n        }\n    }\n}\n\ncontract BotRegistry is AdminAuth {\n\n    mapping (address => bool) public botList;\n\n    constructor() public {\n        botList[0xac04A6f65491Df9634f6c5d640Bcc7EfFdbea326] = true;\n    }\n\n    function setBot(address _botAddr, bool _state) public onlyOwner {\n        botList[_botAddr] = _state;\n    }\n\n}\n\ncontract AaveHelper is DSMath {\n\n    using SafeERC20 for ERC20;\n\n    IFeeRecipient public constant feeRecipient = IFeeRecipient(0xB1a379f31374e80EEbF701d6a96dF5B716E2C246);\n\n    address public constant DISCOUNT_ADDR = 0xB942bC835eE5E2eb166f8A6A171e59D247a14C9e;\n\n    uint public constant MANUAL_SERVICE_FEE = 400; // 0.25% Fee\n    uint public constant AUTOMATIC_SERVICE_FEE = 333; // 0.3% Fee\n\n    address public constant BOT_REGISTRY_ADDRESS = 0x088d1fFfb9e106B7aE0dB4fC6d1877D5c1aE2276;\n\n\taddress public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant AAVE_LENDING_POOL_ADDRESSES = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\n    uint public constant NINETY_NINE_PERCENT_WEI = 990000000000000000;\n    uint16 public constant AAVE_REFERRAL_CODE = 0;\n\n    /// @param _collateralAddress underlying token address\n    /// @param _user users address\n\tfunction getMaxCollateral(address _collateralAddress, address _user) public view returns (uint256) {\n        address lendingPoolAddressDataProvider = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolDataProvider();\n        address lendingPoolCoreAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolCore();\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\n\n        uint256 pow10 = 10 ** (18 - _getDecimals(_collateralAddress));\n\n        // fetch all needed data\n        (,uint256 totalCollateralETH, uint256 totalBorrowsETH,,uint256 currentLTV,,,) = ILendingPool(lendingPoolAddressDataProvider).calculateUserGlobalData(_user);\n        (,uint256 tokenLTV,,) = ILendingPool(lendingPoolCoreAddress).getReserveConfiguration(_collateralAddress);\n        uint256 collateralPrice = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_collateralAddress);\n        uint256 userTokenBalance = ILendingPool(lendingPoolCoreAddress).getUserUnderlyingAssetBalance(_collateralAddress, _user);\n        uint256 userTokenBalanceEth = wmul(userTokenBalance * pow10, collateralPrice);\n\n\t\t// if borrow is 0, return whole user balance\n        if (totalBorrowsETH == 0) {\n        \treturn userTokenBalance;\n        }\n\n        uint256 maxCollateralEth = div(sub(mul(currentLTV, totalCollateralETH), mul(totalBorrowsETH, 100)), currentLTV);\n\t\t/// @dev final amount can't be higher than users token balance\n        maxCollateralEth = maxCollateralEth > userTokenBalanceEth ? userTokenBalanceEth : maxCollateralEth;\n\n        // might happen due to wmul precision\n        if (maxCollateralEth >= totalCollateralETH) {\n        \treturn wdiv(totalCollateralETH, collateralPrice) / pow10;\n        }\n\n        // get sum of all other reserves multiplied with their liquidation thresholds by reversing formula\n        uint256 a = sub(wmul(currentLTV, totalCollateralETH), wmul(tokenLTV, userTokenBalanceEth));\n        // add new collateral amount multiplied by its threshold, and then divide with new total collateral\n        uint256 newLiquidationThreshold = wdiv(add(a, wmul(sub(userTokenBalanceEth, maxCollateralEth), tokenLTV)), sub(totalCollateralETH, maxCollateralEth));\n\n        // if new threshold is lower than first one, calculate new max collateral with newLiquidationThreshold\n        if (newLiquidationThreshold < currentLTV) {\n        \tmaxCollateralEth = div(sub(mul(newLiquidationThreshold, totalCollateralETH), mul(totalBorrowsETH, 100)), newLiquidationThreshold);\n        \tmaxCollateralEth = maxCollateralEth > userTokenBalanceEth ? userTokenBalanceEth : maxCollateralEth;\n        }\n\n\t\treturn wmul(wdiv(maxCollateralEth, collateralPrice) / pow10, NINETY_NINE_PERCENT_WEI);\n\t}\n\n\t/// @param _borrowAddress underlying token address\n\t/// @param _user users address\n\tfunction getMaxBorrow(address _borrowAddress, address _user) public view returns (uint256) {\n\t\taddress lendingPoolAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPool();\n\t\taddress priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\n\n\t\t(,,,,uint256 availableBorrowsETH,,,) = ILendingPool(lendingPoolAddress).getUserAccountData(_user);\n\n\t\tuint256 borrowPrice = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_borrowAddress);\n\n\t\treturn wmul(wdiv(availableBorrowsETH, borrowPrice) / (10 ** (18 - _getDecimals(_borrowAddress))), NINETY_NINE_PERCENT_WEI);\n\t}\n\n    function getMaxBoost(address _borrowAddress, address _collateralAddress, address _user) public view returns (uint256) {\n        address lendingPoolAddressDataProvider = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolDataProvider();\n        address lendingPoolCoreAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolCore();\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\n\n        (,uint256 totalCollateralETH, uint256 totalBorrowsETH,,uint256 currentLTV,,,) = ILendingPool(lendingPoolAddressDataProvider).calculateUserGlobalData(_user);\n        (,uint256 tokenLTV,,) = ILendingPool(lendingPoolCoreAddress).getReserveConfiguration(_collateralAddress);\n        totalCollateralETH = div(mul(totalCollateralETH, currentLTV), 100);\n\n        uint256 availableBorrowsETH = wmul(mul(div(sub(totalCollateralETH, totalBorrowsETH), sub(100, tokenLTV)), 100), NINETY_NINE_PERCENT_WEI);\n        uint256 borrowPrice = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_borrowAddress);\n\n        return wdiv(availableBorrowsETH, borrowPrice) / (10 ** (18 - _getDecimals(_borrowAddress)));\n    }\n\n    /// @notice Calculates the fee amount\n    /// @param _amount Amount that is converted\n    /// @param _user Actuall user addr not DSProxy\n    /// @param _gasCost Ether amount of gas we are spending for tx\n    /// @param _tokenAddr token addr. of token we are getting for the fee\n    /// @return feeAmount The amount we took for the fee\n    function getFee(uint _amount, address _user, uint _gasCost, address _tokenAddr) internal returns (uint feeAmount) {\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\n\n        uint fee = MANUAL_SERVICE_FEE;\n\n        if (BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin)) {\n            fee = AUTOMATIC_SERVICE_FEE;\n        }\n\n        if (Discount(DISCOUNT_ADDR).isCustomFeeSet(_user)) {\n            fee = Discount(DISCOUNT_ADDR).getCustomServiceFee(_user);\n        }\n\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\n\n        if (_gasCost != 0) {\n            uint256 price = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr);\n\n            _gasCost = wdiv(_gasCost, price) / (10 ** (18 - _getDecimals(_tokenAddr)));\n\n            feeAmount = add(feeAmount, _gasCost);\n        }\n\n        // fee can't go over 20% of the whole amount\n        if (feeAmount > (_amount / 5)) {\n            feeAmount = _amount / 5;\n        }\n\n        address walletAddr = feeRecipient.getFeeAddr();\n\n        if (_tokenAddr == ETH_ADDR) {\n            payable(walletAddr).transfer(feeAmount);\n        } else {\n            ERC20(_tokenAddr).safeTransfer(walletAddr, feeAmount);\n        }\n    }\n\n    /// @notice Calculates the gas cost for transaction\n    /// @param _amount Amount that is converted\n    /// @param _user Actuall user addr not DSProxy\n    /// @param _gasCost Ether amount of gas we are spending for tx\n    /// @param _tokenAddr token addr. of token we are getting for the fee\n    /// @return gasCost The amount we took for the gas cost\n    function getGasCost(uint _amount, address _user, uint _gasCost, address _tokenAddr) internal returns (uint gasCost) {\n\n        if (_gasCost == 0) return 0;\n\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\n        uint256 price = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr);\n\n        _gasCost = wmul(_gasCost, price);\n        gasCost = _gasCost;\n\n        // fee can't go over 20% of the whole amount\n        if (gasCost > (_amount / 5)) {\n            gasCost = _amount / 5;\n        }\n\n        address walletAddr = feeRecipient.getFeeAddr();\n\n        if (_tokenAddr == ETH_ADDR) {\n            payable(walletAddr).transfer(gasCost);\n        } else {\n            ERC20(_tokenAddr).safeTransfer(walletAddr, gasCost);\n        }\n    }\n\n\n    /// @notice Returns the owner of the DSProxy that called the contract\n    function getUserAddress() internal view returns (address) {\n        DSProxy proxy = DSProxy(payable(address(this)));\n\n        return proxy.owner();\n    }\n\n    /// @notice Approves token contract to pull underlying tokens from the DSProxy\n    /// @param _tokenAddr Token we are trying to approve\n    /// @param _caller Address which will gain the approval\n    function approveToken(address _tokenAddr, address _caller) internal {\n        if (_tokenAddr != ETH_ADDR) {\n            ERC20(_tokenAddr).safeApprove(_caller, uint256(-1));\n        }\n    }\n\n    /// @notice Send specific amount from contract to specific user\n    /// @param _token Token we are trying to send\n    /// @param _user User that should receive funds\n    /// @param _amount Amount that should be sent\n    function sendContractBalance(address _token, address _user, uint _amount) public {\n        if (_amount == 0) return;\n\n        if (_token == ETH_ADDR) {\n            payable(_user).transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(_user, _amount);\n        }\n    }\n\n    function sendFullContractBalance(address _token, address _user) public {\n        if (_token == ETH_ADDR) {\n            sendContractBalance(_token, _user, address(this).balance);\n        } else {\n            sendContractBalance(_token, _user, ERC20(_token).balanceOf(address(this)));\n        }\n    }\n\n    function _getDecimals(address _token) internal view returns (uint256) {\n        if (_token == ETH_ADDR) return 18;\n\n        return ERC20(_token).decimals();\n    }\n\n    function isAutomation() internal view returns(bool) {\n        return BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin);\n    }\n}\n\ncontract ZrxAllowlist is AdminAuth {\n\n    mapping (address => bool) public zrxAllowlist;\n    mapping(address => bool) private nonPayableAddrs;\n\n    constructor() public {\n\n    }\n\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n        zrxAllowlist[_zrxAddr] = _state;\n    }\n\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n        return zrxAllowlist[_zrxAddr];\n    }\n\n    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n\t\tnonPayableAddrs[_nonPayableAddr] = true;\n\t}\n\n\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n\t\tnonPayableAddrs[_nonPayableAddr] = false;\n\t}\n\n\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\n\t\treturn nonPayableAddrs[_addr];\n\t}\n}\n\ncontract DFSExchangeData {\n\n    // first is empty to keep the legacy order in place\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\n\n    enum ActionType { SELL, BUY }\n\n    struct OffchainData {\n        address wrapper;\n        address exchangeAddr;\n        address allowanceTarget;\n        uint256 price;\n        uint256 protocolFee;\n        bytes callData;\n    }\n\n    struct ExchangeData {\n        address srcAddr;\n        address destAddr;\n        uint256 srcAmount;\n        uint256 destAmount;\n        uint256 minPrice;\n        uint256 dfsFeeDivider; // service fee divider\n        address user; // user to check special fee\n        address wrapper;\n        bytes wrapperData;\n        OffchainData offchainData;\n    }\n\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\n        return abi.encode(_exData);\n    }\n\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\n        _exData = abi.decode(_data, (ExchangeData));\n    }\n}\n\ncontract SaverExchangeRegistry is AdminAuth {\n\n\tmapping(address => bool) private wrappers;\n\n\tconstructor() public {\n\t\twrappers[0xDf34fd59A95435459a0E6C91da1e365921F8b745] = true;\n\t}\n\n\tfunction addWrapper(address _wrapper) public onlyOwner {\n\t\twrappers[_wrapper] = true;\n\t}\n\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\n\t\twrappers[_wrapper] = false;\n\t}\n\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\n\t\treturn wrappers[_wrapper];\n\t}\n}\n\nabstract contract OffchainWrapperInterface is DFSExchangeData {\n    function takeOrder(\n        ExchangeData memory _exData,\n        ActionType _type\n    ) virtual public payable returns (bool success, uint256);\n}\n\ncontract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\n\n    string public constant ERR_SLIPPAGE_HIT = \"Slippage hit\";\n    string public constant ERR_DEST_AMOUNT_MISSING = \"Dest amount missing\";\n    string public constant ERR_WRAPPER_INVALID = \"Wrapper invalid\";\n    string public constant ERR_NOT_ZEROX_EXCHANGE = \"Zerox exchange invalid\";\n\n    /// @notice Internal method that preforms a sell on 0x/on-chain\n    /// @dev Usefull for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    /// @return (address, uint) Address of the wrapper used and destAmount\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\n\n        address wrapper;\n        uint swapedTokens;\n        bool success;\n\n        // if selling eth, convert to weth\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\n        }\n\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\n\n        // Try 0x first and then fallback on specific wrapper\n        if (exData.offchainData.price > 0) {\n            (success, swapedTokens) = takeOrder(exData, ActionType.SELL);\n\n            if (success) {\n                wrapper = exData.offchainData.exchangeAddr;\n            }\n        }\n\n        // fallback to desired wrapper if 0x failed\n        if (!success) {\n            swapedTokens = saverSwap(exData, ActionType.SELL);\n            wrapper = exData.wrapper;\n        }\n\n        // if anything is left in weth, pull it to user as eth\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\n            );\n        }\n\n        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\n            require(getBalance(KYBER_ETH_ADDRESS) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n        } else {\n            require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n        }\n\n        return (wrapper, swapedTokens);\n    }\n\n    /// @notice Internal method that preforms a buy on 0x/on-chain\n    /// @dev Usefull for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    /// @return (address, uint) Address of the wrapper used and srcAmount\n    function _buy(ExchangeData memory exData) internal returns (address, uint) {\n\n        address wrapper;\n        uint swapedTokens;\n        bool success;\n\n        require(exData.destAmount != 0, ERR_DEST_AMOUNT_MISSING);\n\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\n\n        // if selling eth, convert to weth\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\n        }\n\n        if (exData.offchainData.price > 0) {\n            (success, swapedTokens) = takeOrder(exData, ActionType.BUY);\n\n            if (success) {\n                wrapper = exData.offchainData.exchangeAddr;\n            }\n        }\n\n        // fallback to desired wrapper if 0x failed\n        if (!success) {\n            swapedTokens = saverSwap(exData, ActionType.BUY);\n            wrapper = exData.wrapper;\n        }\n\n        // if anything is left in weth, pull it to user as eth\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\n            );\n        }\n\n        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\n            require(getBalance(KYBER_ETH_ADDRESS) >= exData.destAmount, ERR_SLIPPAGE_HIT);\n        } else {\n            require(getBalance(exData.destAddr) >= exData.destAmount, ERR_SLIPPAGE_HIT);\n        }\n\n        return (wrapper, getBalance(exData.destAddr));\n    }\n\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\n    /// @param _exData Exchange data\n    function takeOrder(\n        ExchangeData memory _exData,\n        ActionType _type\n    ) private returns (bool success, uint256) {\n        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\n            return (false, 0);\n        }\n\n        if (!SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)) {\n            return (false, 0);\n        }\n\n        // send src amount\n        ERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n\n        return OffchainWrapperInterface(_exData.offchainData.wrapper).takeOrder{value: _exData.offchainData.protocolFee}(_exData, _type);\n    }\n\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\n    /// @param _exData Exchange data struct\n    /// @param _type Type of action SELL|BUY\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\n    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\n        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), ERR_WRAPPER_INVALID);\n\n        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n\n        if (_type == ActionType.SELL) {\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n                    sell(_exData.srcAddr, _exData.destAddr, _exData.srcAmount, _exData.wrapperData);\n        } else {\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n                    buy(_exData.srcAddr, _exData.destAddr, _exData.destAmount, _exData.wrapperData);\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external virtual payable {}\n}\n\nabstract contract ILendingPool {\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\n\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\n\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\n\tfunction swapBorrowRateMode(address _reserve) external virtual;\n    function getReserves() external virtual view returns(address[] memory);\n\n    /// @param _reserve underlying token address\n    function getReserveData(address _reserve)\n        external virtual\n        view\n        returns (\n            uint256 totalLiquidity,               // reserve total liquidity\n            uint256 availableLiquidity,           // reserve available liquidity for borrowing\n            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\n            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\n            uint256 liquidityRate,                // current deposit APY of the reserve for depositors, in Ray units.\n            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\n            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\n            uint256 averageStableBorrowRate,      // current average stable borrow rate\n            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\n            uint256 liquidityIndex,               // cumulative liquidity index\n            uint256 variableBorrowIndex,          // cumulative variable borrow index\n            address aTokenAddress,                // aTokens contract address for the specific _reserve\n            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\n        );\n\n    /// @param _user users address\n    function getUserAccountData(address _user)\n        external virtual\n        view\n        returns (\n            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\n            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\n            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\n            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\n            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\n            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\n            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\n            uint256 healthFactor                  // user current Health Factor\n    );\n\n    /// @param _reserve underlying token address\n    /// @param _user users address\n    function getUserReserveData(address _reserve, address _user)\n        external virtual\n        view\n        returns (\n            uint256 currentATokenBalance,         // user current reserve aToken balance\n            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\n            uint256 principalBorrowBalance,       // user balance of borrowed asset\n            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\n            uint256 borrowRate,                   // user current borrow rate APY\n            uint256 liquidityRate,                // user current earn rate on _reserve\n            uint256 originationFee,               // user outstanding loan origination fee\n            uint256 variableBorrowIndex,          // user variable cumulative index\n            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\n            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\n    );\n\n    function getReserveConfigurationData(address _reserve)\n        external virtual\n        view\n        returns (\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            address rateStrategyAddress,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive\n    );\n\n    // ------------------ LendingPoolCoreData ------------------------\n    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\n    function getReserveConfiguration(address _reserve)\n        external virtual\n        view\n        returns (uint256, uint256, uint256, bool);\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\n        public virtual\n        view\n        returns (uint256);\n\n    function getReserveCurrentLiquidityRate(address _reserve)\n        public virtual\n        view\n        returns (uint256);\n    function getReserveCurrentVariableBorrowRate(address _reserve)\n        public virtual\n        view\n        returns (uint256);\n    function getReserveCurrentStableBorrowRate(address _reserve)\n        public virtual\n        view\n        returns (uint256);\n    function getReserveTotalLiquidity(address _reserve)\n        public virtual\n        view\n        returns (uint256);\n    function getReserveAvailableLiquidity(address _reserve)\n        public virtual\n        view\n        returns (uint256);\n    function getReserveTotalBorrowsVariable(address _reserve)\n        public virtual\n        view\n        returns (uint256);\n    function getReserveTotalBorrowsStable(address _reserve)\n        public virtual\n        view\n        returns (uint256);\n\n    // ---------------- LendingPoolDataProvider ---------------------\n    function calculateUserGlobalData(address _user)\n        public virtual\n        view\n        returns (\n            uint256 totalLiquidityBalanceETH,\n            uint256 totalCollateralBalanceETH,\n            uint256 totalBorrowBalanceETH,\n            uint256 totalFeesETH,\n            uint256 currentLtv,\n            uint256 currentLiquidationThreshold,\n            uint256 healthFactor,\n            bool healthFactorBelowThreshold\n        );\n}\n\ncontract AaveSaverProxy is GasBurner, DFSExchangeCore, AaveHelper {\n\n\taddress public constant ElixyrsaverLoggerAddr = 0x4a35CcB1cB7F8388CE640128aE4a744dff42226e;\n\n    uint public constant VARIABLE_RATE = 2;\n\n\tfunction repay(ExchangeData memory _data, uint _gasCost) public payable burnGas(20) {\n\n\t\taddress lendingPoolCore = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolCore();\n\t\taddress lendingPool = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPool();\n\t\taddress payable user = payable(getUserAddress());\n\n\t\t// redeem collateral\n\t\taddress aTokenCollateral = ILendingPool(lendingPoolCore).getReserveATokenAddress(_data.srcAddr);\n\t\t// uint256 maxCollateral = IAToken(aTokenCollateral).balanceOf(address(this));\n\t\t// don't swap more than maxCollateral\n\t\t// _data.srcAmount = _data.srcAmount > maxCollateral ? maxCollateral : _data.srcAmount;\n\t\tIAToken(aTokenCollateral).redeem(_data.srcAmount);\n\n\t\tuint256 destAmount = _data.srcAmount;\n\t\tif (_data.srcAddr != _data.destAddr) {\n            _data.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\n            _data.user = user;\n\t\t\t// swap\n\t\t\t(, destAmount) = _sell(_data);\n\t\t\tdestAmount -= getGasCost(destAmount, user, _gasCost, _data.destAddr);\n\t\t} else {\n\t\t\tdestAmount -= getGasCost(destAmount, user, _gasCost, _data.destAddr);\n\t\t}\n\n\t\t// payback\n\t\tif (_data.destAddr == ETH_ADDR) {\n\t\t\tILendingPool(lendingPool).repay{value: destAmount}(_data.destAddr, destAmount, payable(address(this)));\n\t\t} else {\n\t\t\tapproveToken(_data.destAddr, lendingPoolCore);\n\t\t\tILendingPool(lendingPool).repay(_data.destAddr, destAmount, payable(address(this)));\n\t\t}\n\n\t\t// first return 0x fee to msg.sender as it is the address that actually sent 0x fee\n\t\tsendContractBalance(ETH_ADDR, tx.origin, min(address(this).balance, msg.value));\n\t\t// send all leftovers from dest addr to proxy owner\n\t\tsendFullContractBalance(_data.destAddr, user);\n\n\t\tElixyrsaverLogger(ElixyrsaverLoggerAddr).Log(address(this), msg.sender, \"AaveRepay\", abi.encode(_data.srcAddr, _data.destAddr, _data.srcAmount, destAmount));\n\t}\n\n\tfunction boost(ExchangeData memory _data, uint _gasCost) public payable burnGas(20) {\n\t\taddress lendingPoolCore = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolCore();\n\t\taddress lendingPool = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPool();\n\t\t(,,,uint256 borrowRateMode,,,,,,bool collateralEnabled) = ILendingPool(lendingPool).getUserReserveData(_data.destAddr, address(this));\n\t\taddress payable user = payable(getUserAddress());\n\n\t\t// skipping this check as its too expensive\n\t\t// uint256 maxBorrow = getMaxBoost(_data.srcAddr, _data.destAddr, address(this));\n\t\t// _data.srcAmount = _data.srcAmount > maxBorrow ? maxBorrow : _data.srcAmount;\n\n\t\t// borrow amount\n\t\tILendingPool(lendingPool).borrow(_data.srcAddr, _data.srcAmount, borrowRateMode == 0 ? VARIABLE_RATE : borrowRateMode, AAVE_REFERRAL_CODE);\n\n\t\tuint256 destAmount;\n\t\tif (_data.destAddr != _data.srcAddr) {\n            _data.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\n            _data.user = user;\n\n\t\t\t// swap\n\t\t\t(, destAmount) = _sell(_data);\n            destAmount -= getGasCost(_data.destAmount, user, _gasCost, _data.destAddr);\n\n\t\t} else {\n\t\t\tdestAmount = _data.srcAmount;\n            destAmount -= getGasCost(_data.destAmount, user, _gasCost, _data.destAddr);\n\n\t\t}\n\n\t\tif (_data.destAddr == ETH_ADDR) {\n\t\t\tILendingPool(lendingPool).deposit{value: destAmount}(_data.destAddr, destAmount, AAVE_REFERRAL_CODE);\n\t\t} else {\n\t\t\tapproveToken(_data.destAddr, lendingPoolCore);\n\t\t\tILendingPool(lendingPool).deposit(_data.destAddr, destAmount, AAVE_REFERRAL_CODE);\n\t\t}\n\n\t\tif (!collateralEnabled) {\n            ILendingPool(lendingPool).setUserUseReserveAsCollateral(_data.destAddr, true);\n        }\n\n\t\t// returning to msg.sender as it is the address that actually sent 0x fee\n\t\tsendContractBalance(ETH_ADDR, tx.origin, min(address(this).balance, msg.value));\n\t\t// send all leftovers from dest addr to proxy owner\n\t\tsendFullContractBalance(_data.destAddr, user);\n\n\t\tElixyrsaverLogger(ElixyrsaverLoggerAddr).Log(address(this), msg.sender, \"AaveBoost\", abi.encode(_data.srcAddr, _data.destAddr, _data.srcAmount, destAmount));\n\t}\n}\n"}}}