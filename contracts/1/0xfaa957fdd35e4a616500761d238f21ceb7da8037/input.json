{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/sale.sol":{"content":"/**\r\n *Submitted for verification at Etherscan.io on 2020-10-11\r\n*/\r\n\r\n//SPDX-License-Identifier: UNLICENSED \r\npragma solidity ^0.7.0;\r\n \r\ninterface ERC20 {\r\n \r\n \r\n  function balanceOf(address _owner) external returns (uint256);\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n  function allowance(address _owner, address _spender) external returns (uint256);\r\n \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n \r\n}\r\n \r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\ncontract Presale  {\r\n  using SafeMath for uint256;\r\n  \r\n  receive() payable external{\r\n      buyTokens(msg.sender);\r\n  }\r\n \r\n  address public owner;\r\n \r\n  // The token being sold\r\n  ERC20 public token;\r\n \r\n  // the token address\r\n  address payable  public  tokenAddress = 0x44C76Fcc952183817436A4A8694ED78b733819A0;\r\n \r\n \r\n  // address where funds are collected\r\n  address payable  public  wallet = msg.sender;\r\n \r\n  uint256 public tokensSold;\r\n \r\n  uint256 public minInvestment= 0.05 * 10**18;\r\n \r\n \r\n  // cap (tokens to sell max)\r\n \r\n  uint256 public cap =  100_000 * 10**18; \r\n \r\n  // tokens per ether\r\n  uint256 public rate = 10;\r\n\r\n  bool public isFinalized = false;\r\n  \r\n  // Start timestamp\r\n  uint256 public salesStartTimeStamp = 1641872565; // 8 PM UTC\r\n \r\n \r\n  bool paused;\r\n \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n \r\n  /**\r\n   * event for signaling finished crowdsale\r\n   */\r\n  event Finalized();\r\n \r\n \r\n \r\n \r\n  constructor()  {\r\n \r\n    require(wallet != address(0));\r\n    require(minInvestment >= 0);\r\n    token= ERC20(tokenAddress);\r\n  }\r\n \r\n modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n/**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    return true;\r\n  }\r\n \r\n \r\n \r\n  /**\r\n   * Low level token purchse function\r\n   * @param beneficiary will recieve the tokens.\r\n   */\r\n  function buyTokens(address beneficiary) public payable whenNotPaused {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n \r\n \r\n    uint256 weiAmount = msg.value;\r\n    // compute amount of tokens created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n \r\n    // check if there are enough tokens left \r\n    require(tokensSold.add(tokens)<=cap,\"Not enough tokens left\");\r\n \r\n    // add tokens to amount sold\r\n    tokensSold=tokensSold.add(tokens);\r\n \r\n    // tokens are previously minted , send them to buyer\r\n    token.transfer(beneficiary, tokens);\r\n \r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n \r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n \r\n  // return true if the transaction can buy tokens\r\n  function validPurchase() internal returns (bool) {\r\n \r\n    bool notSmallAmount = msg.value >= minInvestment;\r\n    bool salesActive = ( block.timestamp >= salesStartTimeStamp);\r\n    return (notSmallAmount && salesActive && !isFinalized);\r\n  }\r\n \r\n  //allow owner to finalize and withdraw leftoverTokens\r\n  function finalize() public onlyOwner {\r\n    require(!isFinalized);\r\n \r\n    emit Finalized();\r\n \r\n    uint256 leftoverTokens = token.balanceOf(address(this));\r\n    token.transfer(address(this),leftoverTokens);\r\n \r\n    isFinalized = true;\r\n  }\r\n}"}}}