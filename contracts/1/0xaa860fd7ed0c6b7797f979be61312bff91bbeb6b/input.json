{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"B26_FarmingTokensLocked.sol":{"content":"pragma solidity >=0.7.0;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner ;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ncontract B26_FarmingTokensLocked is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    event Transferred(address holder, uint amount);\r\n    // B26 token contract address\r\n    address public constant tokenAddress = 0x481dE76d5ab31e28A33B0EA1c1063aDCb5B1769A;\r\n    \r\n    uint256 tokens = 0;\r\n    uint256 relaseTime = 60 days;\r\n    uint256 timing ;\r\n    \r\n\r\n    function getTiming()  public view returns (uint256){\r\n        return block.timestamp.sub(timing);\r\n    }\r\n    \r\n    function deposit(uint amountToStake) public onlyOwner{\r\n        require( tokens == 0, \"Cannot deposit more Tokens\");\r\n        require( amountToStake > 0, \"Cannot deposit  Tokens\");\r\n        require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), \"Insufficient Token Allowance\");\r\n        tokens = amountToStake;\r\n        timing = block.timestamp;\r\n    }\r\n    \r\n    function withdraw() public onlyOwner{\r\n        require( tokens>0, \"Deposit first\");\r\n        require(block.timestamp.sub(timing)>relaseTime, \"Not yet\"); // 60 days locked\r\n        \r\n        require(Token(tokenAddress).transfer(owner, tokens), \"Could not transfer tokens.\");\r\n        \r\n        tokens = tokens.sub(tokens);\r\n        emit Transferred(owner, tokens);\r\n        }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    }"}}}