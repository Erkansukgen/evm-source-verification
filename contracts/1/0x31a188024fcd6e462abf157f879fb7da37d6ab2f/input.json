{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"mytest/FoundingEvent.sol":{"content":"pragma solidity ^0.7.6;\n// author: SamPorter1984\ninterface I{\n\tfunction getPair(address t, address t1) external view returns(address pair);\n\tfunction createPair(address t, address t1) external returns(address pair);\n\tfunction genesis(uint Eth,address pair,uint gen) external;\n\tfunction deposit() external payable;\n\tfunction transfer(address to, uint value) external returns(bool);\n\tfunction mint(address to) external returns(uint liquidity);\n//\tfunction triggerBSCLaunch() external;\n}\n\ncontract FoundingEvent {\n\tmapping(address => uint) public deposits;\n\taddress payable private _deployer;\n\tbool private _lgeOngoing;\n\taddress private _staking;\n\tbool private _notInit;\n\tuint private _hardcap;\n\tuint public genesisBlock;\n\taddress private _oracle;\n//\tbool private _emergency;\n\n\tconstructor() {_deployer = msg.sender;}\n\tfunction startLGE(uint hc) external {require(msg.sender == _deployer && hc < 5e21 && hc > 1e20);if(_hardcap != 0){require(hc<_hardcap);}_lgeOngoing = true; _hardcap = hc;}\n\tfunction defineBridge(address o) public {require(msg.sender == _deployer); _oracle = o;}\n\tfunction triggerLaunch() public {require(_lgeOngoing == true && msg.sender == _oracle);_createLiquidity();}\n//\tfunction _triggerBSCLaunch() internal { address b = _bridge; if(b != address(0)){I(_bridge).triggerBSCLaunch();} }\n//\tfunction emergency() public {require(msg.sender == _deployer);_emergency = true;}\n//\tfunction withdraw() public {uint d = deposits[msg.sender];require(_emergency == true && d > 0); address payable s = msg.sender;(s).transfer(d);}\n\n\tfunction depositEth() external payable {\n\t\trequire(_lgeOngoing == true);\n\t\tuint amount = msg.value;\n\t\tuint deployerShare = amount/100; amount -= deployerShare; _deployer.transfer(deployerShare);\n\t\tdeposits[msg.sender] += amount;\n\t\tif (address(this).balance > _hardcap) {/*_triggerBSCLaunch();*/_createLiquidity();}\n\t}\n\n\tfunction _createLiquidity() internal {\n\t\tgenesisBlock = block.number;\n\t\taddress WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\t\taddress token = 0xEd7C1848FA90E6CDA4faAC7F61752857461af284;\n\t\taddress staking = 0x93bF14C7Cf7250b09D78D4EadFD79FCA01BAd9F8;\n\t\taddress factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n\t\taddress tknETHLP = I(factory).getPair(token,WETH);\n\t\tif (tknETHLP == address(0)) {tknETHLP=I(factory).createPair(token, WETH);}\n\t\tuint ETHDeposited = address(this).balance;\n\t\tI(WETH).deposit{value: ETHDeposited}();\n\t\tI(token).transfer(tknETHLP, 1e24);\n\t\tI(WETH).transfer(tknETHLP, ETHDeposited);\n\t\tI(tknETHLP).mint(staking);\n\t\tI(staking).genesis(ETHDeposited, tknETHLP,block.number);\n\t\tdelete _staking; delete _lgeOngoing; delete _deployer; delete _hardcap; delete _oracle;\n\t}\n}"}}}