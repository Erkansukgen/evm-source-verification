{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BAETrade.sol": {
      "content": "pragma solidity ^0.7.0;\n\ninterface ERC165 {\n    function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\ninterface IERC1155 /* is ERC165 */ {\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    event URI(string _value, uint256 indexed _id);\n\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    function creators(uint256 artwork) external view returns (address);\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\ncontract BAETrade {\n  using SafeMath for uint256;\n  //using SafeERC20 for IUniswapV2Pair;\n\n\n  modifier onlyOwner {\n    assert(msg.sender == owner);\n    _;\n  }\n\n  mapping (bytes32 => uint256) public orderFills;\n  address payable public owner;\n  address payable public feeAccount;\n  address public weth;\n  address[] path = new address[](2);\n  uint256[] amounts;\n  address public baePay;\n  address public router;\n  address public baeContract;\n  uint256 public fee = 40;\n  uint256 public creatorFee = 50;\n  mapping (bytes32 => bool) public traded;\n  event Order(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\n  event Cancel(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\n  event Trade(uint256 tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, address get, address give, bytes32 hash);\n\n  constructor(address router_, address baePay_, address baeContract_, address weth_) {\n    owner = 0x486082148bc8Dc9DEe8c9E53649ea148291FF292;\n    feeAccount = 0x44e86f37792D4c454cc836b91c84D7fe8224220b;\n    weth = weth_;\n    path[0] = weth_;\n    baePay = baePay_;\n    router = router_;//0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    baeContract = baeContract_;\n    IERC20(weth).approve(router, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\n  }\n\n  modifier onlyAdmin {\n    require(msg.sender == owner, \"Not Owner\");\n    _;\n  }\n\n  receive() external payable {\n\n  }\n\n  function changeFee(uint256 _amount) public onlyAdmin{\n    fee = _amount;\n  }\n\n  function changeCreatorFee(uint256 _amount) public onlyAdmin{\n    creatorFee = _amount;\n  }\n\n  function invalidateOrder(uint256[5] memory tradeValues, address[2] memory tradeAddresses, uint8 v, bytes32[2] memory rs) public{\n    bytes32 orderHash = keccak256(abi.encodePacked(address(this), tradeAddresses[0], tradeValues[0], tradeValues[1], tradeAddresses[1], tradeValues[2], tradeValues[3], tradeValues[4]));\n    require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v, rs[0], rs[1]) == tradeAddresses[1], \"Invalid Order\");\n    orderFills[orderHash] = tradeValues[1];\n  }\n\n  function isValidOrder(uint256[5] memory tradeValues, address[2] memory tradeAddresses, uint8 v, bytes32[2] memory rs) public view returns(bool) {\n    bytes32 orderHash = keccak256(abi.encodePacked(address(this), tradeAddresses[0], tradeValues[0], tradeValues[1], tradeAddresses[1], tradeValues[2], tradeValues[3], tradeValues[4]));\n    if(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v, rs[0], rs[1]) != tradeAddresses[1]){\n      return false;\n    }\n    if(IERC1155(baeContract).balanceOf(tradeAddresses[1], tradeValues[0]) < tradeValues[1] - orderFills[orderHash]){\n      return false;\n    }\n    if(tradeValues[3] < block.timestamp){\n      return false;\n    }\n    return true;\n  }\n\n  function isValidOffer(uint256[5] memory tradeValues, address[2] memory tradeAddresses, uint8 v, bytes32[2] memory rs) public view returns(bool) {\n    bytes32 offerHash = keccak256(abi.encodePacked(address(this), tradeAddresses[0], tradeValues[0], tradeValues[1], tradeAddresses[1], tradeValues[2], tradeValues[3], tradeValues[4]));\n    if(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", offerHash)), v, rs[0], rs[1]) != tradeAddresses[1]){\n      return false;\n    }\n    if(tradeValues[3] < block.timestamp){\n      return false;\n    }\n    return true;\n  }\n\n  function buyArtwork(uint256[6] memory tradeValues, address[2] memory tradeAddresses, uint8 v, bytes32[2] memory rs) public payable returns (bool success) {\n    require(tradeValues[3] > block.timestamp, \"Expired\");\n    require(tradeAddresses[0] != address(0), \"ETH Trade\");\n    /* amount is in amountBuy terms */\n    /* tradeValues\n       [0] token\n       [1] prints\n       [2] price\n       [3] expires\n       [4] nonce\n       [5] amount\n     tradeAddressses\n       [0] tokenSell\n       [1] maker\n     */\n    bytes32 orderHash = keccak256(abi.encodePacked(address(this), tradeAddresses[0], tradeValues[0], tradeValues[1], tradeAddresses[1], tradeValues[2], tradeValues[3], tradeValues[4]));\n    require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v, rs[0], rs[1]) == tradeAddresses[1], \"Invalid Order\");\n\n    require(orderFills[orderHash].add(tradeValues[5]) <= tradeValues[1], \"Trade amount too high\");\n\n    if(tradeAddresses[0] == baePay){\n      path[1] = tradeAddresses[0];\n      amounts = IUniswapV2Router02(router).swapETHForExactTokens{value: msg.value}(tradeValues[2].mul(tradeValues[5]), path, address(this), block.timestamp + 2000);\n      IERC1155(baeContract).safeTransferFrom(tradeAddresses[1], msg.sender, tradeValues[0], tradeValues[5],\"\");\n      IERC20(tradeAddresses[0]).transfer(tradeAddresses[1], tradeValues[2].mul(tradeValues[5]));\n    }\n    else if(tradeAddresses[0] != address(0)){\n      path[1] = tradeAddresses[0];\n      amounts = IUniswapV2Router02(router).swapETHForExactTokens{value: msg.value}(tradeValues[2].mul(tradeValues[5]), path, address(this), block.timestamp + 2000);\n      IERC1155(baeContract).safeTransferFrom(tradeAddresses[1], msg.sender, tradeValues[0], tradeValues[5],\"\");\n      IERC20(tradeAddresses[0]).transfer(feeAccount, tradeValues[2].mul(tradeValues[5]).mul(10).div(1000));\n      IERC20(tradeAddresses[0]).transfer(owner, tradeValues[2].mul(tradeValues[5]).mul(fee).div(1000));\n      IERC20(tradeAddresses[0]).transfer(IERC1155(baeContract).creators(tradeValues[0]), tradeValues[2].mul(tradeValues[5]).mul(creatorFee).div(1000));\n      IERC20(tradeAddresses[0]).transfer(tradeAddresses[1], tradeValues[2].mul(tradeValues[5]).mul(1000 - fee - creatorFee - 10).div(1000));\n    }\n\n    (bool success4, ) = msg.sender.call{value: msg.value - amounts[0]}(new bytes(0));\n    require(success4, 'Could Not return Leftover ETH');\n\n    orderFills[orderHash] = orderFills[orderHash].add(tradeValues[5]);\n    emit Trade(tradeValues[0], tradeValues[5], tradeAddresses[0], tradeValues[2].mul(tradeValues[5]), msg.sender, tradeAddresses[1], orderHash);\n    return true;\n  }\n\n  function buyArtworkETH(uint256[6] memory tradeValues, address payable[2] memory tradeAddresses, uint8 v, bytes32[2] memory rs) public payable returns (bool success) {\n    require(tradeValues[3] > block.timestamp, \"Expired\");\n    require(tradeAddresses[0] == address(0), \"Not an ETH Trade\");\n    /* amount is in amountBuy terms */\n    /* tradeValues\n       [0] token\n       [1] prints\n       [2] price\n       [3] expires\n       [4] nonce\n       [5] amount\n     tradeAddressses\n       [0] tokenSell\n       [1] maker\n     */\n    bytes32 orderHash = keccak256(abi.encodePacked(address(this), tradeAddresses[0], tradeValues[0], tradeValues[1], tradeAddresses[1], tradeValues[2], tradeValues[3], tradeValues[4]));\n    require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v, rs[0], rs[1]) == tradeAddresses[1], \"Invalid Order\");\n\n    require(orderFills[orderHash].add(tradeValues[5]) <= tradeValues[1], \"Trade amount too high\");\n\n    require(msg.value >= tradeValues[2].mul(tradeValues[5]), \"Insufficent Balance\");\n    uint256 amount = (tradeValues[2].mul(tradeValues[5]) );\n    IERC1155(baeContract).safeTransferFrom(tradeAddresses[1], msg.sender, tradeValues[0], tradeValues[5],\"\");\n    feeAccount.transfer(amount.mul(10).div(1000));\n    owner.transfer(amount.mul(fee).div(1000));\n    payable(IERC1155(baeContract).creators(tradeValues[0])).transfer(amount.mul(creatorFee).div(1000));\n    tradeAddresses[1].transfer(amount.mul(1000 - fee - creatorFee - 10).div(1000));\n    msg.sender.transfer(msg.value - amount);\n\n    orderFills[orderHash] = orderFills[orderHash].add(tradeValues[5]);\n    emit Trade(tradeValues[0], tradeValues[5], tradeAddresses[0], tradeValues[2].mul(tradeValues[5]), msg.sender, tradeAddresses[1], orderHash);\n    return true;\n  }\n\n  function payWithBae(uint256[6] memory tradeValues, address[2] memory tradeAddresses, uint8 v, bytes32[2] memory rs) public payable returns (bool success) {\n    require(tradeValues[3] > block.timestamp, \"Expired\");\n    require(IERC20(baePay).balanceOf(msg.sender) >= tradeValues[2].mul(tradeValues[5]), \"You Have Insufficient Balance\");\n    require(tradeAddresses[0] == baePay, \"This Trade Does Not Accept BaePay\");\n\n    bytes32 orderHash = keccak256(abi.encodePacked(address(this), tradeAddresses[0], tradeValues[0], tradeValues[1], tradeAddresses[1], tradeValues[2], tradeValues[3], tradeValues[4]));\n    require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v, rs[0], rs[1]) == tradeAddresses[1], \"Invalid Order\");\n\n    require(orderFills[orderHash].add(tradeValues[5]) <= tradeValues[1], \"Trade amount too high\");\n\n    IERC1155(baeContract).safeTransferFrom(tradeAddresses[1], msg.sender, tradeValues[0], tradeValues[5],\"\");\n    IERC20(tradeAddresses[0]).transferFrom(msg.sender, tradeAddresses[1], tradeValues[2].mul(tradeValues[5]));\n    orderFills[orderHash] = orderFills[orderHash].add(tradeValues[5]);\n    emit Trade(tradeValues[0], tradeValues[5], tradeAddresses[0], tradeValues[2].mul(tradeValues[5]), msg.sender, tradeAddresses[1], orderHash);\n    return true;\n  }\n\n  function acceptOfferRequest(uint256[6] memory tradeValues, address[2] memory tradeAddresses, uint8 v, bytes32[2] memory rs) public payable returns (bool success) {\n    require(tradeValues[3] > block.timestamp, \"Expired\");\n    //require(tradeAddresses[0] != baePay, \"\");\n    /* amount is in amountBuy terms */\n    /* tradeValues\n       [0] token\n       [1] prints\n       [2] price\n       [3] expires\n       [4] nonce\n       [5] tradeAmount\n     tradeAddressses\n       [0] tokenSell\n       [1] maker\n     */\n     bytes32 orderHash = keccak256(abi.encodePacked(address(this), tradeAddresses[0], tradeValues[0], tradeValues[1], tradeAddresses[1], tradeValues[2], tradeValues[3], tradeValues[4], \"Offer\"));\n     require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v, rs[0], rs[1]) == tradeAddresses[1], \"Invalid Order\");\n\n     require(orderFills[orderHash].add(tradeValues[5]) <= tradeValues[1], \"Trade amount too high\");\n\n     if(tradeAddresses[0] == baePay){\n       IERC20(tradeAddresses[0]).transferFrom(tradeAddresses[1], msg.sender, tradeValues[2].mul(tradeValues[5]));\n       IERC1155(baeContract).safeTransferFrom(msg.sender, tradeAddresses[1], tradeValues[0], tradeValues[5],\"\");\n     }\n     else if(tradeAddresses[0] != address(0)){\n       IERC20(tradeAddresses[0]).transferFrom(tradeAddresses[1], address(this), tradeValues[2].mul(tradeValues[5]));\n       IERC1155(baeContract).safeTransferFrom(msg.sender, tradeAddresses[1], tradeValues[0], tradeValues[5],\"\");\n       IERC20(tradeAddresses[0]).transfer(feeAccount, tradeValues[2].mul(tradeValues[5]).mul(10).div(1000));\n       IERC20(tradeAddresses[0]).transfer(owner, tradeValues[2].mul(tradeValues[5]).mul(fee).div(1000));\n       IERC20(tradeAddresses[0]).transfer(IERC1155(baeContract).creators(tradeValues[0]), tradeValues[2].mul(tradeValues[5]).mul(creatorFee).div(1000));\n       IERC20(tradeAddresses[0]).transfer(msg.sender, tradeValues[2].mul(tradeValues[5]).mul(1000 - fee - creatorFee - 10).div(1000));\n     }\n     orderFills[orderHash] = orderFills[orderHash].add(tradeValues[5]);\n     emit Trade(tradeValues[0], tradeValues[5], tradeAddresses[0], tradeValues[2].mul(tradeValues[5]), tradeAddresses[1], msg.sender, orderHash);\n     return true;\n  }\n\n\n}\n"
    }
  }
}