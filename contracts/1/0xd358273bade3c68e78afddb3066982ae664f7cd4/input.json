{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/BzzExchange.sol": {
      "content": "pragma solidity =0.6.6;\r\n\r\n\r\ninterface IBzzExchange {\r\n\r\n    function mint(uint256 _amount, uint256 _maxCollateralSpend) external returns (bool success);\r\n\r\n    function mintTo(uint256 _amount, uint256 _maxCollateralSpend, address _to) external returns (bool success);\r\n\r\n    function redeem(uint256 _amount, uint256 _minCollateralReward) external returns (bool success);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ncontract BzzExchangeBot {\r\n\r\n    IBzzExchange public immutable bzzExchange;\r\n\r\n    IERC20 internal bzz_;\r\n    IERC20 internal dai_;\r\n\r\n    uint256 public amount;\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _address, address token_dai, address token_bzz) public {\r\n        owner = msg.sender;\r\n        bzzExchange = IBzzExchange(_address);\r\n\r\n        dai_ = IERC20(token_dai);\r\n        bzz_ = IERC20(token_bzz);\r\n\r\n        dai_.approve(address(0x4F32Ab778e85C4aD0CEad54f8f82F5Ee74d46904), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n        bzz_.approve(address(0x4F32Ab778e85C4aD0CEad54f8f82F5Ee74d46904), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n    }\r\n\r\n\r\n    receive() external payable {\r\n        amount += msg.value;\r\n    }\r\n\r\n    // 买入。注意，这里是为了引诱机器人故意反向命名的，原名为：mint\r\n    function redeem(uint256 _amount, uint256 _minCollateralReward) public onlyOwner {\r\n        bzzExchange.mintTo(_amount, _minCollateralReward, address(this));\r\n    }\r\n\r\n    // 买入。注意，为了让其他机器人反向操作，因此千万不要调用此方法\r\n    function mintTo(uint256 _amount, uint256 _maxCollateralSpend, address _to) public onlyOwner {\r\n        bzzExchange.mintTo(_amount, _maxCollateralSpend, _to);\r\n    }\r\n\r\n    // 卖出：注意，这里是为了引诱机器人故意反向命名的，原名为：redeem\r\n    function mint(uint256 _amount, uint256 _maxCollateralSpend) public onlyOwner {\r\n        bzzExchange.redeem(_amount, _maxCollateralSpend);\r\n    }\r\n\r\n\r\n    function withdrawToken(IERC20 token) public onlyOwner {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        msg.sender.transfer(amount);\r\n        amount = 0;\r\n    }\r\n}"
    }
  }
}