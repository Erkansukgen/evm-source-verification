{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Erc20.min.sol":{"content":"// https://eips.ethereum.org/EIPS/eip-20\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <=0.8.0;\n\ninterface IERC20 {\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return balance the balance\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return success Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value)  external returns (bool success);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\ncontract ERC20Token is IERC20 {\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n    uint256 public totalSupply;\n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show.\n    string public symbol;                 //An identifier: eg SBX\n\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string  memory _tokenSymbol) {\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n        totalSupply = _initialAmount;                        // Update total supply\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\n        require(balances[msg.sender] >= _value, \"token balance is lower than the value requested\");\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n        return true;\n    }\n\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n"},"Forwarder.sol":{"content":"// https://eips.ethereum.org/EIPS/eip-20\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0 <=0.8.0;\n\nimport \"./Erc20.min.sol\";\n\ncontract Forwarder {\n\n    address owner;\n    event TokensFlushed(address forwarderAddress, uint value, address tokenContractAddress);\n    event NewContract(address owner);\n\n    constructor() public {\n        owner = msg.sender;\n        emit NewContract(owner);\n    }\n\n    function flushTokens(address tokenContractAddress) external {\n        IERC20 instance = IERC20(tokenContractAddress);\n        uint256 forwarderBalance = instance.balanceOf(address(this));\n        if (forwarderBalance == 0) {\n            revert();\n        }\n\n        if (!instance.transfer(msg.sender, forwarderBalance)) {\n            revert();\n        }\n        emit TokensFlushed(address(this), forwarderBalance, tokenContractAddress);\n    }\n\n    function getData(address tokenContractAddress) public view returns (uint256) {\n        if (msg.sender != owner) return 0;\n\n        IERC20 instance = IERC20(tokenContractAddress);\n        uint256 forwarderBalance = instance.balanceOf(address(this));\n\n        return forwarderBalance;\n\n  }\n}\n"}}}