{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Crowdsale.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nabstract contract Whitelist is Ownable {\n    mapping (address => bool) private _members;\n\n    event MemberAdded(address member);\n    event MemberRemoved(address member);\n\n    function isMember(address _member) public view returns(bool) {\n        return _members[_member];\n    }\n\n    function addMember(address _member) public onlyOwner {\n        require(!isMember(_member), \"Whitelist: address is member already.\");\n        _members[_member] = true;\n        emit MemberAdded(_member);\n    }\n\n    function removeMember(address _member) public onlyOwner {\n        require(isMember(_member), \"Whitelist: Not member of whitelist.\");\n        delete _members[_member];\n        emit MemberRemoved(_member);\n    }\n}\n\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    modifier nonReentrant() {\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n        _status = _ENTERED;\n        _;\n        _status = _NOT_ENTERED;\n    }\n}\n\ninterface IDepository {\n    function deposit(address owner, uint256 amount) external;\n}\n\ncontract Crowdsale is Whitelist, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 private _token = IERC20(0xc878c93B5087887B908331Fcf8809B2C958cc5Ec); // ARK\n\n    IDepository private _depository = IDepository(0x5F1d7707c4c233059e84674CCaC35eB68AEDc57C);\n\n    uint256 private _phaseOneEndTime;\n    uint256 private _phaseTwoEndTime;\n\n    uint256 private _phaseOneRate = 10;\n    uint256 private _phaseTwoRate = 5;\n\n    mapping (IERC20 => bool) private _stableCoins;\n\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    constructor () {\n        _stableCoins[IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53)] = true; // busd\n        _stableCoins[IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)] = true; // dai\n        _stableCoins[IERC20(0x8E870D67F660D95d5be530380D0eC0bd388289E1)] = true; // pax\n        _stableCoins[IERC20(0x0000000000085d4780B73119b644AE5ecd22b376)] = true; // tusd\n        _stableCoins[IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)] = true; // usdc\n        _stableCoins[IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)] = true; // usdt\n\n        _phaseOneEndTime = block.timestamp.add(30 days);\n        _phaseTwoEndTime = _phaseOneEndTime.add(60 days);\n    }\n\n    function hasClosed() public view returns (bool) {\n        return block.timestamp > _phaseTwoEndTime;\n    }\n\n    function phaseOneEndTime() external view returns (uint256) {\n        return _phaseOneEndTime;\n    }\n\n    function phaseTwoEndTime() external view returns (uint256) {\n        return _phaseTwoEndTime;\n    }\n\n    function phaseOneRate() external view returns (uint256) {\n        return _phaseOneRate;\n    }\n\n    function phaseTwoRate() external view returns (uint256) {\n        return _phaseTwoRate;\n    }\n\n    function buyTokens(address purchaser, address beneficiary, IERC20 stableCoin, uint256 amount) external nonReentrant {\n        require(!hasClosed(), \"Crowdsale: already closed\");\n        require(_stableCoins[stableCoin], \"Crowdsale: invalid stable token\");\n        require(isMember(purchaser), \"Crowdsale: Not purchaser of whitelist.\");\n\n        stableCoin.safeTransferFrom(purchaser, address(this), amount);\n\n        if (stableCoin.decimals() < _token.decimals()) {\n            amount = amount * 10 ** uint256(_token.decimals() - stableCoin.decimals());\n        }\n\n        uint256 minimumPurchaseAmount = 100 * 10 ** uint256(_token.decimals());\n        require(amount >= minimumPurchaseAmount, \"Crowdsale: must not be less than the minimum purchase amount\");\n\n        uint256 tokens = amount.mul(_phaseOneRate);\n        if (block.timestamp > _phaseOneEndTime && block.timestamp < _phaseTwoEndTime) {\n            tokens = amount.mul(_phaseTwoRate);\n        }\n\n        _token.safeTransfer(address(_depository), tokens);\n        _depository.deposit(beneficiary, tokens);\n\n        emit TokensPurchased(_msgSender(), beneficiary, amount, tokens);\n    }\n\n    function withdraw(IERC20 stableCoin, address beneficiary) external onlyOwner {\n        stableCoin.safeTransfer(beneficiary, stableCoin.balanceOf(address(this)));\n    }\n}\n"
    }
  }
}