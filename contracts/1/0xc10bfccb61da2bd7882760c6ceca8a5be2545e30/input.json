{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BasketDAOBurn.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// Import ERC20 interface:\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// Uniswap/Sushiswap router:\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\n\n// get this from the ABI using https://bia.is/tools/abi2solidity/\ninterface IBDITokenContract {\n  function balanceOf ( address account ) external view returns ( uint256 );\n  function burn ( uint256 _amount ) external;\n  function transfer ( address recipient, uint256 amount ) external returns ( bool );\n  function transferFrom ( address sender, address recipient, uint256 amount ) external returns ( bool );\n}\n\n\n/// @dev This interfaces defines the functions of the KeeperDAO liquidity pool\n/// that our contract needs to know about. The only function we need is the\n/// borrow function, which allows us to take flash loans from the liquidity\n/// pool.\ninterface LiquidityPool {\n    /// @dev Borrow ETH/ERC20s from the liquidity pool. This function will (1)\n    /// send an amount of tokens to the `msg.sender`, (2) call\n    /// `msg.sender.call(_data)` from the KeeperDAO borrow proxy, and then (3)\n    /// check that the balance of the liquidity pool is greater than it was\n    /// before the borrow.\n    ///\n    /// @param _token The address of the ERC20 to be borrowed. ETH can be\n    /// borrowed by specifying \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\".\n    /// @param _amount The amount of the ERC20 (or ETH) to be borrowed. At least\n    /// more than this amount must be returned to the liquidity pool before the\n    /// end of the transaction, otherwise the transaction will revert.\n    /// @param _data The calldata that encodes the callback to be called on the\n    /// `msg.sender`. This is the mechanism through which the borrower is able\n    /// to implement their custom keeper logic. The callback will be called from\n    /// the KeeperDAO borrow proxy.\n    function borrow(\n        address _token,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n}\n\n\n\n/// @dev \ncontract BasketDAOBuyAndBurn {\n    using SafeERC20 for IERC20;\n    \n    /// @dev Owner of the contract.\n    address public owner;\n    \n    /// @dev Address of the KeeperDAO borrow proxy. This will be the\n    /// `msg.sender` for calls to the `helloCallback` function.\n    address public borrowProxy;\n\n    /// @dev Address of the KeeperDAO liquidity pool. This is will be the\n    /// address to which the `helloCallback` function must return all bororwed\n    /// assets (and all excess profits).\n    address payable public liquidityPool;\n    \n    /// @dev This modifier restricts the caller of a function to the owner of\n    /// this contract.\n    modifier onlyOwner {\n        if (msg.sender == owner) {\n            _;\n        }\n    }\n    \n    /// @dev This modifier restricts the caller of a function to the KeeperDAO\n    /// borrow proxy.\n    modifier onlyBorrowProxy {\n        if (msg.sender == borrowProxy) {\n            _;\n        }\n    }\n\n    constructor() public payable {\n        owner = msg.sender;\n        \n        // Approve the Uniswap/Sushiswap router to spend this contract's WETH:\n        IERC20 weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH\n        // Amount is:\n\t    //  0000000000000000000000000000000000000000ffffffffffffffffffffffff\n\t    // Approval for Sushiswap:\n\t    require(weth.approve(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F),79228162514264337593543950335), 'weth approve failed');\n\t    \n\t    require(IERC20(0xcee60cFa923170e4f8204AE08B4fA6A3F5656F3a).approve(address(0xF178C0b5Bb7e7aBF4e12A4838C7b7c5bA2C623c0),79228162514264337593543950335), 'approve failed');\n\t    \n\t    // Blank approvals:\n\t    address[15] memory underlyings = [0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e,\n0xc00e94Cb662C3520282E6f5717214004A7f26888,\n0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F,\n0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2,\n0x408e41876cCCDC0F92210600ef50372656052a38,\n0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202,\n0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD,\n0xba100000625a3754423978a60c9317c58a424e3D,\n0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984,\n0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9,\n0x6B3595068778DD592e39A122f4f5a5cF09C90fE2,\n0x2ba592F78dB6436527729929AAf6c908497cB200,\n0x514910771AF9Ca656af840dff83E8264EcF986CA,\n0xc5bDdf9843308380375a611c18B50Fb9341f502A,\n0xE41d2489571d322189246DaFA5ebDe1F4699F498];\n\t    \n\t    for (uint256 i = 0; i < underlyings.length; i++) {\n            IERC20(underlyings[i]).approve(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F),79228162514264337593543950335);\n            IERC20(underlyings[i]).approve(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D),79228162514264337593543950335);\n        }\n\t    \n        liquidityPool = payable(0x4F868C1aa37fCf307ab38D215382e88FCA6275E2); // new contract since June 2021\n        borrowProxy = 0x17a4C8F43cB407dD21f9885c5289E66E21bEcD9D; //  new contract since June 2021\n    }\n\n    receive() external payable {\n        // Do nothing.\n    }\n    \n    fallback() external payable { return; }\n\n    /// @dev Set the owner of this contract. This function can only be called by\n    /// the current owner.\n    ///\n    /// @param _newOwner The new owner of this contract.\n    function setOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n    }\n\n    /// @dev Set the borrow proxy expected by this contract. This function can\n    /// only be called by the current owner.\n    ///\n    /// @param _newBorrowProxy The new borrow proxy expected by this contract.\n    function setBorrowProxy(address _newBorrowProxy) external onlyOwner {\n        borrowProxy = _newBorrowProxy;\n    }\n\n    /// @dev Set the liquidity pool used by this contract. This function can\n    /// only be called by the current owner.\n    ///\n    /// @param _newLiquidityPool The new liquidity pool used by this contract.\n    /// It must be a payable address, because this contract needs to be able to\n    /// return borrowed assets and profits to the liquidty pool.\n    function setLiquidityPool(address payable _newLiquidityPool) external onlyOwner {\n        liquidityPool = _newLiquidityPool;\n    }\n\n    /// Function that allows to withdraw ERC-20 tokens that are sitting on this contract to the owner address.\n    /// Uses safeTransfer to deal with non-standard tokens like USDT\n    function withdrawTokens(address _token) external onlyOwner {\n        IERC20(_token).safeTransfer(\n            msg.sender,\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n    \n    /// Function that allows to withdraw ETH that are sitting on this contract to the owner address.\n    function withdrawEth(uint256 _amount) external onlyOwner {\n        assert(\n            address(this).balance >= _amount\n        );\n        assert(_amount > 0);\n        (bool success, ) = owner.call{value:_amount}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n    \n    // Safety fallback, code from @kinzrec\n    function delegateCall(address to, bytes memory data) external payable onlyOwner {\n        (bool success, bytes memory retData) = to.delegatecall(data);\n        require(success, string(retData));\n    }\n    \n\t/// @dev The main function.\n\tfunction safeFlashLoanBuyAndRedeem(uint256 _amountToBorrow, uint256 _minimalProfitability, uint256 _amountOfProfitToReturn, address[] memory underlyings, address[] memory routers) external onlyOwner returns(uint256)\n\t{\n\t    // Check input:\n\t\trequire( _amountToBorrow > 0, \"empty amount\");\n\t\taddress _token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\n\n\t\t// Do flash-loan:\n\t\tLiquidityPool(liquidityPool).borrow(\n            // Address of the token we want to borrow. Using this address\n            // means that we want to borrow ETH.\n            _token,\n            // The amount of WEI that we will borrow. We have to return at least\n            // more than this amount.\n            _amountToBorrow,\n            // Encode the callback into calldata. This will be used to call a\n            // function on this contract.\n            abi.encodeWithSelector(\n                // Function selector of the callback function.\n                this.buyAndRedeemCallback.selector,\n                // First parameter of the callback.\n                _amountToBorrow,\n                _amountOfProfitToReturn,\n                underlyings,\n                routers\n            )\n        );\n        \n        // At this point the flash-loan is paid back...\n        \n        // Ensure we are left with more WETH than before\n        \n        IERC20 weth = IERC20(_token);\n        uint256 weth_balance = weth.balanceOf(address(this));\n        require(weth_balance >= _minimalProfitability, 'not profitable');\n        \n        // Transfer profit to owner address.\n        bool sent = weth.transfer(owner, weth_balance);\n\t\trequire(sent, \"Token transfer failed\");\n\t\treturn weth_balance;\n\t}\n\t\n    function buyAndRedeemCallback(\n        uint256 _amountBorrowed,\n        uint256 _amountOfProfitToReturn,\n        address[] memory underlyings,\n        address[] memory routers\n    ) external onlyBorrowProxy {\n        /// We have now borrowed a certain amount of WETH\n        \n        // Pay back flash loan\n        IERC20 weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n        //uint256 weth_balance = weth.balanceOf(address(this));\n        \n        // Buy BDI on Sushiswap\n        // From WETH to BDI\n \t\taddress[] memory path = new address[](2);\n        path[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\n        path[1] = 0x0309c98B1bffA350bcb3F9fB9780970CA32a5060; // BDI\n\t\t\n \t\t// Swap _amountBorrowed WETH to any amount of BDI (we will check that this was profitable later)\n \t\tIUniswapV2Router02(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F)).swapExactTokensForTokens(_amountBorrowed, 0, path, address(this), block.timestamp + 15000);\n \t\t\n \t\tuint256 bdi_balance = IBDITokenContract(0x0309c98B1bffA350bcb3F9fB9780970CA32a5060).balanceOf(address(this));\n \t\t\n \t\t// Burn BDI into constituents\n        IBDITokenContract(0x0309c98B1bffA350bcb3F9fB9780970CA32a5060).burn(bdi_balance);\n \t\t\n \t\t// Convert constituents into underlyings\n \t\t\n \t\t// yvYFI - https://etherscan.io/address/0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1\n \t\tuint256 bal = IERC20(0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1).balanceOf(address(this));\n \t\t(0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1).call(abi.encodeWithSignature(\"withdraw(uint256)\",bal));\n \t\t// Now we have YFI: https://etherscan.io/token/0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e\n\n \t\t// cCOMP - 0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4\n \t\tbal = IERC20(0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4).balanceOf(address(this));\n \t\t(0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4).call(abi.encodeWithSignature(\"redeem(uint256)\",bal));\n \t\t// Now we have COMP: 0xc00e94Cb662C3520282E6f5717214004A7f26888\n\n \t\t// yvSNX - 0xF29AE508698bDeF169B89834F76704C3B205aedf\n \t\tbal = IERC20(0xF29AE508698bDeF169B89834F76704C3B205aedf).balanceOf(address(this));\n \t\t(0xF29AE508698bDeF169B89834F76704C3B205aedf).call(abi.encodeWithSignature(\"withdraw(uint256)\",bal));\n \t\t// Now we have SNX: 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F\n\n \t\t// yvUNI: 0xFBEB78a723b8087fD2ea7Ef1afEc93d35E8Bed42\n \t\tbal = IERC20(0xFBEB78a723b8087fD2ea7Ef1afEc93d35E8Bed42).balanceOf(address(this));\n \t\t(0xFBEB78a723b8087fD2ea7Ef1afEc93d35E8Bed42).call(abi.encodeWithSignature(\"withdraw(uint256)\",bal));\n \t\t// Now we have UNI: 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\n\n \t\t// xSUSHI: 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272\n \t\t// can be directly swapped on Sushiswap, alternatively, could un-wrap First\n \t\tbal = IERC20(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272).balanceOf(address(this));\n \t\t(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272).call(abi.encodeWithSignature(\"leave(uint256)\",bal));\n \t\t// Now have Sushi 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\n\n \t\t// yvCurve-Link: 0xf2db9a7c0ACd427A680D640F02d90f6186E71725\n \t\tbal = IERC20(0xf2db9a7c0ACd427A680D640F02d90f6186E71725).balanceOf(address(this));\n \t\t(0xf2db9a7c0ACd427A680D640F02d90f6186E71725).call(abi.encodeWithSignature(\"withdraw(uint256)\",bal));\n \t\t// Now we have linkCRV: 0xcee60cfa923170e4f8204ae08b4fa6a3f5656f3a\n \t\tbal = IERC20(0xcee60cFa923170e4f8204AE08B4fA6A3F5656F3a).balanceOf(address(this));\n \t\t// Moved this to constructor:\n \t\t//require(IERC20(0xcee60cFa923170e4f8204AE08B4fA6A3F5656F3a).approve(address(0xF178C0b5Bb7e7aBF4e12A4838C7b7c5bA2C623c0),79228162514264337593543950335), 'approve failed');\n \t\t(0xF178C0b5Bb7e7aBF4e12A4838C7b7c5bA2C623c0).call(abi.encodeWithSignature(\"remove_liquidity_one_coin(uint256,int128,uint256)\",bal,0,0)); // second 0 means we want to withdraw link\n \t\t// Now we have LINK: 0x514910771AF9Ca656af840dff83E8264EcF986CA\n\n \t\t// yvBOOST 0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a\n \t\tbal = IERC20(0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a).balanceOf(address(this));\n \t\t(0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a).call(abi.encodeWithSignature(\"withdraw(uint256)\",bal));\n \t\t// Now we have yveCRVDAO: 0xc5bDdf9843308380375a611c18B50Fb9341f502A, can be swapped on Sushiswap\"\n\n \t\t// Convert all the underlyings according to the specified router (Uniswap or Sushiswap):\n \t\tfor (uint256 i = 0; i < underlyings.length; i++) {\n            bal = IERC20(underlyings[i]).balanceOf(address(this));\n            path[0] = underlyings[i];\n            path[1] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH  \t\t\n     \t\tIUniswapV2Router02(routers[i]).swapExactTokensForTokens(bal, 0, path, address(this), block.timestamp + 15000); \n        }\n \t\t\n        // Pay back flash loan\n        bal = weth.balanceOf(address(this));\n        require( bal >= _amountOfProfitToReturn + _amountBorrowed, 'not profitable');\n        \n        // Notice that assets are transferred back to the liquidity pool, not to\n        // the borrow proxy.\n\t\tbool sent = weth.transfer(liquidityPool, _amountBorrowed + _amountOfProfitToReturn);\n\t\trequire(sent, \"token transfer failed\");\n    }\n    \n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"}}}