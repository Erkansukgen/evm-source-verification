{"language":"Solidity","settings":{"evmVersion":"london","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/PupperNFTRoyaltyReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IVersion {\n    /**\n     * @dev Returns version based on semantic versioning format.\n     */\n    function version() external pure returns (string memory);\n}\n\ncontract FlexPaymentDivider is Ownable, IVersion {\n    using Address for address payable;\n\n    uint256 private _recipientCount;\n    mapping(uint256 => address payable) private _recipientsById;\n    mapping(address => uint256) private _percentagesByRecipient;\n    mapping(address => uint256) private _balancesByRecipient;\n    mapping(address => uint256) private _changeByRecipient;\n    mapping(address => bool) private _isWithdrawingByAccount;\n\n    /**\n     * @notice Sets recipients and the percentage of each deposit sent to them.\n     * @dev {_setupRecipients} is only used once--here, upon deployment.\n     * @param recipients_ Accounts to receive percentage of deposits.\n     * @param percentages_ Percentage of deposit each account should receive.\n     * Order matters.\n     */\n    constructor(\n        address payable[] memory recipients_,\n        uint256[] memory percentages_\n    ) {\n        _setupRecipients(recipients_, percentages_);\n    }\n\n    function version() external pure override returns (string memory) {\n        return \"1.1.0\";\n    }\n\n    /**\n     * @notice Returns the number of recipients each deposit is divided by.\n     * @return Number of recipients.\n     */\n    function recipientCount() external view returns (uint256) {\n        return _recipientCount;\n    }\n\n    /**\n     * @notice Returns recipient with the given id.\n     * @param id Integer.\n     * @return Ethereum account address.\n     */\n    function recipientById(uint256 id) external view returns (address) {\n        return _recipientsById[id];\n    }\n\n    /**\n     * @notice Returns the percentage of each deposit the recipient receives.\n     * @param recipient Ethereum account address.\n     * @return Amount of 100.\n     */\n    function percentage(address recipient) external view returns (uint256) {\n        return _percentagesByRecipient[recipient];\n    }\n\n    /**\n     * @notice Returns the balance the recipient has accumulated.\n     * @param recipient Ethereum account address.\n     * @return Amount of wei.\n     */\n    function accumulatedBalance(address recipient) external view returns (uint256) {\n        return _balancesByRecipient[recipient];\n    }\n\n    /**\n     * @notice Returns the amount of change the recipient has accumulated.\n     * @param recipient Ethereum account address.\n     * @return Fraction of wei as an amount out of 100.\n     */\n    function accumulatedChange(address recipient) external view returns (uint256) {\n        return _changeByRecipient[recipient];\n    }\n\n    /**\n     * @notice Increases balance for each recipient by their designated\n     * percentage of the Ether sent with this call.\n     * @custom:require Caller must be owner.\n     * @custom:require Message value must be greater than 0.\n     * @dev Solidity rounds towards zero so we accumulate change here that is\n     * transferred once it exceeds a fractional amount of wei.\n     *\n     * @custom:warning\n     * ===============\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\n     * sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     */\n    function deposit() public payable onlyOwner {\n        require(\n            msg.value > 0,\n            \"FlexPaymentDivider: Insufficient message value\"\n        );\n        for (uint256 i = 0; i < _recipientCount; i++) {\n            address payable recipient = _recipientsById[i];\n            uint256 change = (msg.value * _percentagesByRecipient[recipient]) % 100;\n            uint256 amount = (msg.value * _percentagesByRecipient[recipient]) / 100;\n            uint256 totalChange = _changeByRecipient[recipient] + change;\n            _changeByRecipient[recipient] = totalChange;\n            if (totalChange >= 100) {\n                _changeByRecipient[recipient] = totalChange % 100;\n                amount += (totalChange / 100);\n            }\n            _balancesByRecipient[recipient] += amount;\n        }\n    }\n\n    /**\n     * @notice Transfers to each recipient their designated percenatage of the\n     * Ether held by this contract.\n     * @custom:require Caller must be owner.\n     *\n     * @custom:warning\n     * ===============\n     * A denial of service attack is possible if any of the recipients revert.\n     * The {withdraw} method can be used in the event of this attack.\n     *\n     * @custom:warning\n     * ===============\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\n     * sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     */\n    function disperse() external onlyOwner {\n        for (uint256 i = 0; i < _recipientCount; i++) {\n            address payable recipient = _recipientsById[i];\n            withdraw(recipient);\n        }\n    }\n\n    /**\n     * @notice Transfers to recipient their designated percentage of the Ether\n     * held in this contract.\n     * @custom:require Caller must not already be withdrawing.\n     * @custom:require Balance to withdraw must be above 0.\n     *\n     * @custom:warning\n     * ===============\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\n     * sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     */\n    function withdraw(address payable recipient) public {\n        require(\n            !isWithdrawing(_msgSender()),\n            \"FlexPaymentDivider: Can not reenter\"\n        );\n        _isWithdrawingByAccount[_msgSender()] = true;\n\n        uint256 amount = _balancesByRecipient[recipient];\n        // IMPORTANT: Do not revert here so `disperse` can not have DoS when a\n        // recipient does not yet have a balance to withdraw.\n        if (amount > 0) {\n            _balancesByRecipient[recipient] = 0;\n            recipient.sendValue(amount);\n        }\n\n        _isWithdrawingByAccount[_msgSender()] = false;\n    }\n\n    /* INTERNAL */\n\n    /**\n     * @dev Sets mappings for recipients and respective percentages.\n     * This method is only used once in the constructor. Recipients and\n     * percentages can not be modified after deployment.\n     * @custom:require Input lengths must be equal. Order matters.\n     * @custom:require Each percentage must be above 0 and below 100.\n     * @custom:require The sum of all percentages must be 100.\n     * @param recipients_ Account addresses receiving a percentage of deposited\n     * funds.\n     * @param percentages_ Amounts for accounts at the same index in the\n     * {recipients} parameter to allocate from deposited funds.\n     *\n     * @custom:warning\n     * ===============\n     * Recipient accounts should be trusted.\n     */\n    function _setupRecipients(\n        address payable[] memory recipients_,\n        uint256[] memory percentages_\n    ) internal {\n        require(\n            recipients_.length == percentages_.length,\n            \"FlexPaymentDivider: Unequal input lengths\"\n        );\n        uint256 sum = 0;\n        for (uint256 i = 0; i < recipients_.length; i++) {\n            require(\n                percentages_[i] > 0,\n                \"FlexPaymentDivider: Percentage must exceed 0\"\n            );\n            require(\n                percentages_[i] <= 100,\n                \"FlexPaymentDivider: Percentage must not exceed 100\"\n            );\n            sum += percentages_[i];\n            _recipientCount += 1;\n            _recipientsById[i] = recipients_[i];\n            _percentagesByRecipient[_recipientsById[i]] = percentages_[i];\n        }\n        require(sum == 100, \"FlexPaymentDivider: Percentages must sum to 100\");\n    }\n\n    function isWithdrawing(address account) internal view returns (bool) {\n        return _isWithdrawingByAccount[account];\n    }\n}\n\n/**\n * @notice Collects royalties.\n */\ncontract PupperNFTRoyaltyReceiver is Ownable {\n    using Address for address payable;\n\n    FlexPaymentDivider private immutable _paymentHandler;\n\n    event Received(uint256 indexed amount);\n\n    constructor(\n        address payable[] memory payoutAccounts_,\n        uint256[] memory payoutPercentages_\n    ) {\n        _paymentHandler = new FlexPaymentDivider(payoutAccounts_, payoutPercentages_);\n    }\n\n    receive() external payable {\n        emit Received(msg.value);\n    }\n\n    function getPaymentHandler() external view returns (address) {\n        return address(_paymentHandler);\n    }\n\n    function transfer(bool safeMode) external onlyOwner {\n        require(address(this).balance > 0, \"HotWallet: No funds to transfer\");\n        uint256 value = address(this).balance;\n        if (safeMode) {\n            _depositAsPull(value);\n        } else {\n            _depositAsPush(value);\n        }\n    }\n\n    function _depositAsPull(uint256 value) private {\n        _paymentHandler.deposit{value: value}();\n    }\n\n    function _depositAsPush(uint256 value) private {\n        _paymentHandler.deposit{value: value}();\n        _paymentHandler.disperse();\n    }\n}"}}}