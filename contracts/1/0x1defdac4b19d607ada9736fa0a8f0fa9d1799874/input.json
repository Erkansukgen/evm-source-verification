{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"DefiVeth.sol":{"content":"// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IController {\r\n    function aaveReferralCode() external view returns (uint16);\r\n\r\n    function feeCollector(address) external view returns (address);\r\n\r\n    function founderFee() external view returns (uint256);\r\n\r\n    function founderVault() external view returns (address);\r\n\r\n    function interestFee(address) external view returns (uint256);\r\n\r\n    function isPool(address) external view returns (bool);\r\n\r\n    function pools() external view returns (address);\r\n\r\n    function strategy(address) external view returns (address);\r\n\r\n    function rebalanceFriction(address) external view returns (uint256);\r\n\r\n    function poolRewards(address) external view returns (address);\r\n\r\n    function treasuryPool() external view returns (address);\r\n\r\n    function uniswapRouter() external view returns (address);\r\n\r\n    function withdrawFee(address) external view returns (uint256);\r\n}\r\n\r\ninterface IPoolRewards {\r\n    function notifyRewardAmount(uint256) external;\r\n\r\n    function claimReward(address) external;\r\n\r\n    function updateReward(address) external;\r\n\r\n    function rewardForDuration() external view returns (uint256);\r\n\r\n    function claimable(address) external view returns (uint256);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n}\r\n\r\ninterface VTokenBase {\r\n    function deposit() external payable;\r\n    function deposit(uint256) external;\r\n    function rebalance() external;\r\n    function withdraw(uint256) external;\r\n    function getPricePerShare() external view returns (uint256);\r\n    function token() external view returns (address);\r\n    function totalValue() external view returns (uint256);\r\n    function withdrawFee() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface TokenLike {\r\n    function approve(address, uint256) external returns (bool);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ncontract DefiVeth is Context, Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    VTokenBase private _vTokenPool;\r\n    IController private _controller;\r\n    IPoolRewards private _poolRewards;\r\n    \r\n    IERC20 public _stakingToken;\r\n    \r\n    mapping(address => Stake[]) public _userStakes;\r\n    mapping(address => UserTotals) public _userTotals;\r\n    \r\n    uint256 public _totalStakedAmount = 0;\r\n    uint256 public _totalStakingShares = 0;\r\n    uint256 public _totalStakingShareSeconds = 0;\r\n    uint256 public _lastAccountingTimestampSec = now;\r\n    uint256 public _initialSharesPerToken = 0;\r\n    \r\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address internal constant VESPER = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\r\n    \r\n    bool internal shouldDeposit = true;\r\n     \r\n    struct Stake {\r\n        uint256 stakingShares;\r\n        uint256 timestampSec;\r\n    }\r\n    \r\n    struct UserTotals {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n        uint256 lastAccountingTimestampSec;\r\n    }\r\n    \r\n    event Staked(address indexed user, uint256 amount, uint256 vamount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n    \r\n    constructor (\r\n                    address vTokenPool,\r\n                    address controller,\r\n                    address poolRewards,\r\n                    address stakingToken,\r\n                    uint256 initialSharesPerToken\r\n    ) public {\r\n        _controller = IController(controller);\r\n        \r\n        require(_controller.isPool(vTokenPool), \"ERR: this is not correct pool.\");\r\n        _vTokenPool = VTokenBase(vTokenPool);\r\n        \r\n        require(_vTokenPool.token() == stakingToken, \"ERR: token is not correct for the pool.\");\r\n        _stakingToken = IERC20(stakingToken);\r\n        \r\n        require(_controller.poolRewards(vTokenPool) == poolRewards, \"ERR: this is not correct poolRewards.\");\r\n        _poolRewards = IPoolRewards(poolRewards);\r\n\r\n        _initialSharesPerToken = initialSharesPerToken;\r\n        \r\n        IERC20(vTokenPool).approve(vTokenPool, type(uint256).max);\r\n        _stakingToken.approve(vTokenPool, type(uint256).max);\r\n    }\r\n    \r\n    /// @dev Handle incoming ETH to the contract address.\r\n    receive() external payable {\r\n        if (shouldDeposit) {\r\n            deposit();\r\n        }\r\n    }\r\n    \r\n    function deposit() public payable nonReentrant {\r\n        require(msg.value > 0, 'ERR: stake amount is zero');\r\n\r\n        require(_totalStakingShares == 0 || totalStaked() > 0,\r\n                'ERR: Invalid state. Staking shares exist, but no staking tokens do');\r\n\r\n        // interactions\r\n        uint256 orgVTokenBalance = _vTokenPool.balanceOf(address(this));\r\n        _vTokenPool.deposit{value: msg.value}();\r\n        uint256 nowVTokenBalance = _vTokenPool.balanceOf(address(this));\r\n        uint256 newVTokenAmount = nowVTokenBalance.sub(orgVTokenBalance);\r\n        \r\n        _deposit(msg.value, newVTokenAmount);\r\n    }\r\n    \r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, 'ERR: stake amount is zero');\r\n\r\n        require(_totalStakingShares == 0 || totalStaked() > 0,\r\n                'ERR: Invalid state. Staking shares exist, but no staking tokens do');\r\n\r\n        // interactions\r\n        _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        uint256 orgVTokenBalance = _vTokenPool.balanceOf(address(this));\r\n        _vTokenPool.deposit(amount);\r\n        uint256 nowVTokenBalance = _vTokenPool.balanceOf(address(this));\r\n        uint256 newVTokenAmount = nowVTokenBalance.sub(orgVTokenBalance);\r\n        \r\n        _deposit(amount, newVTokenAmount);\r\n    }\r\n    \r\n    function _deposit(uint256 amount, uint256 vTokenAmount) internal {\r\n                        \r\n        uint256 mintedStakingShares = (_totalStakingShares > 0)\r\n            ? _totalStakingShares.mul(vTokenAmount).div(totalStaked())\r\n            : vTokenAmount.mul(_initialSharesPerToken);\r\n        require(mintedStakingShares > 0, 'ERR: Stake amount is too small');\r\n        \r\n        updateAccounting();\r\n        \r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\r\n        totals.lastAccountingTimestampSec = now;\r\n        \r\n        Stake memory newStake = Stake(mintedStakingShares, now);\r\n        _userStakes[msg.sender].push(newStake);\r\n        \r\n        // 2. Global Accounting\r\n        _totalStakedAmount = _totalStakedAmount.add(vTokenAmount);\r\n        _totalStakingShares = _totalStakingShares.add(mintedStakingShares);\r\n        \r\n        Staked(msg.sender, amount, vTokenAmount);\r\n    }\r\n    \r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        _withdraw(amount, false);\r\n    }\r\n    \r\n    function withdrawETH(uint256 amount) external nonReentrant {\r\n        _withdraw(amount, true);\r\n    }\r\n    \r\n    function _withdraw(uint256 amount, bool unwrapFlag) internal {\r\n        updateAccounting();\r\n        \r\n        require(amount > 0, 'ERR: unstake amount is zero');\r\n        require(totalStakedFor(msg.sender) >= amount,\r\n            'ERR: unstake amount is greater than total user stakes');\r\n        uint256 stakingSharesToBurn = _totalStakingShares.mul(amount).div(totalStaked());\r\n        require(stakingSharesToBurn > 0, 'ERR: Unable to unstake amount this small');\r\n        \r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        Stake[] storage accountStakes = _userStakes[msg.sender];\r\n        \r\n        \r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\r\n            uint256 newStakingShareSecondsToBurn = 0;\r\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(stakeTimeSec);\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.stakingShares);\r\n                accountStakes.pop();\r\n            } else {\r\n                // partially redeem a past stake\r\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(stakeTimeSec);\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\r\n                lastStake.stakingShares = lastStake.stakingShares.sub(sharesLeftToBurn);\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\r\n        \r\n        // 2. Interactions\r\n        compound(false);\r\n        uint256 stakingTokenBalance = _stakingToken.balanceOf(address(this));\r\n        uint256 vaultAmount = stakingTokenBalance.mul(_totalStakingShareSeconds.sub(stakingShareSecondsToBurn)).div(_totalStakingShareSeconds);\r\n        uint256 compoundVTokenAmount = _vTokenPool.balanceOf(address(this)).sub(totalStaked());\r\n        uint256 withdrawAmount = amount.add(compoundVTokenAmount.mul(stakingShareSecondsToBurn).div(_totalStakingShareSeconds));\r\n\r\n        _vTokenPool.withdraw(withdrawAmount);\r\n        stakingTokenBalance = _stakingToken.balanceOf(address(this));\r\n        \r\n        if(vaultAmount < stakingTokenBalance) {\r\n            uint256 wAmount = stakingTokenBalance.sub(vaultAmount);\r\n            if(unwrapFlag) {\r\n                shouldDeposit = false;\r\n                TokenLike(WETH).withdraw(wAmount);\r\n                shouldDeposit = true;\r\n                msg.sender.transfer(wAmount);\r\n            }\r\n            else\r\n                _stakingToken.safeTransfer(msg.sender, wAmount);\r\n        }\r\n        \r\n        if(_stakingToken.balanceOf(address(this)) > 0)\r\n            _vTokenPool.deposit(_stakingToken.balanceOf(address(this)));\r\n\r\n        // 3. Global Accounting\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        _totalStakingShares = _totalStakingShares.sub(stakingSharesToBurn);\r\n        \r\n        emit Unstaked(msg.sender, amount);\r\n\r\n        require(_totalStakingShares == 0 || totalStaked() > 0,\r\n                \"ERR: Error unstaking. Staking shares exist, but no staking tokens do\");\r\n    }\r\n    \r\n    function updateAccounting() public {\r\n        // Global accounting\r\n        uint256 newStakingShareSeconds =\r\n            now\r\n            .sub(_lastAccountingTimestampSec)\r\n            .mul(_totalStakingShares);\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(newStakingShareSeconds);\r\n        _lastAccountingTimestampSec = now;\r\n        \r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        uint256 newUserStakingShareSeconds =\r\n            now\r\n            .sub(totals.lastAccountingTimestampSec)\r\n            .mul(totals.stakingShares);\r\n        totals.stakingShareSeconds =\r\n            totals.stakingShareSeconds\r\n            .add(newUserStakingShareSeconds);\r\n        totals.lastAccountingTimestampSec = now;\r\n    }\r\n    \r\n    function compound(bool vaultFlag) internal {\r\n        _poolRewards.claimReward(address(this));\r\n        uint256 vesperAmount = IERC20(VESPER).balanceOf(address(this));\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(_controller.uniswapRouter());\r\n        address[] memory path = _getPath(VESPER, address(_stakingToken));\r\n        uint256 amountOut = uniswapRouter.getAmountsOut(vesperAmount, path)[path.length - 1];\r\n        if (amountOut != 0) {\r\n            IERC20(VESPER).safeApprove(address(uniswapRouter), 0);\r\n            IERC20(VESPER).safeApprove(address(uniswapRouter), vesperAmount);\r\n            uniswapRouter.swapExactTokensForTokens(vesperAmount, 1, path, address(this), now + 30);\r\n            if(vaultFlag)\r\n                _vTokenPool.deposit(_stakingToken.balanceOf(address(this)));\r\n        }\r\n    }\r\n    \r\n    function harvest() external nonReentrant {\r\n        compound(true);\r\n    }\r\n    \r\n    function totalStaked() public view returns (uint256) {\r\n        return _totalStakedAmount;\r\n    }\r\n    \r\n    function totalStakedFor(address addr) public view returns (uint256) {\r\n        return _totalStakingShares > 0 ?\r\n            totalStaked().mul(_userTotals[addr].stakingShares).div(_totalStakingShares) : 0;\r\n    }\r\n    \r\n    function _getPath(address _from, address _to) internal pure returns (address[] memory) {\r\n        address[] memory path;\r\n        if (_from == WETH || _to == WETH) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = WETH;\r\n            path[2] = _to;\r\n        }\r\n        return path;\r\n    }\r\n    \r\n    function getPricePerShare() external view returns (uint256) {\r\n        return _vTokenPool.getPricePerShare();\r\n    }\r\n}"}}}