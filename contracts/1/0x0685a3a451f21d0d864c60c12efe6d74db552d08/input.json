{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ncontract FLAMING_O_REDUX { // based on GAMMA nft (Î“) - 0xeF0ff94B152C00ED4620b149eE934f2F4A526387\n    uint256 public totalSupply;\n    uint256 public totalSupplyCap = 12;\n    string public name = \"FLAMING_O_REDUX\";\n    string public symbol = \"FL_O_R\";\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(uint256 => address) public getApproved;\n    mapping(uint256 => address) public ownerOf;\n    mapping(uint256 => uint256) public tokenByIndex;\n    mapping(uint256 => string) public tokenURI;\n    mapping(bytes4 => bool) public supportsInterface; // eip-165 \n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n    mapping(address => mapping(uint256 => uint256)) public tokenOfOwnerByIndex;\n    \n    event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed holder, address indexed operator, bool approved);\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    constructor() {\n        supportsInterface[0x80ac58cd] = true; // ERC721 \n        supportsInterface[0x5b5e139f] = true; // METADATA\n        supportsInterface[0x780e9d63] = true; // ENUMERABLE\n    }\n    \n    function approve(address spender, uint256 tokenId) external {\n        require(msg.sender == ownerOf[tokenId] || isApprovedForAll[ownerOf[tokenId]][msg.sender], \"!owner/operator\");\n        getApproved[tokenId] = spender;\n        emit Approval(msg.sender, spender, tokenId); \n    }\n    \n    function mint() external { \n        totalSupply++;\n        uint256 total = totalSupply;\n        require(total <= totalSupplyCap, \"capped\");\n        uint256 tokenId = total;\n        balanceOf[msg.sender]++;\n        ownerOf[tokenId] = msg.sender;\n        tokenByIndex[tokenId - 1] = tokenId;\n        tokenURI[tokenId] = \"https://gateway.pinata.cloud/ipfs/Qme1ym1VuwyFi4DquPjPnDGsXuUA7YZyonWNykerYuVxgx\";\n        tokenOfOwnerByIndex[msg.sender][tokenId - 1] = tokenId;\n        emit Transfer(address(0), msg.sender, tokenId); \n    }\n    \n    function setApprovalForAll(address operator, bool approved) external {\n        isApprovedForAll[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n    \n    function _transfer(address from, address to, uint256 tokenId) internal {\n        balanceOf[from]--; \n        balanceOf[to]++; \n        getApproved[tokenId] = address(0);\n        ownerOf[tokenId] = to;\n        tokenOfOwnerByIndex[from][tokenId - 1] = 0;\n        tokenOfOwnerByIndex[to][tokenId - 1] = tokenId;\n        emit Transfer(from, to, tokenId); \n    }\n    \n    function transfer(address to, uint256 tokenId) external {\n        require(msg.sender == ownerOf[tokenId], \"!owner\");\n        _transfer(msg.sender, to, tokenId);\n    }\n    \n    function transferFrom(address from, address to, uint256 tokenId) external {\n        require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], \"!owner/spender/operator\");\n        _transfer(from, to, tokenId);\n    }\n}"
    }
  }
}