{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/adapters/tokenSets/TokenSetsTokenAdapter.sol":{"content":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\n\n// ERC20-style token metadata\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\nstruct TokenMetadata {\n    address token;\n    string name;\n    string symbol;\n    uint8 decimals;\n}\n\n\nstruct Component {\n    address token;    // Address of token contract\n    string tokenType; // Token type (\"ERC20\" by default)\n    uint256 rate;     // Price per full share (1e18)\n}\n\n\n/**\n * @title Token adapter interface.\n * @dev getMetadata() and getComponents() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface TokenAdapter {\n\n    /**\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n     * struct TokenMetadata {\n     *     address token;\n     *     string name;\n     *     string symbol;\n     *     uint8 decimals;\n     * }\n     */\n    function getMetadata(address token) external view returns (TokenMetadata memory);\n\n    /**\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n    * struct Component {\n    *     address token;    // Address of token contract\n    *     string tokenType; // Token type (\"ERC20\" by default)\n    *     uint256 rate;     // Price per full share (1e18)\n    * }\n    */\n    function getComponents(address token) external view returns (Component[] memory);\n}\n\n\n/**\n * @dev SetToken contract interface.\n * Only the functions required for TokenSetsTokenAdapter contract are added.\n * The SetToken contract is available here\n * github.com/SetProtocol/set-protocol-contracts/blob/master/contracts/core/tokens/SetToken.sol.\n */\ninterface SetToken {\n    function getUnits() external view returns (uint256[] memory);\n    function naturalUnit() external view returns (uint256);\n    function getComponents() external view returns(address[] memory);\n}\n\n/**\n * @dev RebalancingSetToken contract interface.\n * Only the functions required for TokenSetsTokenAdapter contract are added.\n * The RebalancingSetToken contract is available here\n * github.com/SetProtocol/set-protocol-contracts/blob/master/contracts/core/tokens/RebalancingSetTokenV3.sol.\n */\ninterface RebalancingSetToken {\n    function unitShares() external view returns (uint256);\n    function naturalUnit() external view returns (uint256);\n    function currentSet() external view returns (SetToken);\n}\n\n\n/**\n * @title Token adapter for TokenSets.\n * @dev Implementation of TokenAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract TokenSetsTokenAdapter is TokenAdapter {\n\n    /**\n     * @return TokenMetadata struct with ERC20-style token info.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n        return TokenMetadata({\n            token: token,\n            name: ERC20(token).name(),\n            symbol: ERC20(token).symbol(),\n            decimals: ERC20(token).decimals()\n        });\n    }\n\n    /**\n     * @return Array of Component structs with underlying tokens rates for the given token.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getComponents(address token) external view override returns (Component[] memory) {\n        RebalancingSetToken rebalancingSetToken = RebalancingSetToken(token);\n        uint256 tokenUnitShare = rebalancingSetToken.unitShares();\n        uint256 tokenNaturalUnit = rebalancingSetToken.naturalUnit();\n        uint256 tokenRate = 1e18 * tokenUnitShare / tokenNaturalUnit;\n\n        SetToken setToken = rebalancingSetToken.currentSet();\n        uint256[] memory unitShares = setToken.getUnits();\n        uint256 naturalUnit = setToken.naturalUnit();\n        address[] memory components = setToken.getComponents();\n\n        Component[] memory underlyingTokens = new Component[](components.length);\n\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\n            underlyingTokens[i] = Component({\n                token: components[i],\n                tokenType: \"ERC20\",\n                rate: tokenRate * unitShares[i] / naturalUnit\n            });\n        }\n\n        return underlyingTokens;\n    }\n}\n"}}}