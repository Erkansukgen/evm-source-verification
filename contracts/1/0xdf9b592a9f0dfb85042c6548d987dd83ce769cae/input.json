{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Logic.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.0;\r\n\r\ninterface IKeep3rV1 {\r\n    function unbond(address bonding, uint amount) external;\r\n    function withdraw(address bonding) external;\r\n    function bond(address bonding, uint amount) external;\r\n    function activate(address bonding) external;\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IJobWorkableWork {\r\n    function work() external;\r\n    function workable() external view returns (bool);\r\n}\r\n\r\ninterface IGasToken {\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract HunterLogic {\r\n    IGasToken constant private chi = IGasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n    IKeep3rV1 constant private kp3r = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\r\n    IJobWorkableWork constant keep3rV1oracle = IJobWorkableWork(0x73353801921417F465377c8d898c6f4C0270282C);\r\n    IJobWorkableWork constant sushiswapV1Oracle = IJobWorkableWork(0xf67Ab1c914deE06Ba0F264031885Ea7B276a7cDa);\r\n    \r\n    modifier gasDiscount() {\r\n        uint256 initialGasLeft = gasleft();\r\n        _;\r\n        if(tx.gasprice > 100 gwei){\r\n            uint256 gasSpent = 21000 + initialGasLeft - gasleft() + 16 * msg.data.length;\r\n            chi.freeUpTo((gasSpent + 14154) / 41947);\r\n        }\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function unbond_fake(uint _amount) public{\r\n        kp3r.unbond(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44, _amount);\r\n    }\r\n    \r\n    function withdraw_fake() public{\r\n        kp3r.withdraw(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\r\n        kp3r.transfer(tx.origin, kp3r.balanceOf(address(this)));\r\n    }\r\n    \r\n    function withdrawKP3R_fake() public{\r\n        kp3r.transfer(tx.origin, kp3r.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawCHI_fake() public{\r\n        chi.transfer(tx.origin, chi.balanceOf(address(this)));\r\n    }\r\n    \r\n    function withdrawETH_fake() public{\r\n        payable(tx.origin).transfer(address(this).balance);\r\n    }\r\n    \r\n    function workable_fake() public view returns (bool){\r\n        if(keep3rV1oracle.workable()){\r\n            return true;\r\n        }\r\n        if(sushiswapV1Oracle.workable()){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function work_fake() public gasDiscount{\r\n        if(keep3rV1oracle.workable()){\r\n            keep3rV1oracle.work();\r\n        }\r\n        if(sushiswapV1Oracle.workable()){\r\n            sushiswapV1Oracle.work();\r\n        }\r\n        if(address(this).balance>0){\r\n            payable(tx.origin).transfer(address(this).balance);\r\n        }\r\n    }\r\n}"
    }
  }
}