{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/McdShifter_flat.sol":{"content":"\n// File: localhost/mcd/flashloan/MCDOpenProxyActions.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract GemLike {\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual;\n\n    function transferFrom(address, address, uint256) public virtual;\n\n    function deposit() public virtual payable;\n\n    function withdraw(uint256) public virtual;\n}\n\n\nabstract contract ManagerLike {\n    function cdpCan(address, uint256, address) public virtual view returns (uint256);\n\n    function ilks(uint256) public virtual view returns (bytes32);\n\n    function owns(uint256) public virtual view returns (address);\n\n    function urns(uint256) public virtual view returns (address);\n\n    function vat() public virtual view returns (address);\n\n    function open(bytes32, address) public virtual returns (uint256);\n\n    function give(uint256, address) public virtual;\n\n    function cdpAllow(uint256, address, uint256) public virtual;\n\n    function urnAllow(address, uint256) public virtual;\n\n    function frob(uint256, int256, int256) public virtual;\n\n    function flux(uint256, address, uint256) public virtual;\n\n    function move(uint256, address, uint256) public virtual;\n\n    function exit(address, uint256, address, uint256) public virtual;\n\n    function quit(uint256, address) public virtual;\n\n    function enter(address, uint256) public virtual;\n\n    function shift(uint256, uint256) public virtual;\n}\n\n\nabstract contract VatLike {\n    function can(address, address) public virtual view returns (uint256);\n\n    function ilks(bytes32) public virtual view returns (uint256, uint256, uint256, uint256, uint256);\n\n    function dai(address) public virtual view returns (uint256);\n\n    function urns(bytes32, address) public virtual view returns (uint256, uint256);\n\n    function frob(bytes32, address, address, address, int256, int256) public virtual;\n\n    function hope(address) public virtual;\n\n    function move(address, address, uint256) public virtual;\n}\n\n\nabstract contract GemJoinLike {\n    function dec() public virtual returns (uint256);\n\n    function gem() public virtual returns (GemLike);\n\n    function join(address, uint256) public virtual payable;\n\n    function exit(address, uint256) public virtual;\n}\n\n\nabstract contract GNTJoinLike {\n    function bags(address) public virtual view returns (address);\n\n    function make(address) public virtual returns (address);\n}\n\n\nabstract contract DaiJoinLike {\n    function vat() public virtual returns (VatLike);\n\n    function dai() public virtual returns (GemLike);\n\n    function join(address, uint256) public virtual payable;\n\n    function exit(address, uint256) public virtual;\n}\n\n\nabstract contract HopeLike {\n    function hope(address) public virtual;\n\n    function nope(address) public virtual;\n}\n\n\nabstract contract ProxyRegistryInterface {\n    function build(address) public virtual returns (address);\n}\n\n\nabstract contract EndLike {\n    function fix(bytes32) public virtual view returns (uint256);\n\n    function cash(bytes32, uint256) public virtual;\n\n    function free(bytes32) public virtual;\n\n    function pack(uint256) public virtual;\n\n    function skim(bytes32, address) public virtual;\n}\n\n\nabstract contract JugLike {\n    function drip(bytes32) public virtual returns (uint256);\n}\n\n\nabstract contract PotLike {\n    function pie(address) public virtual view returns (uint256);\n\n    function drip() public virtual returns (uint256);\n\n    function join(uint256) public virtual;\n\n    function exit(uint256) public virtual;\n}\n\n\nabstract contract ProxyRegistryLike {\n    function proxies(address) public virtual view returns (address);\n\n    function build(address) public virtual returns (address);\n}\n\n\nabstract contract ProxyLike {\n    function owner() public virtual view returns (address);\n}\n\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\ncontract Common {\n    uint256 constant RAY = 10**27;\n\n    // Internal functions\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\n    }\n\n    // Public functions\n    // solhint-disable-next-line func-name-mixedcase\n    function daiJoin_join(address apt, address urn, uint256 wad) public {\n        // Gets DAI from the user's wallet\n        DaiJoinLike(apt).dai().transferFrom(msg.sender, address(this), wad);\n        // Approves adapter to take the DAI amount\n        DaiJoinLike(apt).dai().approve(apt, wad);\n        // Joins DAI into the vat\n        DaiJoinLike(apt).join(urn, wad);\n    }\n}\n\n\ncontract MCDOpenProxyActions is Common {\n    // Internal functions\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    function toInt(uint256 x) internal pure returns (int256 y) {\n        y = int256(x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\n        rad = mul(wad, 10**27);\n    }\n\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before passing to frob function\n        // Adapters will automatically handle the difference of precision\n        wad = mul(amt, 10**(18 - GemJoinLike(gemJoin).dec()));\n    }\n\n    function _getDrawDart(address vat, address jug, address urn, bytes32 ilk, uint256 wad)\n        internal\n        returns (int256 dart)\n    {\n        // Updates stability fee rate\n        uint256 rate = JugLike(jug).drip(ilk);\n\n        // Gets DAI balance of the urn in the vat\n        uint256 dai = VatLike(vat).dai(urn);\n\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\n        if (dai < mul(wad, RAY)) {\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\n            dart = toInt(sub(mul(wad, RAY), dai) / rate);\n            // This is neeeded due lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\n            dart = mul(uint256(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\n        }\n    }\n\n    function _getWipeDart(address vat, uint256 dai, address urn, bytes32 ilk)\n        internal\n        view\n        returns (int256 dart)\n    {\n        // Gets actual rate from the vat\n        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\n        // Gets actual art value of the urn\n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\n\n        // Uses the whole dai balance in the vat to reduce the debt\n        dart = toInt(dai / rate);\n        // Checks the calculated dart is not higher than urn.art (total debt), otherwise uses its value\n        dart = uint256(dart) <= art ? -dart : -toInt(art);\n    }\n\n    function _getWipeAllWad(address vat, address usr, address urn, bytes32 ilk)\n        internal\n        view\n        returns (uint256 wad)\n    {\n        // Gets actual rate from the vat\n        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\n        // Gets actual art value of the urn\n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\n        // Gets actual dai amount in the urn\n        uint256 dai = VatLike(vat).dai(usr);\n\n        uint256 rad = sub(mul(art, rate), dai);\n        wad = rad / RAY;\n\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\n    }\n\n    // Public functions\n\n    function transfer(address gem, address dst, uint256 wad) public {\n        GemLike(gem).transfer(dst, wad);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function ethJoin_join(address apt, address urn) public payable {\n        // Wraps ETH in WETH\n        GemJoinLike(apt).gem().deposit{value: msg.value}();\n        // Approves adapter to take the WETH amount\n        GemJoinLike(apt).gem().approve(address(apt), msg.value);\n        // Joins WETH collateral into the vat\n        GemJoinLike(apt).join(urn, msg.value);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function gemJoin_join(address apt, address urn, uint256 wad, bool transferFrom) public {\n        // Only executes for tokens that have approval/transferFrom implementation\n        if (transferFrom) {\n            // Gets token from the user's wallet\n            GemJoinLike(apt).gem().transferFrom(msg.sender, address(this), wad);\n            // Approves adapter to take the token amount\n            GemJoinLike(apt).gem().approve(apt, wad);\n        }\n        // Joins token collateral into the vat\n        GemJoinLike(apt).join(urn, wad);\n    }\n\n    function hope(address obj, address usr) public {\n        HopeLike(obj).hope(usr);\n    }\n\n    function nope(address obj, address usr) public {\n        HopeLike(obj).nope(usr);\n    }\n\n    function open(address manager, bytes32 ilk, address usr) public returns (uint256 cdp) {\n        cdp = ManagerLike(manager).open(ilk, usr);\n    }\n\n    function give(address manager, uint256 cdp, address usr) public {\n        ManagerLike(manager).give(cdp, usr);\n    }\n\n    function move(address manager, uint256 cdp, address dst, uint256 rad) public {\n        ManagerLike(manager).move(cdp, dst, rad);\n    }\n\n    function frob(address manager, uint256 cdp, int256 dink, int256 dart) public {\n        ManagerLike(manager).frob(cdp, dink, dart);\n    }\n\n    function lockETH(address manager, address ethJoin, uint256 cdp) public payable {\n        // Receives ETH amount, converts it to WETH and joins it into the vat\n        ethJoin_join(ethJoin, address(this));\n        // Locks WETH amount into the CDP\n        VatLike(ManagerLike(manager).vat()).frob(\n            ManagerLike(manager).ilks(cdp),\n            ManagerLike(manager).urns(cdp),\n            address(this),\n            address(this),\n            toInt(msg.value),\n            0\n        );\n    }\n\n    function lockGem(address manager, address gemJoin, uint256 cdp, uint256 wad, bool transferFrom)\n        public\n    {\n        // Takes token amount from user's wallet and joins into the vat\n        gemJoin_join(gemJoin, address(this), wad, transferFrom);\n        // Locks token amount into the CDP\n        VatLike(ManagerLike(manager).vat()).frob(\n            ManagerLike(manager).ilks(cdp),\n            ManagerLike(manager).urns(cdp),\n            address(this),\n            address(this),\n            toInt(convertTo18(gemJoin, wad)),\n            0\n        );\n    }\n\n    function draw(address manager, address jug, address daiJoin, uint256 cdp, uint256 wad) public {\n        address urn = ManagerLike(manager).urns(cdp);\n        address vat = ManagerLike(manager).vat();\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        // Generates debt in the CDP\n        frob(manager, cdp, 0, _getDrawDart(vat, jug, urn, ilk, wad));\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\n        move(manager, cdp, address(this), toRad(wad));\n        // Allows adapter to access to proxy's DAI balance in the vat\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n            VatLike(vat).hope(daiJoin);\n        }\n        // Exits DAI to the user's wallet as a token\n        DaiJoinLike(daiJoin).exit(msg.sender, wad);\n    }\n\n    function lockETHAndDraw(\n        address manager,\n        address jug,\n        address ethJoin,\n        address daiJoin,\n        uint256 cdp,\n        uint256 wadD\n    ) public payable {\n        address urn = ManagerLike(manager).urns(cdp);\n        address vat = ManagerLike(manager).vat();\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        // Receives ETH amount, converts it to WETH and joins it into the vat\n        ethJoin_join(ethJoin, urn);\n        // Locks WETH amount into the CDP and generates debt\n        frob(manager, cdp, toInt(msg.value), _getDrawDart(vat, jug, urn, ilk, wadD));\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\n        move(manager, cdp, address(this), toRad(wadD));\n        // Allows adapter to access to proxy's DAI balance in the vat\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n            VatLike(vat).hope(daiJoin);\n        }\n        // Exits DAI to the user's wallet as a token\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\n    }\n\n    function openLockETHAndDraw(\n        address manager,\n        address jug,\n        address ethJoin,\n        address daiJoin,\n        bytes32 ilk,\n        uint256 wadD,\n        address owner\n    ) public payable returns (uint256 cdp) {\n        cdp = open(manager, ilk, address(this));\n        lockETHAndDraw(manager, jug, ethJoin, daiJoin, cdp, wadD);\n        give(manager, cdp, owner);\n    }\n\n    function lockGemAndDraw(\n        address manager,\n        address jug,\n        address gemJoin,\n        address daiJoin,\n        uint256 cdp,\n        uint256 wadC,\n        uint256 wadD,\n        bool transferFrom\n    ) public {\n        address urn = ManagerLike(manager).urns(cdp);\n        address vat = ManagerLike(manager).vat();\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        // Takes token amount from user's wallet and joins into the vat\n        gemJoin_join(gemJoin, urn, wadC, transferFrom);\n        // Locks token amount into the CDP and generates debt\n        frob(\n            manager,\n            cdp,\n            toInt(convertTo18(gemJoin, wadC)),\n            _getDrawDart(vat, jug, urn, ilk, wadD)\n        );\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\n        move(manager, cdp, address(this), toRad(wadD));\n        // Allows adapter to access to proxy's DAI balance in the vat\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n            VatLike(vat).hope(daiJoin);\n        }\n        // Exits DAI to the user's wallet as a token\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\n    }\n\n    function openLockGemAndDraw(\n        address manager,\n        address jug,\n        address gemJoin,\n        address daiJoin,\n        bytes32 ilk,\n        uint256 wadC,\n        uint256 wadD,\n        bool transferFrom,\n        address owner\n    ) public returns (uint256 cdp) {\n        cdp = open(manager, ilk, address(this));\n        lockGemAndDraw(manager, jug, gemJoin, daiJoin, cdp, wadC, wadD, transferFrom);\n        give(manager, cdp, owner);\n    }\n}\n\n// File: localhost/mcd/maker/Manager.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Manager {\n    function last(address) virtual public returns (uint);\n    function cdpCan(address, uint, address) virtual public view returns (uint);\n    function ilks(uint) virtual public view returns (bytes32);\n    function owns(uint) virtual public view returns (address);\n    function urns(uint) virtual public view returns (address);\n    function vat() virtual public view returns (address);\n    function open(bytes32, address) virtual public returns (uint);\n    function give(uint, address) virtual public;\n    function cdpAllow(uint, address, uint) virtual public;\n    function urnAllow(address, uint) virtual public;\n    function frob(uint, int, int) virtual public;\n    function flux(uint, address, uint) virtual public;\n    function move(uint, address, uint) virtual public;\n    function exit(address, uint, address, uint) virtual public;\n    function quit(uint, address) virtual public;\n    function enter(address, uint) virtual public;\n    function shift(uint, uint) virtual public;\n}\n\n// File: localhost/DS/DSNote.sol\n\npragma solidity ^0.6.0;\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4 indexed sig,\n        address indexed guy,\n        bytes32 indexed foo,\n        bytes32 indexed bar,\n        uint256 wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n// File: localhost/DS/DSAuthority.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n}\n\n// File: localhost/DS/DSAuth.sol\n\npragma solidity ^0.6.0;\n\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n// File: localhost/DS/DSProxy.sol\n\npragma solidity ^0.6.0;\n\n\n\n\nabstract contract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache; // global cache for contracts\n\n    constructor(address _cacheAddr) public {\n        require(setCache(_cacheAddr));\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (address target, bytes32 response);\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (bytes32 response);\n\n    //set new cache\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\n}\n\n\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n                case 1 {\n                    // throw if contract failed to deploy\n                    revert(0, 0)\n                }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\n// File: localhost/DS/DSMath.sol\n\npragma solidity ^0.6.0;\n\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n// File: localhost/mcd/saver_proxy/SaverProxyHelper.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n\n/// @title Helper methods for MCDSaverProxy\ncontract SaverProxyHelper is DSMath {\n\n    /// @notice Returns a normalized debt _amount based on the current rate\n    /// @param _amount Amount of dai to be normalized\n    /// @param _rate Current rate of the stability fee\n    /// @param _daiVatBalance Balance od Dai in the Vat for that CDP\n    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\n        if (_daiVatBalance < mul(_amount, RAY)) {\n            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\n            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\n        }\n    }\n\n    /// @notice Converts a number to Rad percision\n    /// @param _wad The input number in wad percision\n    function toRad(uint _wad) internal pure returns (uint) {\n        return mul(_wad, 10 ** 27);\n    }\n\n    /// @notice Converts a number to 18 decimal percision\n    /// @param _joinAddr Join address of the collateral\n    /// @param _amount Number to be converted\n    function convertTo18(address _joinAddr, uint256 _amount) internal returns (uint256) {\n        return mul(_amount, 10 ** (18 - Join(_joinAddr).dec()));\n    }\n\n    /// @notice Converts a uint to int and checks if positive\n    /// @param _x Number to be converted\n    function toPositiveInt(uint _x) internal pure returns (int y) {\n        y = int(_x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    /// @notice Gets Dai amount in Vat which can be added to Cdp\n    /// @param _vat Address of Vat contract\n    /// @param _urn Urn of the Cdp\n    /// @param _ilk Ilk of the Cdp\n    function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {\n        uint dai = Vat(_vat).dai(_urn);\n\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n\n        amount = toPositiveInt(dai / rate);\n        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\n    }\n\n    /// @notice Gets the whole debt of the CDP\n    /// @param _vat Address of Vat contract\n    /// @param _usr Address of the Dai holder\n    /// @param _urn Urn of the Cdp\n    /// @param _ilk Ilk of the Cdp\n    function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n        uint dai = Vat(_vat).dai(_usr);\n\n        uint rad = sub(mul(art, rate), dai);\n        daiAmount = rad / RAY;\n\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\n    }\n\n    /// @notice Gets the token address from the Join contract\n    /// @param _joinAddr Address of the Join contract\n    function getCollateralAddr(address _joinAddr) internal returns (address) {\n        return address(Join(_joinAddr).gem());\n    }\n\n    /// @notice Gets CDP info (collateral, debt)\n    /// @param _manager Manager contract\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    function getCdpInfo(Manager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\n        address vat = _manager.vat();\n        address urn = _manager.urns(_cdpId);\n\n        (uint collateral, uint debt) = Vat(vat).urns(_ilk, urn);\n        (,uint rate,,,) = Vat(vat).ilks(_ilk);\n\n        return (collateral, rmul(debt, rate));\n    }\n\n    /// @notice Address that owns the DSProxy that owns the CDP\n    /// @param _manager Manager contract\n    /// @param _cdpId Id of the CDP\n    function getOwner(Manager _manager, uint _cdpId) public view returns (address) {\n        DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));\n\n        return proxy.owner();\n    }\n}\n\n// File: localhost/utils/Address.sol\n\npragma solidity ^0.6.0;\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: localhost/utils/SafeERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     */\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: localhost/auth/AdminAuth.sol\n\npragma solidity ^0.6.0;\n\n\ncontract AdminAuth {\n\n    using SafeERC20 for ERC20;\n\n    address public owner;\n    address public admin;\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n    /// @param _admin Address of multisig that becomes admin\n    function setAdminByOwner(address _admin) public {\n        require(msg.sender == owner);\n        require(admin == address(0));\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function setAdminByAdmin(address _admin) public {\n        require(msg.sender == admin);\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function setOwnerByAdmin(address _owner) public {\n        require(msg.sender == admin);\n\n        owner = _owner;\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyOwner {\n        selfdestruct(payable(owner));\n    }\n\n    /// @notice  withdraw stuck funds\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(owner).transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(owner, _amount);\n        }\n    }\n}\n\n// File: localhost/utils/ZrxAllowlist.sol\n\npragma solidity ^0.6.0;\n\n\ncontract ZrxAllowlist is AdminAuth {\n\n    mapping (address => bool) public zrxAllowlist;\n\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n        zrxAllowlist[_zrxAddr] = _state;\n    }\n\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n        return zrxAllowlist[_zrxAddr];\n    }\n}\n\n// File: localhost/constants/ConstantAddressesExchangeKovan.sol\n\npragma solidity ^0.6.0;\n\n\ncontract ConstantAddressesExchangeKovan {\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    address payable public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\n\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\n\n    // new MCD contracts\n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\n\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\n\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\n\n    // Our contracts\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\n}\n\n// File: localhost/constants/ConstantAddressesExchangeMainnet.sol\n\npragma solidity ^0.6.0;\n\n\ncontract ConstantAddressesExchangeMainnet {\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x8EAdEAD848c3B3AAD12d9e4aEe698D4c5D7C7505;\n\n    // new MCD contracts\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\n\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\n\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\n\n    // Our contracts\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\n}\n\n// File: localhost/constants/ConstantAddressesExchange.sol\n\npragma solidity ^0.6.0;\n\n\n\n// solhint-disable-next-line no-empty-blocks\ncontract ConstantAddressesExchange is ConstantAddressesExchangeMainnet {}\n\n// File: localhost/interfaces/SaverExchangeInterface.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract SaverExchangeInterface {\n    function getBestPrice(\n        uint256 _amount,\n        address _srcToken,\n        address _destToken,\n        uint256 _exchangeType\n    ) public view virtual returns (address, uint256);\n}\n\n// File: localhost/interfaces/TokenInterface.sol\n\npragma solidity ^0.6.0;\n\nabstract contract TokenInterface {\n    function allowance(address, address) public virtual returns (uint256);\n\n    function balanceOf(address) public virtual returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(address, address, uint256) public virtual returns (bool);\n\n    function deposit() public virtual payable;\n\n    function withdraw(uint256) public virtual;\n}\n\n// File: localhost/mcd/saver_proxy/ExchangeHelper.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n\n\n/// @title Helper methods for integration with SaverExchange\ncontract ExchangeHelper is ConstantAddressesExchange {\n\n    using SafeERC20 for ERC20;\n\n    address public constant ZRX_ALLOWLIST_ADDR = 0x019739e288973F92bDD3c1d87178E206E51fd911;\n\n    /// @notice Swaps 2 tokens on the Saver Exchange\n    /// @dev ETH is sent with Weth address\n    /// @param _data [amount, minPrice, exchangeType, 0xPrice]\n    /// @param _src Token address of the source token\n    /// @param _dest Token address of the destination token\n    /// @param _exchangeAddress Address of 0x exchange that should be called\n    /// @param _callData data to call 0x exchange with\n    function swap(uint[4] memory _data, address _src, address _dest, address _exchangeAddress, bytes memory _callData) internal returns (uint) {\n        address wrapper;\n        uint price;\n        // [tokensReturned, tokensLeft]\n        uint[2] memory tokens;\n        bool success;\n\n        // tokensLeft is equal to amount at the beginning\n        tokens[1] = _data[0];\n\n        _src = wethToKyberEth(_src);\n        _dest = wethToKyberEth(_dest);\n\n        // use this to avoid stack too deep error\n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\n\n        // if _data[2] == 4 use 0x if possible\n        if (_data[2] == 4) {\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\n            }\n\n            (success, tokens[0], ) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\n\n            // if specifically 4, then require it to be successfull\n            require(success && tokens[0] > 0, \"0x transaction failed\");\n        }\n\n        if (tokens[0] == 0) {\n            (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(_data[0], orderAddresses[1], orderAddresses[2], _data[2]);\n\n            require(price > _data[1] || _data[3] > _data[1], \"Slippage hit\");\n\n            // handle 0x exchange, if equal price, try 0x to use less gas\n            if (_data[3] >= price) {\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\n                }\n\n                // when selling eth its possible that some eth isn't sold and it is returned back\n                (success, tokens[0], tokens[1]) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\n            }\n\n            // if there are more tokens left, try to sell them on other exchanges\n            if (tokens[1] > 0) {\n                // as it stands today, this can happend only when selling ETH\n                if (tokens[1] != _data[0]) {\n                    (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\n                }\n\n                require(price > _data[1], \"Slippage hit onchain price\");\n\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n                    uint tRet;\n                    (tRet,) = ExchangeInterface(wrapper).swapEtherToToken{value: tokens[1]}(tokens[1], orderAddresses[2], uint(-1));\n                    tokens[0] += tRet;\n                } else {\n                    ERC20(orderAddresses[1]).safeTransfer(wrapper, tokens[1]);\n\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\n                    } else {\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\n                    }\n                }\n            }\n        }\n\n        return tokens[0];\n    }\n\n    // @notice Takes order from 0x and returns bool indicating if it is successful\n    // @param _addresses [exchange, src, dst]\n    // @param _data Data to send with call\n    // @param _value Value to send with call\n    // @param _amount Amount to sell\n    function takeOrder(address[3] memory _addresses, bytes memory _data, uint _value, uint _amount) private returns(bool, uint, uint) {\n        bool success;\n\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_addresses[0])) {\n            (success, ) = _addresses[0].call{value: _value}(_data);\n        } else {\n            success = false;\n        }\n\n        uint tokensLeft = _amount;\n        uint tokensReturned = 0;\n        if (success){\n            // check how many tokens left from _src\n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\n                tokensLeft = address(this).balance;\n            } else {\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\n            }\n\n            // check how many tokens are returned\n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\n                tokensReturned = address(this).balance;\n            } else {\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\n            }\n        }\n\n        return (success, tokensReturned, tokensLeft);\n    }\n\n    /// @notice Converts WETH -> Kybers Eth address\n    /// @param _src Input address\n    function wethToKyberEth(address _src) internal pure returns (address) {\n        return _src == WETH_ADDRESS ? KYBER_ETH_ADDRESS : _src;\n    }\n}\n\n// File: localhost/mcd/maker/Join.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract Join {\n    bytes32 public ilk;\n\n    function dec() virtual public view returns (uint);\n    function gem() virtual public view returns (Gem);\n    function join(address, uint) virtual public payable;\n    function exit(address, uint) virtual public;\n}\n\n// File: localhost/mcd/maker/Gem.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Gem {\n    function dec() virtual public returns (uint);\n    function gem() virtual public returns (Gem);\n    function join(address, uint) virtual public payable;\n    function exit(address, uint) virtual public;\n\n    function approve(address, uint) virtual public;\n    function transfer(address, uint) virtual public returns (bool);\n    function transferFrom(address, address, uint) virtual public returns (bool);\n    function deposit() virtual public payable;\n    function withdraw(uint) virtual public;\n    function allowance(address, address) virtual public returns (uint);\n}\n\n// File: localhost/mcd/maker/Vat.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Vat {\n\n    struct Urn {\n        uint256 ink;   // Locked Collateral  [wad]\n        uint256 art;   // Normalised Debt    [wad]\n    }\n\n    struct Ilk {\n        uint256 Art;   // Total Normalised Debt     [wad]\n        uint256 rate;  // Accumulated Rates         [ray]\n        uint256 spot;  // Price with Safety Margin  [ray]\n        uint256 line;  // Debt Ceiling              [rad]\n        uint256 dust;  // Urn Debt Floor            [rad]\n    }\n\n    mapping (bytes32 => mapping (address => Urn )) public urns;\n    mapping (bytes32 => Ilk)                       public ilks;\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\n\n    function can(address, address) virtual public view returns (uint);\n    function dai(address) virtual public view returns (uint);\n    function frob(bytes32, address, address, address, int, int) virtual public;\n    function hope(address) virtual public;\n    function move(address, address, uint) virtual public;\n    function fork(bytes32, address, address, int, int) virtual public;\n}\n\n// File: localhost/mcd/maker/DaiJoin.sol\n\npragma solidity ^0.6.0;\n\n\n\nabstract contract DaiJoin {\n    function vat() public virtual returns (Vat);\n    function dai() public virtual returns (Gem);\n    function join(address, uint) public virtual payable;\n    function exit(address, uint) public virtual;\n}\n\n// File: localhost/mcd/maker/Jug.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Jug {\n    struct Ilk {\n        uint256 duty;\n        uint256  rho;\n    }\n\n    mapping (bytes32 => Ilk) public ilks;\n\n    function drip(bytes32) public virtual returns (uint);\n}\n\n// File: localhost/interfaces/PipInterface.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract PipInterface {\n    function read() public virtual returns (bytes32);\n}\n\n// File: localhost/mcd/maker/Spotter.sol\n\npragma solidity ^0.6.0;\n\n\nabstract contract Spotter {\n    struct Ilk {\n        PipInterface pip;\n        uint256 mat;\n    }\n\n    mapping (bytes32 => Ilk) public ilks;\n\n    uint256 public par;\n\n}\n\n// File: localhost/mcd/Discount.sol\n\npragma solidity ^0.6.0;\n\n\ncontract Discount {\n    address public owner;\n    mapping(address => CustomServiceFee) public serviceFees;\n\n    uint256 constant MAX_SERVICE_FEE = 400;\n\n    struct CustomServiceFee {\n        bool active;\n        uint256 amount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint256) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint256 _fee) public {\n        require(msg.sender == owner, \"Only owner\");\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n    }\n\n    function disableServiceFee(address _user) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n    }\n}\n\n// File: localhost/loggers/SaverLogger.sol\n\npragma solidity ^0.6.0;\n\ncontract SaverLogger {\n    event Repay(\n        uint256 indexed cdpId,\n        address indexed owner,\n        uint256 collateralAmount,\n        uint256 daiAmount\n    );\n    event Boost(\n        uint256 indexed cdpId,\n        address indexed owner,\n        uint256 daiAmount,\n        uint256 collateralAmount\n    );\n\n    // solhint-disable-next-line func-name-mixedcase\n    function LogRepay(uint256 _cdpId, address _owner, uint256 _collateralAmount, uint256 _daiAmount)\n        public\n    {\n        emit Repay(_cdpId, _owner, _collateralAmount, _daiAmount);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function LogBoost(uint256 _cdpId, address _owner, uint256 _daiAmount, uint256 _collateralAmount)\n        public\n    {\n        emit Boost(_cdpId, _owner, _daiAmount, _collateralAmount);\n    }\n}\n\n// File: localhost/interfaces/ERC20.sol\n\npragma solidity ^0.6.0;\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: localhost/interfaces/ExchangeInterface.sol\n\npragma solidity ^0.6.0;\n\n\n//TODO: currenlty only adjusted to kyber, but should be genric interfaces for more dec. exchanges\ninterface ExchangeInterface {\n    function swapEtherToToken(uint256 _ethAmount, address _tokenAddress, uint256 _maxAmount)\n        external\n        payable\n        returns (uint256, uint256);\n\n    function swapTokenToEther(address _tokenAddress, uint256 _amount, uint256 _maxAmount)\n        external\n        returns (uint256);\n\n    function swapTokenToToken(address _src, address _dest, uint256 _amount)\n        external\n        payable\n        returns (uint256);\n\n    function getExpectedRate(address src, address dest, uint256 srcQty)\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\n// File: localhost/mcd/saver_proxy/MCDSaverProxy.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n\n\n\n\n\n\n/// @title Implements Boost and Repay for MCD CDPs\ncontract MCDSaverProxy is SaverProxyHelper, ExchangeHelper {\n\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\n    bytes32 public constant ETH_ILK = 0x4554482d41000000000000000000000000000000000000000000000000000000;\n    bytes32 public constant USDC_ILK = 0x555344432d410000000000000000000000000000000000000000000000000000;\n\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\n    Vat public constant vat = Vat(VAT_ADDRESS);\n    DaiJoin public constant daiJoin = DaiJoin(DAI_JOIN_ADDRESS);\n    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\n\n    /// @notice Checks if the collateral amount is increased after boost\n    /// @param _cdpId The Id of the CDP\n    modifier boostCheck(uint _cdpId) {\n        bytes32 ilk = manager.ilks(_cdpId);\n        address urn = manager.urns(_cdpId);\n\n        (uint collateralBefore, ) = vat.urns(ilk, urn);\n\n        _;\n\n        (uint collateralAfter, ) = vat.urns(ilk, urn);\n\n        require(collateralAfter > collateralBefore);\n    }\n\n    /// @notice Checks if ratio is increased after repay\n    /// @param _cdpId The Id of the CDP\n    modifier repayCheck(uint _cdpId) {\n        bytes32 ilk = manager.ilks(_cdpId);\n\n        uint beforeRatio = getRatio(_cdpId, ilk);\n\n        _;\n\n        uint afterRatio = getRatio(_cdpId, ilk);\n\n        require(afterRatio > beforeRatio || afterRatio == 0);\n    }\n\n    /// @notice Repay - draws collateral, converts to Dai and repays the debt\n    /// @dev Must be called by the DSProxy contract that owns the CDP\n    /// @param _data Uint array [cdpId, amount, minPrice, exchangeType, gasCost, 0xPrice]\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _exchangeAddress Address of 0x exchange that should be called\n    /// @param _callData data to call 0x exchange with\n    function repay(\n        // cdpId, amount, minPrice, exchangeType, gasCost, 0xPrice\n        uint[6] memory _data,\n        address _joinAddr,\n        address _exchangeAddress,\n        bytes memory _callData\n    ) public payable repayCheck(_data[0]) {\n\n        address owner = getOwner(manager, _data[0]);\n        bytes32 ilk = manager.ilks(_data[0]);\n\n        // uint collDrawn;\n        // uint daiAmount;\n        // uint daiAfterFee;\n        uint[3] memory temp;\n\n        temp[0] = drawCollateral(_data[0], ilk, _joinAddr, _data[1]);\n\n                                // collDrawn, minPrice, exchangeType, 0xPrice\n        uint[4] memory swapData = [temp[0], _data[2], _data[3], _data[5]];\n        temp[1] = swap(swapData, getCollateralAddr(_joinAddr), DAI_ADDRESS, _exchangeAddress, _callData);\n        temp[2] = sub(temp[1], getFee(temp[1], _data[4], owner));\n\n        paybackDebt(_data[0], ilk, temp[2], owner);\n\n        // if there is some eth left (0x fee), return it to user\n        if (address(this).balance > 0) {\n            tx.origin.transfer(address(this).balance);\n        }\n\n        SaverLogger(LOGGER_ADDRESS).LogRepay(_data[0], owner, temp[0], temp[1]);\n    }\n\n    /// @notice Boost - draws Dai, converts to collateral and adds to CDP\n    /// @dev Must be called by the DSProxy contract that owns the CDP\n    /// @param _data Uint array [cdpId, daiAmount, minPrice, exchangeType, gasCost, 0xPrice]\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _exchangeAddress Address of 0x exchange that should be called\n    /// @param _callData data to call 0x exchange with\n    function boost(\n        // cdpId, daiAmount, minPrice, exchangeType, gasCost, 0xPrice\n        uint[6] memory _data,\n        address _joinAddr,\n        address _exchangeAddress,\n        bytes memory _callData\n    ) public payable boostCheck(_data[0]) {\n        address owner = getOwner(manager, _data[0]);\n        bytes32 ilk = manager.ilks(_data[0]);\n\n        // uint daiDrawn;\n        // uint daiAfterFee;\n        // uint collateralAmount;\n        uint[3] memory temp;\n\n        temp[0] = drawDai(_data[0], ilk, _data[1]);\n        temp[1] = sub(temp[0], getFee(temp[0], _data[4], owner));\n                                // daiAfterFee, minPrice, exchangeType, 0xPrice\n        uint[4] memory swapData = [temp[1], _data[2], _data[3], _data[5]];\n        temp[2] = swap(swapData, DAI_ADDRESS, getCollateralAddr(_joinAddr), _exchangeAddress, _callData);\n\n        addCollateral(_data[0], _joinAddr, temp[2]);\n\n        // if there is some eth left (0x fee), return it to user\n        if (address(this).balance > 0) {\n            tx.origin.transfer(address(this).balance);\n        }\n\n        SaverLogger(LOGGER_ADDRESS).LogBoost(_data[0], owner, temp[0], temp[2]);\n    }\n\n    /// @notice Draws Dai from the CDP\n    /// @dev If _daiAmount is bigger than max available we'll draw max\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @param _daiAmount Amount of Dai to draw\n    function drawDai(uint _cdpId, bytes32 _ilk, uint _daiAmount) internal returns (uint) {\n        uint rate = Jug(JUG_ADDRESS).drip(_ilk);\n        uint daiVatBalance = vat.dai(manager.urns(_cdpId));\n\n        uint maxAmount = getMaxDebt(_cdpId, _ilk);\n\n        if (_daiAmount >= maxAmount) {\n            _daiAmount = sub(maxAmount, 1);\n        }\n\n        manager.frob(_cdpId, int(0), normalizeDrawAmount(_daiAmount, rate, daiVatBalance));\n        manager.move(_cdpId, address(this), toRad(_daiAmount));\n\n        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\n            vat.hope(DAI_JOIN_ADDRESS);\n        }\n\n        DaiJoin(DAI_JOIN_ADDRESS).exit(address(this), _daiAmount);\n\n        return _daiAmount;\n    }\n\n    /// @notice Adds collateral to the CDP\n    /// @param _cdpId Id of the CDP\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _amount Amount of collateral to add\n    function addCollateral(uint _cdpId, address _joinAddr, uint _amount) internal {\n        int convertAmount = 0;\n\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            Join(_joinAddr).gem().deposit{value: _amount}();\n            convertAmount = toPositiveInt(_amount);\n        } else {\n            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\n        }\n\n        Join(_joinAddr).gem().approve(_joinAddr, _amount);\n        Join(_joinAddr).join(address(this), _amount);\n\n        vat.frob(\n            manager.ilks(_cdpId),\n            manager.urns(_cdpId),\n            address(this),\n            address(this),\n            convertAmount,\n            0\n        );\n\n    }\n\n    /// @notice Draws collateral and returns it to DSProxy\n    /// @dev If _amount is bigger than max available we'll draw max\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _amount Amount of collateral to draw\n    function drawCollateral(uint _cdpId, bytes32 _ilk, address _joinAddr, uint _amount) internal returns (uint) {\n        uint maxCollateral = getMaxCollateral(_cdpId, _ilk, _joinAddr);\n\n        if (_amount >= maxCollateral) {\n            _amount = sub(maxCollateral, 1);\n        }\n\n        uint frobAmount = _amount;\n\n        if (Join(_joinAddr).dec() != 18) {\n            frobAmount = _amount * (10 ** (18 - Join(_joinAddr).dec()));\n        }\n\n        manager.frob(_cdpId, -toPositiveInt(frobAmount), 0);\n        manager.flux(_cdpId, address(this), frobAmount);\n\n        Join(_joinAddr).exit(address(this), _amount);\n\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            Join(_joinAddr).gem().withdraw(_amount); // Weth -> Eth\n        }\n\n        return _amount;\n    }\n\n    /// @notice Paybacks Dai debt\n    /// @dev If the _daiAmount is bigger than the whole debt, returns extra Dai\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @param _daiAmount Amount of Dai to payback\n    /// @param _owner Address that owns the DSProxy that owns the CDP\n    function paybackDebt(uint _cdpId, bytes32 _ilk, uint _daiAmount, address _owner) internal {\n        address urn = manager.urns(_cdpId);\n\n        uint wholeDebt = getAllDebt(VAT_ADDRESS, urn, urn, _ilk);\n\n        if (_daiAmount > wholeDebt) {\n            ERC20(DAI_ADDRESS).transfer(_owner, sub(_daiAmount, wholeDebt));\n            _daiAmount = wholeDebt;\n        }\n\n        daiJoin.dai().approve(DAI_JOIN_ADDRESS, _daiAmount);\n        daiJoin.join(urn, _daiAmount);\n\n        manager.frob(_cdpId, 0, normalizePaybackAmount(VAT_ADDRESS, urn, _ilk));\n    }\n\n    /// @notice Calculates the fee amount\n    /// @param _amount Dai amount that is converted\n    /// @param _gasCost Used for Monitor, estimated gas cost of tx\n    /// @param _owner The address that controlls the DSProxy that owns the CDP\n    function getFee(uint _amount, uint _gasCost, address _owner) internal returns (uint feeAmount) {\n        uint fee = SERVICE_FEE;\n\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_owner)) {\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_owner);\n        }\n\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\n\n        if (_gasCost != 0) {\n            uint ethDaiPrice = getPrice(ETH_ILK);\n            _gasCost = rmul(_gasCost, ethDaiPrice);\n\n            feeAmount = add(feeAmount, _gasCost);\n        }\n\n        // fee can't go over 20% of the whole amount\n        if (feeAmount > (_amount / 5)) {\n            feeAmount = _amount / 5;\n        }\n\n        ERC20(DAI_ADDRESS).transfer(WALLET_ID, feeAmount);\n    }\n\n    /// @notice Gets the maximum amount of collateral available to draw\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @param _joinAddr Joind address of collateral\n    /// @dev Substracts 10 wei to aviod rounding error later on\n    function getMaxCollateral(uint _cdpId, bytes32 _ilk, address _joinAddr) public view returns (uint) {\n        uint price = getPrice(_ilk);\n\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        (, uint mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\n\n        uint maxCollateral = sub(sub(collateral, (div(mul(mat, debt), price))), 10);\n\n        uint normalizeMaxCollateral = maxCollateral;\n\n        if (Join(_joinAddr).dec() != 18) {\n            normalizeMaxCollateral = maxCollateral / (10 ** (18 - Join(_joinAddr).dec()));\n        }\n\n        return normalizeMaxCollateral;\n    }\n\n    /// @notice Gets the maximum amount of debt available to generate\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @dev Substracts 10 wei to aviod rounding error later on\n    function getMaxDebt(uint _cdpId, bytes32 _ilk) public virtual view returns (uint) {\n        uint price = getPrice(_ilk);\n\n        (, uint mat) = spotter.ilks(_ilk);\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        return sub(sub(div(mul(collateral, price), mat), debt), 10);\n    }\n\n    /// @notice Gets a price of the asset\n    /// @param _ilk Ilk of the CDP\n    function getPrice(bytes32 _ilk) public view returns (uint) {\n        (, uint mat) = spotter.ilks(_ilk);\n        (,,uint spot,,) = vat.ilks(_ilk);\n\n        return rmul(rmul(spot, spotter.par()), mat);\n    }\n\n    /// @notice Gets CDP ratio\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    function getRatio(uint _cdpId, bytes32 _ilk) public view returns (uint) {\n        uint price = getPrice( _ilk);\n\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        if (debt == 0) return 0;\n\n        return rdiv(wmul(collateral, price), debt);\n    }\n\n    /// @notice Gets CDP info (collateral, debt, price, ilk)\n    /// @param _cdpId Id of the CDP\n    function getCdpDetailedInfo(uint _cdpId) public view returns (uint collateral, uint debt, uint price, bytes32 ilk) {\n        address urn = manager.urns(_cdpId);\n        ilk = manager.ilks(_cdpId);\n\n        (collateral, debt) = vat.urns(ilk, urn);\n        (,uint rate,,,) = vat.ilks(ilk);\n\n        debt = rmul(debt, rate);\n        price = getPrice(ilk);\n    }\n\n}\n\n// File: localhost/interfaces/ILoanShifter.sol\n\npragma solidity ^0.6.0;\n\nabstract contract ILoanShifter {\n    function getLoanAmount(uint, address) public view virtual returns(uint);\n    function getUnderlyingAsset(address _addr) public view virtual returns (address);\n}\n\n// File: localhost/shifter/protocols/McdShifter.sol\n\npragma solidity ^0.6.0;\n\n\n\n\ncontract McdShifter is MCDSaverProxy {\n\n    address public constant OPEN_PROXY_ACTIONS = 0x6d0984E80a86f26c0dd564ca0CF74a8E9Da03305;\n\n    function getLoanAmount(uint _cdpId, address _joinAddr) public view virtual returns(uint loanAmount) {\n        bytes32 ilk = manager.ilks(_cdpId);\n\n        (, uint rate,,,) = vat.ilks(ilk);\n        (, uint art) = vat.urns(ilk, manager.urns(_cdpId));\n        uint dai = vat.dai(manager.urns(_cdpId));\n\n        uint rad = sub(mul(art, rate), dai);\n        loanAmount = rad / RAY;\n    }\n\n    function close(\n        uint _cdpId,\n        address _joinAddr,\n        uint _loanAmount,\n        uint _collateral\n    ) public {\n        address owner = getOwner(manager, _cdpId);\n        bytes32 ilk = manager.ilks(_cdpId);\n        (uint maxColl, ) = getCdpInfo(manager, _cdpId, ilk);\n\n        // repay dai debt cdp\n        paybackDebt(_cdpId, ilk, _loanAmount, owner);\n\n        maxColl = _collateral > maxColl ? maxColl : _collateral;\n\n        // withdraw collateral from cdp\n        drawMaxCollateral(_cdpId, _joinAddr, maxColl);\n\n        // send back to msg.sender\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            msg.sender.transfer(address(this).balance);\n        } else {\n            ERC20 collToken = ERC20(getCollateralAddr(_joinAddr));\n            collToken.transfer(msg.sender, collToken.balanceOf(address(this)));\n        }\n    }\n\n    function open(\n        uint _cdpId,\n        address _joinAddr,\n        uint _collAmount,\n        uint _debtAmount\n    ) public {\n        if (_cdpId == 0) {\n            openAndWithdraw(_collAmount, _debtAmount, msg.sender, _joinAddr);\n        } else {\n            // add collateral\n            addCollateral(_cdpId, _joinAddr, _collAmount);\n            // draw debt\n            drawDai(_cdpId, manager.ilks(_cdpId), _debtAmount);\n        }\n\n        // transfer to repay FL\n        ERC20(DAI_ADDRESS).transfer(msg.sender, ERC20(DAI_ADDRESS).balanceOf(address(this)));\n\n        if (address(this).balance > 0) {\n            tx.origin.transfer(address(this).balance);\n        }\n    }\n\n    function openAndWithdraw(uint _collAmount, uint _debtAmount, address _proxy, address _joinAddrTo) internal {\n        bytes32 ilk = Join(_joinAddrTo).ilk();\n\n        if (_joinAddrTo == ETH_JOIN_ADDRESS) {\n            MCDOpenProxyActions(OPEN_PROXY_ACTIONS).openLockETHAndDraw{value: address(this).balance}(\n                address(manager),\n                JUG_ADDRESS,\n                ETH_JOIN_ADDRESS,\n                DAI_JOIN_ADDRESS,\n                ilk,\n                _debtAmount,\n                _proxy\n            );\n        } else {\n            ERC20(getCollateralAddr(_joinAddrTo)).approve(OPEN_PROXY_ACTIONS, uint256(-1));\n\n            MCDOpenProxyActions(OPEN_PROXY_ACTIONS).openLockGemAndDraw(\n                address(manager),\n                JUG_ADDRESS,\n                _joinAddrTo,\n                DAI_JOIN_ADDRESS,\n                ilk,\n                _collAmount,\n                _debtAmount,\n                true,\n                _proxy\n            );\n        }\n    }\n\n\n    function drawMaxCollateral(uint _cdpId, address _joinAddr, uint _amount) internal returns (uint) {\n        manager.frob(_cdpId, -toPositiveInt(_amount), 0);\n        manager.flux(_cdpId, address(this), _amount);\n\n        uint joinAmount = _amount;\n\n        if (Join(_joinAddr).dec() != 18) {\n            joinAmount = _amount / (10 ** (18 - Join(_joinAddr).dec()));\n        }\n\n        Join(_joinAddr).exit(address(this), joinAmount);\n\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            Join(_joinAddr).gem().withdraw(joinAmount); // Weth -> Eth\n        }\n\n        return joinAmount;\n    }\n\n}\n"}}}