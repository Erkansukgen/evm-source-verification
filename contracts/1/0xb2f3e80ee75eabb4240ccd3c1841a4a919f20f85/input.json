{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/MiniswapReward.sol":{"content":"/**\n * @title MINISWAP REWARDS CONTRACT\n */\n// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\nimport \"./interfaces/IERC20.sol\";\n\ncontract MiniswapReward {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function sendTokenTo(address token,address to,uint amount) public{\n        require(msg.sender == owner,\"forbidden\");\n        IERC20(token).transfer(to,amount);\n    }\n    \n    function dividends(address tokenAddr,address[] memory toAddr,uint256[] memory value) public {\n        require(msg.sender == owner,\"forbidden\");\n        require(toAddr.length == value.length && toAddr.length >= 1);\n        IERC20 erc20 = IERC20(tokenAddr);\n        for (uint256 i = 0; i < toAddr.length; i++) {\n            if (!erc20.transfer(toAddr[i], value[i])) {\n                revert();\n            }\n        }\n    }    \n}\n\n"},"browser/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"}}}