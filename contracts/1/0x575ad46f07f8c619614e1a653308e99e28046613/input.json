{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Lol.sol": {
      "content": "pragma solidity 0.6.8;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    \n    function balanceOf(address account) external view returns (uint256);\n    \n    function transfer(address, uint256) external returns (bool);\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n    \n    function approve(address, uint) external returns (bool);\n    \n    function transferFrom(address, address, uint256) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n}\n\n\ncontract Hedget is ERC20 {\n    \n    using SafeMath for uint256;\n    \n    uint256 public decimals = 18;\n    string public name;\n    string public symbol;\n    \n    uint256 public override totalSupply = 1000000000 * (10 ** decimals);\n    \n    \n    mapping(address => mapping(address => uint256)) public override allowance;\n    mapping(address => uint256) public override balanceOf;\n    \n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() public {\n        balanceOf[msg.sender] = totalSupply;\n        name = \"Hedget\";\n        symbol = \"HGET\";\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(_value <= balanceOf[_from]);\n        require(balanceOf[_to] <= balanceOf[_to].add(_value));\n        \n        balanceOf[_from] = balanceOf[_from].sub(_value);    \n        balanceOf[_to] = balanceOf[_to].add(_value);\n        \n        emit Transfer(_from, _to, _value);\n    }\n\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        \n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n    }\n}\n"
    }
  }
}