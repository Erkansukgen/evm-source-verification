{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"DegenData-Paywall/degendata-access.sol":{"content":"pragma solidity ^0.8.0;\n\n/*\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n----------       -----------    --------------   -----------    ------        ---\n-----------      -----------    --------------   -----------    ---  --       --- \n---     -----    ---            ---              ---            ---   ---     ---\n---     ------   -------        ---    -------   -------        ---    ---    ---\n---     ------   -------        ---    -------   -------        ---     ---   ---\n---     -----    ---            ---        ---   ---            ---      ---  ---\n-----------      -----------    --------------   -----------    ---       --- ---  \n----------       -----------    --------------   -----------    ---        ------\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     ----------              -----        -------------         -----\n     -----------            --- ---       -------------        --- ---\n     ---     -----         ---   ---           ---            ---   ---\n     ---     ------       ---     ---          ---           ---     ---\n     ---     ------      -------------         ---          -------------    \n     ---     -----      ---------------        ---         ---------------\n     -----------       ---           ---       ---        ---           ---\n     ----------       ---             ---      ---       ---             ---\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*/\n\n/*\n@Title DegenData Pro Degen Access Contract.\n@Author DegenData.\n@Notice DegenData.io access contract. \n*/\ncontract DegenDataAccess {\n    //StateVariables\n    address public owner;\n    uint256 public registrationFee;\n    address[] public addressList;\n\n    //Customer Struct\n    struct Customer {\n        bool isPaid;\n        uint256 expirationDate;\n    }\n\n    //Address to struct mapping for customers\n    mapping(address => Customer) public UserRegistion;\n\n    //@Dev Constructor setting intital owwner set to contract deployer & initializes regestration Fee to .069ETH.\n    constructor() {\n        owner = msg.sender;\n        registrationFee = .069 ether;\n    }\n\n    //@Dev modifier: OnlyOwner requirement for admin functions.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only Owner Can Perform this function\");\n        _;\n    }\n\n    //fallback\n    fallback() external payable {\n        revert();\n    }\n\n    //@dev returns the number customers that have subscribed.\n    function getCustomerCount() public view returns (uint256) {\n        return addressList.length;\n    }\n\n    //@dev customer registration function. Checks if customer exist first then adds to customers array. otherwai\n    function register() public payable {\n        require(msg.value >= registrationFee, \"Insufficient funds sent\");\n        require(\n            UserRegistion[msg.sender].isPaid == false,\n            \"You already registered you knucklehead\"\n        );\n\n        if (UserRegistion[msg.sender].expirationDate == 0) {\n            addressList.push(msg.sender);\n            UserRegistion[msg.sender].isPaid = true;\n            UserRegistion[msg.sender].expirationDate =\n                block.timestamp +\n                365 days;\n        }\n\n        if (\n            UserRegistion[msg.sender].expirationDate > block.timestamp &&\n            UserRegistion[msg.sender].isPaid == false\n        ) {\n            UserRegistion[msg.sender].isPaid = true;\n            UserRegistion[msg.sender].expirationDate =\n                block.timestamp +\n                365 days;\n        }\n    }\n\n    //@dev checks if a user is past their subscription expiration date.\n    function userPastExpiration(address _address) public view returns (bool) {\n        if (\n            block.timestamp > UserRegistion[_address].expirationDate &&\n            UserRegistion[_address].expirationDate != 0\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    // ADMIN FUNCTIONS\n    // @dev sets new `owner` state variable. Granting new owner control to admin functions.\n    // @param address.New address to be set.\n    function setNewOwner(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n\n    // @dev sets new `registrationFee` state variable. Owner can set access price.\n    // @param  value to set new registration fee. Remember to set value to approiate decimal places. 1 ETH = 1000000000000000000, .069 ETH = 69000000000000000\n    function setNewRegistrationPrice(uint256 _newFee) public onlyOwner {\n        registrationFee = _newFee;\n    }\n\n    // @dev Will evaluate if an array of addresses are past their subscription date and set their payment status to false .\n    // @param array of address.\n    function resetUserPaidStatus(address[] memory _address) public onlyOwner {\n        for (uint256 i = 0; i < _address.length; i++) {\n            if (userPastExpiration(_address[i])) {\n                UserRegistion[_address[i]].isPaid = false;\n            }\n        }\n    }\n    \n     // @dev Will set their payment status to false .\n    // @param address.\n    function resetUserPaidFlag(address _address) public onlyOwner {\n            UserRegistion[_address].isPaid = false;\n    }\n\n    //@Dev Allow Owner of the contract to withdraw the balances to themselves.\n    function withdrawToOwner() public onlyOwner {\n        payable(owner).transfer(address(this).balance);\n    }\n\n    // @Dev Allow Owner of the contract to withdraw a specified amount to a different address.\n    // @Notice Could be used for funding a DegenDao contract, another dApp, or gitcoin Grant.\n    function withdrawToAddress(address _recipient, uint256 _amount)\n        public\n        onlyOwner\n    {\n        payable(_recipient).transfer(_amount);\n    }\n    \n\n    //@Dev Allow owner of the contract to set an address to True in mapping without payment.\n    function giveAccountAway(address _address) public onlyOwner {\n        UserRegistion[_address].isPaid = true;\n    }\n}\n"}}}