{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/pairquery.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface PQIERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface PQIUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ncontract PairQuery {\n    // a method to return balance without failure\n    function tokenBalance(address owner, address token) private view returns (uint balance) {\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\"balanceOf(address)\", owner));\n        if (success) {\n            (balance) = abi.decode(data, (uint));\n        }\n    }\n\n    function getBalancesReserves(address pair) public view returns (\n           uint bal0, uint bal1, uint res0, uint res1, uint blockNr) {\n        blockNr = block.number;\n        bal0 = tokenBalance(pair, PQIUniswapV2Pair(pair).token0());\n        bal1 = tokenBalance(pair, PQIUniswapV2Pair(pair).token1());\n        (res0, res1,) = PQIUniswapV2Pair(pair).getReserves();\n    }\n\n    function getBalancesReservesMulti(address[] memory pairs) public view returns (\n           uint[] memory bal0, uint[] memory bal1, uint[] memory res0, uint[] memory res1, uint blockNr) {\n        blockNr = block.number;\n        bal0 = new uint[](pairs.length);\n        bal1 = new uint[](pairs.length);\n        res0 = new uint[](pairs.length);\n        res1 = new uint[](pairs.length);\n\n        for (uint i = 0; i < pairs.length; i++) {\n            bal0[i] = tokenBalance(pairs[i], PQIUniswapV2Pair(pairs[i]).token0());\n            bal1[i] = tokenBalance(pairs[i], PQIUniswapV2Pair(pairs[i]).token1());\n            (res0[i], res1[i],) = PQIUniswapV2Pair(pairs[i]).getReserves();\n        }\n    }\n\n    function getLiqudityAndReserve(address pair) public view returns (\n            uint liquidity, uint totalSupply, uint blockNr) {\n        blockNr = block.number;\n        liquidity = tokenBalance(pair, pair); // it is basically self balance\n        totalSupply = PQIERC20(pair).totalSupply();\n    }\n\n    function getLiquidityAndReserveMulti(address[] memory pairs) public view returns (\n           uint[] memory liquidity, uint[] memory totalSupply, uint blockNr) {\n        blockNr = block.number;\n        liquidity = new uint[](pairs.length);\n        totalSupply = new uint[](pairs.length);\n\n        for (uint i = 0; i < pairs.length; i++) {\n            liquidity[i] = tokenBalance(pairs[i], pairs[i]); // it is basically self balance\n            totalSupply[i] = PQIERC20(pairs[i]).totalSupply();\n        }\n    }\n}\n"
    }
  }
}