{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/TheRushV1.sol": {
      "content": "pragma solidity ^0.7.5;\ncontract SafeMath { //standard safemath library\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return safeSub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function safeSub(uint256 a, uint256 b, string memory error) internal pure returns (uint256) {\n        require(b <= a, error);\n        uint256 c = a - b;\n        return c;\n    }\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return safeDiv(a, b, \"SafeMath: division by zero\");\n    }\n    function safeDiv(uint256 a, uint256 b, string memory error) internal pure returns (uint256) {\n        require(b > 0, error);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    function safeExponent(uint256 a,uint256 b) internal pure returns (uint256) {\n      uint256 result;\n      assembly {\n          result:=exp(a, b)\n      }\n      return result;\n  }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function mint(address to, uint256 amount) external returns (bool);\n    function slash(uint256 value) external returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ncontract Ownable {\n    address payable public owner;\n    address payable public newOwner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    constructor() {\n        _trasnferOwnership(msg.sender);\n    }\n    function _trasnferOwnership(address payable _whom) internal {\n        emit OwnershipTransferred(owner,_whom);\n        owner = _whom;\n    }\n}\n\n\ncontract SURGEStaking is SafeMath {\n    uint256 public constant DECIMAL_NOMINATOR = 10**18;\n    uint256 public constant rewardBreakingPoint = 30;\n    uint256 public constant beforeBreakPoint = 100;    // used in 100 mulitipliction\n    uint256 public constant aterBreakPoint = 150;    // used in 100 mulitipliction\n    uint256 private totalSurgeBalance;\n    uint256 public rewardsAllocated;\n    bool public enabled = false;\n    IERC20 public constant SurgeToken = IERC20(0x38B27df57d2C1b92bd88B582BbE88816354a7f62);//UPATE WITH ADDRESS FROM MAINNET\n    IERC20 public constant StakingToken = IERC20(0x38B27df57d2C1b92bd88B582BbE88816354a7f62); //UPATE WITH ADDRESS FROM MAINNET\n    address public owner;\n\n    mapping(address => uint256) public stakedAmount;\n    mapping(address => uint256) public lastStack;\n\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n\n    constructor() {\n    owner = msg.sender;\n    SurgeToken.approve(address(this),115792089237316195423570985008687907853269984665640564039457584007913129639935);\n    StakingToken.approve(address(this),115792089237316195423570985008687907853269984665640564039457584007913129639935);\n    }\n\n    // To stake token user will call this method\n    // user can stake only once while\n    function stake(uint256 amount) external returns (bool) {\n        require(enabled == true);\n        require(amount <= 115792089237316195423570985008687907853269984665640564039457584007913129639935, \"Overflow\");\n        if (stakedAmount[msg.sender] == 0) {\n                bool isOk = IERC20(StakingToken).transferFrom(msg.sender,address(this),amount);\n                require(isOk, \"TOKEN_TRANSFER_FAIL\");\n                stakedAmount[msg.sender] = safeSub(amount, SurgeToken.slash(amount)); //// Subtracting slash amount only when staking SURG\n                //stakedAmount[msg.sender] = amount //use this for tokens other than SURG (does not support burn-on-transfer tokens)\n                emit Staked(msg.sender, amount);\n                lastStack[msg.sender] = block.timestamp;\n                return true;\n        }\n            else {\n                bool isOk = IERC20(StakingToken).transferFrom(msg.sender,address(this),amount);\n                require(isOk, \"TOKEN_TRANSFER_FAIL\");\n                stakedAmount[msg.sender] = safeSub(safeAdd(stakedAmount[msg.sender], amount), SurgeToken.slash(amount)); //// Subtracting slash amount only when staking SURG\n                //stakedAmount[msg.sender] = safeAdd(stakedAmount[msg.sender], amount); //// Subtracting slash amount only when staking SURG\n                emit Staked(msg.sender, amount);\n                lastStack[msg.sender] = block.timestamp;\n                return true;\n        }\n    }\n\n    // To unstake token user will call this method\n    // user get daily rewards according to calulation\n    //  for first 30 days we give 1.0% rewards per day\n    //  after 31 day reward is 1.5% per day\n    function unStake() external returns (bool) {\n        require(stakedAmount[msg.sender] != 0, \"ERR_NOT_STACKED\");\n        uint256 lastStackTime = lastStack[msg.sender];\n        uint256 amount = stakedAmount[msg.sender];\n        uint256 _days = safeDiv(safeSub(block.timestamp, lastStackTime), 86400);\n        uint256 totalReward = 0;\n\n        if (_days > rewardBreakingPoint) {\n            totalReward = safeMul(safeDiv(safeMul(amount, aterBreakPoint), 10000), safeSub(_days, rewardBreakingPoint));\n            _days = rewardBreakingPoint;\n        }\n\n        totalReward = safeAdd(totalReward, safeMul(safeDiv(safeMul(amount, beforeBreakPoint), 10000), _days));\n        totalReward = safeAdd(totalReward, 1);\n\n        SurgeToken.mint(msg.sender, totalReward);\n        StakingToken.transfer(msg.sender, amount);\n\n        emit Unstaked(msg.sender, amount);\n\n        stakedAmount[msg.sender] = 0;\n        lastStack[msg.sender] = 0;\n\n        return true;\n    }\n\n    // user can check how many day passed untill they stake\n    function checkDays(address _whom) external view returns (uint256) {\n        uint256 lastStackTime = lastStack[_whom];\n        uint256 _days = safeDiv(safeSub(block.timestamp, lastStackTime), 86400);\n        return _days;\n    }\n\n    // user can check balance if they unstake now\n    function balanceOf(address _whom) external view returns (uint256) {\n        uint256 lastStackTime = lastStack[_whom];\n        uint256 amount = stakedAmount[_whom];\n        uint256 _days = safeDiv(safeSub(block.timestamp, lastStackTime), 86400);\n\n        uint256 totalReward = 0;\n\n        if (_days > rewardBreakingPoint) {\n            totalReward = safeMul(\n                safeDiv(safeMul(amount, aterBreakPoint), 10000),\n                safeSub(_days, rewardBreakingPoint)\n            );\n            _days = rewardBreakingPoint;\n        }\n\n        totalReward = safeAdd(\n            totalReward,\n            safeMul(safeDiv(safeMul(amount, beforeBreakPoint), 10000), _days)\n        );\n\n        uint256 recivedAmount = safeAdd(amount, totalReward);\n        return recivedAmount;\n    }\n\n    function enable() public {\n        require(msg.sender == owner);\n        enabled = true;\n    }\n\n    function disable() public {\n        require(msg.sender == owner);\n        enabled = false;\n    }\n\n}\n"
    }
  }
}