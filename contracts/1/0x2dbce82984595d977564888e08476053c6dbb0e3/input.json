{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/SushiPOWAH.sol": {
      "content": "pragma solidity ^0.6.12;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ninterface IPair {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function getReserves() external view returns (uint112, uint112, uint32);\n}\n\ninterface IBar {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n}\n\ninterface IMasterChef {\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\n    function pendingSushi(uint256 nr, address who) external view returns (uint256);\n}\n\ncontract SUSHIPOWAH {\n  using SafeMath for uint256;\n  \n  function name() public pure returns(string memory) { return \"SUSHIPOWAH\"; }\n  function symbol() public pure returns(string memory) { return \"SUSHIPOWAH\"; }\n  function decimals() public pure returns(uint8) { return 18; }  \n\n  function totalSupply() public view returns (uint256) {\n    IPair pair = IPair(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0);\n    IBar bar = IBar(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272);\n    IERC20 sushi = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\n    (uint256 lp_totalSushi, , ) = pair.getReserves();\n    uint256 xsushi_totalSushi = sushi.balanceOf(address(bar));\n\n    return lp_totalSushi.mul(2).add(xsushi_totalSushi);\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    IMasterChef chef = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n    IPair pair = IPair(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0);\n    IBar bar = IBar(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272);\n    IERC20 sushi = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\n    \n    uint256 lp_totalSushi = sushi.balanceOf(address(pair));\n    uint256 lp_total = pair.totalSupply();\n    uint256 lp_balance = pair.balanceOf(owner);\n\n    // Add staked balance\n    (uint256 lp_stakedBalance, ) = chef.userInfo(12, owner);\n    lp_balance = lp_balance.add(lp_stakedBalance);\n    \n    // LP voting power is 2x the users SUSHI share in the pool.\n    uint256 lp_powah = lp_totalSushi.mul(lp_balance).div(lp_total).mul(2);\n\n    uint256 xsushi_balance = bar.balanceOf(owner);\n    uint256 xsushi_total = bar.totalSupply();\n    uint256 xsushi_totalSushi = sushi.balanceOf(address(bar));\n    \n    // xSUSHI voting power is the users SUSHI share in the bar\n    uint256 xsushi_powah = xsushi_totalSushi.mul(xsushi_balance).div(xsushi_total);\n    \n    return lp_powah.add(xsushi_powah);\n  }\n\n  function allowance(address, address) public pure returns (uint256) { return 0; }\n  function transfer(address, uint256) public pure returns (bool) { return false; }\n  function approve(address, uint256) public pure returns (bool) { return false; }\n  function transferFrom(address, address, uint256) public pure returns (bool) { return false; }\n}"
    }
  }
}