{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Multichall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\ninterface erc20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function balanceOf(address) external view returns (uint);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function allowance(address, address) external view returns (uint);\n}\n\ninterface ve {\n    function locked__end(address) external view returns (uint);\n    function deposit_for(address, uint) external;\n    function locked(address) external view returns (uint);\n    function get_last_user_slope(address) external view returns (uint);\n}\n\ninterface proxy {\n    function weights(address) external view returns (uint);\n    function gauges(address) external view returns (address);\n    function votes(address, address) external view returns (uint);\n    function totalWeight() external view returns (uint);\n    function usedWeights(address) external view returns (uint);\n}\n\ninterface gauge {\n    function earned(address) external view returns (uint);\n}\n\ninterface pool {\n    function get_balances() external view returns (uint[2] memory);\n    function get_virtual_price() external view returns (uint);\n    function coins(uint) external view returns (address);\n}\n\ninterface faucet {\n    function earned(address) external view returns (uint);\n    function getRewardForDuration() external view returns (uint);\n}\n\ninterface fee {\n    function time_cursor() external view returns (uint);\n    function ve_for_at(address, uint) external view returns (uint);\n    function token_last_balance() external view returns (uint);\n    function ve_supply(uint) external view returns (uint);\n}\n\ninterface dist {\n    function claimable(address) external view returns (uint);\n}\n\ncontract multicall {\n    address constant _proxy = 0x90aAb6C9D887A7Ff8320e56fbd1F4Ff80A0811d5;\n    address constant _faucet = 0x7d254d9aDC588126edaEE52a1029278180A802E8;\n    address constant _fee = 0x27761EfEb0C7b411e71d0fd0AeE5DDe35c810CC2;\n    address constant _dist = 0x15E61581AFa2707bca42Bae529387eEa11f68E6e;\n    \n    struct call {\n        uint balanceOf;\n        address gaugeContract;\n        uint userRewards;\n        uint userGaugeBalance;\n        uint gaugeVotes;\n        uint userGaugeVotes;\n        uint[2] poolBalances;\n        uint userPoolBalance;\n        string poolSymbol;\n        uint virtualPrice;\n        uint poolGaugeAllowance;\n        address coin0;\n        string coin0Symbol;\n        uint8 coin0Decimals;\n        uint coin0Balance;\n        uint coin0GaugeAllowance;\n        address coin1;\n        string coin1Symbol;\n        uint8 coin1Decimals;\n        uint coin1Balance;\n        uint coin1GaugeAllowance;\n    }\n    \n    struct info {\n        string symbol;\n        string name;\n        uint8 decimals;\n        uint balanceOf;\n        uint approvalAmount;\n    }\n    \n    struct vesting {\n        uint locked;\n        uint balanceOf;\n        uint lastUserSlope;\n        uint totalSupply;\n        uint totalGaugeVotes;\n        uint totalUserVotes;\n        uint earned;\n        uint totalRewards;\n        uint faucetTotalSupply;\n        uint faucetBalanceOf;\n        uint timeCursor;\n        uint veAtSnapshot;\n        uint tokenLastBalance;\n        uint veTotalSupply;\n        uint claimable;\n    }\n    \n    function _getAssetInfos(address[] memory _asset, address[] memory _account, address[] memory _dest) external view returns (info[] memory _i) {\n        _i = new info[](_asset.length);\n        for (uint i = 0; i < _asset.length; i++) {\n            _i[i] = _getAssetInfo(_asset[i], _account[i], _dest[i]);\n        }\n    }\n    \n    function _getAssetInfo(address _asset, address _account, address _dest) public view returns (info memory _i) {\n        _i.symbol = erc20(_asset).symbol();\n        _i.name = erc20(_asset).name();\n        _i.decimals = erc20(_asset).decimals();\n        _i.balanceOf = erc20(_asset).balanceOf(_account);\n        _i.approvalAmount = erc20(_asset).allowance(_account, _dest);\n    }\n    \n    function _getVestingInfo(address _contract, address _account) external view returns (vesting memory _v) {\n        _v.locked = ve(_contract).locked(_account);\n        _v.balanceOf = erc20(_contract).balanceOf(_account);\n        _v.lastUserSlope = ve(_contract).get_last_user_slope(_account);\n        _v.totalSupply = erc20(_contract).totalSupply();\n        _v.totalGaugeVotes = proxy(_proxy).totalWeight();\n        _v.totalUserVotes = proxy(_proxy).usedWeights(_account);\n        _v.earned = faucet(_faucet).earned(_account);\n        _v.totalRewards = faucet(_faucet).getRewardForDuration();\n        _v.faucetTotalSupply = erc20(_faucet).totalSupply();\n        _v.faucetBalanceOf = erc20(_faucet).balanceOf(_account);\n        _v.timeCursor = fee(_fee).time_cursor();\n        _v.veAtSnapshot = fee(_fee).ve_for_at(_account, _v.timeCursor);\n        _v.tokenLastBalance = fee(_fee).token_last_balance();\n        _v.veTotalSupply = fee(_fee).ve_supply(_v.timeCursor);\n        _v.claimable = dist(_dist).claimable(_account);\n    }\n    \n    function asset_balances(address _account, address _asset, address _pool) external view returns (call memory _c) {\n       _c.balanceOf = erc20(_asset).balanceOf(_account); \n       _c.gaugeContract = proxy(_proxy).gauges(_asset);\n       _c.userRewards = gauge(_c.gaugeContract).earned(_account);\n       _c.userGaugeBalance = erc20(_c.gaugeContract).balanceOf(_account);\n       _c.gaugeVotes = proxy(_proxy).weights(_c.gaugeContract);\n       _c.userGaugeVotes = proxy(_proxy).votes(_account, _pool);\n       _c.poolBalances = pool(_pool).get_balances();\n       _c.userPoolBalance = erc20(_pool).balanceOf(_account);\n       _c.poolSymbol = erc20(_pool).symbol();\n       _c.virtualPrice = pool(_pool).get_virtual_price();\n       _c.poolGaugeAllowance = erc20(_pool).allowance(_account, _c.gaugeContract);\n       _c.coin0 = pool(_pool).coins(0);\n       _c.coin0Symbol = erc20(_c.coin0).symbol();\n       _c.coin0Decimals = erc20(_c.coin0).decimals();\n       _c.coin0Balance = erc20(_c.coin0).balanceOf(_account);\n       _c.coin0GaugeAllowance = erc20(_c.coin0).allowance(_account, _pool);\n       _c.coin1 = pool(_pool).coins(1);\n       _c.coin1Symbol = erc20(_c.coin1).symbol();\n       _c.coin1Decimals = erc20(_c.coin1).decimals();\n       _c.coin1Balance = erc20(_c.coin1).balanceOf(_account);\n       _c.coin1GaugeAllowance = erc20(_c.coin1).allowance(_account, _pool);\n    }\n}"
    }
  }
}