{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AAAAQuery.sol": {
      "content": "// Dependency file: contracts/libraries/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/modules/ConfigNames.sol\n\n// pragma solidity >=0.5.16;\n\nlibrary ConfigNames {\n    //GOVERNANCE\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\n\n    // POOL\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\n    \n    //NOT GOVERNANCE\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\n\n    //POOL\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\n\n    //wallet\n    bytes32 public constant TEAM = bytes32('team'); \n    bytes32 public constant SPARE = bytes32('spare');\n    bytes32 public constant REWARD = bytes32('reward');\n}\n\n// Root file: contracts/AAAAQuery.sol\n\npragma solidity >=0.6.6;\npragma experimental ABIEncoderV2;\n\n// import \"contracts/libraries/SafeMath.sol\";\n// import 'contracts/modules/ConfigNames.sol';\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n}\n\ninterface IConfig {\n    function developer() external view returns (address);\n    function platform() external view returns (address);\n    function factory() external view returns (address);\n    function mint() external view returns (address);\n    function token() external view returns (address);\n    function developPercent() external view returns (uint);\n    function wallet() external view returns (address);\n    function base() external view returns (address);\n    function share() external view returns (address);\n    function params(bytes32 key) external view returns(uint);\n    function setParameter(uint[] calldata _keys, uint[] calldata _values) external;\n    function setPoolParameter(address _pool, bytes32 _key, uint _value) external;\n    function getValue(bytes32 _key) external view returns (uint);\n    function getPoolValue(address _pool, bytes32 _key) external view returns (uint);\n    function getParams(bytes32 _key) external view returns (uint, uint, uint, uint);\n    function getPoolParams(address _pool, bytes32 _key) external view returns (uint, uint, uint, uint);\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns(uint toAmount);\n}\n\ninterface IAAAAFactory {\n    function countPools() external view returns(uint);\n    function countBallots() external view returns(uint);\n    function allBallots(uint index) external view returns(address);\n    function allPools(uint index) external view returns(address);\n    function isPool(address addr) external view returns(bool);\n    function getPool(address lend, address collateral) external view returns(address);\n}\n\ninterface IAAAAPlatform {\n    function getRepayAmount(address _lendToken, address _collateralToken, uint amountCollateral, address from) external view returns(uint);\n    function getMaximumBorrowAmount(address _lendToken, address _collateralToken, uint amountCollateral) external view returns(uint amountBorrow);\n}\n\ninterface IAAAAPool {\n    function supplyToken() external view returns(address);\n    function collateralToken() external view returns(address);\n    function collateralStrategy() external view returns(address);\n    function totalBorrow() external view returns(uint);\n    function totalPledge() external view returns(uint);\n    function remainSupply() external view returns(uint);\n    function getInterests() external view returns(uint);\n    function numberBorrowers() external view returns(uint);\n    function borrowerList(uint index) external view returns(address);\n    function borrows(address user) external view returns(uint,uint,uint,uint,uint);\n    function getRepayAmount(uint amountCollateral, address from) external view returns(uint);\n    function liquidationHistory(address user, uint index) external view returns(uint,uint,uint);\n    function liquidationHistoryLength(address user) external view returns(uint);\n    function interestPerBorrow() external view returns(uint);\n    function lastInterestUpdate() external view returns(uint);\n    function interestPerSupply() external view returns(uint);\n    function supplys(address user) external view returns(uint,uint,uint,uint,uint);\n}\n\ninterface IAAAAMint {\n    function maxSupply() external view returns(uint);\n    function mintCumulation() external view returns(uint);\n    function takeLendWithAddress(address user) external view returns (uint);\n    function takeBorrowWithAddress(address user) external view returns (uint);\n}\n\ninterface ISwapPair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\n\ninterface IAAAABallot {\n    struct Voter {\n        uint weight; // weight is accumulated by delegation\n        bool voted;  // if true, that person already voted\n        uint vote;   // index of the voted proposal 0 YES, 1 NO\n        bool claimed; // already claimed reward\n    }\n    function name() external view returns(bytes32);\n    function subject() external view returns(string memory);\n    function content() external view returns(string memory);\n    function createdBlock() external view returns(uint);\n    function createdTime() external view returns(uint);\n    function creator() external view returns(address);\n    function proposals(uint index) external view returns(uint);\n    function end() external view returns (bool);\n    function pass() external view returns (bool);\n    function expire() external view returns (bool);\n    function pool() external view returns (address);\n    function value() external view returns (uint);\n    function total() external view returns (uint);\n    function reward() external view returns (uint);\n    function voters(address user) external view returns (Voter memory);\n}\n\ninterface IOtherConfig {\n    function isToken(address _token) external view returns (bool);\n    function disabledToken(address _token) external view returns (bool);\n}\n\ncontract AAAAQuery {\n    address public owner;\n    address public config;\n    address public otherConfig;\n    using SafeMath for uint;\n\n    struct PoolInfoStruct {\n        address pair;\n        uint totalBorrow;\n        uint totalPledge;\n        uint totalPledgeValue;\n        uint remainSupply;\n        uint totalSupplyValue;\n        uint borrowInterests;\n        uint supplyInterests;\n        address supplyToken;\n        address collateralToken;\n        uint8 supplyTokenDecimals;\n        uint8 collateralTokenDecimals;\n        address collateralStrategy;\n        string lpToken0Symbol;\n        string lpToken1Symbol;\n        string supplyTokenSymbol;\n        string collateralTokenSymbol;\n    }\n\n    struct TokenStruct {\n        string name;\n        string symbol;\n        uint8 decimals;\n        uint balance;\n        uint totalSupply;\n        uint allowance;\n    }\n\n    struct MintTokenStruct {\n        uint mintCumulation;\n        uint maxSupply;\n        uint takeBorrow;\n        uint takeLend;\n    }\n\n     struct SupplyInfo {\n        uint amountSupply;\n        uint interestSettled;\n        uint liquidationSettled;\n\n        uint interests;\n        uint liquidation;\n    }\n\n    struct BorrowInfo {\n        address user;\n        uint amountCollateral;\n        uint interestSettled;\n        uint amountBorrow;\n        uint interests;\n    }\n\n    struct LiquidationStruct {\n        address pool;\n        address user;\n        uint amountCollateral;\n        uint expectedRepay;\n        uint liquidationRate;\n    }\n\n    struct PoolConfigInfo {\n        uint baseInterests;\n        uint marketFrenzy;\n        uint pledgeRate;\n        uint pledgePrice;\n        uint liquidationRate;   \n    }\n\n    struct UserLiquidationStruct {\n        uint amountCollateral;\n        uint liquidationAmount;\n        uint timestamp;\n    }\n\n    struct BallotStruct {\n        address ballot;\n        bytes32 name;\n        address pool; // pool address or address(0)\n        address creator;\n        uint currentValue;\n        uint    value;\n        uint    createdBlock;\n        uint    createdTime;\n        uint    total;\n        uint    reward;\n        uint YES;\n        uint NO;\n        uint weight;\n        bool voted;\n        uint voteIndex;\n        bool claimed;\n        uint myReward;\n        bool end;\n        bool pass;\n        bool expire;\n        string  subject;\n        string  content;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setupConfig (address _config) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        config = _config;\n    }\n\n    function setupOtherConfig (address _config) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        otherConfig = _config;\n    }\n\n    function getPoolInterests(address pair) public view returns (uint, uint) {\n        uint borrowInterests = IAAAAPool(pair).getInterests();\n        uint supplyInterests = 0;\n        uint borrow = IAAAAPool(pair).totalBorrow();\n        uint total = borrow + IAAAAPool(pair).remainSupply();\n        if(total > 0) {\n            supplyInterests = borrowInterests * borrow / total;\n        }\n        return (supplyInterests, borrowInterests);\n    }\n\n    function getPoolInfoByIndex(uint index) public view returns (PoolInfoStruct memory info) {\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\n        if (index >= count || count == 0) {\n            return info;\n        }\n        address pair = IAAAAFactory(IConfig(config).factory()).allPools(index);\n        return getPoolInfo(pair);\n    }\n\n    function getPoolInfoByTokens(address lend, address collateral) public view returns (PoolInfoStruct memory info) {\n        address pair = IAAAAFactory(IConfig(config).factory()).getPool(lend, collateral);\n        return getPoolInfo(pair);\n    }\n    \n    function getPoolInfo(address pair) public view returns (PoolInfoStruct memory info) {\n        if(!IAAAAFactory(IConfig(config).factory()).isPool(pair)) {\n            return info;\n        }\n        if (IOtherConfig(otherConfig).disabledToken(IAAAAPool(pair).collateralToken())) {\n            return info;\n        }\n        info.pair = pair;\n        info.totalBorrow = IAAAAPool(pair).totalBorrow();\n        info.totalPledge = IAAAAPool(pair).totalPledge();\n        info.remainSupply = IAAAAPool(pair).remainSupply();\n        info.borrowInterests = IAAAAPool(pair).getInterests();\n        info.supplyToken = IAAAAPool(pair).supplyToken();\n        info.collateralToken = IAAAAPool(pair).collateralToken();\n        info.supplyTokenDecimals = IERC20(info.supplyToken).decimals();\n        info.collateralTokenDecimals = IERC20(info.collateralToken).decimals();\n        info.supplyTokenSymbol = IERC20(info.supplyToken).symbol();\n        info.collateralTokenSymbol = IERC20(info.collateralToken).symbol();\n        info.collateralStrategy = IAAAAPool(pair).collateralStrategy();\n\n        if (IOtherConfig(otherConfig).isToken(info.collateralToken) == false) {\n            address lpToken0 = ISwapPair(info.collateralToken).token0();\n            address lpToken1 = ISwapPair(info.collateralToken).token1();\n            info.lpToken0Symbol = IERC20(lpToken0).symbol();\n            info.lpToken1Symbol = IERC20(lpToken1).symbol();\n        }\n\n        info.totalSupplyValue = IConfig(config).convertTokenAmount(info.supplyToken, IConfig(config).base(), info.remainSupply.add(info.totalBorrow));\n        info.totalPledgeValue = IConfig(config).convertTokenAmount(info.collateralToken, IConfig(config).base(), info.totalPledge);\n\n        if(info.totalBorrow + info.remainSupply > 0) {\n            info.supplyInterests = info.borrowInterests * info.totalBorrow / (info.totalBorrow + info.remainSupply);\n        }\n    }\n\n    function queryPoolList() public view returns (PoolInfoStruct[] memory list) {\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\n        if(count > 0) {\n            list = new PoolInfoStruct[](count);\n            for(uint i = 0;i < count;i++) {\n                list[i] = getPoolInfoByIndex(i);\n            }\n        }\n    }\n\n    function queryPoolListByToken(address token) public view returns (PoolInfoStruct[] memory list) {\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\n        uint outCount = 0;\n        if(count > 0) {\n            for(uint i = 0;i < count;i++) {\n                PoolInfoStruct memory info = getPoolInfoByIndex(i);\n                if(info.supplyToken == token) {\n                    outCount++;\n                }\n            }\n            if(outCount == 0) return list;\n            list = new PoolInfoStruct[](outCount);\n            uint index = 0;\n            for(uint i = 0;i < count;i++) {\n                PoolInfoStruct memory info = getPoolInfoByIndex(i);\n                if(info.supplyToken == token) {\n                    list[index] = info;\n                    index++;\n                }\n            }\n        }\n        return list;\n    }\n\n    function queryToken(address user, address spender, address token) public view returns (TokenStruct memory info) {\n        info.name = IERC20(token).name();\n        info.symbol = IERC20(token).symbol();\n        info.decimals = IERC20(token).decimals();\n        info.balance = IERC20(token).balanceOf(user);\n        info.totalSupply = IERC20(token).totalSupply();\n        if(spender != user) {\n            info.allowance = IERC20(token).allowance(user, spender);\n        }\n    }\n\n    function queryTokenList(address user, address spender, address[] memory tokens) public view returns (TokenStruct[] memory token_list) {\n        uint count = tokens.length;\n        if(count > 0) {\n            token_list = new TokenStruct[](count);\n            for(uint i = 0;i < count;i++) {\n                token_list[i] = queryToken(user, spender, tokens[i]);\n            }\n        }\n    }\n\n    function queryMintToken(address user) public view returns (MintTokenStruct memory info) {\n        address token = IConfig(config).mint();\n        info.mintCumulation = IAAAAMint(token).mintCumulation();\n        info.maxSupply = IAAAAMint(token).maxSupply();\n        info.takeBorrow = IAAAAMint(token).takeBorrowWithAddress(user);\n        info.takeLend = IAAAAMint(token).takeLendWithAddress(user);\n    }\n\n    function getBorrowInfo(address _pair, address _user) public view returns (BorrowInfo memory info){\n        (, uint amountCollateral, uint interestSettled, uint amountBorrow, uint interests) = IAAAAPool(_pair).borrows(_user);\n        info = BorrowInfo(_user, amountCollateral, interestSettled, amountBorrow, interests);\n    }\n\n    function iterateBorrowInfo(address _pair, uint _start, uint _end) public view returns (BorrowInfo[] memory list){\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\n        uint count = IAAAAPool(_pair).numberBorrowers();\n        if (_end > count) _end = count;\n        count = _end - _start;\n        list = new BorrowInfo[](count);\n        uint index = 0;\n        for(uint i = _start; i < _end; i++) {\n            address user = IAAAAPool(_pair).borrowerList(i);\n            list[index] = getBorrowInfo(_pair, user);\n            index++;\n        }\n    }\n\n    function iteratePairLiquidationInfo(address _pair, uint _start, uint _end) public view returns (\n        LiquidationStruct[] memory list)\n    {\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\n        address supplyToken = IAAAAPool(_pair).supplyToken();\n        address collateralToken = IAAAAPool(_pair).collateralToken();\n\n        uint count = IAAAAPool(_pair).numberBorrowers();\n        if (_end > count) _end = count;\n        count = _end - _start;\n        uint index = 0;\n        uint liquidationRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE);\n        uint pledgeRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PLEDGE_RATE);\n        \n        for(uint i = _start; i < _end; i++) {\n            address user = IAAAAPool(_pair).borrowerList(i);\n            (, uint amountCollateral, , , ) = IAAAAPool(_pair).borrows(user);\n            uint pledgeAmount = IConfig(config).convertTokenAmount(collateralToken, supplyToken, amountCollateral);\n            uint repayAmount = IAAAAPlatform(IConfig(config).platform()).getRepayAmount(supplyToken, collateralToken, amountCollateral, user);\n            if(repayAmount > pledgeAmount.mul(pledgeRate).div(1e18).mul(liquidationRate).div(1e18))\n            {\n                index++;\n            }\n        }\n        list = new LiquidationStruct[](index);\n        index = 0;\n        for(uint i = _start; i < _end; i++) {\n            address user = IAAAAPool(_pair).borrowerList(i);\n            (, uint amountCollateral, , , ) = IAAAAPool(_pair).borrows(user);\n            uint pledgeAmount = IConfig(config).convertTokenAmount(collateralToken, supplyToken, amountCollateral);\n            uint repayAmount = IAAAAPlatform(IConfig(config).platform()).getRepayAmount(supplyToken, collateralToken, amountCollateral, user);\n            if(repayAmount > pledgeAmount.mul(pledgeRate).div(1e18).mul(liquidationRate).div(1e18))\n            {\n                list[index].user             = user;\n                list[index].pool             = _pair;\n                list[index].amountCollateral = amountCollateral;\n                list[index].expectedRepay    = repayAmount;\n                list[index].liquidationRate  = liquidationRate;\n                index++;\n            }\n        }\n    }\n\n    function getPoolConf(address _pair) public view returns (PoolConfigInfo memory info) {\n        info.baseInterests = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_BASE_INTERESTS);\n        info.marketFrenzy = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MARKET_FRENZY);\n        info.pledgeRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PLEDGE_RATE);\n        info.pledgePrice = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PRICE);\n        info.liquidationRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE);\n    }\n\n    function queryUserLiquidationList(address _pair, address _user) public view returns (UserLiquidationStruct[] memory list) {\n        uint count = IAAAAPool(_pair).liquidationHistoryLength(_user);\n        if(count > 0) {\n            list = new UserLiquidationStruct[](count);\n            for(uint i = 0;i < count; i++) {\n                (uint amountCollateral, uint liquidationAmount, uint timestamp) = IAAAAPool(_pair).liquidationHistory(_user, i);\n                list[i] = UserLiquidationStruct(amountCollateral, liquidationAmount, timestamp);\n            }\n        }\n    }\n\n    function getSwapPairReserve(address _pair) public view returns (address token0, address token1, uint8 decimals0, uint8 decimals1, uint reserve0, uint reserve1) {\n        token0 = ISwapPair(_pair).token0();\n        token1 = ISwapPair(_pair).token1();\n        decimals0 = IERC20(token0).decimals();\n        decimals1 = IERC20(token1).decimals();\n        (reserve0, reserve1, ) = ISwapPair(_pair).getReserves();\n    }\n\n    function getCanMaxBorrowAmount(address _pair, address _user, uint _blocks) public view returns(uint) {\n        (, uint amountCollateral, uint interestSettled, uint amountBorrow, uint interests) = IAAAAPool(_pair).borrows(_user);\n        uint maxBorrow = IAAAAPlatform(IConfig(config).platform()).getMaximumBorrowAmount(IAAAAPool(_pair).supplyToken(), IAAAAPool(_pair).collateralToken(), amountCollateral);\n        uint poolBalance = IERC20(IAAAAPool(_pair).supplyToken()).balanceOf(_pair);\n\n        uint _interestPerBorrow = IAAAAPool(_pair).interestPerBorrow().add(IAAAAPool(_pair).getInterests().mul(block.number+_blocks - IAAAAPool(_pair).lastInterestUpdate()));\n        uint _totalInterest = interests.add(_interestPerBorrow.mul(amountBorrow).div(1e18).sub(interestSettled));\n\n        uint repayInterest = amountCollateral == 0 ? 0 : _totalInterest.mul(amountCollateral).div(amountCollateral);\n        uint repayAmount = amountCollateral == 0 ? 0 : amountBorrow.mul(amountCollateral).div(amountCollateral).add(repayInterest);\n\n        uint result = maxBorrow.sub(repayAmount);\n        if(poolBalance < result) {\n            result = poolBalance;\n        }\n        return result;\n    }\n\n    function canReinvest(address _pair, address _user) public view returns(bool) {\n        uint interestPerSupply = IAAAAPool(_pair).interestPerSupply();\n        (uint amountSupply, uint interestSettled, , uint interests, ) = IAAAAPool(_pair).supplys(_user);\n        uint remainSupply = IAAAAPool(_pair).remainSupply();\n        uint platformShare = IConfig(config).params(ConfigNames.INTEREST_PLATFORM_SHARE);\n\n        uint curInterests = interestPerSupply.mul(amountSupply).div(1e18).sub(interestSettled);\n        interests = interests.add(curInterests);\n        uint reinvestAmount = interests.mul(platformShare).div(1e18);\n  \n        if(reinvestAmount < remainSupply) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function getBallotInfo(address _ballot, address _user) public view returns (BallotStruct memory proposal){\n        proposal.ballot = _ballot;\n        proposal.name = IAAAABallot(_ballot).name();\n        proposal.creator = IAAAABallot(_ballot).creator();\n        proposal.subject = IAAAABallot(_ballot).subject();\n        proposal.content = IAAAABallot(_ballot).content();\n        proposal.createdTime = IAAAABallot(_ballot).createdTime();\n        proposal.createdBlock = IAAAABallot(_ballot).createdBlock();\n        proposal.end = IAAAABallot(_ballot).end();\n        proposal.pass = IAAAABallot(_ballot).pass();\n        proposal.expire = IAAAABallot(_ballot).expire();\n        proposal.YES = IAAAABallot(_ballot).proposals(0);\n        proposal.NO = IAAAABallot(_ballot).proposals(1);\n        proposal.reward = IAAAABallot(_ballot).reward();\n        proposal.voted = IAAAABallot(_ballot).voters(_user).voted;\n        proposal.voteIndex = IAAAABallot(_ballot).voters(_user).vote;\n        proposal.weight = IAAAABallot(_ballot).voters(_user).weight;\n        proposal.claimed = IAAAABallot(_ballot).voters(_user).claimed;\n        proposal.value = IAAAABallot(_ballot).value();\n        proposal.total = IAAAABallot(_ballot).total();\n        proposal.pool = IAAAABallot(_ballot).pool();\n        if(proposal.pool != address(0)) {\n            proposal.currentValue = IConfig(config).getPoolValue(proposal.pool, proposal.name);\n        } else {\n            proposal.currentValue = IConfig(config).getValue(proposal.name);\n        }\n\n        if(proposal.total > 0) {\n           proposal.myReward = proposal.reward * proposal.weight / proposal.total;\n        }\n    }\n\n\n    function iterateBallotList(uint _start, uint _end) public view returns (BallotStruct[] memory ballots){\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\n        uint count = IAAAAFactory(IConfig(config).factory()).countBallots();\n        if (_end > count) _end = count;\n        count = _end - _start;\n        ballots = new BallotStruct[](count);\n        if (count == 0) return ballots;\n        uint index = 0;\n        for(uint i = _start;i < _end;i++) {\n            address ballot = IAAAAFactory(IConfig(config).factory()).allBallots(i);\n            ballots[index] = getBallotInfo(ballot, msg.sender);\n            index++;\n        }\n        return ballots;\n    }\n\n    function iterateReverseBallotList(uint _start, uint _end) public view returns (BallotStruct[] memory ballots){\n        require(_end <= _start && _end >= 0 && _start >= 0, \"INVAID_PARAMTERS\");\n        uint count = IAAAAFactory(IConfig(config).factory()).countBallots();\n        if (_start > count) _start = count;\n        count = _start - _end;\n        ballots = new BallotStruct[](count);\n        if (count == 0) return ballots;\n        uint index = 0;\n        for(uint i = _end;i < _start; i++) {\n            uint j = _start - i -1;\n            address ballot = IAAAAFactory(IConfig(config).factory()).allBallots(j);\n            ballots[index] = getBallotInfo(ballot, msg.sender);\n            index++;\n        }\n        return ballots;\n    }\n\n}"
    }
  }
}