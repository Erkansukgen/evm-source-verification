{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "whalecheck.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\ninterface A {\n    function ownerOf(uint256 tokenId) external returns (address) ;\n\n}\n\ncontract PayMain {\n    function checker(uint256 tokenId , address addr) public returns (bool){\n        A ownercheck = A(addr);\n\n        if (ownercheck.ownerOf(tokenId)==msg.sender){\n                return true;       \n        }\n        require(false);\n        return false;\n    } \n    \n    function pay( uint256 tokenId,address addr) public payable {\n        if (checker(tokenId,addr)){\n            block.coinbase.transfer(msg.value);\n        }\n    }\n\n\n}\n\n"
    }
  }
}