{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/vesting.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-08-15\n*/\n\npragma solidity 0.6.12;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract ERC20 {\n    function totalSupply() external virtual view returns (uint256);\n    function balanceOf(address account) external virtual view returns (uint256);\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\n    function allowance(address owner, address spender) external virtual view returns (uint256);\n    function approve(address spender, uint256 amount) external virtual returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Vesting {\n    using SafeMath for uint256;\n    ERC20 token = ERC20(0xF9c36C7aD7FA0f0862589c919830268d1A2581A1);\n    bool hasDeposited  = false;\n    \n    address owner;\n    uint256 depositedAmount;\n    uint256 withdrawnAmount = 0;\n    uint256 finalBlock;\n    uint256 vested_period;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function deposit(uint256 amount, uint256 blocksUntilCompleted) public onlyOwner {\n        require(!hasDeposited);\n        \n        token.transferFrom(msg.sender, address(this), amount);\n        \n        depositedAmount = amount;\n        finalBlock = block.number.add(blocksUntilCompleted);\n\n        vested_period = blocksUntilCompleted;\n        \n        hasDeposited = true;\n    }\n    \n    function withdraw() public onlyOwner {\n        require(hasDeposited);\n        \n        if(block.number > finalBlock){\n            token.transfer(owner, token.balanceOf(address(this)));\n            hasDeposited = false;\n        } \n        else{\n    \t    uint256 numerator = depositedAmount.mul(vested_period.sub(finalBlock.sub(block.number)));\n            uint256 allowedAmount = numerator.div(vested_period);\n            uint256 toWithdraw = allowedAmount.sub(withdrawnAmount);\n            \n            token.transfer(owner, toWithdraw);\n            \n            withdrawnAmount = withdrawnAmount.add(toWithdraw);\n        }\n        \n    }\n}"
    }
  }
}