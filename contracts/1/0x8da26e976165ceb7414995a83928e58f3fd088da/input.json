{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/chainBridge/CrossFee.sol": {
      "content": "pragma solidity 0.6.4;\npragma experimental ABIEncoderV2;\n\nimport 'github.com/Uniswap/uniswap-v2-core//contracts/interfaces/IUniswapV2Pair.sol';\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\";\n\nimport \"./interfaces/ICrossFee.sol\";\n\ncontract CrossFee is ICrossFee {\n    \n    using SafeMath for uint256;\n    \n    address public owner;\n    \n    address public weth;\n    \n    address public uni_factory;\n    \n    uint256 public MAX_GAS_PRICE = 80 * 1e9;\n    \n    uint256 public crossInGas;\n    \n    mapping(bytes32=>address) public resourceToTokenAddrss;\n    mapping(bytes32=>uint256) public resourceToFeeRate;\n    mapping(bytes32=>uint256) public resourceToDefalutGasFee;\n    \n    constructor(address weth_,address uni_,uint256 crossInGas_) public {\n        weth = weth_;\n        uni_factory = uni_;\n        owner = msg.sender;\n        crossInGas = crossInGas_;\n    }\n    \n     modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    \n    function setWETH(address weth_) public {\n        require(msg.sender == owner,\"not owner\");\n        weth = weth_;\n    }\n    \n    function setUni(address uni_) public {\n        require(msg.sender == owner,\"not owner\");\n        uni_factory = uni_;\n    }\n    \n    function setResource(bytes32 resourceId,address tokenAddress,uint256 defaltGasFee,uint256 feeRate) public{\n        require(msg.sender == owner,\"not owner\");\n        resourceToTokenAddrss[resourceId] = tokenAddress;\n        resourceToFeeRate[resourceId] = feeRate;\n        resourceToDefalutGasFee[resourceId] = defaltGasFee;\n    }\n    \n    function setMaxGasPrice(uint256 max_) public onlyOwner{\n        MAX_GAS_PRICE = max_;\n    }\n    \n    function setCrossInGas(uint256 crossInGas_) public onlyOwner {\n        crossInGas = crossInGas_;\n    }\n    \n    function setDefaultGasFee(bytes32 resourceId,uint256 gasFee_) public onlyOwner{\n         resourceToDefalutGasFee[resourceId] = gasFee_;\n    }\n    \n    function setCorssFeeRate(bytes32 resourceId,uint256 feeRate_) public onlyOwner{\n        resourceToFeeRate[resourceId] = feeRate_;\n    }\n    \n    \n    function calCrossFee(bytes32 resourceId,uint256 inputAmount,uint256 gasPrice) public override view returns(uint256 relayerFee,uint256 gasFee){\n         return _calFee(resourceId,inputAmount,gasPrice);\n    }\n    \n    function _calFee(bytes32 resourceId,uint256 inputAmount,uint256 gasPrice) internal view returns(uint256 relayerFee,uint256 gasFee){\n         uint256 feeRate = resourceToFeeRate[resourceId];\n           relayerFee = inputAmount.mul(feeRate).div(10000);\n           gasFee = resourceToDefalutGasFee[resourceId];\n           \n           if (gasFee == 0){\n                if (gasPrice > MAX_GAS_PRICE) {\n                    gasPrice = MAX_GAS_PRICE;\n                }\n                uint256 ethFee = crossInGas.mul(gasPrice);\n                address tokenAddress = resourceToTokenAddrss[resourceId];\n                if (weth==tokenAddress){\n                    gasFee = ethFee;\n                }else{\n                    (uint reserveA, uint reserveB) =getReserves(uni_factory,weth,tokenAddress);\n                    gasFee = quote(ethFee,reserveA,reserveB);\n                }\n              \n           }\n          return (relayerFee,gasFee);\n    }\n    \n    \n   \n    \n    function estimateFee(bytes32 resourceId,uint256 inputAmount) public override view returns(uint256 fee){\n        \n        (uint256 relayerFee,uint256 gasFee) = _calFee(resourceId,inputAmount,MAX_GAS_PRICE);\n        return relayerFee.add(gasFee);\n    \n    }\n    \n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n    \n     function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n}"
    },
    "browser/chainBridge/interfaces/ICrossFee.sol": {
      "content": " \n pragma solidity 0.6.4;\n\n\ninterface ICrossFee {\n    \n     function calCrossFee(bytes32 resourceId,uint256 inputAmount,uint256 gasPrice) external view returns(uint256 crossFee,uint256 gasFee);\n     \n     function estimateFee(bytes32 resourceId,uint256 inputAmount) external view returns(uint256 fee);\n}\n \n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "github.com/Uniswap/uniswap-v2-core//contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    }
  }
}