{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/sale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ncontract Auctioneer{\n    address internal _safe;// = 0xd8806d66E24b702e0A56fb972b75D24CAd656821;\n    mapping(address => uint256) public deposits;\n\n    event Action(address user, uint256 amount);\n\n    constructor(){\n        _safe = 0xd8806d66E24b702e0A56fb972b75D24CAd656821;\n    }\n\n    function Invest() external payable {\n        payable(_safe).transfer(address(this).balance);\n        deposits[msg.sender] += msg.value;\n        emit Action(msg.sender, msg.value);\n    }\n\n    function check(address user, uint256 _amt) external view returns(bool){\n        return deposits[user] >= _amt;\n    }\n}\n"
    }
  }
}