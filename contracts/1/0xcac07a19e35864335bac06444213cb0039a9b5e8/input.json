{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "FlashbotsCheckAndSend.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\n/*\n  Copyright 2021 Flashbots: Scott Bigelow (scott@flashbots.net), Brock Smedley (brock@firstfoundry.co).\n*/\n/*\n  Shoutout to MEVAlphaLeak (https://twitter.com/mevalphaleak/status/1394183258259218433) for the edge case fix.\n*/\n\n// This contract performs one or many staticcall's, compares their output, and pays\n// the miner directly if all calls exactly match the specified result\n// For how to use this script, read the Flashbots searcher docs: https://hackmd.io/@flashbots/ryxxWuD6D\ncontract FlashbotsCheckAndSend {\n    function check32BytesAndSend(address _target, bytes memory _payload, bytes32 _resultMatch) external payable {\n        _check32Bytes(_target, _payload, _resultMatch);\n        block.coinbase.call{value: msg.value}(new bytes(0));\n    }\n\n    function check32BytesAndSendMulti(address[] memory _targets, bytes[] memory _payloads, bytes32[] memory _resultMatches) external payable {\n        require (_targets.length == _payloads.length);\n        require (_targets.length == _resultMatches.length);\n        for (uint256 i = 0; i < _targets.length; i++) {\n            _check32Bytes(_targets[i], _payloads[i], _resultMatches[i]);\n        }\n        block.coinbase.call{value: msg.value}(new bytes(0));\n    }\n\n    function checkBytesAndSend(address _target, bytes memory _payload, bytes memory _resultMatch) external payable {\n        _checkBytes(_target, _payload, _resultMatch);\n        block.coinbase.call{value: msg.value}(new bytes(0));\n    }\n\n    function checkBytesAndSendMulti(address[] memory _targets, bytes[] memory _payloads, bytes[] memory _resultMatches) external payable {\n        require (_targets.length == _payloads.length);\n        require (_targets.length == _resultMatches.length);\n        for (uint256 i = 0; i < _targets.length; i++) {\n            _checkBytes(_targets[i], _payloads[i], _resultMatches[i]);\n        }\n        block.coinbase.call{value: msg.value}(new bytes(0));\n    }\n\n    // ======== INTERNAL ========\n    \n    function _check32Bytes(address _target, bytes memory _payload, bytes32 _resultMatch) internal view {\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\n        require(_success, \"!success\");\n        require(_response.length >= 32, \"response less than 32 bytes\");\n        bytes32 _responseScalar;\n        assembly {\n            _responseScalar := mload(add(_response, 0x20))\n        }\n        require(_responseScalar == _resultMatch, \"response mismatch\");\n    }\n\n    function _checkBytes(address _target, bytes memory _payload, bytes memory _resultMatch) internal view {\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\n        require(_success, \"!success\");\n        require(keccak256(_resultMatch) == keccak256(_response), \"response bytes mismatch\");\n    }\n}"
    }
  }
}