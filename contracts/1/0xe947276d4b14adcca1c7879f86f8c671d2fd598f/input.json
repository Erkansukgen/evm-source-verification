{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n}\n\ninterface ItokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \n}\n\ninterface IERC20Token {\n    function totalSupply() external view returns (uint256 supply);\n    function transfer(address _to, uint256 _value) external  returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n}\n\ncontract Ownable {\n\n    address private owner;\n    \n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}\n\ncontract StandardToken is IERC20Token {\n    \n    using SafeMath for uint256;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public _totalSupply;\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    function totalSupply() override public view returns (uint256 supply) {\n        return _totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\n        require(_to != address(0x0), \"Use burn function instead\");                              \n\t\trequire(_value >= 0, \"Invalid amount\"); \n\t\trequire(balances[msg.sender] >= _value, \"Not enough balance\");\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\n        require(_to != address(0x0), \"Use burn function instead\");                               \n\t\trequire(_value >= 0, \"Invalid amount\"); \n\t\trequire(balances[_from] >= _value, \"Not enough balance\");\n\t\trequire(allowed[_from][msg.sender] >= _value, \"You need to increase allowance\");\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n}\n\ncontract VRGToken is Ownable, StandardToken {\n\n    using SafeMath for uint256;\n    string public name = \"Virtual Reality Games and Bets\";\n    uint8 public decimals = 18;\n    string public symbol = \"VRG\";\n    address public sellingcontract;\n    mapping (address => bool) lockedWallets;\n    mapping (address => uint256) lockedBalances;\n    struct BalanceUnlock {\n        bool released;\n        uint256 amount;\n        uint256 rdate;\n    }\n    mapping (address => mapping(uint8 => BalanceUnlock)) progressiveRelease;\n    uint256 public walletUnlockDate = 1609711800;\n    event Burn(address indexed from, uint256 value);\n\n    \n    constructor() {\n        _totalSupply = 100000000 ether;\n        // Selling Contract - 16000000 tokens\n        sellingcontract = (0xA63c2f7224C00F3B5C555De476270A020B58B231);\n        balances[sellingcontract] = 16000000 ether;\n        emit Transfer(address(0x0), sellingcontract, (16000000 ether));\n        \n        // Marketing wallet - 4000000 tokens\n        address marketing = 0x911D5FE8ac63954a6652F240927B09201238d1f9;\n        balances[marketing] = 4000000 ether;\n        emit Transfer(address(0x0), marketing, (4000000 ether));\n        \n        // Team wallet - 4000000 tokens (Locked - progressive release)\n        address team = 0xa6549a3eC56F5b8bA7A08809D09B66F605CD6b25;\n        balances[team] = 4000000 ether;\n        emit Transfer(address(0x0), team, (4000000 ether));\n        // locking balances\n        lockedBalances[team] = 4000000 ether;\n        // First release\n        createUnlockPoint(team, uint8(1), (1000000 ether), (block.timestamp + (180 days)));\n        // second release\n        createUnlockPoint(team, uint8(2), (1000000 ether), (block.timestamp + (270 days)));\n        // third release\n        createUnlockPoint(team, uint8(3), (1000000 ether), (block.timestamp + (360 days)));\n        // fourth release\n        createUnlockPoint(team, uint8(4), (1000000 ether), (block.timestamp + (450 days)));\n        \n        // Uniswap and exchanges - 26000000 tokens locked until crowdsale ends\n        address exchanges = 0x95f582EB80b8AcB9a7FdC377aD0b0cF5731Aca57;  \n        balances[exchanges] = 26000000 ether;\n        emit Transfer(address(0x0), exchanges, (26000000 ether));\n        // locking balances\n        lockedBalances[exchanges] = 26000000 ether;\n        createUnlockPoint(exchanges, uint8(1), (26000000 ether), 1609718399);\n        \n        // Betting Platform tokens\n        // Development - 2000000 for inmediate release and \n        // 48000000 locked - Releasing 12000000 every 90 days\n        address BettingPlatform = 0x4514CFBB6C80a46fd64484c19d0442fa5cb80EF1;  \n        balances[BettingPlatform] = 50000000 ether;\n        emit Transfer(address(0x0), BettingPlatform, (50000000 ether));\n        // locking balances\n        lockedBalances[BettingPlatform] = 48000000 ether;\n        // First release\n        createUnlockPoint(BettingPlatform, uint8(1), (12000000 ether), (block.timestamp + (90 days)));\n        // second release\n        createUnlockPoint(BettingPlatform, uint8(2), (12000000 ether), (block.timestamp + (180 days)));\n        // third release\n        createUnlockPoint(BettingPlatform, uint8(3), (12000000 ether), (block.timestamp + (270 days)));\n        // fourth release\n        createUnlockPoint(BettingPlatform, uint8(4), (12000000 ether), (block.timestamp + (360 days)));\n        \n    }\n    \n    function transfer(address _to, uint256 _value) override public returns (bool success) {\n        require(canTransfer(msg.sender));\n        require(_value <= (balances[msg.sender] - lockedBalances[msg.sender]));\n        return super.transfer(_to, _value);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\n        require(canTransfer(_from));\n        require(_value <= (balances[_from] - lockedBalances[_from]));\n        return super.transferFrom(_from, _to, _value);\n    }\n    \n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value, \"Not enough balance\");\n\t\trequire(_value >= 0, \"Invalid amount\"); \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        ItokenRecipient recipient = ItokenRecipient(_spender);\n        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\n        return true;\n    }\n    \n    function createUnlockPoint(address _wallet, uint8 _releaseId, uint256 _amount, uint256 _releaseTime) private {\n        BalanceUnlock memory unlockPoint;\n        unlockPoint = BalanceUnlock(false, _amount, _releaseTime);\n        progressiveRelease[_wallet][_releaseId] = unlockPoint;\n    }\n    \n    function releaseTokens(uint8 _unlockPoint) public returns (bool success) {\n        if (progressiveRelease[msg.sender][_unlockPoint].released == false) {\n            if (progressiveRelease[msg.sender][_unlockPoint].amount > 0 ) {\n                if (progressiveRelease[msg.sender][_unlockPoint].rdate < block.timestamp) {\n                    lockedBalances[msg.sender] -= progressiveRelease[msg.sender][_unlockPoint].amount;\n                    progressiveRelease[msg.sender][_unlockPoint].released = true;\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    \n    function tokensSold(address buyer, uint256 amount) public returns (bool success) {\n        require(msg.sender == sellingcontract);\n        lockedWallets[buyer] = true;\n        return super.transfer(buyer, amount);\n    }\n    \n    function canTransfer(address _wallet) private returns (bool) {\n        if (lockedWallets[_wallet] == true) {\n            if (block.timestamp > walletUnlockDate) {\n                lockedWallets[_wallet] = false;\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n    \n    function isWalletLocked(address _wallet) public view returns (bool isLocked) {\n        return lockedWallets[_wallet];\n    }\n    \n    function isBalanceReleased(address _wallet, uint8 _unlockPoint) public view returns (bool released) {\n        return progressiveRelease[_wallet][_unlockPoint].released;\n    }\n    \n    function getLockedBalance(address _wallet) public view returns (uint256 lockedBalance) {\n        return lockedBalances[_wallet];\n    }\n    \n\n}\n"
    }
  }
}