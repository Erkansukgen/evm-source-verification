{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"erc20.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n   string public name;\r\n   string public symbol;\r\n   uint8 public decimals = 18;\r\n   uint256 public totalSupply;\r\n\r\n   mapping (address => uint256) public balanceOf;\r\n   mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n   event Burn(address indexed from, uint256 value);\r\n\r\n   constructor(\r\n       uint256 initialSupply,\r\n       string memory tokenName,\r\n       string memory tokenSymbol\r\n   ) public {\r\n       totalSupply = initialSupply * 10 ** uint256(decimals);\r\n       balanceOf[msg.sender] = totalSupply;\r\n       name = tokenName;\r\n       symbol = tokenSymbol;\r\n   }\r\n\r\n   function _transfer(address _from, address _to, uint _value) internal {\r\n       require(_to != address(0));\r\n       require(balanceOf[_from] >= _value);\r\n       require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n       uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n       balanceOf[_from] -= _value;\r\n       balanceOf[_to] += _value;\r\n       emit Transfer(_from, _to, _value);\r\n       assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n   }\r\n\r\n   function transfer(address _to, uint256 _value) public returns (bool success) {\r\n       _transfer(msg.sender, _to, _value);\r\n       return true;\r\n   }\r\n\r\n   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n       require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n       allowance[_from][msg.sender] -= _value;\r\n       _transfer(_from, _to, _value);\r\n       return true;\r\n   }\r\n\r\n   function approve(address _spender, uint256 _value) public\r\n       returns (bool success) {\r\n       allowance[msg.sender][_spender] = _value;\r\n       emit Approval(msg.sender, _spender, _value);\r\n       return true;\r\n   }\r\n\r\n   function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n       public\r\n       returns (bool success) {\r\n       tokenRecipient spender = tokenRecipient(_spender);\r\n       if (approve(_spender, _value)) {\r\n           spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n           return true;\r\n       }\r\n   }\r\n\r\n   function burn(uint256 _value) public returns (bool success) {\r\n       require(balanceOf[msg.sender] >= _value);\r\n       balanceOf[msg.sender] -= _value;\r\n       totalSupply -= _value;\r\n       emit Burn(msg.sender, _value);\r\n       return true;\r\n   }\r\n\r\n   function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n       require(balanceOf[_from] >= _value);\r\n       require(_value <= allowance[_from][msg.sender]);\r\n       balanceOf[_from] -= _value;\r\n       allowance[_from][msg.sender] -= _value;\r\n       totalSupply -= _value;\r\n       emit Burn(_from, _value);\r\n       return true;\r\n   }\r\n}\r\n"}}}