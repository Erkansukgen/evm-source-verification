{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/implementation.sol": {
      "content": "pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./libs/Bancor.sol\";\r\nimport \"./libs/SafeMath.sol\";\r\nimport \"./libs/ISoloMargin.sol\";\r\nimport \"./libs/FlashloanBase.sol\";\r\nimport \"./libs/ICallee.sol\";\r\nimport \"./libs/Interfaces.sol\";\r\nimport \"./libs/UniswapV2.sol\";\r\nimport \"./libs/IERC20.sol\";\r\nimport \"./libs/Addresses.sol\";\r\n\r\ncontract Implementation {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    struct Swap {\r\n        uint protocol;\r\n        address swapContract;\r\n        address poolContract;\r\n        address tokenAcontract;\r\n        address tokenBcontract;\r\n    }\r\n    \r\n    struct ArbSequence {\r\n        uint targetBlock;\r\n        bool WithLoan;\r\n        bool UseChi;\r\n        uint LoanProtocolID;\r\n        address LoanContract;\r\n        address LoanToken;\r\n        address RepayToken;\r\n        uint initialAmountIn;\r\n        uint minAmountOut;\r\n        uint estGasCost;\r\n        Swap[] swapRequests;\r\n    }\r\n    \r\n    event BalancerDebug(address indexed pool, uint balTokenIn, uint dwTokenIn, uint balTokenOut, uint dwTokenOut, uint inputAmount, uint outputAmount);\r\n    event UniswapDebug(address indexed pool, uint balTokenIn, uint balTokenOut, uint inputAmount, uint outputAmount);\r\n    event BancorDebug(address[] path, uint inputAmount, uint outputAmount);\r\n    event CurveDebug(uint inputAmount, uint outputAmount);\r\n    event OutputDebug(uint lastAmount, uint checkMinAmountOut, uint estGasCost);\r\n    event FailCheck(uint targetBlock);\r\n    \r\n    function ExecuteArbitrage(ArbSequence memory Arbitrage) public {\r\n        uint256 gasStart = gasleft();\r\n        bool isValid;\r\n        if (Arbitrage.targetBlock == 0 || block.number == Arbitrage.targetBlock) {\r\n            isValid = true;\r\n        } else {\r\n            emit FailCheck(Arbitrage.targetBlock);\r\n        }\r\n        if (isValid) {\r\n            uint requestsLength = Arbitrage.swapRequests.length;\r\n            uint checkMinAmountOut = Arbitrage.initialAmountIn;\r\n            if (Arbitrage.WithLoan) {\r\n                if (Arbitrage.LoanProtocolID == 1) {\r\n                    ERC20Token tokenIn = ERC20Token(Arbitrage.RepayToken);\r\n                    ERC20Token tokenOut = ERC20Token(Arbitrage.LoanToken);\r\n                    uint256 balTokenIn = tokenIn.balanceOf(Arbitrage.LoanContract);\r\n                    uint256 balTokenOut = tokenOut.balanceOf(Arbitrage.LoanContract);\r\n                    checkMinAmountOut = getAmountIn(Arbitrage.initialAmountIn, balTokenIn, balTokenOut);\r\n                    emit UniswapDebug(Arbitrage.LoanContract, balTokenIn, balTokenOut, Arbitrage.initialAmountIn, checkMinAmountOut);\r\n                }\r\n            }\r\n            address bancorNetworkAddress;\r\n            IBancorNetwork networkContract;\r\n            bool bancorNetworkContractDefined;\r\n            uint lastAmount = Arbitrage.initialAmountIn;\r\n            for (uint i=0; i<requestsLength; i++) {\r\n                Swap memory currentRequest = Arbitrage.swapRequests[i];\r\n                ERC20Token tokenIn;\r\n                ERC20Token tokenOut;\r\n                uint256 balTokenIn;\r\n                uint256 balTokenOut;\r\n                if (currentRequest.protocol == 1) { // Uniswap\r\n                    tokenIn = ERC20Token(currentRequest.tokenAcontract);\r\n                    tokenOut = ERC20Token(currentRequest.tokenBcontract);\r\n                    balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\r\n                    balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = getAmountOut(inputAmount, balTokenIn, balTokenOut);\r\n                    emit UniswapDebug(currentRequest.poolContract, balTokenIn, balTokenOut, inputAmount, lastAmount);\r\n                } else if (currentRequest.protocol == 2) { // Balancer\r\n                    tokenIn = ERC20Token(currentRequest.tokenAcontract);\r\n                    tokenOut = ERC20Token(currentRequest.tokenBcontract);\r\n                    balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\r\n                    balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\r\n                    BalancerPool pool = BalancerPool(currentRequest.poolContract);\r\n                    uint dwTokenIn = pool.getDenormalizedWeight(currentRequest.tokenAcontract);\r\n                    uint dwTokenOut = pool.getDenormalizedWeight(currentRequest.tokenBcontract);\r\n                    uint poolFees = pool.getSwapFee();\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = calcOutGivenIn(balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, poolFees);\r\n                    uint outputAmount = lastAmount;\r\n                    emit BalancerDebug(currentRequest.poolContract, balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, outputAmount);\r\n                } else if (currentRequest.protocol == 4) { // Bancor\r\n                   if (!bancorNetworkContractDefined) {\r\n                        (networkContract, bancorNetworkAddress) = getBancorNetworkContract();\r\n                        bancorNetworkContractDefined = true;\r\n                   }\r\n                   IConverter bancorPool = IConverter(currentRequest.poolContract);\r\n                   address[] memory path = new address[](3);\r\n                   path[0] = currentRequest.tokenAcontract;\r\n                   path[1] = address(bancorPool.anchor());\r\n                   path[2] = currentRequest.tokenBcontract;\r\n                   uint inputAmount = lastAmount;\r\n                   uint fees;\r\n                   (lastAmount, fees) = networkContract.getReturnByPath(path, inputAmount);\r\n                   emit BancorDebug(path, inputAmount, lastAmount);\r\n                } else if (currentRequest.protocol == 3) { // Curve\r\n                    CurveRegistry exchangeContract = CurveRegistry(currentRequest.swapContract);\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = exchangeContract.get_exchange_amount(currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, inputAmount);\r\n                    emit CurveDebug(inputAmount, lastAmount);\r\n                }\r\n            }\r\n            checkMinAmountOut = checkMinAmountOut + Arbitrage.estGasCost;\r\n            if (lastAmount < checkMinAmountOut) {\r\n                isValid = false;\r\n            }\r\n            emit OutputDebug(lastAmount, checkMinAmountOut, Arbitrage.estGasCost);\r\n        }\r\n        if (isValid) {\r\n            if (Arbitrage.WithLoan) {\r\n                if (Arbitrage.LoanProtocolID == 1) {\r\n                    UniswapLoan(Arbitrage.LoanContract, Arbitrage.LoanToken, Arbitrage.RepayToken, Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n                } else if (Arbitrage.LoanProtocolID == 2) {\r\n                    dYdXLoan(Arbitrage.LoanContract, Arbitrage.LoanToken, Arbitrage.RepayToken, Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n                } else if (Arbitrage.LoanProtocolID == 3) {\r\n                    AaveLoan(Arbitrage.LoanContract, Arbitrage.LoanToken, Arbitrage.RepayToken, Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n                } else {\r\n                    revert(\"Invalid loan protocol ID\");\r\n                }\r\n            } else {\r\n                Sequence(Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n            }\r\n        }\r\n        if (Arbitrage.UseChi) {\r\n            uint256 gasSpent = 31000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            ChiGT Chi = ChiGT(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n            Chi.freeUpTo((gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    function Sequence(uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        uint requestsLength = swapRequests.length;\r\n        uint lastAmountOut = initialAmountIn;\r\n        for (uint i=0; i<requestsLength; i++) { \r\n            Swap memory currentRequest = swapRequests[i];\r\n            if (lastAmountOut == 0) {\r\n                revert(\"Invalid lastAmountOut\");\r\n            }\r\n            if (currentRequest.protocol == 1) { // Uniswap\r\n                uint currAmountOut = SwapUniswap(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert(\"Uniswap invalid out amount\");\r\n                }\r\n            } else if (currentRequest.protocol == 2) { // Balancer\r\n                uint currAmountOut = SwapBalancer(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert(\"Balancer invalid out amount\");\r\n                }\r\n            } else if (currentRequest.protocol == 3) { // Curve\r\n                uint currAmountOut = SwapCurve(currentRequest.swapContract, currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert(\"Curve invalid out amount\");\r\n                }\r\n            } else if (currentRequest.protocol == 4) { // Bancor\r\n                 uint currAmountOut = SwapBancor(currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert(\"Bancor invalid out amount\");\r\n                }\r\n            } else {\r\n                revert(\"Invalid protocol in sequence\");\r\n            }\r\n        }\r\n        if (lastAmountOut < minAmountOut) {\r\n            revert(\"lastAmountOut < minAmountOut\");\r\n        }\r\n    }\r\n    \r\n    function SwapUniswap(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        UniswapRouter router = UniswapRouter(swapContract);\r\n        address[] memory fullPath = new address[](2);\r\n        fullPath[0] = contractA;\r\n        fullPath[1] = contractB;\r\n        uint deadLine = block.timestamp + 20 minutes;\r\n        uint[] memory Output = router.swapExactTokensForTokens(amountIn, type(uint).min, fullPath, address(this), deadLine);\r\n        return Output[Output.length - 1];\r\n    }\r\n    \r\n    function SwapBalancer(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        BalancerPool pool = BalancerPool(swapContract);\r\n        (uint tokenOut, uint spotAfter) = pool.swapExactAmountIn(contractA, amountIn, contractB, type(uint).min, type(uint).max);\r\n        return tokenOut;\r\n    }\r\n    \r\n    function SwapBancor(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        address ethBancorAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        (IBancorNetwork networkContract, address bancorNetworkAddress) = getBancorNetworkContract();\r\n        IConverter bancorPool = IConverter(swapContract);\r\n        address[] memory path = new address[](3);\r\n        path[0] = contractA;\r\n        path[1] = address(bancorPool.anchor());\r\n        path[2] = contractB;\r\n        uint ethInputAmount;\r\n        if (contractA != ethBancorAddress) {\r\n            checkAllowance(contractA, bancorNetworkAddress, amountIn);\r\n        } else {\r\n            // WETH -> ETH\r\n            IERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n            wETH.withdraw(amountIn);\r\n            ethInputAmount = amountIn;\r\n        }\r\n        uint tokenOut = networkContract.convert{value: ethInputAmount}(path, amountIn, type(uint).min+1);\r\n        if (contractB == ethBancorAddress) {\r\n            // ETH -> WETH\r\n            address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2).call{value: tokenOut}(\"\");\r\n        }\r\n        return tokenOut;\r\n    }\r\n    \r\n    function SwapCurve(address swapContract, address poolContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        CurveRegistry registry = CurveRegistry(swapContract);\r\n        ERC20Token outToken = ERC20Token(contractB);\r\n        uint256 startOutToken = outToken.balanceOf(address(this));\r\n        registry.exchange(poolContract, contractA, contractB, amountIn, type(uint).min);\r\n        uint256 afterOutToken = outToken.balanceOf(address(this));\r\n        uint256 swappedTokens = afterOutToken.sub(startOutToken);\r\n        return swappedTokens;\r\n    }\r\n    \r\n    function checkAllowance(address tokenContract, address spenderContract, uint256 approvedAmount) internal {\r\n        ERC20Token targetToken = ERC20Token(tokenContract);\r\n        uint256 allowed = targetToken.allowance(address(this), spenderContract);\r\n        if (allowed < approvedAmount) {\r\n            if (allowed != 0) {\r\n                safeApprove(IERC20(tokenContract), spenderContract, 0);\r\n            }\r\n            safeApprove(IERC20(tokenContract), spenderContract, (approvedAmount * 1000));\r\n        }\r\n    }\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n    \r\n    // Uniswap flash loan\r\n    \r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        require(sender == address(this)); // ensure that proxy contract is the caller\r\n        address token0 = IUniswapV2Pair(msg.sender).token0(); \r\n        address token1 = IUniswapV2Pair(msg.sender).token1();\r\n        \r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n            address RepayToken,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests\r\n        ) = abi.decode(data, (address, address, address, uint, uint, Swap[]));\r\n        require(msg.sender == LoanContract); // ensure that msg.sender is LoanContract\r\n    \r\n        uint amountToRepay;\r\n        uint ReserveIn;\r\n        uint ReserveOut;\r\n        if (LoanToken == RepayToken) {\r\n            uint fee = ((initialAmountIn * 3) / 997) + 1;\r\n            amountToRepay = initialAmountIn + fee;\r\n        } else {\r\n            (uint Reserve0, uint Reserve1, uint BlockTimestamp) = IUniswapV2Pair(msg.sender).getReserves();\r\n            if (LoanToken == token0) {\r\n                ReserveIn = Reserve1;\r\n                ReserveOut = Reserve0;\r\n            }\r\n            if (LoanToken == token1) {\r\n                ReserveIn = Reserve0;\r\n                ReserveOut = Reserve1;\r\n            }\r\n            amountToRepay = getAmountIn(initialAmountIn, ReserveIn, ReserveOut);\r\n        }\r\n        //emit UniswapDebug(LoanContract, ReserveIn, ReserveOut, initialAmountIn, amountToRepay); // TEMP\r\n        \r\n        Sequence(initialAmountIn, amountToRepay, swapRequests);\r\n        \r\n        ERC20Token(RepayToken).transfer(msg.sender, amountToRepay);\r\n    }\r\n    \r\n    function UniswapLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        address token0 = IUniswapV2Pair(LoanContract).token0(); \r\n        address token1 = IUniswapV2Pair(LoanContract).token1();\r\n        \r\n        uint amount0Out;\r\n        uint amount1Out;\r\n        if (LoanToken == token0) {\r\n            amount0Out = initialAmountIn;\r\n            amount1Out = 0;\r\n        } else if (LoanToken == token1) {\r\n            amount1Out = initialAmountIn;\r\n            amount0Out = 0;\r\n        }\r\n        require(amount1Out == 0 || amount0Out == 0);\r\n        \r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        \r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests\r\n        );\r\n        IUniswapV2Pair(LoanContract).swap(amount0Out, amount1Out, address(this), SequenceData);\r\n    }\r\n    \r\n    // dYdX flash loan\r\n    \r\n    function callFunction(address sender, Account.Info memory account, bytes memory data) external {\r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n            address RepayToken,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests\r\n        ) = abi.decode(data, (address, address, address, uint, uint, Swap[]));\r\n        \r\n        Sequence(initialAmountIn, minAmountOut, swapRequests);\r\n    }\r\n    \r\n    function dYdXLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests\r\n        );\r\n        uint RepayAmount = initialAmountIn.add(2);\r\n        ISoloMargin soloContract = ISoloMargin(LoanContract);\r\n        uint256 marketId = DydxFlashloanBase._getMarketIdFromTokenAddress(LoanContract, LoanToken);\r\n        checkAllowance(LoanToken, LoanContract, RepayAmount);\r\n        \r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n        \r\n        operations[0] = DydxFlashloanBase._getWithdrawAction(marketId, initialAmountIn);\r\n        operations[1] = DydxFlashloanBase._getCallAction(SequenceData);\r\n        operations[2] = DydxFlashloanBase._getDepositAction(marketId, RepayAmount);\r\n        \r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = DydxFlashloanBase._getAccountInfo();\r\n        \r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        soloContract.operate(accountInfos, operations);\r\n    }\r\n    \r\n    // Aave flash loan\r\n    \r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes memory _params) external {\r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n            address RepayToken,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests\r\n        ) = abi.decode(_params, (address, address, address, uint, uint, Swap[]));\r\n        \r\n        uint RepayAmount = _amount.add(_fee);\r\n        \r\n        Sequence(initialAmountIn, minAmountOut, swapRequests);\r\n        \r\n        address Provider = ILendingPool(LoanContract).addressesProvider();\r\n        address payable LendingCore = ILendingPoolAddressesProvider(Provider).getLendingPoolCore();\r\n        \r\n        ERC20Token(LoanToken).transfer(LendingCore, RepayAmount);\r\n    }\r\n    \r\n    function AaveLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests\r\n        );\r\n        ILendingPool LendingPool = ILendingPool(LoanContract);\r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        LendingPool.flashLoan(address(this), LoanToken, initialAmountIn, SequenceData);\r\n    }\r\n    \r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n    \r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    \r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\r\n        uint adjustedIn = bsub((10**18), swapFee);\r\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\r\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\r\n        uint foo = bpow(y, weightRatio);\r\n        uint bar = bsub((10**18), foo);\r\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\r\n        return tokenAmountOut;\r\n    }\r\n    \r\n    function getBancorNetworkContract() public returns(IBancorNetwork, address) {\r\n        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4); // IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n        address output = contractRegistry.addressOf('BancorNetwork');\r\n        return (IBancorNetwork(output), output);\r\n    }\r\n    \r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * (10**18);\r\n        require(a == 0 || c0 / a == (10**18), \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n    \r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + ((10**18) / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / (10**18);\r\n        return c2;\r\n    }\r\n    \r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n    \r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n    \r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : (10**18);\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= (1 wei), \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= ((2 * (10**18)) - 1 wei), \"ERR_BPOW_BASE_TOO_HIGH\");\r\n        uint whole  = bfloor(exp);   \r\n        uint remain = bsub(exp, whole);\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n        uint partialResult = bpowApprox(base, remain, (10**18) / 10**10);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, (10**18));\r\n        uint term = (10**18);\r\n        uint sum   = term;\r\n        bool negative = false;\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * (10**18);\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, (10**18)));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n    \r\n    function btoi(uint a)\r\n        internal pure \r\n        returns (uint)\r\n    {\r\n        return a / (10**18);\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * (10**18);\r\n    }\r\n    \r\n}"
    },
    "browser/libs/Addresses.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "browser/libs/Bancor.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ninterface IContractRegistry {\n    function addressOf(\n        bytes32 contractName\n    ) external returns(address);\n}\n\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\ninterface IConverter is IOwned {\n    function anchor() external view returns (IConverterAnchor);\n}\n\ninterface IConverterAnchor is IOwned {\n\n}\n\ninterface IBancorNetwork {\n    function convert(\n        address[] memory _path, \n        uint256 _amount, \n        uint256 _minReturn\n    ) external payable returns (uint256);\n\n    function getReturnByPath(\n        address[] memory _path, \n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function conversionPath(\n        IERC20Token _sourceToken, \n        IERC20Token _targetToken\n    ) external view returns (address[] memory);\n}\n\ninterface IERC20Token {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n}"
    },
    "browser/libs/FlashloanBase.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nimport \"./ISoloMargin.sol\";\nimport \"./SafeMath.sol\";\n\nlibrary DydxFlashloanBase {\n    using SafeMath for uint256;\n\n    // -- Internal Helper functions -- //\n\n    function _getMarketIdFromTokenAddress(address _solo, address token)\n        internal\n        view\n        returns (uint256)\n    {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(\"No marketId found for provided token\");\n    }\n\n    function _getRepaymentAmountInternal(uint256 amount)\n        internal\n        view\n        returns (uint256)\n    {\n        // Needs to be overcollateralize\n        // Needs to provide +2 wei to be safe\n        return amount.add(2);\n    }\n\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getWithdrawAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n}\n"
    },
    "browser/libs/ICallee.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport { Account } from \"./ISoloMargin.sol\";\n\n//SPDX-License-Identifier: UNLICENSED\n\ninterface ICallee {\n\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info memory accountInfo,\n        bytes memory data\n    )\n        external;\n}"
    },
    "browser/libs/IERC20.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    function approve(address spender, uint256 amount) external returns (bool);\n    function withdraw(uint wad) external;\n}\n"
    },
    "browser/libs/ISoloMargin.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n    struct Storage {\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n}\n\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n}\n\n\nlibrary Decimal {\n    struct D256 {\n        uint256 value;\n    }\n}\n\n\nlibrary Interest {\n    struct Rate {\n        uint256 value;\n    }\n\n    struct Index {\n        uint96 borrow;\n        uint96 supply;\n        uint32 lastUpdate;\n    }\n}\n\n\nlibrary Monetary {\n    struct Price {\n        uint256 value;\n    }\n    struct Value {\n        uint256 value;\n    }\n}\n\n\nlibrary Storage {\n    // All information necessary for tracking a market\n    struct Market {\n        // Contract address of the associated ERC20 token\n        address token;\n        // Total aggregated supply and borrow amount of the entire market\n        Types.TotalPar totalPar;\n        // Interest index of the market\n        Interest.Index index;\n        // Contract address of the price oracle for this market\n        address priceOracle;\n        // Contract address of the interest setter for this market\n        address interestSetter;\n        // Multiplier on the marginRatio for this market\n        Decimal.D256 marginPremium;\n        // Multiplier on the liquidationSpread for this market\n        Decimal.D256 spreadPremium;\n        // Whether additional borrows are allowed for this market\n        bool isClosing;\n    }\n\n    // The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        Decimal.D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        Decimal.D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        Decimal.D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Monetary.Value minBorrowedValue;\n    }\n\n    // The maximum RiskParam values that can be set\n    struct RiskLimits {\n        uint64 marginRatioMax;\n        uint64 liquidationSpreadMax;\n        uint64 earningsRateMax;\n        uint64 marginPremiumMax;\n        uint64 spreadPremiumMax;\n        uint128 minBorrowedValueMax;\n    }\n\n    // The entire storage state of Solo\n    struct State {\n        // number of markets\n        uint256 numMarkets;\n        // marketId => Market\n        mapping(uint256 => Market) markets;\n        // owner => account number => Account\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n        // Addresses that can control other users accounts\n        mapping(address => mapping(address => bool)) operators;\n        // Addresses that can control all users accounts\n        mapping(address => bool) globalOperators;\n        // mutable risk parameters of the system\n        RiskParams riskParams;\n        // immutable risk limits of the system\n        RiskLimits riskLimits;\n    }\n}\n\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n}\n\n\ninterface ISoloMargin {\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    function ownerSetSpreadPremium(\n        uint256 marketId,\n        Decimal.D256 memory spreadPremium\n    ) external;\n\n    function getIsGlobalOperator(address operator) external view returns (bool);\n\n    function getMarketTokenAddress(uint256 marketId)\n        external\n        view\n        returns (address);\n\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n        external;\n\n    function getAccountValues(Account.Info memory account)\n        external\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketPriceOracle(uint256 marketId)\n        external\n        view\n        returns (address);\n\n    function getMarketInterestSetter(uint256 marketId)\n        external\n        view\n        returns (address);\n\n    function getMarketSpreadPremium(uint256 marketId)\n        external\n        view\n        returns (Decimal.D256 memory);\n\n    function getNumMarkets() external view returns (uint256);\n\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n        external\n        returns (uint256);\n\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\n        external;\n\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\n\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\n\n    function getIsLocalOperator(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    function getAccountPar(Account.Info memory account, uint256 marketId)\n        external\n        view\n        returns (Types.Par memory);\n\n    function ownerSetMarginPremium(\n        uint256 marketId,\n        Decimal.D256 memory marginPremium\n    ) external;\n\n    function getMarginRatio() external view returns (Decimal.D256 memory);\n\n    function getMarketCurrentIndex(uint256 marketId)\n        external\n        view\n        returns (Interest.Index memory);\n\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\n\n    function getRiskParams() external view returns (Storage.RiskParams memory);\n\n    function getAccountBalances(Account.Info memory account)\n        external\n        view\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\n\n    function renounceOwnership() external;\n\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\n\n    function setOperators(OperatorArg[] memory args) external;\n\n    function getMarketPrice(uint256 marketId) external view returns (address);\n\n    function owner() external view returns (address);\n\n    function isOwner() external view returns (bool);\n\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n        external\n        returns (uint256);\n\n    function ownerAddMarket(\n        address token,\n        address priceOracle,\n        address interestSetter,\n        Decimal.D256 memory marginPremium,\n        Decimal.D256 memory spreadPremium\n    ) external;\n\n    function operate(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    ) external;\n\n    function getMarketWithInfo(uint256 marketId)\n        external\n        view\n        returns (\n            Storage.Market memory,\n            Interest.Index memory,\n            Monetary.Price memory,\n            Interest.Rate memory\n        );\n\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\n\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\n\n    function getAccountWei(Account.Info memory account, uint256 marketId)\n        external\n        view\n        returns (Types.Wei memory);\n\n    function getMarketTotalPar(uint256 marketId)\n        external\n        view\n        returns (Types.TotalPar memory);\n\n    function getLiquidationSpreadForPair(\n        uint256 heldMarketId,\n        uint256 owedMarketId\n    ) external view returns (Decimal.D256 memory);\n\n    function getNumExcessTokens(uint256 marketId)\n        external\n        view\n        returns (Types.Wei memory);\n\n    function getMarketCachedIndex(uint256 marketId)\n        external\n        view\n        returns (Interest.Index memory);\n\n    function getAccountStatus(Account.Info memory account)\n        external\n        view\n        returns (uint8);\n\n    function getEarningsRate() external view returns (Decimal.D256 memory);\n\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\n\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\n\n    function getMarket(uint256 marketId)\n        external\n        view\n        returns (Storage.Market memory);\n\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\n\n    function ownerSetGlobalOperator(address operator, bool approved) external;\n\n    function transferOwnership(address newOwner) external;\n\n    function getAdjustedAccountValues(Account.Info memory account)\n        external\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (Decimal.D256 memory);\n\n    function getMarketInterestRate(uint256 marketId)\n        external\n        view\n        returns (Interest.Rate memory);\n}\n"
    },
    "browser/libs/Interfaces.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ninterface ChiGT {\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n}\n\ninterface ILendingPool {\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\n    function addressesProvider() external view returns (address);\n}\n\ninterface ILendingPoolAddressesProvider {\n    function getLendingPoolCore() external view returns (address payable);\n    function getLendingPool() external view returns (address);\n}\n\ncontract ERC20Token {\n    function approve(\n        address _spender, \n        uint256 _value\n    ) external returns (bool success) {}\n    \n    function transfer(\n        address dst, \n        uint256 amount\n    ) external returns (bool) {}\n    \n    function allowance(\n        address _owner, \n        address _spender\n    ) external returns (uint256 remaining) {}\n    \n    function balanceOf(\n        address _owner\n    ) external returns (uint256 balance) {}\n}\n\ncontract UniswapRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts) {}\n}\n\ncontract CurveRegistry {\n    function exchange(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint256 _expected\n    ) external returns (bool) {}\n    \n    function get_exchange_amount(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (uint256) {}\n}\n\n\ncontract BalancerPool {\n    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter) {}\n    \n    function calcOutGivenIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountIn,\n        uint swapFee\n    ) public pure returns (uint tokenAmountOut) {}\n    \n    function getDenormalizedWeight(\n        address token\n    ) external view returns (uint) {}\n    \n    function getSwapFee() external view returns (uint) {}\n}\n\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface IUniswapV2Pair {\n    function transfer(address to, uint value) external returns (bool);\n    event Swap(\n      address indexed sender,\n      uint amount0In,\n      uint amount1In,\n      uint amount0Out,\n      uint amount1Out,\n      address indexed to\n    );\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\ninterface Proxy {\n    function setAllowedDelegate(address newAddress) external;\n    function getStaticConfig(uint Index) external returns (address);\n}"
    },
    "browser/libs/SafeMath.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a); // dev: overflow\n    }\n    \n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a); // dev: underflow\n        c = a - b;\n    }\n    \n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b); // dev: overflow\n    }\n    \n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0); // dev: divide by zero\n        c = a / b;\n    }\n    \n    function bdiv(uint a, uint b) internal pure returns (uint) {\n        uint BONE = 10**18;\n        require(b != 0, \"ERR_DIV_ZERO\");\n        uint c0 = a * BONE;\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n        uint c1 = c0 + (b / 2);\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n        uint c2 = c1 / b;\n        return c2;\n    }\n    \n    function getBase() internal pure returns (uint) {\n        uint BONE = 10**18;\n        return BONE;\n    }\n}"
    },
    "browser/libs/UniswapV2.sol": {
      "content": "pragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nimport \"./SafeMath.sol\";\nimport \"./Interfaces.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n    \n     function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n    \n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n    \n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n}"
    }
  }
}