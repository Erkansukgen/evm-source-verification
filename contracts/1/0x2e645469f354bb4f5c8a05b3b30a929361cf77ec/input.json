{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/test.sol":{"content":"pragma solidity ^0.4.0;\n\ncontract GravatarRegistry {\n  event NewGravatar(uint id, address owner, string displayName, string imageUrl);\n  event UpdatedGravatar(uint id, address owner, string displayName, string imageUrl);\n\n  struct Gravatar {\n    address owner;\n    string displayName;\n    string imageUrl;\n  }\n\n  Gravatar[] public gravatars;\n\n  mapping (uint => address) public gravatarToOwner;\n  mapping (address => uint) public ownerToGravatar;\n\n  function createGravatar(string _displayName, string _imageUrl) public {\n    require(ownerToGravatar[msg.sender] == 0);\n    uint id = gravatars.push(Gravatar(msg.sender, _displayName, _imageUrl)) - 1;\n\n    gravatarToOwner[id] = msg.sender;\n    ownerToGravatar[msg.sender] = id;\n\n    emit NewGravatar(id, msg.sender, _displayName, _imageUrl);\n  }\n\n  function getGravatar(address owner) public view returns (string, string) {\n    uint id = ownerToGravatar[owner];\n    return (gravatars[id].displayName, gravatars[id].imageUrl);\n  }\n\n  function updateGravatarName(string _displayName) public {\n    require(ownerToGravatar[msg.sender] != 0);\n    require(msg.sender == gravatars[ownerToGravatar[msg.sender]].owner);\n\n    uint id = ownerToGravatar[msg.sender];\n\n    gravatars[id].displayName = _displayName;\n    emit UpdatedGravatar(id, msg.sender, _displayName, gravatars[id].imageUrl);\n  }\n\n  function updateGravatarImage(string _imageUrl) public {\n    require(ownerToGravatar[msg.sender] != 0);\n    require(msg.sender == gravatars[ownerToGravatar[msg.sender]].owner);\n\n    uint id = ownerToGravatar[msg.sender];\n\n    gravatars[id].imageUrl =  _imageUrl;\n    emit UpdatedGravatar(id, msg.sender, gravatars[id].displayName, _imageUrl);\n  }\n\n  // the gravatar at position 0 of gravatars[]\n  // is fake\n  // it's a mythical gravatar\n  // that doesn't really exist\n  // dani will invoke this function once when this contract is deployed\n  // but then no more\n  function setMythicalGravatar() public {\n    require(msg.sender == 0x8d3e809Fbd258083a5Ba004a527159Da535c8abA);\n    gravatars.push(Gravatar(0x0, \" \", \" \"));\n  }\n}\n"}}}