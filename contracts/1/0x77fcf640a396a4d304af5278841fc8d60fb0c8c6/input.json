{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/lmpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.6;\r\n\r\ninterface IChi {\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function free(uint256 value) external;\r\n}\r\ninterface IWETH {\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function approve(address spender, uint256 tokens)external returns (bool success);\r\n    function withdraw(uint) external;\r\n}\r\ninterface Pair {\r\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n      function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\ncontract Impl {\r\n    uint256 public totalMinted;\r\n    uint256 public totalBurned;\r\n    uint256 public freeAvgPrice;\r\n    address admin; //asfactor\r\n    uint balance_limit;\r\n    uint reward_limit;\r\n    mapping(address => bool) guards_map;\r\n    \r\n    constructor (address factory) public {\r\n        admin = factory;\r\n        // admin = 0x50f9cf6E81b3fA9D83A146a91E09afC39cE51F13;\r\n    }\r\n\r\n    //for create2\r\n    function init_contract(address _admin) public {\r\n        if (admin==address(0)){\r\n            admin = _admin;\r\n        }\r\n    }\r\n\r\n    function manual_init(\r\n        uint _balance_limit,\r\n        uint _reward_limit,\r\n        uint _totalMinted,\r\n        uint _totalBurned) public{\r\n        require(msg.sender == admin,\"not admin\");\r\n        balance_limit = _balance_limit;\r\n        reward_limit = _reward_limit;        \r\n        totalMinted = _totalMinted;\r\n        totalBurned = _totalBurned;\r\n    }\r\n    function withdraw(address token,uint256 amount) public {\r\n        require(msg.sender == admin,\"not admin\");\r\n        if (address(this).balance > 0) {\r\n            TransferHelper.safeTransferETH(admin,address(this).balance);\r\n        }\r\n        IWETH(token).transfer(admin,amount);\r\n    }\r\n\r\n    function addGuard(address gurad) public {\r\n        require(msg.sender == admin,\"not admin\");\r\n        require(!guards_map[gurad],\"guard exist\");\r\n        guards_map[gurad] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path, address[] memory pairs) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i = 0; i < pairs.length  ; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\r\n            (uint112 reserve0, uint112 reserve1 ,) = Pair(pairs[i]).getReserves();\r\n            (uint reserveIn, uint reserveOut) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n            amounts[i + 1] = UniswapV2Library.getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    function _swap(uint[] memory amounts, address[] memory path, address[] memory pairs, address _to) internal virtual {\r\n        TransferHelper.safeTransfer(\r\n            path[0], pairs[0], amounts[0]\r\n        );\r\n        for (uint i = 0; i < pairs.length; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\r\n            uint amountOut = amounts[i + 1];\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n            address to = i != pairs.length -1 ? pairs[i+1] : _to;\r\n            Pair(pairs[i]).swap(\r\n                amount0Out, amount1Out, to, new bytes(0)\r\n            );\r\n        }\r\n    }\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] memory path,\r\n        address[] memory pairs,\r\n        uint freeAmount,\r\n        bool backfee,\r\n        bool useFreeToken,\r\n        bool showError\r\n    ) public {\r\n        require(guards_map[msg.sender], \"guard not exist\");\r\n        uint[] memory amounts = getAmountsOut(amountIn, path,pairs);\r\n        if (amounts[amounts.length - 1] >= amountOutMin ){\r\n            _swap(amounts, path, pairs,address(this));\r\n            if (!backfee && msg.sender.balance < balance_limit) {\r\n                uint256 reward = SafeMath.sub(amounts[amounts.length - 1],amountIn);\r\n                if (reward > reward_limit )  { \r\n                    IWETH(path[0]).withdraw(reward);\r\n                    TransferHelper.safeTransferETH(msg.sender, reward);\r\n                }\r\n            }\r\n            free(freeAmount,useFreeToken);\r\n        }else{\r\n            if (backfee) {\r\n                free(1,false);\r\n            }else if (showError){\r\n                require(false,\"out\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    function impl_suicide() external {\r\n        require(msg.sender == admin,\"not admin\");\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    function computeAddress2(uint256 salt) internal view returns (address) {\r\n        bytes32 _data = keccak256(\r\n            // abi.encodePacked(bytes1(0xff), address(this), salt, bytes32(0x751976b9e0661efd646f33ce6cc298aa05ff154a3128ac356b990571a8dc9d53)) //dev\r\n            abi.encodePacked(bytes1(0xff), address(this), salt, bytes32(0x534f598cc31120a4ae861bf1f5e0b8d474f4e8841c0ca6f37d99a6f1b397c46d)) //dev\r\n            \r\n        );\r\n        return address(uint256(_data));\r\n    }\r\n\r\n    \r\n    function free(uint256 value,bool useToken) internal {\r\n            if (!useToken) {\r\n                uint256 _totalBurned = totalBurned;\r\n                for (uint256 i = 0; i < value; i++) {\r\n                    computeAddress2(_totalBurned + i).call(\"\");\r\n                }\r\n                totalBurned = _totalBurned + value;\r\n            }else {\r\n                uint256 ichi_balance = IChi(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c).balanceOf(address(this)); \r\n                if (ichi_balance >= value ){\r\n                    IChi(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c).free(value);\r\n                }\r\n            }\r\n    }\r\n    function mint(uint256 value,uint256 _freeAvgPrice) public {\r\n        freeAvgPrice = _freeAvgPrice;\r\n        uint256 offset = totalMinted;\r\n        assembly {\r\n            // mstore(0, 0x746dF095b1B50De78b7a6bC4697b29273318585733ff6000526015600bf30000) dev\r\n            mstore(0, 0x746dD736BD9b915d8fE98e9c507dF85a3318585733ff6000526015600bf30000) //main\r\n\r\n            for {let i := div(value, 32)} i {i := sub(i, 1)} {\r\n                pop(create2(0, 0, 30, add(offset, 0))) pop(create2(0, 0, 30, add(offset, 1)))\r\n                pop(create2(0, 0, 30, add(offset, 2))) pop(create2(0, 0, 30, add(offset, 3)))\r\n                pop(create2(0, 0, 30, add(offset, 4))) pop(create2(0, 0, 30, add(offset, 5)))\r\n                pop(create2(0, 0, 30, add(offset, 6))) pop(create2(0, 0, 30, add(offset, 7)))\r\n                pop(create2(0, 0, 30, add(offset, 8))) pop(create2(0, 0, 30, add(offset, 9)))\r\n                pop(create2(0, 0, 30, add(offset, 10))) pop(create2(0, 0, 30, add(offset, 11)))\r\n                pop(create2(0, 0, 30, add(offset, 12))) pop(create2(0, 0, 30, add(offset, 13)))\r\n                pop(create2(0, 0, 30, add(offset, 14))) pop(create2(0, 0, 30, add(offset, 15)))\r\n                pop(create2(0, 0, 30, add(offset, 16))) pop(create2(0, 0, 30, add(offset, 17)))\r\n                pop(create2(0, 0, 30, add(offset, 18))) pop(create2(0, 0, 30, add(offset, 19)))\r\n                pop(create2(0, 0, 30, add(offset, 20))) pop(create2(0, 0, 30, add(offset, 21)))\r\n                pop(create2(0, 0, 30, add(offset, 22))) pop(create2(0, 0, 30, add(offset, 23)))\r\n                pop(create2(0, 0, 30, add(offset, 24))) pop(create2(0, 0, 30, add(offset, 25)))\r\n                pop(create2(0, 0, 30, add(offset, 26))) pop(create2(0, 0, 30, add(offset, 27)))\r\n                pop(create2(0, 0, 30, add(offset, 28))) pop(create2(0, 0, 30, add(offset, 29)))\r\n                pop(create2(0, 0, 30, add(offset, 30))) pop(create2(0, 0, 30, add(offset, 31)))\r\n                offset := add(offset, 32)\r\n            }\r\n\r\n            for {let i := and(value, 0x1F)} i {i := sub(i, 1)} {\r\n                pop(create2(0, 0, 30, offset))\r\n                offset := add(offset, 1)\r\n            }\r\n        }\r\n        totalMinted = offset;\r\n    }\r\n\r\n    \r\n}"
    }
  }
}