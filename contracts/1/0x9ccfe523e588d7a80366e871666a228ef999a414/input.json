{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"Gen.sol":{"content":" // SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\n \r\ncontract Gen {\r\n\r\n    \r\n\r\n    // MAPPINGS //    \r\n    mapping(string => uint) internal charsMap; // maps characters to numbers for easier access in 'generateWord()' function\r\n    mapping(uint => uint) internal tokenIdToSeed; // initial seed for each tokenId minted\r\n    mapping(uint => uint[8]) internal tokenIdToShuffleShift; // tokenId => array of inexes for words to be shifted as a result of shuffling\r\n    mapping(uint => uint) internal shuffleCount; // tokenId => number of shuffles tokenId has had\r\n    mapping(address => bool) internal hasClaimed; // keeps track of addresses that have claimed a mint\r\n    \r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    \r\n    // VARIABLES //\r\n    \r\n    \r\n    uint16[297] ps = [\r\n        1000, 1889, 2889, 3556, 5223, 6223, 7334, 8778, 9334, 9556, 10000,\r\n        381, 952, 1428, 1809, 2761, 4856, 6094, 7523, 9523, 9809, 10000,\r\n        198, 792, 1584, 2079, 2574, 3267, 3366, 5643, 7029, 9900, 10000,\r\n        714, 1071, 1607, 2232, 2945, 4285, 5178, 6516, 7856, 9195, 10000,\r\n        385, 1348, 3467, 5201, 6163, 7127, 9824, 9920, 9939, 9958, 10000,\r\n        135, 405, 1081, 1216, 1892, 2703, 4325, 5541, 7568, 9730, 10000,\r\n        2443, 2932, 3421, 3910, 4561, 5212, 6677, 8470, 9936, 9985, 10000,\r\n        1239, 1770, 2655, 4071, 5310, 6726, 7257, 9912, 9947, 9982, 10000,\r\n        268, 281, 294, 328, 1668, 4751, 7432, 9979, 9986, 9993, 10000,\r\n        291, 679, 1164, 1649, 2329, 3106, 3689, 4951, 6504, 9708, 10000,\r\n        353, 706, 1923, 3510, 5097, 7672, 8818, 9964, 9982, 9991, 10000, \r\n        755, 1227, 1416, 1605, 1888, 2077, 2171, 3114, 9246, 9812, 10000,\r\n        695, 721, 747, 834, 851, 3023, 5195, 6846, 9974, 9991, 10000,\r\n        103, 308, 513, 821, 1437, 2566, 3901, 7289, 9958, 9979, 10000,\r\n        294, 588, 735, 750, 1337, 2071, 2805, 4127, 6183, 8239, 10000,\r\n        88, 1148, 2561, 2738, 3975, 4682, 4859, 5389, 7156, 9983, 10000,\r\n        325, 760, 1303, 1629, 1955, 3367, 4670, 6624, 8253, 9990, 10000,\r\n        4955, 9910, 9920, 9930, 9940, 9950, 9960, 9970, 9980, 9990, 10000,\r\n        214, 428, 641, 663, 1197, 1411, 1454, 2522, 3590, 4658, 10000,\r\n        196, 784, 2548, 3332, 4312, 5488, 7644, 9800, 9996, 9998, 10000,\r\n        475, 1424, 1661, 2848, 4272, 5933, 8544, 9256, 9968, 9992, 10000,\r\n        515, 618, 1133, 1442, 2267, 3298, 4947, 6493, 7730, 9483, 10000,\r\n        202, 1412, 3025, 5444, 7662, 9880, 9920, 9940, 9960, 9980, 10000,\r\n        23, 252, 480, 2657, 2886, 4719, 7354, 9645, 9874, 9885, 10000,\r\n        433, 866, 1732, 3464, 5195, 8659, 9525, 9698, 9871, 9958, 10000,\r\n        601, 901, 1502, 2103, 3605, 4806, 6007, 9010, 9310, 9400, 10000,\r\n        204, 511, 613, 714, 1737, 3782, 9917, 9968, 9978, 9988, 10000];\r\n    \r\n\r\n\r\n    string[] nextChars = [\r\n        \"fbrwsaltpzj\",\r\n        \"gmldslrtnkb\",\r\n        \"blriiluoaey\",\r\n        \"rliktauhooe\",\r\n        \"ruaoiiegfws\",\r\n        \"mfteladsnrg\",\r\n        \"luaarreioyw\",\r\n        \"luiraohezgy\",\r\n        \"urryoiaejlw\",\r\n        \"gredlocstnb\",\r\n        \"iieaaouuytf\",\r\n        \"aollarsieut\",\r\n        \"ussdyoaielf\",\r\n        \"smmupioaeyn\",\r\n        \"aauyiosetgd\",\r\n        \"zolwtmfurny\",\r\n        \"tupiilaores\",\r\n        \"uuaeiosrfyw\",\r\n        \"nudytslaioe\",\r\n        \"puhaoietwyq\",\r\n        \"usraieohhty\",\r\n        \"ebgzplsntrm\",\r\n        \"uoaieeyvxrl\",\r\n        \"snnoheaiuyr\",\r\n        \"oaueeityxth\",\r\n        \"lmaiseeouvx\",\r\n        \"uyooiaelzrl\"];\r\n\r\n    \r\n\r\n    \r\n    /**\r\n     * @dev Maps characters in 'chars' to numbers for easier comparison in 'generateWord()' function\r\n     */\r\n    function mapChars() internal {\r\n        string[27] memory chars = [\" \", \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\r\n        for (uint i=0; i<27; i++) {\r\n            charsMap[chars[i]] = i;\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Returns length of a string '_string'.\r\n     */\r\n    function stringLength(string memory _string) internal pure returns(uint) {\r\n        return bytes(_string).length;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Gets character from 'nextChars'.\r\n     */\r\n    function getChar(uint row, uint col) internal view returns(string memory) {\r\n        bytes memory line = bytes(nextChars[row]);\r\n        string memory temp = new string(1);\r\n        bytes memory output = bytes(temp);\r\n        output[0] = line[col];\r\n        return string(output); \r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @dev Generates word length (1-16) using a distribution\r\n     */\r\n    function determineWordLength(uint rand) internal pure returns(uint) {\r\n        \r\n        uint16[16] memory cumulativeDistribution = [2,99,761,1929,3175,4694,6291,7654,8744,9328,9678,9872,9938,9976,9991,10000];\r\n        \r\n        uint i = 0;\r\n        while (i <= 15) { \r\n            if (rand <= cumulativeDistribution[i]) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        return i+1;  // returns word length\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @dev Generates a random word of length 1-16, given a '_tokenId' and '_totalSeed' as a seed of randomness\r\n     */\r\n    function generateWord(uint256 _tokenId, uint _totalSeed) internal view returns(string memory) { // change visibility\r\n\r\n        require(_tokenId >= 1 && _tokenId <= 10000, \"Invalid tokenId.\");\r\n\r\n        string memory word;\r\n        string memory char;\r\n        \r\n        uint lengthRand = (uint(keccak256(abi.encodePacked(_tokenId, _totalSeed)))% 10000); // gets random number between 0 and 10,000\r\n        uint rand = (uint(keccak256(abi.encodePacked(_tokenId, lengthRand, _totalSeed)))% 10000) + 1; // gets random number between 1 and 10,000\r\n\r\n        // generates word\r\n        for (uint n=1; n <= determineWordLength(lengthRand); n++) {\r\n            \r\n            // generates letter\r\n            uint i = 0;\r\n            while (i < 11) { // indexStart of ps[] to indexEnd\r\n                if (rand <= ps[(charsMap[char]*11)+i]) {\r\n                    break;\r\n                }\r\n                i++;\r\n            }\r\n            char = getChar(charsMap[char], i);\r\n            \r\n            word = string(abi.encodePacked(word, char)); // appends letter to word\r\n            rand = (uint(keccak256(abi.encodePacked(_tokenId, rand, word, n, _totalSeed)))% 10000) + 1; // gets new random number between 1 and 10,000\r\n        }\r\n        return word;\r\n    }\r\n    \r\n    \r\n}\r\n"},"Lootlang.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n\n\n// IMPORTS //\n\n/**\n * @dev ERC721 token standard\n */\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n/**\n * @dev Modifier 'onlyOwner' becomes available where owner is the contract deployer\n */\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @dev Verification of Merkle trees\n */\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @dev Generates words etc\n */\nimport \"./Gen.sol\";\n\n\n// LIBRARIES //\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}\n\n\n\n\n\n//  CONTRACT //  \n\ncontract Lootlang is ERC721, Ownable, Gen {\n    \n    \n    // VARIABLES //\n    \n    uint public enabled;\n    uint internal mints; \n    uint internal claims; \n    uint internal nextTokenId;\n    uint public contractBalance;\n    string internal contractURIstring;\n    uint public freezeBlock;\n    uint internal freezeBlockChanges;\n    bytes32 internal root;\n\n    \n    constructor() Ownable() ERC721('Lootlang', 'LANG') {\n\n        nextTokenId = 1;\n        \n        freezeBlock = 13487654;\n        \n        contractURIstring = \"https://lootlang.com/metadata.json\";\n        \n        mapChars(); // maps characters to uints\n        \n    }\n\n\n    // EVENTS //\n    \n    event Shuffled(uint tokenId);\n\n\n\n    // ONLY OWNER FUNCTIONS //\n    \n    /**\n     * @dev Set the root for Merkle Proof\n     */\n    function setRoot(bytes32 _newRoot) external onlyOwner {\n        root = _newRoot;\n    }\n    \n    \n    /**\n     * @dev Set the new block number to freeze shuffling. Can only be called once.\n     */\n    function setFreezeBlock(uint _newFreezeBlockNumber) external onlyOwner {\n        require(freezeBlockChanges < 1, \"Freeze block already changed\");\n        freezeBlock = _newFreezeBlockNumber;\n        freezeBlockChanges++;\n    }\n    \n\n    /**\n     * @dev Withdraw '_amount' of Ether to address '_to'. Only contract owner can call.\n     * @param _to - address Ether will be sent to\n     * @param _amount - amount of Ether, in Wei, to be withdrawn\n     */\n    function withdrawFunds(address payable _to, uint _amount) external onlyOwner {\n        require(_amount <= contractBalance, \"Withdrawal amount greater than balance\");\n        contractBalance -= _amount;\n        _to.transfer(_amount);\n    }\n\n\n    /**\n     * @dev activates/deactivates the minting functionality - only the contract owner can call\n     * @param _enabled where 1 = enabled and 0 = not\n     */\n    function setEnable(uint _enabled) external onlyOwner {\n        enabled = _enabled;\n    }\n    \n    \n    /**\n     * @dev Set the contract's URI\n     * @param _contractURIstring - web address containing data read by OpenSea\n     */\n    function setContractURI(string memory _contractURIstring) external onlyOwner {\n        contractURIstring = _contractURIstring;\n    }\n    \n\n    // USER FUNCTIONS // \n    \n\n    /**\n     * @dev Mint an ERC721 token. \n     */\n    function mint() external payable {\n        require(enabled == 1, \"Minting is yet to be enabled\");\n        require(nextTokenId <= 10000 && mints <= 9700, \"All NFTs have been minted\");\n        require(msg.value >= (2*10**16), \"Insufficient funds provided\"); // 0.02 eth (cost of minting an NFT) // SET MINT PRICE\n\n        mints++;\n        contractBalance += msg.value;\n        sharedMintCode();\n    }\n    \n    /**\n     * @dev Claim and mint an ERC721 token.\n     */\n    function claim(bytes32[] memory proof) external { \n        require(enabled == 1, \"Minting is yet to be enabled\");\n        require(hasClaimed[msg.sender] == false, \"Already claimed\");\n        require(nextTokenId <= 10000 && claims <= 300, \"All NFTs have been minted\");\n\n        require(MerkleProof.verify(proof, root, keccak256(abi.encodePacked(msg.sender))) == true, \"Not on pre-approved claim list\");\n\n        claims++;\n        hasClaimed[msg.sender] = true;\n        sharedMintCode();\n    }\n    \n    /**\n     * @dev Shared code used by both 'mint()' and 'claim()' functions.\n     */\n    function sharedMintCode() internal {\n        uint tokenId = nextTokenId;\n        nextTokenId++;\n        tokenIdToSeed[tokenId] = uint(keccak256(abi.encodePacked(tokenId, msg.sender, block.timestamp)))%1000000;\n        _safeMint(msg.sender, tokenId);\n    }\n\n\n    /**\n     * @dev Shuffles up to 8 words. Set input params as 1 to shuffle word, and 0 to leave it. \n     *      E.g. shuffle(243,1,0,0,0,0,0,0,1) shuffles the 1st and 8th word of token 243.\n     */\n    function shuffle(uint _tokenId, uint one, uint two, uint three, uint four, uint five, uint six, uint seven, uint eight) external {\n        require(ownerOf(_tokenId) == msg.sender, \"Must be NFT owner\");\n        require(shuffleCount[_tokenId] < 5, \"Shuffled max amount already\");\n        require(block.number < freezeBlock, \"Shuffling has been frozen!\");\n        require((one+two+three+four+five+six+seven+eight) > 0, \"No words selected to be shuffled\"); \n       \n        uint randomish = uint(keccak256(abi.encodePacked(block.number)))%1000000;\n        uint[8] memory indexesToChange = [one, two, three, four, five, six, seven, eight];\n        \n        for (uint i=0; i<8; i++) {\n            if (indexesToChange[i] > 0) {\n                tokenIdToShuffleShift[_tokenId][i] += randomish;\n            }\n        }\n        \n        shuffleCount[_tokenId]++;\n        emit Shuffled(_tokenId);\n    }\n    \n\n\n\n    // VIEW FUNCTIONS //\n    \n    \n    /**\n     * @dev View total number of minted tokens\n     */\n    function totalSupply() external view returns(uint) {\n        return mints+claims;\n    }\n    \n    /**\n     * @dev View the contract URI.\n     */\n    function contractURI() public view returns (string memory) {\n        return contractURIstring;\n    }\n\n    /**\n     * @dev Internal function used by function 'tokenURI()' to format word lengths for .json file output\n     */\n    function getMetaText(string memory word) internal pure returns(string memory) {\n        string memory length = string(abi.encodePacked(\"\\\"\", toString(stringLength(word)), \" letters\", \"\\\"\"));\n        return length;\n    }\n    \n    /**\n     * @dev Internal function used by function 'tokenURI()' to format words for .json file output\n     */\n    function getMetaWord(string memory word) internal pure returns(string memory) {\n        string memory length = string(abi.encodePacked(\"\\\"\", word, \"\\\"\"));\n        return length;\n    }\n    \n    /**\n     * @dev Creates seed passed in to 'generateWord()' function for seeding randomness\n     */\n    function totalSeedGen(uint tokenId, uint wordNum) internal view returns(uint) {\n        return uint(keccak256(abi.encodePacked(uint(wordNum), tokenIdToSeed[tokenId], tokenIdToShuffleShift[tokenId][wordNum-1])));\n    }\n    \n    /**\n     * @dev View tokenURI of 'tokenId'. \n     */\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\n        \n        require(_exists(tokenId), \"URI query for nonexistent token\");\n\n        string[17] memory parts;\n        parts[0] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: white; font-family: serif; font-size: 20px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" /><text x=\"15\" y=\"30\" class=\"base\">';\n        parts[1] = generateWord(tokenId, totalSeedGen(tokenId, 1));\n        parts[2] = '</text><text x=\"15\" y=\"65\" class=\"base\">';\n        parts[3] = generateWord(tokenId, totalSeedGen(tokenId, 2));\n        parts[4] = '</text><text x=\"15\" y=\"100\" class=\"base\">';\n        parts[5] = generateWord(tokenId, totalSeedGen(tokenId, 3));\n        parts[6] = '</text><text x=\"15\" y=\"135\" class=\"base\">';\n        parts[7] = generateWord(tokenId, totalSeedGen(tokenId, 4));\n        parts[8] = '</text><text x=\"15\" y=\"170\" class=\"base\">';\n        parts[9] = generateWord(tokenId, totalSeedGen(tokenId, 5));\n        parts[10] = '</text><text x=\"15\" y=\"205\" class=\"base\">';\n        parts[11] = generateWord(tokenId, totalSeedGen(tokenId, 6));\n        parts[12] = '</text><text x=\"15\" y=\"240\" class=\"base\">';\n        parts[13] = generateWord(tokenId, totalSeedGen(tokenId, 7));\n        parts[14] = '</text><text x=\"15\" y=\"275\" class=\"base\">';\n        parts[15] = generateWord(tokenId, totalSeedGen(tokenId, 8));\n        parts[16] = '</text></svg>';\n\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\n        \n        string memory json = string(abi.encodePacked('{\"name\": \"Pack #', toString(tokenId), '\", \"description\": \"Pack of 8 Lootlang words\", \"attributes\": [{\"trait_type\": \"Shuffles Used\", \"value\":', getMetaWord(toString(shuffleCount[tokenId])), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[1]), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[3]), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[5]), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[7]), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[9]), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[11]), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[13]), '}, {\"trait_type\": \"Word Length\", \"value\":', getMetaText(parts[15]), '}'));\n        json = Base64.encode(bytes(string(abi.encodePacked(json, ', {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[1]), '}, {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[3]), '}, {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[5]), '}, {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[7]), '}, {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[9]), '}, {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[11]), '}, {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[13]), '}, {\"trait_type\": \"Word\", \"value\":', getMetaWord(parts[15]), '}], \"image\": \"data:image/svg+xml;base64, ', Base64.encode(bytes(output)), '\"}'))));\n        \n        output = string(abi.encodePacked('data:application/json;base64,', json));\n        return output;\n    }\n    \n\n}\n"}}}