{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/presaleOwnerFinalize.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract PresaleOwnerFinalize is Ownable {\r\n    \r\n    //address public mainDappAddr;\r\n    bool public votingEnabled = true;\r\n    address public mainDappAddr;\r\n\r\n    constructor(address addr) public {\r\n        mainDappAddr = addr;\r\n    }\r\n    \r\n    \r\n    mapping(uint256 => address) public indexToCaller;\r\n    mapping(address => uint256) public callerToIndex;\r\n    mapping(address => bool) public callerToBool;\r\n    uint256 public callerIndex;\r\n\r\n    \r\n    function voterCallsFinalizeRefundMainDapp() public {\r\n        require(votingEnabled, \"voterCallIsDisabled\");\r\n        (bool _voterfinalized, bytes memory _finalizedReturn) = address(mainDappAddr).call(abi.encodeWithSignature(\"voterCallsFinalizeRefund(address)\", msg.sender));\r\n        require(_voterfinalized, \"presaleOwner Emergency Finalization call failed\" );\r\n        indexToCaller[callerIndex] = msg.sender;\r\n        callerToIndex[msg.sender] = callerIndex;\r\n        callerToBool[msg.sender] = true;\r\n        callerIndex++;\r\n\r\n    }\r\n    \r\n\r\n    function disableVoterCall() public onlyOwner {\r\n        \r\n        votingEnabled = false;\r\n        \r\n        \r\n    }\r\n    \r\n\r\n    function enableVoterCall() public onlyOwner {\r\n        \r\n        votingEnabled = true;\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    function updateMaindappAddr(address _newMaindapp) public onlyOwner {\r\n        \r\n        mainDappAddr = _newMaindapp;\r\n        \r\n        \r\n        \r\n    }\r\n}\r\n\r\n"
    }
  }
}