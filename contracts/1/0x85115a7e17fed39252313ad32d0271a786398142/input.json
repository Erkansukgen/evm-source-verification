{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/v4.sol": {
      "content": "pragma solidity >=0.7.0;\n\n\ninterface DonateCoin {\n    function transfer(address to, uint256 value) external returns (bool);\n    function balanceOf(address who) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n}\n\ninterface LiquidityPool {\n    function borrow(address _token,uint256 _amount,bytes calldata _data) external;\n}\n\ncontract HelloWorld {address public owner;address public borrowProxy;address payable public liquidityPool;\n\n    modifier onlyOwner {if (msg.sender == owner) {_;}}\n    modifier onlyBorrowProxy {if (msg.sender == borrowProxy) {_;}}\n\n    constructor() public {\n        owner = msg.sender;\n        borrowProxy = 0x82151CA501c81108d032C490E25f804787BEF3b8;\n        liquidityPool = 0x53463cd0b074E5FDafc55DcE7B1C82ADF1a43B2E;\n    }\n    \n    receive() external payable {}\n\n    function setOwner(address _newOwner) external onlyOwner {owner = _newOwner;}\n    function execute(address _dest, uint256 _value, bytes memory _data) public payable onlyOwner {(bool s, bytes memory b) = _dest.call{value: _value}(_data);}\n    function exit() public onlyOwner {msg.sender.transfer(address(this).balance);}\n    function setBorrowProxy(address _newBorrowProxy) external onlyOwner {borrowProxy = _newBorrowProxy;}\n    function setLiquidityPool(address payable _newLiquidityPool)external onlyOwner{liquidityPool = _newLiquidityPool;}\n    \n    function hello(address _shitcoinaddress, uint256 _amountToBorrow, uint256 _amountOfProfitToReturn)external onlyOwner{\n        require(_amountOfProfitToReturn > 0, \"profit is zero\");\n        require(DonateCoin(_shitcoinaddress).balanceOf(address(this)) > _amountOfProfitToReturn,\"balance is too low\");\n        LiquidityPool(liquidityPool).borrow(_shitcoinaddress,_amountToBorrow,abi.encodeWithSelector(this.helloCallback.selector,_shitcoinaddress,_amountToBorrow,_amountOfProfitToReturn));}\n\n    function helloCallback(address _shitcoinaddress,uint256 _amountBorrowed,uint256 _amountOfProfitToReturn) external onlyBorrowProxy {\n        assert(DonateCoin(_shitcoinaddress).balanceOf(address(this)) >= _amountOfProfitToReturn + _amountBorrowed);\n        assert(_amountOfProfitToReturn > 0);\n        DonateCoin(_shitcoinaddress).transfer(liquidityPool,_amountOfProfitToReturn + _amountBorrowed);}}"
    }
  }
}