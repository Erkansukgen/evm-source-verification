{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "FDCStimulus.sol": {
      "content": "pragma solidity 0.5.16;\r\n\r\ncontract FDCStimulus {\r\n\r\n  string private stimulusVersion = \"v2\";\r\n\r\n  uint256 private DappReward = 1111200;\r\n\r\n  mapping (address => bool) private StimulusAddresses;\r\n\r\n  address private FDCContract=0x311C6769461e1d2173481F8d789AF00B39DF6d75;\r\n\r\n  function stimulus(address Address) public returns (bool) {\r\n\r\n    require(Address != address(0), \"Need to use a valid Address\");\r\n    require(StimulusAddresses[Address] == false, \"Address already got stimulus\");\r\n\r\n    (bool successBalance, bytes memory dataBalance) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('balanceOf(address)'))), address(this)));\r\n    require(successBalance, \"Freedom Dividend Coin stimulus balanceOf failed.\");\r\n    uint256 rewardLeft = abi.decode(dataBalance, (uint256));\r\n\r\n    if (rewardLeft >= DappReward) {\r\n        (bool successTransfer, bytes memory dataTransfer) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), Address, DappReward));\r\n        require(successTransfer, \"Freedom Dividend Coin stimulus failed.\");\r\n        StimulusAddresses[Address] = true;\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n\r\n  }\r\n\r\n  function getStimulusAddresses(address Address) public view returns (bool) {\r\n    return StimulusAddresses[Address];\r\n  }\r\n\r\n  function getStimulusVersion() public view returns (string memory) {\r\n    return stimulusVersion;\r\n  }\r\n\r\n}"
    }
  }
}