{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DSA_READ/uniswapv2.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Factory {\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function decimals() external view returns (uint);\n    function totalSupply() external view returns (uint);\n}\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    uint constant WAD = 10 ** 18;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n    /**\n     * @dev get Ethereum address\n     */\n    function getEthAddr() public pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n}\n\ncontract UniswapHelpers is Helpers {\n    /**\n     * @dev Return WETH address\n     */\n    function getAddressWETH() internal pure returns (address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    }\n\n    /**\n     * @dev Return uniswap v2 router02 Address\n     */\n    function getUniswapAddr() internal pure returns (address) {\n        return 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    }\n\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = (_amt / 10 ** (18 - _dec));\n    }\n\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = mul(_amt, 10 ** (18 - _dec));\n    }\n\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\n        _buy = buy == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\n        _sell = sell == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\n    }\n\n    function getExpectedBuyAmt(\n        address buyAddr,\n        address sellAddr,\n        uint sellAmt\n    ) internal view returns(uint buyAmt) {\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\n        address[] memory paths = new address[](2);\n        paths[0] = address(sellAddr);\n        paths[1] = address(buyAddr);\n        uint[] memory amts = router.getAmountsOut(\n            sellAmt,\n            paths\n        );\n        buyAmt = amts[1];\n    }\n\n    function getExpectedSellAmt(\n        address buyAddr,\n        address sellAddr,\n        uint buyAmt\n    ) internal view returns(uint sellAmt) {\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\n        address[] memory paths = new address[](2);\n        paths[0] = address(sellAddr);\n        paths[1] = address(buyAddr);\n        uint[] memory amts = router.getAmountsIn(\n            buyAmt,\n            paths\n        );\n        sellAmt = amts[0];\n    }\n\n    function getBuyUnitAmt(\n        TokenInterface buyAddr,\n        uint expectedAmt,\n        TokenInterface sellAddr,\n        uint sellAmt,\n        uint slippage\n    ) internal view returns (uint unitAmt) {\n        uint _sellAmt = convertTo18((sellAddr).decimals(), sellAmt);\n        uint _buyAmt = convertTo18(buyAddr.decimals(), expectedAmt);\n        unitAmt = wdiv(_buyAmt, _sellAmt);\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\n    }\n\n    function getSellUnitAmt(\n        TokenInterface sellAddr,\n        uint expectedAmt,\n        TokenInterface buyAddr,\n        uint buyAmt,\n        uint slippage\n    ) internal view returns (uint unitAmt) {\n        uint _buyAmt = convertTo18(buyAddr.decimals(), buyAmt);\n        uint _sellAmt = convertTo18(sellAddr.decimals(), expectedAmt);\n        unitAmt = wdiv(_sellAmt, _buyAmt);\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\n    }\n\n    function _getWithdrawUnitAmts(\n        TokenInterface tokenA,\n        TokenInterface tokenB,\n        uint amtA,\n        uint amtB,\n        uint uniAmt,\n        uint slippage\n    ) internal view returns (uint unitAmtA, uint unitAmtB) {\n        uint _amtA = convertTo18(tokenA.decimals(), amtA);\n        uint _amtB = convertTo18(tokenB.decimals(), amtB);\n        unitAmtA = wdiv(_amtA, uniAmt);\n        unitAmtA = wmul(unitAmtA, sub(WAD, slippage));\n        unitAmtB = wdiv(_amtB, uniAmt);\n        unitAmtB = wmul(unitAmtB, sub(WAD, slippage));\n    }\n\n    function _getWithdrawAmts(\n        TokenInterface _tokenA,\n        TokenInterface _tokenB,\n        uint uniAmt\n    ) internal view returns (uint amtA, uint amtB)\n    {\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\n        require(exchangeAddr != address(0), \"pair-not-found.\");\n        TokenInterface uniToken = TokenInterface(exchangeAddr);\n        uint share = wdiv(uniAmt, uniToken.totalSupply());\n        amtA = wmul(_tokenA.balanceOf(exchangeAddr), share);\n        amtB = wmul(_tokenB.balanceOf(exchangeAddr), share);\n    }\n}\n\n\ncontract Resolver is UniswapHelpers {\n\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage)\n    public view returns (uint buyAmt, uint unitAmt)\n    {\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\n        buyAmt = getExpectedBuyAmt(address(_buyAddr), address(_sellAddr), sellAmt);\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\n    }\n\n    function getSellAmount(address buyAddr, address sellAddr, uint buyAmt, uint slippage)\n    public view returns (uint sellAmt, uint unitAmt)\n    {\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\n        sellAmt = getExpectedSellAmt(address(_buyAddr), address(_sellAddr), buyAmt);\n        unitAmt = getSellUnitAmt(_sellAddr, sellAmt, _buyAddr, buyAmt, slippage);\n    }\n\n    function getDepositAmount(\n        address tokenA,\n        address tokenB,\n        uint amtA\n    ) public view returns (uint amtB, uint unitAmt)\n    {\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\n        require(exchangeAddr != address(0), \"pair-not-found.\");\n        uint _amtA18 = convertTo18(_tokenA.decimals(), _tokenA.balanceOf(exchangeAddr));\n        uint _amtB18 = convertTo18(_tokenB.decimals(), _tokenB.balanceOf(exchangeAddr));\n        unitAmt = wdiv(_amtB18, _amtA18);\n        amtB = wmul(unitAmt, convertTo18(_tokenA.decimals(), amtA));\n        amtB = convert18ToDec(_tokenB.decimals(), amtB);\n    }\n\n    function getDepositAmountNewPool(\n        address tokenA,\n        address tokenB,\n        uint amtA,\n        uint amtB\n    ) public view returns (uint unitAmt)\n    {\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\n        require(exchangeAddr == address(0), \"pair-found.\");\n        uint _amtA18 = convertTo18(_tokenA.decimals(), amtA);\n        uint _amtB18 = convertTo18(_tokenB.decimals(), amtB);\n        unitAmt = wdiv(_amtB18, _amtA18);\n    }\n\n    function getWithdrawAmounts(\n        address tokenA,\n        address tokenB,\n        uint uniAmt,\n        uint slippage\n    ) public view returns (uint amtA, uint amtB, uint unitAmtA, uint unitAmtB)\n    {\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\n        (amtA, amtB) = _getWithdrawAmts(\n            _tokenA,\n            _tokenB,\n            uniAmt\n        );\n        (unitAmtA, unitAmtB) = _getWithdrawUnitAmts(\n            _tokenA,\n            _tokenB,\n            amtA,\n            amtB,\n            uniAmt,\n            slippage\n        );\n    }\n\n    struct TokenPair {\n        address tokenA;\n        address tokenB;\n    }\n\n    struct PoolData {\n        uint tokenAShareAmt;\n        uint tokenBShareAmt;\n        uint uniAmt;\n        uint totalSupply;\n    }\n\n    function getPosition(\n        address owner,\n        TokenPair[] memory tokenPairs\n    ) public view returns (PoolData[] memory)\n    {\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\n        uint _len = tokenPairs.length;\n        PoolData[] memory poolData = new PoolData[](_len);\n        for (uint i = 0; i < _len; i++) {\n            (TokenInterface tokenA, TokenInterface tokenB) = changeEthAddress(tokenPairs[i].tokenA, tokenPairs[i].tokenB);\n            address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(\n                address(tokenA),\n                address(tokenB)\n            );\n            if (exchangeAddr != address(0)) {\n                TokenInterface uniToken = TokenInterface(exchangeAddr);\n                uint uniAmt = uniToken.balanceOf(owner);\n                uint totalSupply = uniToken.totalSupply();\n                uint share = wdiv(uniAmt, totalSupply);\n                uint amtA = wmul(tokenA.balanceOf(exchangeAddr), share);\n                uint amtB = wmul(tokenB.balanceOf(exchangeAddr), share);\n                poolData[i] = PoolData(\n                    amtA,\n                    amtB,\n                    uniAmt,\n                    totalSupply\n                );\n            }\n        }\n        return poolData;\n    }\n}\n\ncontract InstaUniswapV2Resolver is Resolver {\n    string public constant name = \"UniswapV2-Resolver-v1\";\n}\n\n"
    }
  }
}