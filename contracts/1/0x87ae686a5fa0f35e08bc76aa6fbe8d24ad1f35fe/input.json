{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"LiftsKit/ERC20Basic.sol":{"content":"/*\nImplements EIP20 token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n.*/\n\n// \"SPDX-License-Identifier: UNLICENSED\"\n\npragma solidity ^0.6.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ERC20Basic is IERC20 {\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n\n    uint256 totalSupply_;\n    string name;\n    string symbol;\n    uint8 decimal;\n\n    using SafeMath for uint256;\n\n\n   constructor(uint256 _total, string memory _name, string memory _symbol, uint8 _decimals) public {\n    totalSupply_ = _total;\n    name = _name;\n    symbol = _symbol;\n    decimal = _decimals;\n    }\n\n    function totalSupply() public override view returns (uint256) {\n    return totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n        balances[receiver] = balances[receiver].add(numTokens);\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public override view returns (uint) {\n        return allowed[owner][delegate];\n    }\n\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[owner]);\n        require(numTokens <= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner].sub(numTokens);\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n        balances[buyer] = balances[buyer].add(numTokens);\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n\nlibrary SafeMath {\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      assert(b <= a);\n      return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      assert(c >= a);\n      return c;\n    }\n}\n"},"LiftsKit/LiftsToken.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\n\n\npragma solidity ^0.6.0;\n\nimport \"./ERC20Basic.sol\";\n\ncontract LiftsToken is ERC20Basic {\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n    mapping(address => bool) public whitelist;\n    mapping(address => uint256) public last_paid;\n\n    address constant public owner = 0x20291A7118D1ad0329Cf1a8E02EBe0Bc0ba0f12f;\n    uint public tokens_left;\n    uint256 membership_price;\n\n    event PayUser(address _to, uint8 amount, string workout_name);\n    event TokensSent(address _from, address _to, uint256 amount);\n    event AddedToWhitelist(address new_member_address, uint256 _donation);\n    event RemoveFromWhitelist(address member_address);\n\n    constructor(uint256 _total, string memory _name, string memory _symbol, uint8 _decimals) public ERC20Basic (_total, _name, _symbol, _decimals) {\n        totalSupply_ = _total;\n        name = _name;\n        symbol = _symbol;\n        decimal = _decimals;\n        tokens_left = _total;\n        membership_price = 0.01 ether;\n    }\n\n    // TOKEN FUNCTIONS\n    function pay_user(address _to, string memory workout_name) public {\n        require(whitelist[_to]);              // check that the user is on the whitelist\n        require(not_paid_today(_to));               // check that the user has not been paid today\n        require(tokens_left >= 1);             // check that the contract has tokens left\n        \n        // record payment in paid mapping\n        last_paid[_to] = now;\n        \n        // pay them\n        balances[_to] += 1;\n        tokens_left -= 1;\n        \n        emit PayUser(_to, 1, workout_name);\n    }\n    \n    function add_to_white_list(address new_address) public payable returns (bool success) {\n        // caller must provide membership dues\n        require(msg.value >= membership_price);\n        \n        // add them to the whitelist\n        whitelist[new_address] = true;\n        emit AddedToWhitelist(new_address, msg.value);\n        return true;\n    }\n    \n    function remove_from_white_list(address new_address) public returns (bool success) {\n        // must be The Operators wallet address calling this function\n        require(msg.sender == owner);\n        \n        // remove them from the whitelist\n        whitelist[new_address] = false;\n        emit RemoveFromWhitelist(new_address);\n        return true;\n    }\n    \n    function not_paid_today(address member_address) public view returns (bool success) {\n        if (now >= last_paid[member_address] + 1 days) {\n            return true;\n        }\n        return false;\n    }\n    \n    function change_membership_price(uint256 new_membership_price) public payable {\n        // must be The Operators wallet address calling this function\n        require(msg.sender == owner);\n        \n        // update the required membership price\n        membership_price = new_membership_price;\n    }\n}\n"}}}