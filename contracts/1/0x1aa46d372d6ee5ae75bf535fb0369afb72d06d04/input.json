{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "implementation.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./libs/Bancor.sol\";\r\nimport \"./libs/SafeMath.sol\";\r\nimport \"./libs/Dydx.sol\";\r\nimport \"./libs/Interfaces.sol\";\r\nimport \"./libs/UniswapV2.sol\";\r\nimport \"./libs/Zeroex.sol\";\r\nimport \"./libs/Balancer.sol\";\r\nimport \"./libs/Aave.sol\";\r\nimport \"./libs/Curve.sol\";\r\n\r\ncontract Implementation {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    struct Swap {\r\n        uint protocol;\r\n        address swapContract;\r\n        address poolContract;\r\n        address tokenAcontract;\r\n        address tokenBcontract;\r\n        uint swapFees;\r\n        uint zeroExOrderID;\r\n    }\r\n    \r\n    struct SSwap {\r\n        uint protocol;\r\n        address swapContract;\r\n        address poolContract;\r\n        address tokenAcontract;\r\n        address tokenBcontract;\r\n    }\r\n    \r\n    struct SequenceParams {\r\n        uint targetBlock;\r\n        bool WithLoan;\r\n        bool UseChi;\r\n        uint LoanProtocolID;\r\n        address LoanContract;\r\n        address LoanToken;\r\n        address RepayToken;\r\n        uint initialAmountIn;\r\n        uint minAmountOut;\r\n        uint estGasCost;\r\n        uint swapFees;\r\n        bool isFlashbots;\r\n        uint minerTip;\r\n        uint chiCost;\r\n        bool Check;\r\n    }\r\n    \r\n    event BalancerDebug(address indexed pool, uint balTokenIn, uint dwTokenIn, uint balTokenOut, uint dwTokenOut, uint inputAmount, uint outputAmount);\r\n    event UniswapDebug(address indexed pool, uint balTokenIn, uint balTokenOut, uint inputAmount, uint outputAmount);\r\n    event BancorDebug(address[] path, uint inputAmount, uint outputAmount);\r\n    event CurveDebug(uint inputAmount, uint outputAmount);\r\n    event ZeroexDebug(uint status, uint expectedOutput, uint remaining, uint lastAmount);\r\n    event OutputDebug(uint lastAmount, uint checkMinAmountOut, uint estGasCost);\r\n    event FailCheck(uint targetBlock);\r\n    event SimpleSwapDebug(uint InputAmount, uint OutputAmount);\r\n    \r\n    function SimpleSwap(bool Reversed, address SHolder, SSwap[] memory Requests, uint AmountIn, uint AmountToPay, uint MinAmountOut, bool UseChi, uint TargetBlock) public {\r\n        if (MinAmountOut != 0) {\r\n            if (block.number != TargetBlock) {\r\n                revert();\r\n            }\r\n        }\r\n        uint256 gasStart;\r\n        if (UseChi) {\r\n            gasStart = gasleft();\r\n        }\r\n        uint InputAmount;\r\n        if (AmountIn == 0) {\r\n            if (Reversed) {\r\n                InputAmount = Stateholder(SHolder).GetValue(1);\r\n            } else {            \r\n                ERC20Token tokenIn = ERC20Token(Requests[0].tokenAcontract);\r\n                uint256 balTokenIn = tokenIn.balanceOf(address(this));\r\n                if (balTokenIn != 0) {\r\n                    InputAmount = balTokenIn;\r\n                } else {\r\n                    revert();\r\n                }\r\n            }\r\n        } else {\r\n            if (Reversed) {\r\n                Stateholder(SHolder).SetValue(0, 1);\r\n            }\r\n            InputAmount = AmountIn;\r\n        }\r\n        uint requestsLength = Requests.length;\r\n        uint OutputAmount = InputAmount;\r\n        for (uint i=0; i<requestsLength; i++) {\r\n            SSwap memory Request = Requests[i];\r\n            if (Request.protocol == 1) { // Uniswap\r\n                OutputAmount = SwapUniswap(Request.swapContract, Request.tokenAcontract, Request.tokenBcontract, OutputAmount);\r\n            } else if (Request.protocol == 2) { // Balancer\r\n                OutputAmount = SwapBalancer(Request.swapContract, Request.tokenAcontract, Request.tokenBcontract, OutputAmount);\r\n            } else if (Request.protocol == 4) { // Bancor\r\n                OutputAmount = SwapBancor(Request.poolContract, Request.tokenAcontract, Request.tokenBcontract, OutputAmount);\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n        if (OutputAmount < MinAmountOut) {\r\n            revert();\r\n        }\r\n        if (AmountToPay != 0) {\r\n            IERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n            wETH.withdraw(AmountToPay);\r\n            block.coinbase.transfer(AmountToPay);\r\n        } else if (Reversed) {\r\n            Stateholder(SHolder).SetValue(OutputAmount, 1);\r\n        }\r\n        if (UseChi) {\r\n            uint256 gasSpent = 31000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            ChiGT Chi = ChiGT(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n            Chi.freeUpTo((gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n    \r\n    function ExecuteArbitrage(SequenceParams memory Params, Swap[] memory Requests, Zeroex.OrderParams[] memory zeroExOrders) public {\r\n        uint256 gasStart = gasleft();\r\n        bool isValid;\r\n        if (Params.targetBlock == 0 || block.number == Params.targetBlock) {\r\n            isValid = true;\r\n        } else {\r\n            emit FailCheck(Params.targetBlock);\r\n        }\r\n        if (isValid && Params.Check) {\r\n            uint requestsLength = Requests.length;\r\n            uint checkMinAmountOut = Params.initialAmountIn;\r\n            if (Params.WithLoan) {\r\n                if (Params.LoanProtocolID == 1) {\r\n                    ERC20Token tokenIn = ERC20Token(Params.RepayToken);\r\n                    ERC20Token tokenOut = ERC20Token(Params.LoanToken);\r\n                    uint256 balTokenIn = tokenIn.balanceOf(Params.LoanContract);\r\n                    uint256 balTokenOut = tokenOut.balanceOf(Params.LoanContract);\r\n                    checkMinAmountOut = UniswapV2Library.getAmountIn(Params.initialAmountIn, balTokenIn, balTokenOut, Params.swapFees);\r\n                    emit UniswapDebug(Params.LoanContract, balTokenIn, balTokenOut, Params.initialAmountIn, checkMinAmountOut);\r\n                }\r\n            }\r\n            address bancorNetworkAddress;\r\n            IBancorNetwork networkContract;\r\n            bool bancorNetworkContractDefined;\r\n            uint lastAmount = Params.initialAmountIn;\r\n            for (uint i=0; i<requestsLength; i++) {\r\n                Swap memory currentRequest = Requests[i];\r\n                if (currentRequest.protocol == 1) { // Uniswap\r\n                    ERC20Token tokenIn = ERC20Token(currentRequest.tokenAcontract);\r\n                    ERC20Token tokenOut = ERC20Token(currentRequest.tokenBcontract);\r\n                    uint256 balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\r\n                    uint256 balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = UniswapV2Library.getAmountOut(inputAmount, balTokenIn, balTokenOut, currentRequest.swapFees);\r\n                    emit UniswapDebug(currentRequest.poolContract, balTokenIn, balTokenOut, inputAmount, lastAmount);\r\n                } else if (currentRequest.protocol == 2) { // Balancer\r\n                    ERC20Token tokenIn = ERC20Token(currentRequest.tokenAcontract);\r\n                    ERC20Token tokenOut = ERC20Token(currentRequest.tokenBcontract);\r\n                    uint256 balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\r\n                    uint256 balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\r\n                    BalancerPool pool = BalancerPool(currentRequest.poolContract);\r\n                    uint dwTokenIn = pool.getDenormalizedWeight(currentRequest.tokenAcontract);\r\n                    uint dwTokenOut = pool.getDenormalizedWeight(currentRequest.tokenBcontract);\r\n                    uint poolFees = pool.getSwapFee();\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = bmaths.calcOutGivenIn(balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, poolFees);\r\n                    uint outputAmount = lastAmount;\r\n                    emit BalancerDebug(currentRequest.poolContract, balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, outputAmount);\r\n                } else if (currentRequest.protocol == 4) { // Bancor\r\n                   if (!bancorNetworkContractDefined) {\r\n                        (networkContract, bancorNetworkAddress) = getBancorNetworkContract();\r\n                        bancorNetworkContractDefined = true;\r\n                   }\r\n                   IConverter bancorPool = IConverter(currentRequest.poolContract);\r\n                   address[] memory path = new address[](3);\r\n                   path[0] = currentRequest.tokenAcontract;\r\n                   path[1] = address(bancorPool.anchor());\r\n                   path[2] = currentRequest.tokenBcontract;\r\n                   uint inputAmount = lastAmount;\r\n                   uint fees;\r\n                   (lastAmount, fees) = networkContract.getReturnByPath(path, inputAmount);\r\n                   emit BancorDebug(path, inputAmount, lastAmount);\r\n                } else if (currentRequest.protocol == 3) { // Curve\r\n                    CurveRegistry exchangeContract = CurveRegistry(currentRequest.swapContract);\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = exchangeContract.get_exchange_amount(currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, inputAmount);\r\n                    emit CurveDebug(inputAmount, lastAmount);\r\n                } else if (currentRequest.protocol == 5) { // Zeroex\r\n                    Zeroex.OrderParams memory Order = Zeroex.GetOrderByID(zeroExOrders, currentRequest.zeroExOrderID);\r\n                    ZeroexExchange Exchange = ZeroexExchange(currentRequest.swapContract);\r\n                    Zeroex.OrderInfo memory orderInfo = Exchange.getOrderInfo(Order.zOrder);\r\n                    uint Remaining = Order.zOrder.takerAssetAmount - orderInfo.orderTakerAssetFilledAmount;\r\n                    if (orderInfo.orderStatus == uint8(Zeroex.OrderStatus.FILLABLE) && Remaining > lastAmount) {\r\n                        uint inputAmount = lastAmount;\r\n                        lastAmount = Zeroex.CalcOutput(inputAmount, Order.inputDecimals, Order.outputDecimals, Order.price);\r\n                        address Maker = Order.zOrder.makerAddress;\r\n                        ERC20Token MakerToken = ERC20Token(currentRequest.tokenBcontract);\r\n                        uint256 MakerBalance = MakerToken.balanceOf(Maker);\r\n                        if (MakerBalance < lastAmount) {\r\n                            lastAmount = 1;\r\n                        }\r\n                    } else {\r\n                        lastAmount = 1;\r\n                    }\r\n                    if (lastAmount == 1) {\r\n                        break;\r\n                    }\r\n                    emit ZeroexDebug(orderInfo.orderStatus, Order.price, Remaining, lastAmount);\r\n                }\r\n            }\r\n            checkMinAmountOut = checkMinAmountOut + Params.estGasCost;\r\n            if (lastAmount < checkMinAmountOut) {\r\n                isValid = false;\r\n            }\r\n            emit OutputDebug(lastAmount, checkMinAmountOut, Params.estGasCost);\r\n        }\r\n        if (isValid) {\r\n            ERC20Token wethToken = ERC20Token(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n            uint256 balanceBefore;\r\n            uint256 balanceAfter;\r\n            if (Params.isFlashbots) {\r\n                balanceBefore = wethToken.balanceOf(address(this));\r\n            }\r\n            if (Params.WithLoan) {\r\n                if (Params.LoanProtocolID == 1) {\r\n                    UniswapLoan(Params.LoanContract, Params.LoanToken, Params.RepayToken, Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders, Params.swapFees);\r\n                } else if (Params.LoanProtocolID == 2) {\r\n                    dYdXLoan(Params.LoanContract, Params.LoanToken, Params.RepayToken, Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders);\r\n                } else if (Params.LoanProtocolID == 3) {\r\n                    AaveLoan(Params.LoanContract, Params.LoanToken, Params.RepayToken, Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders);\r\n                } else {\r\n                    revert();\r\n                }\r\n            } else {\r\n                Sequence(Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders);\r\n            }\r\n            if (Params.isFlashbots) {\r\n                balanceAfter = wethToken.balanceOf(address(this));\r\n                if (balanceAfter > balanceBefore) {\r\n                    uint256 rawProfit = SafeMath.sub(balanceAfter, balanceBefore);\r\n                    uint256 profitLessChiCost = SafeMath.sub(rawProfit, Params.chiCost);\r\n                    uint256 tipA = SafeMath.mul(profitLessChiCost, Params.minerTip);\r\n                    uint256 tipB = SafeMath.div(tipA, (10**18));\r\n                    IERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n                    wETH.withdraw(tipB);\r\n                    block.coinbase.transfer(tipB);\r\n                }\r\n            }\r\n        }\r\n        if (Params.UseChi) {\r\n            uint256 gasSpent = 31000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            ChiGT Chi = ChiGT(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n            Chi.freeUpTo((gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    function Sequence(uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders) internal {\r\n        uint requestsLength = swapRequests.length;\r\n        uint lastAmountOut = initialAmountIn;\r\n        for (uint i=0; i<requestsLength; i++) { \r\n            Swap memory currentRequest = swapRequests[i];\r\n            if (lastAmountOut == 0) {\r\n                revert();\r\n            }\r\n            if (currentRequest.protocol == 1) { // Uniswap\r\n                uint currAmountOut = SwapUniswap(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert();\r\n                }\r\n            } else if (currentRequest.protocol == 2) { // Balancer\r\n                uint currAmountOut = SwapBalancer(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert();\r\n                }\r\n            } else if (currentRequest.protocol == 3) { // Curve\r\n                uint currAmountOut = SwapCurve(currentRequest.swapContract, currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert();\r\n                }\r\n            } else if (currentRequest.protocol == 4) { // Bancor\r\n                uint currAmountOut = SwapBancor(currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert();\r\n                }\r\n            } else if (currentRequest.protocol == 5) { // 0x\r\n                Zeroex.OrderParams memory Order = Zeroex.GetOrderByID(zeroExOrders, currentRequest.zeroExOrderID);\r\n                uint currAmountOut = SwapZeroex(currentRequest.swapContract, currentRequest.poolContract, currentRequest.tokenAcontract, lastAmountOut, Order);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert();\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n        if (lastAmountOut < minAmountOut) {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function SwapZeroex(address swapContract, address poolContract, address contractA, uint amountIn, Zeroex.OrderParams memory order) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        checkAllowance(contractA, poolContract, amountIn);\r\n        ZeroexExchange Exchange = ZeroexExchange(swapContract);\r\n        Zeroex.FillResults memory results = Exchange.fillOrder(order.zOrder, amountIn, order.signature);\r\n        return results.makerAssetFilledAmount;\r\n    }\r\n    \r\n    function SwapUniswap(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        UniswapRouter router = UniswapRouter(swapContract);\r\n        address[] memory fullPath = new address[](2);\r\n        fullPath[0] = contractA;\r\n        fullPath[1] = contractB;\r\n        uint deadLine = block.timestamp + 20 minutes;\r\n        uint[] memory Output = router.swapExactTokensForTokens(amountIn, type(uint).min, fullPath, address(this), deadLine);\r\n        return Output[Output.length - 1];\r\n    }\r\n    \r\n    function SwapBalancer(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        BalancerPool pool = BalancerPool(swapContract);\r\n        (uint tokenOut, ) = pool.swapExactAmountIn(contractA, amountIn, contractB, type(uint).min, type(uint).max);\r\n        return tokenOut;\r\n    }\r\n    \r\n    function SwapBancor(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        address ethBancorAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        (IBancorNetwork networkContract, address bancorNetworkAddress) = getBancorNetworkContract();\r\n        IConverter bancorPool = IConverter(swapContract);\r\n        address[] memory path = new address[](3);\r\n        path[0] = contractA;\r\n        path[1] = address(bancorPool.anchor());\r\n        path[2] = contractB;\r\n        uint ethInputAmount;\r\n        if (contractA != ethBancorAddress) {\r\n            checkAllowance(contractA, bancorNetworkAddress, amountIn);\r\n        } else {\r\n            // WETH -> ETH\r\n            IERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n            wETH.withdraw(amountIn);\r\n            ethInputAmount = amountIn;\r\n        }\r\n        uint tokenOut = networkContract.convert{value: ethInputAmount}(path, amountIn, type(uint).min+1);\r\n        if (contractB == ethBancorAddress) {\r\n            // ETH -> WETH\r\n            address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2).call{value: tokenOut}(\"\");\r\n        }\r\n        return tokenOut;\r\n    }\r\n    \r\n    function SwapCurve(address swapContract, address poolContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        CurveRegistry registry = CurveRegistry(swapContract);\r\n        uint tokenOut = registry.exchange(poolContract, contractA, contractB, amountIn, type(uint).min);\r\n        return tokenOut;\r\n    }\r\n    \r\n    function checkAllowance(address tokenContract, address spenderContract, uint256 approvedAmount) internal {\r\n        ERC20Token targetToken = ERC20Token(tokenContract);\r\n        uint256 allowed = targetToken.allowance(address(this), spenderContract);\r\n        if (allowed < approvedAmount) {\r\n            if (allowed != 0) {\r\n                safeApprove(IERC20(tokenContract), spenderContract, 0);\r\n            }\r\n            safeApprove(IERC20(tokenContract), spenderContract, (approvedAmount * 1000));\r\n        }\r\n    }\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n    \r\n    // Uniswap flash loan\r\n    \r\n    struct unilikeParams {\r\n        uint feesA;\r\n        uint feesB;\r\n        address sender;\r\n        uint amount0;\r\n        uint amount1;\r\n        bytes data;\r\n    }\r\n    \r\n    function unilikeCall(unilikeParams memory params) internal {\r\n        require(params.sender == address(this)); // ensure that proxy contract is the caller\r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n            address RepayToken,\r\n            uint initialAmountIn,\r\n             ,\r\n            Swap[] memory swapRequests,\r\n            Zeroex.OrderParams[] memory zeroExOrders,\r\n             \r\n        ) = abi.decode(params.data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\r\n        require(msg.sender == LoanContract); // ensure that msg.sender is LoanContract\r\n    \r\n        uint amountToRepay;\r\n        uint fees = params.feesA;\r\n        if (LoanToken == RepayToken) {\r\n            uint fee = ((initialAmountIn * params.feesA) / params.feesB) + 1;\r\n            amountToRepay = initialAmountIn + fee;\r\n        } else {\r\n            address token0 = IUniswapV2Pair(msg.sender).token0(); \r\n            address token1 = IUniswapV2Pair(msg.sender).token1();\r\n            uint ReserveIn;\r\n            uint ReserveOut;\r\n            (uint Reserve0, uint Reserve1, ) = IUniswapV2Pair(msg.sender).getReserves();\r\n            if (LoanToken == token0) {\r\n                ReserveIn = Reserve1;\r\n                ReserveOut = Reserve0;\r\n            }\r\n            if (LoanToken == token1) {\r\n                ReserveIn = Reserve0;\r\n                ReserveOut = Reserve1;\r\n            }\r\n            amountToRepay = UniswapV2Library.getAmountIn(initialAmountIn, ReserveIn, ReserveOut, fees);\r\n        }\r\n        \r\n        uint requestsLength = swapRequests.length;\r\n        if (requestsLength != 0) {\r\n            Sequence(initialAmountIn, amountToRepay, swapRequests, zeroExOrders);\r\n        }\r\n        \r\n        ERC20Token(RepayToken).transfer(msg.sender, amountToRepay);\r\n    }\r\n    \r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\r\n        unilikeParams memory params;\r\n        params.feesA = swapFees;\r\n        params.feesB = 10000-params.feesA;\r\n        params.sender = sender;\r\n        params.amount0 = amount0;\r\n        params.amount1 = amount1;\r\n        params.data = data;\r\n        unilikeCall(params);\r\n    }\r\n    \r\n    function pancakeCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\r\n        unilikeParams memory params;\r\n        params.feesA = swapFees;\r\n        params.feesB = 10000-params.feesA;\r\n        params.sender = sender;\r\n        params.amount0 = amount0;\r\n        params.amount1 = amount1;\r\n        params.data = data;\r\n        unilikeCall(params);\r\n    }\r\n    \r\n    function demaxCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\r\n        unilikeParams memory params;\r\n        params.feesA = swapFees;\r\n        params.feesB = 10000-params.feesA;\r\n        params.sender = sender;\r\n        params.amount0 = amount0;\r\n        params.amount1 = amount1;\r\n        params.data = data;\r\n        unilikeCall(params);\r\n    }\r\n    \r\n    function BSCswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\r\n        unilikeParams memory params;\r\n        params.feesA = swapFees;\r\n        params.feesB = 10000-params.feesA;\r\n        params.sender = sender;\r\n        params.amount0 = amount0;\r\n        params.amount1 = amount1;\r\n        params.data = data;\r\n        unilikeCall(params);\r\n    }\r\n    \r\n    function ThugswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\r\n        unilikeParams memory params;\r\n        params.feesA = swapFees;\r\n        params.feesB = 10000-params.feesA;\r\n        params.sender = sender;\r\n        params.amount0 = amount0;\r\n        params.amount1 = amount1;\r\n        params.data = data;\r\n        unilikeCall(params);\r\n    }\r\n    \r\n    function croDefiSwapCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\r\n        unilikeParams memory params;\r\n        params.feesA = swapFees;\r\n        params.feesB = 10000-params.feesA;\r\n        params.sender = sender;\r\n        params.amount0 = amount0;\r\n        params.amount1 = amount1;\r\n        params.data = data;\r\n        unilikeCall(params);\r\n    }\r\n    \r\n    function UniswapLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders, uint swapFees) internal {\r\n        address token0 = IUniswapV2Pair(LoanContract).token0(); \r\n        address token1 = IUniswapV2Pair(LoanContract).token1();\r\n        \r\n        uint amount0Out;\r\n        uint amount1Out;\r\n        if (LoanToken == token0) {\r\n            amount0Out = initialAmountIn;\r\n            amount1Out = 0;\r\n        } else if (LoanToken == token1) {\r\n            amount1Out = initialAmountIn;\r\n            amount0Out = 0;\r\n        }\r\n        require(amount1Out == 0 || amount0Out == 0);\r\n        \r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        \r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests,\r\n            zeroExOrders,\r\n            swapFees\r\n        );\r\n        IUniswapV2Pair(LoanContract).swap(amount0Out, amount1Out, address(this), SequenceData);\r\n    }\r\n    \r\n    // dYdX flash loan\r\n    \r\n    function callFunction(address sender, Account.Info memory account, bytes memory data) external {\r\n        (\r\n             ,\r\n             ,\r\n             ,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests,\r\n            Zeroex.OrderParams[] memory zeroExOrders\r\n        ) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[]));\r\n        \r\n        Sequence(initialAmountIn, minAmountOut, swapRequests, zeroExOrders);\r\n    }\r\n    \r\n    function dYdXLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders) internal {\r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests,\r\n            zeroExOrders\r\n        );\r\n        uint RepayAmount = initialAmountIn.add(2);\r\n        ISoloMargin soloContract = ISoloMargin(LoanContract);\r\n        uint256 marketId = DydxFlashloanBase._getMarketIdFromTokenAddress(LoanContract, LoanToken);\r\n        checkAllowance(LoanToken, LoanContract, RepayAmount);\r\n        \r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n        \r\n        operations[0] = DydxFlashloanBase._getWithdrawAction(marketId, initialAmountIn);\r\n        operations[1] = DydxFlashloanBase._getCallAction(SequenceData);\r\n        operations[2] = DydxFlashloanBase._getDepositAction(marketId, RepayAmount);\r\n        \r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = DydxFlashloanBase._getAccountInfo();\r\n        \r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        soloContract.operate(accountInfos, operations);\r\n    }\r\n    \r\n    // Aave flash loan\r\n    \r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes memory _params) external {\r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n             ,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests,\r\n            Zeroex.OrderParams[] memory zeroExOrders\r\n        ) = abi.decode(_params, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[]));\r\n        \r\n        uint RepayAmount = _amount.add(_fee);\r\n        \r\n        Sequence(initialAmountIn, minAmountOut, swapRequests, zeroExOrders);\r\n        \r\n        address Provider = ILendingPool(LoanContract).addressesProvider();\r\n        address payable LendingCore = ILendingPoolAddressesProvider(Provider).getLendingPoolCore();\r\n        \r\n        ERC20Token(LoanToken).transfer(LendingCore, RepayAmount);\r\n    }\r\n    \r\n    function AaveLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders) internal {\r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests,\r\n            zeroExOrders\r\n        );\r\n        ILendingPool LendingPool = ILendingPool(LoanContract);\r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        LendingPool.flashLoan(address(this), LoanToken, initialAmountIn, SequenceData);\r\n    }\r\n    \r\n    function getBancorNetworkContract() public returns(IBancorNetwork, address) {\r\n        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4); // IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n        address output = contractRegistry.addressOf('BancorNetwork');\r\n        return (IBancorNetwork(output), output);\r\n    }\r\n    \r\n}"
    },
    "libs/Aave.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface ILendingPool {\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n    function addressesProvider() external view returns (address);\r\n}\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address payable);\r\n    function getLendingPool() external view returns (address);\r\n}"
    },
    "libs/Balancer.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ncontract BalancerPool {\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter) {}\r\n    \r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) public pure returns (uint tokenAmountOut) {}\r\n    \r\n    function getDenormalizedWeight(\r\n        address token\r\n    ) external view returns (uint) {}\r\n    \r\n    function getSwapFee() external view returns (uint) {}\r\n}\r\n\r\nlibrary bmaths {\r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0);\r\n        uint c0 = a * (10**18);\r\n        require(a == 0 || c0 / a == (10**18)); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n    \r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b);\r\n        uint c1 = c0 + ((10**18) / 2);\r\n        require(c1 >= c0);\r\n        uint c2 = c1 / (10**18);\r\n        return c2;\r\n    }\r\n    \r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag);\r\n        return c;\r\n    }\r\n    \r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : (10**18);\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= (1 wei));\r\n        require(base <= ((2 * (10**18)) - 1 wei));\r\n        uint whole  = bfloor(exp);   \r\n        uint remain = bsub(exp, whole);\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n        uint partialResult = bpowApprox(base, remain, (10**18) / 10**10);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, (10**18));\r\n        uint term = (10**18);\r\n        uint sum   = term;\r\n        bool negative = false;\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * (10**18);\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, (10**18)));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n    \r\n    function btoi(uint a)\r\n        internal pure \r\n        returns (uint)\r\n    {\r\n        return a / (10**18);\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * (10**18);\r\n    }\r\n    \r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\r\n        uint adjustedIn = bsub((10**18), swapFee);\r\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\r\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\r\n        uint foo = bpow(y, weightRatio);\r\n        uint bar = bsub((10**18), foo);\r\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\r\n        return tokenAmountOut;\r\n    }\r\n}"
    },
    "libs/Bancor.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IContractRegistry {\r\n    function addressOf(\r\n        bytes32 contractName\r\n    ) external returns(address);\r\n}\r\n\r\ninterface IOwned {\r\n    // this function isn't since the compiler emits automatically generated getter functions as external\r\n    function owner() external view returns (address);\r\n\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n    function acceptOwnership() external;\r\n}\r\n\r\ninterface IConverter is IOwned {\r\n    function anchor() external view returns (IConverterAnchor);\r\n}\r\n\r\ninterface IConverterAnchor is IOwned {\r\n\r\n}\r\n\r\ninterface IBancorNetwork {\r\n    function convert(\r\n        address[] memory _path, \r\n        uint256 _amount, \r\n        uint256 _minReturn\r\n    ) external payable returns (uint256);\r\n\r\n    function getReturnByPath(\r\n        address[] memory _path, \r\n        uint256 _amount\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function conversionPath(\r\n        IERC20Token _sourceToken, \r\n        IERC20Token _targetToken\r\n    ) external view returns (address[] memory);\r\n}\r\n\r\ninterface IERC20Token {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n}"
    },
    "libs/Curve.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ncontract CurveRegistry {\r\n    function exchange(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected\r\n    ) external returns (uint256) {}\r\n    \r\n    function get_exchange_amount(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external returns (uint256) {}\r\n}"
    },
    "libs/Dydx.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n}\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\ninterface ISoloMargin {\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n    function getNumMarkets() external view returns (uint256);\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) external;\r\n}\r\n\r\nlibrary DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}\r\n"
    },
    "libs/Interfaces.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface ChiGT {\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ninterface Stateholder {\r\n    function GetValue(uint256 ID) external view returns (uint256);\r\n    function SetValue(uint256 value, uint256 ID) external;\r\n}\r\n\r\ncontract ERC20Token {\r\n    function approve(\r\n        address _spender, \r\n        uint256 _value\r\n    ) external returns (bool success) {}\r\n    \r\n    function transfer(\r\n        address dst, \r\n        uint256 amount\r\n    ) external returns (bool) {}\r\n    \r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) external returns (uint256 remaining) {}\r\n    \r\n    function balanceOf(\r\n        address _owner\r\n    ) external returns (uint256 balance) {}\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface Proxy {\r\n    function setAllowedDelegate(address newAddress) external;\r\n    function getStaticConfig(uint Index) external returns (address);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value);\r\n        require(isContract(target));\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "libs/SafeMath.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a); // dev: overflow\r\n    }\r\n    \r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a); // dev: underflow\r\n        c = a - b;\r\n    }\r\n    \r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b); // dev: overflow\r\n    }\r\n    \r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0); // dev: divide by zero\r\n        c = a / b;\r\n    }\r\n    \r\n    function bdiv(uint a, uint b) internal pure returns (uint) {\r\n        uint BONE = 10**18;\r\n        require(b != 0);\r\n        uint c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n    \r\n    function getBase() internal pure returns (uint) {\r\n        uint BONE = 10**18;\r\n        return BONE;\r\n    }\r\n}"
    },
    "libs/UniswapV2.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Interfaces.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n    \r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fees) internal pure returns (uint amountIn) {\r\n        //require(amountOut > 0);\r\n        require(reserveIn > 0 && reserveOut > 0);\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(10000-fees);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n    \r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fees) internal pure returns (uint amountOut) {\r\n        //require(amountIn > 0);\r\n        require(reserveIn > 0 && reserveOut > 0);\r\n        uint amountInWithFee = amountIn.mul(10000-fees);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function transfer(address to, uint value) external returns (bool);\r\n    event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n    );\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ncontract UniswapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts) {}\r\n}"
    },
    "libs/Zeroex.sol": {
      "content": "pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\ninterface ZeroexExchange {\r\n  function fillOrder(Zeroex.Order memory order, uint256 takerAssetFillAmount, bytes memory signature) external payable returns (Zeroex.FillResults memory fillResults);\r\n  function getOrderInfo(Zeroex.Order memory order) external view returns (Zeroex.OrderInfo memory orderInfo);\r\n}\r\n\r\nlibrary Zeroex {\r\n    enum OrderStatus {\r\n        INVALID,                     // Default value\r\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\r\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\r\n        FILLABLE,                    // Order is fillable\r\n        EXPIRED,                     // Order has already expired\r\n        FULLY_FILLED,                // Order is fully filled\r\n        CANCELLED                    // Order has been cancelled\r\n    }\r\n    \r\n    struct OrderParams {\r\n        Order zOrder;\r\n        bytes signature;\r\n        uint price;\r\n        uint inputDecimals;\r\n        uint outputDecimals;\r\n        uint ID;\r\n    }\r\n    \r\n    struct Order {\r\n        address makerAddress;           // Address that created the order.\r\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\r\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\r\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\r\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\r\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\r\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\r\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\r\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\r\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\r\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\r\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\r\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\r\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\r\n    }\r\n    \r\n    struct FillResults {\r\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\r\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\r\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\r\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\r\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\r\n    }\r\n    \r\n    struct OrderInfo {\r\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\r\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\r\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\r\n    }\r\n    \r\n    function CalcOutput(uint inputAmount, uint inputDecimals, uint outputDecimals, uint price) internal pure returns(uint outputAmount) {\r\n        uint a = SafeMath.mul(inputAmount, price);\r\n        uint b = SafeMath.mul((10**18), inputDecimals);\r\n        uint c = SafeMath.div(b, outputDecimals);\r\n        outputAmount = SafeMath.div(a, c);\r\n        return outputAmount;\r\n    }\r\n    \r\n    function GetOrderByID(OrderParams[] memory zeroExOrders, uint ID) internal pure returns(OrderParams memory result) {\r\n        uint ordersLength = zeroExOrders.length;\r\n        for (uint i=0; i<ordersLength; i++) {\r\n            OrderParams memory currentOrder = zeroExOrders[i];\r\n            if (currentOrder.ID == ID) {\r\n                result = currentOrder;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}"
    }
  }
}