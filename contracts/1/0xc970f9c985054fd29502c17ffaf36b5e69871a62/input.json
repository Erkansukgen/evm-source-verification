{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ERC223.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n\r\n/// @title ERC223 interface\r\ninterface ERC223 {\r\n    function transfer(address to, uint value, bytes calldata data) external;\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}"
    },
    "browser/ERC223ReceivingContract.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n\r\n/// @title Interface for the contract that will work with ERC223 tokens.\r\ninterface ERC223ReceivingContract { \r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction data.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\r\n}"
    },
    "browser/IERC20.sol": {
      "content": "pragma solidity ^0.6.0;\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}"
    },
    "browser/Owned.sol": {
      "content": "pragma solidity ^0.6.0;\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        newOwner = _newOwner;\r\n    }\r\n}"
    },
    "browser/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}"
    },
    "browser/StandardToken_ERC223.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ' Erba Cultivation'  223 standard token contract\r\n//\r\n// Symbol      : ERBA\r\n// Name        : Erba Cultivation\r\n// Total supply: 13 million\r\n// Decimals    : 18\r\n// ----------------------------------------------------------------------------\r\n\r\nimport \"./ERC223.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./ERC223ReceivingContract.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Owned.sol\";\r\n\r\n// standard token contract \r\ncontract ERB is ERC20, ERC223, Owned {\r\n  using SafeMath for uint;\r\n     \r\n    string public name = \"Erba Cultivation\";\r\n    string public symbol = \"ERB\";\r\n    uint8 public decimals = 18;\r\n    uint256 internal _totalSupply = 13000000; // 13 million\r\n    uint256 internal totalsupply = _totalSupply  * 10 ** uint(decimals);\r\n    \r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n        \r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n        balances[owner] = totalsupply;\r\n        emit Transfer(address(0), owner, totalsupply);    \r\n        \r\n    }\r\n    \r\n    function totalSupply() external override view returns (uint256){\r\n        return totalsupply;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) external override returns (bool) {\r\n        require(_to != address(0));\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external override returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public override returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public override view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes calldata _data) external override {\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n    \r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalsupply = totalsupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n}"
    }
  }
}