{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/NaSwap.sol": {
      "content": "pragma solidity 0.6.6;\n\nimport \"https://github.com/oneswap/oneswap_contract_ethereum/blob/master/contracts/interfaces/IOneSwapRouter.sol\";\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\";\n\ncontract NajhSwap {\n    \n    uint256 internal constant UINT256_MAX = 2**256 - 1;\n    \n    IUniswapV2Router01          uniswapRouter;\n    IOneSwapRouter              oneswapRouter;\n    \n    address payable             owner;\n    uint256[]                   amountToToken;\n    \n    constructor(address _uniswapFactory,  address _oneswapFactory) public {\n        oneswapRouter = IOneSwapRouter(_oneswapFactory);\n        uniswapRouter = IUniswapV2Router01(_uniswapFactory);\n        owner = msg.sender;\n    }\n    \n    receive() external payable { }\n\n    function convertUnitoOne(address _token, uint256 ethAmountIn, uint256 minTokenAmountToReceieve, address _onePool) external payable {\n      \n        uint deadline = block.timestamp + 60; // using 'now' for convenience, for mainnet pass deadline from frontend!\n        amountToToken = uniswapRouter.swapExactETHForTokens{value: ethAmountIn}(minTokenAmountToReceieve, getPathForETHtoToken(_token), address(this), deadline);\n        \n        //IERC20 token = IERC20(_token);\n        //token.approve(address(oneswapRouter), amountToToken[amountToToken.length - 1]);\n      \n        oneswapRouter.swapToken(_token, amountToToken[amountToToken.length - 1], ethAmountIn, getOnePath(_onePool), owner, uint(deadline));\n       \n    }\n    \n    function convertOnetoUni(address _token, uint256 ethAmountIn, uint256 minTokenAmountToReceieve, address _onePool) external payable {\n      \n        uint deadline = block.timestamp + 60; // using 'now' for convenience, for mainnet pass deadline from frontend!\n        amountToToken = oneswapRouter.swapToken{value: ethAmountIn}(address(0), ethAmountIn, minTokenAmountToReceieve, getOnePath(_onePool), address(this), uint(deadline));\n       \n        //IERC20 token = IERC20(_token);\n        //token.approve(address(uniswapRouter), amountToToken[amountToToken.length - 1]);\n        \n        uniswapRouter.swapExactTokensForETH(amountToToken[amountToToken.length - 1], ethAmountIn, getPathForETHtoToken(_token), owner, deadline);\n        \n    }\n    \n    function convertUinEthtoToken(address _token, uint256 ethAmountIn, uint256 minTokenAmountToReceieve) external payable {\n      \n        uint deadline = block.timestamp + 60; // using 'now' for convenience, for mainnet pass deadline from frontend!\n        amountToToken = uniswapRouter.swapExactETHForTokens{value: ethAmountIn}(minTokenAmountToReceieve, getPathForETHtoToken(_token), address(this), deadline);\n       \n    }\n    \n    function convertUinTokentoEth(address _token, uint256 tokenAmountIn, uint256 minEthAmountToReceieve) external {\n      \n        //IERC20 token = IERC20(_token);\n        //token.approve(address(uniswapRouter), tokenAmountIn);\n        uint deadline = block.timestamp + 60; // using 'now' for convenience, for mainnet pass deadline from frontend!\n        uniswapRouter.swapExactTokensForETH(tokenAmountIn, minEthAmountToReceieve, getPathForTokentoETH(_token), address(this), deadline);\n    }\n    \n        \n    function convertOneEthtoToken(address _token, uint256 ethAmountIn, uint256 minTokenAmountToReceieve, address _onePool) external payable {\n      \n        uint deadline = block.timestamp + 60; // using 'now' for convenience, for mainnet pass deadline from frontend!\n        amountToToken = oneswapRouter.swapToken{value: ethAmountIn}(address(0), ethAmountIn, minTokenAmountToReceieve, getOnePath(_onePool), address(this), uint(deadline));\n        \n    }\n    \n    function convertOneTokenToEth(address _token, uint256 tokenAmountIn, uint256 minEthAmountToReceieve, address _onePool) external {\n      \n        //IERC20 token = IERC20(_token);\n        //token.approve(address(oneswapRouter), tokenAmountIn);\n        uint deadline = block.timestamp + 60; // using 'now' for convenience, for mainnet pass deadline from frontend!\n        oneswapRouter.swapToken(_token, tokenAmountIn, minEthAmountToReceieve, getOnePath(_onePool), address(this), uint(deadline));\n    }\n    \n    function getPathForTokentoETH(address _token) private view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = _token;\n        path[1] = uniswapRouter.WETH();\n        \n        return path;\n    }\n    \n    function getPathForETHtoToken(address _token) private view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = uniswapRouter.WETH();\n        path[1] = _token;\n        \n        return path;\n    }\n    \n    function getOnePath(address _token) private view returns (address[] memory) {\n        address[] memory path = new address[](1);\n        path[0] = _token;\n        \n        return path;\n    }\n    \n    function WithdrawToken(address _token) external {\n        \n        IERC20 token = IERC20(_token);\n        token.transfer(owner, token.balanceOf(address(this)));\n        \n    }\n    \n    function WithdrawEth() external {\n        owner.transfer(address(this).balance);    \n    }\n    \n    function approveMax(address _token) external {\n        IERC20 token = IERC20(_token);\n        token.approve(address(oneswapRouter), UINT256_MAX);\n        token.approve(address(uniswapRouter), UINT256_MAX);\n    }\n    \n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "https://github.com/oneswap/oneswap_contract_ethereum/blob/master/contracts/interfaces/IOneSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IOneSwapRouter {\n    event AddLiquidity(uint stockAmount, uint moneyAmount, uint liquidity);\n    event PairCreated(address indexed pair, address stock, address money, bool isOnlySwap);\n\n    function factory() external pure returns (address);\n\n    // liquidity\n    function addLiquidity(\n        address stock,\n        address money,\n        bool isOnlySwap,\n        uint amountStockDesired,\n        uint amountMoneyDesired,\n        uint amountStockMin,\n        uint amountMoneyMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountStock, uint amountMoney, uint liquidity);\n    \n    function removeLiquidity(\n        address pair,\n        uint liquidity,\n        uint amountStockMin,\n        uint amountMoneyMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountStock, uint amountMoney);\n\n    // swap token\n    function swapToken(\n        address token,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    // limit order\n    function limitOrder(\n        bool isBuy,\n        address pair,\n        uint prevKey,\n        uint price,\n        uint32 id,\n        uint stockAmount,\n        uint deadline\n    ) external payable;\n}\n"
    }
  }
}