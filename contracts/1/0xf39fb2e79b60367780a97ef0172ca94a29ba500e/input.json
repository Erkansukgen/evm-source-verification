{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/shitoken2.sol":{"content":"// SPDX-License-Identifier: unlicensed\r\npragma solidity 0.8.3;\r\n\r\ninterface ERC20Interface {\r\n  function totalSupply() external view returns (uint supply);\r\n  function balanceOf(address tokenOwner) external view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n  function transfer(address payable to, uint tokens) external returns (bool success);\r\n  function approve(address spender, uint tokens) external returns (bool success);\r\n  function transferFrom(address payable from, address payable to, uint tokens) external returns (bool success);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract SHIToken is ERC20Interface {\r\n  string public symbol;\r\n  string public  name;\r\n  uint8 public decimals;\r\n  uint256 public supply;\r\n  address payable public owner;\r\n  uint256 private _guardCounter;\r\n  address payable public contractAddress;\r\n\r\n  mapping(address => uint) public balances;\r\n  mapping(address => mapping(address => uint)) public allowed;\r\n\r\n  constructor() {\r\n    symbol = \"SH*T\";\r\n    name = \"SHIToken\";\r\n    decimals = 18;\r\n    supply = 1000000000e18;\r\n    owner = payable(msg.sender);\r\n    _guardCounter = 1;\r\n    balances[owner] = supply;\r\n    contractAddress = payable(address(this));\r\n\r\n    emit Transfer(address(0), owner, supply);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier nonReentrancyGaurd() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n  function totalSupply() external override view returns (uint) {\r\n    return supply - balances[owner];\r\n  }\r\n\r\n\r\n  function balanceOf(address tokenOwner) external view override returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  function transfer(address payable to, uint tokens) external override returns (bool success) {\r\n    require(tokens <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender] - tokens;\r\n    balances[to] = balances[to] + tokens;\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint tokens) external override returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address payable from, address payable to, uint tokens) external override returns (bool success) {\r\n    require(tokens <= balances[from]);\r\n    require(tokens <= allowed[from][msg.sender]);\r\n    balances[from] = balances[from] - tokens;\r\n    allowed[from][msg.sender] = allowed[from][msg.sender] - tokens;\r\n    balances[to] = balances[to] + tokens;\r\n\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address tokenOwner, address spender) external view override returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n\r\n  fallback() external payable {\r\n    revert();\r\n  }\r\n\r\n  function getContractBalance() public view returns(uint) {\r\n    uint256 balance = contractAddress.balance;\r\n    return balance;\r\n  }\r\n\r\n  function transferBalance() onlyOwner() public {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n}\r\n"}}}