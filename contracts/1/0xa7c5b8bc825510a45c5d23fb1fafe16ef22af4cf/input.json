{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Vesting.sol": {
      "content": "pragma solidity 0.7.3;\n\n//SPDX-LICENSE-IDENTIFIER: UNLICENSED\n/*\n    ERC20 Standard Token interface\n*/\ninterface ERC20Interface {\n    function owner() external view returns (address);\n    function decimals() external view returns (uint8);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _amount) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n}\n\ninterface DateTimeInterface {\n  function DOW_FRI (  ) external view returns ( uint256 );\n  function DOW_MON (  ) external view returns ( uint256 );\n  function DOW_SAT (  ) external view returns ( uint256 );\n  function DOW_SUN (  ) external view returns ( uint256 );\n  function DOW_THU (  ) external view returns ( uint256 );\n  function DOW_TUE (  ) external view returns ( uint256 );\n  function DOW_WED (  ) external view returns ( uint256 );\n  function OFFSET19700101 (  ) external view returns ( int256 );\n  function SECONDS_PER_DAY (  ) external view returns ( uint256 );\n  function SECONDS_PER_HOUR (  ) external view returns ( uint256 );\n  function SECONDS_PER_MINUTE (  ) external view returns ( uint256 );\n  function _daysFromDate ( uint256 year, uint256 month, uint256 day ) external pure returns ( uint256 _days );\n  function _daysToDate ( uint256 _days ) external pure returns ( uint256 year, uint256 month, uint256 day );\n  function _getDaysInMonth ( uint256 year, uint256 month ) external pure returns ( uint256 daysInMonth );\n  function _isLeapYear ( uint256 year ) external pure returns ( bool leapYear );\n  function _now (  ) external view returns ( uint256 timestamp );\n  function _nowDateTime (  ) external view returns ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second );\n  function addDays ( uint256 timestamp, uint256 _days ) external pure returns ( uint256 newTimestamp );\n  function addHours ( uint256 timestamp, uint256 _hours ) external pure returns ( uint256 newTimestamp );\n  function addMinutes ( uint256 timestamp, uint256 _minutes ) external pure returns ( uint256 newTimestamp );\n  function addMonths ( uint256 timestamp, uint256 _months ) external pure returns ( uint256 newTimestamp );\n  function addSeconds ( uint256 timestamp, uint256 _seconds ) external pure returns ( uint256 newTimestamp );\n  function addYears ( uint256 timestamp, uint256 _years ) external pure returns ( uint256 newTimestamp );\n  function diffDays ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _days );\n  function diffHours ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _hours );\n  function diffMinutes ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _minutes );\n  function diffMonths ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _months );\n  function diffSeconds ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _seconds );\n  function diffYears ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _years );\n  function getDay ( uint256 timestamp ) external pure returns ( uint256 day );\n  function getDayOfWeek ( uint256 timestamp ) external pure returns ( uint256 dayOfWeek );\n  function getDaysInMonth ( uint256 timestamp ) external pure returns ( uint256 daysInMonth );\n  function getHour ( uint256 timestamp ) external pure returns ( uint256 hour );\n  function getMinute ( uint256 timestamp ) external pure returns ( uint256 minute );\n  function getMonth ( uint256 timestamp ) external pure returns ( uint256 month );\n  function getSecond ( uint256 timestamp ) external pure returns ( uint256 second );\n  function getYear ( uint256 timestamp ) external pure returns ( uint256 year );\n  function isLeapYear ( uint256 timestamp ) external pure returns ( bool leapYear );\n  function isValidDate ( uint256 year, uint256 month, uint256 day ) external pure returns ( bool valid );\n  function isValidDateTime ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second ) external pure returns ( bool valid );\n  function isWeekDay ( uint256 timestamp ) external pure returns ( bool weekDay );\n  function isWeekEnd ( uint256 timestamp ) external pure returns ( bool weekEnd );\n  function subDays ( uint256 timestamp, uint256 _days ) external pure returns ( uint256 newTimestamp );\n  function subHours ( uint256 timestamp, uint256 _hours ) external pure returns ( uint256 newTimestamp );\n  function subMinutes ( uint256 timestamp, uint256 _minutes ) external pure returns ( uint256 newTimestamp );\n  function subMonths ( uint256 timestamp, uint256 _months ) external pure returns ( uint256 newTimestamp );\n  function subSeconds ( uint256 timestamp, uint256 _seconds ) external pure returns ( uint256 newTimestamp );\n  function subYears ( uint256 timestamp, uint256 _years ) external pure returns ( uint256 newTimestamp );\n  function timestampFromDate ( uint256 year, uint256 month, uint256 day ) external pure returns ( uint256 timestamp );\n  function timestampFromDateTime ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second ) external pure returns ( uint256 timestamp );\n  function timestampToDate ( uint256 timestamp ) external pure returns ( uint256 year, uint256 month, uint256 day );\n  function timestampToDateTime ( uint256 timestamp ) external pure returns ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second );\n}\n\n/**\n  * @notice Vesting contract designed to release funds on a monthly basis over a 12 month period\n  * @notice all funds deposited into the vesting contract are evenly distributed across the 12 months\n  * @notice The contract was designed to accomodate the needs of Leverage Token and as such may not be applicable in other circumstances\n  * @notice for example there is no usage of safe math, as the values being vested by Leverage Token can't overflow so no need for extra gas cost\n*/\ncontract Vesting {\n\n    uint256 public startTime;\n    uint256 public endTime;\n    uint256 public currentCycle;\n    uint256 public releaseAmount;\n    address public receiver;\n    address public owner;\n\n    ERC20Interface private levI; \n    DateTimeInterface private dateI;\n\n    struct Release {\n        uint256 timestamp;\n        uint256 released;\n    }\n\n    mapping (uint256 => Release) public releases;\n\n    event TokensReleased();\n\n    /**\n      * @param _levTokenAddress the address of the deployed LEV token contract\n      * @param _dateTimeContract the address of the deployed date time contract\n    */\n    constructor(address _levTokenAddress, address _dateTimeContract, address _owner) {\n        levI = ERC20Interface(_levTokenAddress);\n        dateI = DateTimeInterface(_dateTimeContract);\n        owner = _owner;\n    }\n\n    /**\n      * @notice prepares the contract for vesting, depositing tokens and \n      * @notice marking the address that will be allowed to receive vested funds\n      * @param _amountToVest is the amount of tokens to be vested\n      * @param _receiver is the address that will be allowed to receive the withdrawn funds\n    */\n    function prepare(uint256 _amountToVest, address _receiver) public {\n        // make sure only contract owner can call this\n        require(msg.sender == owner);\n        // make sure prepared is false\n        require(isPrepared() == false);\n        require(levI.transferFrom(msg.sender, address(this), _amountToVest));\n        // the current time when vesting starts\n        uint256 _startTime = dateI._now();\n        // the time when vesting ends, and the final token release is allowed\n        uint256 _endTime = dateI.addMonths(_startTime, 12);\n        // set the last token release\n        releases[12].timestamp = _endTime;\n        // now set the other 11 token release times\n        for (uint i = 1; i <= 11; i++) {\n            releases[i].timestamp = dateI.addMonths(_startTime, i);\n        }\n        // each month release 1/12 of _amountToVest\n        releaseAmount = _amountToVest / 12;\n        // copy memory variables to storage\n        startTime = _startTime;\n        endTime = _endTime;\n        receiver = _receiver;\n        // set current release cycle\n        currentCycle = 1;\n    }\n\n    /**\n        * @notice release funds for the current vesting cycle\n        * @notice while it is callable by anyone, funds are sent to a fixed address\n        * @notice regardless of who calls this function, so owner check is avoided to save gas\n    */\n    function release() public {\n        // make sure prepare function has been called and successfully executed\n        require(isPrepared() == true);\n        // ensure the current cycle hasn't been released\n        require(releases[currentCycle].released == 0, \"already released\");\n        // mark current cycle as released\n        releases[currentCycle].released = 1;\n        // get current timestamp\n        uint256 timestamp = dateI._now();\n        // ensure the current timestamp (date) is on or after the release date\n        require(timestamp >= releases[currentCycle].timestamp, \"release timestamp not yet passed\");\n        // transfer tokens to designated receiver wallet\n        require(levI.transfer(receiver, releaseAmount));\n        // move onto the next cycle (if we arent cycle 12 which is last)\n        if (currentCycle < 12) {\n            currentCycle += 1;\n        }\n        // emit event indicating tokens are released\n        emit TokensReleased();\n        \n    }\n\n    /**\n      * @notice returns whether or not the given cycle has released the tokens\n    */\n    function isReleased(uint256 _cycle) public view returns (bool) {\n        bool released = false;\n        if (releases[_cycle].released == 1) {\n            released = true;\n        }\n        return released;\n    }\n\n    /**\n      * @notice returns whether or note the vesting contract has been prepared\n    */\n    function isPrepared() public view returns (bool) {\n        bool prepared = false;\n        if (receiver != address(0) && releaseAmount > 0 && currentCycle > 0) {\n            prepared = true;\n        }\n        return prepared;\n    }\n}\n"
    }
  }
}