{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Refunds.sol": {
      "content": "pragma solidity^0.8.0;\ncontract moneySender {\n    address public owner;\n    constructor () {\n        owner = msg.sender;\n    }\n    function sendMoney (address[] memory _senderAddresses , uint _senderAmount) payable external {\n        require (msg.sender == owner,'You are not the owner');\n        for (uint i = 0; i <_senderAddresses.length; i++){\n            address payable receiver = payable(_senderAddresses[i]);\n               receiver.transfer(_senderAmount);\n            \n        }\n    }\n    function balances() view external returns(uint)  {\n        return address(this).balance;\n    }\n    \n    function returnRest() external payable {\n        require (msg.sender == owner);\n        address payable owner  = payable(owner);\n        owner.transfer(address(this).balance);\n    }\n    \n    fallback () payable external{}\n}"
    }
  }
}