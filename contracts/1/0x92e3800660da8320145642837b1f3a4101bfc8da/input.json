{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"aave permissioned/checkSize.sol":{"content":"pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\ninterface ILendingPool {\n  function getUserAccountData(address user) external view returns (\n      uint256 totalCollateralETH,\n      uint256 totalDebtETH,\n      uint256 availableBorrowsETH,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n  );\n}\n\ncontract checkSize {\n    receive() external payable {}\n    ILendingPool public lendingPool = ILendingPool(address(0x37D7306019a38Af123e4b245Eb6C28AF552e0bB0));\n    function executeOperation(address[] memory users) public view returns (uint256[] memory) {\n        uint256[] memory result = new uint256[](users.length);\n        uint256 x;\n        for(x = 0; x < users.length; x++) {\n            (uint256 tc,,,,,) = lendingPool.getUserAccountData(users[x]);\n            result[x] = tc;\n\n        }\n        return result;\n    }\n}\n"}}}