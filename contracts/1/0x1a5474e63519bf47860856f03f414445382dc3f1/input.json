{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/contracts/StafiBase.sol": {
      "content": "pragma solidity 0.6.12;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"./interfaces/storage/IStafiStorage.sol\";\n\nabstract contract StafiBase {\n\n    // Version of the contract\n    uint8 public version;\n\n    // The main storage contract where primary persistant storage is maintained\n    IStafiStorage stafiStorage = IStafiStorage(0);\n\n\n    /**\n    * @dev Throws if called by any sender that doesn't match a network contract\n    */\n    modifier onlyLatestNetworkContract() {\n        require(getBool(keccak256(abi.encodePacked(\"contract.exists\", msg.sender))), \"Invalid or outdated network contract\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\n    */\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName))), \"Invalid or outdated contract\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any sender that isn't a trusted node\n    */\n    modifier onlyTrustedNode(address _nodeAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"node.trusted\", _nodeAddress))), \"Invalid trusted node\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any sender that isn't a registered staking pool\n    */\n    modifier onlyRegisteredStakingPool(address _stakingPoolAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"stakingpool.exists\", _stakingPoolAddress))), \"Invalid staking pool\");\n        _;\n    }\n\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(roleHas(\"owner\", msg.sender), \"Account is not the owner\");\n        _;\n    }\n\n\n    /**\n    * @dev Modifier to scope access to admins\n    */\n    modifier onlyAdmin() {\n        require(roleHas(\"admin\", msg.sender), \"Account is not an admin\");\n        _;\n    }\n\n\n    /**\n    * @dev Modifier to scope access to admins\n    */\n    modifier onlySuperUser() {\n        require(roleHas(\"owner\", msg.sender) || roleHas(\"admin\", msg.sender), \"Account is not a super user\");\n        _;\n    }\n\n\n    /**\n    * @dev Reverts if the address doesn't have this role\n    */\n    modifier onlyRole(string memory _role) {\n        require(roleHas(_role, msg.sender), \"Account does not match the specified role\");\n        _;\n    }\n\n\n    /// @dev Set the main Storage address\n    constructor(address _stafiStorageAddress) public {\n        // Update the contract address\n        stafiStorage = IStafiStorage(_stafiStorageAddress);\n    }\n\n\n    /// @dev Get the address of a network contract by name\n    function getContractAddress(string memory _contractName) internal view returns (address) {\n        // Get the current contract address\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\n        // Check it\n        require(contractAddress != address(0x0), \"Contract not found\");\n        // Return\n        return contractAddress;\n    }\n\n\n    /// @dev Get the name of a network contract by address\n    function getContractName(address _contractAddress) internal view returns (string memory) {\n        // Get the contract name\n        string memory contractName = getString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)));\n        // Check it\n        require(keccak256(abi.encodePacked(contractName)) != keccak256(abi.encodePacked(\"\")), \"Contract not found\");\n        // Return\n        return contractName;\n    }\n\n\n    /// @dev Storage get methods\n    function getAddress(bytes32 _key) internal view returns (address) { return stafiStorage.getAddress(_key); }\n    function getUint(bytes32 _key) internal view returns (uint256) { return stafiStorage.getUint(_key); }\n    function getString(bytes32 _key) internal view returns (string memory) { return stafiStorage.getString(_key); }\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return stafiStorage.getBytes(_key); }\n    function getBool(bytes32 _key) internal view returns (bool) { return stafiStorage.getBool(_key); }\n    function getInt(bytes32 _key) internal view returns (int256) { return stafiStorage.getInt(_key); }\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return stafiStorage.getBytes32(_key); }\n    function getAddressS(string memory _key) internal view returns (address) { return stafiStorage.getAddress(keccak256(abi.encodePacked(_key))); }\n    function getUintS(string memory _key) internal view returns (uint256) { return stafiStorage.getUint(keccak256(abi.encodePacked(_key))); }\n    function getStringS(string memory _key) internal view returns (string memory) { return stafiStorage.getString(keccak256(abi.encodePacked(_key))); }\n    function getBytesS(string memory _key) internal view returns (bytes memory) { return stafiStorage.getBytes(keccak256(abi.encodePacked(_key))); }\n    function getBoolS(string memory _key) internal view returns (bool) { return stafiStorage.getBool(keccak256(abi.encodePacked(_key))); }\n    function getIntS(string memory _key) internal view returns (int256) { return stafiStorage.getInt(keccak256(abi.encodePacked(_key))); }\n    function getBytes32S(string memory _key) internal view returns (bytes32) { return stafiStorage.getBytes32(keccak256(abi.encodePacked(_key))); }\n\n    /// @dev Storage set methods\n    function setAddress(bytes32 _key, address _value) internal { stafiStorage.setAddress(_key, _value); }\n    function setUint(bytes32 _key, uint256 _value) internal { stafiStorage.setUint(_key, _value); }\n    function setString(bytes32 _key, string memory _value) internal { stafiStorage.setString(_key, _value); }\n    function setBytes(bytes32 _key, bytes memory _value) internal { stafiStorage.setBytes(_key, _value); }\n    function setBool(bytes32 _key, bool _value) internal { stafiStorage.setBool(_key, _value); }\n    function setInt(bytes32 _key, int256 _value) internal { stafiStorage.setInt(_key, _value); }\n    function setBytes32(bytes32 _key, bytes32 _value) internal { stafiStorage.setBytes32(_key, _value); }\n    function setAddressS(string memory _key, address _value) internal { stafiStorage.setAddress(keccak256(abi.encodePacked(_key)), _value); }\n    function setUintS(string memory _key, uint256 _value) internal { stafiStorage.setUint(keccak256(abi.encodePacked(_key)), _value); }\n    function setStringS(string memory _key, string memory _value) internal { stafiStorage.setString(keccak256(abi.encodePacked(_key)), _value); }\n    function setBytesS(string memory _key, bytes memory _value) internal { stafiStorage.setBytes(keccak256(abi.encodePacked(_key)), _value); }\n    function setBoolS(string memory _key, bool _value) internal { stafiStorage.setBool(keccak256(abi.encodePacked(_key)), _value); }\n    function setIntS(string memory _key, int256 _value) internal { stafiStorage.setInt(keccak256(abi.encodePacked(_key)), _value); }\n    function setBytes32S(string memory _key, bytes32 _value) internal { stafiStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value); }\n\n    /// @dev Storage delete methods\n    function deleteAddress(bytes32 _key) internal { stafiStorage.deleteAddress(_key); }\n    function deleteUint(bytes32 _key) internal { stafiStorage.deleteUint(_key); }\n    function deleteString(bytes32 _key) internal { stafiStorage.deleteString(_key); }\n    function deleteBytes(bytes32 _key) internal { stafiStorage.deleteBytes(_key); }\n    function deleteBool(bytes32 _key) internal { stafiStorage.deleteBool(_key); }\n    function deleteInt(bytes32 _key) internal { stafiStorage.deleteInt(_key); }\n    function deleteBytes32(bytes32 _key) internal { stafiStorage.deleteBytes32(_key); }\n    function deleteAddressS(string memory _key) internal { stafiStorage.deleteAddress(keccak256(abi.encodePacked(_key))); }\n    function deleteUintS(string memory _key) internal { stafiStorage.deleteUint(keccak256(abi.encodePacked(_key))); }\n    function deleteStringS(string memory _key) internal { stafiStorage.deleteString(keccak256(abi.encodePacked(_key))); }\n    function deleteBytesS(string memory _key) internal { stafiStorage.deleteBytes(keccak256(abi.encodePacked(_key))); }\n    function deleteBoolS(string memory _key) internal { stafiStorage.deleteBool(keccak256(abi.encodePacked(_key))); }\n    function deleteIntS(string memory _key) internal { stafiStorage.deleteInt(keccak256(abi.encodePacked(_key))); }\n    function deleteBytes32S(string memory _key) internal { stafiStorage.deleteBytes32(keccak256(abi.encodePacked(_key))); }\n\n\n    /**\n    * @dev Check if an address has this role\n    */\n    function roleHas(string memory _role, address _address) internal view returns (bool) {\n        return getBool(keccak256(abi.encodePacked(\"access.role\", _role, _address)));\n    }\n\n}\n"
    },
    "localhost/contracts/interfaces/settings/IStafiNetworkSettings.sol": {
      "content": "pragma solidity 0.6.12;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiNetworkSettings {\n    function getNodeConsensusThreshold() external view returns (uint256);\n    function getSubmitBalancesEnabled() external view returns (bool);\n    function getProcessWithdrawalsEnabled() external view returns (bool);\n    function getNodeFee() external view returns (uint256);\n    function getPlatformFee() external view returns (uint256);\n    function getNodeRefundRatio() external view returns (uint256);\n    function getNodeTrustedRefundRatio() external view returns (uint256);\n    function getWithdrawalCredentials() external view returns (bytes memory);\n}\n"
    },
    "localhost/contracts/interfaces/storage/IStafiStorage.sol": {
      "content": "pragma solidity 0.6.12;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface IStafiStorage {\n\n    // Getters\n    function getAddress(bytes32 _key) external view returns (address);\n    function getUint(bytes32 _key) external view returns (uint);\n    function getString(bytes32 _key) external view returns (string memory);\n    function getBytes(bytes32 _key) external view returns (bytes memory);\n    function getBool(bytes32 _key) external view returns (bool);\n    function getInt(bytes32 _key) external view returns (int);\n    function getBytes32(bytes32 _key) external view returns (bytes32);\n\n    // Setters\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string calldata _value) external;\n    function setBytes(bytes32 _key, bytes calldata _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // Deleters\n    function deleteAddress(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n\n}\n"
    },
    "localhost/contracts/settings/StafiNetworkSettings.sol": {
      "content": "pragma solidity 0.6.12;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"../StafiBase.sol\";\nimport \"../interfaces/settings/IStafiNetworkSettings.sol\";\n\n// Network settings\ncontract StafiNetworkSettings is StafiBase, IStafiNetworkSettings {\n\n    // Construct\n    constructor(address _stafiStorageAddress) StafiBase(_stafiStorageAddress) public {\n        // Set version\n        version = 1;\n        // Initialize settings on deployment\n        if (!getBoolS(\"settings.network.init\")) {\n            // Apply settings\n            setNodeConsensusThreshold(0.5 ether); // 50%\n            setSubmitBalancesEnabled(true);\n            setProcessWithdrawalsEnabled(true);\n            setNodeFee(0.1 ether); // 10%\n            setPlatformFee(0.1 ether); // 10%\n            setNodeRefundRatio(0.25 ether); // 25%\n            setNodeTrustedRefundRatio(0.5 ether); // 50%\n            // Settings initialized\n            setBoolS(\"settings.network.init\", true);\n        }\n    }\n\n    // The threshold of trusted nodes that must reach consensus on oracle data to commit it\n    function getNodeConsensusThreshold() override public view returns (uint256) {\n        return getUintS(\"settings.network.consensus.threshold\");\n    }\n    function setNodeConsensusThreshold(uint256 _value) public onlySuperUser {\n        setUintS(\"settings.network.consensus.threshold\", _value);\n    }\n\n    // Submit balances currently enabled (trusted nodes only)\n    function getSubmitBalancesEnabled() override public view returns (bool) {\n        return getBoolS(\"settings.network.submit.balances.enabled\");\n    }\n    function setSubmitBalancesEnabled(bool _value) public onlySuperUser {\n        setBoolS(\"settings.network.submit.balances.enabled\", _value);\n    }\n\n    // Process withdrawals currently enabled (trusted nodes only)\n    function getProcessWithdrawalsEnabled() override public view returns (bool) {\n        return getBoolS(\"settings.network.process.withdrawals.enabled\");\n    }\n    function setProcessWithdrawalsEnabled(bool _value) public onlySuperUser {\n        setBoolS(\"settings.network.process.withdrawals.enabled\", _value);\n    }\n\n    // The node commission rate as a fraction of 1 ether\n    function getNodeFee() override public view returns (uint256) {\n        return getUintS(\"settings.network.node.fee\");\n    }\n    function setNodeFee(uint256 _value) public onlySuperUser {\n        require( _value <= 1 ether, \"Invalid value\");\n        setUintS(\"settings.network.node.fee\", _value);\n    }\n\n    // The platform commission rate as a fraction of 1 ether\n    function getPlatformFee() override public view returns (uint256) {\n        return getUintS(\"settings.network.platform.fee\");\n    }\n    function setPlatformFee(uint256 _value) public onlySuperUser {\n        require( _value <= 1 ether, \"Invalid value\");\n        setUintS(\"settings.network.platform.fee\", _value);\n    }\n\n    // The node refund commission rate as a fraction of 1 ether\n    function getNodeRefundRatio() override public view returns (uint256) {\n        return getUintS(\"settings.network.node.refund.ratio\");\n    }\n    function setNodeRefundRatio(uint256 _value) public onlySuperUser {\n        require( _value <= 1 ether, \"Invalid value\");\n        setUintS(\"settings.network.node.refund.ratio\", _value);\n    }\n\n    // The trusted node refund commission rate as a fraction of 1 ether\n    function getNodeTrustedRefundRatio() override public view returns (uint256) {\n        return getUintS(\"settings.network.node.trusted.refund.ratio\");\n    }\n    function setNodeTrustedRefundRatio(uint256 _value) public onlySuperUser {\n        require( _value <= 1 ether, \"Invalid value\");\n        setUintS(\"settings.network.node.trusted.refund.ratio\", _value);\n    }\n\n    // Get the validator withdrawal credentials\n    function getWithdrawalCredentials() override public view returns (bytes memory) {\n        return getBytesS(\"settings.network.withdrawal.credentials\");\n    }\n\n    // Set the validator withdrawal credentials\n    function setWithdrawalCredentials(bytes memory _value) public onlySuperUser {\n        setBytesS(\"settings.network.withdrawal.credentials\", _value);\n    }\n\n}\n"
    }
  }
}