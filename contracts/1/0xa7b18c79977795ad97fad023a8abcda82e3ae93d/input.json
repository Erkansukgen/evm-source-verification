{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ClaimToken.sol":{"content":"pragma solidity 0.6.12;\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n     /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `whiteListedAddress`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address whiteListedAddress, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `whiteListedAddress` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address whiteListedAddress, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n     function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ClaimToken is Ownable {\n    uint256 public totalPercentages;\n    uint256 public maxPercentage;\n    IERC20 internal token;\n    address internal tokenAddress;\n\n    struct WhiteListedAddress {\n        uint256 withdrawnAmount;\n        uint256 withdrawPercentage;\n        bool exists;\n        bool notClaimed;\n    }\n\n    uint256 public totalWhiteListedAddresses;\n    mapping(address => WhiteListedAddress) public whiteListedAddresses;\n\n    event LogWhiteListedAddressAdded(address whiteListedAddress, uint256 withdrawPercentage);\n    event LogTokensClaimed(address whiteListedAddress, uint256 amount);\n    event WithdrawTokenCompleted(address whiteListedAddress, uint256 amount);\n    event bulkClaimCompleted(uint256 totalAmountDistributed);\n\n    /*\n     * Note: Percentages will be provided in thousands to represent 3 digits after the decimal point.\n     * Ex. 10% = 10000\n     */\n    modifier onlyValidPercentages(uint256 _percentage) {\n        require(\n            _percentage < maxPercentage,\n            \"Provided percentage should be less than 100%\"\n        );\n        require(\n            _percentage > 0,\n            \"Provided percentage should be greater than 0\"\n        );\n        _;\n    }\n\n    /**\n     * @param _tokenAddress The address of the token\n     */\n    constructor(\n        address _tokenAddress\n    ) public {\n        require(\n            _tokenAddress != address(0),\n            \"Token Address can't be zero address\"\n        );\n        token = IERC20(_tokenAddress);\n        tokenAddress = _tokenAddress;\n        maxPercentage =  100000 * (10 ** uint256(18));\n    }\n\n     /**\n     * @dev Function add whiteListedAddress to the contract\n     * @param _whiteListedAddress The address of the whiteListedAddress\n     * @param _withdrawPercentage The percentage that the whiteListedAddress should receive in each vesting period\n     */\n    function addWhiteListedAddress(\n        address _whiteListedAddress,\n        uint256 _withdrawPercentage\n    ) public onlyOwner onlyValidPercentages(_withdrawPercentage) {\n        require(\n            _whiteListedAddress != address(0),\n            \"Recepient Address can't be zero address\"\n        );\n        totalPercentages = totalPercentages + _withdrawPercentage;\n        require(totalPercentages <= maxPercentage, \"Total percentages exceeds 100%\");\n        totalWhiteListedAddresses++;\n\n        whiteListedAddresses[_whiteListedAddress] = WhiteListedAddress(0, _withdrawPercentage, true, true);\n        emit LogWhiteListedAddressAdded(_whiteListedAddress, _withdrawPercentage);\n    }\n\n    /**\n     * @dev Function add  multiple whiteListedAddresses to the vesting contract\n     * @param _whiteListedAddresses Array of whiteListedAddress addresses. The array length should be less than 230, otherwise it will overflow the gas limit\n     * @param _withdrawPercentages Corresponding percentages of the whiteListedAddresses\n     */\n    function addMultipleWhiteListedAddresses(\n        address[] memory _whiteListedAddresses,\n        uint256[] memory _withdrawPercentages\n    ) public onlyOwner {\n        require(\n            _whiteListedAddresses.length < 230,\n            \"The whiteListedAddresses must be not more than 230\"\n        );\n        require(\n            _whiteListedAddresses.length == _withdrawPercentages.length,\n            \"The two arryas are with different length\"\n        );\n        for (uint256 i; i < _whiteListedAddresses.length; i++) {\n            addWhiteListedAddress(_whiteListedAddresses[i], _withdrawPercentages[i]);\n        }\n    }\n\n    /**\n     * @dev Function is to claim on behalf of a customer\n     * @param _whiteListedAddress The address of the whiteListedAddress\n     */\n    function claimOnBehalf(address _whiteListedAddress) public onlyOwner {\n        require(whiteListedAddresses[_whiteListedAddress].exists, \"The requested address is not whitelisted!\");\n        require(whiteListedAddresses[_whiteListedAddress].notClaimed, \"Claimed already!\");\n        whiteListedAddresses[_whiteListedAddress].withdrawnAmount = whiteListedAddresses[_whiteListedAddress].withdrawPercentage;\n        whiteListedAddresses[_whiteListedAddress].notClaimed = false;\n        bool result = token.transfer(_whiteListedAddress, whiteListedAddresses[_whiteListedAddress].withdrawPercentage);\n        require(result, \"The claim was not successful\");\n        emit LogTokensClaimed(_whiteListedAddress, whiteListedAddresses[_whiteListedAddress].withdrawPercentage);\n    }\n\n    /**\n     * @dev Function is to claim on behalf of group of customers\n     * @param _whiteListedAddresses The list of whiteListedAddress\n     */\n    function bulkClaimOnBehalf(\n        address[] memory _whiteListedAddresses   // Array of whiteListedAddress addresses\n    )\n    public onlyOwner\n    {\n        require(\n            _whiteListedAddresses.length < 230,\n            \"The whiteListedAddresses must be not more than 230\"\n        );\n     \n        // Keep track of the total\n        uint256 totalAmountDistributed = 0;\n\n        for (uint256 i; i < _whiteListedAddresses.length; i++) {\n            claimOnBehalf(_whiteListedAddresses[i]);\n            // Increment the total with the amount transferred\n            totalAmountDistributed += whiteListedAddresses[_whiteListedAddresses[i]].withdrawPercentage;\n        }\n        \n        // Emit the event that everything is done.\n        emit bulkClaimCompleted(totalAmountDistributed);\n\n    }\n\n    /**\n     * @dev Function is to claim on behalf of group of customers\n     * @param _whiteListedAddress The address of the whiteListedAddress\n     * @param amount withdrawal amount\n     */\n    function withdrawToken(address _whiteListedAddress, uint256 amount) public onlyOwner {\n        bool result = token.transfer(_whiteListedAddress, amount);\n        require(result, \"Withdrawed token back\");\n        emit WithdrawTokenCompleted(_whiteListedAddress, amount);\n    }\n\n    /**\n     * @dev Function that shows the remaining amount to claim\n     * @param _whiteListedAddress The address of the whiteListedAddress\n     */\n    function getClaimAmount(address _whiteListedAddress) public view returns (uint256) {\n        return SafeMath.sub(whiteListedAddresses[_whiteListedAddress].withdrawPercentage, whiteListedAddresses[_whiteListedAddress].withdrawnAmount, \"ERC20: Invalid request\");\n    }\n\n    /**\n     * @dev Function that withdraws all available tokens for the current period\n     */\n    function claim() public {\n        require(whiteListedAddresses[msg.sender].exists, \"The requested address is not whitelisted!\");\n        require(whiteListedAddresses[msg.sender].notClaimed, \"Claimed already!\");\n        whiteListedAddresses[msg.sender].withdrawnAmount = whiteListedAddresses[msg.sender].withdrawPercentage;\n        whiteListedAddresses[msg.sender].notClaimed = false;\n        bool result = token.transfer(msg.sender, whiteListedAddresses[msg.sender].withdrawPercentage);\n        require(result, \"The claim was not successful\");\n        emit LogTokensClaimed(msg.sender, whiteListedAddresses[msg.sender].withdrawPercentage);\n    }\n}\n"}}}