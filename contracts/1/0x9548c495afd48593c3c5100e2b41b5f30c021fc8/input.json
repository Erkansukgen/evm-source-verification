{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BulkSender.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public;\r\n    function approve(address spender, uint256 value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address,and provides basic authorization control\r\n * functions,this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner,newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BulkSender is Ownable{\r\n    event GovWithdraw(address indexed to,uint256 value);\r\n    event Multisended(uint256 total, address tokenAddress);\r\n\r\n    constructor()public {\r\n    }\r\n\r\n    function bulksend(address payable [] memory _to,uint[] memory _value)onlyOwner public payable{\r\n        for (uint8 i = 0; i < _to.length; i++) {\r\n            _to[i].transfer(_value[i]);\r\n        }\r\n    }\r\n\r\n    function multisendToken(address token, address[] memory _to, uint256[] memory _balances)onlyOwner public {\r\n        ERC20 erc20token = ERC20(token);\r\n        address from = msg.sender;\r\n        uint8 i = 0;\r\n        for (i; i < _to.length; i++) {\r\n            erc20token.transferFrom(from, _to[i], _balances[i]);\r\n        }\r\n    }\r\n\r\n    function multisendToken2(address token, address[] memory _to, uint256[] memory _balances)onlyOwner public {\r\n        ERC20 erc20token = ERC20(token);\r\n        uint8 i = 0;\r\n        for (i; i < _to.length; i++) {\r\n            erc20token.transfer( _to[i], _balances[i]);\r\n        }\r\n    }\r\n\r\n    function govWithdraw(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0,\"!zero input\");\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdraw(msg.sender,_amount);\r\n    }\r\n}"}}}