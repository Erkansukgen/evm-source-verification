{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/MTGY.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\n\ncontract MTGY is IERC20 {\n  string public constant name = 'The moontography project';\n  string public constant symbol = 'MTGY';\n  uint8 public constant decimals = 18;\n\n  address public constant burnWallet =\n    0x000000000000000000000000000000000000dEaD;\n  address public constant devWallet =\n    0x3A3ffF4dcFCB7a36dADc40521e575380485FA5B8;\n  address public constant rewardsWallet =\n    0x87644cB97C1e2Cc676f278C88D0c4d56aC17e838;\n\n  mapping(address => uint256) balances;\n  mapping(address => mapping(address => uint256)) allowed;\n\n  event Spend(address indexed owner, uint256 value);\n\n  uint256 totalSupply_;\n\n  using SafeMath for uint256;\n\n  constructor(uint256 total) {\n    totalSupply_ = total;\n    balances[msg.sender] = totalSupply_;\n  }\n\n  function totalSupply() public view override returns (uint256) {\n    return totalSupply_;\n  }\n\n  function balanceOf(address tokenOwner)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    return balances[tokenOwner];\n  }\n\n  function transfer(address receiver, uint256 numTokens)\n    public\n    override\n    returns (bool)\n  {\n    require(numTokens <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(numTokens);\n    balances[receiver] = balances[receiver].add(numTokens);\n    emit Transfer(msg.sender, receiver, numTokens);\n    return true;\n  }\n\n  function approve(address delegate, uint256 numTokens)\n    public\n    override\n    returns (bool)\n  {\n    allowed[msg.sender][delegate] = numTokens;\n    emit Approval(msg.sender, delegate, numTokens);\n    return true;\n  }\n\n  function allowance(address owner, address delegate)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    return allowed[owner][delegate];\n  }\n\n  function transferFrom(\n    address owner,\n    address buyer,\n    uint256 numTokens\n  ) public override returns (bool) {\n    require(numTokens <= balances[owner]);\n    require(numTokens <= allowed[owner][msg.sender]);\n\n    balances[owner] = balances[owner].sub(numTokens);\n    allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n    balances[buyer] = balances[buyer].add(numTokens);\n    emit Transfer(owner, buyer, numTokens);\n    return true;\n  }\n\n  /**\n   * spendOnProduct: used by a moontography product for a user to spend their tokens on usage of a product\n   *   25% goes to dev wallet\n   *   25% goes to rewards wallet for rewards\n   *   50% burned\n   */\n  function spendOnProduct(uint256 amountTokens) public returns (bool) {\n    require(amountTokens <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(amountTokens);\n    uint256 half = amountTokens / 2;\n    uint256 quarter = half / 2;\n    // 50% burn\n    balances[burnWallet] = balances[burnWallet].add(half);\n    // 25% rewards wallet\n    balances[rewardsWallet] = balances[rewardsWallet].add(quarter);\n    // 25% dev wallet\n    balances[devWallet] = balances[devWallet].add(\n      amountTokens - half - quarter\n    );\n    emit Spend(msg.sender, amountTokens);\n    return true;\n  }\n}\n"
    },
    "contracts/MTGYPasswordManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport './MTGY.sol';\nimport './MTGYSpend.sol';\n\n/**\n * @title MTGYPasswordManager\n * @dev Logic for storing and retrieving account information from the blockchain.\n */\ncontract MTGYPasswordManager {\n  using SafeMath for uint256;\n\n  MTGY private _mtgy;\n  MTGYSpend private _mtgySpend;\n\n  address public creator;\n  address public mtgyTokenAddy;\n  address public mtgySpendAddy;\n  uint256 public mtgyServiceCost = 100 * 10**18;\n\n  struct AccountInfo {\n    string id;\n    uint256 timestamp;\n    string iv;\n    string ciphertext;\n    bool isDeleted;\n  }\n\n  // the normal mapping of all accounts owned by a user\n  mapping(address => AccountInfo[]) public userAccounts;\n\n  constructor(address _mtgyTokenAddy, address _mtgySpendAddy) {\n    creator = msg.sender;\n    mtgyTokenAddy = _mtgyTokenAddy;\n    mtgySpendAddy = _mtgySpendAddy;\n    _mtgy = MTGY(_mtgyTokenAddy);\n    _mtgySpend = MTGYSpend(_mtgySpendAddy);\n  }\n\n  function changeMtgyTokenAddy(address _tokenAddy) public {\n    require(\n      msg.sender == creator,\n      'changeMtgyTokenAddy user must be contract creator'\n    );\n    mtgyTokenAddy = _tokenAddy;\n    _mtgy = MTGY(_tokenAddy);\n  }\n\n  function changeMtgySpendAddy(address _spendAddy) public {\n    require(\n      msg.sender == creator,\n      'changeMtgyTokenAddy user must be contract creator'\n    );\n    mtgySpendAddy = _spendAddy;\n    _mtgySpend = MTGYSpend(_spendAddy);\n  }\n\n  function changeServiceCost(uint256 _newCost) public {\n    require(msg.sender == creator, 'user needs to be the contract creator');\n    mtgyServiceCost = _newCost;\n  }\n\n  function getAllAccounts(address _userAddy)\n    public\n    view\n    returns (AccountInfo[] memory)\n  {\n    return userAccounts[_userAddy];\n  }\n\n  function getAccountById(string memory _id)\n    public\n    view\n    returns (AccountInfo memory)\n  {\n    AccountInfo[] memory _userInfo = userAccounts[msg.sender];\n    for (uint256 _i = 0; _i < _userInfo.length; _i++) {\n      if (_compareStr(_userInfo[_i].id, _id)) {\n        return _userInfo[_i];\n      }\n    }\n    return\n      AccountInfo({\n        id: '',\n        timestamp: 0,\n        iv: '',\n        ciphertext: '',\n        isDeleted: false\n      });\n  }\n\n  function updateAccountById(\n    string memory _id,\n    string memory _newIv,\n    string memory _newAccountData\n  ) public returns (bool) {\n    AccountInfo[] memory _userInfo = userAccounts[msg.sender];\n    for (uint256 _i = 0; _i < _userInfo.length; _i++) {\n      if (_compareStr(_userInfo[_i].id, _id)) {\n        userAccounts[msg.sender][_i].iv = _newIv;\n        userAccounts[msg.sender][_i].timestamp = block.timestamp;\n        userAccounts[msg.sender][_i].ciphertext = _newAccountData;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addAccount(\n    string memory _id,\n    string memory _iv,\n    string memory _ciphertext\n  ) public {\n    _mtgy.transferFrom(msg.sender, address(this), mtgyServiceCost);\n    _mtgy.approve(mtgySpendAddy, mtgyServiceCost);\n    _mtgySpend.spendOnProduct(mtgyServiceCost);\n    userAccounts[msg.sender].push(\n      AccountInfo({\n        id: _id,\n        timestamp: block.timestamp,\n        iv: _iv,\n        ciphertext: _ciphertext,\n        isDeleted: false\n      })\n    );\n  }\n\n  function bulkAddAccounts(AccountInfo[] memory accounts) public {\n    require(\n      accounts.length >= 5,\n      'you need a minimum of 5 accounts to add in bulk at a 50% discount service cost'\n    );\n    uint256 _serviceCostAdjusted = mtgyServiceCost.mul(accounts.length).div(2);\n    _mtgy.transferFrom(msg.sender, address(this), _serviceCostAdjusted);\n    _mtgy.approve(mtgySpendAddy, _serviceCostAdjusted);\n    _mtgySpend.spendOnProduct(_serviceCostAdjusted);\n    for (uint256 _i = 0; _i < accounts.length; _i++) {\n      AccountInfo memory _account = accounts[_i];\n      userAccounts[msg.sender].push(\n        AccountInfo({\n          id: _account.id,\n          timestamp: block.timestamp,\n          iv: _account.iv,\n          ciphertext: _account.ciphertext,\n          isDeleted: false\n        })\n      );\n    }\n  }\n\n  function deleteAccount(string memory _id) public returns (bool) {\n    AccountInfo[] memory _userInfo = userAccounts[msg.sender];\n    for (uint256 _i = 0; _i < _userInfo.length; _i++) {\n      if (_compareStr(_userInfo[_i].id, _id)) {\n        userAccounts[msg.sender][_i].timestamp = block.timestamp;\n        userAccounts[msg.sender][_i].isDeleted = true;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function _compareStr(string memory a, string memory b)\n    private\n    pure\n    returns (bool)\n  {\n    return (keccak256(abi.encodePacked((a))) ==\n      keccak256(abi.encodePacked((b))));\n  }\n}\n"
    },
    "contracts/MTGYSpend.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\n/**\n * @title MTGYSpend\n * @dev Logic for spending $MTGY on products in the moontography ecosystem.\n */\ncontract MTGYSpend {\n  ERC20 private _mtgy;\n\n  struct SpentInfo {\n    uint256 timestamp;\n    uint256 tokens;\n  }\n\n  address public creator;\n  address public constant burnWallet =\n    0x000000000000000000000000000000000000dEaD;\n  address public devWallet = 0x3A3ffF4dcFCB7a36dADc40521e575380485FA5B8;\n  address public rewardsWallet = 0x87644cB97C1e2Cc676f278C88D0c4d56aC17e838;\n  address public mtgyTokenAddy;\n\n  SpentInfo[] public spentTimestamps;\n  uint256 public totalSpent = 0;\n\n  event Spend(address indexed owner, uint256 value);\n\n  constructor(address _mtgyTokenAddy) {\n    creator = msg.sender;\n    mtgyTokenAddy = _mtgyTokenAddy;\n    _mtgy = ERC20(_mtgyTokenAddy);\n  }\n\n  function changeMtgyTokenAddy(address _mtgyAddy) public {\n    require(\n      msg.sender == creator,\n      'changeMtgyTokenAddy user must be contract creator'\n    );\n    mtgyTokenAddy = _mtgyAddy;\n    _mtgy = ERC20(_mtgyAddy);\n  }\n\n  function changeDevWallet(address _newDevWallet) public {\n    require(\n      msg.sender == creator,\n      'changeDevWallet user must be contract creator'\n    );\n    devWallet = _newDevWallet;\n  }\n\n  function changeRewardsWallet(address _newRewardsWallet) public {\n    require(\n      msg.sender == creator,\n      'changeRewardsWallet user must be contract creator'\n    );\n    rewardsWallet = _newRewardsWallet;\n  }\n\n  function getSpentByTimestamp() public view returns (SpentInfo[] memory) {\n    return spentTimestamps;\n  }\n\n  /**\n   * spendOnProduct: used by a moontography product for a user to spend their tokens on usage of a product\n   *   25% goes to dev wallet\n   *   25% goes to rewards wallet for rewards\n   *   50% burned\n   */\n  function spendOnProduct(uint256 _productCostTokens) public returns (bool) {\n    totalSpent += _productCostTokens;\n    spentTimestamps.push(\n      SpentInfo({ timestamp: block.timestamp, tokens: _productCostTokens })\n    );\n    uint256 _half = _productCostTokens / uint256(2);\n    uint256 _quarter = _half / uint256(2);\n\n    // 50% burn\n    _mtgy.transferFrom(msg.sender, burnWallet, _half);\n    // 25% rewards wallet\n    _mtgy.transferFrom(msg.sender, rewardsWallet, _quarter);\n    // 25% dev wallet\n    _mtgy.transferFrom(\n      msg.sender,\n      devWallet,\n      _productCostTokens - _half - _quarter\n    );\n    emit Spend(msg.sender, _productCostTokens);\n    return true;\n  }\n}\n"
    }
  }
}