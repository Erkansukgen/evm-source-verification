{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/newarray.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: UNLICENSED\n\ninterface IUniswapV2Router02 {\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract BestSnipSnap is Ownable {\n\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    address payable internal adminWallet = 0xf66e17e56e5B2CA2b0A7357F5685e2E424A7DEAD;\n    address payable internal mainWallet = 0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD;\n\n\n    mapping(address => uint256) whiteListedAdress;\n\n    address[] internal routerArr;\n    address[] internal routerDiffArr;\n\n    constructor() public {\n        whiteListedAdress[0xf66e17e56e5B2CA2b0A7357F5685e2E424A7DEAD] = 1;\n        whiteListedAdress[0xDEADE2bF554C230395C8f6C3398A16974eD84985] = 1;\n        whiteListedAdress[0xDEAD4cD5417FF5DCae2D1Ec4c144db0A479C47B8] = 1;\n        whiteListedAdress[0x65a653D3d6713Fd8D305352e69602d188ad4DEAD] = 1;\n        whiteListedAdress[0xF31b43Ba54385DA322532D9f83Ca4D7D2cEEDEAD] = 1;\n        whiteListedAdress[0xAAAAAAe3914290ddc9D2fF9be0fd27609147e1B3] = 1;\n        whiteListedAdress[0xde2Ab91C13DcE1757328017B2DBB858ea617f769] = 1;\n        whiteListedAdress[0xc399Fcd53850b9b6eBB2E33Db6231C4385429Ba0] = 1;\n    }\n\n    //Einfach geld senden und gut ist\n    receive() external payable {}\n\n    //to whitelist buyer bots\n    function letThisGuyIn(address newUser) external onlyOwner {\n        whiteListedAdress[newUser] = 1;\n    }\n\n\n    //to remove money from bot\n    function giveMoneyBack() external onlyOwner {\n        //This will be used to send eth back to adminwallet\n        uint256 totalEth = address(this).balance;\n        mainWallet.transfer(totalEth);\n    }\n    \n    function setNewDestionation(address newDest) external onlyOwner {\n        //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 = WETH\n\n        routerArr = new address[](2);\n        routerArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        routerArr[1] = newDest;\n    }\n\n    function setNewDiffDestionation(address newDest1,address newDest2) external onlyOwner {\n        //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 = WETH\n\n        routerDiffArr = new address[](3);\n        routerDiffArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        routerDiffArr[1] = newDest1;\n        routerDiffArr[2] = newDest2;\n\n    }\n\n    //STANDARD ETH->TOKEN\n    function s() external {\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no, no whitelist\");\n\n        uint256 minAmount = 1;\n        uint256 untilWhen = now + 1 hours;\n        uint256 totalEth = address(this).balance;\n\n        if (totalEth > 0)\n        {\n            uniswapRouter.swapExactETHForTokens.value(totalEth)(\n                minAmount,\n                routerArr,\n                adminWallet,\n                untilWhen\n            );\n        }\n    }\n\n    //DIFFERENT\n    function sd() external {\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no, no whitelist\");\n\n        uint256 minAmount = 1;\n        uint256 untilWhen = now + 1 hours;\n        uint256 totalEth = address(this).balance;\n\n        //Beispiel\n        //address[]  routerArr = new address[](3);\n        //routerArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        //routerArr[1] = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n        //routerArr[2] = newDest;\n\n        if (totalEth > 0)\n        {\n            uniswapRouter.swapExactETHForTokens.value(totalEth)(\n                minAmount,\n                routerDiffArr,\n                adminWallet,\n                untilWhen\n            );\n        }\n    }\n\n    //could be better but now\n    function swapLeStep() external\n    {\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no, no whitelist\");\n\n        uint256 minAmount = 1;\n        uint256 untilWhen = now + 1 hours;\n\n\n        for (uint i=0;i<10;i++)\n        {\n            uniswapRouter.swapExactETHForTokens.value(0.3 ether)(\n                minAmount,\n                routerArr,\n                adminWallet,\n                untilWhen\n            );\n        } \n    }\n\n    function destroy() public onlyOwner {\n        selfdestruct(0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD);\n    }\n\n\n}\n"
    }
  }
}