{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "UsePAY/Storage/Addresses.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity = 0.8.0;\n\ncontract Addresses {\n    \n    // 0 : ticketCommander\n    // 1: couponCommander\n    // 2: subscriptionCommander ...\n    // 100 : ETH ( 0x000...)\n    // 101 : DFM\n    // 102 : USDT\n    // 103 : GUSD ...\n    // 199 : WETH\n    // 200 : manager0\n    // 201 : manager1\n    // 202 : manager2 ...\n    // 301 : safeAddress\n    // 400 : uniswapRouter\n    // 401: uniswapFactory\n    // 500 : Percentage\n    // 600 : Bridge\n\n    mapping(uint16=>address) addresses;\n    uint8 maxCount = 3;\n    uint8 nowCount = 1;\n    \n    //-----------------------------------------\n    //  modifiers\n    //-----------------------------------------\n    modifier onlyManager() { require( checkManger(msg.sender) , \"This address is not manager\" ); _; }\n    \n    //-----------------------------------------\n    //  pureFunctions\n    //-----------------------------------------\n    function checkManger(address _addr) public view returns ( bool ) {\n        for ( uint16 i = 0; i < nowCount; i++ ) {\n            if ( addresses[200+i] == _addr ) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    constructor() {\n        addresses[200] = msg.sender;\n        addresses[100] = 0x0000000000000000000000000000000000000000;\n        addresses[101] = 0x0ccD5DD52Dee42B171a623478e5261C1eaaE092A;\n    }\n    \n    function setAddress(uint16 _index,address _addr) external payable onlyManager {\n        if (_index > 200 && _index < 300) {\n            require ( addresses[_index-1] != address(0) , \"_index - 1 is empty\" );\n            nowCount++;\n        }\n        addresses[_index] = _addr;\n    }\n    \n    function viewAddress(uint16 _index) external view returns (address) {\n        return addresses[_index];\n    }\n}"
    }
  }
}