{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"INFT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface INFT {\n\tfunction mint(address _to, uint _tokenId) external;\n\tfunction mintBatch(address _to, uint[] memory _tokenIds) external;\n}"},"NftSale.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\nimport \"./INFT.sol\";\nimport \"openzeppelin-solidity/contracts/utils/Counters.sol\";\n\ncontract NftSale is Ownable {\n\n\tuint public constant MAX_UNITS_PER_TRANSACTION = 5;\n\tuint public constant INITIAL_PRICE = 3.3 ether;\n\tuint public constant FINAL_PRICE = 0.3 ether;\n\tuint public constant PRICE_DROP = 0.1 ether;\n\tuint public constant PRICE_DROP_TIME = 5 minutes;\n\tuint public constant START_TIME = 1634173200;\n\tuint public lastTokenId = 7777;\n\t\n\t// 9 pm EST 10/13 Wed = 1634173200\n\t\n\t//INCORRECT presale start 3 pm wednesday EST = 1636826400\n\t//INCORRECT presale end 3 pm thursday EST = 1636912800\n\t//INCORRECT sale start 6 pm trursday EST = 1636923600\n\t\n\tINFT public nft;\n\n\tmapping(address => uint) public buyers;\n\n\tusing Counters for Counters.Counter;\n\tCounters.Counter private _tokenCounter;\n\n\tconstructor(address _nftAddress) {\n\t\tnft = INFT(_nftAddress);\n\t}\n\t\n\tfunction getCurrentPrice() public view returns(uint) {\n\t\treturn getPriceOnTime(block.timestamp);\n\t}\n\t\n\tfunction getPriceOnTime(uint _time) public pure returns(uint) {\n\t\tif(_time < START_TIME) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint maxRange = (INITIAL_PRICE - FINAL_PRICE) / PRICE_DROP;\n\t\tuint currentRange = (_time - START_TIME) / PRICE_DROP_TIME;\n\n\t\tif(currentRange >= maxRange) {\n\t\t\treturn FINAL_PRICE;\n\t\t}\n\n\t\treturn INITIAL_PRICE - (currentRange * PRICE_DROP);\n\t}\n\n\t//function buyBatch(uint[] memory _tokenIds) external payable {\n\tfunction buyBatch(uint batchCount) external payable returns(uint256[] memory) {\n\t\trequire(block.timestamp >= START_TIME, \"sale is not started yet\");\n\t\trequire(batchCount > 0, \"empty or negative input\");\n\t\trequire(batchCount + _tokenCounter.current() <= lastTokenId, \"too few available to complete purchase\");\n\t\trequire(batchCount <= MAX_UNITS_PER_TRANSACTION, \"exceeded MAX_UNITS_PER_TRANSACTION\");\n\n\t\tuint currentPrice = getCurrentPrice() * batchCount;\n\t\trequire(msg.value >= currentPrice, \"too low value\");\n\t\tif(msg.value > currentPrice) {\n\t\t\t//send the rest back\n\t\t\t(bool sent, ) = payable(msg.sender).call{value: msg.value - currentPrice}(\"\");\n        \trequire(sent, \"Failed to send Ether\");\n\t\t}\n\t\t\n\t\tbuyers[msg.sender] += batchCount;\n\t\tuint256[] memory newids = new uint256[](batchCount);\n\t\tfor (uint i = 0; i < batchCount; i++){\n\t\t\t_tokenCounter.increment();\n\t\t\tnewids[i] = _tokenCounter.current();\n\t\t}\n\t\tnft.mintBatch(msg.sender, newids);\n\t\treturn newids;\n\t}\n\n\tfunction buy() public payable returns(uint256) {\n\t\trequire(block.timestamp >= START_TIME, \"sale is not started yet\");\n\t\t//require(buyers[msg.sender] < MAX_UNITS_PER_ADDRESS, \"exceed MAX_UNITS_PER_ADDRESS\");\n\t\trequire(_tokenCounter.current() < lastTokenId, \"no more units available to purchase\");\n\n\t\tuint currentPrice = getCurrentPrice();\n\t\trequire(msg.value >= currentPrice, \"too low value\");\n\t\tif(msg.value > currentPrice) {\n\t\t\t//send the rest back\n\t\t\t(bool sent, ) = payable(msg.sender).call{value: msg.value - currentPrice}(\"\");\n        \trequire(sent, \"Failed to send Ether\");\n\t\t}\n\n\t\tbuyers[msg.sender]++;\n\t\t_tokenCounter.increment();\n\t\tuint256 newItemId = _tokenCounter.current();\n\t\tnft.mint(msg.sender, newItemId);\n\t\t\n\t\treturn newItemId;\n\t}\n\n\tfunction cashOut(address _to) public onlyOwner {\n        // Call returns a boolean value indicating success or failure.\n        // This is the current recommended method to use.\n        (bool sent, ) = _to.call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}"},"openzeppelin-solidity/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"openzeppelin-solidity/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"openzeppelin-solidity/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"}}}