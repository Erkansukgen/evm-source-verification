{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "EsusuAdapter.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IYDaiToken.sol\";\r\n\r\nimport \"./IDaiLendingService.sol\";\r\nimport \"./OwnableService.sol\";\r\n\r\nimport \"./ISavingsConfig.sol\";\r\nimport \"./ISavingsConfigSchema.sol\";\r\nimport \"./IGroups.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IEsusuStorage.sol\";\r\nimport \"./SafeERC20.sol\";\r\n\r\n\r\ncontract EsusuAdapter is OwnableService, ISavingsConfigSchema {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    using SafeERC20 for IERC20; \r\n\r\n    using SafeERC20 for IYDaiToken; \r\n\r\n    /*\r\n        Events to emit\r\n        1. Creation of Esusu Cycle\r\n        2. Joining of Esusu Cycle\r\n        3. Starting of Esusu Cycle\r\n        4. Withdrawal of ROI\r\n        5. Withdrawal of Capital\r\n    */\r\n    event CreateEsusuCycleEvent\r\n    (\r\n        uint256 date,\r\n        uint256 indexed cycleId,\r\n        uint256 depositAmount,\r\n        address  Owner,\r\n        uint256 payoutIntervalSeconds,\r\n        CurrencyEnum currency,\r\n        string currencySymbol,\r\n        uint256 cycleState\r\n    );\r\n\r\n    event DepricateContractEvent(\r\n        \r\n        uint256 date,\r\n        address owner, \r\n        string reason,\r\n        uint256 yDaiSharesTransfered\r\n    );\r\n    event JoinEsusuCycleEvent\r\n    (\r\n        uint256 date,\r\n        address indexed member,   \r\n        uint256 memberPosition,\r\n        uint256 totalAmountDeposited,\r\n        uint256 cycleId\r\n    );\r\n    \r\n    event StartEsusuCycleEvent\r\n    (\r\n        uint256 date,\r\n        uint256 totalAmountDeposited,\r\n        uint256 totalCycleDuration,\r\n        uint256 totalShares,\r\n        uint256 indexed cycleId\r\n    );\r\n\r\n    /*  Enum definitions */\r\n    enum CurrencyEnum {Dai}\r\n\r\n    enum CycleStateEnum {\r\n        Idle, // Cycle has just been created and members can join in this state\r\n        Active, // Cycle has started and members can take their ROI\r\n        Expired, // Cycle Duration has elapsed and members can withdraw their capital as well as ROI\r\n        Inactive // Total beneficiaries is equal to Total members, so all members have withdrawn their Capital and ROI\r\n    }\r\n\r\n    \r\n    //  Member variables\r\n    ISavingsConfig _savingsConfigContract;\r\n    IGroups immutable _groupsContract;\r\n\r\n    IDaiLendingService _iDaiLendingService;\r\n    IERC20 immutable _dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IYDaiToken immutable _yDai = IYDaiToken(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\r\n    IEsusuStorage _esusuStorage;\r\n    address _delegateContract;\r\n    bool _isActive = true;\r\n    \r\n\r\n    constructor (address payable serviceContract, \r\n                     address groupsContract,\r\n                    address esusuStorageContract) public OwnableService(serviceContract){\r\n        _groupsContract = IGroups(groupsContract);\r\n        _esusuStorage = IEsusuStorage(esusuStorageContract);\r\n    }\r\n\r\n    function UpdateDaiLendingService(address daiLendingServiceContractAddress)\r\n        external\r\n        onlyOwner\r\n        active\r\n    {\r\n        _iDaiLendingService = IDaiLendingService(\r\n            daiLendingServiceContractAddress\r\n        );\r\n    }\r\n\r\n    function UpdateEsusuAdapterWithdrawalDelegate(address delegateContract)\r\n        external\r\n        onlyOwner\r\n        active\r\n    {\r\n        _delegateContract = delegateContract;\r\n    }\r\n\r\n    /*\r\n        NOTE: startTimeInSeconds is the time at which when elapsed, any one can start the cycle\r\n        -   Creates a new EsusuCycle\r\n        -   Esusu Cycle can only be created by the owner of the group\r\n    */\r\n    \r\n    function CreateEsusu(uint256 groupId, uint256 depositAmount, uint256 payoutIntervalSeconds,uint256 startTimeInSeconds, address owner, uint256 maxMembers) external active onlyOwnerAndServiceContract {\r\n        //  Get Current EsusuCycleId\r\n        uint256 currentEsusuCycleId = _esusuStorage.GetEsusuCycleId();\r\n\r\n        // Get Group information by Id\r\n        (, , , address creatorAddress) = GetGroupInformationById(groupId);\r\n        \r\n        require(owner == creatorAddress, \"EsusuCycle can only be created by group owner\");\r\n        \r\n        _esusuStorage.CreateEsusuCycleMapping(groupId,depositAmount,payoutIntervalSeconds,startTimeInSeconds,owner,maxMembers);\r\n        \r\n        //  emit event\r\n        emit CreateEsusuCycleEvent(now, currentEsusuCycleId, depositAmount, owner, payoutIntervalSeconds,CurrencyEnum.Dai,\"Dai Stablecoin\",_esusuStorage.GetEsusuCycleState(currentEsusuCycleId));\r\n        \r\n    }\r\n\r\n    //  Join a particular Esusu Cycle\r\n    /*\r\n        - Check if the cycle ID is valid\r\n        - Check if the cycle is in Idle state, that is the only state a member can join\r\n        - Check if member is already in Cycle\r\n        - Ensure member has approved this contract to transfer the token on his/her behalf\r\n        - If member has enough balance, transfer the tokens to this contract else bounce\r\n        - Increment the total deposited amount in this cycle and total deposited amount for the member cycle struct\r\n        - Increment the total number of Members that have joined this cycle\r\n        - Take everyones deposited DAI from this Esusu Cycle and then invest into Lending protocol \r\n        - Track the yDai shares that belong to this cycle using the derived equation below for save/investment operation\r\n            - yDaiSharesPerCycle = Change in yDaiSharesForContract + Current yDai Shares in the cycle\r\n            - Change in yDaiSharesForContract = yDai.balanceOf(address(this) after save operation - yDai.balanceOf(address(this) after before operation\r\n    */\r\n    \r\n\r\n    function JoinEsusu(uint esusuCycleId, address member) public onlyOwnerAndServiceContract active {\r\n        //  Get Current EsusuCycleId\r\n        uint256 currentEsusuCycleId = _esusuStorage.GetEsusuCycleId();\r\n        \r\n        //  Check if the cycle ID is valid\r\n        require(esusuCycleId > 0 && esusuCycleId <= currentEsusuCycleId, \"Cycle ID must be within valid EsusuCycleId range\");\r\n        \r\n        //  Get the Esusu Cycle struct\r\n        \r\n        (uint256 CycleId, uint256 DepositAmount, uint256 CycleState,uint256 TotalMembers,uint256 MaxMembers) = _esusuStorage.GetEsusuCycleBasicInformation(esusuCycleId);\r\n        //  If cycle is not in Idle State, bounce \r\n        require( CycleState == uint(CycleStateEnum.Idle), \"Esusu Cycle must be in Idle State before you can join\");\r\n\r\n        //  If cycle is filled up, bounce \r\n\r\n        require(TotalMembers < MaxMembers, \"Esusu Cycle is filled up, you can't join\");\r\n        \r\n        //  check if member is already in this cycle \r\n        require(!_isMemberInCycle(member,esusuCycleId), \"Member can't join same Esusu Cycle more than once\");\r\n        \r\n        //  If user does not have enough Balance, bounce. For now we use Dai as default\r\n        uint256 memberBalance = _dai.balanceOf(member);\r\n        \r\n        require(memberBalance >= DepositAmount, \"Balance must be greater than or equal to Deposit Amount\");\r\n        \r\n        \r\n        //  If user balance is greater than or equal to deposit amount then transfer from member to this contract\r\n        //  NOTE: approve this contract to withdraw before transferFrom can work\r\n        _dai.safeTransferFrom(member, address(this), DepositAmount);\r\n        \r\n        //  Increment the total deposited amount in this cycle\r\n        uint256 totalAmountDeposited = _esusuStorage.IncreaseTotalAmountDepositedInCycle(CycleId,DepositAmount);\r\n        \r\n        \r\n       _esusuStorage.CreateMemberAddressToMemberCycleMapping(\r\n            member,\r\n            esusuCycleId\r\n        );\r\n\r\n        //  Increase TotalMembers count by 1\r\n        _esusuStorage.IncreaseTotalMembersInCycle(esusuCycleId);\r\n        //  Create the position of the member in the cycle\r\n        _esusuStorage.CreateMemberPositionMapping(CycleId, member);\r\n        //  Create mapping to track the Cycles a member belongs to by index and by ID\r\n        _esusuStorage.CreateMemberToCycleIndexToCycleIDMapping(member, CycleId);\r\n\r\n        //  Get  the Dai deposited for this cycle by this user: DepositAmount\r\n        \r\n        //  Get the balance of yDaiSharesForContract before save operation for this user\r\n        uint yDaiSharesForContractBeforeSave = _yDai.balanceOf(address(this));\r\n        \r\n        //  Invest the Dai in Yearn.\r\n        \r\n        //  NOTE: yDai will be sent to this contract\r\n        //  Transfer Dai from this contract to Dai lending adapter and then call a new save function that will not use transferFrom internally\r\n        //  Approve the DaiLendingAdapter so it can spend our Dai on our behalf \r\n        address daiLendingAdapterContractAddress = _iDaiLendingService.GetDaiLendingAdapterAddress();\r\n        _dai.approve(daiLendingAdapterContractAddress,DepositAmount);\r\n        \r\n        _iDaiLendingService.Save(DepositAmount);\r\n        \r\n        //  Get the balance of yDaiSharesForContract after save operation\r\n        uint yDaiSharesForContractAfterSave = _yDai.balanceOf(address(this));\r\n        \r\n        \r\n        //  Save yDai Total balanceShares for this member\r\n        uint sharesForMember = yDaiSharesForContractAfterSave.sub(yDaiSharesForContractBeforeSave);\r\n        \r\n        //  Increase TotalDeposits made to this contract \r\n\r\n        _esusuStorage.IncreaseTotalDeposits(DepositAmount);\r\n\r\n        //  Update Esusu Cycle State, total cycle duration, total shares  and  cycle start time, \r\n        _esusuStorage.UpdateEsusuCycleSharesDuringJoin(CycleId, sharesForMember);\r\n\r\n        //  emit event \r\n        emit JoinEsusuCycleEvent(now, member,TotalMembers, totalAmountDeposited,CycleId);\r\n    }\r\n\r\n    /*\r\n        - Check if the Id is a valid ID\r\n        - Check if the cycle is in Idle State\r\n        - Anyone  can start that cycle -\r\n        - Get the total number of members and then multiply by the time interval in seconds to get the total time this Cycle will last for\r\n        - Set the Cycle start time to now \r\n    */\r\n\r\n    \r\n    function StartEsusuCycle(uint esusuCycleId) public onlyOwnerAndServiceContract active{\r\n        \r\n        //  Get Current EsusuCycleId\r\n        uint256 currentEsusuCycleId = _esusuStorage.GetEsusuCycleId();\r\n        \r\n        //  Get Esusu Cycle Basic information\r\n        (uint256 CycleId, , uint256 CycleState,uint256 TotalMembers,) = _esusuStorage.GetEsusuCycleBasicInformation(esusuCycleId);\r\n\r\n        //  Get Esusu Cycle Total Shares\r\n        (uint256 EsusuCycleTotalShares) = _esusuStorage.GetEsusuCycleTotalShares(esusuCycleId);\r\n        \r\n        \r\n        //  Get Esusu Cycle Payout Interval \r\n        (uint256 EsusuCyclePayoutInterval) = _esusuStorage.GetEsusuCyclePayoutInterval(esusuCycleId);\r\n        \r\n        \r\n        //  If cycle ID is valid, else bonunce\r\n        require(esusuCycleId != 0 && esusuCycleId <= currentEsusuCycleId, \"Cycle ID must be within valid EsusuCycleId range\");\r\n        \r\n        require(now > _esusuStorage.GetEsusuCycleStartTime(esusuCycleId),\"Cycle can only be started when start time has elapsed\");\r\n\r\n        require(CycleState == uint(CycleStateEnum.Idle), \"Cycle can only be started when in Idle state\");\r\n           \r\n        require(TotalMembers >= 2, \"Cycle can only be started with 2 or more members\" );\r\n\r\n        //  Calculate Cycle LifeTime in seconds\r\n        uint256 toalCycleDuration = EsusuCyclePayoutInterval * TotalMembers;\r\n\r\n        //  Get all the dai deposited for this cycle\r\n        uint256 esusuCycleBalance = _esusuStorage.GetEsusuCycleTotalAmountDeposited(esusuCycleId);\r\n                \r\n        //  Update Esusu Cycle State, total cycle duration, total shares  and  cycle start time, \r\n        _esusuStorage.UpdateEsusuCycleDuringStart(CycleId,uint(CycleStateEnum.Active),toalCycleDuration,EsusuCycleTotalShares,now);\r\n        \r\n        //  emit event \r\n        emit StartEsusuCycleEvent(now,esusuCycleBalance, toalCycleDuration,\r\n                                    EsusuCycleTotalShares,esusuCycleId);\r\n    }\r\n  \r\n    function GetMemberCycleInfo(address memberAddress, uint256 esusuCycleId) active external view returns(uint256 CycleId, address MemberId, uint256 TotalAmountDepositedInCycle, uint256 TotalPayoutReceivedInCycle, uint256 memberPosition) {\r\n        \r\n        return _esusuStorage.GetMemberCycleInfo(memberAddress, esusuCycleId);\r\n    }\r\n\r\n    function GetEsusuCycle(uint256 esusuCycleId) external view returns(uint256 CycleId, uint256 DepositAmount, \r\n                                                            uint256 PayoutIntervalSeconds, uint256 CycleState, \r\n                                                            uint256 TotalMembers, uint256 TotalAmountDeposited, uint256 TotalShares, \r\n                                                            uint256 TotalCycleDurationInSeconds, uint256 TotalCapitalWithdrawn, uint256 CycleStartTimeInSeconds,\r\n                                                            uint256 TotalBeneficiaries, uint256 MaxMembers){\r\n        \r\n        return _esusuStorage.GetEsusuCycle(esusuCycleId);\r\n    }\r\n\r\n    function GetDaiBalance(address member)\r\n        external\r\n        view\r\n        active\r\n        returns (uint256)\r\n    {\r\n        return _dai.balanceOf(member);\r\n    }\r\n\r\n    function GetYDaiBalance(address member)\r\n        external\r\n        view\r\n        active\r\n        returns (uint256)\r\n    {\r\n        return _yDai.balanceOf(member);\r\n    }\r\n    \r\n    \r\n    \r\n    function GetTotalDeposits() active external view returns(uint)  {\r\n        return _esusuStorage.GetTotalDeposits();\r\n    }\r\n\r\n    \r\n    function GetCurrentEsusuCycleId() active external view returns(uint){\r\n        \r\n        return _esusuStorage.GetEsusuCycleId();\r\n    }\r\n    \r\n    function _isMemberInCycle(address memberAddress,uint256 esusuCycleId ) internal view returns(bool){\r\n        \r\n        return _esusuStorage.IsMemberInCycle(memberAddress,esusuCycleId);\r\n    }\r\n    \r\n    function _isMemberABeneficiaryInCycle(address memberAddress,uint256 esusuCycleId ) internal view returns(bool){\r\n\r\n        return _esusuStorage.GetMemberCycleToBeneficiaryMapping(esusuCycleId, memberAddress) > 0;\r\n    }\r\n    \r\n    function _isMemberInWithdrawnCapitalMapping(address memberAddress,uint256 esusuCycleId ) internal view returns(bool){\r\n        \r\n        return _esusuStorage.GetMemberWithdrawnCapitalInEsusuCycle(esusuCycleId, memberAddress) > 0;\r\n    }\r\n\r\n    /*\r\n        - Get the group index by name\r\n        - Get the group information by index\r\n    */\r\n    function GetGroupInformationByName(string calldata name) active external view returns (uint256 groupId, string memory groupName, string memory groupSymbol, address groupCreatorAddress){\r\n        \r\n        //  Get the group index by name\r\n        (, uint256 index ) = _groupsContract.getGroupIndexerByName(name);\r\n        \r\n        //  Get the group id by index and return \r\n\r\n        return _groupsContract.getGroupByIndex(index);\r\n    }\r\n\r\n    /*\r\n        - Get the group information by Id\r\n    */\r\n    function GetGroupInformationById(uint256 id) active public view returns (uint256 groupId, string memory groupName, string memory groupSymbol, address groupCreatorAddress){\r\n        \r\n        //  Get the group id by index and return \r\n\r\n        return _groupsContract.getGroupById(id);\r\n    }\r\n\r\n    /*\r\n        - Creates the group\r\n        - returns the ID and other information\r\n    */\r\n    function CreateGroup(string calldata name, string calldata symbol, address groupCreator) active external {\r\n        \r\n           _groupsContract.createGroup(name,symbol,groupCreator);\r\n           \r\n    }\r\n    \r\n    function TransferYDaiSharesToWithdrawalDelegate(uint256 amount) external active onlyOwnerAndDelegateContract {\r\n        \r\n        _yDai.safeTransfer(_delegateContract, amount);\r\n    }\r\n\r\n    function DepricateContract(\r\n        address newEsusuAdapterContract,\r\n        string calldata reason\r\n    ) external onlyOwner {\r\n        //  set _isActive to false\r\n        _isActive = false;\r\n        \r\n        uint256 yDaiSharesBalance = _yDai.balanceOf(address(this));\r\n\r\n        //  Send yDai shares to the new contract and halt operations of this contract\r\n        _yDai.safeTransfer(newEsusuAdapterContract, yDaiSharesBalance);\r\n        \r\n        DepricateContractEvent(now, owner, reason, yDaiSharesBalance);\r\n\r\n    }\r\n\r\n    modifier onlyOwnerAndDelegateContract() {\r\n        require(\r\n            msg.sender == owner || msg.sender == _delegateContract,\r\n            \"Unauthorized access to contract\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier active(){\r\n        require(_isActive, \"This contract is depricated, use new version of contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n"
    },
    "EsusuAdapterWithdrawalDelegate.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IYDaiToken.sol\";\r\nimport \"./IDaiLendingService.sol\";\r\nimport \"./OwnableService.sol\";\r\nimport \"./ITreasury.sol\";\r\nimport \"./ISavingsConfig.sol\";\r\nimport \"./ISavingsConfigSchema.sol\";\r\nimport \"./IRewardConfig.sol\";\r\nimport \"./IXendToken.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IEsusuStorage.sol\";\r\nimport \"./IEsusuAdapter.sol\";\r\nimport \"./SafeERC20.sol\";\r\n\r\n\r\ncontract EsusuAdapterWithdrawalDelegate is OwnableService, ISavingsConfigSchema {\r\n\r\n        using SafeMath for uint256;\r\n\r\n        using SafeERC20 for IERC20; \r\n\r\n        using SafeERC20 for IYDaiToken; \r\n\r\n        event ROIWithdrawalEvent\r\n        (\r\n            uint256 date,\r\n            address indexed member,  \r\n            uint256 cycleId,\r\n            uint256 amount       \r\n        );\r\n\r\n        event CapitalWithdrawalEvent\r\n        (\r\n            uint256 date,\r\n            address indexed member,  \r\n            uint256 cycleId,\r\n            uint256 amount\r\n        );\r\n\r\n        event XendTokenReward (\r\n          uint256 date,\r\n          address indexed member,\r\n          uint256 cycleId,\r\n          uint256 amount\r\n        );\r\n\r\n        enum CycleStateEnum{\r\n            Idle,               // Cycle has just been created and members can join in this state\r\n            Active,             // Cycle has started and members can take their ROI\r\n            Expired,            // Cycle Duration has elapsed and members can withdraw their capital as well as ROI\r\n            Inactive            // Total beneficiaries is equal to Total members, so all members have withdrawn their Capital and ROI\r\n        }\r\n\r\n        event DepricateContractEvent(        \r\n        uint256 date,\r\n        address owner, \r\n        string reason\r\n        );\r\n\r\n        ITreasury immutable _treasuryContract;\r\n        ISavingsConfig immutable _savingsConfigContract;\r\n        IRewardConfig immutable _rewardConfigContract;\r\n        IXendToken  immutable _xendTokenContract;\r\n        string _feeRuleKey;\r\n        uint256 _groupCreatorRewardPercent;\r\n\r\n        IEsusuStorage immutable _esusuStorage;\r\n        IEsusuAdapter immutable _esusuAdapterContract;\r\n        IERC20 immutable _dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n        IYDaiToken immutable _yDai = IYDaiToken(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\r\n        IDaiLendingService _iDaiLendingService;\r\n        bool _isActive = true;\r\n        uint256 _feePrecision = 10;     //  This determines the lower limit of the fee to be charged. With precsion of 10, it means our fee can have a precision of 0.1% and above\r\n        uint256 _totalTokenReward;      //  This tracks the total number of token rewards distributed on the esusu \r\n\r\n        constructor(address payable serviceContract, address esusuStorageContract, address esusuAdapterContract,\r\n                    string memory feeRuleKey, address treasuryContract, address rewardConfigContract, address xendTokenContract, address savingsConfigContract)public OwnableService(serviceContract){\r\n\r\n            _esusuStorage = IEsusuStorage(esusuStorageContract);\r\n            _esusuAdapterContract = IEsusuAdapter(esusuAdapterContract);\r\n            _feeRuleKey = feeRuleKey;\r\n            _treasuryContract = ITreasury(treasuryContract);\r\n            _rewardConfigContract = IRewardConfig(rewardConfigContract);\r\n            _xendTokenContract = IXendToken(xendTokenContract);\r\n            _savingsConfigContract = ISavingsConfig(savingsConfigContract);\r\n\r\n        }\r\n\r\n        function UpdateDaiLendingService(address daiLendingServiceContractAddress) active onlyOwner external {\r\n            _iDaiLendingService = IDaiLendingService(daiLendingServiceContractAddress);\r\n        }\r\n        function setGroupCreatorRewardPercent (uint percent) external onlyOwner {\r\n                _groupCreatorRewardPercent = percent;\r\n        }\r\n        function UpdateFeePrecision(uint256 feePrecision) onlyOwner external{\r\n            _feePrecision = feePrecision;\r\n        }\r\n\r\n        function GetTotalTokenRewardDistributed() external view returns(uint256){\r\n            return _totalTokenReward;\r\n        }\r\n        /*\r\n            This function allows members to withdraw their capital from the esusu cycle\r\n\r\n            - Check if member can withdraw capital\r\n            - Withdraw capital and increase TotalCapitalWithdrawn\r\n                - Get the total balanceShares from the calling contract\r\n                - Withdraw all the money from dai lending service\r\n                - Send the member's deposited amount to his/her address\r\n                - re-invest the remaining dai until all members have taken their capital, then we set the cycle inactive\r\n            - Reward member with Xend Tokens\r\n            - Add this member to the EsusuCycleCapitalMapping\r\n            - Check if TotalCapitalWithdrawn == TotalAmountDeposited && if TotalMembers == TotalBeneficiaries, if yes, set the Cycle to Inactive\r\n\r\n        */        \r\n        function WithdrawCapitalFromEsusuCycle(uint256 esusuCycleId, address member) external active onlyOwnerAndServiceContract {\r\n\r\n        //  Get Esusu Cycle Basic information\r\n        (uint256 CycleId, uint256 DepositAmount, ,uint256 TotalMembers,) = _esusuStorage.GetEsusuCycleBasicInformation(esusuCycleId);\r\n        \r\n        require(_isMemberEligibleToWithdrawCapital(esusuCycleId,member), \"member is not eligible to withdraw\");        \r\n        //  Add member to capital withdrawn mapping\r\n\r\n        //  Get the current yDaiSharesPerCycle and call the WithdrawByShares function on the daiLending Service\r\n        uint256 yDaiSharesPerCycle = _esusuStorage.GetEsusuCycleTotalShares(esusuCycleId);\r\n\r\n\r\n        //  transfer yDaiShares from the adapter contract to here\r\n        _esusuAdapterContract.TransferYDaiSharesToWithdrawalDelegate(yDaiSharesPerCycle);  \r\n\r\n        //  Get the yDaiSharesForContractBeforeWithdrawal \r\n        uint256 yDaiSharesForContractBeforeWithdrawal = _yDai.balanceOf(address(this));\r\n        //  Withdraw the Dai. At this point, we have withdrawn  Dai Capital deposited by this member for this cycle and we will now transfer the dai capital to the member\r\n        address daiLendingAdapterContractAddress = _iDaiLendingService.GetDaiLendingAdapterAddress();\r\n\r\n        _yDai.approve(daiLendingAdapterContractAddress,yDaiSharesPerCycle);\r\n\r\n        _iDaiLendingService.WithdrawByShares(DepositAmount,yDaiSharesPerCycle);\r\n        \r\n        //  Now the Dai is in this contract, transfer it to the member \r\n        _dai.safeTransfer(member, DepositAmount);\r\n        \r\n        //  Reward member with Xend Tokens\r\n        _rewardMember(_esusuStorage.GetEsusuCycleDuration(esusuCycleId),member,DepositAmount,CycleId);\r\n        \r\n        //  Get the yDaiSharesForContractAfterWithdrawal \r\n        uint256 yDaiSharesForContractAfterWithdrawal = _yDai.balanceOf(address(this));\r\n        \r\n        require(yDaiSharesForContractBeforeWithdrawal > yDaiSharesForContractAfterWithdrawal, \"yDai shares before withdrawal must be greater !!!\");\r\n        \r\n        //  Update the total balanceShares for this cycle \r\n        uint256 cycleTotalShares = yDaiSharesPerCycle.sub(yDaiSharesForContractBeforeWithdrawal.sub(yDaiSharesForContractAfterWithdrawal));\r\n\r\n        //  Add this member to the CycleToMemberWithdrawnCapitalMapping\r\n\r\n        //  Create Member Capital Mapping\r\n        _esusuStorage.CreateMemberCapitalMapping(esusuCycleId,member);        \r\n        //  Increase total capital withdrawn \r\n        uint256 TotalCapitalWithdrawnInCycle = _esusuStorage.GetEsusuCycleTotalCapitalWithdrawn(CycleId).add(DepositAmount);\r\n        \r\n        //   Check if TotalCapitalWithdrawn == TotalAmountDeposited && if TotalMembers == TotalBeneficiaries, if yes, set the Cycle to Inactive\r\n\r\n        if(TotalCapitalWithdrawnInCycle == _esusuStorage.GetEsusuCycleTotalAmountDeposited(esusuCycleId) && TotalMembers == _esusuStorage.GetEsusuCycleTotalBeneficiaries(esusuCycleId)){\r\n\r\n            _esusuStorage.UpdateEsusuCycleState(esusuCycleId, uint(CycleStateEnum.Inactive));\r\n\r\n            //  Since this cycle is inactive, send whatever Total shares Dai equivalent that is left to our treasury contract\r\n\r\n            //  Withdraw DAI equivalent fof TotalShares\r\n\r\n            _yDai.approve(daiLendingAdapterContractAddress,cycleTotalShares);\r\n            _iDaiLendingService.WithdrawBySharesOnly(cycleTotalShares);\r\n                   \r\n            //  Now the Dai is in this contract, transfer it to the treasury contract \r\n            uint256 balance = _dai.balanceOf(address(this));\r\n\r\n            if(balance>0){\r\n                _dai.approve(address(_treasuryContract),balance);\r\n                _treasuryContract.depositToken(address(_dai));\r\n            }\r\n\r\n        }else{\r\n\r\n            //  Since we have not withdrawn all the capital, then Send the yDai shares back to the adapter contract,\r\n            //  this contract should not hold any coins\r\n            _yDai.safeTransfer(address(_esusuAdapterContract),_yDai.balanceOf(address(this)));\r\n\r\n        }\r\n\r\n        //  Update Esusu Cycle Information For Capital Withdrawal\r\n        _esusuStorage.UpdateEsusuCycleDuringCapitalWithdrawal(CycleId, cycleTotalShares,TotalCapitalWithdrawnInCycle);\r\n\r\n        //  emit event\r\n        emit CapitalWithdrawalEvent(now, member, esusuCycleId,DepositAmount);\r\n\r\n    }\r\n\r\n      /*\r\n        Assumption:\r\n        - We assume even distribution of Overall accumulated ROI among members of the group when a member places a withdrawal request at a time inverval\r\n          greater than members in the previous position who have not placed a withdrawal request.\r\n\r\n        This function sends all ROI generated within an Esusu Cycle Payout Interval to a particular member\r\n\r\n        - Check if member is eligible to withdraw\r\n        - Get the price per full share from Dai Lending Service\\\r\n        - Get overall DAI => yDai balanceShares * pricePerFullShare (NOTE: value is in 1e36)\r\n        - Get ROI => overall Dai - Total Deposited Dai in this esusu cycle\r\n        - Implement our derived equation to determine what ROI will be allocated to this member who is withdrawing\r\n        - Deduct fees from Member's ROI\r\n        - Equation Parameters\r\n            - Ta => Total available time in seconds\r\n            - Bt => Total Time Interval for beneficiaries in this cycle in seconds\r\n            - Tnow => Current Time in seconds\r\n            - T => Cycle PayoutIntervalSeconds\r\n            - Troi => Total accumulated ROI\r\n            - Mroi => Member ROI    \r\n                    \r\n            Equations - Update from CertiK Audit\r\n            - Bt = number of beneficiaries\r\n            - Ta = Total Members In Cycle - Bt\r\n            - Troi = ((balanceShares * pricePerFullShare ) - TotalDeposited - TotalCapitalWithdrawn)\r\n            - Mroi = (Total accumulated ROI at Tnow) / (Ta) \r\n        NOTE: As members withdraw their funds, the yDai balanceShares will change and we will be updating the TotalShares with this new value\r\n        at all times till TotalShares becomes approximately zero when all amounts have been withdrawn including capital invested\r\n\r\n        - Track the yDai shares that belong to this cycle using the derived equation below for withdraw operation\r\n            - yDaiSharesPerCycle = Current yDai Shares in the cycle - Change in yDaiSharesForContract\r\n            - Change in yDaiSharesForContract = yDai.balanceOf(address(this)) before withdraw operation - yDai.balanceOf(address(this)) after withdraw operation\r\n\r\n    */\r\n        function WithdrawROIFromEsusuCycle(uint256 esusuCycleId, address member)  external active onlyOwnerAndServiceContract {\r\n        \r\n        uint256 totalMembers = _esusuStorage.GetTotalMembersInCycle(esusuCycleId);\r\n\r\n        require(_isMemberEligibleToWithdrawROI(esusuCycleId,member), \"Member cannot withdraw at this time\");\r\n        \r\n        uint256 currentBalanceShares = _esusuStorage.GetEsusuCycleTotalShares(esusuCycleId);\r\n        \r\n        (,uint256 depositAmount,,,) = _esusuStorage.GetEsusuCycleBasicInformation(esusuCycleId);\r\n\r\n        // uint256 pricePerFullShare = _iDaiLendingService.GetPricePerFullShare();\r\n        \r\n        uint256 overallGrossDaiBalance = currentBalanceShares.mul(_iDaiLendingService.GetPricePerFullShare()).div(1e18);\r\n\r\n        uint256 CycleId = esusuCycleId;\r\n\r\n        // address memberAddress = member;\r\n\r\n        //  Implement our derived equation to get the amount of Dai to transfer to the member as ROI\r\n        uint256 Bt = _esusuStorage.GetEsusuCycleTotalBeneficiaries(esusuCycleId);\r\n\r\n        uint256 Ta = totalMembers.sub(Bt);\r\n        uint256 Troi = 0;\r\n        \r\n        //  If ROI has not been earned then return ROI as zero to prevent subtraction overflow error.\r\n        if(overallGrossDaiBalance > (depositAmount.mul(totalMembers)).sub(_esusuStorage.GetEsusuCycleTotalCapitalWithdrawn(esusuCycleId))){\r\n            \r\n            Troi = overallGrossDaiBalance.sub((depositAmount.mul(totalMembers)).sub(_esusuStorage.GetEsusuCycleTotalCapitalWithdrawn(esusuCycleId)));\r\n        }else{\r\n            revert(\"No ROI Generated within timeframe !!!\");\r\n        }\r\n        uint Mroi = Troi.div(Ta);\r\n\r\n        //  Get the current yDaiSharesPerCycle and call the WithdrawByShares function on the daiLending Service\r\n        // uint yDaiSharesPerCycle = currentBalanceShares;\r\n\r\n        //  transfer yDaiShares from the adapter contract to here\r\n        _esusuAdapterContract.TransferYDaiSharesToWithdrawalDelegate(currentBalanceShares);\r\n\r\n        //  Get the yDaiSharesForContractBeforeWithdrawal\r\n        uint yDaiSharesForContractBeforeWithdrawal = _yDai.balanceOf(address(this));\r\n\r\n        //  Withdraw the Dai. At this point, we have withdrawn the Dai ROI for this member and the dai ROI is in this contract, we will now transfer it to the member\r\n        address daiLendingAdapterContractAddress = _iDaiLendingService.GetDaiLendingAdapterAddress();\r\n\r\n        //  Before this function is called, we will have triggered a transfer of yDaiShares from the adapter to this withdrawal contract\r\n        _yDai.approve(daiLendingAdapterContractAddress,currentBalanceShares);\r\n        _iDaiLendingService.WithdrawByShares(Mroi,currentBalanceShares);\r\n\r\n\r\n        //  Now the Dai is in this contract, transfer the net ROI to the member and fee to treasury contract\r\n        sendROI(Mroi,member,CycleId);\r\n          \r\n        //  Get the yDaiSharesForContractAfterWithdrawal \r\n        uint256 yDaiSharesForContractAfterWithdrawal = _yDai.balanceOf(address(this));\r\n        \r\n        require(yDaiSharesForContractBeforeWithdrawal > yDaiSharesForContractAfterWithdrawal, \"yDai shares before withdrawal must be greater !!!\");\r\n        \r\n        //  Update the total balanceShares for this cycle \r\n        uint256 totalShares = currentBalanceShares.sub(yDaiSharesForContractBeforeWithdrawal.sub(yDaiSharesForContractAfterWithdrawal));\r\n        \r\n        //  Increase total number of beneficiaries by 1\r\n        uint256 totalBeneficiaries = _esusuStorage.GetEsusuCycleTotalBeneficiaries(CycleId).add(1);\r\n        \r\n\r\n        /*\r\n\r\n            - Check whether the TotalCycleDuration has elapsed, if that is the case then this cycle has expired\r\n            - If cycle has expired then we move the left over yDai to treasury\r\n        */\r\n\r\n        if(now > _esusuStorage.GetEsusuCycleDuration(CycleId)){\r\n\r\n            _esusuStorage.UpdateEsusuCycleState(CycleId, uint(CycleStateEnum.Expired));\r\n        }\r\n\r\n        //  Update Esusu Cycle During ROI withdrawal\r\n        _esusuStorage.UpdateEsusuCycleDuringROIWithdrawal(CycleId, totalShares,totalBeneficiaries);\r\n\r\n        //  Send the yDai shares back to the adapter contract, this contract should not hold any coins\r\n        _yDai.safeTransfer(address(_esusuAdapterContract),_yDai.balanceOf(address(this)));\r\n        \r\n        //  emit event \r\n        _emitROIWithdrawalEvent(member,Mroi,CycleId);\r\n    }\r\n\r\n    \r\n    /*\r\n        This gets the fee percentage from the fee contract, deducts the fee and sends to treasury contract\r\n\r\n        For now let us assume fee percentage is 0.1%\r\n        - Get the fee\r\n        - Send the net ROI in dai to member\r\n        - Send the fee to the treasury\r\n        - Add member to beneficiary mapping\r\n    */\r\n    function sendROI(uint256 Mroi, address memberAddress, uint256 esusuCycleId) internal{       \r\n        //  get feeRate from fee contract\r\n\r\n        (, , uint256 exact, , )  = _savingsConfigContract.getRuleSet(_feeRuleKey);\r\n        /**\r\n            fee = ( (exact/precision)/(100) * roi)\r\n         */\r\n\r\n        uint256 feeRate = exact; \r\n        uint256 fee = Mroi.mul(feeRate).div(_feePrecision.mul(100));\r\n        \r\n        //  Deduct the fee\r\n        uint256 memberROINet = Mroi.sub(fee); \r\n        \r\n\r\n         //  Add member to beneficiary mapping\r\n\r\n        _esusuStorage.CreateEsusuCycleToBeneficiaryMapping(esusuCycleId,memberAddress,memberROINet); \r\n\r\n\r\n        //  Send ROI to member \r\n        _dai.safeTransfer(memberAddress, memberROINet);\r\n\r\n        uint256 creatorReward =  fee.mul(_groupCreatorRewardPercent).div(_feePrecision.mul(100));\r\n\r\n        uint256 finalFee = fee.sub(creatorReward);\r\n        //  Send deducted fee to treasury\r\n        //  Approve the treasury contract\r\n        if(finalFee>0){\r\n            _dai.approve(address(_treasuryContract),finalFee);\r\n            _treasuryContract.depositToken(address(_dai));\r\n        }\r\n\r\n        address cycleOwner = _esusuStorage.GetCycleOwner(esusuCycleId);\r\n        \r\n        _dai.safeTransfer(cycleOwner, creatorReward);\r\n\r\n\r\n    }\r\n\r\n        /*\r\n        This function checks whether the user can withdraw at the time at which the user is making this call\r\n\r\n        - Check if cycle is valid\r\n        - Check if cycle is in active state\r\n        - Check if member is in cycle\r\n        - Check if member is a beneficiary\r\n        - Calculate member withdrawal time\r\n        - Check if member can withdraw at this time\r\n    */\r\n    function IsMemberEligibleToWithdrawROI(uint256 esusuCycleId, address member) active external view returns(bool){\r\n        \r\n        return _isMemberEligibleToWithdrawROI(esusuCycleId,member);\r\n\r\n    }\r\n\r\n    /*\r\n        This function checks whether the user can withdraw capital after the Esusu Cycle is complete.\r\n\r\n        The cycle must be in an inactive state before capital can be withdrawn\r\n    */\r\n    function IsMemberEligibleToWithdrawCapital(uint256 esusuCycleId, address member) active external view returns(bool){\r\n        \r\n        return _isMemberEligibleToWithdrawCapital(esusuCycleId,member);\r\n\r\n    }\r\n    \r\n    function _isMemberEligibleToWithdrawROI(uint256 esusuCycleId, address member) internal view returns(bool){\r\n        \r\n        //  Get Current EsusuCycleId\r\n        uint256 currentEsusuCycleId = _esusuStorage.GetEsusuCycleId();        \r\n        \r\n        require(esusuCycleId != 0 && esusuCycleId <= currentEsusuCycleId, \"Cycle ID must be within valid EsusuCycleId range\");\r\n        \r\n        uint256 cycleState = _esusuStorage.GetEsusuCycleState(esusuCycleId);\r\n        \r\n\r\n\r\n        require(cycleState == uint(CycleStateEnum.Active) || cycleState == uint(CycleStateEnum.Expired), \"Cycle must be in active or expired state\");\r\n\r\n        require(_isMemberInCycle(member,esusuCycleId), \"Member is not in this cycle\");\r\n        \r\n        require(!_isMemberABeneficiaryInCycle(member,esusuCycleId), \"Member is already a beneficiary\");\r\n        \r\n        uint256 memberWithdrawalTime = _calculateMemberWithdrawalTime(esusuCycleId,member); \r\n        \r\n        return now > memberWithdrawalTime;\r\n        \r\n    }\r\n    \r\n    function _isMemberEligibleToWithdrawCapital(uint256 esusuCycleId, address member) internal view returns(bool){\r\n        \r\n        //  Get Current EsusuCycleId\r\n        uint256 currentEsusuCycleId = _esusuStorage.GetEsusuCycleId();\r\n        \r\n        require(esusuCycleId != 0 && esusuCycleId <= currentEsusuCycleId, \"Cycle ID must be within valid EsusuCycleId range\");\r\n        \r\n        uint256 cycleState = _esusuStorage.GetEsusuCycleState(esusuCycleId);\r\n        \r\n        require(cycleState == uint(CycleStateEnum.Expired), \"Cycle must be in Expired state for you to withdraw capital\");\r\n\r\n        require(_isMemberInCycle(member,esusuCycleId), \"Member is not in this cycle\");\r\n        \r\n        require(_isMemberABeneficiaryInCycle(member,esusuCycleId), \"Member must be a beneficiary before you can withdraw capital\");\r\n\r\n        require(!_isMemberInWithdrawnCapitalMapping(member,esusuCycleId), \"Member can't withdraw capital twice\");\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    function _isMemberInCycle(address memberAddress,uint256 esusuCycleId ) internal view returns(bool){\r\n        \r\n        return _esusuStorage.IsMemberInCycle(memberAddress,esusuCycleId);\r\n    }\r\n    \r\n    function _isMemberABeneficiaryInCycle(address memberAddress,uint256 esusuCycleId ) internal view returns(bool){\r\n        \r\n        uint256 amount = _esusuStorage.GetMemberCycleToBeneficiaryMapping(esusuCycleId, memberAddress);\r\n\r\n        //  If member has received money from this cycle, the amount recieved should be greater than 0\r\n\r\n        return amount > 0;\r\n    }\r\n    \r\n    function _isMemberInWithdrawnCapitalMapping(address memberAddress,uint256 esusuCycleId ) internal view returns(bool){\r\n        \r\n        uint256 amount = _esusuStorage.GetMemberWithdrawnCapitalInEsusuCycle(esusuCycleId, memberAddress);\r\n        //  If member has withdrawn capital from this cycle, the amount recieved should be greater than 0\r\n        return amount > 0;\r\n    }\r\n    \r\n    function _calculateMemberWithdrawalTime(uint256 cycleId, address member) internal view returns(uint){\r\n      \r\n        return _esusuStorage.CalculateMemberWithdrawalTime(cycleId,member);\r\n    }\r\n    \r\n    function _emitROIWithdrawalEvent(address member,uint256 Mroi, uint256 esusuCycleId) internal{\r\n\r\n        emit ROIWithdrawalEvent(now, member,esusuCycleId,Mroi);\r\n    }\r\n\r\n    function _emitXendTokenReward(address member, uint amount, uint esusuCycleId) internal {\r\n      emit XendTokenReward(now, member, esusuCycleId, amount);\r\n    }\r\n\r\n    function _rewardMember(uint totalCycleTime, address member, uint amount, uint esusuCycleId) internal {\r\n\r\n        uint256 reward = _rewardConfigContract.CalculateEsusuReward(totalCycleTime, amount);\r\n\r\n        // get Xend Token contract and mint token for member\r\n        _xendTokenContract.mint(payable(member), reward);\r\n\r\n        //  update the xend token reward for the member\r\n        _esusuStorage.UpdateMemberToXendTokeRewardMapping(member,reward);\r\n\r\n        //  increase the total number of xend token rewards distributed\r\n        _totalTokenReward = _totalTokenReward.add(reward);\r\n\r\n        _emitXendTokenReward(member, reward, esusuCycleId);\r\n    }\r\n\r\n    function DepricateContract(string calldata reason) external onlyOwner{\r\n        //  set _isActive to false\r\n        _isActive = false;\r\n\r\n        DepricateContractEvent(now, owner, reason);\r\n\r\n    }\r\n\r\n    modifier active(){\r\n        require(_isActive == true, \"This contract is depricated, use new version of contract\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "EsusuService.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\nimport \"./EsusuAdapter.sol\";\r\nimport \"./EsusuAdapterWithdrawalDelegate.sol\";\r\n\r\n\r\ncontract EsusuService{\r\n\r\n    address _owner;\r\n    EsusuAdapter _esusuAdapter;\r\n    EsusuAdapterWithdrawalDelegate _esusuAdapterWithdrawalDelegate;\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function TransferOwnership(address account) onlyOwner() external{\r\n        _owner = account;\r\n    }\r\n\r\n    function UpdateAdapter(address adapterAddress) onlyOwner() external{\r\n        _esusuAdapter = EsusuAdapter(adapterAddress);\r\n    }\r\n\r\n    function UpdateAdapterWithdrawalDelegate(address delegateAddress) onlyOwner() external{\r\n        _esusuAdapterWithdrawalDelegate = EsusuAdapterWithdrawalDelegate(delegateAddress);\r\n    }\r\n    \r\n    function GetGroupInformationByName(string calldata name) external view returns (uint256 groupId, string memory groupName, string memory groupSymbol, address groupCreatorAddress){\r\n        \r\n\r\n        return _esusuAdapter.GetGroupInformationByName(name);\r\n    }\r\n\r\n    function GetEsusuAdapterAddress() external view returns (address){\r\n        return address(_esusuAdapter);\r\n    }\r\n\r\n\r\n    function CreateGroup(string calldata name, string calldata symbol) external {\r\n\r\n           _esusuAdapter.CreateGroup(name,symbol,msg.sender);\r\n\r\n    }\r\n    \r\n    function CreateEsusu(uint256 groupId, uint256 depositAmount, uint256 payoutIntervalSeconds,uint256 startTimeInSeconds,uint256 maxMembers) external {\r\n        require(depositAmount > 0, \"Deposit Amount Can't Be Zero\");\r\n        _esusuAdapter.CreateEsusu(groupId,depositAmount,payoutIntervalSeconds,startTimeInSeconds,msg.sender,maxMembers);\r\n    }\r\n\r\n    /*\r\n        NOTE: member must approve _esusuAdapter to transfer deposit amount on his/her behalf\r\n    */\r\n    function JoinEsusu(uint256 esusuCycleId) external {\r\n        _esusuAdapter.JoinEsusu(esusuCycleId,msg.sender);\r\n    }\r\n\r\n\r\n    /*\r\n        This function returns information about a member in an esusu Cycle\r\n    */\r\n    function GetMemberCycleInfo(address memberAddress, uint256 esusuCycleId) \r\n                                external view returns(uint256 CycleId, address MemberId, uint256 TotalAmountDepositedInCycle, \r\n                                uint256 TotalPayoutReceivedInCycle, uint256 memberPosition){\r\n        \r\n        return _esusuAdapter.GetMemberCycleInfo(memberAddress,esusuCycleId);\r\n    }\r\n    \r\n     function GetEsusuCycle(uint256 esusuCycleId) external view returns(uint256 CycleId, uint256 DepositAmount, \r\n                                                            uint256 PayoutIntervalSeconds, uint256 CycleState, \r\n                                                            uint256 TotalMembers, uint256 TotalAmountDeposited, uint256 TotalShares, \r\n                                                            uint256 TotalCycleDurationInSeconds, uint256 TotalCapitalWithdrawn, uint256 CycleStartTimeInSeconds,\r\n                                                            uint256 TotalBeneficiaries, uint256 MaxMembers){\r\n    \r\n        return _esusuAdapter.GetEsusuCycle(esusuCycleId);                                                        \r\n    }\r\n    \r\n    function StartEsusuCycle(uint256 esusuCycleId) external {\r\n        _esusuAdapter.StartEsusuCycle(esusuCycleId);\r\n    }\r\n    \r\n    function WithdrawROIFromEsusuCycle(uint256 esusuCycleId) external{\r\n        _esusuAdapterWithdrawalDelegate.WithdrawROIFromEsusuCycle(esusuCycleId,msg.sender);\r\n    }\r\n    \r\n    function WithdrawCapitalFromEsusuCycle(uint256 esusuCycleId) external{\r\n        _esusuAdapterWithdrawalDelegate.WithdrawCapitalFromEsusuCycle(esusuCycleId,msg.sender);\r\n    }\r\n    \r\n    function IsMemberEligibleToWithdrawROI(uint256 esusuCycleId, address member) external view returns(bool){\r\n        return _esusuAdapterWithdrawalDelegate.IsMemberEligibleToWithdrawROI(esusuCycleId,member);\r\n    }\r\n    \r\n    function IsMemberEligibleToWithdrawCapital(uint256 esusuCycleId, address member) external view returns(bool){\r\n        return _esusuAdapterWithdrawalDelegate.IsMemberEligibleToWithdrawCapital(esusuCycleId,member);\r\n    }\r\n\r\n    function GetCurrentEsusuCycleId() external view returns(uint){\r\n        return _esusuAdapter.GetCurrentEsusuCycleId();\r\n    }\r\n\r\n    function GetTotalDeposits() external view returns(uint)  {\r\n        return _esusuAdapter.GetTotalDeposits();\r\n    }\r\n    modifier onlyOwner(){\r\n        require(_owner == msg.sender, \"Only owner can make this call\");\r\n        _;\r\n    }\r\n\r\n\r\n}\r\n"
    },
    "IDaiLendingService.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\ninterface IDaiLendingService {\r\n    function GetPricePerFullShare() external view returns (uint256);\r\n\r\n    function Save(uint256 amount) external;\r\n\r\n    function UserShares() external view returns (uint256);\r\n\r\n    function UserDaiBalance() external view returns (uint256);\r\n\r\n    function GetUserGrossRevenue() external view returns (uint256);\r\n\r\n    function GetNetRevenue() external view returns (uint256);\r\n\r\n    function GetUserDepositedDaiBalance() external view returns (uint256);\r\n\r\n    function Withdraw(uint256 amount) external;\r\n    \r\n    function WithdrawByShares(uint256 amount, uint256 sharesAmount) external;\r\n    \r\n    function GetDaiLendingAdapterAddress() external view returns (address);\r\n    \r\n    function WithdrawBySharesOnly(uint sharesAmount) external;\r\n}"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"
    },
    "IEsusuAdapter.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\ninterface IEsusuAdapter {\r\n    function TransferYDaiSharesToWithdrawalDelegate(uint amount) external;\r\n\r\n}"
    },
    "IEsusuStorage.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\ninterface IEsusuStorage {\r\n    /* Getters */\r\n    function GetEsusuCycleId() external view returns(uint);\r\n\r\n    function GetEsusuCycle(uint esusuCycleId) external view returns(uint CycleId, uint DepositAmount,\r\n                                                            uint PayoutIntervalSeconds, uint CycleState,\r\n                                                            uint TotalMembers, uint TotalAmountDeposited, uint TotalShares,\r\n                                                            uint TotalCycleDurationInSeconds, uint TotalCapitalWithdrawn, uint CycleStartTimeInSeconds,\r\n                                                            uint TotalBeneficiaries, uint MaxMembers);\r\n    function GetEsusuCycleBasicInformation(uint esusuCycleId) external view returns(uint CycleId, uint DepositAmount, uint CycleState,uint TotalMembers,uint MaxMembers);\r\n    function GetEsusuCycleTotalShares(uint esusuCycleId) external view returns(uint TotalShares);\r\n    function GetEsusuCycleStartTime(uint esusuCycleId)external view returns(uint EsusuCycleStartTime);\r\n    function GetEsusuCyclePayoutInterval(uint esusuCycleId)external view returns(uint EsusuCyclePayoutInterval);\r\n    function GetEsusuCycleTotalAmountDeposited(uint esusuCycleId)external view returns(uint EsusuCycleTotalAmountDeposited);\r\n    function GetEsusuCycleDuration(uint esusuCycleId)external view returns(uint EsusuCycleDuration);\r\n    function GetEsusuCycleTotalCapitalWithdrawn(uint esusuCycleId)external view returns(uint EsusuCycleTotalCapitalWithdrawn);\r\n    function GetEsusuCycleTotalBeneficiaries(uint esusuCycleId)external view returns(uint EsusuCycleTotalBeneficiaries);\r\n\r\n    function GetCycleOwner(uint esusuCycleId)external view returns(address EsusuCycleOwner);\r\n    function GetMemberCycleInfo(address memberAddress, uint esusuCycleId) external view returns(uint CycleId, address MemberId, uint TotalAmountDepositedInCycle, uint TotalPayoutReceivedInCycle, uint memberPosition);\r\n    function GetMemberWithdrawnCapitalInEsusuCycle(uint esusuCycleId,address memberAddress) external view returns (uint);\r\n    function GetMemberCycleToBeneficiaryMapping(uint esusuCycleId,address memberAddress) external view returns(uint);\r\n    function IsMemberInCycle(address memberAddress,uint esusuCycleId ) external view returns(bool);\r\n    function CalculateMemberWithdrawalTime(uint cycleId, address member) external view returns(uint);\r\n    function GetTotalDeposits() external view returns (uint);\r\n    function GetEsusuCycleState(uint esusuCycleId) external view returns (uint);\r\n    function GetTotalMembersInCycle(uint esusuCycleId)external view returns(uint TotalMembers); \r\n    function GetEsusuCycleTotalSharesAtStart(uint esusuCycleId) external view returns(uint TotalSharesAtStart);\r\n    function GetCycleIndexFromGroupId(uint groupId) external view returns(uint);\r\n    function GetCycleIdFromCycleIndexAndGroupId(uint groupId, uint cycleIndex) external view returns(uint);\r\n    function GetCycleIndexFromCycleCreator(address cycleCreator) external view returns(uint);\r\n    function GetCycleIdFromCycleIndexAndCycleCreator(uint cycleIndex, address cycleCreator) external view returns(uint);\r\n    function GetCycleIndexFromCycleMember(address member) external view returns(uint);\r\n    function GetCycleIdFromCycleIndexAndCycleMember(uint cycleIndex, address member) external view returns(uint);\r\n    function GetMemberXendTokenReward(address member) external returns(uint);\r\n\r\n\r\n    /* Setters - only owner or service contract can call */\r\n\r\n    function CreateEsusuCycleMapping(uint groupId, uint depositAmount, uint payoutIntervalSeconds,uint startTimeInSeconds, address owner, uint maxMembers) external;\r\n    function IncreaseTotalAmountDepositedInCycle(uint esusuCycleId, uint amount) external returns(uint);\r\n    function CreateMemberAddressToMemberCycleMapping(address member,uint esusuCycleId) external;\r\n    function IncreaseTotalMembersInCycle(uint esusuCycleId) external;\r\n    function CreateMemberPositionMapping(uint esusuCycleId, address member) external;\r\n    function IncreaseTotalDeposits(uint esusuCycleBalance) external;\r\n    function UpdateEsusuCycleDuringStart(uint esusuCycleId,uint cycleStateEnum, uint toalCycleDuration, uint totalShares,uint currentTime) external;\r\n    function UpdateEsusuCycleState(uint esusuCycleId,uint cycleStateEnum) external;\r\n    function CreateMemberCapitalMapping(uint esusuCycleId, address member) external;\r\n    function UpdateEsusuCycleDuringCapitalWithdrawal(uint esusuCycleId, uint cycleTotalShares, uint totalCapitalWithdrawnInCycle) external;\r\n    function UpdateEsusuCycleDuringROIWithdrawal(uint esusuCycleId, uint totalShares, uint totalBeneficiaries) external;\r\n    function CreateEsusuCycleToBeneficiaryMapping(uint esusuCycleId, address memberAddress, uint memberROINet) external;\r\n    function CreateMemberToCycleIndexToCycleIDMapping(address member, uint esusuCycleId) external;\r\n    function UpdateEsusuCycleSharesDuringJoin(uint esusuCycleId, uint memberShares) external;\r\n    function UpdateMemberToXendTokeRewardMapping(address member, uint rewardAmount) external;\r\n}\r\n"
    },
    "IGroupSchema.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\ninterface IGroupSchema {\r\n    struct Group {\r\n        bool exists;\r\n        uint256 id;\r\n        string name;\r\n        string symbol;\r\n        address payable creatorAddress;\r\n    }\r\n\r\n    struct Cycle {\r\n        bool exists;\r\n        uint256 id;\r\n        uint256 groupId;\r\n        uint256 numberOfDepositors;\r\n        uint256 cycleStartTimeStamp;\r\n        uint256 cycleDuration;\r\n        uint256 maximumSlots;\r\n        bool hasMaximumSlots;\r\n        uint256 cycleStakeAmount;\r\n        // represents the total stakes of every cycle member deposits\r\n        uint256 totalStakes;\r\n        //represents the total stakes of every cycle member withdrawal\r\n        uint256 stakesClaimed;\r\n        CycleStatus cycleStatus;\r\n        // represents the number of cycle stakes that user's have cashed out on before the cycle has ended\r\n        uint256 stakesClaimedBeforeMaturity;\r\n    }\r\n\r\n    struct CycleFinancial {\r\n        bool exists;\r\n        uint256 cycleId;\r\n        //total underlying asset deposited into contract\r\n        uint256 underlyingTotalDeposits;\r\n        //total underlying asset that have been withdrawn by cycle members\r\n        uint256 underlyingTotalWithdrawn;\r\n        // underlying amount gotten after lending period has ended and shares have been reedemed for underlying asset;\r\n        uint256 underlyingBalance;\r\n        // lending shares representation of amount deposited in lending protocol\r\n        uint256 derivativeBalance;\r\n        // represents the total underlying crypto amount that has been cashed out before the cycle ended\r\n        uint256 underylingBalanceClaimedBeforeMaturity;\r\n        // represents the total derivative crypto amount that has been cashed out on before the cycle ended\r\n        uint256 derivativeBalanceClaimedBeforeMaturity;\r\n    }\r\n\r\n    struct CycleMember {\r\n        bool exist;\r\n        uint256 cycleId;\r\n        uint256 groupId;\r\n        address payable _address;\r\n        uint256 totalLiquidityAsPenalty;\r\n        uint256 numberOfCycleStakes;\r\n        uint256 stakesClaimed;\r\n        bool hasWithdrawn;\r\n    }\r\n\r\n    struct Member {\r\n        bool exists;\r\n        address payable _address;\r\n    }\r\n\r\n    struct GroupMember {\r\n        bool exists;\r\n        address payable _address;\r\n        uint256 groupId;\r\n    }\r\n\r\n    struct RecordIndex {\r\n        bool exists;\r\n        uint256 index;\r\n    }\r\n\r\n    enum CycleStatus {NOT_STARTED, ONGOING, ENDED}\r\n}\r\n"
    },
    "IGroups.sol": {
      "content": "pragma solidity 0.6.6;\r\nimport \"./IGroupSchema.sol\";\r\n\r\ninterface IGroups is IGroupSchema {\r\n    function getLengthOfTokenAddressesUsedInDeposit()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function incrementTokenDeposit(address tokenAddress, uint256 amount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function decrementTokenDeposit(address tokenAddress, uint256 amount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function getTokenDeposit(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function incrementEtherDeposit(uint256 amount) external returns (uint256);\r\n     function getXendTokensReward(address payable receiverAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function setXendTokensReward(address payable depositorAddress, uint256 amount)\r\n        external;\r\n\r\n    function decrementEtherDeposit(uint256 amount) external returns (uint256);\r\n\r\n    function getEtherDeposit() external view returns (uint256);\r\n\r\n    function createMember(address payable depositor) external;\r\n\r\n    function getMember(address _address) external view returns (address);\r\n\r\n    function createGroup(\r\n        string calldata name,\r\n        string calldata symbol,\r\n        address groupCreator\r\n    ) external returns (uint256);\r\n\r\n    function updateGroup(\r\n        uint256 id,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        address payable creatorAddress0\r\n    ) external;\r\n\r\n    function doesGroupExist(uint256 groupId) external view returns (bool);\r\n\r\n    function doesGroupExist(string calldata groupName)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function doesMemberExist(address depositor) external view returns (bool);\r\n\r\n    function createGroupMember(uint256 groupId, address payable depositor)\r\n        external;\r\n\r\n    function getGroupMember(uint256 index)\r\n        external\r\n        view\r\n        returns (address payable _address, uint256 groupId);\r\n\r\n    function getGroupMembersDeepIndexer(uint256 groupId, address depositor)\r\n        external\r\n        view\r\n        returns (bool exists, uint256 index);\r\n\r\n    function getRecordIndexLengthForGroupMembersIndexer(uint256 groupId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getRecordIndexLengthForGroupMembersIndexerByDepositor(\r\n        address depositor\r\n    ) external view returns (uint256);\r\n\r\n    function getGroupMembersIndexer(uint256 groupId, uint256 indexerLocation)\r\n        external\r\n        view\r\n        returns (bool exist, uint256 index);\r\n\r\n    function getGroupMembersIndexerByDepositor(\r\n        address depositor,\r\n        uint256 indexerLocation\r\n    ) external view returns (bool exist, uint256 index);\r\n\r\n    function doesGroupMemberExist(uint256 groupId, address depositor)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getGroupIndexer(uint256 groupId)\r\n        external\r\n        view\r\n        returns (bool exist, uint256 index);\r\n\r\n    function getRecordIndexLengthForCreator(address groupCreator)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getGroupForCreatorIndexer(\r\n        address groupCreator,\r\n        uint256 indexerLocation\r\n    ) external view returns (bool exist, uint256 index);\r\n\r\n    function getGroupIndexerByName(string calldata groupName)\r\n        external\r\n        view\r\n        returns (bool exist, uint256 index);\r\n\r\n    function getGroupById(uint256 groupId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            address payable\r\n        );\r\n\r\n    function getGroupByIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            address payable\r\n        );\r\n\r\n    function getGroupIndex(uint256 groupId) external view returns (uint256);\r\n\r\n    function getGroupsLength() external view returns (uint256 length);\r\n\r\n    function activateStorageOracle(address oracle) external;\r\n\r\n    function deactivateStorageOracle(address oracle) external;\r\n\r\n    function reAssignStorageOracle(address newOracle) external;\r\n}"
    },
    "IRewardConfig.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\n\r\ninterface IRewardConfig{\r\n\r\n    function CalculateIndividualSavingsReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\r\n\r\n    function CalculateCooperativeSavingsReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\r\n    \r\n    function CalculateEsusuReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\r\n}"
    },
    "ISavingsConfig.sol": {
      "content": "pragma solidity ^0.6.6;\r\nimport './ISavingsConfigSchema.sol';\r\n\r\n\r\n\r\n\r\n\r\ninterface  ISavingsConfig is ISavingsConfigSchema {\r\n   \r\n    function getRuleSet(string calldata ruleKey) external returns (uint ,uint , uint ,  bool ,RuleDefinition );\r\n    function getRuleManager(string calldata ruleKey) external returns (address);\r\n    function changeRuleCreator(string calldata ruleKey, address newRuleManager) external;\r\n    function createRule(string calldata ruleKey, uint minimum, uint maximum, uint exact, RuleDefinition ruleDefinition) external;\r\n    function modifyRule(string calldata ruleKey, uint minimum, uint maximum, uint exact,  RuleDefinition  ruleDefinition ) external;\r\n    function disableRule(string calldata ruleKey) external;\r\n    function enableRule(string calldata ruleKey)  external;\r\n    \r\n   \r\n    \r\n}"
    },
    "ISavingsConfigSchema.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\ninterface ISavingsConfigSchema {\r\n    struct RuleSet {\r\n        bool exists;\r\n        uint256 minimum;\r\n        uint256 maximum;\r\n        uint256 exact;\r\n        bool applies;\r\n        RuleDefinition ruleDefinition;\r\n    }\r\n\r\n    enum RuleDefinition {RANGE, VALUE}\r\n}\r\n"
    },
    "ITreasury.sol": {
      "content": "pragma solidity 0.6.6;\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ninterface ITreasury {\r\n    function depositToken(address token) external;\r\n\r\n    function getEtherBalance() external view returns (uint256);\r\n\r\n    function getTokenBalance(address token) external view returns (uint256);\r\n\r\n    function withdrawEthers(uint256 amount) external;\r\n\r\n    function withdrawTokens(address tokenAddress, uint256 amount) external;\r\n}\r\n"
    },
    "IXendToken.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\ninterface IXendToken {\r\n    function mint(address payable recipient, uint256 amount) external;\r\n}\r\n"
    },
    "IYDaiToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.6;\r\n\r\nimport './IERC20.sol';\r\n\r\n/*\r\n    This interface returns the address of the YDai Token contract\r\n    Learn more about YTokens here: https://docs.yearn.finance/faq#ytokens\r\n    IYDaiV3: https://github.com/iearn-finance/itoken/blob/master/contracts/YDAIv3.sol\r\n*/\r\n\r\n\r\n\r\ninterface IYDaiToken is IERC20{\r\n \r\n      function recommend() external view returns (uint256);\r\n\r\n      function supplyDydx(uint256 amount) external returns(uint);\r\n    \r\n      function balance() external view returns (uint256);\r\n      function deposit(uint amount) external;\r\n      function withdraw(uint256 shares) external;\r\n      function getAave() external view returns (address);\r\n      function getAaveCore() external view returns (address);\r\n    \r\n      function approveToken() external;\r\n    \r\n      function balanceDydx() external view returns (uint256);\r\n      function balanceCompound() external view returns (uint256);\r\n      function balanceCompoundInToken() external view returns (uint256);\r\n      function balanceFulcrumInToken() external view returns (uint256);\r\n      function balanceFulcrum() external view returns (uint256);\r\n      function balanceAave() external view returns (uint256);\r\n    \r\n      function rebalance() external;\r\n    \r\n      function supplyAave(uint amount) external;\r\n      function supplyFulcrum(uint amount) external;\r\n      function supplyCompound(uint amount) external;\r\n    \r\n      // Invest ETH\r\n      function invest(uint256 _amount) external;\r\n    \r\n      // Invest self eth from external profits\r\n      function investSelf() external;\r\n    \r\n      function calcPoolValueInToken() external view returns (uint256);\r\n    \r\n      function getPricePerFullShare() external view returns (uint256);\r\n    \r\n      // Redeem any invested tokens from the pool\r\n      function redeem(uint256 _shares) external;\r\n    \r\n}"
    },
    "Ownable.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Unauthorized access to contract\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n"
    },
    "OwnableService.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.6;\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract OwnableService {\r\n    address payable public owner;\r\n    address payable public serviceContract;\r\n\r\n      event UnderlyingAssetDeposited(\r\n        address payable user,\r\n        uint256 underlyingAmount,\r\n        uint256 derivativeAmount,\r\n        uint256 balance\r\n    );\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ContractOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor(address payable _serviceContract) internal {\r\n        owner = msg.sender;\r\n        serviceContract = _serviceContract;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Unauthorized access to contract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerAndServiceContract() {\r\n        require(\r\n            msg.sender == owner || msg.sender == serviceContract,\r\n            \"Unauthorized access to contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        address oldOwner = owner;\r\n        require(newOwner != address(0), \"address cannot be zero\");\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function transferContractOwnership(address payable newServiceContract)\r\n        public\r\n        onlyOwnerAndServiceContract\r\n    {\r\n        address oldServiceContract = serviceContract;\r\n        require(newServiceContract != address(0), \"address cannot be zero\");\r\n        serviceContract = newServiceContract;\r\n        emit ContractOwnershipTransferred(oldServiceContract, newServiceContract);\r\n\r\n    }\r\n}"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "SafeMath.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    }
  }
}