{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/multisend.sol":{"content":"pragma solidity >=0.5.0 <0.7.0;\r\n\r\nimport \"math.sol\";\r\n\r\ncontract ERC20  {\r\n    function approve(address owner, uint value) public{}\r\n    function allowance(address owner, address spender) public view returns (uint){}\r\n    function transferFrom(address from, address to, uint value) public{}\r\n}\r\n\r\ncontract Multisend {\r\n    using SafeMath for uint256;\r\n    address payable public owner;\r\n\r\n    event Transfer(address recipient, uint amount);\r\n    event Refund(uint refund);\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function getbalance(address addr) public view returns (uint value){\r\n        return addr.balance;\r\n    }\r\n\r\n    function deposit() payable public returns (bool){\r\n        return true;\r\n    }\r\n\r\n    function bulkSendEth(address payable[] memory recipients, uint256[] memory amounts) public payable returns (bool success) {\r\n        require(recipients.length <= 300, \"number of recipients is larger than 300\");\r\n        require(recipients.length == amounts.length, \"parameters not match\");\r\n        uint total = 0;\r\n        for (uint8 i = 0; i < amounts.length; i++) {\r\n            total = total.add(amounts[i]);\r\n        }\r\n        require(msg.value >= total, \"not enough token\");\r\n        for (uint8 i = 0; i < recipients.length; i++) {\r\n            recipients[i].transfer(amounts[i]);\r\n            emit Transfer(recipients[i], amounts[i]);\r\n        }\r\n        if (msg.value > total) {\r\n            uint refund = msg.value.sub(total);\r\n            msg.sender.transfer(refund);\r\n            emit Refund(refund);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function bulkSendToken(ERC20 token, address [] memory recipients, uint256[] memory amounts) public returns (bool success) {\r\n        require(recipients.length <= 300, \"number of recipients is larger than 300\");\r\n        require(recipients.length == amounts.length, \"parameters not match\");\r\n        uint total = 0;\r\n        for (uint8 i = 0; i < amounts.length; i++) {\r\n            total = total.add(amounts[i]);\r\n        }\r\n        address multisendContractAddress = address(this);\r\n\r\n        token.approve(multisendContractAddress, total);\r\n        // check if user has enough balance\r\n        require(total <= token.allowance(msg.sender, multisendContractAddress), \"not enough token balance\");\r\n\r\n        // transfer token to addresses\r\n        for (uint8 j = 0; j < recipients.length; j++) {\r\n            token.transferFrom(msg.sender, recipients[j], amounts[j]);\r\n            emit Transfer(recipients[j], amounts[j]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function destroy(address payable _to) public onlyOwner {\r\n        selfdestruct(_to);\r\n    }\r\n}"},"math.sol":{"content":"pragma solidity >=0.5.0 <0.7.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}"}}}