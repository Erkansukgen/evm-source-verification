{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1500
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/CryptagionLaboratoryMainnet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n//Version Mainnet\r\npragma solidity >= 0.8.9;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\";\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Counters.sol\";\r\n\r\n//****************   MAIN CONTRACT  ****************************\r\n//Who? A3g1X. When? The Fall before the Fall, 2021\r\n\r\ncontract CryptagionLaboratory is ERC721Enumerable{\r\n\r\n\tevent NewEthogen(uint indexed ethogenID, uint16 dtypeID, uint8 rarity);\r\n\r\n    //consts\r\n    uint constant DEC18 =  10 ** 18;\r\n    uint8 constant maxBaseStat = 200;\r\n\r\n\tusing Counters for Counters.Counter;\r\n\tusing Address for address;\r\n\r\n\tuint upgradefee = 0.001 ether;\r\n\tuint silverpackfee = 0.002 ether;\r\n\r\n\tuint legendarypackfee = 3 ether;\r\n\tuint sickpackfee = 0.2 ether;\r\n\r\n    uint16 sickbonusbase = 400;\r\n    uint16 sickfeebase = 1000;\r\n    uint16 userxpgainbase = 200;\r\n\r\n\tuint16 founderpackcap1 = 800;\r\n    uint8 founderpackcap2 = 230;\r\n    uint8 founderpackcap3 = 80;\r\n    \r\n    uint16 xpDivisor = 400;\r\n    uint8 sickburndivisor = 10;\r\n\r\n// Base URI\r\n    string private _baseURIextended;\r\n    string private _contractURI;\r\n\r\n  \tCounters.Counter private _tokenIdTracker;\r\n \r\n\taddress payable private owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\tmodifier onlyOwnerOf(uint _ethogenID) {\r\n        require(msg.sender == ownerOf(_ethogenID));\r\n        _;\r\n\t}\r\n\r\n//main erc20 currency SICK\r\n    ERC20Burnable public sicktoken;\r\n//dtypes - types of ethogens - owner can add new types with rarity caps\r\n\tstruct dtype{\r\n  \t\t\r\n\t\tuint16 raritycap1;\r\n\t\tuint16 raritycap2;\r\n\t\tuint16 raritycap3;\r\n\t\tuint8 raritycap4;\r\n\t\tuint8 raritycap5;\r\n        uint8 baseinfect;\r\n\t\tuint8 basemort;\r\n        uint8 baseresist;\r\n        uint8 basestealth;\r\n        uint8 classtype;\r\n        uint8 legendarymaxcap;\r\n\t}\r\n\t\r\n\tdtype[] public dtypes;\r\n\r\n//main token type: ethogen \r\n\tstruct Ethogen {\r\n\r\n        uint birthday;\r\n        uint birthblock;\r\n        uint16 dtype;\r\n        uint16 xp;\r\n        uint8 rarity;\r\n\t\tuint8 level;\r\n        uint8 baseinfect;\r\n\t\tuint8 basemort;\r\n        uint8 baseresist;\r\n        uint8 basestealth;\r\n\r\n\t}\r\n\t\r\n\tEthogen[] public ethogens;\r\n\r\n//additional stats 1:1 with Ethogen\r\n\tstruct EthogenStats {\r\n\r\n        uint8 modinfect;\r\n\t\tuint8 modmort;\r\n        uint8 modresist;\r\n        uint8 modstealth;\r\n        uint8 boostinfect;\r\n\t\tuint8 boostmort;\r\n        uint8 boostresist;\r\n        uint8 booststealth;\r\n        uint8 mutation;        \r\n        uint8 trait;\r\n        uint8 special;\r\n\t}\r\n\t\r\n\tEthogenStats[] public ethogenstats;\r\n\r\n//user stats\r\n\tstruct User {\r\n\r\n        uint incubating1;\r\n        uint incubating1date;\r\n        uint incubating2;\r\n        uint incubating2date;\r\n        uint incubating3;\r\n        uint incubating3date;\r\n        uint16 xp;\r\n\t\tuint8 level;\r\n\t}\r\n\r\n    mapping (address => User) public users;\r\n\r\n//constructor  \r\n\tconstructor()  ERC721('Cryptagion Ethogen', 'ETHOGEN') {  \r\n\r\n        _baseURIextended = \"https://lab.cryptagion.com/tokenmeta/getmetadata.php?tokenid=\";\r\n        _contractURI = \"https://lab.cryptagion.com/tokenmeta/contractmetadata\";\r\n  \r\n \t\towner = payable(msg.sender);\r\n        setCurrency(0x3aA22ff4781D61FD3dbb820e0e2D9533bf908d5C);\r\n        \r\n        //initial types\r\n        addType(92,56,45,181,14,6);\r\n        addType(107,16,38,132,21,8);\r\n        addType(55,62,152,43,41,10);\r\n        addType(74,157,63,31,35,6);\r\n        addType(130,41,86,78,12,8);\r\n        addType(56,77,133,87,41,6);\r\n        addType(142,26,21,173,22,8);\r\n        addType(72,64,98,95,33,10);\r\n\r\n        //mint a common as #0\r\n        mintRandom(62,1,1);\r\n        mintRandom(5,5,5);\r\n\t}\r\n\r\n//set and return URIs\r\n function setBaseURI(string memory baseURI_) external onlyOwner() {\r\n        _baseURIextended = baseURI_;\r\n    }\r\n function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseURIextended;\r\n    }\r\n function setContractURI(string memory contractURI_) external onlyOwner() {\r\n        _contractURI = contractURI_;\r\n    }\r\n  function contractURI() public view returns (string memory) {\r\n        return _contractURI;\r\n    }\r\n\r\n//************************* SETTERS ******************************************\r\n//this sets contract address of Cryptagion (SICK)\r\n\tfunction setCurrency(address _token) public onlyOwner {\r\n       sicktoken = ERC20Burnable(_token);\r\n    }\r\n//add new ethogen type\r\n\tfunction addType ( uint8 _baseinfect, uint8 _basemort,  uint8 _baseresist, uint8 _basestealth, uint8 _classtype,uint8 _legendarycap) public onlyOwner{\r\n\r\n    \trequire (_legendarycap <=20, \" Max is 20\");\r\n    \trequire (_basemort <=maxBaseStat && _baseinfect <=maxBaseStat && _basestealth <=maxBaseStat && _baseresist <=maxBaseStat, \" Max Base Stat\");\r\n\t\r\n\t    //proportion of mint caps in relation to legendary\r\n        uint16 commoncap = uint16(_legendarycap) * 150;\r\n\t    uint16 uncommoncap = uint16(_legendarycap) * 70;\r\n\t\tuint16 rarecap = uint16(_legendarycap) * 20;\r\n\t\tuint8 epiccap = uint8(_legendarycap) * 5;\r\n\t\r\n        dtypes.push(dtype(commoncap,uncommoncap,rarecap,epiccap,_legendarycap,_baseinfect,_basemort,_baseresist,  _basestealth, _classtype,_legendarycap));\r\n\t}\r\n//overwrite ethogen type in case of f**k ups\r\n\tfunction overwriteType (uint8 _baseinfect, uint8 _basemort, uint8 _baseresist, uint8 _basestealth, uint8 _classtype,uint _overwriteindex) external onlyOwner{\r\n\r\n       require (_basemort <=maxBaseStat && _baseinfect <=maxBaseStat && _basestealth <=maxBaseStat && _baseresist <=maxBaseStat, \" Max Base Stat\");\r\n\r\n       dtypes[_overwriteindex].baseresist = _baseresist;\r\n       dtypes[_overwriteindex].basestealth = _basestealth;\r\n       dtypes[_overwriteindex].baseinfect = _baseinfect;\r\n       dtypes[_overwriteindex].basemort = _basemort;\r\n       dtypes[_overwriteindex].classtype = _classtype;\r\n\t}\r\n\r\n//************************* THE MINT ******************************************\r\n//mint random card with weighted rarity chances if _raritymin is 0, otherwise set the rarity\r\n\tfunction mintRandom(uint _randomadd,uint8 _raritymin, uint8 _raritymax) private {\r\n\r\n        uint randNonce = 3 + _randomadd;\r\n        uint16 randomtype;\r\n    \tuint8 randomweight;\r\n        uint8 finalrarity;\r\n\r\n        //200 tries to get one that's not capped out.. just prevent endless loop\r\n        while (randNonce < _randomadd + 200){\r\n            \r\n    \t    randomtype = uint16(uint(keccak256(abi.encodePacked(block.number, msg.sender, randNonce))) % dtypes.length );\r\n            randNonce++;\r\n\r\n    \t    if(_raritymin == 0){\r\n        \t    \r\n        \t    randomweight = uint8(uint(keccak256(abi.encodePacked(block.number + _tokenIdTracker.current() , msg.sender, randNonce))) % 100  + 1);\r\n\r\n                if(_raritymax == 2)\r\n                {\r\n                    if (randomweight < 66){finalrarity = 1;}\r\n                    else {finalrarity = 2;}\r\n                    \r\n                }\r\n                else if(_raritymax == 3)\r\n                {\r\n                    if (randomweight < 60){finalrarity = 1;}\r\n                    else if (randomweight < 90){finalrarity = 2;}\r\n                    else {finalrarity = 3;}\r\n                }\r\n    \t    }\r\n            else{\r\n                finalrarity = _raritymin;\r\n            }\r\n    \t    //particular mintcap?\r\n    \t    if(checkmintcaps(randomtype,finalrarity)){\r\n    \t             _mintEthogen(msg.sender, randomtype, finalrarity);\r\n    \t            return;\r\n    \t    }\r\n            randNonce++;\r\n        }\r\n        //massive fail       \r\n        revert(\"No Cap, Try again\")  ;\r\n\t}\r\n\r\n//mint new ethogen\r\n\tfunction _mintEthogen(address _to, uint16 _dtypeID, uint8 _rarity) private {\r\n\r\n\t    uint16 tmpfactor;\r\n\r\n        //set base stats based on rarity\r\n\t\tif(_rarity == 1){tmpfactor = 1000;}\r\n\t\telse if(_rarity == 2){tmpfactor = 1030;}\r\n\t\telse if(_rarity == 3){tmpfactor = 1100;}\r\n\t\telse if(_rarity == 4){tmpfactor = 1180;}\r\n\t\telse if(_rarity == 5){tmpfactor = 1275;}\r\n\t\telse {revert(\"Bad Rarity\");}\r\n\r\n        //the real minting\r\n        uint256 newNftTokenId = _tokenIdTracker.current();\r\n       \r\n        _mint(_to, newNftTokenId);\r\n  \r\n        //percents increase based on rarity\r\n        uint8 finalinfect =  uint8((uint32(dtypes[_dtypeID].baseinfect) * uint32(tmpfactor))/1000);\r\n        uint8 finalmort =  uint8((uint32(dtypes[_dtypeID].basemort) * uint32(tmpfactor))/1000);\r\n        uint8 finalresist =  uint8((uint32(dtypes[_dtypeID].baseresist) * uint32(tmpfactor))/1000);\r\n        uint8 finalstealth =  uint8((uint32(dtypes[_dtypeID].basestealth) * uint32(tmpfactor))/1000);\r\n        \r\n        //main Ethogen\r\n        ethogens.push(Ethogen(block.timestamp,block.number,_dtypeID, 0, _rarity, 0,finalinfect,finalmort,finalresist,finalstealth));\r\n\r\n        //random shizen\r\n        uint8 randommutation = uint8(uint(keccak256(abi.encodePacked(block.number + _tokenIdTracker.current() + 11, msg.sender))) % 255  + 1);\r\n        uint8 randomtrait = uint8(uint(keccak256(abi.encodePacked(block.timestamp + _tokenIdTracker.current() + 5, msg.sender))) % 255  + 1);\r\n        uint8 randomspecial = uint8(uint(keccak256(abi.encodePacked(block.timestamp + _tokenIdTracker.current() + 3, msg.sender))) % 255  + 1);\r\n\r\n        //EthogenStats 1:1 with Ethogens\r\n        ethogenstats.push(EthogenStats(1,1,1,1,0,0,0,0,randommutation,randomtrait,randomspecial));\r\n\r\n        _tokenIdTracker.increment();\r\n\t\t\r\n        //decrement specific value in mintcaps mapping and raritycaps array\r\n\t\tif(_rarity == 1){dtypes[_dtypeID].raritycap1--;}\r\n\t\tif(_rarity == 2){dtypes[_dtypeID].raritycap2--;}\r\n\t\tif(_rarity == 3){dtypes[_dtypeID].raritycap3--;}\r\n\t\tif(_rarity == 4){dtypes[_dtypeID].raritycap4--;}\r\n\t\tif(_rarity == 5){dtypes[_dtypeID].raritycap5--;}\r\n\r\n        //emit the event \t\r\n\t\temit NewEthogen(newNftTokenId, _dtypeID, _rarity);\r\n    }\r\n    \r\n//mint a specific ethogen\r\n\tfunction mintOwner(address _to, uint16 _dtypeID, uint8 _rarity) external onlyOwner {\r\n    \t require (checkmintcaps(_dtypeID,_rarity), \"Cap reached\");\r\n\t\t _mintEthogen(_to, _dtypeID, _rarity);\r\n\t}\t    \r\n    \r\n//************************* SET FEES ******************************************\r\n//set the upgradefee\r\n\tfunction setUpgradeFee(uint _fee) external onlyOwner {\r\n\t\tupgradefee = _fee;\r\n\t}\r\n//set the silver fee\r\n\tfunction setSilverpackFee(uint _fee) external onlyOwner {\r\n\t\tsilverpackfee = _fee;\r\n\t}\r\n//set the legendary fee\r\n\tfunction setLegendarypackFee(uint _fee) external onlyOwner {\r\n\t\tlegendarypackfee = _fee;\r\n\t}\r\n//set the sickpack fee\r\n\tfunction setSickpackFee(uint _fee) external onlyOwner {\r\n\t\tsickpackfee = _fee;\r\n\t}\t\r\n//set the userxpgainbase\r\n\tfunction setUserXPgainBase(uint16 _newval) external onlyOwner {\r\n\t\tuserxpgainbase = _newval;\r\n\t}\t\r\n//set the sickbonusbase\r\n\tfunction setSickBonusBase(uint16 _newval) external onlyOwner {\r\n\t\tsickbonusbase = _newval;\r\n\t}\t\r\n//set the sickfeebase\r\n\tfunction setSickFeeBase(uint16 _newval) external onlyOwner {\r\n\t\tsickfeebase = _newval;\r\n\t}\t\r\n//set the sickburndivisor\r\n\tfunction setSickBurnDivisor(uint8 _newval) external onlyOwner {\r\n\t\tsickburndivisor = _newval;\r\n\t}\t\r\n//set the xpDivisor\r\n\tfunction setXpDivisor(uint16 _newval) external onlyOwner {\r\n\t\txpDivisor = _newval;\r\n\t}\t\r\n\r\n//************************* PAYABLES ******************************************\r\n//buy a pack\r\n\tfunction buyCardPack(uint8 _packtype) external payable {\r\n\t\trequire((msg.value == silverpackfee || msg.value == 10 * silverpackfee || msg.value == 100 * silverpackfee || msg.value == sickpackfee || msg.value == legendarypackfee ) ,\" Fee must match one listed\");\r\n\r\n        uint16 sickgain;\r\n        uint16 xpgain;\r\n        \r\n        if(msg.value == silverpackfee && _packtype == 1){\r\n            //first uncom\r\n    \t\tmintRandom(13,2,2);\r\n    \t\tmintRandom(17,1,1);\r\n\r\n    \t\tif(founderpackcap1 > 0){\r\n    \t\t    \r\n    \t\t    mintRandom(3,1,1);\r\n    \t\t    sickgain = sickbonusbase * 2;\r\n                xpgain = userxpgainbase * 2;\r\n    \t\t    \r\n    \t\t    founderpackcap1 --;\r\n    \t\t    \r\n    \t\t}\r\n            else{\r\n    \t\t    sickgain = sickbonusbase;\r\n        \t    xpgain = userxpgainbase;\r\n            }\r\n\r\n        }\r\n        else if(msg.value == silverpackfee * 10 && _packtype == 2){\r\n            //first rare\r\n    \t\tmintRandom(7,3,3);\r\n    \t\tmintRandom(4,2,2);\r\n\r\n            if(founderpackcap2 > 0){\r\n                \r\n                mintRandom(13,0,2);\r\n    \t\t    sickgain = sickbonusbase * 5;\r\n        \t    xpgain = userxpgainbase * 3;\r\n\r\n    \t\t    founderpackcap2 --;\r\n    \t\t}\r\n            else{\r\n                sickgain = sickbonusbase * 2;\r\n                xpgain = userxpgainbase * 2;\r\n            }\r\n\r\n        }\r\n        else if(msg.value == silverpackfee * 100 && _packtype == 3){\r\n        \r\n            //first epic\r\n    \t\tmintRandom(24,4,4);\r\n    \t\tmintRandom(12,0,3);\r\n\r\n            if(founderpackcap3 > 0){\r\n                \r\n    \t\t    mintRandom(23,0,2);\r\n    \t\t    sickgain = sickbonusbase * 10;\r\n                xpgain = userxpgainbase * 6;\r\n \r\n    \t\t    founderpackcap3 --;\r\n    \t\t}\r\n            else{\r\n    \t\t    sickgain = sickbonusbase * 5;\r\n                xpgain = userxpgainbase * 4;\r\n            }\r\n        }\r\n        else if(msg.value == sickpackfee && _packtype == 200){\r\n        \r\n    \t\tmintRandom(9,0,2);\r\n    \t\tsickgain = sickbonusbase * 10;\r\n            xpgain = userxpgainbase * 2;\r\n        }\r\n        else if(msg.value == legendarypackfee && _packtype == 250){\r\n        \r\n    \t\tmintRandom(7,5,5);\r\n      \t\tmintRandom(11,4,4);\r\n    \t\tmintRandom(5,3,3);\r\n\r\n    \t\tsickgain = sickbonusbase * 20;\r\n            xpgain = userxpgainbase * 10;\r\n        }\r\n        else if(msg.value == legendarypackfee && _packtype == 253){\r\n        \r\n    \t\tmintRandom(13,5,5);\r\n    \t\tsickgain = sickbonusbase * 10;\r\n            xpgain = userxpgainbase * 5;\r\n        }\r\n        else{\r\n             revert(\"Wrong Amount \");\r\n        }\r\n        //give Sick, burn Sick, gain XP\r\n  \t\tsicktoken.transfer(msg.sender,sickgain * DEC18);\r\n\t\tsicktoken.burn((sickgain * DEC18 ) / sickburndivisor);\r\n    \tuseraddxp(uint16(xpgain));\r\n    }\r\n\r\n//*************************  SICK PAYABLE ******************************************\r\n// buy user xp with sicktoken\r\n\tfunction buyXPwithSick(uint16 _sicktokens) external {\r\n    \r\n        require (_sicktokens > 0 && _sicktokens <= 32000 && (users[msg.sender].xp + _sicktokens) <= 32000 , \"No_Max SICK\");\r\n    \r\n        sicktoken.transferFrom(address(msg.sender), address(this), _sicktokens * DEC18);\r\n        useraddxp(_sicktokens);\r\n    }\r\n\r\n// buy small pack with SICK\r\n\tfunction buyPackwithSick(uint8 _pack) external {\r\n            \r\n            uint16 xpgain;\r\n            uint16 sickfee;\r\n            \r\n            if(_pack == 1){\r\n                \r\n                sickfee = sickfeebase;\r\n                xpgain = sickfeebase/2;\r\n    \r\n    \t\t    mintRandom(14,0,2);\r\n            }\r\n            else{\r\n                sickfee = sickfeebase * 10;\r\n                xpgain = sickfeebase * 5;\r\n                \r\n                mintRandom(12,4,4);\r\n            }\r\n\r\n           sicktoken.transferFrom(address(msg.sender), address(this), sickfee * DEC18);\r\n           useraddxp(xpgain);\r\n           mintRandom(13,2,2);\r\n    }\r\n\r\n// mutate with SICK\r\n\tfunction mutate(uint _ethogenID, uint16 _rand) external onlyOwnerOf(_ethogenID){\r\n\r\n            sicktoken.transferFrom(address(msg.sender), address(this), sickfeebase * 5 * DEC18);\r\n    \t\tsicktoken.burn((sickfeebase * DEC18) / sickburndivisor);\r\n        \tuseraddxp(sickfeebase);\r\n           \r\n            ethogenstats[_ethogenID].mutation = uint8(uint(keccak256(abi.encodePacked(block.number + _tokenIdTracker.current() + _rand, msg.sender))) % 255  + 1);\r\n     }\r\n\r\n//************************* EXTERNAL ETHOGEN UPDATES ******************************************\r\n\r\n// boost an ethogen with SickToken\r\n\tfunction boostStat(uint _ethogenID,uint8 _sicktokens,uint8 _stat) external onlyOwnerOf(_ethogenID){\r\n    \r\n        uint8 finalfee;\r\n\r\n        if (_stat == 1){\r\n             if(uint16(ethogenstats[_ethogenID].boostinfect) + uint16(_sicktokens) > 255){\r\n                \r\n                 finalfee = uint8(255 - ethogenstats[_ethogenID].boostinfect);\r\n                 ethogenstats[_ethogenID].boostinfect  = 255;\r\n             }\r\n             else{\r\n                 ethogenstats[_ethogenID].boostinfect  = uint8(ethogenstats[_ethogenID].boostinfect + _sicktokens);\r\n                 finalfee = _sicktokens;\r\n             }  \r\n        }\r\n        else if (_stat == 2){\r\n              if(uint16(ethogenstats[_ethogenID].boostmort) + uint16(_sicktokens) > 255){\r\n                 finalfee = uint8(255 - ethogenstats[_ethogenID].boostmort);\r\n                 ethogenstats[_ethogenID].boostmort  = 255;\r\n             }\r\n             else{\r\n                 ethogenstats[_ethogenID].boostmort  = uint8(ethogenstats[_ethogenID].boostmort + _sicktokens);\r\n                 finalfee = _sicktokens;\r\n             }  \r\n        }\r\n        else if (_stat == 3){\r\n             if(uint16(ethogenstats[_ethogenID].boostresist) + uint16(_sicktokens) > 255){\r\n                 finalfee = uint8(255 - ethogenstats[_ethogenID].boostresist);\r\n                 ethogenstats[_ethogenID].boostresist  = 255;\r\n             }\r\n             else{\r\n                 ethogenstats[_ethogenID].boostresist  = uint8(ethogenstats[_ethogenID].boostresist + _sicktokens);\r\n                 finalfee = _sicktokens;\r\n             }  \r\n        }\r\n        else if (_stat == 4){\r\n              if(uint16(ethogenstats[_ethogenID].booststealth) + uint16(_sicktokens) > 255){\r\n                 finalfee = uint8(255 - ethogenstats[_ethogenID].booststealth);\r\n                 ethogenstats[_ethogenID].booststealth  = 255;\r\n             }\r\n             else{\r\n                 ethogenstats[_ethogenID].booststealth  = uint8(ethogenstats[_ethogenID].booststealth + _sicktokens);\r\n                 finalfee = _sicktokens;\r\n             }  \r\n        }\r\n        //take some SICK for the boost\r\n        if(finalfee > 0){sicktoken.transferFrom(address(msg.sender), address(this), finalfee * DEC18);}\r\n    }\r\n\r\n//************************* INCUBATE ******************************************\r\n//lock token in incubator for upgrade fee\r\n\tfunction incubatein1(uint _ethogenID) external payable onlyOwnerOf(_ethogenID){\r\n\t\t\r\n\t\trequire (users[msg.sender].incubating1 == 0 , \" Full\");\r\n\t\trequire(msg.value == upgradefee);\r\n\t\t\r\n\t    users[msg.sender].incubating1date = uint(block.timestamp);\r\n        users[msg.sender].incubating1 = _ethogenID;\r\n\r\n\t}\r\n\tfunction incubatein2(uint _ethogenID) external payable onlyOwnerOf(_ethogenID){\r\n\t\t\r\n\t\trequire (users[msg.sender].incubating2 == 0 , \" Full\");\r\n\t\trequire (users[msg.sender].level >= 50 , \" Level 50\");\r\n\t\trequire(msg.value == upgradefee);\r\n\t\t\r\n\t    users[msg.sender].incubating2date = uint(block.timestamp);\r\n        users[msg.sender].incubating2 = _ethogenID;\r\n\r\n\t}\r\n\tfunction incubatein3(uint _ethogenID) external payable onlyOwnerOf(_ethogenID){\r\n\t\t\r\n\t\trequire (users[msg.sender].incubating3 == 0 , \" Full\");\r\n\t\trequire(msg.value == upgradefee*3);\r\n\t\t\r\n\t    users[msg.sender].incubating3date = uint(block.timestamp);\r\n        users[msg.sender].incubating3 = _ethogenID;\r\n\t}\r\n\r\n//take out of incubator\r\n\tfunction incubateout(uint8 _whichone) external {\r\n\t\t\r\n\t\tuint ethogenID;\r\n\t\tuint16 xpgained;\r\n\t\t\r\n\t\tif(_whichone == 1){\r\n\t\t    if(users[msg.sender].incubating1 == 0){revert(\"Empty\");}\r\n\t\t    ethogenID =  users[msg.sender].incubating1;\r\n\t\t    users[msg.sender].incubating1 = 0;\r\n            xpgained = uint16((block.timestamp - users[msg.sender].incubating1date)/xpDivisor); \r\n\t\t}\t\r\n\t\telse if(_whichone == 2){\r\n\t\t    if(users[msg.sender].incubating2 == 0){revert(\"Empty\");}\r\n\t\t    ethogenID =  users[msg.sender].incubating2;\r\n\t\t    users[msg.sender].incubating2 = 0;\r\n            xpgained = uint16((block.timestamp - users[msg.sender].incubating2date)/xpDivisor); \r\n\t\t}\t\r\n\t\telse if(_whichone == 3){\r\n\t\t    if(users[msg.sender].incubating3 == 0){revert(\"Empty\");}\r\n\t\t    ethogenID =  users[msg.sender].incubating3;\r\n\t\t    users[msg.sender].incubating3 = 0;\r\n            xpgained = uint16((block.timestamp - users[msg.sender].incubating3date) * 3 /xpDivisor); \r\n\t\t}\t\r\n\r\n        if(ownerOf(ethogenID) == msg.sender){\r\n            addxp(ethogenID,xpgained);\r\n        }\t\r\n    }\r\n\r\n//*************************  XP AND LEVELS ******************************************\r\n//add xp check Max\r\n\tfunction addxp(uint _ethogenID,uint16 _xp) private onlyOwnerOf(_ethogenID){\r\n        \r\n        if(_xp > 32000){_xp=32000;}\r\n        if(ethogens[_ethogenID].xp + _xp > 32000){\r\n            ethogens[_ethogenID].xp = 32000;\r\n        }\r\n        else{\r\n            ethogens[_ethogenID].xp += _xp;\r\n        }\r\n\r\n\t    uint8 newlevel = calclevel(ethogens[_ethogenID].xp);\r\n\t    uint8 newmod = uint8(5 + (newlevel * 2) + (10 *ethogens[_ethogenID].rarity));\r\n\t    \r\n\t    ethogens[_ethogenID].level = newlevel;\r\n\r\n        uint8 debuff = uint8(newlevel/4);\r\n        uint8 debuff2 = uint8(newlevel/8);\r\n\r\n        ethogenstats[_ethogenID].modmort = newmod;\r\n        ethogenstats[_ethogenID].modinfect = newmod;\r\n        ethogenstats[_ethogenID].modstealth = newmod;\r\n        ethogenstats[_ethogenID].modresist = newmod;\r\n\r\n\t    if (dtypes[ethogens[_ethogenID].dtype].classtype < 20){ ethogenstats[_ethogenID].modmort = newmod - 1;ethogenstats[_ethogenID].modstealth = newmod - debuff2;}\r\n        else if (dtypes[ethogens[_ethogenID].dtype].classtype < 30){ethogenstats[_ethogenID].modinfect = newmod - debuff;ethogenstats[_ethogenID].modresist = newmod - 1;}\r\n        else if (dtypes[ethogens[_ethogenID].dtype].classtype < 40){ethogenstats[_ethogenID].modstealth = newmod - debuff;ethogenstats[_ethogenID].modinfect = newmod - 1;}\r\n        else if (dtypes[ethogens[_ethogenID].dtype].classtype < 50){ethogenstats[_ethogenID].modresist = newmod - debuff;ethogenstats[_ethogenID].modmort = newmod - debuff2;}\r\n        else if (dtypes[ethogens[_ethogenID].dtype].classtype < 60){ethogenstats[_ethogenID].modresist = newmod - 1;ethogenstats[_ethogenID].modinfect = newmod - debuff2;}\r\n        else if (dtypes[ethogens[_ethogenID].dtype].classtype < 70){ethogenstats[_ethogenID].modmort = newmod - debuff;ethogenstats[_ethogenID].modresist = newmod - debuff2;}\r\n    }\r\n\r\n//add xp check Max\r\n\tfunction useraddxp(uint16 _xp) private {\r\n        \r\n        if(_xp > 32000){_xp=32000;}\r\n         //max xp 32k\r\n        if(users[msg.sender].xp + _xp > 32000){\r\n            users[msg.sender].xp = 32000;\r\n        }\r\n        else{\r\n             users[msg.sender].xp += _xp; \r\n        }\r\n\t\tusers[msg.sender].level = calclevel(users[msg.sender].xp);\r\n     }\r\n\t\r\n//*************************  GETTERS ******************************************\r\n//showfees\r\n\tfunction getfees() external view returns (uint,uint,uint,uint) {\r\n\t\treturn(upgradefee,silverpackfee,sickpackfee,legendarypackfee);\r\n\t}\r\n//show founder caps\r\n\tfunction getfoundercaps() external view returns (uint16,uint8,uint8) {\r\n\t\treturn(founderpackcap1,founderpackcap2,founderpackcap3);\r\n\t}\r\n//show bases\r\n\tfunction getbasenumbers() external view returns (uint16,uint16,uint16,uint8,uint16) {\r\n\t\treturn(userxpgainbase,sickbonusbase,sickfeebase,sickburndivisor,xpDivisor);\r\n\t}\r\n\r\n//************************* PRIVATE ******************************************\r\n//check if cap is reached\r\n    function checkmintcaps(uint16 _dtypeID,uint8 _rarity) private view returns (bool){\r\n        \r\n        if(_rarity == 1 && dtypes[_dtypeID].raritycap1<=0){return false;}\r\n        if(_rarity == 2 && dtypes[_dtypeID].raritycap2<=0){return false;}\r\n        if(_rarity == 3 && dtypes[_dtypeID].raritycap3<=0){return false;}\r\n        if(_rarity == 4 && dtypes[_dtypeID].raritycap4<=0){return false;}\r\n        if(_rarity == 5 && dtypes[_dtypeID].raritycap5<=0){return false;}\r\n\r\n        return true;\r\n    }\r\n//square root yo\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }   \r\n//get level from xp\r\n   function calclevel(uint16 _xp) internal pure returns (uint8) {\r\n       return uint8(sqrt(5*uint32(_xp)) / 4);\r\n   }\r\n   \r\n//************************* STEP 3  ******************************************\r\n//step 3: (from the underpants)\r\n\tfunction collectDonations(address payable _shareholder1,address payable _shareholder2,uint _divamount) external onlyOwner {\r\n\r\n\t\t_shareholder1.transfer(_divamount /2);\r\n\t\t_shareholder2.transfer(_divamount /2);\r\n\t}\r\n\tfunction collectSick(uint _sickamount) external onlyOwner {\r\n\t\tsicktoken.transfer(owner, _sickamount * DEC18);\r\n\t}\r\n//end contract\r\n}"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  }
}