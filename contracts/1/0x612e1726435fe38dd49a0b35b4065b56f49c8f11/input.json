{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "CryptoCartV2.sol": {
      "content": "/** \n\t   _____                  _         _____           _    __      _____  \n\t  / ____|                | |       / ____|         | |   \\ \\    / /__ \\ \n\t | |     _ __ _   _ _ __ | |_ ___ | |     __ _ _ __| |_   \\ \\  / /   ) |\n\t | |    | '__| | | | '_ \\| __/ _ \\| |    / _` | '__| __|   \\ \\/ /   / / \n\t | |____| |  | |_| | |_) | || (_) | |___| (_| | |  | |_     \\  /   / /_ \n\t  \\_____|_|   \\__, | .__/ \\__\\___/ \\_____\\__,_|_|   \\__|     \\/   |____|\n\t\t\t\t   __/ | |                                                  \n\t\t\t\t  |___/|_|                                                  \n                                                          \n   #CryptoCart V2\n   \n   Great features:\n   -2% fee auto moved to vault address\n\n   1,000,000 total supply\n\n*/\n\n\n// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.9;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n    \n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\t\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nabstract contract Editor is Context {\n    address private _editor;\n\n    event EditorRoleTransferred(address indexed previousEditor, address indexed newEditor);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _editor = msgSender;\n        emit EditorRoleTransferred(address(0), msgSender);\n    }\n    \n    function editors() public view virtual returns (address) {\n        return _editor;\n    }\n\n    modifier onlyEditor() {\n        require(editors() == _msgSender(), \"caller is not the editors\");\n        _;\n    }\n\t\n    function transferEditorRole(address newEditor) public virtual onlyEditor {\n        require(newEditor != address(0), \"new editor is the zero address\");\n        emit EditorRoleTransferred(_editor, newEditor);\n        _editor = newEditor;\n    }\n}\n\ninterface IERC20 {\n   \n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\t\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _beforeTokenTransfer(sender, recipient, amount);\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\t\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\t\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\t\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router01 {\n\tfunction factory() external pure returns (address);\n\tfunction WETH() external pure returns (address);\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\t\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\t\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\t\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\t\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\t\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\t\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\t\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract CryptoCartV2 is ERC20, Ownable, Editor {\n    using SafeMath for uint256;\n\t\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    bool private swapping;\n\t\n\taddress public immutable vaultAddress;\n\tuint8 public immutable vaultFee = 200;\n\t\n    mapping (address => bool) public _isExcludedFromFees;\n    mapping (address => bool) public automatedMarketMakerPairs;\n    \n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\n\t\n    constructor(address payable _vaultAddress) ERC20(\"CryptoCart V2\", \"CCv2\") {\n\t    vaultAddress = _vaultAddress;\n\t\t\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\t\t\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair   = _uniswapV2Pair;\n\t\t\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n\n        excludeFromFees(address(this), true);\n\t\texcludeFromFees(owner(), true);\n        _mint(owner(), 1000000 * (10**18));\n    }\n\n    receive() external payable {\n  \t}\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(automatedMarketMakerPairs[pair] != value, \"CCv2: Automated market maker pair is already set to that value\");\n        automatedMarketMakerPairs[pair] = value;\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\t\t\n    function excludeFromFees(address account, bool excluded) public OwnerOrEditor{\n        require(_isExcludedFromFees[account] != excluded, \"CCv2: Account is already the value of 'excluded'\");\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\t\t\n\tfunction _transfer(address from, address to, uint256 amount) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\t\t\n\t\tif(automatedMarketMakerPairs[to])\n\t\t{\n\t\t\tbool takeFee = true;\n\t\t\t\n\t\t\tif(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n\t\t\t\ttakeFee = false;\n\t\t\t}\n\t\t\t\n\t\t\tif(takeFee) \n\t\t\t{\n\t\t\t\tuint256 vfees = amount.div(10000).mul(vaultFee);\n\t\t\t\tif(vfees > 0) {\n\t\t\t\t   super._transfer(from, vaultAddress, vfees);\n\t\t\t\t}\n\t\t\t\tamount = amount.sub(vfees);\n\t\t\t}\n        }\n        super._transfer(from, to, amount);\n    }\n\t\n\tmodifier OwnerOrEditor() {\n        require(_msgSender() == owner() || _msgSender() == editors(), \"caller is not the owner or editor\");\n        _;\n    }\n}"
    }
  }
}