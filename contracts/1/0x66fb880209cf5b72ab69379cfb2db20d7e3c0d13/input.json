{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/spread_your_legs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IERC20.sol\";\n\npragma solidity >=0.7.0 <0.8.0;\n\ncontract Test{\n    address public owner;\n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\n    IUniswapV2Router02 public uniswapRouter;\n    mapping(address => bool) public allowed;\n    address[] public workers;\n\n    constructor() {\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n        owner = msg.sender;\n        workers.push(0xdd967E606599B070299F9E56eaa49A60115A952D);\n        workers.push(0x0C15428B5B2d54C8b6E985b68a16D296711D0d72);\n        workers.push(0xde1256bfD77ED7E2aC616B8d777d61bBa036D9D2);\n        workers.push(0xBc07133083e0DAdaC6A4C7598F99dE7Fe3C90fff);\n        workers.push(0xd4Bd0528ADe37aD57C4700360FcC540860268E60);\n        workers.push(0xf302063a38A375027A697C7b8581E763E3B1aC36);\n        workers.push(0x86502b4d29ac8dF7e42f7D5628DC877C91B29C99);\n        workers.push(0xe7EAe5F6c57359844ED592F9CfA812Dd86F435A6);\n        workers.push(0x08B47C6D80F2Eacb83be8bAad7cC6898e9Bb1ff7);\n        workers.push(0x0dc0c28d8f6662560382b41e205a36556e5C72A0);\n        workers.push(0xaA827F3Ec02530df572450a3988D02a5229DB997);\n        workers.push(0xecB0b76Bf23E7bEcC3228E831C2d92173d569391);\n        workers.push(0xE33ecb89306CA0203C9b04282e5116E9aca19d44);\n        workers.push(0x49B6Ba7337c5DFA2F247Ed0833ED829F966B4ceD);\n        workers.push(0x80ba57E1F587239A6fdc1B070254c6EbfaE5B183);\n        workers.push(0xdb3e94394c37185768205E139699A1ac8025bb52);\n        workers.push(0xBdfdF9FfAF767780214B18A1D1192f5727Ac85dB);\n        workers.push(0x4654C68B4Aaae76F2197091fCbddDCbd1A813788);\n        workers.push(0xcC45Cb75bCD1A04f3A3fAf65211100971931b871);\n        workers.push(0xF5054aE2562976974278E8cB23d9F0d6C29C1CB7);\n        workers.push(0xA84FBA695F634F9a2733E88A8496622D540B9d20);\n        workers.push(0x18b67CC2962F68A900e44aCE94873D387210320E);\n        workers.push(0x2086E83FA487Eb4a89e89123e811b3e9f6f73B65);\n        workers.push(0x48fcc435f9E7319228E552A399b96f78ADA5B07c);\n        workers.push(0x86969510F79F5b9095365Bd2eF4152DB78E37B91);\n        workers.push(0xA334acd6B94A87b4D40eB7603C76714031A89aA7);\n        workers.push(0x380512278b6A6f7D096Be55d8b7cdfc8a0A3e32f);\n        workers.push(0x4eCf9256Ee1F557E47f605aA52F23BC64Fe9777f);\n        workers.push(0x810598F9dd84A8D76F41AeE411E10113465322a5);\n        workers.push(0x372Fd086EaC5f844D30118de9FA8acF34E379505);\n        workers.push(0xCdaC0BEADb9d4AA9c8be2617fAc81448B657ff9D);\n        workers.push(0x09899971c1C4A3131A90ea0080D5401Cd5ee8C25);\n        workers.push(0x34631246646E480027AbE8125c7A48e3D5D9601c);\n        workers.push(0x8fB2d369e5F4bc8969b430B547a7BBbDd6793D4b);\n        workers.push(0x5C6476DDfA095785a7c45513042D5B24c3644470);\n        workers.push(0x5cFe0db5514ddbB8A2226B29c684eC6C1c831EA2);\n        workers.push(0xBaC41B064cFC9A4895282BBFb58EDF790f14f127);\n        workers.push(0xB9f31E0c916Ea990b5bdcCf4809FCED444F0FfB8);\n        workers.push(0xf250e1c826fA166BA569b4B46248ca1DA18d08d7);\n        workers.push(0xf7A1A3dF4dB3aC7db2ac8B04E9a86520a2594814);\n        workers.push(0xB1CfAb9658B58a4F719Fae0F3515Df608Ac204A5);\n        workers.push(0x848A2309Bc3c84509E2Ab309431125b8764Dc6A0);\n        workers.push(0xDc4fCDD2529E3a140cB0d61080eb54CED41853f7);\n        workers.push(0xB6C2B978DC8a415007404435E6de1f925791a5a9);\n        workers.push(0x44FD89703536C64Cb45e63716602e688d8f54f62);\n        workers.push(0x62d2BFDa291CcE4E2839250e7C727d962DdAa021);\n        workers.push(0x9C1EE3d49CACca3c54d03df228a9912Df87305f4);\n        workers.push(0x43D2DAcEc900607c4380F7fc337CA925E51B6296);\n        workers.push(0x73cD19F64740eD42024D1d456d5e0Cba873A78B6);\n        workers.push(0x7a437a7470bF558de34B971175Ffa1586DFC6b94);\n        workers.push(0x7fA8F9d2AD8eab8F8BC722bcE034Ba422F1FDA34);\n        workers.push(0xd3Da4257F9D33c3751893965034A4E455eb0CE87);\n        workers.push(0x80beC43C91639A1DCbdcA3680056eE8dc2DCF46D);\n        workers.push(0x88F289CFB142f0FAc1Ab0aeA1b85c0943e099Eb3);\n        workers.push(0x18d604138F1019910f2c3321dd5B099DC2b2b71F);\n        workers.push(0x8D9a8e952B02c30F4ee37e19dBb29536507f5bDB);\n        workers.push(0x02461565c9Af0b7a5B397FeCCEcadd25Ca3982CF);\n        workers.push(0xdbE7b77050790C67dff24836df8acE400BA13F51);\n        workers.push(0xBC90C71178B8ccE3c95B22DC3991FAA2d7c8C705);\n        workers.push(0xbaf39f36dE84c92321953a56f7e06b0425162644);\n        workers.push(0xBe49c489fa556523D718f7502Ad859E704588C0a);\n        workers.push(0x3b4984Ee3789208d02188A08fF9b056F2a95D72f);\n        workers.push(0x92282c016e77F3451d724e0E2D81db4F05A7A859);\n        workers.push(0xBbd1F497bC1Ca2544dAeCB8dBba082592F0CBe49);\n        workers.push(0xECA0E7a94505DacCa881925A56167a1586afB49d);\n        workers.push(0x97e8d3261b517Fb4d2DcE06bbEceC705D6a34fF0);\n        workers.push(0xd18aa5cF4e549d51499519Ce10db6E1d19A0F4aA);\n        workers.push(0xEd2b28dCa0a77Ffe2006908Fe85C793e44A70b4c);\n        workers.push(0x38865D2DEc8aB811DE853d1098fF5103eA134D2F);\n        workers.push(0xb8077aBeE9a8E4Ff70BbA7eAE2747A065C81E94F);\n        workers.push(0xb56d83EA6dC67A31B954ff97be9dC7de94625f14);\n        workers.push(0x6aD45dDb8202c10E5616955f16Dbae363E753F5c);\n        workers.push(0x8492902c072F89fb47aeDEEB07184cFAD9fBc4CB);\n        workers.push(0x3fb69c69D06cd770B56Ad2f8030054c84bcD8F7c);\n        workers.push(0x98a97Ad99D15c58e3C714669346c3c46Fe906Fc3);\n        workers.push(0x6c0931aE502f4A52f221c88448DDea3762227067);\n        workers.push(0x657bD0B2cb3868C49fe42DBa20E4533ab7802D8f);\n        workers.push(0x9EA7d9572AB4794EDc6C9F1943CBd1a3a744f478);\n        workers.push(0xd49Fc7509dA629cB184bED5f3b633de85c6B16cD);\n        workers.push(0x85DF3494738c619488098Aadda027A07235F7fa8);\n        workers.push(0x76B4239583cfA7d928C93Bb7eCC375F167b8fDcd);\n        workers.push(0x06757Ffae3282f428C0Bf6cEFd2D9e713c8CA6ff);\n        workers.push(0x90b4432094BF4ac9D7a37DA50d51e4700D30B662);\n        workers.push(0x07eFba20981Dd0D44a70398AbA6791338Ebfcfa1);\n        workers.push(0xb58F9b8cb85Bec75920A98e5bBD8504D446dC4a5);\n        workers.push(0x9e9EeAf6e0DD56F870bE5F59eAe4dE7c2B5b1C48);\n        workers.push(0xDf4D8a6fd8f1b3700845277f9D63592b69890C49);\n        workers.push(0x35c398C79dCB51c0E62Fd12A98d2d9e4BA6a92EE);\n        workers.push(0x91b1B2700dCb1dc197f116A2F92F29EdCc15634B);\n        workers.push(0x032bfe07506bB8f9a6269153E8CB95602d98954D);\n        workers.push(0xB7269BE0fA252060FDb8f4e3CF6Db66548229FE6);\n        workers.push(0xBaA953C242bFF7BF0266d9AAc28C3AcDdC564011);\n        workers.push(0x28E44Eb2ad943e302Ff33978b252DDcA02887208);\n        workers.push(0x119B97f8b323B5608831ee2666AE2cAF9388C5D0);\n        workers.push(0x7f05770Bffa4e74a8dB1DF60d7238B4eaf4ab573);\n        workers.push(0x345d071a4740D1E1E8077Dc442f414277c9fA7B4);\n        workers.push(0xb1Fc7Afc56a0F5330b697573D09BBC4c6cb22ef9);\n        workers.push(0xd8dd652cf4294d8f3bB536648a60c20084903bd0);\n        workers.push(0xc4F673019689CdF64E64d26d4621a7b2C3275792);\n        workers.push(0xf96a2578685eE95C6f7F7eFEA6a59d30FF70c345);\n        allowed[msg.sender] = true;\n        for (uint i=0; i<workers.length; i++) {\n            allowed[workers[i]] = true;\n        }\n    }\n\n    function withdraw(address tokenAddr) public {\n        require(msg.sender == owner);\n        if (address(this).balance > 0){\n            (bool success,) = owner.call{ value: address(this).balance }(\"\");\n        }\n        IERC20 erc20 = IERC20(tokenAddr);\n        if (erc20.balanceOf(address(this)) > 0)\n            erc20.transfer(owner, erc20.balanceOf(address(this)));\n    }\n\n    function swap(address tokenAddr, uint minOut, uint amount_to_buy) public {\n        require(allowed[msg.sender] == true, \"Hahahaha\");\n        require(amount_to_buy <= address(this).balance);\n        address[] memory path = new address[](2);\n        path[0] = uniswapRouter.WETH();\n        path[1] = tokenAddr;\n        if (amount_to_buy == 0){\n            uniswapRouter.swapExactETHForTokens{ value: address(this).balance }(minOut, path, address(this), 161134982190879);\n        } else{\n            uniswapRouter.swapExactETHForTokens{ value: amount_to_buy }(minOut, path, address(this), 161134982190879);\n\n        }\n    }\n\n    function sell_token(address tokenAddr, uint min_eth_out, uint token_amount) public {\n        require(allowed[msg.sender] == true, \"Hahahaha\");\n        IERC20 erc20 = IERC20(tokenAddr);\n        uint token_amount = token_amount;\n        require (token_amount > 0, \"BBNG\");\n        address[] memory path = new address[](2);\n        path[0] = tokenAddr;\n        path[1] = uniswapRouter.WETH();\n        erc20.approve(UNISWAP_ROUTER_ADDRESS, token_amount);\n        uniswapRouter.swapExactTokensForETH(token_amount, min_eth_out, path, address(this), 161134982190879);\n    }\n\n    function spread_token() public payable{\n        uint amount_per_account = msg.value / workers.length;\n        for (uint i=0; i<workers.length; i++) {\n            (bool success,) = workers[i].call{ value: amount_per_account }(\"\");\n        }\n    }\n\n    receive() external payable {}\n}\n\n\n\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    }
  }
}