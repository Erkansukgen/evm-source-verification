{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DollarBankForESD.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.5.17;\r\npragma experimental ABIEncoderV2;\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Decimal {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ Static Functions ============\r\n\r\n    function zero() internal pure returns (D256 memory) {\r\n        return D256({value: 0});\r\n    }\r\n\r\n    function one() internal pure returns (D256 memory) {\r\n        return D256({value: BASE});\r\n    }\r\n\r\n    function from(uint256 a) internal pure returns (D256 memory) {\r\n        return D256({value: a.mul(BASE)});\r\n    }\r\n\r\n    function ratio(uint256 a, uint256 b) internal pure returns (D256 memory) {\r\n        return D256({value: getPartial(a, BASE, b)});\r\n    }\r\n\r\n    // ============ Self Functions ============\r\n\r\n    function add(D256 memory self, uint256 b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: self.value.add(b.mul(BASE))});\r\n    }\r\n\r\n    function sub(D256 memory self, uint256 b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: self.value.sub(b.mul(BASE))});\r\n    }\r\n\r\n    function sub(\r\n        D256 memory self,\r\n        uint256 b,\r\n        string memory reason\r\n    ) internal pure returns (D256 memory) {\r\n        return D256({value: self.value.sub(b.mul(BASE), reason)});\r\n    }\r\n\r\n    function mul(D256 memory self, uint256 b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: self.value.mul(b)});\r\n    }\r\n\r\n    function div(D256 memory self, uint256 b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: self.value.div(b)});\r\n    }\r\n\r\n    function pow(D256 memory self, uint256 b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        if (b == 0) {\r\n            return from(1);\r\n        }\r\n\r\n        D256 memory temp = D256({value: self.value});\r\n        for (uint256 i = 1; i < b; i++) {\r\n            temp = mul(temp, self);\r\n        }\r\n\r\n        return temp;\r\n    }\r\n\r\n    function add(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: self.value.add(b.value)});\r\n    }\r\n\r\n    function sub(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: self.value.sub(b.value)});\r\n    }\r\n\r\n    function sub(\r\n        D256 memory self,\r\n        D256 memory b,\r\n        string memory reason\r\n    ) internal pure returns (D256 memory) {\r\n        return D256({value: self.value.sub(b.value, reason)});\r\n    }\r\n\r\n    function mul(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: getPartial(self.value, b.value, BASE)});\r\n    }\r\n\r\n    function div(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({value: getPartial(self.value, BASE, b.value)});\r\n    }\r\n\r\n    function equals(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return self.value == b.value;\r\n    }\r\n\r\n    function greaterThan(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return compareTo(self, b) == 2;\r\n    }\r\n\r\n    function lessThan(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return compareTo(self, b) == 0;\r\n    }\r\n\r\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return compareTo(self, b) > 0;\r\n    }\r\n\r\n    function lessThanOrEqualTo(D256 memory self, D256 memory b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return compareTo(self, b) < 2;\r\n    }\r\n\r\n    function isZero(D256 memory self) internal pure returns (bool) {\r\n        return self.value == 0;\r\n    }\r\n\r\n    function asUint256(D256 memory self) internal pure returns (uint256) {\r\n        return self.value.div(BASE);\r\n    }\r\n\r\n    // ============ Core Methods ============\r\n\r\n    function getPartial(\r\n        uint256 target,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    ) private pure returns (uint256) {\r\n        return target.mul(numerator).div(denominator);\r\n    }\r\n\r\n    function compareTo(D256 memory a, D256 memory b)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (a.value == b.value) {\r\n            return 1;\r\n        }\r\n        return a.value > b.value ? 2 : 0;\r\n    }\r\n}\r\n\r\ninterface MethodSign {\r\n    //erc20\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    //dao\r\n    function deposit(uint256 value) external;\r\n\r\n    function withdraw(uint256 value) external;\r\n\r\n    function bond(uint256 value) external;\r\n\r\n    function unbond(uint256 value) external;\r\n\r\n    function epoch() external view returns (uint256);\r\n\r\n    function balanceOfBonded(address account) external view returns (uint256);\r\n\r\n    function balanceOfStaged(address account) external view returns (uint256);\r\n\r\n    //oracle\r\n    function capture() external returns (Decimal.D256 memory, bool);\r\n}\r\n\r\ncontract DollarBankForESD {\r\n    using SafeMath for uint256;\r\n    using Decimal for Decimal.D256;\r\n    struct Player {\r\n        uint256 balance;\r\n        uint256 updatedRoundNum;\r\n        uint256 rewardBalance;\r\n    }\r\n    struct Round {\r\n        uint256 startEpoch;\r\n        uint256 startBalance;\r\n        uint256 endBalance;\r\n        mapping(address => uint256) withdrawedReward;\r\n        uint256[] blockNumPoint;\r\n        bool startPointStatus;\r\n        bool isEnd;\r\n    }\r\n    MethodSign public constant dollar =\r\n        MethodSign(0x36F3FD68E7325a35EB768F1AedaAe9EA0689d723);\r\n    MethodSign public dao;\r\n    MethodSign public constant asc = MethodSign(0x2D352aab66bD16127FEAd5D6f501390adF4D205d);\r\n    uint256 public currentRoundNum;\r\n    mapping(uint256 => Round) public roundsMap;\r\n    mapping(address => Player) public playersMap;\r\n    uint256 public constant waitEpoch = 3;\r\n    uint256 public coldTime; //4 hours\r\n    uint256 public genesisEndTime; //6 days\r\n    uint256 public constant genesisDollarAmount = 20 * 1e4 * 1e18; //200,000 Dollar\r\n    address payable public owner;\r\n    \r\n    //genesis reward var\r\n    uint256 private genesisTotalReward;\r\n    uint256 public genesisTotalDollar;\r\n    uint256 public lastBlockNum;\r\n    mapping(address=>uint256) public genesisReward;\r\n    mapping(address=>uint256) public genesisBlock;\r\n    \r\n    //500% profit asc in 6 days\r\n    uint256 public genesisRate = uint256(1e10).mul(5).div(34560);\r\n    \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        coldTime = now;\r\n        //dollar dao contract addr\r\n        dao = MethodSign(0x443D2f2755DB5942601fa062Cc248aAA153313D3);\r\n        \r\n        genesisEndTime = now + 6 days;\r\n        owner = msg.sender;\r\n        \r\n        //create asc token\r\n        //asc = new ASC();\r\n    }\r\n\r\n    function getRoundReward(uint256 num) public view returns (uint256) {\r\n        Round memory r = roundsMap[num];\r\n        if (r.blockNumPoint.length == 0) return 0;\r\n        if (r.blockNumPoint.length == 1) {\r\n            if (r.startPointStatus) {\r\n                return block.number.sub(r.blockNumPoint[0]).mul(3);\r\n            } else {\r\n                return block.number.sub(r.blockNumPoint[0]).mul(10);\r\n            }\r\n        }\r\n        uint256 totalReward = 0;\r\n        bool initStatus = r.startPointStatus;\r\n        for (uint256 i = 0; i < r.blockNumPoint.length - 1; i++) {\r\n            if (initStatus) {\r\n                totalReward = totalReward.add(\r\n                    r.blockNumPoint[i + 1].sub(r.blockNumPoint[i]).mul(3)\r\n                );\r\n            } else {\r\n                totalReward = totalReward.add(\r\n                    r.blockNumPoint[i + 1].sub(r.blockNumPoint[i]).mul(10)\r\n                );\r\n            }\r\n            initStatus = !initStatus;\r\n        }\r\n        if (!r.isEnd) {\r\n            if (initStatus) {\r\n                totalReward = totalReward.add(\r\n                    block\r\n                        .number\r\n                        .sub(r.blockNumPoint[r.blockNumPoint.length - 1])\r\n                        .mul(3)\r\n                );\r\n            } else {\r\n                totalReward = totalReward.add(\r\n                    block\r\n                        .number\r\n                        .sub(r.blockNumPoint[r.blockNumPoint.length - 1])\r\n                        .mul(10)\r\n                );\r\n            }\r\n        }\r\n        return totalReward;\r\n    }\r\n\r\n    //return user Dollar balance,reward asc,not end reward of asc\r\n    //consider compound interest\r\n    function getPlayerStatus(address adr)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        Player memory ply = playersMap[adr];\r\n        //if balance eq 0 means called updatePlayerStatus or new player\r\n        if (ply.balance == 0) return (ply.balance, ply.rewardBalance, 0);\r\n\r\n        uint256 balance = ply.balance;\r\n        uint256 rewardBalance = ply.rewardBalance;\r\n        //for genesis reward\r\n        if (currentRoundNum == 0) {\r\n            rewardBalance = rewardBalance.add(playersMap[msg.sender].balance.mul(block.number - genesisBlock[msg.sender]).mul(genesisRate).div(1e10));\r\n        }\r\n        uint256 roundNum = ply.updatedRoundNum + 1;\r\n        uint256 lastReward = 0;\r\n        while (roundsMap[roundNum].startEpoch != 0) {\r\n            uint256 precent =\r\n                balance.mul(1e5).div(roundsMap[roundNum].startBalance);\r\n            if (roundsMap[roundNum].isEnd) {\r\n                balance = roundsMap[roundNum].endBalance.mul(precent).div(1e5);\r\n            }\r\n            lastReward = getRoundReward(roundNum).mul(precent).div(1e5).sub(\r\n                roundsMap[roundNum].withdrawedReward[adr]\r\n            );\r\n            rewardBalance = rewardBalance.add(lastReward);\r\n            roundNum++;\r\n        }\r\n        return (balance, rewardBalance, lastReward);\r\n    }\r\n\r\n    function updatePlayerStatus() private returns (uint256) {\r\n        if (currentRoundNum == 0) return 0;\r\n        uint256 balance;\r\n        uint256 rewardBalance;\r\n        uint256 lastReward;\r\n        (balance, rewardBalance, lastReward) = getPlayerStatus(msg.sender);\r\n        playersMap[msg.sender].balance = balance;\r\n        if (roundsMap[currentRoundNum].isEnd) {\r\n            playersMap[msg.sender].updatedRoundNum = currentRoundNum;\r\n            playersMap[msg.sender].rewardBalance = rewardBalance;\r\n        } else {\r\n            playersMap[msg.sender].updatedRoundNum = currentRoundNum.sub(1);\r\n            playersMap[msg.sender].rewardBalance = rewardBalance.sub(\r\n                lastReward\r\n            );\r\n        }\r\n        return lastReward;\r\n    }\r\n\r\n    //withdraw asc\r\n    function withdrawReward() public returns (bool) {\r\n        require(currentRoundNum > 0, \"not start, in genesis\");\r\n        uint256 lastReward = updatePlayerStatus();\r\n        uint256 totalReward = 0;\r\n        if (roundsMap[currentRoundNum].isEnd) {\r\n            totalReward = playersMap[msg.sender].rewardBalance;\r\n            playersMap[msg.sender].rewardBalance = 0;\r\n        } else {\r\n            roundsMap[currentRoundNum].withdrawedReward[\r\n                msg.sender\r\n            ] = lastReward;\r\n            totalReward = playersMap[msg.sender].rewardBalance.add(lastReward);\r\n            playersMap[msg.sender].rewardBalance = 0;\r\n        }\r\n        //transfer totalReward\r\n        asc.mint(msg.sender, totalReward);\r\n        return true;\r\n    }\r\n    \r\n    function calTotalReward() private{\r\n        if(lastBlockNum!=0){\r\n            genesisTotalReward = genesisTotalReward.add(genesisTotalDollar.mul(block.number-lastBlockNum).mul(genesisRate).div(1e10));\r\n        }\r\n        lastBlockNum=block.number;\r\n    }\r\n    \r\n    function getTotalReward() public view returns(uint256){\r\n        return genesisTotalReward.add(genesisTotalDollar.mul(block.number-lastBlockNum).mul(genesisRate).div(1e10));\r\n    }\r\n\r\n    function depositDollar(uint256 amount) public returns (bool) {\r\n        require(now > 1609948799,'not start');\r\n        require(amount > 0, \"amount wrong\");\r\n        require(\r\n            currentRoundNum == 0 || roundsMap[currentRoundNum].isEnd,\r\n            \"not complete\"\r\n        );\r\n        bool ret = dollar.transferFrom(msg.sender, address(this), amount);\r\n        require(ret, \"fail\");\r\n        updatePlayerStatus();\r\n        \r\n        //genesis reward\r\n        if (currentRoundNum == 0) {\r\n            require(playersMap[msg.sender].balance.add(amount)<=20000*1e18,'limit');\r\n            if(playersMap[msg.sender].balance>0){\r\n                uint256  interest = playersMap[msg.sender].balance.mul(block.number - genesisBlock[msg.sender]).mul(genesisRate).div(1e10);\r\n                playersMap[msg.sender].rewardBalance = playersMap[msg.sender]\r\n                .rewardBalance\r\n                .add(interest);\r\n            }\r\n            genesisBlock[msg.sender]=block.number;\r\n            \r\n            calTotalReward();\r\n            genesisTotalDollar=genesisTotalDollar.add(amount);\r\n        }\r\n        \r\n        playersMap[msg.sender].balance = playersMap[msg.sender].balance.add(\r\n            amount\r\n        );\r\n    }\r\n\r\n    function daoAddr(address adr) public onlyOwner {\r\n        dao = MethodSign(adr);\r\n    }\r\n\r\n    function withdrawDollar(uint256 amount) public returns (bool) {\r\n        require(amount > 0, \"amount wrong\");\r\n        require(\r\n            currentRoundNum == 0 || roundsMap[currentRoundNum].isEnd,\r\n            \"not complete\"\r\n        );\r\n        updatePlayerStatus();\r\n        require(playersMap[msg.sender].balance >= amount, \"amount wrong\");\r\n        //transfer amount\r\n        playersMap[msg.sender].balance = playersMap[msg.sender].balance.sub(\r\n            amount\r\n        );\r\n        dollar.transfer(msg.sender, amount);\r\n        //sub genesis reward\r\n        if (currentRoundNum == 0) {\r\n            //calc genesisTotalReward\r\n            genesisTotalReward=genesisTotalReward.sub(playersMap[msg.sender].rewardBalance).sub(playersMap[msg.sender].balance.mul(block.number - genesisBlock[msg.sender]).mul(genesisRate).div(1e10));\r\n            playersMap[msg.sender].rewardBalance = 0;\r\n            genesisTotalDollar=genesisTotalDollar.sub(amount);\r\n            calTotalReward();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //deposit and bond to dollar dao\r\n    //true means oraclePrice >1 else <1\r\n    function depositAndBond(bool oraclePrice,bool isInflation) external onlyOwner {\r\n        require(\r\n            currentRoundNum == 0 || roundsMap[currentRoundNum].isEnd,\r\n            \"not start\"\r\n        );\r\n        require(now > coldTime, \"wait for coldTime\");\r\n        uint256 startBalance = dollar.balanceOf(address(this));\r\n        //genesis start check\r\n        if (currentRoundNum == 0) {\r\n            require(isInflation || startBalance >= genesisDollarAmount || now >= genesisEndTime);\r\n        }\r\n        dollar.approve(address(dao), startBalance);\r\n        dao.deposit(startBalance);\r\n        dao.bond(startBalance);\r\n        currentRoundNum = currentRoundNum + 1;\r\n        uint256 startEpoch = dao.epoch();\r\n\r\n        uint256[] memory blockNumPoint = new uint256[](1);\r\n        blockNumPoint[0] = block.number;\r\n        //get oracle price and set\r\n        //(Decimal.D256 memory price, bool valid) = oracle.capture();\r\n        //roundsMap[currentRoundNum] = Round(startEpoch,startBalance,0,blockNumPoint, price.greaterThan(Decimal.one()) ,false);\r\n        roundsMap[currentRoundNum] = Round(\r\n            startEpoch,\r\n            startBalance,\r\n            0,\r\n            blockNumPoint,\r\n            oraclePrice,\r\n            false\r\n        );\r\n        asc.mint(owner,genesisTotalReward);\r\n    }\r\n\r\n    //for dao withdraw\r\n    function withdraw() external {\r\n        require(\r\n            currentRoundNum > 0 && !roundsMap[currentRoundNum].isEnd,\r\n            \"not start\"\r\n        );\r\n        uint256 endBalance = dao.balanceOfStaged(address(this));\r\n        dao.withdraw(endBalance);\r\n        roundsMap[currentRoundNum].endBalance = endBalance;\r\n        roundsMap[currentRoundNum].blockNumPoint.push(block.number);\r\n        roundsMap[currentRoundNum].isEnd = true;\r\n        coldTime = now + 4 hours;\r\n    }\r\n\r\n    //for dao unbond\r\n    function unbond() external {\r\n        require(\r\n            currentRoundNum > 0 && !roundsMap[currentRoundNum].isEnd,\r\n            \"not start\"\r\n        );\r\n        require(\r\n            dao.epoch() > roundsMap[currentRoundNum].startEpoch + waitEpoch,\r\n            \"wait\"\r\n        );\r\n        dao.unbond(dao.balanceOfBonded(address(this)));\r\n    }\r\n\r\n    function notifyPriceDirChange() public onlyOwner {\r\n        require(\r\n            currentRoundNum > 0 && !roundsMap[currentRoundNum].isEnd,\r\n            \"not start\"\r\n        );\r\n        //(Decimal.D256 memory price, bool valid) = oracle.capture();\r\n        roundsMap[currentRoundNum].blockNumPoint.push(block.number);\r\n    }\r\n    \r\n    function() external payable{\r\n        owner.transfer(msg.value);\r\n    }\r\n}"
    }
  }
}