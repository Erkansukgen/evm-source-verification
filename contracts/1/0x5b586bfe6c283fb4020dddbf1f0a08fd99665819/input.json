{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/nftstake.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\n// File: @openzeppelin/contracts/ownership/Ownable.sol\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n \ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StakedTokenWrapper {\n    uint256 public totalSupply;\n\n    mapping(address => uint256) private _balances;\n    mapping(uint256 => bool) public isStaked;\n    mapping(uint256 => address) public stakerOf;\n    mapping(address => uint128[]) public tokensOf;\n    mapping(uint128 => uint256) public _tokenIndex; \n    \n    // IERC20 public stakedToken;\n    IERC721 public stakedToken;\n    \n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    string constant _transferErrorMessage = \"staked token transfer failed\";\n\n    // TODO: update for NFT\n    function stakeFor(address forWhom, uint128 id) public payable virtual {\n        IERC721 st = stakedToken;\n\n        require(!isStaked[id], \"already staked\");\n        require(id > 0 && id <= 10000 , \"id out of range\");\n        \n        st.transferFrom(msg.sender, address(this), id);\n        unchecked { \n            totalSupply += 1;\n            _balances[forWhom] += 1;\n            isStaked[id] = true;\n            stakerOf[id] = forWhom;\n            \n            // Save tokens to users list\n            // TODO: confirm this is correct\n            tokensOf[forWhom].push(id);\n            _tokenIndex[id] = tokensOf[forWhom].length-1;\n        }\n        \n        emit Staked(forWhom, id);\n    }\n    \n    function getTokensOf(address addr) public view returns(uint128[] memory) {\n        return tokensOf[addr];\n    }\n    \n    // TODO: update for NFT \n    function withdraw(uint128 id) public virtual {\n        require(stakerOf[id] == msg.sender, \"only the staker can withdraw\");\n        unchecked {\n            _balances[msg.sender] -= 1;\n            totalSupply = totalSupply-1;\n            isStaked[id] = false;\n            delete stakerOf[id];\n        }\n        \n        IERC721 st = stakedToken;\n        st.transferFrom(address(this), msg.sender, id);\n        \n        // Remove tokens from users list\n        uint256 length = tokensOf[msg.sender].length;\n        uint128 lastToken = tokensOf[msg.sender][length-1];\n        uint256 position = _tokenIndex[id];\n        \n        // overwrite deleted token with last token\n        tokensOf[msg.sender][position] = lastToken;\n        tokensOf[msg.sender].pop(); // remove last token\n        \n        // update lastToken tokens index\n        _tokenIndex[lastToken] = position;\n        delete _tokenIndex[id];\n        \n        emit Withdrawn(msg.sender, id);\n    }\n}\n\ncontract DOENFTRewards is StakedTokenWrapper, Ownable {\n    IERC20 public rewardToken;\n    uint256 public rewardRate;\n    uint64 public periodFinish;\n    uint64 public lastUpdateTime;\n    uint128 public rewardPerTokenStored;\n    struct UserRewards {\n        uint128 userRewardPerTokenPaid;\n        uint128 rewards;\n    }\n    mapping(address => UserRewards) public userRewards;\n\n    event RewardAdded(uint256 reward);\n    event RewardPaid(address indexed user, uint256 reward);\n\n    constructor(IERC20 _rewardToken, IERC721 _stakedToken) {\n        rewardToken = _rewardToken;\n        stakedToken = _stakedToken;\n    }\n\n    modifier updateReward(address account) {\n        uint128 _rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        rewardPerTokenStored = _rewardPerTokenStored;\n        userRewards[account].rewards = earned(account);\n        userRewards[account].userRewardPerTokenPaid = _rewardPerTokenStored;\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint64) {\n        uint64 blockTimestamp = uint64(block.timestamp);\n        return blockTimestamp < periodFinish ? blockTimestamp : periodFinish;\n    }\n\n    function rewardPerToken() public view returns (uint128) {\n        uint256 totalStakedSupply = totalSupply;\n        if (totalStakedSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        unchecked {\n            uint256 rewardDuration = lastTimeRewardApplicable()-lastUpdateTime;\n            return uint128(rewardPerTokenStored + rewardDuration*rewardRate*1e18/totalStakedSupply);\n        }\n    }\n\n    function earned(address account) public view returns (uint128) {\n        unchecked { \n            return uint128(balanceOf(account)*(rewardPerToken()-userRewards[account].userRewardPerTokenPaid)/1e18 + userRewards[account].rewards);\n        }\n    }\n\n    function stake(uint128 id) external payable {\n        stakeFor(msg.sender, id);\n    }\n\n    function stakeFor(address forWhom, uint128 id) public payable override updateReward(forWhom) {\n        super.stakeFor(forWhom, id);\n    }\n\n    function withdraw(uint128 id) public override updateReward(msg.sender) {\n        super.withdraw(id);\n    }\n    \n    // NEW\n    function stakeBatch(uint128[] memory batch) public {\n        for(uint256 i=0; i < batch.length; i++) {\n            stakeFor(msg.sender, batch[i]);\n        }\n    }\n    \n    // NEW\n    function withdrawBatch(uint128[] memory batch) public {\n        uint128[] memory _batch = batch;\n        for(uint256 i=0; i < _batch.length; i++) {\n            withdraw(batch[i]);\n        }\n    }\n\n    function exit() external {\n        getReward();\n        // TODO: this doesnt work\n        withdrawBatch(tokensOf[msg.sender]);\n    }\n\n    function getReward() public updateReward(msg.sender) {\n        uint256 reward = earned(msg.sender);\n        if (reward > 0) {\n            userRewards[msg.sender].rewards = 0;\n            require(rewardToken.transfer(msg.sender, reward), \"reward transfer failed\");\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function setRewardParams(uint128 reward, uint64 duration) external onlyOwner {\n        unchecked {\n            require(reward > 0);\n            rewardPerTokenStored = rewardPerToken();\n            uint64 blockTimestamp = uint64(block.timestamp);\n            uint256 maxRewardSupply = rewardToken.balanceOf(address(this));\n            uint256 leftover = 0;\n            if (blockTimestamp >= periodFinish) {\n                rewardRate = reward/duration;\n            } else {\n                uint256 remaining = periodFinish-blockTimestamp;\n                leftover = remaining*rewardRate;\n                rewardRate = (reward+leftover)/duration;\n            }\n            require(reward+leftover <= maxRewardSupply, \"not enough tokens\");\n            lastUpdateTime = blockTimestamp;\n            periodFinish = blockTimestamp+duration;\n            emit RewardAdded(reward);\n        }\n    }\n\n    function withdrawReward() external onlyOwner {\n        uint256 rewardSupply = rewardToken.balanceOf(address(this));\n        //ensure funds staked by users can't be transferred out\n        require(rewardToken.transfer(msg.sender, rewardSupply));\n        rewardRate = 0;\n        periodFinish = uint64(block.timestamp);\n    }\n}\n"
    }
  }
}