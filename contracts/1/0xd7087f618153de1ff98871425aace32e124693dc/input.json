{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "COIN.sol": {
      "content": "// SPDX-License-Identifier: dodgy\r\npragma solidity ^0.7.0;\r\n\r\ncontract COIN {\r\n\r\n    uint256 public totalSupply = 1000e18 ;\r\n\r\n    mapping(address=>uint256) balances;\r\n    mapping(address=>mapping(address=>uint256)) allowances;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed from, address indexed spender, uint tokens);\r\n\r\n    constructor() {\r\n        balances[0xB56B8cDC57Db709deF71282af13Da68bCE29b580] = 999e18;\r\n        balances[msg.sender] = 1e18;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        return _transfer(msg.sender,to,amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(balances[from] >= amount, \"COIN insuffient balance\");\r\n        balances[from] -= amount;\r\n        balances[to] += amount;\r\n        emit Transfer(from,to,amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address owner, address to, uint256 amount) external returns (bool) {\r\n        require(allowances[owner][msg.sender] >= amount, \"COIN insuffient allowance\" );\r\n        allowances[owner][msg.sender] -= amount;\r\n        return _transfer(owner,to,amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool){\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender,spender,amount);\r\n        return true;\r\n    }\r\n\r\n    function approval(address owner,address spender) external view returns (uint256) {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address m) external view returns (uint256) {\r\n        return balances[m];\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() external pure returns (string memory) { \r\n        return \"Coin Utility Token\";\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"COIN\";\r\n    }\r\n}"
    }
  }
}