{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Vester.sol":{"content":"// Sources flattened with hardhat v2.7.0 https://hardhat.org\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/core/Vester.sol\r\n\r\n/**\r\n * Vester Error Codes\r\n * V1: vesting start time (_vestingBegin) must be set greater than or equal to current block time\r\n * V2: vesting cliff must be set greater than or equal to vesting start time (_vestingBegin)\r\n * V3: vesting end time (_vestingEnd) must be set greater than vesting cliff\r\n * V4: cannot call claim, the current block time must be greater than or equal to the vesting cliff period\r\n * V5: setRecipient can only be called by the current set recipient\r\n */\r\n\r\n/**\r\n * @title Vester\r\n */\r\n\r\ncontract Vester {\r\n    address public recipient;\r\n    address public immutable token;\r\n\r\n    uint256 public lastUpdate;\r\n\r\n    uint256 public immutable vestingAmount;\r\n    uint256 public immutable vestingBegin;\r\n    uint256 public immutable vestingCliff;\r\n    uint256 public immutable vestingEnd;\r\n\r\n    constructor(\r\n        address _recipient,\r\n        address _token,\r\n        uint256 _vestingAmount,\r\n        uint256 _vestingBegin,\r\n        uint256 _vestingCliff,\r\n        uint256 _vestingEnd\r\n    ) {\r\n        require(_vestingBegin >= block.timestamp, \"V1\");\r\n        require(_vestingCliff >= _vestingBegin, \"V2\");\r\n        require(_vestingEnd > _vestingCliff, \"V3\");\r\n\r\n        recipient = _recipient;\r\n        token = _token;\r\n\r\n        vestingAmount = _vestingAmount;\r\n        vestingBegin = _vestingBegin;\r\n        vestingCliff = _vestingCliff;\r\n        vestingEnd = _vestingEnd;\r\n\r\n        lastUpdate = _vestingBegin;\r\n    }\r\n\r\n    function claim() public {\r\n        require(block.timestamp >= vestingCliff, \"V4\");\r\n\r\n        uint256 amount;\r\n        uint256 _vestingEnd = vestingEnd;\r\n\r\n        if (block.timestamp >= _vestingEnd) {\r\n            amount = IERC20(token).balanceOf(address(this));\r\n        } else {\r\n            amount =\r\n                (vestingAmount * (block.timestamp - lastUpdate)) /\r\n                (_vestingEnd - vestingBegin);\r\n            lastUpdate = block.timestamp;\r\n        }\r\n\r\n        IERC20(token).transfer(recipient, amount);\r\n    }\r\n\r\n    function setRecipient(address _recipient) public {\r\n        require(msg.sender == recipient, \"V5\");\r\n\r\n        recipient = _recipient;\r\n    }\r\n}"}}}