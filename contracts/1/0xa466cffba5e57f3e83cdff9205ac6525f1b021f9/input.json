{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "STPL.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     \n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function isOwner(address account) public view returns (bool) {\n        if( account == owner ){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    function transferOwnership(address _owner) public onlyOwner {\n        require(_owner != address(0));\n        owner = _owner;\n\n        emit OwnershipTransferred(owner, _owner);\n    }\n}\n\n\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// ----------------------------------------------------------------------------\n// Token Staking Contract\n//\n// (c) Alan Kim / Plumbug Studio Inc. 2022. \n// ----------------------------------------------------------------------------\n\ncontract ERC20Stakable is Ownable {\n    using SafeMath for uint256;\n    IERC20 private _token;\n    bool private _paused;\n\n    struct LockInfo {\n        uint256 _locked;\n        uint256 _releaseTime;\n    }\n\n    struct StakingInfo {\n        uint256 _stakedAt; \n        uint256 _fixedAt; \n        uint256 _fixed; \n        uint256 _harvested; \n        uint256 _amount; \n        LockInfo[] _lockup;\n    }\n\n    mapping (address => StakingInfo) public stakingList;\n    uint256 public totalStaking;\n    address[] public stakers;\n\n    event Staking(address indexed holder, uint256 value);\n    event Unstaking(address indexed holder, uint256 value);\n    event Harvest(address indexed holder, uint256 value, uint256 releaseTime);\n    event Paused(address account);\n    event Unpaused(address account);\n\n    uint256 constant CYCLE = 12 hours; // 12 HOUR\n    uint256 constant UNSTAKING_LIMIT = 72 hours; // 3 DAY\n\n    uint256 constant REWARD1 = 41095.8904 ether;\n    uint256 constant REWARD2 = 32876.7123 ether;\n    uint256 constant REWARD3 = 19726.0273 ether;\n    uint256 constant REWARD4 = 15780.8219 ether;\n    uint256 constant REWARD5 = 12624.6575 ether;\n    uint256 constant REWARD6 = 10099.7260 ether;\n\n    uint256 constant TIMEZONE_KOR = 32400;\n\n    uint256 constant TERM1 = 1656633600 - TIMEZONE_KOR; // 2022.07.01\n    uint256 constant TERM2 = 1672531200 - TIMEZONE_KOR; // 2023.01.01\n    uint256 constant TERM3 = 1688169600 - TIMEZONE_KOR; // 2023.07.01\n    uint256 constant TERM4 = 1704067200 - TIMEZONE_KOR; // 2024.01.01\n    uint256 constant TERM5 = 1719792000 - TIMEZONE_KOR; // 2024.07.01\n    uint256 constant TERM6 = 1735689600 - TIMEZONE_KOR; // 2025.01.01\n\n\n\n    constructor(IERC20 token) {\n        _token = token;\n        _paused = false;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n    \n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        uint256 totalBalance = _token.balanceOf(owner);\n        return totalBalance;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        return _token.transferFrom(msg.sender, to, value);\n    }\n\n    function truncateBalance() public onlyOwner returns (bool) {\n        require(balanceOf(address(this)) > 0);\n        return _token.transferFrom(address(this), owner, balanceOf(address(this)));\n    }\n\n    function stakingAmount(uint256 value) public whenNotPaused returns (bool) {\n        require(fixReward());\n        _staking(msg.sender, value);\n        return true;\n    }\n\n    function unstakingAmount() public whenNotPaused returns (bool) {\n        require(harvest());\n        _unstaking(msg.sender);\n        return true;\n    }\n\n\n    function getStandardReward() public view returns (uint256){\n        return _getReward(block.timestamp);\n    }\n\n    function isPaused() public view returns (bool){\n        return _paused;\n    }\n\n    function getLocked() public view returns (uint256){\n        uint256 locked = 0;\n        for(uint256 i=0; i<stakingList[msg.sender]._lockup.length; i++){\n            if(stakingList[msg.sender]._lockup[i]._releaseTime > block.timestamp){\n                locked = locked.add(stakingList[msg.sender]._lockup[i]._locked);   \n            }\n        }\n        return locked;\n    }\n\n    function getLockInfo(uint256 index) public view returns (LockInfo memory){\n        return stakingList[msg.sender]._lockup[index];\n    }\n\n    function harvest() public whenNotPaused returns (bool) {\n        // require(block.timestamp - stakingList[msg.sender]._fixedAt > CYCLE);\n        require(fixReward());\n        require(stakingList[msg.sender]._fixed > 0);\n        _token.transfer(msg.sender, stakingList[msg.sender]._fixed);\n        stakingList[msg.sender]._harvested = stakingList[msg.sender]._harvested.add(stakingList[msg.sender]._fixed);\n        stakingList[msg.sender]._fixed = 0;\n        return true;\n    }\n\n    function fixRewardFake() public view returns (uint256) {\n        address thisAddress = msg.sender;\n\n        if(stakingList[thisAddress]._amount <= 0){\n            return 0;\n        }\n\n        uint256 diff = block.timestamp.sub(stakingList[thisAddress]._fixedAt);\n        uint256 count = 0;\n        uint256 fakeReward = 0;\n        \n        while(count < diff.div(CYCLE)){\n            uint256 thisTimestamp = block.timestamp.sub(diff).add(CYCLE.mul(count.add(1)));\n            uint256 thisFixed = _getFixed(thisAddress ,thisTimestamp);\n            fakeReward = fakeReward.add(thisFixed);\n            count++;\n        }\n\n        return stakingList[thisAddress]._fixed + fakeReward;\n    }\n\n\n    function fixReward() private returns (bool) {\n        if(stakers.length == 0){\n            return true;\n        }\n\n        for(uint256 i = 0; i < stakers.length; i++){\n           address thisAddress = stakers[i];\n           uint256 diff = block.timestamp.sub(stakingList[thisAddress]._fixedAt);\n           uint256 count = 0;\n           uint256 lastTimestamp = 0;\n\n           for(uint256 j=0; j<stakingList[thisAddress]._lockup.length; j++){\n               if(stakingList[thisAddress]._lockup[j]._releaseTime < block.timestamp){\n                   _popLockup(j, thisAddress);\n               }\n           }\n\n           while(count < diff.div(CYCLE)){\n               uint256 thisTimestamp = block.timestamp.sub(diff).add(CYCLE.mul(count.add(1)));\n               uint256 thisFixed = _getFixed(thisAddress ,thisTimestamp);\n               stakingList[thisAddress]._fixed = stakingList[thisAddress]._fixed.add(thisFixed);\n               lastTimestamp = thisTimestamp;\n               count++;\n           }\n\n            if(lastTimestamp > 0){\n                stakingList[thisAddress]._fixedAt = lastTimestamp;\n            }\n        }\n        return true;\n    }\n\n    function _popStakers(uint256 index) internal {\n        require(index < stakers.length);\n        stakers[index] = stakers[stakers.length-1];\n        stakers.pop();\n    }\n\n    function _popLockup(uint256 index, address holder) internal {\n        require(index < stakingList[holder]._lockup.length);\n        \n        stakingList[holder]._lockup[index] = stakingList[holder]._lockup[stakingList[holder]._lockup.length-1];\n        stakingList[holder]._lockup.pop();\n    }\n\n    function _getFixed(address staker, uint256 timestamp) internal view returns (uint256) {\n        uint256 rewardAll = _getReward(timestamp);\n        uint256 thisFixed = rewardAll.mul(stakingList[staker]._amount).div(totalStaking);\n        return thisFixed;\n    }\n    \n\n    function _staking(address holder, uint256 value) internal returns (bool) {        \n        totalStaking = totalStaking.add(value);\n        _token.transferFrom(holder, address(this), value);\n        if(0 == stakingList[holder]._amount){\n            stakers.push(holder);\n        }\n        stakingList[holder]._amount = stakingList[holder]._amount.add(value);\n        stakingList[holder]._lockup.push( LockInfo(value, block.timestamp.add(UNSTAKING_LIMIT.add(CYCLE.sub(block.timestamp % CYCLE))) ) );\n        stakingList[holder]._stakedAt = block.timestamp;\n        stakingList[holder]._fixedAt = block.timestamp;\n\n        emit Staking(holder, value);\n        return true;\n    }\n\n    function _unstaking(address holder) internal returns (bool) {\n        require(block.timestamp - stakingList[msg.sender]._fixedAt < CYCLE);\n        \n        uint256 locked = 0;\n        for(uint256 i=0; i<stakingList[holder]._lockup.length; i++){\n            locked = locked.add(stakingList[holder]._lockup[i]._locked);\n        }\n\n        _token.transfer(holder, stakingList[holder]._amount.sub(locked));\n\n        totalStaking = totalStaking.sub(stakingList[holder]._amount.sub(locked));\n        stakingList[holder]._amount = locked;\n\n        if(locked==0){\n            for(uint256 i = 0; i < stakers.length; i++){\n                if(stakers[i] == holder){\n                    _popStakers(i);\n                }\n            }\n        }\n\n        emit Unstaking(holder, stakingList[holder]._amount);\n        return true;\n    }\n\n    function _getReward(uint256 timestamp) internal pure returns (uint256) {\n        if(timestamp < TERM1){\n            return REWARD1;\n        }else if (timestamp < TERM2){\n            return REWARD2;\n        }else if (timestamp < TERM3){\n            return REWARD3;\n        }else if (timestamp < TERM4){\n            return REWARD4;\n        }else if (timestamp < TERM5){\n            return REWARD5;\n        }else if (timestamp < TERM6){\n            return REWARD6;\n        }else{\n            return 0;\n        }\n    }\n\n}"
    }
  }
}