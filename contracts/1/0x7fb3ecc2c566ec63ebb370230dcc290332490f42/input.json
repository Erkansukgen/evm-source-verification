{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/yLEAF.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\n/*##################################################\n* #################  yLEAF  ########################\n* ############ Deflationary  Token #################\n* ##################################################\n*\n* ##################################################\n* #### Every Token transfer initiates a 3% Burn ####\n* #### of the amount sent in each transaction.  ####\n* ##################################################\n*\n* ##################################################\n* ############### 20 November 2020 ################\n* ##################################################\n**/\npragma solidity 0.7.5;\n\nlibrary SafeMath { //Safe Maths\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\n\ncontract yLEAF {\n  using SafeMath for uint256;\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowed;\n  string constant _name = \"yLEAF\";\n  string constant _symbol = \"yLEAF\";\n  uint8  constant _decimals = 18;\n  uint256 private _totalSupply = 2000000000000000000000;\n  uint256 constant basePercent = 300;\n  address private ownerAddress = 0x5652F50Db5B7a3E753Db5c1730c7460936BE67Ce;\n  address private presaleContract = 0xA74855652777aFB6Cf8b10a44c85d687b1D19d28;\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  constructor() {\n    _issue(ownerAddress, 500000000000000000000);\n    _issue(presaleContract, 1500000000000000000000);\n  }\n  function name() public pure returns(string memory) {\n    return _name;\n  }\n  function symbol() public pure returns(string memory) {\n    return _symbol;\n  }\n  function decimals() public pure returns(uint8) {\n    return _decimals;\n  }  \n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n  function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n  function slash(uint256 value) public pure returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 slashValue = roundValue.mul(basePercent).div(10000); //Burn\n    return slashValue;\n  }\n  function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    uint256 tokensToBurn = slash(value);  // Burn on transfer\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    emit Transfer(msg.sender, to, tokensToTransfer);\n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    return true;\n  }\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n  function _transfer(address from, address to, uint256 value) internal {\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    uint256 tokensToBurn = slash(value);  //Burn on transfer\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, tokensToTransfer);\n    emit Transfer(from, address(0), tokensToBurn);\n    return true;\n  }\n  function _issue(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n  function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n  function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n  function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n  function _mint(address account, uint256 value) internal {\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n  fallback() external payable {\n      revert();\n  }\n  receive() external payable {\n      revert();\n  }\n}"
    }
  }
}