{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/uniswap/7FlashSwapForDodoSol.sol":{"content":"pragma solidity ^0.6.12;\r\n\r\nimport './libraries/UniswapV2Library.sol';\r\nimport './interfaces/IUniswapV2Pair.sol';\r\nimport './interfaces/IERC20.sol';\r\nimport './interfaces/IUniswapV2Factory.sol';\r\nimport './interfaces/IUniswapV2Callee.sol';\r\nimport './interfaces/IUniswapV2Router02.sol';\r\n\r\ninterface IDODO {\r\n    function sellBaseToken(\r\n        uint256 amount,\r\n        uint256 minReceiveQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n}\r\n\r\n\r\ncontract TestDodo is IUniswapV2Callee {\r\n    event V2Call(address sender, uint amount0, uint amount1, bytes data);\r\n\r\n    address public  uniswapFactory=0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // uniswap 工厂合约地址\r\n    address public  uniswapRouter02=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // uniswap 路由合约地址\r\n    address public  dodoPair;\r\n    address public  mywallet;\r\n    address public  owner;\r\n\r\n    constructor(address _mywallet) public payable{ \r\n        mywallet = _mywallet;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n          if (msg.sender != owner) {\r\n              revert();\r\n          }\r\n          _;\r\n    }\r\n    \r\n    function setMywallet(address _mywallet) external onlyOwner{\r\n        mywallet = _mywallet;\r\n    }\r\n    \r\n    \r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override{\r\n        emit V2Call(sender,  amount0,  amount1,  data);\r\n\r\n        (bool r, address dodoPair_, address[] memory path_) = abi.decode(data,(bool,address,address[]));\r\n        if(r){\r\n            if(path_.length>1) {\r\n                actionForPaths_r(sender, amount0, amount1, dodoPair_, path_);\r\n            } else {\r\n                actionForPath_r(sender, amount0, amount1, dodoPair_, path_);\r\n            }\r\n        } else {\r\n            if(path_.length>1) {\r\n                actionForPaths(sender, amount0, amount1, dodoPair_, path_);\r\n            } else {\r\n                actionForPath(sender, amount0, amount1, dodoPair_, path_);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function actionForPath_r(\r\n       address sender, uint amount0, uint amount1, address dodoPair_, address[] memory path_\r\n    ) private {\r\n        dodoPair = dodoPair_;\r\n        uint256 amtIn = amount0 == 0 ? amount1 : amount0;\r\n        \r\n        address[] memory p = new address[](2);\r\n        address token0 = IUniswapV2Pair(msg.sender).token0();\r\n        address token1 = IUniswapV2Pair(msg.sender).token1();\r\n        p[0] = amount0 == 0 ? token0 : token1;//TokenIn\r\n        p[1] = amount0 == 0 ? token1 : token0;//TokenOut\r\n\r\n       {\r\n           uint256 amountRequired = UniswapV2Library.getAmountsIn(\r\n                uniswapFactory,\r\n                amtIn,\r\n                p\r\n            )[0];\r\n            require(amountRequired > 0, 'amountRequired > 0!');\r\n            \r\n            safeApprove(p[1], dodoPair, uint256(-1));\r\n            uint256 dodoAmountOut = IDODO(dodoPair).buyBaseToken(amountRequired, amtIn, new bytes(0));\r\n            require(dodoAmountOut > 0, 'dodoAmountOut > 0!');\r\n\r\n            uint256 receiveToken = amtIn - dodoAmountOut;\r\n            require(receiveToken > 0, 'receiveToken > 0!');\r\n            require(receiveToken <= amtIn, 'receiveToken <= amtIn!');\r\n\r\n            safeTransfer(p[0], msg.sender, amountRequired);//偿还uni闪电贷\r\n            safeTransfer(p[1], mywallet, receiveToken);//利润打到总钱包\r\n       }\r\n    }\r\n\r\n    function actionForPaths_r(\r\n       address sender, uint amount0, uint amount1, address dodoPair_, address[] memory path_\r\n    ) private {\r\n        dodoPair = dodoPair_;\r\n        uint256 amtIn = amount0 == 0 ? amount1 : amount0;\r\n        \r\n        address[] memory p = new address[](2);\r\n        address token0 = IUniswapV2Pair(msg.sender).token0();\r\n        address token1 = IUniswapV2Pair(msg.sender).token1();\r\n        p[0] = amount0 == 0 ? token0 : token1;//TokenIn\r\n        p[1] = amount0 == 0 ? token1 : token0;//TokenOut\r\n        uint256 deadline = block.timestamp*100;\r\n        //address pair2 = UniswapV2Library.pairFor(uniswapFactory, path_[0], path_[1]);\r\n\r\n        uint256 amountOut = 0;\r\n       {\r\n            safeApprove(p[1], uniswapRouter02, uint256(-1));\r\n            //根据精确的token交换尽量多的token\r\n            uint256[] memory amounts = IUniswapV2Router02(uniswapRouter02).swapExactTokensForTokens(amtIn,0,path_,address(this),deadline);\r\n            amountOut = amounts[amounts.length-1];\r\n            require(amountOut > 0, 'amountOut > 0!');\r\n       }\r\n\r\n       {\r\n           uint256 amountRequired = UniswapV2Library.getAmountsIn(\r\n                uniswapFactory,\r\n                amtIn,\r\n                p\r\n            )[0];\r\n            require(amountRequired > 0, 'amountRequired > 0!');\r\n            safeApprove(path_[path_.length-1], dodoPair, uint256(-1));\r\n            uint256 dodoAmountOut = IDODO(dodoPair).buyBaseToken(amountRequired, uint256(-1), new bytes(0));\r\n            require(dodoAmountOut > 0, 'dodoAmountOut > 0!');\r\n\r\n            uint256 receiveToken = amountOut - dodoAmountOut;\r\n            require(receiveToken > 0, 'receiveToken > 0!');\r\n            require(receiveToken <= amountOut, 'receiveToken <= amountOut!');\r\n\r\n            safeTransfer(p[0], msg.sender, amountRequired);//偿还uni闪电贷\r\n            safeTransfer(path_[path_.length-1], mywallet, receiveToken);//利润打到总钱包\r\n       }\r\n    }\r\n\r\n    function actionForPath(\r\n       address sender, uint amount0, uint amount1, address dodoPair_, address[] memory path_\r\n    ) private {\r\n        dodoPair = dodoPair_;\r\n        uint256 dodoAmountIn = amount0 == 0 ? amount1 : amount0;\r\n        \r\n        address[] memory p = new address[](2);\r\n        address token0 = IUniswapV2Pair(msg.sender).token0();\r\n        address token1 = IUniswapV2Pair(msg.sender).token1();\r\n        p[0] = amount0 == 0 ? token0 : token1;//TokenIn\r\n        p[1] = amount0 == 0 ? token1 : token0;//TokenOut\r\n\r\n       {\r\n            safeApprove(p[1], dodoPair, uint256(-1));\r\n            uint256 dodoAmountOut = IDODO(dodoPair).sellBaseToken(dodoAmountIn, 0, new bytes(0));\r\n            require(dodoAmountOut > 0, 'dodoAmountOut > 0!');\r\n            uint256 amountRequired = UniswapV2Library.getAmountsIn(\r\n                uniswapFactory,\r\n                dodoAmountIn,\r\n                p\r\n            )[0];\r\n            require(amountRequired > 0, 'amountRequired > 0!');\r\n\r\n            uint256 receiveToken = dodoAmountOut - amountRequired;\r\n            require(receiveToken > 0, 'receiveToken > 0!');\r\n            require(receiveToken <= dodoAmountOut, 'receiveToken <= dodoAmountOut!');\r\n            \r\n            safeTransfer(p[0], msg.sender, amountRequired);//偿还uni闪电贷\r\n            safeTransfer(p[0], mywallet, receiveToken);//利润打到总钱包\r\n       }\r\n    }\r\n\r\n    function actionForPaths(\r\n       address sender, uint amount0, uint amount1, address dodoPair_, address[] memory path_\r\n    ) private {\r\n        dodoPair = dodoPair_;\r\n        uint256 Amt = amount0 == 0 ? amount1 : amount0;\r\n        \r\n        address[] memory p = new address[](2);\r\n        address token0 = IUniswapV2Pair(msg.sender).token0();\r\n        address token1 = IUniswapV2Pair(msg.sender).token1();\r\n        p[0] = amount0 == 0 ? token0 : token1;//TokenIn\r\n        p[1] = amount0 == 0 ? token1 : token0;//TokenOut\r\n        uint256 deadline = block.timestamp*100;\r\n        //address pair2 = UniswapV2Library.pairFor(uniswapFactory, path_[0], path_[1]);\r\n\r\n        uint256 dodoAmountIn = 0;\r\n       {\r\n            safeApprove(p[1], uniswapRouter02, uint256(-1));\r\n            //根据精确的token交换尽量多的token\r\n            uint256[] memory amounts = IUniswapV2Router02(uniswapRouter02).swapExactTokensForTokens(Amt,0,path_,address(this),deadline);\r\n            dodoAmountIn = amounts[amounts.length-1];\r\n            require(dodoAmountIn > 0, 'dodoAmountIn > 0!');\r\n       }\r\n\r\n       {\r\n            safeApprove(path_[path_.length-1], dodoPair, uint256(-1));\r\n            uint256 dodoAmountOut = IDODO(dodoPair).sellBaseToken(dodoAmountIn, 0, new bytes(0));\r\n            require(dodoAmountOut > 0, 'dodoAmountOut > 0!');\r\n            uint256 amountRequired = UniswapV2Library.getAmountsIn(\r\n                uniswapFactory,\r\n                Amt,\r\n                p\r\n            )[0];\r\n            require(amountRequired > 0, 'amountRequired > 0!');\r\n\r\n            uint256 receiveToken = dodoAmountOut - amountRequired;\r\n            require(receiveToken > 0, 'receiveToken > 0!');\r\n            require(receiveToken <= dodoAmountOut, 'receiveToken <= dodoAmountOut!');\r\n            \r\n            safeTransfer(p[0], msg.sender, amountRequired);//偿还uni闪电贷\r\n            safeTransfer(p[0], mywallet, receiveToken);//利润打到总钱包\r\n       }\r\n    }\r\n\r\n  \r\n    fallback () payable external {}\r\n    receive () payable external {}\r\n\r\n    function trans1() public {\r\n        uint256 amt = address(this).balance;\r\n        mywallet.call.value(amt)(new bytes(0));\r\n    }\r\n    function trans2(address tokenaddr) public {\r\n        uint256 amt = IERC20(tokenaddr).balanceOf(address(this));\r\n        safeTransfer(tokenaddr, mywallet, amt);\r\n    }\r\n   \r\n    \r\n    //SELECTOR常量值为'transfer(address,uint256)'字符串哈希值的前4位16进制数字\r\n    bytes4 private constant SELECTOR = bytes4(\r\n        keccak256(bytes(\"transfer(address,uint256)\"))\r\n    );\r\n    \r\n\t /**\r\n     * @param token token地址\r\n     * @param to    to地址\r\n     * @param value 数额\r\n     * @dev 私有安全发送\r\n     */\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        //调用token合约地址的低级transfer方法\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(SELECTOR, to, value)\r\n        );\r\n        //确认返回值为true并且返回的data长度为0或者解码后为true\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"myV3: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        // solium-disable-next-line\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n}"},"localhost/uniswap/interfaces/IERC20.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"localhost/uniswap/interfaces/IUniswapV2Callee.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"},"localhost/uniswap/interfaces/IUniswapV2Factory.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"localhost/uniswap/interfaces/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"localhost/uniswap/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"localhost/uniswap/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"localhost/uniswap/libraries/SafeMath.sol":{"content":"pragma solidity >=0.5.16;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"},"localhost/uniswap/libraries/UniswapV2Library.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\nimport '../interfaces/IUniswapV2Pair.sol';\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}"}}}