{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 5000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ABBotV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\nimport './lib/math/SafeMath.sol';\nimport './interfaces/IUniswapV2Router02.sol';\nimport './interfaces/IUniswapV2Pair.sol';\nimport './lib/token/ERC20//IERC20.sol';\n\ncontract ABBotV3 {\n    using SafeMath for uint256;\n\n    address private owner;\n    address private receiver;\n    \n    address private weth;\n    address private usdt;\n\n    address private router;\n    \n    address private tokenIn;\n    address private tokenOut;\n    address private tokenPool;\n    \n    uint256 private decimalsIn;\n    uint256 private decimalsOut;\n\n    uint256 private desiredPrice;\n    uint256 private additionalGas;\n    \n    uint256 private sellFactor;\n    uint256 private sellDenominator;\n\n    bool private autoSwitch;\n    bool private sellMode;\n\n    modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == address(this), 'Not owner');\n        _;\n    }\n\n    constructor(bool _isMainNet) public {\n        owner   =   msg.sender;\n        \n        autoSwitch  =   false;\n        sellMode    =   false;\n        \n        additionalGas   =   1 gwei;\n        sellFactor      =   200;\n        sellDenominator =   100;\n\n        if(_isMainNet == true) {\n            weth    =   0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n            usdt    =   0xdAC17F958D2ee523a2206206994597C13D831ec7;\n            \n        } else {\n            weth    =   0xc778417E063141139Fce010982780140Aa0cD5Ab; //0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n            usdt    =   0x6EE856Ae55B6E1A249f04cd3b947141bc146273c; //0xdAC17F958D2ee523a2206206994597C13D831ec7;\n        }\n    \n        router  =   0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n        \n        receiver = msg.sender;\n        \n        tokenIn     =   weth;\n        decimalsIn  =   18;\n        tokenOut    =   0x8762db106B2c2A0bccB3A80d1Ed41273552616E8; // RSR\n        decimalsOut =   18;\n        \n        desiredPrice    =   30000  * 1e18;\n       \n    }\n\n    receive() external payable {\n\n    }\n\n     // getter / setter\n    function getOwner() public view onlyOwner returns(address) { \n        return owner; \n    }\n    function setOwner(address _owner) external onlyOwner { \n        owner = _owner; \n    } \n\n    function getReceiver() public view onlyOwner returns(address) {\n        return receiver;\n    }\n    function setReceiver(address _receiver) external onlyOwner {\n        receiver =  _receiver;\n    }\n\n    function getRouter() public view returns (address) {\n        return router;\n    }\n    function setRouter(address _router) external onlyOwner {\n        router = _router;\n    }\n\n    function getWETH() public view returns(address) {\n        return weth;\n    }\n    function setWETH(address _weth) external onlyOwner {\n        weth = _weth;\n    }\n\n    function getUSDT() public view returns(address) {\n        return usdt;\n    }\n    function setUSDT(address _usdt) external onlyOwner {\n        usdt    =   _usdt;\n    }\n\n    // price per eth\n    function setPrice(uint256 _price) public onlyOwner {\n        require(_price > 0);\n        desiredPrice   =   _price;\n    }\n    function getPrice() public view onlyOwner returns(uint256) {\n        return desiredPrice;\n    }\n    \n    function setSellFactor(uint256 _factor) public onlyOwner {\n        require(_factor > 0);\n        sellFactor  =   _factor;\n    }\n    function getSellFactor() public view onlyOwner returns(uint256) {\n        return sellFactor;\n    }\n    \n    function setDenominator(uint256 _denominator) public onlyOwner {\n        require(_denominator > 0);\n        sellDenominator =   _denominator;\n    }\n    function getDenominator() public view onlyOwner returns(uint256) {\n        return sellDenominator;\n    }\n    \n    function setAdditionalGas(uint256 _gas) public onlyOwner {\n        require(_gas >= 0);\n        additionalGas   =   _gas;\n    }\n    function getAdditionalGas() public view onlyOwner returns(uint256) {\n        return additionalGas;\n    }\n    \n    function setAutoSwitch(bool _value) public onlyOwner {\n        require(autoSwitch != _value);\n        autoSwitch  =   _value;\n    }\n    function getAutoSwitch() public view onlyOwner returns(bool) {\n        return autoSwitch;\n    }\n    \n    function setMode(bool _value) public onlyOwner {\n        require(sellMode != _value);\n        sellMode    =   _value;\n    }\n    function getMode() public view onlyOwner returns(bool) {\n        return sellMode;\n    }\n\n    function setPool(address _token, address _base) internal onlyOwner {\n        require(_base != address(0));\n        require(_token != address(0));\n\n        address _pool = calcPoolAddress(_base,_token);\n        require(_pool != address(0));\n        tokenPool   =   _pool;\n    }\n    \n    function calcPoolAddress(address tokenA, address tokenB) internal pure returns (address) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        return address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, // factory\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n            ))));\n    }\n    \n    function getPool() public view onlyOwner returns(address) {\n        return tokenPool;\n    }\n\n    function setToken(address _tokenIn, address _tokenOut, uint256 _decimalsIn, uint256 _decimalsOut, uint256 _price) external onlyOwner {\n        require(_tokenIn != address(0));\n        require(_tokenOut != address(0));\n        require(_price > 0);\n\n        desiredPrice    =   _price;\n        tokenIn         =   _tokenIn;\n        tokenOut        =   _tokenOut;\n        decimalsIn      =   _decimalsIn;\n        decimalsOut     =   _decimalsOut;\n\n        setPool(_tokenOut,_tokenIn);\n    }\n    \n    function getTokenIn() public view onlyOwner returns(address) {\n        return tokenIn;\n    }\n    \n    function getDecimalsIn() public view onlyOwner returns(uint256) {\n        return decimalsIn;\n    }\n    \n    function getTokenOut() public view onlyOwner returns(address) {\n        return tokenOut;\n    }\n    function getDecimalsOut() public view onlyOwner returns(uint256) {\n        return decimalsOut;\n    }\n\n    // withdrawals\n    function withdrawEther(uint256 _amount) public onlyOwner {\n        require(receiver != address(0));\n        uint256 _balance    =   address(this).balance;\n\n        require(_balance > 0);\n        if(_balance < _amount || _amount == 0) {\n            _amount = _balance;\n        }\n\n        payable(receiver).transfer(_amount);\n    }\n    function withdrawToken(address _token, uint256 _amount) public onlyOwner {\n        require(receiver != address(0));\n        IERC20 _t   =   IERC20(_token);\n        uint256 _balance    =   _t.balanceOf(address(this));\n\n        require(_balance > 0);\n\n        if(_balance < _amount || _amount == 0) {\n            _amount =   _balance;\n        }\n\n        _t.transfer(receiver,_amount);\n    } \n\n    function canSwap() public view onlyOwner returns(uint256) {\n        require(tokenIn != address(0));\n        require(tokenOut != address(0));\n        require(tokenPool != address(0));\n        require(router != address(0));\n        //require(address(this).balance > 0, 'No funds');\n        \n        uint256 _balance = (sellMode == false) ? address(this).balance : IERC20(tokenOut).balanceOf(address(this));\n        \n        if(!(_balance > 0)) {\n            return 0;\n        }\n\n        uint256 _amountOut  =   getAmountOut(1 * (10 ** decimalsIn));\n\n        if(_amountOut >= desiredPrice) {\n            return _amountOut;\n        }\n\n        return 0;\n    }\n\n    function swap() payable external {\n        require(tokenIn != address(0));\n        require(tokenOut != address(0));\n        require(canSwap() > 0);\n        \n        if(!sellMode) {\n            swapForToken();\n        } else {    \n            swapForETH();\n        }\n        \n    }\n    \n    function swapForToken() internal {\n        uint256 _amountIn   =   address(this).balance;\n        uint256 _amountOut  =   getAmountOut(_amountIn); //_amountIn * (10 ** decimals) / purchasePrice;\n        uint256 _deadline   =   now + 1;\n        \n        require(_amountIn > 0);\n\n        address[] memory _path  =   new address[](2);\n        _path[0]                =   tokenIn;\n        _path[1]                =   tokenOut;\n\n        IUniswapV2Router02(router).swapExactETHForTokens{value:_amountIn}(_amountOut,_path,(autoSwitch == true) ? address(this) : receiver,_deadline);\n        \n        if(autoSwitch == true) {\n            sellMode        =   true;\n            desiredPrice    =   desiredPrice.mul(sellFactor).div(sellDenominator);\n        }\n    }\n    function swapForETH() internal {\n        IERC20 _token       =   IERC20(tokenOut);\n        uint256 _amountIn   =   _token.balanceOf(address(this));\n        uint256 _amountOut  =   getAmountOut(_amountIn); //_amountIn * (10 ** decimals) / purchasePrice;\n        uint256 _deadline   =   now + 1;\n        \n        require(_amountIn > 0);\n\n        address[] memory _path  =   new address[](2);\n        _path[0]                =   tokenOut;\n        _path[1]                =   tokenIn;\n        \n        _token.approve(router, _amountIn);\n        IUniswapV2Router02(router).swapExactTokensForETH(_amountIn,_amountOut,_path,receiver,_deadline);\n        \n        if(autoSwitch == true) {\n            sellMode        =   false;\n            desiredPrice    =   desiredPrice.mul(sellDenominator).div(sellFactor);\n        }\n    }\n\n    function getAmountOut(uint256 _amountIn) internal view returns(uint256 _amountOut) {\n        if(tokenIn == address(0) || tokenOut == address(0)) return 0;\n        IUniswapV2Pair _pair = IUniswapV2Pair(tokenPool);\n        require(_pair.token0() == tokenIn || _pair.token1() == tokenIn, 'No base pair found');\n        \n        address _tokenIn     =   (sellMode == false) ? tokenIn : tokenOut;\n\n        (uint256 _reserve0, uint256 _reserve1, uint256 _blockTime)  =   _pair.getReserves();\n        (uint256 _reserveIn, uint256 _reserveOut) = (_tokenIn == _pair.token0()) ? (_reserve0,_reserve1) : (_reserve1,_reserve0);\n\n        require(_amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(_reserveIn > 0 && _reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        \n        uint amountInWithFee = _amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(_reserveOut);\n        uint denominator = _reserveIn.mul(1000).add(amountInWithFee);\n        _amountOut = numerator / denominator;\n    }\n\n    function getBaseToken(bool _baseToken) internal view returns(address) {\n        return (_baseToken) ? weth : usdt;\n    }\n\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n    \n    function info() public view onlyOwner returns(uint256, uint256, address, uint256, uint256,uint256,uint256,uint256,uint256,bool,bool) {\n        address _token      =   (sellMode == false) ? getTokenOut()     :   getTokenIn();\n        uint256 _decimals   =   (sellMode == false) ? getDecimalsOut()  :   getDecimalsIn();\n        \n        return (\n            msg.sender.balance,\n            address(this).balance,\n            _token,\n            getPrice(),\n            _decimals,\n            getAmountOut(1 * (10 ** _decimals)),\n            sellFactor,\n            sellDenominator,\n            additionalGas,\n            sellMode,\n            autoSwitch\n            );\n    }\n}"
    },
    "browser/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "browser/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "browser/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "browser/lib/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    },
    "browser/lib/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  }
}