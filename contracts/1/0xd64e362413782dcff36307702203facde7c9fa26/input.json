{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/token.sol": {
      "content": "pragma solidity ^0.6.1;\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    }\r\n\r\n\r\ncontract DLT {\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner,\"you are not a owner\");\r\n        _;\r\n    }\r\n    \r\n    address payable public owner;\r\n    function changeOwner(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner!=address(0));\r\n        owner = _newOwner;\r\n    }\r\n     using SafeMath for uint256;\r\n     \r\n\tuint256[5] public REFERRAL_PERCENTS = [10,50,30,10,10];\r\n\tuint256[5] public REFERRAL_LIMITS=[60e9,400e9, 800e9,1500e9,2000e9];\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n    uint256 totalSupply=1000000e9;\r\n    uint256 public price=10e8;\r\n    string public symbol=\"DLT\";\r\n    string public name=\"Decentralized Luxury Token\";\r\n    uint8 public decimals=9;\r\n    mapping (address=>uint256) balances;\r\n    mapping (address=>mapping (address=>uint256)) allowed;\r\n    \r\n    \r\n    bool public lockBuying;\r\n    bool public lockSelling;\r\n    bool public lockwithdrawl;\r\n    struct User{\r\n    uint256 totalTokenBought;\r\n    uint256 totalTokenSold;\r\n    }\r\n    mapping(address=>User)public users;\r\n    uint256 public totalUsers;\r\n    uint256 sale;\r\n// \tuint256 public tokenSold;\r\n// \tuint256 public TokenBought; \r\n     struct REF{\r\n\t\taddress referrer;\r\n\t\tuint256 reffrals;\r\n\t\tuint256 bonus;\r\n\t\tuint256 withdrawRef;\r\n// \t\taddress[] reffralArray;\r\n\t} \r\n\t\r\n\t\r\n\tevent Sell(uint256 ,address);\r\n\tevent Buy(uint256 ,address );\r\n\tmapping (address=>REF)public refusers;\r\n    function balanceOf(address _owner) view public   returns (uint256 balance) {return balances[_owner];}\r\n    function transfer(address _to, uint256 _amount) public   returns (bool success) {\r\n        balances[msg.sender]=balances[msg.sender].sub(_amount);\r\n        balances[_to]=balances[_to].add(_amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from,address _to,uint256 _amount) public   returns (bool success) {\r\n        balances[_from]=balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender]=allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to]=balances[_to].add(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _amount) public   returns (bool success) {\r\n        allowed[msg.sender][_spender]=_amount;\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public   returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n  \r\n    constructor(address payable _owner) public{\r\n        owner = _owner;\r\n        balances[address(this)] = totalSupply;\r\n    }\r\n    function _mint(uint256 amount) external onlyOwner  {\r\n        balances[owner] += amount;\r\n        totalSupply=totalSupply.add(amount);\r\n    }\r\n   \r\n   \tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn refusers[userAddress].referrer;\r\n\t}\r\n  \r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256) {\r\n\t \treturn (refusers[userAddress].reffrals);\r\n\t \t\r\n\t}\r\n// \tfunction totalReferals(address userAddress)public view returns(address [] memory){\r\n// \t    return refusers[userAddress].reffralArray;\r\n// \t}\r\n   \r\n    function tokenToEthereum(uint256 _numberOfTokens)view public returns(uint256){\r\n       require(_numberOfTokens<30000e9,\"you are exceeding your limit\");    \r\n        if(totalSupply<=1000000e9&&totalSupply>=930000e9){\r\n            uint256 a=totalSupply.sub(930000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(14e7).add(two.mul(10e7))); \r\n      }\r\n      \r\n      else if(totalSupply<=930000e9&&totalSupply>=860000e9){\r\n          uint256 a=totalSupply.sub(860000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(23e7).add(two.mul(14e7)));\r\n      } \r\n     \r\n      else if(totalSupply<=860000e9&&totalSupply>=800000e9){\r\n          uint256 a=totalSupply.sub(800000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(35e7).add(two.mul(23e7)));\r\n      } \r\n      else if(totalSupply<=800000e9&&totalSupply>=740000e9){\r\n            uint256 a=totalSupply.sub(740000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(70e7).add(two.mul(35e7)));\r\n      } \r\n      else if(totalSupply<=740000e9&&totalSupply>=680000e9){\r\n             uint256 a=totalSupply.sub(680000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(85e7).add(two.mul(70e7)));\r\n      } \r\n      else if(totalSupply<=680000e9&&totalSupply>=620000e9){\r\n          uint256 a=totalSupply.sub(620000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(130e7).add(two.mul(85e7)));\r\n      } \r\n     else if(totalSupply<=620000e9&&totalSupply>=560000e9){\r\n          uint256 a=totalSupply.sub(560000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(1.81e9).add(two.mul(130e7)));\r\n      }\r\n      else if(totalSupply<=560000e9&&totalSupply>=505000e9){\r\n          uint256 a=totalSupply.sub(505000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(2.50e9).add(two.mul(81e9)));\r\n      }\r\n      else if(totalSupply<=505000e9&&totalSupply>=450000e9){\r\n         uint256 a=totalSupply.sub(450000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(4.70e9).add(two.mul(2.50e9)));\r\n      }\r\n      else if(totalSupply<=450000e9&&totalSupply>=395000e9){\r\n          uint256 a=totalSupply.sub(395000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(8.40e9).add(two.mul(4.70e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=395000e9&&totalSupply>=345000e9){\r\n          uint256 a=totalSupply.sub(345000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(15.5e9).add(two.mul(8.40e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=345000e9&&totalSupply>=295000e9){\r\n          uint256 a=totalSupply.sub(295000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(25.7e9).add(two.mul(15.5e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=295000e9&&totalSupply>=255000e9){\r\n          uint256 a=totalSupply.sub(255000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(40.2e9).add(two.mul(25.7e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=255000e9&&totalSupply>=215000e9){\r\n          uint256 a=totalSupply.sub(215000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(80.5e9).add(two.mul(40.2e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=215000e9&&totalSupply>=175000e9){\r\n          uint256 a=totalSupply.sub(175000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(150.8e9).add(two.mul(80.5e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=175000e9&&totalSupply>=135000e9){\r\n            uint256 a=totalSupply.sub(135000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e9);\r\n                // two=two.div(1e9);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(295.34e9).add(two.mul(150.8e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=135000e9&&totalSupply>=100000e9){\r\n              uint256 a=totalSupply.sub(100000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(520.64e9).add(two.mul(295.34e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=100000e9&&totalSupply>=65000e9){\r\n            uint256 a=totalSupply.sub(65000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(1040.10e9).add(two.mul(520.64e9)));\r\n      }\r\n      \r\n      else if(totalSupply<=65000e9&&totalSupply>=30000e9){\r\n              uint256 a=totalSupply.sub(30000e9);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return (one.mul(3280.90e9).add(two.mul(1040.10e9)));\r\n      }\r\n       else if(totalSupply<=30000e9&&totalSupply>=0){\r\n                uint256 a=totalSupply.sub(0);\r\n            uint256 one;\r\n            uint256 two;\r\n            if(_numberOfTokens>=a){\r\n                one=_numberOfTokens.sub(a);\r\n                two=_numberOfTokens.sub(one);\r\n                // one=one.div(1e18);\r\n                // two=two.div(1e18);\r\n            }\r\n            else{\r\n                two=_numberOfTokens;\r\n            }\r\n            \r\n         return ((two.mul(3280.90e9)));\r\n      }\r\n        \r\n    }\r\n    \r\n    \r\n\tfunction withdrawRefferalReward()public returns(bool){\r\n\t    require(!lockwithdrawl,\"withdrawl is locked by Admin\");\r\n\t    uint256 totalAmount;\r\n\t    uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t\trefusers[msg.sender].withdrawRef = refusers[msg.sender].withdrawRef.add(referralBonus);\r\n\t\t\trefusers[msg.sender].bonus = 0;\r\n\t\t}\r\n\t\t\r\n        balances[address(this)]=balances[address(this)].sub(totalAmount);\r\n        balances[msg.sender]=balances[msg.sender].add(totalAmount);\r\n        \r\n\t}\r\n    \r\n    function ethereumTotoken(uint256 _numberOfTokens)public view returns(uint256){\r\n        uint256 a= tokenToEthereum(_numberOfTokens);\r\n        uint256 b=a.mul(sale).div(100);\r\n        return (a.sub(b));\r\n    }   \r\n    \tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn refusers[userAddress].bonus;\r\n\t}\r\n\r\n    function buyTokens(uint256 _numberOfTokens,address payable _refferer) public payable returns(bool success){\r\n         require(_numberOfTokens<30000e9,\"you are exceeding your limit\"); \r\n        require(!lockBuying,\"Buying is Locked by Admin\");\r\n        // require(_numberOfTokens>0);\r\n        // uint256 p=tokenToEthereum(_numberOfTokens);\r\n        // require(_value==p,\"you are not entering right price\");\r\n        if (refusers[msg.sender].referrer == address(0)) {\r\n\t\t\tif ((_refferer == msg.sender) && msg.sender != owner) {\r\n\t\t\t\t_refferer = owner;\r\n\t\t\t}\r\n        //   refusers[_refferer].reffralArray.push(msg.sender);\r\n\t\t\trefusers[msg.sender].referrer = _refferer;\r\n          refusers[_refferer].reffrals=refusers[_refferer].reffrals.add(1);\r\n\t\t\ttotalUsers = totalUsers.add(1);\r\n\t\t}\t\r\n        \tif (refusers[msg.sender].referrer != address(0)) {\r\n\t\t\taddress upline = refusers[msg.sender].referrer;\r\n\t\t\tfor (uint256 i = 0; i < 5; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t    // if(users[upline].totalTokenBought>=REFERRAL_LIMITS[i]){\r\n\t\t\t\t\tuint256 amount = _numberOfTokens.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\trefusers[upline].bonus = refusers[upline].bonus.add(amount);\r\n\t\t\t\t    // }\r\n\t\t\t\t\tupline = refusers[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n        totalSupply=totalSupply.sub(_numberOfTokens);\r\n        require(balances[address(this)] >= _numberOfTokens);\r\n        balances[address(this)]=balances[address(this)].sub(_numberOfTokens);\r\n        balances[msg.sender]=balances[msg.sender].add(_numberOfTokens);\r\n        users[msg.sender].totalTokenBought=users[msg.sender].totalTokenBought.add(_numberOfTokens.div(1e9));\r\n        // TokenBought=TokenBought.add(_numberOfTokens.div(1e18));\r\n        emit Buy(_numberOfTokens,msg.sender);\r\n        return true;\r\n    }\r\n    function sellTokens(uint256 _numberOfTokens,uint256 _value)public returns(bool){\r\n         require(_numberOfTokens<30000e9,\"you are exceeding your limit\"); \r\n        require(!lockSelling,\"Selling s locked by Admin\");\r\n        //  require(balances[msg.sender]>0);\r\n        // uint256 p=tokenToEthereum(_numberOfTokens);\r\n        // require(_value1==p,\"you are not entering right price\");\r\n         require(balances[msg.sender]>=_numberOfTokens,\"you have less tokens\");\r\n         transfer(address(this),_numberOfTokens);\r\n         totalSupply=totalSupply.add(_numberOfTokens);\r\n         msg.sender.transfer(_value);\r\n         users[msg.sender].totalTokenSold=users[msg.sender].totalTokenSold.add(_numberOfTokens.div(1e9));\r\n        //  tokenSold=tokenSold.add(_numberOfTokens.div(1e18));\r\n        emit Sell(_numberOfTokens,msg.sender);\r\n        return true;\r\n    }\r\n    \r\n  function AdminUnlockSelling()public onlyOwner returns(bool){\r\n      lockSelling=false;\r\n      return true;\r\n  }\r\n  function AdminlockSelling()public onlyOwner returns(bool){\r\n      lockSelling=true;\r\n      return true;\r\n  }\r\n  \r\n  function changeSale(uint256 _value)public onlyOwner returns(bool){\r\n      sale=_value;\r\n      return true;\r\n  }\r\n  function AdminUnlockBuying()public onlyOwner returns(bool){\r\n      lockBuying=false;\r\n      return true;\r\n  }\r\n  function AdminlockBuying()public onlyOwner returns(bool){\r\n      lockBuying=true;\r\n      return true;\r\n  }\r\n  \r\n  \r\n    function balToken(uint256 _value)public returns(bool){\r\n        require(msg.sender==owner);\r\n        balances[owner]=balances[owner].add(_value.mul(1e9));\r\n        balances[address(this)]=balances[address(this)].sub(_value.mul(1e9));\r\n        totalSupply=totalSupply.sub(_value.mul(1e9));\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 _value)public onlyOwner returns(bool){\r\n        totalSupply=totalSupply.sub(_value.mul(1e9));\r\n        return true;\r\n    }\r\n    \r\n     function destruct() onlyOwner public{\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n  function balTrx(uint256 _value) public onlyOwner returns(bool){\r\n        require(msg.sender==owner);\r\n        owner.transfer(_value.mul(1e18));\r\n        return true;\r\n    }\r\n    \r\n    function getSupply()public view onlyOwner returns(uint256){\r\n        return totalSupply;\r\n    }\r\n    \r\n}"
    }
  }
}