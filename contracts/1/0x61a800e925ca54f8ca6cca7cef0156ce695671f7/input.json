{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MonstarFactoryMain.sol": {
      "content": "pragma solidity 0.5.0;\r\n\r\ncontract MonstarFactoryMain {\r\n    address private targetAddress;\r\n\r\n    address private admin;\r\n    constructor() public {\r\n        targetAddress = 0xd327243F54f662C43fd336535E689A81e06521DB;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function setTargetAddress(address _address) public {\r\n        require(msg.sender==admin , \"Admin only function\");\r\n        require(_address != address(0));\r\n        targetAddress = _address;\r\n    }\r\n\r\n    function getContAdr() public view returns (address) {\r\n        require(msg.sender==admin , \"Admin only function\");\r\n        return targetAddress;\r\n        \r\n    }\r\n    function () external payable {\r\n        address contractAddr = targetAddress;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize)\r\n            let result := delegatecall(gas, contractAddr, ptr, calldatasize, 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}"
    }
  }
}