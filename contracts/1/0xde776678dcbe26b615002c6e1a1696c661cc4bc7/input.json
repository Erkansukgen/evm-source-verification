{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Presale.sol": {
      "content": "/*\n  STK3R Presale Contract\n   _____ _______ _  ______  _____  \n  / ____|__   __| |/ /___ \\|  __ \\ \n | (___    | |  | ' /  __) | |__) |\n  \\___ \\   | |  |  <  |__ <|  _  / \n  ____) |  | |  | . \\ ___) | | \\ \\ \n |_____/   |_|  |_|\\_\\____/|_|  \\_\\\n \n*/\n\npragma solidity ^0.6.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n}\n\ncontract Presale {\n    using SafeMath for uint256;\n\n    event Distribute(address participant, uint256 amount);\n\n    uint256 constant private PRESALE_PRICE = 1200; // STK3R presale price is 1200 STK3R/ETH\n\n    IERC20 public token;\n    \n    address payable public owner;\n    \n    constructor(address _token) public {\n        require(_token != address(0), \"Token address required\");\n        owner = msg.sender;\n        token = IERC20(_token);\n    }\n\n    receive() external payable {\n        require(msg.value > 0, \"You need to send more than 0 Ether\");\n        uint256 amountTobuy = msg.value.mul(PRESALE_PRICE);\n        uint256 tokenBalance = token.balanceOf(address(this));\n        require(amountTobuy <= tokenBalance, \"No enough token in the reserve\");\n        owner.transfer(msg.value);\n        token.transfer(msg.sender, amountTobuy);\n        emit Distribute(msg.sender, amountTobuy);\n    }\n\n    fallback() external payable {\n        require(msg.value > 0, \"You need to send more than 0 Ether\");\n        uint256 amountTobuy = msg.value.mul(PRESALE_PRICE);\n        uint256 tokenBalance = token.balanceOf(address(this));\n        require(amountTobuy <= tokenBalance, \"No enough token in the reserve\");\n        owner.transfer(msg.value);\n        token.transfer(msg.sender, amountTobuy);\n        emit Distribute(msg.sender, amountTobuy);\n    }\n    \n    function retrieve() external payable {\n        owner.transfer(address(this).balance);\n        token.transfer(owner, token.balanceOf(address(this)));\n    }\n\n}\n"
    }
  }
}