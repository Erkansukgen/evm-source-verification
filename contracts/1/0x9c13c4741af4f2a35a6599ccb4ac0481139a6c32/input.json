{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/LooperFlash2.sol": {
      "content": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/include/BNum.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.6.0;\n\n\n\ncontract BNum {\n    \n    uint private constant BONE = 10**18;\n    uint public constant BPOW_PRECISION    = BONE / 10**10;\n    uint public constant MIN_BPOW_BASE     = 1 wei;\n    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\n    uint public constant MAX_IN_RATIO      = BONE / 2;\n    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\n\n    function btoi(uint a)\n        internal pure \n        returns (uint)\n    {\n        return a / BONE;\n    }\n\n    function bfloor(uint a)\n        internal pure\n        returns (uint)\n    {\n        return btoi(a) * BONE;\n    }\n\n    function badd(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c = a + b;\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\n        return c;\n    }\n\n    function bsub(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        (uint c, bool flag) = bsubSign(a, b);\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\n        return c;\n    }\n\n    function bsubSign(uint a, uint b)\n        internal pure\n        returns (uint, bool)\n    {\n        if (a >= b) {\n            return (a - b, false);\n        } else {\n            return (b - a, true);\n        }\n    }\n\n    function bmul(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c0 = a * b;\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n        uint c1 = c0 + (BONE / 2);\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n\n    function bdiv(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        require(b != 0, \"ERR_DIV_ZERO\");\n        uint c0 = a * BONE;\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n        uint c1 = c0 + (b / 2);\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n        uint c2 = c1 / b;\n        return c2;\n    }\n\n    // DSMath.wpow\n    function bpowi(uint a, uint n)\n        internal pure\n        returns (uint)\n    {\n        uint z = n % 2 != 0 ? a : BONE;\n\n        for (n /= 2; n != 0; n /= 2) {\n            a = bmul(a, a);\n\n            if (n % 2 != 0) {\n                z = bmul(z, a);\n            }\n        }\n        return z;\n    }\n\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n    // of approximation of b^0.w\n    function bpow(uint base, uint exp)\n        internal pure\n        returns (uint)\n    {\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n\n        uint whole  = bfloor(exp);   \n        uint remain = bsub(exp, whole);\n\n        uint wholePow = bpowi(base, btoi(whole));\n\n        if (remain == 0) {\n            return wholePow;\n        }\n\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n        return bmul(wholePow, partialResult);\n    }\n\n    function bpowApprox(uint base, uint exp, uint precision)\n        internal pure\n        returns (uint)\n    {\n        // term 0:\n        uint a     = exp;\n        (uint x, bool xneg)  = bsubSign(base, BONE);\n        uint term = BONE;\n        uint sum   = term;\n        bool negative = false;\n\n\n        // term(k) = numer / denom \n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\n        // continue until term is less than precision\n        for (uint i = 1; term >= precision; i++) {\n            uint bigK = i * BONE;\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n            term = bmul(term, bmul(c, x));\n            term = bdiv(term, bigK);\n            if (term == 0) break;\n\n            if (xneg) negative = !negative;\n            if (cneg) negative = !negative;\n            if (negative) {\n                sum = bsub(sum, term);\n            } else {\n                sum = badd(sum, term);\n            }\n        }\n\n        return sum;\n    }\n\n}\n\n// File: contracts/include/BMath.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.6.0;\n\n\ncontract BMath is BNum {\n    uint public constant BONE              = 10**18;\n\n    /**********************************************************************************************\n    // calcSpotPrice                                                                             //\n    // sP = spotPrice                                                                            //\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\n    // wO = tokenWeightOut                                                                       //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n    function calcSpotPrice(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint spotPrice)\n    {\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\n        uint ratio = bdiv(numer, denom);\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\n        return  (spotPrice = bmul(ratio, scale));\n    }\n\n\n    /**********************************************************************************************\n    // calcOutGivenIn                                                                            //\n    // aO = tokenAmountOut                                                                       //\n    // bO = tokenBalanceOut                                                                      //\n    // bI = tokenBalanceIn              /      /            bI             \\    (wI / wO) \\      //\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\n    // wI = tokenWeightIn               \\      \\ ( bI + ( aI * ( 1 - sF )) /              /      //\n    // wO = tokenWeightOut                                                                       //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n\n\n    function balancerCalcOutGivenIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountIn,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountOut)\n    {\n        if(tokenBalanceIn <= tokenAmountIn){\n            return 0;\n        } \n        if(tokenAmountIn > bmul(tokenBalanceIn, MAX_IN_RATIO)){\n            return 0;\n        }  \n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n        uint adjustedIn = bsub(BONE, swapFee);\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\n        uint foo = bpow(y, weightRatio);\n        uint bar = bsub(BONE, foo);\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\n        return tokenAmountOut;\n    }\n}\n\n// File: contracts/interfaces/IUniswapV2Pair.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/interfaces/IBalancerPool.sol\n\npragma solidity >=0.5.0;\n\ninterface IBalancerPool {\n\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n    function getDenormalizedWeight(address token) external view returns(uint);\n    function getBalance(address token) external view returns(uint);\n    function getSwapFee() external view returns (uint);\n\n\n}\n\n// File: contracts/interfaces/IWETH.sol\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n}\n\n// File: contracts/interfaces/IMooniPool.sol\n\npragma solidity >=0.5.0;\n\ninterface IMooniPool {\n    function getReturn(address src, address dst, uint256 amount) external view returns(uint256);\n    function swap(address src, address dst, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256);\n}\n\n// File: contracts/interfaces/IAaveAddressProvider.sol\n\npragma solidity ^0.6.6;\n\n/**\n    @title ILendingPoolAddressesProvider interface\n    @notice provides the interface to fetch the LendingPoolCore address\n */\n\ninterface ILendingPoolAddressesProvider {\n    function getLendingPoolCore() external view returns (address payable);\n    function getLendingPool() external view returns (address);\n}\n\n// File: contracts/interfaces/IAaveLendingPool.sol\n\npragma solidity ^0.6.6;\n\ninterface ILendingPool {\n  function addressesProvider () external view returns ( address );\n  function deposit ( address _reserve, uint256 _amount, uint16 _referralCode ) external payable;\n  function redeemUnderlying ( address _reserve, address _user, uint256 _amount ) external;\n  function borrow ( address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode ) external;\n  function repay ( address _reserve, uint256 _amount, address _onBehalfOf ) external payable;\n  function swapBorrowRateMode ( address _reserve ) external;\n  function rebalanceFixedBorrowRate ( address _reserve, address _user ) external;\n  function setUserUseReserveAsCollateral ( address _reserve, bool _useAsCollateral ) external;\n  function liquidationCall ( address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken ) external payable;\n  function flashLoan ( address _receiver, address _reserve, uint256 _amount, bytes calldata _params ) external;\n  function getReserveConfigurationData ( address _reserve ) external view returns ( uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive );\n  function getReserveData ( address _reserve ) external view returns ( uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp );\n  function getUserAccountData ( address _user ) external view returns ( uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor );\n  function getUserReserveData ( address _reserve, address _user ) external view returns ( uint256 currentATokenBalance, uint256 currentUnderlyingBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled );\n  function getReserves () external view;\n}\n\n// File: contracts/interfaces/ICurve.sol\n\npragma solidity >=0.5.0;\n\ninterface ICurve {\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256);\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns(uint256);\n}\n\n// File: contracts/LooperFlash.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n//import \"./interfaces/IUniswapV2Router02.sol\";\n\n\n\n\n\n\n\ncontract LooperFlash is BMath {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    address payable _owner;\n    mapping (address => bool) _operator;\n    address constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address constant wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address AaveLendingPool;\n    address AaveLendingCore;\n    uint8 _guard;\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function updateAave() public {\n        require(msg.sender == _owner, \"Not the owner\");\n        AaveLendingCore = ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8).getLendingPoolCore();\n        AaveLendingPool = ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8).getLendingPool();\n    }\n\n    function uniswapCalcOutGivenIn(\n        uint amountIn, \n        uint reserveIn, \n        uint reserveOut\n    ) internal pure \n    returns (uint amountOut) \n    {\n        if(amountIn <= 0) return 0;\n        if(reserveIn <= 0 || reserveOut <= 0) return 0;\n        if(reserveIn < amountIn) return 0;\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function setOperator(address operator, bool state) public {\n        require(msg.sender == _owner,\"Not an owner\");\n        _operator[operator] = state;\n    }\n\n\n    function getOutAmount(uint32[] memory types, address[] memory tokens, address[] memory pools, uint256 amount) public view returns(uint256 outAmount){\n        outAmount = amount;\n        for(uint8 i=0; i<pools.length;i++){\n            if((types[i] & 0x7F) == 1) { // Uniswap\n                (uint reserve0, uint reserve1, uint _) = IUniswapV2Pair(pools[i]).getReserves();\n                \n                if( tokens[i] < tokens[i+1] ){\n                    outAmount = uniswapCalcOutGivenIn( outAmount, reserve0, reserve1); \n                } else{\n                    outAmount = uniswapCalcOutGivenIn( outAmount, reserve1, reserve0); \n                }\n                if(outAmount == 0) \n                {\n                    return 0;\n                }\n            }else if((types[i] & 0x7F) == 2){ // Balancer\n                outAmount =  balancerCalcOutGivenIn( \n                        IBalancerPool(pools[i]).getBalance(tokens[i]), \n                        IBalancerPool(pools[i]).getDenormalizedWeight(tokens[i]),  \n                        IBalancerPool(pools[i]).getBalance(tokens[i+1]),  \n                        IBalancerPool(pools[i]).getDenormalizedWeight(tokens[i+1]),  \n                        outAmount,\n                        IBalancerPool(pools[i]).getSwapFee()-1\n                );  \n                if( outAmount == 0){\n                    return 0;\n                }\n            }else if((types[i] & 0x7F) == 3){ // WETH\n                continue;\n            }else if((types[i] & 0x7F) == 4){ // Mooniswap\n                outAmount = IMooniPool(pools[i]).getReturn(tokens[i], tokens[i+1], outAmount);\n            }else if((types[i] & 0x7F) == 5){ // CurveC\n                int128 ci = types[i];\n                ci = (ci >> 16) & 0xFF;\n                int128 cj = types[i];\n                cj = (cj >> 24) & 0xFF;\n                outAmount = ICurve(pools[i]).get_dy(ci, cj, outAmount);\n            }else if((types[i] & 0x7F) == 6){ //CurveUnderlying\n                int128 ci = types[i];\n                ci = (ci >> 16) & 0xFF;\n                int128 cj = types[i];\n                cj = (cj >> 24) & 0xFF;\n                outAmount = ICurve(pools[i]).get_dy_underlying(ci, cj, outAmount);\n            }\n\n        }\n        return outAmount;\n    } \n\n    function getPath(address tokenFrom, address tokenTo) internal pure returns(address[] memory){\n        address[] memory path = new address[](2);\n        path[0]=tokenFrom;\n        path[1]=tokenTo;\n        return path;\n    }\n\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) public {\n        (uint32[] memory types, address[] memory tokens, address[] memory pools, uint256[] memory outAmounts, uint256 amount, uint256 minAmount) = abi.decode(data, (uint32[], address[], address[], uint256[], uint256, uint256));\n        flashswap(types, tokens, pools, outAmounts, amount, minAmount);\n    }\n\n    function croDefiSwapCall(address sender, uint amount0, uint amount1, bytes calldata data) public {\n        (uint32[] memory types, address[] memory tokens, address[] memory pools, uint256[] memory outAmounts, uint256 amount, uint256 minAmount) = abi.decode(data, (uint32[], address[], address[], uint256[], uint256, uint256));\n        flashswap(types, tokens, pools, outAmounts, amount, minAmount);\n    }\n\n    function executeOperation(\n        address _reserve,\n        uint256 _amount,\n        uint256 _fee,\n        bytes calldata _params\n    )\n        public\n    {\n\n        if(_reserve == ethAddress ) {\n            require( address(this).balance >= _amount, \"Invalid balance\" );\n        }else{\n            require( IERC20(_reserve).balanceOf(address(this)) >= _amount, \"Invalid balance\" );\n        }\n\n        if(_reserve == ethAddress ) {\n            IWETH(wethAddress).deposit{value:_amount}();\n        }\n\n        (uint32[] memory types, address[] memory tokens, address[] memory pools, uint256[] memory outAmounts, uint256 amount, uint256 minAmount) = abi.decode(_params, (uint32[], address[], address[], uint256[], uint256, uint256));\n        flashswap(types, tokens, pools, outAmounts, amount, minAmount);\n\n        uint totalDebt = _amount.add(_fee);\n        if( _reserve == ethAddress ) {\n            if(_reserve == ethAddress ) {\n                    IWETH(wethAddress).withdraw(totalDebt);\n            }\n\n            (bool success, ) = AaveLendingCore.call{value: totalDebt}(\"\");\n            require(success == true, \"Couldn't transfer ETH\");\n        }else{\n            IERC20(_reserve).safeTransfer(AaveLendingCore, totalDebt);\n        }\n    }\n\n\n    function flashswap(uint32[] memory types, address[] memory tokens, address[] memory pools, uint256[] memory outAmounts, uint256 amount, uint256 minAmount) internal {\n        uint8 i=_guard-1;\n        address dest;\n        require(_guard > 0, \"Not allowed\");\n        _guard = 0;\n\n        require(amount > 0, \"Zero Amount\");\n\n        for( ;i<pools.length;i++){\n            if( (types[i] & 0x7F) == 1) { // Uniswap\n                if( (i == pools.length-1) || (types[i+1] != 1)) {\n                    dest = address(this);\n                }else{\n                    dest = pools[i+1];\n                }\n                if( (i == 1) || ((types[i-1] & 0x7F) != 1)){\n                    IERC20(tokens[i]).safeTransfer(pools[i], outAmounts[i]);\n                }\n                if( tokens[i] < tokens[i+1]){\n                    IUniswapV2Pair(pools[i]).swap(0, outAmounts[i+1], dest, new bytes(0) );\n                }else{\n                    IUniswapV2Pair(pools[i]).swap(outAmounts[i+1], 0, dest, new bytes(0) );\n                }\n            } else if ((types[i] & 0x7F) == 2) { // Balancer\n                IERC20(tokens[i]).safeApprove(pools[i], outAmounts[i]);\n                IBalancerPool(pools[i]).swapExactAmountIn(tokens[i], outAmounts[i],tokens[i+1], outAmounts[i+1], (2**256)-1);\n            } else if ((types[i] & 0x7F) == 3) { // WETH\n                if(tokens[i] == address(0) /*&& tokens[i+1] == address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)*/){\n                    IWETH(pools[i]).deposit{value:outAmounts[i]}();\n                }else if(/*tokens[i] == address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) &&*/ tokens[i+1] == address(0) ){\n                    IWETH(pools[i]).withdraw(outAmounts[i]);\n                }else{\n                    revert(\"Incorrect input\");\n                }\n            } else if ((types[i] & 0x7F) == 4) { // Mooniswap\n                if(tokens[i] == address(0)){ // From ETH\n                    IMooniPool(pools[i]).swap{value:outAmounts[i]}(tokens[i], tokens[i+1], outAmounts[i], outAmounts[i+1], address(0));\n                }else{ // From ERC20\n                    IERC20(tokens[i]).safeApprove(pools[i], outAmounts[i]);\n                    IMooniPool(pools[i]).swap(tokens[i], tokens[i+1], outAmounts[i], outAmounts[i+1], address(0));\n                }\n            } else if ((types[i] & 0x7F) == 5) { // CurveC \n                int128 ci = types[i];\n                ci = (ci >> 16) & 0xFF;\n                int128 cj = types[i];\n                cj = (cj >> 24) & 0xFF;\n                IERC20(tokens[i]).safeApprove(pools[i], outAmounts[i]);\n                ICurve(pools[i]).exchange(ci, cj, outAmounts[i], outAmounts[i+1]);\n            } else if ((types[i] & 0x7F) == 6) { // Curve Underlying \n                int128 ci = types[i];\n                ci = (ci >> 16) & 0xFF;\n                int128 cj = types[i];\n                cj = (cj >> 24) & 0xFF;\n                IERC20(tokens[i]).safeApprove(pools[i], outAmounts[i]);\n                ICurve(pools[i]).exchange_underlying(ci, cj, outAmounts[i], outAmounts[i+1]);\n            }\n        }\n        IERC20(tokens[0]).transfer(pools[0], amount);\n    }\n\n\n    function swap(uint32[] calldata types, address[] calldata tokens, address[] calldata pools, uint256 amount, uint256 minAmount) public {\n        require(_operator[msg.sender],\"Not an operator\");\n        uint256 outAmount = amount;\n        uint8 i;\n        address dest;\n        uint256[] memory outAmounts = new uint256[](tokens.length);\n\n        if(outAmount == 0) {\n            outAmount = IERC20(tokens[0]).balanceOf(address(this));\n        }\n\n        require(tokens[0] == tokens[tokens.length-1], \"Source doesn't match dest\");\n        require((types[0] & 0x7F) == 1, \"Not uniswap\");\n\n        for(i=0; i<pools.length;i++){\n            outAmounts[i] = outAmount;\n            if((types[i] & 0x7F) == 1) { // Uniswap\n                (uint reserve0, uint reserve1, uint _) = IUniswapV2Pair(pools[i]).getReserves();\n                \n                if( tokens[i] < tokens[i+1] ){\n                    outAmount = uniswapCalcOutGivenIn( outAmount, reserve0, reserve1); \n                } else{\n                    outAmount = uniswapCalcOutGivenIn( outAmount, reserve1, reserve0); \n                }\n                if(outAmount == 0) \n                {\n                    return;\n                }\n            }else if((types[i] & 0x7F) == 2){ // Balancer\n                outAmount =  balancerCalcOutGivenIn( \n                        IBalancerPool(pools[i]).getBalance(tokens[i]), \n                        IBalancerPool(pools[i]).getDenormalizedWeight(tokens[i]),  \n                        IBalancerPool(pools[i]).getBalance(tokens[i+1]),  \n                        IBalancerPool(pools[i]).getDenormalizedWeight(tokens[i+1]),  \n                        outAmount,\n                        IBalancerPool(pools[i]).getSwapFee()\n                );  \n                if( outAmount == 0 ){\n                    return;\n                }\n            }else if((types[i] & 0x7F) == 3){ // WETH \n                continue;\n            }else if((types[i] & 0x7F) == 4){ // Moniswap\n                outAmount = IMooniPool(pools[i]).getReturn(tokens[i], tokens[i+1], outAmount);\n                if( outAmount == 0 ){\n                    return;\n                }\n\n            }else if((types[i] & 0x7F) == 5){ // CurveC\n                int128 ci = types[i];\n                ci = (ci >> 16) & 0xFF;\n                int128 cj = types[i];\n                cj = (cj >> 24) & 0xFF;\n                outAmount = ICurve(pools[i]).get_dy(ci, cj, outAmount);\n                if( outAmount == 0 ){\n                    return;\n                }\n            }else if((types[i] & 0x7F) == 6){ //CurveUnderlying\n                int128 ci = types[i];\n                ci = (ci >> 16) & 0xFF;\n                int128 cj = types[i];\n                cj = (cj >> 24) & 0xFF;\n                outAmount = ICurve(pools[i]).get_dy_underlying(ci, cj, outAmount);\n                if( outAmount == 0 ){\n                    return;\n                }\n            }\n        }\n        \n        if(outAmount < minAmount ){\n            return;\n        }\n        outAmounts[i] = outAmount;\n\n        bytes memory data = abi.encode(uint32[](types), address[](tokens), address[](pools), uint256[](outAmounts), uint256(amount), uint256(minAmount));\n        if( types[0] & 0x7F == 1) {\n            _guard = 2;\n            if( tokens[0] < tokens[1]){\n                IUniswapV2Pair(pools[0]).swap(0, outAmounts[1], address(this), data );\n            }else{\n                IUniswapV2Pair(pools[0]).swap(outAmounts[1], 0, address(this), data );\n            }\n        }else{\n            _guard = 1;\n            if( tokens[0] == wethAddress ){\n                ILendingPool(AaveLendingPool).flashLoan(address(this), ethAddress, outAmounts[0], data);\n            }else{\n                ILendingPool(AaveLendingPool).flashLoan(address(this), tokens[0], outAmounts[0], data);\n            }\n        }\n    }\n\n    function transfer(address token, address payable to, uint256 amount ) public {\n        require(msg.sender == _owner, \"Not the owner\");\n        if(token == address(0)){\n            to.transfer(amount);\n        }else{\n            IERC20(token).transfer(to, amount);\n        }\n    }\n\n    receive() external payable{\n    }\n\n    fallback() external payable{\n    \n    }\n\n}\n"
    }
  }
}