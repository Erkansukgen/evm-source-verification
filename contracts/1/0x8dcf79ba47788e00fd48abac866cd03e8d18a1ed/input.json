{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/aofarm.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\npragma solidity ^0.6.0;\n\ncontract Farm {\n    using SafeMath for uint256;\n\n    struct User {\n        uint256 lastBlockChecked;\n        uint256 rewards;\n        uint256 pooledBalance3;\n        uint256 pooledBalance6;\n        uint256 pooledBalance12;\n        uint256 lastStake3;\n        uint256 lastStake6;\n        uint256 lastStake12;\n    }\n\n\n    uint256 public difficulty3;\n    uint256 public difficulty6;\n    uint256 public difficulty12;\n\n    uint256 public totalPooledBPT3;\n    uint256 public totalPooledBPT6;\n    uint256 public totalPooledBPT12;\n    \n    uint256 private month = 2629743;\n    \n    address private owner;\n\n    IERC20 public ao;\n    IERC20 public bpt;\n\n\n    mapping(address => User) public pooled;\n    mapping(address => uint256) public totalClaimed;\n\n    \n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount, uint256 fee);\n    event Rewarded(address indexed user, uint256 amountClaimed);\n\n\n    constructor (address _ao, address _bpt) public {\n        owner = msg.sender;\n        ao = IERC20(_ao);\n        bpt = IERC20(_bpt);\n    }\n\n    modifier _onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    \n\n\n    function update(address account) internal virtual {\n        pooled[account].rewards = pendingReward(msg.sender);\n        pooled[account].lastBlockChecked = block.number;        \n    }\n    \n    function getPooledBalance3(address _account) public view returns (uint256) {\n        return pooled[_account].pooledBalance3;\n    }\n\n    function getPooledBalance6(address _account) public view returns (uint256) {\n        return pooled[_account].pooledBalance6;\n    }\n\n    function getPooledBalance12(address _account) public view returns (uint256) {\n        return pooled[_account].pooledBalance12;\n    }\n    \n    function getLast3(address _account) public view returns (uint256) {\n        return pooled[_account].lastStake3;\n    }\n\n    function getLast6(address _account) public view returns (uint256) {\n        return pooled[_account].lastStake6;\n    }\n\n    function getLast12(address _account) public view returns (uint256) {\n        return pooled[_account].lastStake12;\n    }\n    \n    function setDifficulty(uint256 amount3, uint256 amount6, uint256 amount12) public _onlyOwner {\n        difficulty3 = amount3;\n        difficulty6 = amount6;\n        difficulty12 = amount12;\n\n    }\n\n    function pooledBalance() public view returns (uint256) {\n        return bpt.balanceOf(address(this));\n    }\n\n    function aoRemaining() public view returns (uint256) {\n        return ao.balanceOf(address(this));\n    }\n\n\n\n\n    function pendingReward(address account) public view returns (uint256) {\n        if (block.number > pooled[account].lastBlockChecked) {\n            uint256 rewardBlocks = block.number\n                                        .sub(pooled[account].lastBlockChecked);\n                                        \n                                        \n             \n\n                uint256 reward3 = pooled[account].pooledBalance3.mul(rewardBlocks) / difficulty3;\n                uint256 reward6 = pooled[account].pooledBalance6.mul(rewardBlocks) / difficulty6;\n                uint256 reward12 = pooled[account].pooledBalance12.mul(rewardBlocks) / difficulty12;\n\n\n                return pooled[account].rewards.add(reward3).add(reward6).add(reward12);\n        }\n    }\n\n    function stakePool3(uint256 amount) public {\n        update(msg.sender);\n        require(bpt.transferFrom(msg.sender, address(this), amount));\n        pooled[msg.sender].pooledBalance3 = pooled[msg.sender].pooledBalance3.add(amount);\n        pooled[msg.sender].lastStake3 = now;\n        totalPooledBPT3 = totalPooledBPT3.add(amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function stakePool6(uint256 amount) public {\n        update(msg.sender);\n        require(bpt.transferFrom(msg.sender, address(this), amount));\n        pooled[msg.sender].pooledBalance6 = pooled[msg.sender].pooledBalance6.add(amount);\n        pooled[msg.sender].lastStake6 = now;\n        totalPooledBPT6 = totalPooledBPT6.add(amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function stakePool12(uint256 amount) public {\n        update(msg.sender);\n        require(bpt.transferFrom(msg.sender, address(this), amount));\n        pooled[msg.sender].pooledBalance12 = pooled[msg.sender].pooledBalance12.add(amount);\n        pooled[msg.sender].lastStake12 = now;\n        totalPooledBPT12 = totalPooledBPT12.add(amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function totalPoolSum() public view returns (uint256) {\n        return totalPooledBPT3.add(totalPooledBPT6).add(totalPooledBPT12);\n    }\n   \n   function withdrawPool3(uint256 amount) public {\n\n       uint256 timeSinceLastStake = now.sub(pooled[msg.sender].lastStake3);\n       require(timeSinceLastStake >= month, \"Unlock time has not elapsed\");\n       require(pooled[msg.sender].pooledBalance3 >= amount);\n\n       uint256 baseAmount = amount.mul(pooledBalance()).div(totalPoolSum());\n       uint256 withdrawBPT;\n       uint256 fee;\n\n       if (timeSinceLastStake < month.mul(2)) {\n           withdrawBPT = baseAmount.mul(85).div(100);\n           fee = 15;\n           } else if (timeSinceLastStake >= month.mul(2) && timeSinceLastStake < month.mul(3)) {\n            withdrawBPT = baseAmount.mul(90).div(100);\n           fee = 10;\n           } else if (timeSinceLastStake >= month.mul(3)) {\n           withdrawBPT = baseAmount;\n           fee = 0;\n           }\n\n        getReward();\n        pooled[msg.sender].pooledBalance3 = pooled[msg.sender].pooledBalance3.sub(amount);\n        totalPooledBPT3 = totalPooledBPT3.sub(amount);\n        \n        bpt.transfer(msg.sender, withdrawBPT);\n        emit Withdrawn(msg.sender, amount, fee);\n    }\n\n    function withdrawPool6(uint256 amount) public {\n\n       uint256 timeSinceLastStake = now.sub(pooled[msg.sender].lastStake6);\n       require(timeSinceLastStake >= month.mul(2), \"Unlock time has not elapsed\");\n       require(pooled[msg.sender].pooledBalance6 >= amount);\n\n       uint256 baseAmount = amount.mul(pooledBalance()).div(totalPoolSum());\n       uint256 withdrawBPT;\n       uint256 fee;\n\n       if (timeSinceLastStake < month.mul(4)) {\n           withdrawBPT = baseAmount.mul(85).div(100);\n           fee = 15;\n           } else if (timeSinceLastStake >= month.mul(4) && timeSinceLastStake < month.mul(6)) {\n            withdrawBPT = baseAmount.mul(90).div(100);\n           fee = 10;\n           } else if (timeSinceLastStake >= month.mul(6)) {\n           withdrawBPT = baseAmount;\n           fee = 0;\n           }\n\n        getReward();\n        pooled[msg.sender].pooledBalance6 = pooled[msg.sender].pooledBalance6.sub(amount);\n        totalPooledBPT6 = totalPooledBPT6.sub(amount);\n\n        bpt.transfer(msg.sender, withdrawBPT);\n        emit Withdrawn(msg.sender, amount, fee);\n    }\n\n    function withdrawPool12(uint256 amount) public {\n\n       uint256 timeSinceLastStake = now.sub(pooled[msg.sender].lastStake12);\n       require(timeSinceLastStake >= month.mul(4), \"Unlock time has not elapsed\");\n       require(pooled[msg.sender].pooledBalance12 >= amount);\n\n       uint256 baseAmount = amount.mul(pooledBalance()).div(totalPoolSum());\n       uint256 withdrawBPT;\n       uint256 fee;\n\n       if (timeSinceLastStake < month.mul(8)) {\n           withdrawBPT = baseAmount.mul(85).div(100);\n           fee = 15;\n           } else if (timeSinceLastStake >= month.mul(8) && timeSinceLastStake < month.mul(12)) {\n            withdrawBPT = baseAmount.mul(90).div(100);\n           fee = 10;\n           } else if (timeSinceLastStake >= month.mul(12)) {\n           withdrawBPT = baseAmount;\n           fee = 0;\n           }\n\n        getReward();\n        pooled[msg.sender].pooledBalance12 = pooled[msg.sender].pooledBalance12.sub(amount);\n        totalPooledBPT12 = totalPooledBPT12.sub(amount);\n\n        bpt.transfer(msg.sender, withdrawBPT);\n        emit Withdrawn(msg.sender, amount, fee);\n    }\n\n    \n\n   function getReward() public {\n       update(msg.sender);\n       uint256 reward = pooled[msg.sender].rewards;\n       if (reward <= aoRemaining()) {\n       pooled[msg.sender].rewards = 0;\n       ao.transfer(msg.sender, reward);\n       totalClaimed[msg.sender] = totalClaimed[msg.sender].add(reward);\n       emit Rewarded(msg.sender, reward);\n       }\n   }\n\n    \n}"
    }
  }
}