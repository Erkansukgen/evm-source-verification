{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DFBTCPoolsLPStakingPools.sol": {
      "content": "pragma solidity =0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport './libraries/SafeMath.sol';\r\nimport './libraries/TransferHelper.sol';\r\nimport './interfaces/IERC20.sol';\r\nimport './interfaces/IUniswapV2Pair.sol';\r\nimport './libraries/UniswapV2Library.sol';\r\nimport './interfaces/IDFBTCPoolsLPStakingPools.sol';\r\n\r\ncontract DFBTCPoolsLPStakingPools is IDFBTCPoolsLPStakingPools {\r\n   \r\n    using SafeMath for uint;\r\n    \r\n    mapping(address=>mapping(uint=>uint)) public tokenTocycleToPools;\r\n    mapping(address=>uint) public tokenToDecimal;\r\n    \r\n    address public owner;\r\n    address public uniswapLP;\r\n    address public aom = 0x060924FB947e37EEE230d0B1A71D9618aEc269fC;\r\n    \r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'dfbtc: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        tokenTocycleToPools[0x060924FB947e37EEE230d0B1A71D9618aEc269fC][30] = 7600e18;\r\n        tokenTocycleToPools[0xdAC17F958D2ee523a2206206994597C13D831ec7][30] = 3420e18;\r\n        \r\n        tokenTocycleToPools[0x060924FB947e37EEE230d0B1A71D9618aEc269fC][90] = 26600e18;\r\n        tokenTocycleToPools[0xdAC17F958D2ee523a2206206994597C13D831ec7][90] = 11970e18;\r\n        \r\n        tokenTocycleToPools[0x060924FB947e37EEE230d0B1A71D9618aEc269fC][180] = 57000e18;\r\n        tokenTocycleToPools[0xdAC17F958D2ee523a2206206994597C13D831ec7][180] = 25650e18;\r\n        \r\n        tokenTocycleToPools[0x060924FB947e37EEE230d0B1A71D9618aEc269fC][360] = 121600e18;\r\n        tokenTocycleToPools[0xdAC17F958D2ee523a2206206994597C13D831ec7][360] = 54720e18;\r\n        \r\n        tokenTocycleToPools[0xB405652045933aFDCDC6FcBbFb4D0ecaF33C67f0][30] = 26980e18;\r\n        tokenTocycleToPools[0xB405652045933aFDCDC6FcBbFb4D0ecaF33C67f0][90] = 94430e18;\r\n        tokenTocycleToPools[0xB405652045933aFDCDC6FcBbFb4D0ecaF33C67f0][180] = 202350e18;\r\n        tokenTocycleToPools[0xB405652045933aFDCDC6FcBbFb4D0ecaF33C67f0][360] = 431680e18;\r\n\r\n        \r\n        tokenToDecimal[0xB405652045933aFDCDC6FcBbFb4D0ecaF33C67f0] = 1;\r\n        tokenToDecimal[0x060924FB947e37EEE230d0B1A71D9618aEc269fC] = 1;\r\n        tokenToDecimal[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 1;\r\n    }\r\n    \r\n    modifier onlyOnwer {\r\n        require(owner == msg.sender, \"dfbtc: The caller must be onwer!!!\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOnwerOrLP {\r\n        require(owner == msg.sender || uniswapLP == msg.sender, \"dfbtc: The caller must be onwer!!!\");\r\n        _;\r\n    }\r\n    \r\n    function setAOM(address newAom) public lock onlyOnwer {\r\n        aom = newAom;\r\n    }\r\n    \r\n    function safeTransferAomToUser(address to, uint amount) external override lock onlyOnwerOrLP {\r\n        TransferHelper.safeTransfer(aom, to, amount);\r\n    }\r\n    \r\n    function setTokenTocycleToPools(address tokenAddress, uint cycle, uint poolsAmount) public lock onlyOnwer {\r\n        tokenTocycleToPools[tokenAddress][cycle] = poolsAmount;\r\n    }\r\n    \r\n    function setUniswapLP(address uniswapAddress) public lock onlyOnwer {\r\n        uniswapLP = uniswapAddress;\r\n    }\r\n    \r\n    function setTokenToDecimal(address tokenAddress, uint decimalVal) public lock onlyOnwer {\r\n        tokenToDecimal[tokenAddress] = decimalVal;\r\n    }\r\n    \r\n    function safeTransferToOtherPools(address tokenAddress, address toAdddress, uint transferValue) public lock onlyOnwer {\r\n        TransferHelper.safeTransfer(tokenAddress, toAdddress, transferValue);\r\n    }\r\n    \r\n    function calEveryDayAom(address token, uint dayTotal, uint pledgeCycle, uint amount) external override view returns(uint){\r\n        return tokenTocycleToPools[token][pledgeCycle].mul(amount.mul(1000000000000000000).div(dayTotal)).div(pledgeCycle).mul(tokenToDecimal[token]).div(1000000000000000000);\r\n    }\r\n}"
    },
    "interfaces/IDFBTCPoolsLPStakingPools.sol": {
      "content": "pragma solidity =0.6.6;\n\ninterface IDFBTCPoolsLPStakingPools {\n    function calEveryDayAom(address token, uint dayTotal, uint pledgeCycle, uint amount) external view returns(uint);\n    function safeTransferAomToUser(address to, uint amount) external;\n}"
    },
    "interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n    function burn(uint value) external;\r\n}"
    },
    "interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "libraries/SafeMath.sol": {
      "content": "pragma solidity =0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    require(c / _a == _b, \"mul error!!\");\n    return c;\n  }\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a / _b;\n  }\n\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a, \"sub error!!\");\n    return _a - _b;\n  }\n\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    require(c >= _a, \"add error!!\");\n    return c;\n  }\n}\n"
    },
    "libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.6;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n  function safeApprove(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'TransferHelper::safeApprove: approve failed'\n    );\n  }\n\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'TransferHelper::safeTransfer: transfer failed'\n    );\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'TransferHelper::transferFrom: transferFrom failed'\n    );\n  }\n}\n"
    },
    "libraries/UniswapV2Library.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport '../interfaces/IUniswapV2Pair.sol';\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    }
  }
}