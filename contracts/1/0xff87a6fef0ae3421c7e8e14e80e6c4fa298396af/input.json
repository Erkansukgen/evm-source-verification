{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SCARCEsale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n//ScarcityDeFi.org\r\n//t.me/ScarcityDeFi\r\n/*##################################################\r\n* ############  SCARCE Token Sale  #################\r\n* ##################################################\r\n*\r\n* ##################################################\r\n* ############# ScarcityDeFi.org ###################\r\n* ##################################################\r\n**/\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\npragma solidity ^0.7.5;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  address payable public ownerPayable;\r\n  constructor()  {\r\n    owner = address(msg.sender);\r\n    ownerPayable = address(uint160(owner));\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner; \r\n    ownerPayable = address(uint160(owner));\r\n\r\n  }\r\n}\r\ncontract SCARCEsale is Ownable {\r\n  using SafeMath for uint256;\r\n  IERC20 token;\r\n  string public constant Info = \"This is the official Presale contract for SCARCE\";\r\n  uint256 public constant RATE = 20; //number of tokens per ether\r\n  uint256 public constant CAP = 50;  //Number of ether accepted until the sale ends\r\n  bool private initialized = false; //We dont start until you call startSale()\r\n  uint256 public raisedAmount = 0; //allow users to read the amount of funds raised\r\n  modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n    assert(isActive());\r\n    _;\r\n  }\r\n  constructor() {}\r\n  \r\n  function startSale(address _tokenAddr) public onlyOwner { \r\n      require(initialized == false); //Call when you are ready to start the sale\r\n      token = IERC20(_tokenAddr);\r\n      token.approve(address(this), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n      initialized = true;\r\n  }\r\n  function isActive() public view returns (bool) {\r\n    return (\r\n        initialized == true //Lets the public know if we're live\r\n    );\r\n  }\r\n  function goalReached() public view returns (bool) {\r\n    return (raisedAmount >= CAP * 1 ether);\r\n  }\r\n  fallback() external payable {\r\n    buyTokens();\r\n  } //Fallbacks so if someone sends ether directly to the contract it will function as a purchase\r\n  receive() external payable {\r\n    buyTokens();\r\n  }\r\n  function buyTokens() public payable whenSaleIsActive {\r\n    require(msg.value >= 0.05 ether);\r\n    require(msg.value <= 5 ether);\r\n    uint256 weiAmount = msg.value;\r\n    uint256 tokens = weiAmount.mul(RATE);\r\n    raisedAmount = raisedAmount.add(msg.value);\r\n    ownerPayable.transfer(msg.value);\r\n    token.transferFrom(address(this), msg.sender, tokens);\r\n  }\r\n  function tokensAvailable() public view returns (uint256) {\r\n    return token.balanceOf(address(this));\r\n  }\r\n  function endSale() onlyOwner public {\r\n    uint256 tokenBalance = token.balanceOf(address(this));\r\n    token.transferFrom(address(this), owner, tokenBalance); //Tokens returned to owner wallet\r\n    selfdestruct(ownerPayable);\r\n  }\r\n}"
    }
  }
}