{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":2000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CompMiner_flat.sol":{"content":"\n// File: localhost/contracts/access/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n// File: localhost/contracts/access/Ownable.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize() public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n// File: localhost/contracts/interfaces/IXChanger.sol\n\n\npragma solidity ^0.6.0;\n\n\ninterface XChanger {\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        bool slipProtect\n    ) external payable returns (uint result);\n    \n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) external view returns (uint returnAmount);\n    \n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    ) external view returns (uint inputAmount);\n}\n// File: localhost/contracts/XChangerUser.sol\n\n\npragma solidity ^0.6.0;\n\n\n\ncontract XChangerUser {\n    using UniversalERC20 for IERC20;\n    \n    XChanger public xchanger;// = XChanger(0x68b2151775d1A87d09Fa5D4263b8FEbACFFBAd95);\n\n    /*\n    function transferTokenBack(address TokenAddress)\n        external\n        returns (uint returnBalance)\n    {\n        IERC20 Token = IERC20(TokenAddress);\n        returnBalance = Token.universalBalanceOf(address(this));\n        if (returnBalance > 0) {\n            Token.universalTransfer(msg.sender, returnBalance);\n        }\n    }*/\n\n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint amount\n    ) public view returns (uint returnAmount) {\n        \n        (bool success, bytes memory data) = address(xchanger).staticcall(abi.encodeWithSelector(\n                xchanger.quote.selector,\n                fromToken,\n                toToken,\n                amount\n            ));\n            \n        require (success && data.length > 0, 'XChanger quote not successful'); \n        \n        (returnAmount) = abi.decode(data, (uint));    \n    }\n    \n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint returnAmount\n    ) public view returns (uint inputAmount) {\n        \n        (bool success, bytes memory data) = address(xchanger).staticcall(abi.encodeWithSelector(\n                xchanger.reverseQuote.selector,\n                fromToken,\n                toToken,\n                returnAmount\n            ));\n            \n        require (success && data.length > 0, 'XChanger reverseQuote not successful'); \n        \n        (inputAmount) = abi.decode(data, (uint));    \n    }\n    \n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint amount,\n        bool slipProtect\n    ) public payable returns (uint returnAmount) {\n        \n        if (fromToken.allowance(address(this), address(xchanger)) != uint(-1)) {\n            fromToken.universalApprove(address(xchanger), uint(-1));\n        }\n        \n        returnAmount = xchanger.swap(fromToken, toToken, amount, slipProtect);\n        \n        /*\n        (bool success, bytes memory data) = address(xchanger).delegatecall(abi.encodeWithSelector(\n                xchanger.swap.selector,\n                fromToken,\n                toToken,\n                amount,\n                slipProtect\n            ));\n            \n        require (success && data.length > 0, 'XChanger swap not successful'); \n        \n        (returnAmount) = abi.decode(data, (uint));    */\n    }\n}\n// File: localhost/contracts/interfaces/IERC20.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: localhost/contracts/utils/SafeERC20.sol\n\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.6.2;\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary UniversalERC20 {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal {\n        if (token == IERC20(0)) {\n            address(uint160(to)).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n        }\n    }\n\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\n        if (token != IERC20(0)) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\n        if (token == IERC20(0)) {\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(msg.value.sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n        if (token == IERC20(0)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}\n// File: localhost/contracts/compound/interfaces/IComptroller.sol\n\n\npragma solidity ^0.6.0;\n\ninterface IComptroller {\n    //mapping(address => uint) public compAccrued;\n\n    function claimComp(address holder) external;\n\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function getAssetsIn(address account) external view returns (address[] memory);\n\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\n\n    function markets(address cTokenAddress) external view returns (bool, uint);\n\n    struct CompMarketState {\n        uint224 index;\n        uint32 block;\n    }\n\n    function compSupplyState(address) view external returns(uint224, uint32);\n\n    function compBorrowState(address) view external returns(uint224, uint32);\n\n//    mapping(address => CompMarketState) external compBorrowState;\n\n    //mapping(address => mapping(address => uint)) public compSupplierIndex;\n\n    //mapping(address => mapping(address => uint)) public compBorrowerIndex;\n}\n\n// File: localhost/contracts/compound/interfaces/ICToken.sol\n\n\npragma solidity ^0.6.0;\n\ninterface ICToken {\n    function borrowIndex() view external returns (uint256);\n\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function mint() external payable;\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function repayBorrow() external payable;\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower) external payable;\n\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n        external\n        returns (uint256);\n\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function supplyRatePerBlock() external returns (uint256);\n\n    function borrowRatePerBlock() external returns (uint256);\n\n    function totalReserves() external returns (uint256);\n\n    function reserveFactorMantissa() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function getCash() external returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function balanceOf(address owner) view external returns (uint256);\n\n    function underlying() external returns (address);\n\n    function exchangeRateStored() external view returns (uint);\n}\n\n// File: localhost/contracts/interfaces/ILendingPoolAddressesProvider.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n@title ILendingPoolAddressesProvider interface\n@notice provides the interface to fetch the LendingPoolCore address\n */\ninterface ILendingPoolAddressesProvider {\n\n    function getLendingPool() external view returns (address);\n    function setLendingPoolImpl(address _pool) external;\n\n    function getLendingPoolCore() external view returns (address payable);\n    function setLendingPoolCoreImpl(address _lendingPoolCore) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n    function setLendingPoolConfiguratorImpl(address _configurator) external;\n\n    function getLendingPoolDataProvider() external view returns (address);\n    function setLendingPoolDataProviderImpl(address _provider) external;\n\n    function getLendingPoolParametersProvider() external view returns (address);\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) external;\n\n    function getTokenDistributor() external view returns (address);\n    function setTokenDistributor(address _tokenDistributor) external;\n\n\n    function getFeeProvider() external view returns (address);\n    function setFeeProviderImpl(address _feeProvider) external;\n\n    function getLendingPoolLiquidationManager() external view returns (address);\n    function setLendingPoolLiquidationManager(address _manager) external;\n\n    function getLendingPoolManager() external view returns (address);\n    function setLendingPoolManager(address _lendingPoolManager) external;\n\n    function getPriceOracle() external view returns (address);\n    function setPriceOracle(address _priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n    function setLendingRateOracle(address _lendingRateOracle) external;\n\n}\n// File: localhost/contracts/interfaces/ILendingPool.sol\n\n\npragma solidity ^0.6.0;\n\ninterface ILendingPool {\n    function addressesProvider () external view returns ( address );\n    function deposit ( address _reserve, uint256 _amount, uint16 _referralCode ) external payable;\n    function redeemUnderlying ( address _reserve, address _user, uint256 _amount ) external;\n    function borrow ( address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode ) external;\n    function repay ( address _reserve, uint256 _amount, address _onBehalfOf ) external payable;\n    function swapBorrowRateMode ( address _reserve ) external;\n    function rebalanceFixedBorrowRate ( address _reserve, address _user ) external;\n    function setUserUseReserveAsCollateral ( address _reserve, bool _useAsCollateral ) external;\n    function liquidationCall ( address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken ) external payable;\n    function flashLoan ( address _receiver, address _reserve, uint256 _amount, bytes calldata _params ) external;\n    function getReserveConfigurationData ( address _reserve ) external view returns ( uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive );\n    function getReserveData ( address _reserve ) external view returns ( uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp );\n    function getUserAccountData ( address _user ) external view returns ( uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor );\n    function getUserReserveData ( address _reserve, address _user ) external view returns ( uint256 currentATokenBalance, uint256 currentUnderlyingBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled );\n    function getReserves () external view;\n}\n// File: localhost/contracts/CompMiner.sol\n\n\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n\nlibrary Types {\n    enum AssetDenomination { Wei, Par }\n    enum AssetReference { Delta, Target }\n    struct AssetAmount {\n        bool sign;\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint value;\n    }\n}\n\nlibrary Account {\n    struct Info {\n        address owner;\n        uint number;\n    }\n}\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call\n    }\n    struct ActionArgs {\n        ActionType actionType;\n        uint accountId;\n        Types.AssetAmount amount;\n        uint primaryMarketId;\n        uint secondaryMarketId;\n        address otherAddress;\n        uint otherAccountId;\n        bytes data;\n    }\n}\n\ninterface ISoloMargin {\n    function operate(Account.Info[] calldata accounts, Actions.ActionArgs[] calldata actions) external;\n    function getNumMarkets() external view returns (uint);\n        function getMarketTokenAddress(uint marketId)\n        external\n        view\n        returns (address);\n}\n\n// The interface for a contract to be callable after receiving a flash loan\ninterface ICallee {\n    function callFunction(address sender, Account.Info calldata accountInfo, bytes calldata data) external;\n}\n\nabstract contract FlashLoanTemplate is ICallee {\n    using UniversalERC20 for IERC20;\n    \n    address constant soloMarginAddress = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n\n    ISoloMargin private soloMargin = ISoloMargin(soloMarginAddress);\n\n    function _getMarketIdFromTokenAddress(address token)\n        internal\n        view\n        returns (uint)\n    {\n        uint numMarkets = soloMargin.getNumMarkets();\n\n        address curToken;\n        for (uint i = 0; i < numMarkets; i++) {\n            curToken = soloMargin.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(\"No marketId found for provided token\");\n    }\n        \n    // This is the function we call\n    function flashLoan(address tokenAddress, uint loanAmount, bytes memory _data) public {\n        /*\n        The flash loan functionality in dydx is predicated by their \"operate\" function,\n        which takes a list of operations to execute, and defers validating the state of\n        things until it's done executing them.\n        \n        We thus create three operations, a Withdraw (which loans us the funds), a Call\n        (which invokes the callFunction method on this contract), and a Deposit (which\n        repays the loan, plus the 2 wei fee), and pass them all to \"operate\".\n        \n        Note that the Deposit operation will invoke the transferFrom to pay the loan \n        (or whatever amount it was initialised with) back to itself, there is no need\n        to pay it back explicitly.\n        \n        The loan must be given as an ERC-20 token, so WETH is used instead of ETH. Other\n        currencies (DAI, USDC) are also available, their index can be looked up by\n        calling getMarketTokenAddress on the solo margin contract, and set as the \n        primaryMarketId in the Withdraw and Deposit definitions.\n        */\n        \n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n        \n        uint marketId = _getMarketIdFromTokenAddress(tokenAddress);\n        \n        uint _repaymentAmount = loanAmount + 2;\n        \n        //approve soloMargin with our DAI\n        if (IERC20(tokenAddress).allowance(address(this), soloMarginAddress) < _repaymentAmount) {\n            IERC20(tokenAddress).universalApprove(soloMarginAddress, _repaymentAmount);\n        }\n\n        operations[0] = Actions.ActionArgs({\n            actionType: Actions.ActionType.Withdraw,\n            accountId: 0,\n            amount: Types.AssetAmount({\n                sign: false,\n                denomination: Types.AssetDenomination.Wei,\n                ref: Types.AssetReference.Delta,\n                value: loanAmount // Amount to borrow\n            }),\n            primaryMarketId: marketId, // WETH\n            secondaryMarketId: 0,\n            otherAddress: address(this),\n            otherAccountId: 0,\n            data: \"\"\n        });\n        \n        operations[1] = Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: _data\n            });\n        \n        operations[2] = Actions.ActionArgs({\n            actionType: Actions.ActionType.Deposit,\n            accountId: 0,\n            amount: Types.AssetAmount({\n                sign: true,\n                denomination: Types.AssetDenomination.Wei,\n                ref: Types.AssetReference.Delta,\n                value: _repaymentAmount // Repayment amount with 2 wei fee\n            }),\n            primaryMarketId: marketId, // WETH\n            secondaryMarketId: 0,\n            otherAddress: address(this),\n            otherAccountId: 0,\n            data: \"\"\n        });\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = Account.Info({owner: address(this), number: 1});\n\n        soloMargin.operate(accountInfos, operations);\n    }\n}\n\ncontract CompMiner is FlashLoanTemplate, Ownable, XChangerUser {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    enum OP {UNKNOWN, OPEN, CLOSE, PARTIALLYCLOSE}\n\n    OP private state;\n\n    enum FlashloanProvider {DYDX, AAVE}\n\n    FlashloanProvider public flashloanProvider; // Flashloan Aave or dYdX\n\n    struct FlashloanDyDxData {\n        uint deposit;\n        uint amountFlashLoan;\n    }\n\n    address private constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n    address private constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\n    address private constant AAVE_ADDRESSES_PROVIDER = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\n    address private constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address private constant CDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n    address private constant COMP_ADDRESS = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n\n    //IERC20 private constant dai = IERC20(DAI_ADDRESS);\n    IERC20 private constant comp = IERC20(COMP_ADDRESS);\n    \n    address public constant enterToken = DAI_ADDRESS;\n    IERC20 private constant enterTokenIERC20 = IERC20(enterToken);\n    address public constant cTokenAddress = CDAI_ADDRESS;\n    ICToken cToken = ICToken(cTokenAddress);\n    \n    uint public flRatio;\n    uint public minCompConvert;\n\n    bool private initialized;\n\n    event ratioUpdated(uint);\n    event COMPRatioUpdated(uint);\n    event compChanged(uint);\n    event compTooSmall(uint);\n    event NotDeposited();\n    event LogValueHolderUpdated(address Manager);\n\n    address public ValueHolder;\n    modifier onlyValueHolder() {\n        require(msg.sender == ValueHolder, \"Not Value Holder\");\n        _;\n    }\n\n    function setValueHolder(address _ValueHolder) external onlyOwner {\n        ValueHolder = _ValueHolder;\n        emit LogValueHolderUpdated(_ValueHolder);\n    }\n\n    function init() external {\n        //XChanger._init();\n        require(!initialized, \"Is already been initialized\");\n        initialized = true;\n        _initVariables();\n        Ownable.initialize(); // Do not forget this call!\n    }\n    \n    function _initVariables() internal {\n        flRatio = 290;\n        minCompConvert = 3 * 1e17;\n        flashloanProvider = FlashloanProvider.AAVE;\n    }\n    \n    function reInit() public onlyOwner {\n        //XChanger._init();\n        _initVariables();\n    }\n\n    function setFlashloanProvider(FlashloanProvider _flashloanProvider)\n        external\n        onlyOwner\n    {\n        flashloanProvider = _flashloanProvider;\n    }\n\n    //set new flashloan ratio (290/100)\n    function updateFlRatio(uint newValue) external onlyOwner {\n        flRatio = newValue;\n        emit ratioUpdated(newValue);\n    }\n\n    // set new usd comp value min available for conversion\n    function updateMinCompConvert(uint newValue) external onlyOwner {\n        minCompConvert = newValue;\n        emit COMPRatioUpdated(newValue);\n    }\n    \n    function setXChangerImpl(address _Xchanger) external onlyOwner {\n        xchanger = XChanger(_Xchanger);\n    }\n\n    function transferTokenTo(\n        address TokenAddress,\n        address recipient,\n        uint amount\n    ) external onlyValueHolder returns (uint) {\n        IERC20 Token = IERC20(TokenAddress);\n        uint balance = Token.balanceOf(address(this));\n        if (balance < amount) {\n            amount = balance;\n        }\n\n        Token.universalTransfer(recipient, amount);\n        return amount;\n    }\n\n    // main enter position function\n    function addPosition() external onlyValueHolder returns (uint amount) {\n        /*\n        uint _brpb = ICToken(CDAI_ADDRESS).borrowRatePerBlock();\n        uint _srpb = ICToken(CDAI_ADDRESS).supplyRatePerBlock();\n        \n        uint _mC = _fp.mul(_srpb).mul(_mrg).div(_brpb);\n        uint _lower = _fp.sub(_mC.div(_div));\n        uint _upper = amount.mul(_mC);\n        \n        uint flAmount = _upper.div(_lower).div(_div);\n        */\n\n        convertComp();\n\n        IERC20 _token = IERC20(enterToken);\n\n        amount = _token.balanceOf(address(this));\n        require(amount > 0, \"No available enterToken\");\n        \n        uint flAmount = (amount.mul(flRatio)).div(100);\n        openPositionFlashloan(amount, flAmount);\n    }\n\n    function exitPosition(uint amount) public onlyValueHolder {\n        if (amount == uint(-1)) {\n            //115792089237316195423570985008687907853269984665640564039457584007913129639935\n            closePositionFlashloan();\n        } else {\n            partiallyClosePositionFlashloan(amount);\n        }\n    }\n\n    function initiateFlashLoan(uint amount, uint flashLoanAmount)\n        internal\n    {\n        if (flashloanProvider == FlashloanProvider.AAVE) {\n            ILendingPool lendingPool = ILendingPool(\n                ILendingPoolAddressesProvider(AAVE_ADDRESSES_PROVIDER)\n                    .getLendingPool()\n            );\n            lendingPool.flashLoan(\n                address(this),\n                enterToken,\n                flashLoanAmount,\n                abi.encodePacked(address(this), amount)\n            );\n        } else {\n            // Encode FlashloanDyDxData for callFunction\n            FlashloanDyDxData memory flData = FlashloanDyDxData({\n                deposit: amount,\n                amountFlashLoan: flashLoanAmount\n            });\n            bytes memory _data = abi.encode(flData);\n            flashLoan(enterToken, flashLoanAmount, _data);\n        }\n    }\n\n    function openPositionFlashloan(uint amount, uint flashLoanAmount)\n        internal\n        returns (bool)\n    {\n        // FLASHLOAN LOGIC\n        state = OP.OPEN;\n\n        initiateFlashLoan(amount, flashLoanAmount);\n\n        state = OP.UNKNOWN;\n        // END FLASHLOAN LOGIC\n\n        return true;\n    }\n\n    // main total close position function\n    function closePositionFlashloan() internal {\n        // FLASHLOAN LOGIC\n        uint flashLoanAmount = ICToken(cTokenAddress).borrowBalanceCurrent(\n            address(this)\n        );\n        state = OP.CLOSE;\n\n        initiateFlashLoan(uint(-1), flashLoanAmount);\n\n        state = OP.UNKNOWN;\n        // END FLASHLOAN LOGIC\n    }\n\n    function partiallyClosePositionFlashloan(uint amount) internal {\n        // FLASHLOAN LOGIC\n        uint flashLoanAmount = amount.mul(3);\n        state = OP.PARTIALLYCLOSE;\n\n        initiateFlashLoan(uint(-1), flashLoanAmount);\n\n        state = OP.UNKNOWN;\n        // END FLASHLOAN LOGIC\n    }\n\n    // dYdX flashloan callback\n    function callFunction(\n        address,\n        Account.Info memory,\n        bytes memory data\n    ) public override {\n        require(state != OP.UNKNOWN);\n        FlashloanDyDxData memory flashloanData = abi.decode(\n            data,\n            (FlashloanDyDxData)\n        );\n\n        // Calculate repay amount (_amount + (2 wei))\n        uint totalDebt = flashloanData.amountFlashLoan.add(2);\n        if (state == OP.OPEN) {\n            uint totalFunds = flashloanData.amountFlashLoan +\n                flashloanData.deposit;\n\n            deposit(\n                enterToken,\n                cTokenAddress,\n                totalFunds,\n                enterToken,\n                cTokenAddress,\n                totalDebt\n            );\n            convertComp();\n        } else if (state == OP.CLOSE) {\n            withdraw(\n                enterToken,\n                cTokenAddress,\n                uint(-1),\n                enterToken,\n                cTokenAddress,\n                uint(-1)\n            );\n            convertComp();\n        } else if (state == OP.PARTIALLYCLOSE) {\n            // flashloanData.amountFlashLoan.div(3) - user token requested\n            uint cDaiToExtract = flashloanData\n                .amountFlashLoan\n                .add(flashloanData.amountFlashLoan.div(3))\n                .mul(1e18)\n                .div(cToken.exchangeRateCurrent());\n\n            withdraw(\n                enterToken,\n                cTokenAddress,\n                cDaiToExtract,\n                enterToken,\n                cTokenAddress,\n                flashloanData.amountFlashLoan\n            );\n            convertComp();\n        }\n    }\n\n    // ** PRIVATE & INTERNAL functions **\n\n    function transferFundsBackToPoolInternal(address _reserve, uint _amount)\n        internal\n    {\n        address payable core = ILendingPoolAddressesProvider(\n            AAVE_ADDRESSES_PROVIDER\n        )\n            .getLendingPoolCore();\n        //transferInternal(core, _reserve, _amount);\n        IERC20(_reserve).universalTransfer(core, _amount);\n    }\n\n    // AAVE callback\n    function executeOperation(\n        address _reserve,\n        uint _amountFlashLoan,\n        uint _fee,\n        bytes memory _data\n    ) public {\n        require(state != OP.UNKNOWN);\n\n        require(_amountFlashLoan <= IERC20(_reserve).balanceOf(address(this)));\n\n        uint totalDebt = _amountFlashLoan.add(_fee);\n        if (state == OP.OPEN) {\n            uint depo;\n            assembly {\n                depo := mload(add(_data, 52))\n            }\n\n            uint totalFunds = _amountFlashLoan + depo;\n\n            deposit(\n                enterToken,\n                cTokenAddress,\n                totalFunds,\n                enterToken,\n                cTokenAddress,\n                totalDebt\n            );\n            convertComp();\n        } else if (state == OP.CLOSE) {\n            withdraw(\n                enterToken,\n                cTokenAddress,\n                uint(-1),\n                enterToken,\n                cTokenAddress,\n                uint(-1)\n            );\n            convertComp();\n        } else if (state == OP.PARTIALLYCLOSE) {\n            uint cDaiToExtract = _amountFlashLoan\n                .add(_amountFlashLoan.div(3))\n                .mul(1e18)\n                .div(cToken.exchangeRateCurrent());\n\n            withdraw(\n                enterToken,\n                cTokenAddress,\n                cDaiToExtract,\n                enterToken,\n                cTokenAddress,\n                _amountFlashLoan\n            );\n            convertComp();\n        }\n        transferFundsBackToPoolInternal(_reserve, totalDebt);\n    }\n\n    // Example: _collToken = Eth, _borrowToken = USDC\n    function deposit(\n        address _collToken,\n        address _cCollToken,\n        uint _collAmount,\n        address _borrowToken,\n        address _cBorrowToken,\n        uint _borrowAmount\n    ) internal {\n        // add _cCollToken to market\n        enterMarketInternal(_cCollToken);\n\n        // mint _cCollToken\n        mintInternal(_collToken, _cCollToken, _collAmount);\n\n        // borrow and withdraw _borrowToken\n        if (_borrowToken != address(0)) {\n            borrowInternal(_cBorrowToken, _borrowAmount);\n        }\n    }\n\n    //claim comp, convert to DAI as needed\n    function claimValue() external {\n        IComptroller(COMPTROLLER).claimComp(address(this));\n        convertComp();\n    }\n\n    //convert if needed\n    function convertComp() public {\n        uint returnAmount;\n        uint balanceComp = comp.balanceOf(address(this));\n        if (balanceComp > minCompConvert) {\n            returnAmount = swap(\n                comp,\n                enterTokenIERC20,\n                balanceComp,\n                false\n            );\n            emit compChanged(returnAmount);\n        } else {\n            emit compTooSmall(returnAmount);\n        }\n    }\n\n    function getTokenStaked() public view returns (uint totalTokenStaked) {\n        uint borrowBalance = cToken.borrowBalanceStored(address(this));\n        uint supplyBalance = (cToken.balanceOf(address(this)).mul(cToken.exchangeRateStored())).div(1e18);\n        totalTokenStaked = supplyBalance.sub(borrowBalance);\n    }\n\n    function getConvertedValue(address denominateTo, uint amount)\n        public\n        view\n        returns (uint totalValue)\n    {\n        (totalValue) = quote(enterTokenIERC20, IERC20(denominateTo), amount);\n    }\n\n    function getPoolValue(address denominateTo) public view returns (uint totalValue) {\n        uint freeDAI = enterTokenIERC20.balanceOf(address(this));\n        uint totalDAI = freeDAI.add(getTokenStaked());\n        totalValue = getConvertedValue(denominateTo, totalDAI);\n\n        uint balanceComp = comp.balanceOf(address(this));\n        if (balanceComp > 0) {\n            (uint compQuote) = quote(\n                comp,\n                IERC20(denominateTo),\n                balanceComp\n            );\n            totalValue = totalValue.add(compQuote);\n        }\n    }\n    \n    // Example: _collToken = Eth, _borrowToken = USDC\n    function withdraw(\n        address _collToken,\n        address _cCollToken,\n        uint cAmountRedeem,\n        address _borrowToken,\n        address _cBorrowToken,\n        uint amountRepay\n    ) internal returns (uint) {\n        // repayBorrow _cBorrowToken\n        paybackInternal(_borrowToken, _cBorrowToken, amountRepay);\n\n        // redeem _cCollToken\n        return redeemInternal(_collToken, _cCollToken, cAmountRedeem);\n    }\n\n    function enterMarket(address _cTokenAddr) internal {\n        address[] memory markets = new address[](1);\n        markets[0] = _cTokenAddr;\n\n        IComptroller(COMPTROLLER).enterMarkets(markets);\n    }\n\n    function borrow(address _cTokenAddr, uint _amount) internal {\n        require(ICToken(_cTokenAddr).borrow(_amount) == 0);\n    }\n\n    function redeem(address _cTokenAddr, uint amount) internal {\n        if (amount == uint(-1))\n            amount = IERC20(_cTokenAddr).balanceOf(address(this));\n        // converts all _cTokenAddr into the underlying asset (_tokenAddr)\n        require(ICToken(_cTokenAddr).redeem(amount) == 0);\n    }\n\n    function payback(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint amount\n    ) internal {\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n\n        if (amount == uint(-1))\n            amount = ICToken(_cTokenAddr).borrowBalanceCurrent(address(this));\n\n        IERC20(_tokenAddr).safeTransferFrom(msg.sender, address(this), amount);\n        require(ICToken(_cTokenAddr).repayBorrow(amount) == 0);\n    }\n\n    function mint(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint _amount\n    ) internal {\n        // approve _cTokenAddr to pull the _tokenAddr tokens\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n\n        require(ICToken(_cTokenAddr).mint(_amount) == 0);\n    }\n\n    // **INTERNAL functions**\n    function approveCTokenInternal(address _tokenAddr, address _cTokenAddr)\n        internal\n    {\n        if (\n            IERC20(_tokenAddr).allowance(address(this), address(_cTokenAddr)) !=\n            uint(-1)\n        ) {\n            IERC20(_tokenAddr).universalApprove(_cTokenAddr, uint(-1));\n        }\n    }\n\n    function enterMarketInternal(address _cTokenAddr) internal {\n        address[] memory markets = new address[](1);\n        markets[0] = _cTokenAddr;\n\n        IComptroller(COMPTROLLER).enterMarkets(markets);\n    }\n\n    function mintInternal(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint _amount\n    ) internal {\n        // approve _cTokenAddr to pull the _tokenAddr tokens\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n\n        require(ICToken(_cTokenAddr).mint(_amount) == 0);\n    }\n\n    function borrowInternal(address _cTokenAddr, uint _amount) internal {\n        require(ICToken(_cTokenAddr).borrow(_amount) == 0);\n    }\n\n    function paybackInternal(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint amount\n    ) internal {\n        // approve _cTokenAddr to pull the _tokenAddr tokens\n\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n        if (amount == uint(-1))\n            amount = ICToken(_cTokenAddr).borrowBalanceCurrent(address(this));\n\n        require(ICToken(_cTokenAddr).repayBorrow(amount) == 0);\n    }\n\n    function redeemInternal(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint amount\n    ) internal returns (uint tokensSent) {\n        // converts all _cTokenAddr into the underlying asset (_tokenAddr)\n        if (amount == uint(-1))\n            amount = IERC20(_cTokenAddr).balanceOf(address(this));\n        require(ICToken(_cTokenAddr).redeem(amount) == 0);\n\n        // withdraw funds to msg.sender - not needed\n        tokensSent = IERC20(_tokenAddr).balanceOf(address(this));\n        return tokensSent;\n    }\n}\n"}}}