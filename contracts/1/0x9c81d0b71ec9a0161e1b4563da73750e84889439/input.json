{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/BANCOR_HELPER/GetBancorData.sol":{"content":"pragma solidity ^0.6.12;\n\nlibrary stringToBytes32 {\n  function convert(string memory source) internal pure returns (bytes32 result) {\n    bytes memory tempEmptyStringTest = bytes(source);\n    if (tempEmptyStringTest.length == 0) {\n        return 0x0;\n    }\n\n    assembly {\n        result := mload(add(source, 32))\n    }\n   }\n}\n\ninterface IBancorPoolParser {\n  function parseConnectorsByPool(address _from, address _to, uint256 poolAmount)\n    external\n    view\n    returns(uint256 totalValue);\n}\n\n\ninterface IContractRegistry {\n    function addressOf(bytes32 _contractName) external view returns (address);\n    // deprecated, backward compatibility\n    function getAddress(bytes32 _contractName) external view returns (address);\n}\n\n\ninterface BancorNetworkInterface {\n   function getReturnByPath(\n     address[] calldata _path,\n     uint256 _amount)\n     external\n     view\n     returns (uint256, uint256);\n\n    function conversionPath(\n      address _sourceToken,\n      address _targetToken\n    ) external view returns (address[] memory);\n\n    function rateByPath(\n        address[] memory _path,\n        uint256 _amount\n    ) external view returns (uint256);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\ncontract GetBancorData is Ownable{\n  using stringToBytes32 for string;\n  IBancorPoolParser public BancorPoolParser;\n  IContractRegistry public bancorRegistry;\n\n  constructor(address _bancorRegistry)public{\n    bancorRegistry = IContractRegistry(_bancorRegistry);\n  }\n\n  // return contract address from Bancor registry by name\n  function getBancorContractAddresByName(string memory _name) public view returns (address result){\n     bytes32 name = stringToBytes32.convert(_name);\n     result = bancorRegistry.addressOf(name);\n  }\n\n  /**\n  * @dev get ratio between Bancor assets\n  *\n  * @param _from  address or Relay\n  * @param _to  address or Relay\n  * @param _amount  amount for _from\n  */\n  function getBancorRatioForAssets(address _from, address _to, uint256 _amount) public view returns(uint256 result){\n    if(_amount > 0){\n      try BancorPoolParser.parseConnectorsByPool(_from, _to, _amount)\n        returns(uint256 totalValue)\n       {\n         result = totalValue;\n       }\n       catch{\n         result = getRatioByPath(_from, _to, _amount);\n       }\n    }\n    else{\n      result = 0;\n    }\n  }\n\n\n  // Works for Bancor assets and old bancor pools\n  function getRatioByPath(address _from, address _to, uint256 _amount) public view returns(uint256) {\n    BancorNetworkInterface bancorNetwork = BancorNetworkInterface(\n      getBancorContractAddresByName(\"BancorNetwork\")\n    );\n    // get Bancor path array\n    address[] memory path = bancorNetwork.conversionPath(_from, _to);\n    // get Ratio\n    return bancorNetwork.rateByPath(path, _amount);\n  }\n\n\n\n  // get addresses array of token path\n  function getBancorPathForAssets(address _from, address _to) public view returns(address[] memory){\n    BancorNetworkInterface bancorNetwork = BancorNetworkInterface(\n      getBancorContractAddresByName(\"BancorNetwork\")\n    );\n\n    address[] memory path = bancorNetwork.conversionPath(_from, _to);\n\n    return path;\n  }\n\n  // update bancor registry\n  function changeRegistryAddress(address _bancorRegistry) public onlyOwner{\n    bancorRegistry = IContractRegistry(_bancorRegistry);\n  }\n\n  // update BancorPoolParser\n  function changeBancorPoolParser(address _BancorPoolParser) public onlyOwner{\n    BancorPoolParser = IBancorPoolParser(_BancorPoolParser);\n  }\n}\n"}}}