{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "GuardedCaller.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.0 <0.9.0;\n\ncontract GuardedCaller {\n    mapping(address => bool) _admins;\n\n    struct CallData {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /**\n     * Revert if `msg.sender` is not an admin\n     */\n    modifier onlyAdmin() {\n        require(_admins[msg.sender], 'Forbidden');\n        _;\n    }\n\n    constructor() {\n        _updateAdmin(msg.sender, true);\n    }\n\n    /**\n     * Grant one or more accounts access to the admin role\n     * @dev This function can only be called by an admin\n     */\n    function grantAdminRoles(address[] memory accounts) external onlyAdmin {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _updateAdmin(accounts[i], true);\n        }\n    }\n\n    /**\n     * Revoke admin role access for one or more accounts\n     * @dev This function can only be called by an admin\n     */\n    function revokeAdminRoles(address[] memory accounts) external onlyAdmin {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _updateAdmin(accounts[i], false);\n        }\n    }\n\n    /**\n     * Execute an arbitrary external call with an optional miner bribe\n     * @dev This function can only be called by an admin\n     */\n    function call(CallData memory cdata, uint256 bribe) external payable onlyAdmin {\n        _call(cdata);\n        _bribe(bribe);\n    }\n\n    /**\n     * Execute an arbitrary external call many times with an optional miner bribe\n     * @dev This function can only be called by an admin\n     */\n    function loopcall(CallData memory cdata, uint256 loops, uint256 bribe) external payable onlyAdmin {\n        for (uint256 i = 0; i < loops; i++) {\n            _call(cdata);\n        }\n        _bribe(bribe);\n    }\n\n    /**\n     * Execute one ore more arbitrary external calls with an optional miner bribe\n     * @dev This function can only be called by an admin\n     */\n    function multicall(CallData[] memory cdatas, uint256 bribe) external payable onlyAdmin {\n        for (uint256 i = 0; i < cdatas.length; i++) {\n            _call(cdatas[i]);\n        }\n        _bribe(bribe);\n    }\n\n    /**\n     * Update an admin record\n     */\n    function _updateAdmin(address account, bool enabled) internal {\n        _admins[account] = enabled;\n    }\n\n    /**\n     * Bribe the miner if `amount` is greater than 0\n     */\n    function _bribe(uint256 amount) internal {\n        if (amount > 0) {\n            block.coinbase.call{ value: amount }(new bytes(0));\n        }\n    }\n\n    /**\n     * Execute an arbitrary external call\n     */\n    function _call(CallData memory cdata) internal {\n        (bool success, bytes memory returndata) = cdata.to.call{ value: cdata.value }(cdata.data);\n        require(success, string(returndata));\n    }\n}\n"
    }
  }
}