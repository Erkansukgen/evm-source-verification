{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.0;\r\n\r\n// helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n}"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "lock.sol": {
      "content": "    // SPDX-License-Identifier: UNLICENSED\r\n\r\n// This contract locks VulcanDex liquidity tokens. \r\n\r\npragma solidity 0.8.0;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"./TransferHelper.sol\";\r\n\r\ninterface IVulcanPair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IERCBurn {\r\n    function burn(uint256 _amount) external;\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IVulcanFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);\r\n}\r\n\r\ninterface IMigrator {\r\n    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract VulcanDexLocker is Ownable, ReentrancyGuard {\r\n  using SafeMath for uint256; \r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  IVulcanFactory public vulcanFactory;\r\n\r\n \r\n  struct TokenLock {\r\n    uint256 lockDate; // the date the token was locked\r\n    uint256 amount; // the amount of tokens still locked (startAmount minus withdrawls)\r\n    uint256 startAmount; // the initial lock amount\r\n    uint256 unlockDate; // the date the token can be withdrawn\r\n    uint256 lockID; // lockID nonce per Vulcan pair\r\n    address owner;\r\n  }\r\n  \r\n   struct UserOwnedInfo {\r\n    EnumerableSet.AddressSet lockedUserTokens; // records all tokens the user has locked\r\n    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\r\n  }\r\n\r\n\r\n  mapping(address => UserOwnedInfo) private users;\r\n\r\n  EnumerableSet.AddressSet private lockedUserTokens;\r\n  mapping(address => TokenLock[]) public tokenLocks; //map Vulcan pair to all its locks\r\n  \r\n  struct FeeStruct {\r\n    uint256 ethFee;\r\n  }\r\n    \r\n  FeeStruct public vulcanFees;\r\n\r\n  address payable ownerAddr;\r\n  address public lpTokenAdd;\r\n  uint256 public endJoin_date;\r\n  uint256 public unlock_date;\r\n  uint256 public AmountToLock;  \r\n  uint256 public principleAmntToken;\r\n  uint256 public maxPoolAmnt;\r\n  uint256 public totalPoolParticipant;\r\n  \r\n  bool public enableMaxPoolLimit = false;\r\n  \r\n  IMigrator migrator;\r\n\r\n  event onDeposit(address indexed lpToken, address indexed user, uint256 amount, uint256 lockDate, uint256 unlockDate);\r\n  event onWithdraw(address indexed lpToken, uint256 amount);\r\n\r\n  \r\n    constructor(IVulcanFactory _vulcanFactory, address _lpTokenAdd, uint256 _endJoin_date, uint256 _unlock_date, uint256 _AmountToLock, uint256 _ethfee, uint256 _poolParticipants) public {\r\n    ownerAddr = payable(msg.sender);\r\n   \r\n    vulcanFactory = _vulcanFactory;\r\n    \r\n      // ensure this pair is a VulcanDex pair by querying the factory\r\n    IVulcanPair lpair = IVulcanPair(address(_lpTokenAdd));\r\n    address factoryPairAddress = vulcanFactory.getPair(lpair.token0(), lpair.token1());\r\n    require(factoryPairAddress == address(_lpTokenAdd), 'NOT VulcanDex Pair');\r\n    require(_unlock_date < 10000000000, 'TIMESTAMP NOT VALID'); // prevents errors when timestamp enter in milliseconds\r\n    require(_endJoin_date < 10000000000, 'TIMESTAMP NOT VALID'); // prevents errors when timestamp enter in milliseconds\r\n\r\n    lpTokenAdd = _lpTokenAdd;\r\n    endJoin_date = _endJoin_date;\r\n    unlock_date =  _unlock_date;\r\n    AmountToLock = _AmountToLock;\r\n    vulcanFees.ethFee = _ethfee;\r\n    totalPoolParticipant = _poolParticipants;\r\n  }\r\n  \r\n  \r\n  \r\n  function setOwner(address payable _ownaddr) public onlyOwner {\r\n    ownerAddr = _ownaddr;\r\n  }\r\n  \r\n  function setFees(uint256 _ethFee) public onlyOwner {\r\n    vulcanFees.ethFee = _ethFee;\r\n  }\r\n\r\n  function setUnlockDate(uint256 _unlock_date) public onlyOwner {\r\n    unlock_date = _unlock_date;\r\n  }\r\n\r\n\r\n function setEndJoinDate(uint256 _endJoin_date) public onlyOwner {\r\n    endJoin_date = _endJoin_date;\r\n  }\r\n\r\n\r\n\r\n function setMaxPoolAmnt(uint256 _maxPoolAmnt) public onlyOwner {\r\n    maxPoolAmnt = _maxPoolAmnt;\r\n  }\r\n  \r\n  \r\n  function setEnableMaxPoolLimit(bool _enableMaxPoolLimit) public onlyOwner {\r\n    enableMaxPoolLimit = _enableMaxPoolLimit;\r\n  }\r\n  \r\n  \r\n   function setTotalPoolParticipant(uint256 _poolParticipants) public onlyOwner {\r\n    totalPoolParticipant = _poolParticipants;\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  /**\r\n   * @notice Creates a new lock\r\n   * @param _amountToLock amount of LP tokens to lock\r\n   * @param _withdrawerAdd the user who can withdraw liquidity once the lock expires.\r\n   */\r\n  function lockLPTokenWithFixedTime(uint256 _amountToLock, address payable _withdrawerAdd) external  nonReentrant {\r\n    require(_amountToLock == AmountToLock, 'INSUFFICIENT');   // prevents errors when amount equals to 0\r\n  \r\n    require(block.timestamp <= unlock_date, 'POOL END');   // prevents errors when amount equals to 0\r\n\r\n\r\n    require(block.timestamp <= endJoin_date, 'POOL CLOSED TO JOIN');   // prevents errors when pool to join closed.\r\n    if(enableMaxPoolLimit==true)\r\n        require(maxPoolAmnt >= principleAmntToken, 'POOL MAX AMOUNT REACHED!');   // prevents errors when amount equals to 0\r\n\r\n\r\n   require(totalPoolParticipant>=tokenLocks[lpTokenAdd].length,'PARTICIPANTS EXCEED!');\r\n    \r\n    TransferHelper.safeTransferFrom(lpTokenAdd, address(msg.sender), address(this), _amountToLock);\r\n\r\n    TokenLock memory token_lock;\r\n    token_lock.lockDate = block.timestamp;\r\n    token_lock.amount = _amountToLock;\r\n    token_lock.startAmount = _amountToLock;\r\n    token_lock.unlockDate = unlock_date;\r\n    token_lock.lockID = tokenLocks[lpTokenAdd].length;\r\n    token_lock.owner = _withdrawerAdd;\r\n\r\n    // record the lock for the VulcanDex pair\r\n    tokenLocks[lpTokenAdd].push(token_lock);\r\n    lockedUserTokens.add(lpTokenAdd);\r\n\r\n    // record the lock for the user\r\n    UserOwnedInfo storage user = users[_withdrawerAdd];\r\n    user.lockedUserTokens.add(lpTokenAdd);\r\n    uint256[] storage user_locks = user.locksForToken[lpTokenAdd];\r\n    user_locks.push(token_lock.lockID);\r\n    principleAmntToken+=_amountToLock;\r\n    emit onDeposit(lpTokenAdd, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @notice Creates a new lock\r\n   * @param _amountToLock amount of LP tokens to lock\r\n   * @param _withdrawerAdd the user who can withdraw liquidity once the lock expires.\r\n   */\r\n  function lockLPTokenWithoutTime(uint256 _amountToLock, address payable _withdrawerAdd) external payable nonReentrant {\r\n    require(_amountToLock == AmountToLock, 'INSUFFICIENT');   // prevents errors when amount equals to 0\r\n    require(block.timestamp <= unlock_date, 'POOL END');   // prevents errors when amount equals to 0\r\n    require(block.timestamp <= endJoin_date, 'POOL CLOSED TO JOIN');   // prevents errors when pool to join closed.\r\n\r\n    if(enableMaxPoolLimit==true)\r\n        require(maxPoolAmnt >= principleAmntToken, 'POOL MAX AMOUNT REACHED!');   // prevents errors when amount equals to 0\r\n\r\n    require(totalPoolParticipant>=tokenLocks[lpTokenAdd].length,'PARTICIPANTS EXCEED!');\r\n    \r\n    TransferHelper.safeTransferFrom(lpTokenAdd, address(msg.sender), address(this), _amountToLock);\r\n    bool _fee_in_eth= true;\r\n    // flatrate fees\r\n    if (_fee_in_eth) { // charge fee in eth\r\n      uint256 ethFee = vulcanFees.ethFee;\r\n      require(msg.value == ethFee, 'FEE LESS PROVIDED');\r\n      uint256 devFee = ethFee;\r\n      ownerAddr.transfer(devFee);\r\n    } \r\n   \r\n\r\n    TokenLock memory token_lock;\r\n    token_lock.lockDate = block.timestamp;\r\n    token_lock.amount = _amountToLock;\r\n    token_lock.startAmount = _amountToLock;\r\n    token_lock.unlockDate = 0;\r\n    token_lock.lockID = tokenLocks[lpTokenAdd].length;\r\n    token_lock.owner = _withdrawerAdd;\r\n\r\n    // record the lock for the Vulcanpair\r\n    tokenLocks[lpTokenAdd].push(token_lock);\r\n    lockedUserTokens.add(lpTokenAdd);\r\n\r\n    // record the lock for the user\r\n    UserOwnedInfo storage user = users[_withdrawerAdd];\r\n    user.lockedUserTokens.add(lpTokenAdd);\r\n    uint256[] storage user_locks = user.locksForToken[lpTokenAdd];\r\n    user_locks.push(token_lock.lockID);\r\n    principleAmntToken+=_amountToLock;\r\n    \r\n    emit onDeposit(lpTokenAdd, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\r\n  }\r\n  \r\n  \r\n  \r\n  /**\r\n   * @notice withdraw a specified amount from a lock. _index and _lockID with time constraint\r\n   */\r\n  function withdrawWithFixedTime(uint256 _index, uint256 _lockID, uint256 _amountToLock) external nonReentrant {\r\n    require(_amountToLock > 0, 'VALUE MUST > 0');\r\n    uint256 lockID = users[msg.sender].locksForToken[lpTokenAdd][_index];\r\n    TokenLock storage userLock = tokenLocks[lpTokenAdd][lockID];\r\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    require(userLock.unlockDate < block.timestamp, 'TIME NOT COMPLETED');\r\n    userLock.amount = userLock.amount.sub(_amountToLock);\r\n    \r\n    // clean user storage\r\n    if (userLock.amount == 0) {\r\n      uint256[] storage userLocks = users[msg.sender].locksForToken[lpTokenAdd];\r\n      userLocks[_index] = userLocks[userLocks.length-1];\r\n      userLocks.pop();\r\n      if (userLocks.length == 0) {\r\n        users[msg.sender].lockedUserTokens.remove(lpTokenAdd);\r\n      }\r\n    }\r\n    \r\n    TransferHelper.safeTransfer(lpTokenAdd, msg.sender, _amountToLock);\r\n    emit onWithdraw(lpTokenAdd, _amountToLock);\r\n  }\r\n  \r\n  \r\n  \r\n  /**\r\n   * @notice withdraw a specified amount from a lock. _index and _lockID without time constraint\r\n   */\r\n  function withdrawWithoutTime(uint256 _index, uint256 _lockID, uint256 _amountToLock) external nonReentrant {\r\n    require(_amountToLock > 0, 'VALUE MUST > 0');\r\n    uint256 lockID = users[msg.sender].locksForToken[lpTokenAdd][_index];\r\n    TokenLock storage userLock = tokenLocks[lpTokenAdd][lockID];\r\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    userLock.amount = userLock.amount.sub(_amountToLock);\r\n    \r\n    // clean user storage\r\n    if (userLock.amount == 0) {\r\n      uint256[] storage userLocks = users[msg.sender].locksForToken[lpTokenAdd];\r\n      userLocks[_index] = userLocks[userLocks.length-1];\r\n      userLocks.pop();\r\n      if (userLocks.length == 0) {\r\n        users[msg.sender].lockedUserTokens.remove(lpTokenAdd);\r\n      }\r\n    }\r\n    \r\n    TransferHelper.safeTransfer(lpTokenAdd, msg.sender, _amountToLock);\r\n    emit onWithdraw(lpTokenAdd, _amountToLock);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\r\n   */\r\n  function transferLockingOwnership(uint256 _index, uint256 _lockID, address payable _newOwner) external {\r\n    require(msg.sender != _newOwner, 'ONLY OWNER');\r\n    uint256 lockID = users[msg.sender].locksForToken[lpTokenAdd][_index];\r\n    TokenLock storage transferredLock = tokenLocks[lpTokenAdd][lockID];\r\n    require(lockID == _lockID && transferredLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    \r\n    // record the lock for the new Owner\r\n    UserOwnedInfo storage user = users[_newOwner];\r\n    user.lockedUserTokens.add(lpTokenAdd);\r\n    uint256[] storage user_locks = user.locksForToken[lpTokenAdd];\r\n    user_locks.push(transferredLock.lockID);\r\n    \r\n    // removing the lock from the old owner\r\n    uint256[] storage userLocks = users[msg.sender].locksForToken[lpTokenAdd];\r\n    userLocks[_index] = userLocks[userLocks.length-1];\r\n    userLocks.pop();\r\n    if (userLocks.length == 0) {\r\n      users[msg.sender].lockedUserTokens.remove(lpTokenAdd);\r\n    }\r\n    transferredLock.owner = _newOwner;\r\n  }\r\n\r\n  function getCntLocksForToken() external view returns (uint256) {\r\n    return tokenLocks[lpTokenAdd].length;\r\n  }\r\n  \r\n  function getCntForLockedTokens() external view returns (uint256) {\r\n    return lockedUserTokens.length();\r\n  }\r\n  \r\n  function getLockedTokenAtIndex(uint256 _index) external view returns (address) {\r\n    return lockedUserTokens.at(_index);\r\n  }\r\n  \r\n  // user functions\r\n  function getUserCntLockedTokens(address _user) external view returns (uint256) {\r\n    UserOwnedInfo storage user = users[_user];\r\n    return user.lockedUserTokens.length();\r\n  }\r\n  \r\n  function getUserLockedTokenAtIndex(address _user, uint256 _index) external view returns (address) {\r\n    UserOwnedInfo storage user = users[_user];\r\n    return user.lockedUserTokens.at(_index);\r\n  }\r\n  \r\n  function getUserCntLocksForToken(address _user) external view returns (uint256) {\r\n    UserOwnedInfo storage user = users[_user];\r\n    return user.locksForToken[lpTokenAdd].length;\r\n  }\r\n  \r\n  function getUserLockForTokenAtIndex(address _user, uint256 _index) external view\r\n  returns (uint256, uint256, uint256, uint256, uint256, address) {\r\n    uint256 lockID = users[_user].locksForToken[lpTokenAdd][_index];\r\n    TokenLock storage tokenLock = tokenLocks[lpTokenAdd][lockID];\r\n    return (tokenLock.lockDate, tokenLock.amount, tokenLock.startAmount, tokenLock.unlockDate, tokenLock.lockID, tokenLock.owner);\r\n  }\r\n  \r\n}"
    }
  }
}