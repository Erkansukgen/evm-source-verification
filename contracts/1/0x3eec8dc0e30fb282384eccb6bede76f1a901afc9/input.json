{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/rush.sol": {
      "content": "pragma solidity >=0.5.16 <0.6.9;\n//INCONTRACTWETRUST\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n}\n\ncontract EthereumeRush {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    address payable public fundsWallet;\n    uint256 public maximumTarget;\n    uint256 public lastBlock;\n    uint256 public rewardTimes;\n    uint256 public genesisReward;\n    uint256 public premined;\n    uint256 public nRewarMod;\n    uint256 public nWtime;\n    uint256 public totalReceived;\n\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n\n    constructor(\n        uint256 initialSupply,\n        string memory tokenName,\n        string memory tokenSymbol\n    ) public {\n        initialSupply = 21919180  * 10 ** uint256(decimals);\n        tokenName = \"EthereumeRush\";\n        tokenSymbol = \"EER\";\n        lastBlock = 135;\n        nRewarMod = 5200;\n        nWtime = 3788923100; \n        genesisReward = (2**14)* (10**uint256(decimals));\n        maximumTarget = 100  * 10 ** uint256(decimals);\n        fundsWallet = msg.sender;\n        premined = 3000000 * 10 ** uint256(decimals);\n        balanceOf[msg.sender] = premined;\n        balanceOf[address(this)] = initialSupply;\n        totalSupply =  initialSupply + premined;\n        name = tokenName;\n        symbol = tokenSymbol;\n        totalReceived = 0;\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\n\n\n    function uintToString(uint256 v) internal pure returns(string memory str) {\n        uint maxlength = 100;\n        bytes memory reversed = new bytes(maxlength);\n        uint i = 0;\n        while (v != 0) {\n            uint remainder = v % 10;\n            v = v / 10;\n            reversed[i++] = byte(uint8(48 + remainder));\n        }\n        bytes memory s = new bytes(i + 1);\n        for (uint j = 0; j <= i; j++) {\n            s[j] = reversed[i - j];\n        }\n        str = string(s);\n    }\n\n    function append(string memory a, string memory b) internal pure returns (string memory) {\n        return string(abi.encodePacked(a,\"-\",b));\n    }\n\n\n\n\n    function getblockhash() public view returns (uint256) {\n            return uint256(blockhash(block.number-1));\n    }\n\n    function getspesificblockhash(uint256 _blocknumber) public view returns(uint256, uint256){\n        uint256 crew = uint256(blockhash(_blocknumber)) % nRewarMod;\n        return (crew, block.number-1);\n    }\n\n\n\n\n    function checkRewardStatus() public view returns (uint256, uint256) {\n        uint256 crew = uint256(blockhash(block.number-1)) % nRewarMod;\n        return (crew, block.number-1);\n    }\n\n\n\n\n    struct sdetails {\n      uint256 _stocktime;\n      uint256 _stockamount;\n    }\n\n\n    address[] totalminers;\n\n    mapping (address => sdetails) nStockDetails;\n    struct rewarddetails {\n        uint256 _artyr;\n        bool _didGetReward;\n        bool _didisign;\n    }\n    mapping (string => rewarddetails) nRewardDetails;\n\n    struct nBlockDetails {\n        uint256 _bTime;\n        uint256 _tInvest;\n    }\n    mapping (uint256 => nBlockDetails) bBlockIteration;\n\n\n  struct activeMiners {\n      address bUser;\n  }\n\n  mapping(uint256 => activeMiners[]) aMiners;\n\n\n    function numberofminer() view public returns (uint256) {\n        return totalminers.length;\n    }\n\n\n    function nAddrHash() view public returns (uint256) {\n        return uint256(msg.sender) % 10000000000;\n    }\n\n     function getmaximumAverage() public view returns(uint){\n         if(numberofminer() == 0){\n             return maximumTarget;\n         } else {\n             return maximumTarget / numberofminer();\n         }\n    }\n\n\n    \n\n\n   function checkAddrMinerStatus(address _addr) view public returns(bool){\n    if(nStockDetails[_addr]._stocktime == 0){\n        return false;\n    } else {\n        return true;\n    }\n   }\n\n   function checkAddrMinerAmount(address _addr) view public returns(uint256){\n    if(nStockDetails[_addr]._stocktime == 0){\n        return 0;\n    } else {\n        return nStockDetails[_addr]._stockamount;\n    }\n   }\n\n\n\n\n\n   function getactiveminersnumber() view public returns(uint256) {\n        return aMiners[lastBlock].length; //that function for information.\n   }\n   \n   \n   function nMixAddrandBlock()  private view returns(string memory) {\n         return append(uintToString(nAddrHash()),uintToString(lastBlock));\n    }\n    \n    \n   \n   function signfordailyreward(uint256 _bnumber) public returns (uint256)  {\n       require(checkAddrMinerStatus(msg.sender) == true);\n       require((block.number-1) - _bnumber  <= 100);\n       require(uint256(blockhash(_bnumber)) % nRewarMod == 1);\n        if(bBlockIteration[lastBlock]._bTime + 1800 < now){\n           lastBlock += 1;\n           bBlockIteration[lastBlock]._bTime = now;\n       }\n       require(nRewardDetails[nMixAddrandBlock()]._artyr == 0);\n       bBlockIteration[lastBlock]._tInvest += nStockDetails[msg.sender]._stockamount;\n       nRewardDetails[nMixAddrandBlock()]._artyr = now;\n       nRewardDetails[nMixAddrandBlock()]._didGetReward = false;\n       nRewardDetails[nMixAddrandBlock()]._didisign = true;\n       aMiners[lastBlock].push(activeMiners(msg.sender));\n       return 200;\n   }\n\n   \n   function getDailyReward(uint256 _bnumber) public returns(uint256) {\n       require(checkAddrMinerStatus(msg.sender) == true);\n       require((block.number-1) - _bnumber  >= 100);\n       require(uint256(blockhash(_bnumber)) % nRewarMod == 1);\n       require(nRewardDetails[nMixAddrandBlock()]._didGetReward == false);\n       require(nRewardDetails[nMixAddrandBlock()]._didisign == true);\n       uint256 totalRA = genesisReward / 2 ** (lastBlock/730);\n       uint256 usersReward = (totalRA * (nStockDetails[msg.sender]._stockamount * 100) / bBlockIteration[lastBlock]._tInvest) /  100;\n       nRewardDetails[nMixAddrandBlock()]._didGetReward = true;\n       _transfer(address(this), msg.sender, usersReward);\n       return usersReward;\n   }\n\n    function becameaminer(uint256 mineamount) public returns (uint256) {\n      uint256 realMineAmount = mineamount * 10 ** uint256(decimals);\n      require(realMineAmount > getmaximumAverage() / 100); //Minimum maximum targes one percents neccessary.\n      require(realMineAmount > 1 * 10 ** uint256(decimals)); //minimum 1 coin require\n      require(nStockDetails[msg.sender]._stocktime == 0);\n      require(mineamount <= 3000);\n      maximumTarget +=  realMineAmount;\n      nStockDetails[msg.sender]._stocktime = now;\n      nStockDetails[msg.sender]._stockamount = realMineAmount;\n      totalminers.push(msg.sender);\n      _transfer(msg.sender, address(this), realMineAmount);\n      return 200;\n   }\n\n\n\n   function getyourcoinsbackafterthreemonths() public returns(uint256) {\n       require(checkAddrMinerStatus(msg.sender) == true);\n       require(nStockDetails[msg.sender]._stocktime + nWtime < now  );\n       nStockDetails[msg.sender]._stocktime = 0;\n       _transfer(address(this),msg.sender,nStockDetails[msg.sender]._stockamount);\n       return nStockDetails[msg.sender]._stockamount;\n   }\n\n   struct memoIncDetails {\n       uint256 _receiveTime;\n       uint256 _receiveAmount;\n       address _senderAddr;\n       string _senderMemo;\n   }\n\n  mapping(address => memoIncDetails[]) textPurchases;\n  function sendtokenwithmemo(uint256 _amount, address _to, string memory _memo)  public returns(uint256) {\n      textPurchases[_to].push(memoIncDetails(now, _amount, msg.sender, _memo));\n      _transfer(msg.sender, _to, _amount);\n      return 200;\n  }\n\n\n   function checkmemopurchases(address _addr, uint256 _index) view public returns(uint256,\n   uint256,\n   string memory,\n   address) {\n\n       uint256 rTime = textPurchases[_addr][_index]._receiveTime;\n       uint256 rAmount = textPurchases[_addr][_index]._receiveAmount;\n       string memory sMemo = textPurchases[_addr][_index]._senderMemo;\n       address sAddr = textPurchases[_addr][_index]._senderAddr;\n       if(textPurchases[_addr][_index]._receiveTime == 0){\n            return (0, 0,\"0\", _addr);\n       }else {\n            return (rTime, rAmount,sMemo, sAddr);\n       }\n   }\n\n\n\n   function getmemotextcountforaddr(address _addr) view public returns(uint256) {\n       return  textPurchases[_addr].length;\n   }\n }"
    }
  }
}