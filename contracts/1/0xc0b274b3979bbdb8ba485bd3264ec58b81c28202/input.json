{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"eth/CzzV7Router.sol":{"content":"\r\npragma solidity =0.6.6;\r\n\r\nimport './IERC20.sol';\r\n\r\nimport './UniswapV2Library.sol';\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface ICzzSwap is IERC20 {\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(address _account, uint256 _amount) external;\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\ncontract CzzV7Router is Ownable {\r\n    \r\n    address czzToken;\r\n    \r\n    \r\n    uint constant MIN_SIGNATURES = 1;\r\n    uint minSignatures = 0;\r\n    mapping (address => uint8) private managers;\r\n    mapping (address => uint8) private routerAddrs;\r\n    mapping (uint => MintItem) private mintItems;\r\n    uint256[] private pendingItems;\r\n    struct KeyFlag { address key; bool deleted; }\r\n\r\n    struct MintItem {\r\n        address to;\r\n        uint256 amount;\r\n        uint8 signatureCount;\r\n        mapping (address => uint8) signatures;\r\n        KeyFlag[] keys;\r\n    }\r\n   \r\n    event MintItemCreated(\r\n        address indexed from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 mId\r\n    );\r\n    event MintToken(\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 mid,\r\n        uint256 amountIn\r\n    );\r\n    event BurnToken(\r\n        address  indexed to,\r\n        uint256  amount,\r\n        uint256  ntype,\r\n        string   toToken\r\n    );\r\n    event SwapToken(\r\n        address indexed to,\r\n        uint256 inAmount,\r\n        uint256 outAmount,\r\n        string   flag\r\n    );\r\n    event TransferToken(\r\n        address  indexed to,\r\n        uint256  amount\r\n    );\r\n\r\n    modifier isManager {\r\n        require(\r\n            msg.sender == owner() || managers[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    constructor(address _token) public {\r\n        czzToken = _token;\r\n        minSignatures = MIN_SIGNATURES;\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function addManager(address manager) public onlyOwner{\r\n        managers[manager] = 1;\r\n    }\r\n    \r\n    function removeManager(address manager) public onlyOwner{\r\n        managers[manager] = 0;\r\n    }\r\n\r\n    function addRouterAddr(address routerAddr) public isManager{\r\n        routerAddrs[routerAddr] = 1;\r\n    }\r\n    \r\n    function removeRouterAddr(address routerAddr) public isManager{\r\n        routerAddrs[routerAddr] = 0;\r\n    }\r\n\r\n    function getRegistedRouteraddress(address routerAddr) public view isManager returns(uint8 ){\r\n        return routerAddrs[routerAddr];\r\n    }\r\n   \r\n    function approve(address token, address spender, uint256 _amount) public virtual returns (bool) {\r\n        require(address(token) != address(0), \"approve token is the zero address\");\r\n        require(address(spender) != address(0), \"approve spender is the zero address\");\r\n        require(_amount != 0, \"approve _amount is the zero \");\r\n        require(routerAddrs[spender] == 1, \"spender is not router address \");        \r\n        IERC20(token).approve(spender,_amount);\r\n        return true;\r\n    }\r\n    \r\n    function deleteItems(uint256 mid) internal isManager {\r\n        uint8 replace = 0;\r\n        for(uint i = 0; i< pendingItems.length; i++){\r\n            if(1==replace){\r\n                pendingItems[i-1] = pendingItems[i];\r\n            }else if(mid == pendingItems[i]){\r\n                replace = 1;\r\n            }\r\n        } \r\n        delete pendingItems[pendingItems.length - 1];\r\n        // pendingItems.length--;\r\n        // delete mintItems[mid];\r\n    }\r\n    \r\n    function getItem(uint256 mid) internal view returns (uint8 ret){    //0 ok  1 error\r\n        for(uint i = 0; i< pendingItems.length; i++){\r\n            if(mid == pendingItems[i]){\r\n                return 0;\r\n            }\r\n        } \r\n        return 1;\r\n    }\r\n    \r\n    function insert_signature(MintItem storage item, address key) internal returns (bool replaced)\r\n    {\r\n        if (item.signatures[key] == 1)\r\n            return false;\r\n        else\r\n        {\r\n            KeyFlag memory key1;\r\n            item.signatures[key] = 1;\r\n            key1.key = key;\r\n            item.keys.push(key1);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function remove_signature_all(MintItem storage self) internal\r\n    {\r\n        for(uint256 i = 0; i < self.keys.length; i++){\r\n            address key = self.keys[i].key;\r\n            delete self.signatures[key];\r\n        }\r\n    }\r\n\r\n    function _swapMint(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal {\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n        IUniswapV2Router02(routerAddr).swapExactTokensForTokens(amountIn, amountOutMin,path,to,deadline);\r\n\r\n    }\r\n\r\n    function _swapBurn(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal {\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n        TransferHelper.safeTransferFrom(path[0], msg.sender, address(this), amountIn);\r\n        IUniswapV2Router02(routerAddr).swapExactTokensForTokens(amountIn, amountOutMin,path,to,deadline);\r\n    }\r\n\r\n    function _swapEthBurn(\r\n        uint amountInMin,\r\n        address[] memory path,\r\n        address to, \r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal {\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < msg.value) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n        IWETH(path[0]).deposit{value: msg.value}();\r\n        IUniswapV2Router02(routerAddr).swapExactTokensForTokens(msg.value,amountInMin,path,to,deadline);\r\n    }\r\n    \r\n    function _swapEthMint(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] memory path,\r\n        address to, \r\n        address routerAddr,\r\n        uint deadline\r\n        ) internal {\r\n      \r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(-1));\r\n        }\r\n        IUniswapV2Router02(routerAddr).swapExactTokensForETH(amountIn, amountOutMin,path,to,deadline);\r\n    }\r\n    \r\n    function swap_burn_get_getReserves(address factory, address tokenA, address tokenB) public view isManager returns (uint reserveA, uint reserveB){\r\n        require(address(0) != factory);\r\n        return UniswapV2Library.getReserves(factory, tokenA, tokenB);\r\n    }\r\n    \r\n    function swap_burn_get_amount(uint amountIn, address[] memory path,address routerAddr) public view returns (uint[] memory amounts){\r\n        require(address(0) != routerAddr); \r\n        return IUniswapV2Router02(routerAddr).getAmountsOut(amountIn,path);\r\n    }\r\n    \r\n    function swap_mint_get_amount(uint amountOut, address[] memory path, address routerAddr) public view returns (uint[] memory amounts){\r\n        require(address(0) != routerAddr); \r\n        return IUniswapV2Router02(routerAddr).getAmountsOut(amountOut,path);\r\n    }\r\n    \r\n    function swapTokenWithPath(address _to, uint _amountIn, uint _amountInMin, uint256 mid, uint256 gas, address routerAddr, address[] memory userPath, uint deadline) payable public isManager {\r\n        require(address(0) != _to);\r\n        require(address(0) != routerAddr); \r\n        //require(address(0) != WethAddr); \r\n        require(_amountIn > 0);\r\n        require(userPath[0] == czzToken, \"userPath 0 is not czz\");\r\n        //require(address(this).balance >= _amountIn);\r\n        \r\n        MintItem storage item = mintItems[mid];\r\n        require(insert_signature(item, msg.sender), \"repeat sign\");\r\n        item.to = _to;\r\n        item.amount = _amountIn;\r\n        if(item.signatureCount++ == 0) {\r\n            pendingItems.push(mid);\r\n            emit MintItemCreated(msg.sender, _to, _amountIn, mid);\r\n        }\r\n        if(item.signatureCount >= minSignatures)\r\n        {\r\n            if(getItem(mid) != 0){\r\n                return;\r\n            }\r\n            require(_amountIn > gas, \"ROUTER: transfer amount exceeds gas\");\r\n            ICzzSwap(czzToken).mint(address(this), _amountIn);    // mint to contract address   \r\n            uint[] memory amounts = swap_mint_get_amount(_amountIn, userPath, routerAddr);\r\n            if(gas > 0){\r\n                bool success = true;\r\n                 //_swapEthMint(gas, _gasMin, gasPath, msg.sender, routerAddr, deadline);\r\n                (success) = ICzzSwap(czzToken).transfer(msg.sender, gas); \r\n                require(success, 'swapTokenWithPath gas Transfer error');\r\n            }\r\n            _swapMint(_amountIn-gas, _amountInMin, userPath, _to, routerAddr, deadline);\r\n            emit MintToken(_to, amounts[amounts.length - 1],mid,_amountIn);\r\n            remove_signature_all(item);\r\n            deleteItems(mid);\r\n            delete mintItems[mid];\r\n            return;\r\n        }\r\n        // MintItem item;\r\n        mintItems[mid] = item;\r\n    }\r\n    \r\n    \r\n    function swapTokenForEthWithPath(address _to, uint _amountIn, uint _amountInMin, uint256 mid, uint256 gas, address routerAddr, address[] memory path, uint deadline) payable public isManager {\r\n        require(address(0) != _to);\r\n        require(address(0) != routerAddr); \r\n        require(_amountIn > 0);\r\n        require(path[0] == czzToken, \"path 0 is not czz\");\r\n        MintItem storage item = mintItems[mid];\r\n        require(insert_signature(item, msg.sender), \"repeat sign\");\r\n        item.to = _to;\r\n        item.amount = _amountIn;\r\n        if(item.signatureCount++ == 0) {\r\n            pendingItems.push(mid);\r\n            emit MintItemCreated(msg.sender, _to, _amountIn, mid);\r\n        }\r\n\r\n        if(item.signatureCount >= minSignatures)\r\n        {\r\n            if(getItem(mid) != 0){\r\n                return;\r\n            }\r\n            require(_amountIn > gas, \"ROUTER: transfer amount exceeds gas\");\r\n            ICzzSwap(czzToken).mint(address(this), _amountIn);    // mint to contract address   \r\n            uint[] memory amounts = swap_mint_get_amount(_amountIn, path, routerAddr);\r\n            if(gas > 0){\r\n                bool success = true;\r\n                //_swapEthMint(gas, _gasMin, path, msg.sender, routerAddr, deadline);\r\n                (success) = ICzzSwap(czzToken).transfer(msg.sender, gas); \r\n                require(success, 'swapTokenForEthWithPath gas Transfer error');\r\n            }\r\n            _swapEthMint(_amountIn-gas, _amountInMin, path, _to, routerAddr, deadline);\r\n            emit MintToken(_to, amounts[amounts.length - 1],mid,_amountIn);\r\n            remove_signature_all(item);\r\n            deleteItems(mid);\r\n            delete mintItems[mid];\r\n            return;\r\n        }\r\n        // MintItem item;\r\n        mintItems[mid] = item;\r\n    }\r\n    \r\n    function swapAndBurnWithPath( uint _amountIn, uint _amountOutMin, uint256 ntype, string memory toToken, address routerAddr, address[] memory path, uint deadline) payable public\r\n    {\r\n        require(address(0) != routerAddr); \r\n        require(path[path.length - 1] == czzToken, \"last path  is not czz\"); \r\n\r\n        uint[] memory amounts = swap_burn_get_amount(_amountIn, path, routerAddr);\r\n        _swapBurn(_amountIn, _amountOutMin, path, msg.sender, routerAddr, deadline);\r\n        if(ntype != 1){\r\n            ICzzSwap(czzToken).burn(msg.sender, amounts[amounts.length - 1]);\r\n            emit BurnToken(msg.sender, amounts[amounts.length - 1], ntype, toToken);\r\n        }\r\n      \r\n    }\r\n    \r\n    function swapAndBurnEthWithPath( uint _amountInMin, uint256 ntype, string memory toToken, address routerAddr, address[] memory path, uint deadline) payable public\r\n    {\r\n        require(address(0) != routerAddr); \r\n        require(path[path.length - 1] == czzToken, \"last path  is not czz\"); \r\n        require(msg.value > 0);\r\n        uint[] memory amounts = swap_burn_get_amount(msg.value, path, routerAddr);\r\n        _swapEthBurn(_amountInMin, path, msg.sender, routerAddr, deadline);\r\n        if(ntype != 1){\r\n            ICzzSwap(czzToken).burn(msg.sender, amounts[amounts.length - 1]);\r\n            emit BurnToken(msg.sender, amounts[amounts.length - 1], ntype, toToken);\r\n        }\r\n      \r\n    }\r\n    \r\n    function setMinSignatures(uint8 value) public isManager {\r\n        minSignatures = value;\r\n    }\r\n\r\n    function getMinSignatures() public view isManager returns(uint256){\r\n        return minSignatures;\r\n    }\r\n\r\n    function setCzzTonkenAddress(address addr) public isManager {\r\n        czzToken = addr;\r\n    }\r\n\r\n    function getCzzTonkenAddress() public view isManager returns(address ){\r\n        return czzToken;\r\n    }\r\n\r\n    \r\n    function burn( uint _amountIn, uint256 ntype, string memory toToken) payable public \r\n    {\r\n        ICzzSwap(czzToken).burn(msg.sender, _amountIn);\r\n        emit BurnToken(msg.sender, _amountIn, ntype, toToken);\r\n    }\r\n    \r\n    function mintWithGas(uint256 mid, address _to, uint256 _amountIn, uint256 gas, address routerAddr)  payable public isManager \r\n    {\r\n        require(address(0) != routerAddr); \r\n        require(_amountIn > 0);\r\n        require(_amountIn >= gas, \"ROUTER: transfer amount exceeds gas\");\r\n\r\n        MintItem storage item = mintItems[mid];\r\n        require(insert_signature(item, msg.sender), \"repeat sign\");\r\n        item.to = _to;\r\n        item.amount = _amountIn;\r\n        if(item.signatureCount++ == 0) {\r\n            pendingItems.push(mid);\r\n            emit MintItemCreated(msg.sender, _to, _amountIn, mid);\r\n        }\r\n        if(item.signatureCount >= minSignatures)\r\n        {\r\n            if(getItem(mid) != 0){\r\n                return;\r\n            }\r\n            ICzzSwap(czzToken).mint(address(this), _amountIn);    // mint to contract address\r\n            bool success = true;   \r\n            if(gas > 0){\r\n                 \r\n                //_swapEthMint(gas, _gasMin, path, msg.sender, routerAddr, deadline);\r\n                (success) = ICzzSwap(czzToken).transfer(msg.sender, gas); \r\n                require(success, 'mintWithGas gas Transfer error');\r\n            }\r\n            (success) = ICzzSwap(czzToken).transfer(_to, _amountIn-gas);\r\n            require(success, 'mintWithGas amountIn Transfer error');\r\n            emit MintToken(_to, _amountIn-gas, mid,_amountIn);\r\n            remove_signature_all(item);\r\n            deleteItems(mid);\r\n            delete mintItems[mid];\r\n            return;\r\n        }\r\n        // MintItem item;\r\n        mintItems[mid] = item;\r\n    }\r\n\r\n    function mint(uint256 mid, address _to, uint256 _amountIn)  payable public isManager \r\n    {\r\n        ICzzSwap(czzToken).mint(_to, _amountIn);\r\n        emit MintToken(_to, 0, mid,_amountIn);\r\n    }\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n"},"eth/IERC20.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n"},"eth/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"},"eth/SafeMath.sol":{"content":"pragma solidity =0.6.6;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"},"eth/UniswapV2Library.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\nimport './IUniswapV2Pair.sol';\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                //hex'7056d57147848f55cd726d398882996bbcea521640db72311f599433b1c788a7' // init code hash testnet\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'  //init code  hash ropsten\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n"}}}