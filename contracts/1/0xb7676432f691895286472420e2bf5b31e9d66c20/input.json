{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/MadRabbitsVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.7;\n\ncontract MadRabbitsVault {\n  address public _t1 = 0x9704e7f9445509c740CAafB4c6cD62cEa03c3fa5;\n  address public _t2 = 0x060B103D088e3f5C8381c20Cf2c5e675dda28D59;\n  address public _t3 = 0x5453D123EDdC36f2C05E1FCcBD0AA9fAC579BC2A;\n  address public _t4 = 0x5404980C4e40310073f4c959E91bA94c4C47Ca03;\n  address public _t5 = 0x1EdC92cF7447A8FeCa279ea48d60D05100F03694;\n  address public _t6 = 0x01a5Ade4eB79999a941D887Ace9B2710c2578c5F;\n  address public _t7 = 0x17842c31D82C05FA5baD798A44B496B470265777;\n  address public _t8 = 0x8353cAcfcfFA3F7111CBcdE6e49f720e14fda06e;\n  address public _t9 = 0xec7146921ee4aB15375BC01673e6d9Dd4375Eff8;\n  address public _t10 = 0xE1bBf31a6c7447d80179422F6D0D8B46B2821383;\n  address public _t11 = 0xE36dF7A5050C1f319b71313072929802920E5E6C;\n  address public _t12 = 0xa34F5608F60e0E9e526db8aeDC72A329795d4e08;\n\n  bool internal _lock;\n\n  constructor() {}\n\n  receive() external payable {}\n\n  fallback() external payable {}\n\n  function withdraw() public nonReentrant {\n    uint _p1 = address(this).balance * 97 / 200;\n    uint _p2 = address(this).balance / 10;\n    uint _p3 = address(this).balance / 10;\n    uint _p4 = address(this).balance / 20;\n    uint _p5 = address(this).balance / 40;\n    uint _p6 = address(this).balance * 9 / 100;\n    uint _p7 = address(this).balance / 40;\n    uint _p8 = address(this).balance / 40;\n    uint _p9 = address(this).balance / 40;\n    uint _p10 = address(this).balance / 40;\n    uint _p11 = address(this).balance / 40;\n    uint _p12 = address(this).balance / 40;\n\n    require(payable(_t1).send(_p1));\n    require(payable(_t2).send(_p2));\n    require(payable(_t3).send(_p3));\n    require(payable(_t4).send(_p4));\n    require(payable(_t5).send(_p5));\n    require(payable(_t6).send(_p6));\n    require(payable(_t7).send(_p7));\n    require(payable(_t8).send(_p8));\n    require(payable(_t9).send(_p9));\n    require(payable(_t10).send(_p10));\n    require(payable(_t11).send(_p11));\n    require(payable(_t12).send(_p12));\n  }\n\n  modifier nonReentrant() {\n    require(!_lock, \"Reentrant Call!\");\n    _lock = true;\n    _;\n    _lock = false;\n  }\n}\n"
    }
  }
}