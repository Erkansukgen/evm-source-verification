{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Squidcoin.sol": {
      "content": "pragma solidity ^0.8.2;\n\ncontract Token {\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowance;\n    uint public totalSupply = 1000000000;\n    string public name = \"SquidCoin\";\n    string public symbol = \"SQD\";\n    uint public decimals = 18;\n    \n    event Transfer(address indexed from, address indexed to, uint value);\n    event approval(address indexed owner, address indexed spender, uint value);\n    \n    constructor() {\n        balances[msg.sender] = totalSupply;\n        \n    }\n    \n    function balance0f(address ownder) public view returns(uint) {\n        return balances[ownder];\n    }\n    \n    function transfer(address to, uint value) public returns(bool) {\n        require(balance0f(msg.sender) >= value, 'balance too low');\n        balances[to] += value;\n        balances[msg.sender] -= value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    function transferFrom(address from, address to, uint value) public returns(bool) {\n        require(balance0f(from) >= value, 'balance too low');\n        require(allowance[from][msg.sender] >= value, 'allowance too low');\n        balances[to] += value;\n        balances[from] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    function approve(address spender, uint value) public returns(bool) {\n        allowance[msg.sender][spender] = value;\n        emit approval(msg.sender, spender, value);\n        return true;\n    }\n}"
    }
  }
}