{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DigitalMarketToken.sol": {
      "content": "pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n    function Add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"Safe Math Error-Add!\");\r\n    }\r\n    function Sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a, \"Safe Math Error-Sub!\");\r\n        c = a - b;\r\n    }\r\n    function Mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"Safe Math Error-Mul!\");\r\n    }\r\n    function Div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0, \"Safe Math Error-Div!\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address tokenOwner) public view returns (uint256); //balance\r\n    function allowance(address tokenOwner, address spender) public view returns (uint256); //remaining\r\n    function transfer(address to, uint tokens) public returns (bool);\r\n    function approve(address spender, uint tokens) public returns (bool);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Burn(address indexed burner, uint value);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 amount, address tokenAdd) public;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract DigitalMarketToken is ERC20Interface, Owned { \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n    bool public paused = false;\r\n    \r\n    mapping(address => uint) public balances;\r\n    mapping(address => uint) public burns;\r\n    mapping(address => mapping(address => uint))  allowed; \r\n    \r\n    constructor() public {\r\n        symbol = \"DMT\";\r\n        name = \"Digital Market Token\";\r\n        decimals = 18;\r\n        _totalSupply = 21000000 * 1000000000000000000;\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n    \r\n    modifier pausable() {\r\n        require(!paused, \"Token is temporary paused!\");\r\n        _;\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public pausable returns(bool) {\r\n        balances[msg.sender] = SafeMath.Sub(balances[msg.sender], tokens);\r\n        balances[to] = SafeMath.Add(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint tokens) public pausable returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokens) public pausable returns (bool) {\r\n        balances[from] = SafeMath.Sub(balances[from], tokens);\r\n        allowed[from][msg.sender] = SafeMath.Sub(allowed[from][msg.sender], tokens);\r\n        balances[to] = SafeMath.Add(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address spender, uint tokens) public pausable returns(bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, spender);\r\n        return true;\r\n    }\r\n    \r\n    function burnToken(uint _amount) public onlyOwner{\r\n         require(_amount <= balances[msg.sender], \"insuficient balance!\");\r\n         balances[msg.sender] = SafeMath.Sub(balances[msg.sender], _amount);\r\n         _totalSupply = SafeMath.Sub(_totalSupply, _amount);\r\n         emit Burn(msg.sender, _amount);\r\n         emit Transfer(msg.sender, address(0), _amount);\r\n    }\r\n    \r\n    function pause(bool _paused) public onlyOwner  { \r\n        paused = _paused;\r\n    }\r\n    \r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _user) public view returns (uint256) {\r\n        return balances[_user];\r\n    }\r\n    \r\n    function allowance(address _user, address spender) public view returns (uint256){\r\n        return allowed[_user][spender];\r\n    }\r\n    \r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}"
    }
  }
}