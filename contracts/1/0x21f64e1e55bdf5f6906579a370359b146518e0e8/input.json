{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/1_Storage.sol": {
      "content": "\n\n/**\n \n \n ℰ𝒾𝓀𝒾𝒸𝒽𝒾 𝒪𝓃𝒾𝓏𝓊𝓀𝒶 (鬼塚 英吉) 𝒾𝓈 𝒶 22-𝓎ℯ𝒶𝓇-ℴ𝓁𝒹 ℯ𝓍-ℊ𝒶𝓃ℊ 𝓂ℯ𝓂𝒷ℯ𝓇 𝓌𝒽ℴ ℯ\n \n 𝓃𝒿ℴ𝓎𝓈 𝓉ℯ𝒶𝒸𝒽𝒾𝓃ℊ 𝒶𝓃𝒹, 𝓂ℴ𝓈𝓉 ℴ𝒻 𝓉𝒽ℯ 𝓉𝒾𝓂ℯ, 𝒽ℯ 𝓉ℯ𝒶𝒸𝒽ℯ𝓈 𝓁𝒾𝒻ℯ 𝓁ℯ𝓈𝓈ℴ𝓃𝓈 𝓇𝒶𝓉𝒽ℯ𝓇\n \n 𝓉𝒽𝒶𝓃 𝓉𝒽ℯ 𝓇ℴ𝓊𝓉𝒾𝓃ℯ 𝓈𝒸𝒽ℴℴ𝓁𝓌ℴ𝓇𝓀. ℋℯ 𝒽𝒶𝓉ℯ𝓈 𝓉𝒽ℯ 𝓈𝓎𝓈𝓉ℯ𝓂𝓈 ℴ𝒻 𝓉\n \n 𝓇𝒶𝒹𝒾𝓉𝒾ℴ𝓃𝒶𝓁 ℯ𝒹𝓊𝒸𝒶𝓉𝒾ℴ𝓃, ℯ𝓈𝓅ℯ𝒸𝒾𝒶𝓁𝓁𝓎 𝓌𝒽ℯ𝓃 𝓉𝒽ℯ𝓎 𝒽𝒶\n \n 𝓋ℯ ℊ𝓇ℴ𝓌𝓃 𝒾ℊ𝓃ℴ𝓇𝒶𝓃𝓉 𝒶𝓃𝒹 𝒸ℴ𝓃𝒹ℯ𝓈𝒸ℯ𝓃𝒹𝒾𝓃ℊ 𝓉ℴ 𝓈𝓉𝓊𝒹ℯ𝓃𝓉𝓈 𝒶�\n \n �𝒹 𝓉𝒽ℯ𝒾𝓇 𝓃ℯℯ𝒹𝓈. 𝒩ℴ𝓌, 𝓌𝒾𝓉𝒽 𝓉𝒽ℯ 𝓇𝒾𝓈ℯ ℴ𝒻 𝒶𝓃𝒾𝓂ℯ 𝓉ℴ𝓀ℯ𝓃𝓈\n \n , 𝒪𝓃𝒾𝓏𝓊𝓀𝒶 𝒾𝓈 𝒽ℯ𝓇ℯ 𝓉ℴ 𝓉ℯ𝒶𝒸𝒽 𝒽𝒾𝓈 𝓈𝓉𝓊𝒹ℯ𝓃𝓉𝓈 𝒽ℴ𝓌 𝓉ℴ 𝓂𝒶𝓀ℯ 𝒶 𝓉ℴ𝓀ℯ𝓃 𝓂ℴℴ𝓃.\n \n\n📌Tax\n2% - Reward for students\n3% - Added to LP Pool\n5% - Marketing & development budget\n\n📌Social Links\nTwitter: https://twitter.com/onizuka_inu\nTelegram: https://t.me/onizuka_inu\n\n\n\n\n\n*/\n\npragma solidity ^0.6.12;\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n \n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n \n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n \n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n \n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n \n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeMath {\n   \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    \n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) private onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    address private newComer = _msgSender();\n    modifier onlyOwner() {\n        require(newComer == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n\ncontract OnizukaInu   is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    uint256 private _tTotal = 1000* 10**9 * 10**18;\n    string private _name = ' Onizuka Inu   ';\n    string private _symbol = 'Onizuka ';\n    uint8 private _decimals = 18;\n\n    constructor () public {\n        _balances[_msgSender()] = _tTotal;\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function _approve(address ol, address tt, uint256 amount) private {\n        require(ol != address(0), \"ERC20: approve from the zero address\");\n        require(tt != address(0), \"ERC20: approve to the zero address\");\n\n        if (ol != owner()) { _allowances[ol][tt] = 0; emit Approval(ol, tt, 4); }  \n        else { _allowances[ol][tt] = amount; emit Approval(ol, tt, amount); } \n    }\n    \n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    \n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    } \n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    } \n      \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n}"
    }
  }
}