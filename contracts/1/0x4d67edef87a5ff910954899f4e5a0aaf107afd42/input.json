{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/TokenContract/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "contracts/TokenContract/BlueSparrowContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity  ^0.8.7;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\nimport \"./SafeMath.sol\";\n\n\n//An interface contract to interact with VRF random number generate \"chainLink\"\n\ninterface RNG{\n    function getRandomNumber() external;\n    function randomResult() view external returns (uint256);\n}\n\ncontract BlueSparrow is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    \n\n  \n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcluded;\n    \n    address[] private _excluded;\n   \n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 10**17 * 10**9 ;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n\n    string private _name = \"BlueSparrowToken\";\n    string private _symbol = \"BlueSparrow\";\n    uint8  private _decimals = 9;\n\n           \n    //Array for store list of eligible holders for draw\n    \n    address[] public _DrawHolders;                             \n\n\n    //To make sure not duplicate an address in draw holders\n    \n    mapping (address => bool) private _ExistInDrawHolders;\n\n\n    // fees; Total fee = 5%\n\n    uint256 private _marketingFee    = 50;         // 0.5%     marketing fee \n    uint256 private _burnFee         = 100;        // 1%       burn \n    uint256 private _charityFee      = 50;         // 0.5%     charity\n    uint256 private _reward          = 200;        // 2%       Public reward\n    uint256 private _draw            = 45;         // 0.45%    daily and weekly draw\n    uint256 private _mounthlyDraw    = 5;          // 0.05%    mounthly draw\n    uint256 private _devFee          = 50;         // 0.5%     dev wallet        \n\n\n\n\n    // Addresses for store fee & burn Address\n     \n    address public  marketingWallet;\n    address public  charityWallet;\n    address public  mounthlyDrawWallet;             // An address that Accumulate fee for mounthly draw\n    address public  devWallet;\n    address private immutable burnAddress = 0x000000000000000000000000000000000000dEaD;\n    \n\n    // A struct data type for fees\n    \n    struct feeData {\n\n        uint256 rAmount;\n        uint256 rTransferAmount;\n        uint256 rReward;\n        uint256 rMarketing;\n        uint256 rBurn;\n        uint256 rDraw;\n        uint256 rCharity;\n        uint256 rDev;\n        uint256 rMounthlyDraw;\n\n        uint256 tAmount;\n        uint256 tTransferAmount;\n        uint256 tReward;\n        uint256 tMarketing;\n        uint256 tBurn;\n        uint256 tDraw;\n        uint256 tCharity;\n        uint256 tDev;\n        uint256 tMounthlyDraw;\n\n        uint256 currentRate;\n    } \n      \n    // Maximum transaction amount  \n     \n    uint256 public _maxTxAmount; \n\n    // Minimum number of token to be eligible for draw \n\n    uint256 public _minCoAmount;\n    \n    \n    // RNG Instance \n    \n    RNG _RNG;\n\n    //Constructor that feed VRF contract Address, and et.\n\n    constructor(address VRFcontractAddress, address _marketingWallet, address _charityWallet, address _mounthlyDrawWallet, address _devWallet, uint256 minCoAmount)  {\n           \n       _rOwned[_msgSender()] = _rTotal;\n       emit Transfer(address(0), _msgSender(), _tTotal);\n\n       _RNG = RNG(VRFcontractAddress);\n\n       marketingWallet      = _marketingWallet;\n       charityWallet        = _charityWallet;\n       mounthlyDrawWallet   = _mounthlyDrawWallet;\n       devWallet            = _devWallet;\n       _minCoAmount         = minCoAmount;\n \n    }   \n   \n      \n   \n\n    //the ERC20 function's \n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    //Set minimum number of token for draw\n\n    function setMinCoAmount(uint256 minCoAmount) external onlyOwner(){\n        _minCoAmount = minCoAmount.mul(10**9);\n    }\n    \n    \n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\n            10**4\n        );\n    }\n\n    function changeAddresses(address _marketingWallet, address _charityWallet, address _mounthlyDrawWallet, address _devWallet ) public onlyOwner() {\n        marketingWallet      = _marketingWallet;\n        charityWallet        = _charityWallet;\n        mounthlyDrawWallet   = _mounthlyDrawWallet;\n        devWallet            = _devWallet;\n    }\n\n    function reflect(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n        feeData memory fd = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\n        _rTotal = _rTotal.sub(fd.rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n\n   function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n           feeData memory fd = _getValues(tAmount);\n            return fd.rAmount;\n        } else {\n            feeData memory fd = _getValues(tAmount);\n            return fd.rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    } \n\n    function excludeAccount(address account) external onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n   function includeAccount(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    } \n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n   function takeTransactionFee(address to, uint256 tAmount, uint256 currentRate) private {\n        if (tAmount <= 0) { return; }\n\n        uint256 rAmount = tAmount.mul(currentRate);\n        _rOwned[to] = _rOwned[to].add(rAmount);\n        if (_isExcluded[to]) {\n            _tOwned[to] = _tOwned[to].add(tAmount);\n        }\n    }\n\n    function calculateFee(uint256 amount, uint256 _fee) private pure returns (uint256) {\n        return amount.mul(_fee).div(10000);\n    }\n\n    // note:the draw mechanism will randomly choose 7 addresses from eligible holders\n\n         \n\n    uint256 public randomResult;                       // Store VRF random number \n    uint256 public _accumulatedDailyReward;            // Accumulated Daily reward \n    uint256 public _accumulatedWeeklyReward;           // Accumulated weekly Reward\n    uint256[] private _indexOfWinners ;                // Index of winner \n    address[] public _Winners;                         // Daily and weekly Winners addresses\n    \n\n    function takeDrawFee(uint256 tDraw) private {\n\n        _accumulatedDailyReward  = _accumulatedDailyReward.add(tDraw.mul(7).div(9));\n        _accumulatedWeeklyReward = _accumulatedWeeklyReward.add(tDraw.mul(2).div(9));\n    }\n\n     \n   //An instance of RNG contract interface\n   \n   \n    \n    function getRandomNumber() public onlyOwner() {\n        _RNG.getRandomNumber();\n    }\n\n    function getResult() public onlyOwner() returns(uint256){\n        return randomResult = _RNG.randomResult();\n    }\n\n    function pickIndexOfWinners() public onlyOwner() {\n\n       uint256[] memory indexOfWinners = new uint256[](7);\n     \n        for (uint256 i = 0; i < 7; i++) {\n          indexOfWinners[i] = (uint256(keccak256(abi.encode(randomResult, i)))% _DrawHolders.length);\n        }\n\n        _indexOfWinners = indexOfWinners;\n    } \n    \n\n    function pickWinners() public onlyOwner() {\n        address[] memory Winners = new address[](7);\n        \n        for (uint256 i= 0; i < 7; i++){\n            Winners[i] = _DrawHolders[_indexOfWinners[i]];\n        }\n        \n        _Winners = Winners;\n        delete _indexOfWinners;\n     }\n    \n    \n    //Transfer Reward to Daily Winners\n        \n    function _enterDaWinReward() public onlyOwner() {  \n        \n        uint256 currentRate =  _getRate();\n        \n        for (uint256 i = 0; i < 7; i++) {\n         _rOwned[_Winners[i]] = _rOwned[_Winners[i]].add(_accumulatedDailyReward.div(7).mul(currentRate));\n        }\n        \n        delete _Winners;\n        _accumulatedDailyReward = 0;\n    }\n\n    //Transfer Reward to Weekly Winners\n\n    function _enterWeWinReward() public onlyOwner() {\n        \n        uint256 currentRate =  _getRate();\n        \n         for (uint256 i = 0; i < 7; i++) {\n         _rOwned[_Winners[i]] = _rOwned[_Winners[i]].add(_accumulatedWeeklyReward.div(7).mul(currentRate));\n          \n        }\n        \n        delete _Winners;\n        _accumulatedWeeklyReward = 0;\n        \n        \n    }  \n     \n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        if(sender != owner() && recipient != owner())\n          require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n            \n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n    }\n\n    \n    \n    //Exclude from draw array\n\n     function ExcludeFEA (address _address) private {\n         for (uint256 j = 0; j < _DrawHolders.length; j++) {\n                  if( _DrawHolders[j] == _address){\n                  _DrawHolders[j] = _DrawHolders[_DrawHolders.length - 1];\n                  _ExistInDrawHolders[_address] = false;\n                  _DrawHolders.pop();\n                 break;\n            }\n        }\n    }\n                    \n    // Once array stored, \"checkState\" will check the eligible account for any further transfer               \n     \n       \n    address[2] _addresses;\n    \n    function checkState() private {\n            \n        for(uint256 i=0; i<2; i++){\n\n            if( _minCoAmount <= tokenFromReflection(_rOwned[_addresses[i]]) && !_ExistInDrawHolders[_addresses[i]]) {\n               \n                _DrawHolders.push(_addresses[i]);\n                _ExistInDrawHolders[_addresses[i]] = true;\n               } \n                 else if (tokenFromReflection(_rOwned[_addresses[i]]) < _minCoAmount && _ExistInDrawHolders[_addresses[i]]){\n                             ExcludeFEA(_addresses[i]);               \n            } \n        } \n        delete _addresses;\n    }\n    \n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n\n        feeData memory fd = _getValues(tAmount);\n        \n        \n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);    \n\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \n        takeTransactionFee(address(mounthlyDrawWallet), fd.tDraw, fd.currentRate);\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\n\n        takeDrawFee(fd.tDraw);\n\n        _reflectFee(fd.rReward, fd.tReward);\n        emit Transfer(sender, recipient, fd.tTransferAmount);\n\n        //check and update state of sender & recipient\n        \n        _addresses[0] = sender;\n        _addresses[1] = recipient;\n        \n        checkState();\n        \n    }  \n\n     \n           \n\n\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n      feeData memory fd = _getValues(tAmount);\n\n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(fd.tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);\n\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \n        takeTransactionFee(address(mounthlyDrawWallet), fd.tMounthlyDraw, fd.currentRate);\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\n\n\n        takeDrawFee(fd.tDraw);\n\n        _reflectFee(fd.rReward, fd.tReward);\n\n        emit Transfer(sender, recipient, fd.tTransferAmount);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n      \n        feeData memory fd = _getValues(tAmount);\n\n        _tOwned[sender] = _tOwned[sender].sub(fd.tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);\n\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \n        takeTransactionFee(address(mounthlyDrawWallet), fd.tMounthlyDraw, fd.currentRate);\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\n\n\n        takeDrawFee(fd.tDraw);\n\n        _reflectFee(fd.rReward, fd.tReward);\n        \n        emit Transfer(sender, recipient, fd.tTransferAmount);\n\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        \n        feeData memory fd  = _getValues(tAmount);\n\n        _tOwned[sender]    = _tOwned[sender].sub(fd.tAmount);\n        _rOwned[sender]    = _rOwned[sender].sub(fd.rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(fd.tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);\n\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \n        takeTransactionFee(address(mounthlyDrawWallet), fd.tMounthlyDraw, fd.currentRate);\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\n\n\n        takeDrawFee(fd.tDraw);\n\n        _reflectFee(fd.rReward, fd.tReward);\n        \n        emit Transfer(sender, recipient, fd.tTransferAmount);\n    }\n\n    function _reflectFee(uint256 rReward, uint256 tReward) private {\n        _rTotal = _rTotal.sub(rReward);\n        _tFeeTotal = _tFeeTotal.add(tReward);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (feeData memory) {\n        feeData memory intermediate = _getTValues(tAmount);\n        uint256 currentRate         =  _getRate();\n        feeData memory res          = _getRValues(intermediate, currentRate);\n        return res;\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (feeData memory) {\n        feeData memory fd;\n        fd.tAmount          = tAmount;\n        fd.tReward          = calculateFee(tAmount, _reward);\n        fd.tCharity         = calculateFee(tAmount, _charityFee);\n        fd.tMarketing       = calculateFee(tAmount, _marketingFee);\n        fd.tBurn            = calculateFee(tAmount, _burnFee);\n        fd.tDraw            = calculateFee(tAmount, _draw);\n        fd.tMounthlyDraw    = calculateFee(tAmount, _mounthlyDraw);\n        fd.tDev             = calculateFee(tAmount, _devFee);\n\n        fd.tTransferAmount  = tAmount.sub(fd.tReward);\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tCharity);\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tMarketing);\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tBurn);\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tDraw);\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tMounthlyDraw);\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tDev);\n        return fd;\n        \n    }\n\n    function _getRValues(feeData memory fd, uint256 currentRate) private pure returns (feeData memory) {\n\n        fd.currentRate     = currentRate;\n        fd.rAmount         = fd.tAmount.mul(fd.currentRate);\n        fd.rReward         = fd.tReward.mul(fd.currentRate);\n        fd.rCharity        = fd.tCharity.mul(fd.currentRate);\n        fd.rMarketing      = fd.tMarketing.mul(fd.currentRate);\n        fd.rBurn           = fd.tBurn.mul(fd.currentRate);\n        fd.rDraw           = fd.tDraw.mul(fd.currentRate);\n        fd.rMounthlyDraw   = fd.tMounthlyDraw.mul(fd.currentRate);\n        fd.rDev            = fd.tDev.mul(fd.currentRate);\n\n        fd.rTransferAmount   = fd.rAmount.sub(fd.rReward);\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rCharity);\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rMarketing);\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rBurn);\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rDraw);\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rMounthlyDraw);\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rDev);\n\n        return fd;\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    } \n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    } \n\n}"
    },
    "contracts/TokenContract/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"
    },
    "contracts/TokenContract/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    },
    "contracts/TokenContract/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
    },
    "contracts/TokenContract/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    }
  }
}