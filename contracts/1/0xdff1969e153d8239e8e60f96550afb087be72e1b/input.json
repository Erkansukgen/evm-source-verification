{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/bridgeETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\nabstract contract IERC20 {\n    function decimals() external view virtual returns (uint8);\n\n    function name() external view virtual returns (string memory);\n\n    function symbol() external view virtual returns (string memory);\n}\n\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n\ncontract BridgeBase is Context, Ownable {\n    using SafeMath for uint256;\n\n\n\n    mapping(uint256 => uint256) private _nonces;\n    mapping(uint256 => mapping(uint256 => bool)) private nonceProcessed;\n    mapping(uint256 => uint256) private _processedFees;\n    uint256 private _bridgeFee = 3;\n    bool public _isBridgingPaused = false;\n\n\n    address public kishimoto;\n    address public system = address(0x3BB6fAA1bE8A12160766E39C2D491D2616a1c52E);\n    address public governor = address(0xd070544810510865114Ad5A0b6a821A5BD2E7C49);\n    address public bridgeFeesAddress = address(0xD378dBeD86689D0dBA19Ca2bab322B6f23765288);\n\n    event SwapRequest(\n        address indexed to,\n        uint256 amount,\n        uint256 nonce,\n        uint256 toChainID\n    );\n    \n\n    modifier onlySystem() {\n        require(system == _msgSender(), \"Ownable: caller is not the system\");\n        _;\n    }\n    \n    modifier onlyGovernance() {\n        require(governor == _msgSender(), \"Ownable: caller is not the system\");\n        _;\n    }\n\n    modifier bridgingPaused() {\n        require(!_isBridgingPaused, \"the bridging is paused\");\n        _;\n    }\n\n    constructor(address _kishimoto) {\n        kishimoto = _kishimoto;\n        //   initializing processed fees\n        _processedFees[56] = 0.001 ether;\n    }\n\n\n    function updateKishimotoContract(address _kishimoto) external onlyOwner {\n       kishimoto = _kishimoto;\n   }\n\n    function setBridgeFee(uint256 bridgeFee) external onlyGovernance returns (bool) {\n        require(bridgeFee > 0, \"Invalid Percentage\");\n        _bridgeFee = bridgeFee;\n        return true;\n    }\n    \n    function changeGovernor(address _governor) external onlyGovernance {\n        governor = _governor;\n    }\n    \n\n    function getBridgeFee() external view returns (uint256) {\n        return _bridgeFee;\n    }\n    \n    function setBridgeFeesAddress(address _bridgeFeesAddress) external onlyGovernance {\n        bridgeFeesAddress = _bridgeFeesAddress;\n    }\n\n    function setSystem(address _system) external onlyOwner returns (bool) {\n        system = _system;\n        return true;\n    }\n\n\n    function setProcessedFess(uint256 chainID, uint256 processedFees)\n        external\n        onlyOwner\n    {\n        _processedFees[chainID] = processedFees;\n    }\n    \n    function getProcessedFees(uint256 chainID) external view returns(uint256){\n        return _processedFees[chainID];\n    }\n\n    function getBridgeStatus(uint256 nonce, uint256 fromChainID)\n        external\n        view\n        returns (bool)\n    {\n        return nonceProcessed[fromChainID][nonce];\n    }\n\n\n    function updateBridgingStaus(bool paused) external onlyOwner {\n        _isBridgingPaused = paused;\n    }\n\n\n\n    function swap(uint256 amount, uint256 toChainID)\n        external\n        payable\n        bridgingPaused\n    {\n        require(\n            msg.value >= _processedFees[toChainID],\n            \"Insufficient processed fees\"\n        );\n        uint256 _nonce = _nonces[toChainID];\n        _nonce = _nonce.add(1);\n        _nonces[toChainID] = _nonce;\n        TransferHelper.safeTransferFrom(\n            kishimoto,\n            _msgSender(),\n            address(this),\n            amount\n        );\n        payable(system).transfer(msg.value);\n        emit SwapRequest(_msgSender(), amount, _nonce, toChainID);\n    }\n\n    function feeCalculation(uint256 amount) public view returns (uint256) {\n        uint256 _amountAfterFee = (amount - (amount.mul(_bridgeFee) / 1000));\n        return _amountAfterFee;\n    }\n\n    function swapBack(\n        address to,\n        uint256 amount,\n        uint256 nonce,\n        uint256 fromChainID\n    ) external onlySystem {\n        require(\n            !nonceProcessed[fromChainID][nonce],\n            \"Swap is already proceeds\"\n        );\n        nonceProcessed[fromChainID][nonce] = true;\n\n        uint256 temp = feeCalculation(amount);\n        uint256 fees = amount.sub(temp);\n\n       \n        TransferHelper.safeTransfer(kishimoto, bridgeFeesAddress, fees);\n\n       \n        TransferHelper.safeTransfer(kishimoto, to, temp);\n    }\n}"
    }
  }
}