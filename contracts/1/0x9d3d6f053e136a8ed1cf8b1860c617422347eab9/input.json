{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "AIRDROP_V2/Airdrop.sol": {
      "content": " // SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.4;\n\nimport \"./Ownable.sol\";\n\ninterface IERC20 { \n   function transfer(address recipient, uint256 amount) external returns (bool);  \n} \n\ncontract CRDNetworkAirdropV3 is Ownable { \n   \n    address private admin;     \n    address public token;   \n    uint256 public reward;  \n    mapping (address => bool) private processedRewards; \n    \n    constructor(address _token, uint _reward, address _admin) Ownable() {\n        token = _token; \n        reward = _reward; \n        admin = _admin;\n    }  \n      \n    function claimReward(bytes calldata signature ) public {  \n        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender)));  \n        require (recoverSigner(message, signature) == admin , 'Wrong signature'); \n        require (processedRewards[msg.sender] == false, 'Reward already processed');  \n        IERC20(token).transfer(msg.sender, reward); \n        processedRewards[msg.sender] = true;  \n    }  \n    \n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked( '\\x19Ethereum Signed Message:\\n32',   hash  ));\n    } \n    \n    function recoverSigner(bytes32 message, bytes memory sig)  internal pure returns (address)  {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n  \n        (v, r, s) = splitSignature(sig); \n        return ecrecover(message, v, r, s);\n    } \n\n    function splitSignature(bytes memory sig)  internal  pure  returns (uint8, bytes32, bytes32) {\n        require(sig.length == 65); \n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n  \n        assembly { \n            r := mload(add(sig, 32)) \n            s := mload(add(sig, 64)) \n            v := byte(0, mload(add(sig, 96)))\n        } \n        return (v, r, s);\n    }\n     \n    function checkStatus(address  _address) public view returns(bool) { \n        return (processedRewards[_address]);\n    }\n     \n    function setReward(uint256 _reward) public onlyOwner { \n        reward = _reward; \n    }  \n    \n    function setToken(address _token) public onlyOwner { \n        token = _token; \n    } \n    \n    function resetAdmin(address _admin) public onlyOwner { \n        admin = _admin; \n    }  \n    \n    function withdraw(  uint _amount, address _token) public  onlyOwner returns (bool){  \n        IERC20(_token).transfer(msg.sender, _amount);\n        return true;\n    }  \n       \n}\n"
    },
    "AIRDROP_V2/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"
    },
    "AIRDROP_V2/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
    }
  }
}