{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "ponzifypanthers.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n\npragma solidity ^0.8.0;\n\ninterface PonzifyPanthers {\n    function giftMint(address[] calldata _addresses) external;\n}\n\ncontract PonziPanthers is Ownable {\n\n    uint256 _price = 80000000000000000; //0.08 ETH\n    uint256 _wlprice = 55000000000000000; //0.055 ETH\n    bool _pubopen = false;\n\n    PonzifyPanthers ponzi = PonzifyPanthers(0x2442435dcAcFDacb23a68A11281Ae17A3Fe8ECe8);\n\n    function togglePub() external onlyOwner {\n      _pubopen = !_pubopen;\n    }\n\n    function publicMint(uint256 _amount) external payable {\n        require(_amount > 0, \"Zero amount!\");\n        require(_price * _amount <= msg.value, \"ETH value sent is incorrect!\");\n        require(_pubopen, \"Public mint is not open!\");\n\n        address[] memory array = new address[](_amount);\n\n        for (uint256 i = 0; i < _amount; i++) {\n            array[i] = msg.sender;\n        }\n\n        ponzi.giftMint(array);\n    }\n\n    mapping(address => uint256) public _whitelistClaimed;\n    function whitelistMint(uint256 _amount, bytes32[] memory proof) external payable {\n      require(_amount > 0, \"Zero amount!\");\n      require(_wlprice * _amount <= msg.value, \"ETH value sent is incorrect!\");\n\n      require(verify(msg.sender, proof), \"You are not selected for the WL!\");\n      require(_whitelistClaimed[msg.sender] + _amount <= 5, \"Already claimed the WL limit!\");\n\n      address[] memory array = new address[](_amount);\n      for (uint256 i = 0; i < _amount; i++) {\n        array[i] = msg.sender;\n      }\n\n      ponzi.giftMint(array);\n      _whitelistClaimed[msg.sender] = _whitelistClaimed[msg.sender] + _amount;\n    }\n\n    function ponzify() public onlyOwner {\n        uint256 balp = address(this).balance;\n        payable(owner()).transfer(balp);\n    }\n\n    bytes32 wlr = 0x4a238499db2eea05655cb336d8cb9538ac5e092d3332759356e510384ee1b573;\n    function verify(address account, bytes32[] memory proof) public view returns (bool) {\n      bytes32 leaf = keccak256(abi.encodePacked(account));\n      return MerkleProof.verify(proof, wlr, leaf);\n    }\n}\n"
    }
  }
}