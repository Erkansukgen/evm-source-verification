{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "QuikYield/QYUtility.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n  library SafeMath {\n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n  \n    function div(uint a, uint b) internal pure returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n  \n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n  \n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n  }\n\n\n  contract Authorization {\n    address public owner;\n    bool public paused;\n    mapping(address => bool) public blackListedAddresses;\n    mapping(address => bool) public minterAddresses;\n  \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Pause();\n    event Unpause();\n    event Blacklist(address indexed blackListed);\n    event Whitelist(address indexed whiteListed);\n    event MinterAdded(address indexed minter);\n    event MinterRemoved(address indexed minter);\n  \n    modifier onlyOwner() {\n      require(msg.sender == owner, \"Only Owner Can Call This Function\");\n      _;\n    }\n\n    modifier whenNotPaused() {\n      require(!paused, \"Contract Is Paused\");\n      _;\n    }\n\n    modifier whenPaused() {\n      require(paused, \"Contract Is Not Paused\");\n      _;\n    }\n    \n    modifier onlyMinter() {\n      require(minterAddresses[msg.sender] == true, \"Only Minter Can Call This Function\");\n      _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0), \"New Address Must Not Be 0x\");\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n    \n    function addMinter(address minter) onlyOwner whenNotPaused public {\n        require(minterAddresses[minter] != true, \"Address Is Already Minter\");\n        minterAddresses[minter] = true;\n        emit MinterAdded(minter);\n    }\n    \n    function removeMinter(address minter) onlyOwner whenNotPaused public {\n        require(minterAddresses[minter] != false, \"Address Is Not Minter\");\n        minterAddresses[minter] = false;\n        emit MinterRemoved(minter);\n    }\n    \n    function isMinter(address minter) public view returns (bool success) {\n        return minterAddresses[minter];\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    function blackListAddress(address _address) public onlyOwner {\n        require(blackListedAddresses[_address] != true, \"Address Is Already BlackListed\");\n        blackListedAddresses[_address] = true;\n        emit Blacklist(_address);\n    }\n\n    function whiteListAddress(address _address) public onlyOwner {\n        require(blackListedAddresses[_address] == true, \"Address Is Not BlackListed\");\n        blackListedAddresses[_address] = false;\n        emit Whitelist(_address);\n    }\n  }\n\n\n  contract QYUtility is Authorization {\n    using SafeMath for uint;\n\n    string public name;\n    string public symbol;\n    uint public decimals;\n    uint public _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    event IncreaseApproval(address indexed _owner, address indexed _spender, uint _oldvalue, uint _newvalue);\n    event DecreaseApproval(address indexed _owner, address indexed _spender, uint _oldvalue, uint _newvalue);\n    event Burn(address indexed _owner, uint _oldsupply, uint _newsupply);\n    event Mint(address indexed _owner, uint _oldsupply, uint _newsupply);\n    \n    constructor(){\n        name = \"QYUtility\";\n        symbol= \"QYU\";\n        decimals = 18;\n        _totalSupply = _totalSupply.add(200000000000000000000000000);\n        balances[msg.sender] = balances[msg.sender].add(_totalSupply);\n        \n        owner = msg.sender;\n        paused = false;\n        \n        emit OwnershipTransferred(address(0), msg.sender);\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n    \n    function totalSupply() public view returns (uint totalsupply) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance){\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool success){\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\n        require(balances[msg.sender] >= _value, \"Sender Balance Is Low\");\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n        \n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool success){\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\n        require(blackListedAddresses[_from] != true, \"_from Address Is BlackListed\");\n        require(balances[_from]>= _value, \"From Balance Is Low\");\n        require(allowed[_from][msg.sender] >= _value, \"Allowed Balance To Transfer Is Low\");\n        \n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        \n        emit Transfer(_from, _to, _value);\n        \n        return true;\n    }\n\n    function approve(address _spender, uint _value) public whenNotPaused returns (bool success){\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\n        require(blackListedAddresses[_spender] != true, \"_spender Address Is BlackListed\");\n        \n        allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining){\n        return allowed[_owner][_spender];\n    }\n    \n    function increaseApproval(address _spender, uint _value) public whenNotPaused returns (bool success){\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\n        require(blackListedAddresses[_spender] != true, \"_spender Address Is BlackListed\");\n        \n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n        \n        emit DecreaseApproval(msg.sender, _spender, allowed[msg.sender][_spender].sub(_value), allowed[msg.sender][_spender]);\n        \n        return true;\n    }\n    \n    function decreaseApproval(address _spender, uint _value) public whenNotPaused returns (bool success){\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\n        require(blackListedAddresses[_spender] != true, \"_spender Address Is BlackListed\");\n        require(allowed[msg.sender][_spender].sub(_value) >= 0, \"Allowed Balance To Transfer Is Low Than _value\");\n        \n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\n        \n        emit DecreaseApproval(msg.sender, _spender, allowed[msg.sender][_spender].add(_value), allowed[msg.sender][_spender]);\n        \n        return true;\n    }\n    \n    function burn(uint _value) public whenNotPaused returns (bool success){\n        require(balances[msg.sender] >= _value, \"Sender Balance Is Low\");\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        \n        emit Burn(msg.sender, _totalSupply.add(_value), _totalSupply);\n        \n        return true;\n    }\n    \n    function mint(address _to, uint _value) public whenNotPaused onlyMinter returns (bool success){\n        balances[_to] = balances[_to].add(_value);\n        _totalSupply = _totalSupply.add(_value);\n        \n        emit Mint(_to, _totalSupply.sub(_value), _totalSupply);\n        \n        return true;\n    }\n    \n  }"
    }
  }
}