{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DividendFinance.sol":{"content":"/**\n * \n * Join the Community at:\n * \n * https://dividend4finance\n * \n * https://dividend4finance\n * \n * \n */\n \n\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nabstract contract Context {\n    function _msgSender() internal virtual view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal virtual view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success,) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n            data\n        );\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n    \n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Pair {\n    function sync() external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n      address token,\n      uint liquidity,\n      uint amountTokenMin,\n      uint amountETHMin,\n      address to,\n      uint deadline\n    ) external returns (uint amountETH);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n}\n\ncontract Balancer {\n    constructor() public {\n    }\n}\n\ncontract DividendFinance is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    string private _name = \"Dividend Finance\";\n    string private _symbol = \"DF\";\n    uint8 private _decimals = 9;\n\n    mapping(address => uint256) internal _reflectionBalance;\n    mapping(address => uint256) internal _tokenBalance;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 internal _tokenTotal = 40_000e9;\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\n\n    mapping(address => bool) isExcludedFromFee;\n    mapping(address => bool) internal _isExcluded;\n    address[] internal _excluded;\n    \n    uint256 public _feeDecimal = 2;\n    uint256 public _taxFee = 400;\n    uint256 public _liquidityFee = 400;\n\n    uint256 public _rebalanceCallerFee = 500;\n\n    uint256 public _taxFeeTotal;\n    uint256 public _burnFeeTotal;\n    uint256 public _liquidityFeeTotal;\n\n    bool public tradingEnabled = false;\n    bool private inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    bool public rebalanceEnalbed = true;\n    \n    uint256 public minTokensBeforeSwap = 100;\n    uint256 public minEthBeforeSwap = 100;\n    \n    uint256 public liquidityAddedAt;\n\n    uint256 public lastRebalance = now ;\n    uint256 public rebalanceInterval = 30 minutes;\n    \n    IUniswapV2Router02 public  uniswapV2Router;\n    address public  uniswapV2Pair;\n    address public balancer;\n    \n    event TradingEnabled(bool enabled);\n    event RewardsDistributed(uint256 amount);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapedTokenForEth(uint256 EthAmount, uint256 TokenAmount);\n    event SwapedEthForTokens(uint256 EthAmount, uint256 TokenAmount, uint256 CallerReward, uint256 AmountBurned);\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor() public {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n            \n        uniswapV2Router = _uniswapV2Router;\n        \n        balancer = address(new Balancer());\n        \n        isExcludedFromFee[_msgSender()] = true;\n        isExcludedFromFee[address(this)] = true;\n        \n        _isExcluded[uniswapV2Pair] = true;\n        _excluded.push(uniswapV2Pair);\n        \n        _reflectionBalance[_msgSender()] = _reflectionTotal;\n        emit Transfer(address(0), _msgSender(), _tokenTotal);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public override view returns (uint256) {\n        return _tokenTotal;\n    }\n\n    function balanceOf(address account) public override view returns (uint256) {\n        if (_isExcluded[account]) return _tokenBalance[account];\n        return tokenFromReflection(_reflectionBalance[account]);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        virtual\n        returns (bool)\n    {\n       _transfer(_msgSender(),recipient,amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override virtual returns (bool) {\n        _transfer(sender,recipient,amount);\n               \n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,\"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee)\n        public\n        view\n        returns (uint256)\n    {\n        require(tokenAmount <= _tokenTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            return tokenAmount.mul(_getReflectionRate());\n        } else {\n            return\n                tokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul(\n                    _getReflectionRate()\n                );\n        }\n    }\n\n    function tokenFromReflection(uint256 reflectionAmount)\n        public\n        view\n        returns (uint256)\n    {\n        require(\n            reflectionAmount <= _reflectionTotal,\n            \"Amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getReflectionRate();\n        return reflectionAmount.div(currentRate);\n    }\n\n    function excludeAccount(address account) external onlyOwner() {\n        require(\n            account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,\n            \"Dividend Finance: Uniswap router cannot be excluded.\"\n        );\n        require(account != address(this), 'Dividend Finance: The contract it self cannot be excluded');\n        require(!_isExcluded[account], \"Dividend Finance: Account is already excluded\");\n        if (_reflectionBalance[account] > 0) {\n            _tokenBalance[account] = tokenFromReflection(\n                _reflectionBalance[account]\n            );\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeAccount(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Dividend Finance: Account is already included\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tokenBalance[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(tradingEnabled || sender == owner() || recipient == owner() ||\n                isExcludedFromFee[sender] || isExcludedFromFee[recipient], \"Trading is locked before presale.\");\n        \n        require(now > liquidityAddedAt + 30 minutes  || amount <= 600e9, \"You cannot transfer more than 600 tokens.\");\n        \n        if(!inSwapAndLiquify && sender != uniswapV2Pair) {\n            bool swap = true;\n            uint256 contractBalance = address(this).balance;\n            if(now > lastRebalance + rebalanceInterval \n                && rebalanceEnalbed \n                && contractBalance >= minEthBeforeSwap){\n                buyAndBurnToken(contractBalance);\n                swap = false;\n            }\n            if(swap) {\n                uint256 contractTokenBalance = balanceOf(address(this));\n                bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\n                 if (overMinTokenBalance && swapAndLiquifyEnabled) {\n                    swapTokensForEth();    \n                }\n           }\n        }\n        \n        uint256 transferAmount = amount;\n        uint256 rate = _getReflectionRate();\n\n        if(!isExcludedFromFee[sender] && !isExcludedFromFee[recipient] && !inSwapAndLiquify){\n            transferAmount = collectFee(sender,amount,rate);\n        }\n\n        _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));\n        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));\n\n        if (_isExcluded[sender]) {\n            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\n        }\n        if (_isExcluded[recipient]) {\n            _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);\n        }\n\n        emit Transfer(sender, recipient, transferAmount);\n    }\n    \n    function collectFee(address account, uint256 amount, uint256 rate) private returns (uint256) {\n        uint256 transferAmount = amount;\n        \n        if(_taxFee != 0){\n            uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));\n            transferAmount = transferAmount.sub(taxFee);\n            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\n            _taxFeeTotal = _taxFeeTotal.add(taxFee);\n            emit RewardsDistributed(taxFee);\n        }\n\n        if(_liquidityFee != 0){\n            uint256 liquidityFee = amount.mul(_liquidityFee).div(10**(_feeDecimal + 2));\n            transferAmount = transferAmount.sub(liquidityFee);\n            _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(liquidityFee.mul(rate));\n            _liquidityFeeTotal = _liquidityFeeTotal.add(liquidityFee);\n            emit Transfer(account,address(this),liquidityFee);\n        }\n        \n        return transferAmount;\n    }\n\n    function _getReflectionRate() private view returns (uint256) {\n        uint256 reflectionSupply = _reflectionTotal;\n        uint256 tokenSupply = _tokenTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (\n                _reflectionBalance[_excluded[i]] > reflectionSupply ||\n                _tokenBalance[_excluded[i]] > tokenSupply\n            ) return _reflectionTotal.div(_tokenTotal);\n            reflectionSupply = reflectionSupply.sub(\n                _reflectionBalance[_excluded[i]]\n            );\n            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\n        }\n        if (reflectionSupply < _reflectionTotal.div(_tokenTotal))\n            return _reflectionTotal.div(_tokenTotal);\n        return reflectionSupply.div(tokenSupply);\n    }\n\n    function swapTokensForEth() private lockTheSwap {\n        uint256 tokenAmount = balanceOf(address(this));\n        uint256 ethAmount = address(this).balance;\n        \n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n        \n        ethAmount = address(this).balance.sub(ethAmount);\n        emit SwapedTokenForEth(tokenAmount,ethAmount);\n    }\n    \n    function swapEthForTokens(uint256 EthAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = address(this);\n\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: EthAmount}(\n                0,\n                path,\n                address(balancer),\n                block.timestamp\n            );\n    }\n   \n    function buyAndBurnToken(uint256 contractBalance) private lockTheSwap {\n        lastRebalance = now;\n        \n        swapEthForTokens(contractBalance);\n\n        uint256 swapedTokens = balanceOf(address(balancer));\n        uint256 rewardForCaller = swapedTokens.mul(_rebalanceCallerFee).div(10**(_feeDecimal + 2));\n        uint256 amountToBurn = swapedTokens.sub(rewardForCaller);\n        \n        uint256 rate =  _getReflectionRate();\n\n        _reflectionBalance[tx.origin] = _reflectionBalance[tx.origin].add(rewardForCaller.mul(rate));\n        _reflectionBalance[address(balancer)] = 0;\n        \n        _burnFeeTotal = _burnFeeTotal.add(amountToBurn);\n        _tokenTotal = _tokenTotal.sub(amountToBurn);\n        _reflectionTotal = _reflectionTotal.sub(amountToBurn.mul(rate));\n\n        emit Transfer(address(balancer), tx.origin, rewardForCaller);\n        emit Transfer(address(balancer), address(0), amountToBurn);\n        emit SwapedEthForTokens(contractBalance, swapedTokens, rewardForCaller, amountToBurn);\n    }\n    \n    function setExcludedFromFee(address account, bool excluded) public onlyOwner {\n        isExcludedFromFee[account] = excluded;\n    }\n    \n    function setSwapAndLiquifyEnabled(bool enabled) public onlyOwner {\n        swapAndLiquifyEnabled = enabled;\n        SwapAndLiquifyEnabledUpdated(enabled);\n    }\n    \n    function setTaxFee(uint256 fee) public onlyOwner {\n        _taxFee = fee;\n    }\n    \n    function setLiquidityFee(uint256 fee) public onlyOwner {\n        _liquidityFee = fee;\n    }\n    \n    function setRebalanceCallerFee(uint256 fee) public onlyOwner {\n        _rebalanceCallerFee = fee;\n    }\n    \n    function setMinTokensBeforeSwap(uint256 amount) public onlyOwner {\n        minTokensBeforeSwap = amount;\n    }\n    \n    function setMinEthBeforeSwap(uint256 amount) public onlyOwner {\n        minEthBeforeSwap = amount;\n    }\n    \n    function setRebalanceInterval(uint256 interval) public onlyOwner {\n        rebalanceInterval = interval;\n    }\n    \n    function setRebalanceEnabled(bool enabled) public onlyOwner {\n        rebalanceEnalbed = enabled;\n    }\n    \n    function enableTrading() external onlyOwner() {\n        tradingEnabled = true;\n        TradingEnabled(true);\n        liquidityAddedAt = now;\n    }\n    \n    receive() external payable {}\n}"}}}