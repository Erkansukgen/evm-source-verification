{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CoinslootSale.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./SafeMath.sol\";\n\ncontract CoinslootSale {\n  using SafeMath for uint256;\n\n    // The token being sold\n  ERC20 public token;\n\n  address payable public wallet = 0x74C1F04AeCD63aD1ec7cB8d8eA18EcF530B41061;\n\n  address public owner;\n\n    // How many token units a buyer gets per wei\n  uint256 public rate;\n\n    // Amount of wei raised\n  uint256 public weiRaised;\n\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n  constructor(uint256 _rate, ERC20 _token) {\n    owner = msg.sender;\n    rate = _rate;\n    token = _token;\n  }\n\n  function getRate() public view returns (uint256) {\n    return rate;\n  }\n\n  function changeRate(uint256 _newRate) public {\n    require(msg.sender == owner);\n    rate = _newRate;\n  }\n\n  function withdrawTokensToOwner(uint256 _amount) public {\n    require(msg.sender == owner);\n    _deliverTokens(owner, _amount);\n  }\n\n  receive() external payable {\n    buyTokens(msg.sender);\n  }\n\n  function buyTokens(address _beneficiary) public payable {\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {}\n\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    token.transfer(_beneficiary, _tokenAmount);\n  }\n\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {}\n\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256){\n    return _weiAmount.div(rate);\n  }\n\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n"},"browser/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.8.0;\n\nimport \"./ERC20Basic.sol\";\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\nabstract contract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public virtual view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\n  function approve(address spender, uint256 value) public virtual returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"browser/ERC20Basic.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.8.0;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\nabstract contract ERC20Basic {\n  function totalSupply() public virtual view returns (uint256);\n  function balanceOf(address who) public virtual view returns (uint256);\n  function transfer(address to, uint256 value) public virtual returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}"},"browser/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.8.0;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}"}}}