{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DePayRouterV1ApproveAndCallContractAddressPassedAmountBoolean01.sol": {
      "content": "// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// Dependency file: contracts/libraries/Helper.sol\n\n\n// pragma solidity >=0.8.6 <0.9.0;\n\n// Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n\nlibrary Helper {\n  function safeApprove(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'Helper::safeApprove: approve failed'\n    );\n  }\n\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'Helper::safeTransfer: transfer failed'\n    );\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      'Helper::transferFrom: transferFrom failed'\n    );\n  }\n\n  function safeTransferETH(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'Helper::safeTransferETH: ETH transfer failed');\n  }\n\n  function verifyCallResult(\n      bool success,\n      bytes memory returndata,\n      string memory errorMessage\n  ) internal pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n  }\n}\n\n\n// Root file: contracts/DePayRouterV1ApproveAndCallContractAddressPassedAmountBoolean01.sol\n\n\npragma solidity >=0.8.6 <0.9.0;\npragma abicoder v2;\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import 'contracts/libraries/Helper.sol';\n\ncontract DePayRouterV1ApproveAndCallContractAddressPassedAmountBoolean01 {\n\n  // Address representating NATIVE currency\n  address public constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  // Indicates that this plugin requires delegate call\n  bool public immutable delegate = true;\n  \n  // Call another smart contract to deposit an amount for a given address while making sure the amount passed to the contract is approved.\n  //\n  // Approves the amount at index 1 of amounts (amounts[1])\n  // for the token at the last position of path (path[path.length-1])\n  // to be used by the smart contract at index 1 of addresses (addresses[1]).\n  // \n  // Afterwards, calls the smart contract at index 1 of addresses (addresses[1]),\n  // passing the address at index 0 of addresses (addresses[0])\n  // and passing the amount at index 1 of amounts (amounts[1])\n  // to the method with the signature provided in data at index 0 (data[0]).\n  function execute(\n    address[] calldata path,\n    uint[] calldata amounts,\n    address[] calldata addresses,\n    string[] calldata data\n  ) external payable returns(bool) {\n\n    // Approve the amount that needs to be passed on to the smart contract.\n    if(path[path.length-1] != NATIVE) {\n      Helper.safeApprove(\n        path[path.length-1],\n        addresses[1],\n        amounts[1]\n      );\n    }\n\n    // Call the smart contract which is receiver of the payment.\n    bytes memory returnData;\n    bool success;\n    if(path[path.length-1] == NATIVE) {\n      // Make sure to send the NATIVE along with the call in case of sending NATIVE.\n      (success, returnData) = addresses[1].call{value: amounts[1]}(\n        abi.encodeWithSignature(\n          data[0],\n          addresses[0],\n          amounts[5],\n          keccak256(bytes(data[1])) == keccak256(bytes(\"true\"))\n        )\n      );\n    } else {\n      (success, returnData) = addresses[1].call(\n        abi.encodeWithSignature(\n          data[0],\n          addresses[0],\n          amounts[5],\n          keccak256(bytes(data[1])) == keccak256(bytes(\"true\"))\n        )\n      );\n    }\n\n    // Reset allowance after paying to the smart contract\n    if(path[path.length-1] != NATIVE && IERC20(path[path.length-1]).allowance(address(this), addresses[1]) > 0) {\n      Helper.safeApprove(\n        path[path.length-1],\n        addresses[1],\n        0\n      ); \n    }\n\n    Helper.verifyCallResult(success, returnData, \"Calling smart contract payment receiver failed!\");\n    return true;\n  }\n}\n"
    }
  }
}