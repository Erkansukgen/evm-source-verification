{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ls1.sol":{"content":"pragma solidity 0.7.1;\n\n\n\n//v0.4.26+commit.1d4f565a.js&appVersion=0.7.7\n// on rinkeby https://rinkeby.etherscan.io/address/0x692fb5311757fcb64ff65dd99ee73b5eeb5c3e62\n// deployed on main net: 0x1cbbfef32cbb5b47df94353fff78b2f8c2bb3c10\n\n\n// rinkeby 0xc778417e063141139fce010982780140aa0cd5ab \n// mainnet 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n\n// comp 0xc00e94cb662c3520282e6f5717214004a7f26888\n// link 0x514910771af9ca656af840dff83e8264ecf986ca\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\ninterface ILinkswapRouter {\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\n    contract oracleInfo {\n      address owner;\n      address LSAddress = 0xA7eCe0911FE8C60bff9e99f8fAFcDBE56e07afF1;\n        ILinkswapRouter LS = ILinkswapRouter(LSAddress);\n\n      modifier onlyOwner() {\n            if (msg.sender != owner) {\n                revert();\n            }\n             _;\n        }\n\n      constructor() public payable {\n            owner = msg.sender;\n\n        }\n\n\n    function getPriceFromOracle(address  sellToken, address   buyToken, uint amount) public view returns (uint256 amounts1){\n       \n        address [] memory addresses = new address[](2);\n       addresses[0] = sellToken;\n       addresses[1] = buyToken;\n        uint256 [] memory amounts = getPriceFromOracleActual(addresses, amount );\n        uint256 resultingTokens = amounts[1];\n        return resultingTokens;\n    }\n\n    function getPriceFromOracleActual(address  [] memory theAddresses, uint amount) public view returns (uint256[] memory amounts1){\n        uint256 [] memory amounts = LS.getAmountsOut(amount,theAddresses );\n        return amounts;\n    }\n\n    \n\n}\n"}}}