{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"
    },
    "browser/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "browser/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "browser/Staking.sol": {
      "content": "//Be name khoda\n\npragma solidity 0.6.12;\n\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\n\ninterface StakedToken {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ninterface RewardToken {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n}\n\ncontract Staking is Ownable {\n\n    struct User {\n        uint256 depositAmount;\n        uint256 paidReward;\n    }\n\n    using SafeMath for uint256;\n    \n    mapping (address => User) public users;\n\n    uint256 public rewardTillNowPerToken = 0;\n    uint256 public lastUpdatedBlock;\n    uint256 public rewardPerBlock;\n    uint256 public scale = 1e18;\n\n    uint256 public particleCollector = 0;\n    uint256 public daoShare;\n    uint256 public earlyFoundersShare;\n    address public daoWallet;\n    address public earlyFoundersWallet;\n\n    StakedToken public stakedToken;\n    RewardToken public rewardToken;\n\n    event Deposit(address user, uint256 amount);\n    event Withdraw(address user, uint256 amount);\n    event EmergencyWithdraw(address user, uint256 amount);\n    event RewardClaimed(address user, uint256 amount);\n    event RewardPerBlockChanged(uint256 oldValue, uint256 newValue);\n    \n    constructor (address _stakedToken, address _rewardToken, uint256 _rewardPerBlock, uint256 _daoShare, uint256 _earlyFoundersShare) public {\n        stakedToken = StakedToken(_stakedToken);\n        rewardToken = RewardToken(_rewardToken);\n        rewardPerBlock = _rewardPerBlock;\n        daoShare = _daoShare;\n        earlyFoundersShare = _earlyFoundersShare;\n        lastUpdatedBlock = block.number;\n        daoWallet = msg.sender;\n        earlyFoundersWallet = msg.sender;\n    }\n\n    function setWallets(address _daoWallet, address _earlyFoundersWallet) public onlyOwner {\n        daoWallet = _daoWallet;\n        earlyFoundersWallet = _earlyFoundersWallet;\n    }\n\n    function setShares(uint256 _daoShare, uint256 _earlyFoundersShare) public onlyOwner {\n        withdrawParticleCollector();\n        daoShare = _daoShare;\n        earlyFoundersShare = _earlyFoundersShare;\n    }\n\n    function setRewardPerBlock(uint256 _rewardPerBlock) public onlyOwner {\n        update();\n        rewardPerBlock = _rewardPerBlock;\n        emit RewardPerBlockChanged(rewardPerBlock, _rewardPerBlock);\n    }\n\n    // Update reward variables of the pool to be up-to-date.\n    function update() public {\n        if (block.number <= lastUpdatedBlock) {\n            return;\n        }\n        uint256 totalStakedToken = stakedToken.balanceOf(address(this));\n        uint256 rewardAmount = (block.number - lastUpdatedBlock).mul(rewardPerBlock);\n        \n        rewardTillNowPerToken = rewardTillNowPerToken.add(rewardAmount.mul(scale).div(totalStakedToken));\n        lastUpdatedBlock = block.number;\n    }\n\n    // View function to see pending reward on frontend.\n    function pendingReward(address _user) external view returns (uint256) {\n        User storage user = users[_user];\n        uint256 accRewardPerToken = rewardTillNowPerToken;\n        \n        if (block.number > lastUpdatedBlock) {\n            uint256 totalStakedToken = stakedToken.balanceOf(address(this));\n            uint256 rewardAmount = (block.number - lastUpdatedBlock).mul(rewardPerBlock);\n            accRewardPerToken = accRewardPerToken.add(rewardAmount.mul(scale).div(totalStakedToken));\n        }\n        return user.depositAmount.mul(accRewardPerToken).div(scale).sub(user.paidReward);\n    }\n\n    function deposit(uint256 amount) public {\n        User storage user = users[msg.sender];\n        update();\n\n        if (user.depositAmount > 0) {\n            uint256 _pendingReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale).sub(user.paidReward);\n            rewardToken.transfer(msg.sender, _pendingReward);\n            emit RewardClaimed(msg.sender, _pendingReward);\n        }\n\n        user.depositAmount = user.depositAmount.add(amount);\n        user.paidReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale);\n\n        stakedToken.transferFrom(address(msg.sender), address(this), amount);\n        emit Deposit(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public {\n        User storage user = users[msg.sender];\n        require(user.depositAmount >= amount, \"withdraw amount exceeds deposited amount\");\n        update();\n\n        uint256 _pendingReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale).sub(user.paidReward);\n        rewardToken.transfer(msg.sender, _pendingReward);\n        emit RewardClaimed(msg.sender, _pendingReward);\n\n        uint256 particleCollectorShare = _pendingReward.mul(daoShare.add(earlyFoundersShare)).div(scale);\n        particleCollector = particleCollector.add(particleCollectorShare);\n        \n        if (amount > 0) {\n            user.depositAmount = user.depositAmount.sub(amount);\n            stakedToken.transfer(address(msg.sender), amount);\n            emit Withdraw(msg.sender, amount);\n        }\n        \n        user.paidReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale);\n    }\n    \n    function withdrawParticleCollector() public {\n        uint256 _daoShare = particleCollector.mul(daoShare).div(daoShare.add(earlyFoundersShare));\n        rewardToken.transfer(daoWallet, _daoShare);\n\n        uint256 _earlyFoundersShare = particleCollector.mul(earlyFoundersShare).div(daoShare.add(earlyFoundersShare));\n        rewardToken.transfer(earlyFoundersWallet, _earlyFoundersShare);\n\n        particleCollector = 0;\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public {\n        User storage user = users[msg.sender];\n\n        stakedToken.transfer(msg.sender, user.depositAmount);\n\n        emit EmergencyWithdraw(msg.sender, user.depositAmount);\n\n        user.depositAmount = 0;\n        user.paidReward = 0;\n    }\n\n\n    // Add temporary withdrawal functionality for owner(DAO) to transfer all tokens to a safe place.\n    // Contract ownership will transfer to address(0x) after full auditing of codes.\n    function withdrawAllRewardTokens(address to) public onlyOwner {\n        uint256 totalRewardTokens = rewardToken.balanceOf(address(this));\n        rewardToken.transfer(to, totalRewardTokens);\n    }\n\n    // Add temporary withdrawal functionality for owner(DAO) to transfer all tokens to a safe place.\n    // Contract ownership will transfer to address(0x) after full auditing of codes.\n    function withdrawAllStakedtokens(address to) public onlyOwner {\n        uint256 totalStakedTokens = stakedToken.balanceOf(address(this));\n        stakedToken.transfer(to, totalStakedTokens);\n    }\n\n}\n\n\n//Dar panah khoda"
    }
  }
}