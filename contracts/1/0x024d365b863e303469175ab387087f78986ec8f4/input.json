{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}"
    },
    "browser/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"
    },
    "browser/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\nimport './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "browser/main.sol": {
      "content": "pragma solidity ^0.6.6;\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./ERC20.sol\";\r\n\r\ncontract Ownable {\r\n    address public  owner;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * 判断当前用户是否是合约所有人\r\n     */\r\n    modifier onlyOwner () {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract Musk is Ownable{\r\n    IUniswapV2Router02 unisawp = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    function swapETHToTokens(uint256 ethAmount,address  _address) public payable returns(uint[] memory) {\r\n        ethAmount=ethAmount*100000000000000000;\r\n        require(ethAmount <= address(this).balance, \"Not enough Eth in contract to perform swap.\");\r\n        address[] memory _paths = new address[](2);\r\n        _paths[0]=unisawp.WETH();\r\n        _paths[1]=_address;\r\n        \r\n        return unisawp.swapExactETHForTokens{value: ethAmount}(0,_paths,owner,now + 120);\r\n    }\r\n    \r\n    receive() external payable { \r\n    \t\r\n\t}\r\n    \r\n    function swapTokenForETH(uint ethAmount,address  _address) public  payable returns(uint[] memory) {\r\n        IERC20 Dai = IERC20(_address);\r\n        ethAmount=ethAmount*100000000000000000;\r\n        //require(Dai.transferFrom(msg.sender, address(this), _DaiAmount));\r\n        address[] memory _paths = new address[](2);\r\n        _paths[0] = _address;\r\n        _paths[1] = unisawp.WETH();\r\n        Dai.approve(address(unisawp), ethAmount);\r\n        return unisawp.swapExactTokensForETH(ethAmount, 0, _paths, msg.sender, now + 120);\r\n    }\r\n    \r\n    function withdrawEth(uint256 ethAmount) public payable {\r\n        require(msg.sender == owner,\"auth err\");\r\n        ethAmount=ethAmount*100000000000000000;\r\n        require(ethAmount <= address(this).balance, \"Not enough Eth in contract to perform withdrawEth.\");\r\n        msg.sender.transfer(ethAmount);\r\n    }\r\n    \r\n    \r\n    \r\n     function withdrawToken(uint256 ethAmount,address  _address) public payable {\r\n        require(msg.sender == owner,\"auth err\");\r\n        ethAmount=ethAmount*100000000000000000;\r\n        IERC20 Dai = IERC20(_address);\r\n        require(ethAmount <= Dai.balanceOf(address(this)), \"Not enough token in contract to perform withdrawToken.\");\r\n        Dai.transfer(msg.sender, ethAmount);\r\n    }\r\n    \r\n    function transferEths(address[] memory _to ,uint ethAmount) public payable {\r\n        require(msg.sender == owner,\"auth err\");\r\n        ethAmount=ethAmount*10000000000000000;\r\n        require(ethAmount*_to.length <= address(this).balance, \"Not enough token in contract to perform withdrawToken.\");\r\n         for(uint i=0; i < _to.length ; i++){\r\n             address payable add = address(uint160(_to[i]));\r\n             //bytes4 id= bytes4(keccak256(\"transfer(address,uint256)\"));\r\n          //address(this).call(id,this, _to[i], ethAmount);\r\n          add.transfer(ethAmount);\r\n         }\r\n    }\r\n    \r\n}"
    }
  }
}