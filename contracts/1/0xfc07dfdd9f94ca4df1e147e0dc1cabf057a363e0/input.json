{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/hostileZone.sol": {
      "content": "\n// SPDX-License-Identifier: MIT                                                                                                                                                             \n                                                    \npragma solidity 0.8.9;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IUSV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUSV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {return _name;}\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\n    function decimals() public view virtual override returns (uint8) {return 18;}\n    function totalSupply() public view virtual override returns (uint256) {return _totalSupply;}\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) << 255;\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n\n    /**\n     * @dev Multiplies two int256 variables and fails on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n\n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    /**\n     * @dev Division of two int256 variables and fails on overflow.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n\n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two int256 variables and fails on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n\n    /**\n     * @dev Adds two int256 variables and fails on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    /**\n     * @dev Converts to absolute value, and fails on overflow.\n     */\n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n        return a < 0 ? -a : a;\n    }\n\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n\nlibrary SafeMathUint {\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    require(b >= 0);\n    return b;\n  }\n}\n\ninterface IUSV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUSV2Router02 is IUSV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract hostileZone is ERC20, Ownable {\n    using SafeMath for uint256;\n    \n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _totalSupply = 100 * 1e6 * 1e18;\n\n    IUSV2Router02 private usV2Router;\n    address public usV2Pair;\n\n    bool private inTheZone; //swap\n    bool private misa = true; \n\n    address public hostileBank;\n    address public liqOwner; //this is where the auto LP created will go - set to go to 0xDEAD at launch\n    \n    uint256 public maxTx;\n    uint256 public tokenToEth;\n    uint256 public maxWallet;\n    \n    // bot, snipe and whale control protections\n    bool public restrictions = true;\n    bool public tradesPermit = false;\n    bool public waxOn = false;\n\n    mapping (address => bool) private bots;\n    mapping(address => uint256) private _lastTrans; \n    bool public timeRugEnabled = true;\n    bool private boughtEarly = true;\n    uint256 private _firstBlock;\n    uint256 private _botBlocks;\n\n    uint256 public buyTotalFees;\n    uint256 public buyHostileBankFee;\n    uint256 public buyLiqFee;\n    \n    uint256 public sellTotalFees;\n    uint256 public sellHostileBankFee;\n    uint256 public sellLiqFee;\n    \n    uint256 private tokensForBank;\n    uint256 private tokensForLiq;\n\n    uint256 _buyHostileBankFee = 8;\n    uint256 _buyLiqFee = 5;\n\n    uint256 _sellHostileBankFee = 8;\n    uint256 _sellLiqFee = 10;\n\n\n    // exlcusions\n    mapping (address => bool) private _isExcludedFromFees;\n    mapping (address => bool) public _isExcludedMaxTx;\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event hostileBankUpdated(address indexed newWallet, address indexed oldWallet);\n    event liqOwnerUpdated(address indexed newWallet, address indexed oldWallet);\n    \n    event EndedBoughtEarly(bool boughtEarly);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n\n    constructor() ERC20(\"Hostle Zone\", \"HZONE\") {\n        \n        IUSV2Router02 _usV2Router = IUSV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        \n        excludeFromMaxTx(address(_usV2Router), true);\n        usV2Router = _usV2Router;\n        \n        _approve(address(this), address(usV2Router), _totalSupply);\n\n        usV2Pair = IUSV2Factory(_usV2Router.factory()).createPair(address(this), _usV2Router.WETH());\n        IERC20(usV2Pair).approve(address(usV2Router),type(uint256).max);\n\n        excludeFromMaxTx(address(usV2Pair), true);      \n\n        maxTx = 250000 * 1e18; // 0.25% of supply max transaction allowed at launch\n        maxWallet = 2 * 1e6 * 1e18; // 2% of supply max wallet\n        tokenToEth = 50000 * 1e18; // 0.05% is the amount of tokens collected before selling for eth\n\n        buyHostileBankFee = _buyHostileBankFee;\n        buyLiqFee = _buyLiqFee;\n        buyTotalFees = buyHostileBankFee + buyLiqFee;\n        \n        sellHostileBankFee = _sellHostileBankFee;\n        sellLiqFee = _sellLiqFee;\n        sellTotalFees = sellHostileBankFee + sellLiqFee;\n        \n        //update this or you are going to donate all your fees to 0xDead\n        hostileBank = payable(0x7292D1D1DE3e7D6cC39905743b3488fb8633ad8f); \n        liqOwner = payable(0x000000000000000000000000000000000000dEaD);\n        \n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(owner(), true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(hostileBank), true);\n        excludeFromFees(address(liqOwner), true);\n        \n        excludeFromMaxTx(owner(), true);\n        excludeFromMaxTx(address(this), true);\n        excludeFromMaxTx(address(hostileBank), true);\n        excludeFromMaxTx(address(liqOwner), true);\n       \n       _mint(msg.sender, _totalSupply); //internal transfer to be called once\n    }\n\n    receive() external payable {\n\n  \t}\n    \n    // disable Transfer delay - cannot be reenabled\n    function disableTimeRug() external onlyOwner returns (bool){\n        timeRugEnabled = false;\n        return true;\n    }\n    \n     // change the minimum amount of tokens to sell from fees\n    function updateTokensToEth(uint256 newAmount) external onlyOwner returns (bool){\n  \t    require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\n  \t    require(newAmount <= totalSupply() * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\n  \t    tokenToEth = newAmount;\n  \t    return true;\n  \t}\n    \n    function updateMaxTxAmount(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set maxTx lower than 0.1%\");\n        maxTx = newNum * (1e18);\n    }\n\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 5 / 1000)/1e18, \"Cannot set maxWallet lower than 0.5%\");\n        maxWallet = newNum * (1e18);\n    }\n    \n    function excludeFromMaxTx(address updAds, bool isEx) public onlyOwner {\n        _isExcludedMaxTx[updAds] = isEx;\n    }\n    \n    function updateBuyFees(uint256 _hostileBankFee, uint256 _liqFee) external onlyOwner {\n        buyHostileBankFee = _hostileBankFee;\n        buyLiqFee = _liqFee;\n        buyTotalFees = buyHostileBankFee + buyLiqFee;\n        require(buyTotalFees <= 20, \"Must keep fees at 20% or less\");\n    }\n    \n    function updateSellFees(uint256 _hostileBankFee, uint256 _liqFee) external onlyOwner {\n        sellHostileBankFee = _hostileBankFee;\n        sellLiqFee = _liqFee;\n        sellTotalFees = sellHostileBankFee + sellLiqFee;\n        require(sellTotalFees <= 25, \"Must keep fees at 25% or less\");\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function updateHostileBankWallet(address newHostileBankWallet) external onlyOwner {\n        emit hostileBankUpdated(newHostileBankWallet, hostileBank);\n        hostileBank = newHostileBankWallet;\n    }\n\n    function updateLiqOwner(address newLiqOwner) external onlyOwner {\n        emit liqOwnerUpdated(newLiqOwner, liqOwner);\n        liqOwner = newLiqOwner;\n    }\n    \n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        \n         if(amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n        \n        if(restrictions){\n            if (\n                from != owner() &&\n                to != owner() &&\n                to != address(0) &&\n                to != address(0xdead) &&\n                !inTheZone\n            ){\n                if (from == usV2Pair && to != address(usV2Router)) {\n                \n                    if (block.number <= _firstBlock.add(_botBlocks)) {\n                        bots[to] = true;\n                    }                        \n\n                }\n\n                if(!tradesPermit){\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\n                }\n\n                if (timeRugEnabled){\n                    if (to != owner() && to != address(usV2Router) && to != address(usV2Pair)){\n                        require(_lastTrans[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n                        _lastTrans[tx.origin] = block.number;\n                    }\n                }\n                 \n                //when buy\n                if (from == usV2Pair) {\n                        require(amount <= maxTx, \"Buy transfer amount exceeds the maxTx.\");\n                        require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n                \n                //when sell\n                else if (to == usV2Pair && !_isExcludedMaxTx[from] && !bots[from] && !bots[to]) {\n                        require(amount <= maxTx, \"Sell transfer amount exceeds the maxTx.\");\n        \n                }\n                else if(!_isExcludedMaxTx[to]){\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n            }\n        }\n        \n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n        \n        bool canSwap = contractTokenBalance >= tokenToEth;\n\n        if (canSwap && waxOn && !inTheZone && from != usV2Pair && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\n            inTheZone = true;\n            switchIt();\n            inTheZone = false;\n        }\n\n        bool takeFee = !inTheZone;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n        \n        uint256 fees = 0;\n        //transfers are free\n        if(takeFee){\n            // on sell\n            if (to == usV2Pair && sellTotalFees > 0){\n                fees = amount.mul(sellTotalFees).div(100);\n                tokensForLiq += fees * sellLiqFee / sellTotalFees;\n                tokensForBank += fees * sellHostileBankFee / sellTotalFees;\n            }\n            // on buy\n            else if(from == usV2Pair && buyTotalFees > 0) {\n        \t    fees = amount.mul(buyTotalFees).div(100);\n        \t    tokensForLiq += fees * buyLiqFee / buyTotalFees;\n                tokensForBank += fees * buyHostileBankFee / buyTotalFees;\n            }\n            \n            if(fees > 0){    \n                super._transfer(from, address(this), fees);\n            }\n        \t\n        \tamount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n\n        // generate the us pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = usV2Router.WETH();\n\n        _approve(address(this), address(usV2Router), tokenAmount);\n\n        // make the swap\n        usV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n        \n    }\n    \n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(usV2Router), tokenAmount);\n\n        // add the liquidity\n        usV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(liqOwner),\n            block.timestamp\n        );\n    }\n\n    function switchIt() private {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = tokensForLiq + tokensForBank;\n        bool success;\n        \n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\n\n        if(contractBalance > tokenToEth * 20){\n          contractBalance = tokenToEth * 20;\n        }\n        \n        uint256 liqTokens = contractBalance * tokensForLiq / totalTokensToSwap / 2;\n        uint256 amountToSwapForETH = contractBalance.sub(liqTokens);\n        uint256 initialETHBalance = address(this).balance;\n        swapTokensForEth(amountToSwapForETH); \n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\n        uint256 ethForHostileBank = ethBalance.mul(tokensForBank).div(totalTokensToSwap);\n        uint256 ethForLiq = ethBalance - ethForHostileBank;\n        \n        tokensForLiq = 0;\n        tokensForBank = 0;\n        \n        if(liqTokens > 0 && ethForLiq > 0){\n            addLiquidity(liqTokens, ethForLiq);\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiq, tokensForLiq);\n        }\n        \n        (success,) = address(hostileBank).call{value: address(this).balance}(\"\");\n    }\n\n    function badBots(address[] memory bots_) public onlyOwner {\n        for (uint256 i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n \n    function notaBot(address notbot) public onlyOwner {\n        bots[notbot] = false;\n    }\n\n    function warBegins(uint256 botBlocks) private {\n        _firstBlock = block.number;\n        _botBlocks = botBlocks;\n        tradesPermit = true;\n    }\n\n    // this begins the contract and once enabled, it cannot be disabled\n    function startHostileZone(uint256 botBlocks) external onlyOwner() {\n        require(botBlocks <= 1, \"don't catch humans\");\n        waxOn = true;\n        require(boughtEarly == true, \"done\");\n        boughtEarly = false;\n        warBegins(botBlocks);\n        emit EndedBoughtEarly(boughtEarly);\n    }\n\n    // airdrop tokens to max 200 wallets at a time\n    function airdrop(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner {\n        require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop\n        for(uint256 i = 0; i < airdropWallets.length; i++){\n            address wallet = airdropWallets[i];\n            uint256 amount = amounts[i];\n            _transfer(msg.sender, wallet, amount);\n        }\n    }\n\n}\n\n\n"
    }
  }
}