{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "browser/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.1;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "browser/IRandom.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.1;\n\n/*\n* @title IRandom contract interface.\n*/\ninterface IRandom {\n    // @notice get random number between min max values\n    function getNumber(uint256 min, uint256 max) external pure returns (uint256);\n}"
    },
    "browser/IVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/*\r\n * @title IVotes\r\n */\r\ninterface IVotes {\r\n    function withdraw() external;\r\n}\r\n"
    },
    "browser/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.1;\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function allowed(address who) public view returns (bool) {\n        return owner() == who;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "browser/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.1;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n */\ncontract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "browser/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "browser/VotingBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.1;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {IERC20} from \"./IERC20.sol\";\r\nimport {SafeMath} from \"./SafeMath.sol\";\r\nimport {Ownable} from \"./Ownable.sol\";\r\nimport {IVotes} from \"./IVotes.sol\";\r\nimport {ReentrancyGuard} from \"./ReentrancyGuard.sol\";\r\nimport {Address} from \"./Address.sol\";\r\nimport {IRandom} from \"./IRandom.sol\";\r\n\r\n/*\r\n * @title VotingBase\r\n * @dev Implements voting process along with vote delegation\r\n */\r\ncontract VotingBase is Ownable, ReentrancyGuard {\r\n    using Address for *;\r\n    using SafeMath for uint256;\r\n\r\n    event Deposited(address token, address voter, uint256 amount);\r\n    event LuckyBonusClaimed(address lacky, uint256 amount);\r\n    event TeamRewardClaimed(address teammate, uint256 amount);\r\n    event Withdrawn(address token, address resipient, uint256 amount);\r\n    event Won(uint256 eventId, uint256 party);\r\n\r\n    enum Consignmen { NONE, FIRST_PARTY, SECOND_PARTY }\r\n    enum Status { NONE, AWAITING, IN_PROGRESS, PENDING_RESULTS, CLOSED }\r\n\r\n    struct Voter {\r\n        uint256 weight; // balance\r\n        uint256 balance;\r\n        uint256 luckyBalance;\r\n        bool voted;  // if true, that person already voted\r\n        Consignmen voteType;\r\n        bool credited;\r\n    }\r\n\r\n    struct Setups {\r\n        uint256 minDeposit;\r\n        uint256 serviceFee;\r\n        uint256 luckyFee;\r\n        uint256 dateFrom;\r\n        uint256 dateTo;\r\n    }\r\n\r\n    struct Metrics {\r\n        uint256 votes; // number of accumulated votes\r\n        uint256 voteWeight;\r\n        uint256 weightFirstParty;\r\n        uint256 weightSecondParty;\r\n        uint256 forFirstParty;\r\n        uint256 forSecondParty;\r\n    }\r\n\r\n    struct Event {\r\n        IERC20 token;\r\n        Setups setups;\r\n        Metrics metrics;\r\n        Consignmen winner;\r\n        string details;\r\n        address luckyAddress;\r\n        mapping (address => Voter) voters;\r\n    }\r\n\r\n    mapping (uint256 => Event) public events;\r\n    mapping (uint256 => address[]) public votersList; // eid\r\n\r\n    uint256 private _eventCounter;\r\n\r\n    address public teamWallet;\r\n    IRandom public randomOracle;\r\n\r\n    /*\r\n     * @dev Create a new ballot to choose one of 'proposalNames'.\r\n     * @param proposalNames names of proposals\r\n     */\r\n    constructor(address _teamWallet, IRandom _randomOracle) {\r\n        teamWallet = _teamWallet;\r\n        randomOracle = _randomOracle;\r\n    }\r\n\r\n    function getLastEventId() public view returns (uint256) {\r\n        return _eventCounter;\r\n    }\r\n\r\n    function getEventsToken(uint _eid) external view returns (address) {\r\n        return address(events[_eid].token);\r\n    }\r\n\r\n    function getEventsVoter(uint _eid, address _account) external view returns (Voter memory) {\r\n        return events[_eid].voters[_account];\r\n    }\r\n\r\n    // Status define\r\n    function getStatus(uint256 _eid) public view returns (Status) {\r\n        if (block.timestamp < events[_eid].setups.dateFrom) {\r\n            return Status.AWAITING;\r\n        }\r\n\r\n        if (block.timestamp > events[_eid].setups.serviceFee) {\r\n            if (events[_eid].winner == Consignmen.NONE) {\r\n                return Status.PENDING_RESULTS;\r\n            }\r\n\r\n            return Status.CLOSED;\r\n        }\r\n\r\n        if (block.timestamp >= events[_eid].setups.dateFrom) {\r\n            return Status.IN_PROGRESS;\r\n        }\r\n\r\n        return Status.NONE; // default\r\n    }\r\n\r\n    function luckyBonus(uint256 _eid) public view returns (uint256) {\r\n        return events[_eid].setups.luckyFee;\r\n    }\r\n\r\n    function minimumDeposit(uint256 _eid) public view returns (uint256) {\r\n        return events[_eid].setups.minDeposit;\r\n    }\r\n\r\n    function withdraw(uint256 _eid) public onlyAfter(_eid) {\r\n        require(\r\n            events[_eid].winner != Consignmen.NONE,\r\n            \"VotingBase: Only after winner was set\"\r\n        );\r\n\r\n        // lucky wallet withdraw\r\n        if (msg.sender == events[_eid].luckyAddress) {\r\n            uint256 _bonus = events[_eid].voters[msg.sender].luckyBalance;\r\n            events[_eid].voters[msg.sender].luckyBalance = 0;\r\n            events[_eid].voters[msg.sender].balance += _bonus;\r\n            emit LuckyBonusClaimed(events[_eid].luckyAddress, _bonus);\r\n        }\r\n\r\n        // count withdraw\r\n        require(!events[_eid].voters[msg.sender].credited, \"VotingBase: balance counted\");\r\n        require(events[_eid].voters[msg.sender].voteType == events[_eid].winner, \"VotingBase: only if winner\");\r\n\r\n        events[_eid].voters[msg.sender].credited = true;\r\n\r\n        uint256 weight = events[_eid].voters[msg.sender].weight;\r\n        uint256 share;\r\n        if (events[_eid].winner == Consignmen.FIRST_PARTY) {\r\n            share = _countShare(events[_eid].metrics.weightSecondParty, events[_eid].metrics.weightFirstParty, weight);\r\n        } else {\r\n            share = _countShare(events[_eid].metrics.weightFirstParty, events[_eid].metrics.weightSecondParty, weight);\r\n        }\r\n\r\n        events[_eid].voters[msg.sender].weight =\r\n        events[_eid].voters[msg.sender].weight.sub(weight, \"WSUB1\");\r\n\r\n        events[_eid].voters[msg.sender].balance =\r\n        events[_eid].voters[msg.sender].balance.add(weight).add(share);\r\n\r\n        uint256 _amount = events[_eid].voters[msg.sender].balance;\r\n        events[_eid].voters[msg.sender].balance = 0;\r\n\r\n        // transact to VotingBase.withdraw errored: VM error: revert.\r\n        //    revert The transaction has been reverted to the initial state.\r\n        //    Note: The called function should be payable if you send value and the value you send should be less\r\n        //    than your current balance. Debug the transaction to get more information.\r\n\r\n        if (address(events[_eid].token) != address(0)) {\r\n//            events[_eid].token.transfer(msg.sender, _amount);\r\n            (bool success,) = address(events[_eid].token).call(abi.encodeWithSignature(\r\n                    \"transfer(address,uint256)\",\r\n                    address(msg.sender),\r\n                    _amount\r\n                ));\r\n\r\n            require(success, \"Withdraw token: failed\");\r\n\r\n        } else {\r\n            (bool success,) = payable(msg.sender).call{value: _amount}(\"\");\r\n\r\n            require(success, \"Withdraw ethereum: failed\");\r\n        }\r\n\r\n        emit Withdrawn(address(events[_eid].token), msg.sender, _amount);\r\n    }\r\n\r\n    function voteForFirstParty(uint256 _eid, uint256 _amount) public payable nonReentrant onlyDuring(_eid) {\r\n        if (address(events[_eid].token) != address(0)) {\r\n            _depositToken(_eid, _amount);\r\n        } else {\r\n            _deposit(_eid);\r\n        }\r\n        _vote(_eid, Consignmen.FIRST_PARTY);\r\n    }\r\n\r\n    function voteForSecondParty(uint256 _eid, uint256 _amount) public payable nonReentrant onlyDuring(_eid) {\r\n        if (address(events[_eid].token) != address(0)) {\r\n            _depositToken(_eid, _amount);\r\n        } else {\r\n            _deposit(_eid);\r\n        }\r\n        _vote(_eid, Consignmen.SECOND_PARTY);\r\n    }\r\n\r\n    function consumeFParty(uint256 _eid) public onlyOwner onlyAfter(_eid) winnerNotSet(_eid) {\r\n        events[_eid].winner = Consignmen.FIRST_PARTY;\r\n        _selectLucky(_eid);\r\n        emit Won(_eid, uint256(Consignmen.FIRST_PARTY));\r\n    }\r\n\r\n    function consumeSParty(uint256 _eid) public onlyOwner onlyAfter(_eid) winnerNotSet(_eid) {\r\n        events[_eid].winner = Consignmen.SECOND_PARTY;\r\n        _selectLucky(_eid);\r\n        emit Won(_eid, uint256(Consignmen.SECOND_PARTY));\r\n    }\r\n\r\n    function createEvent(\r\n        address _token,\r\n        uint256 _minimumDeposit,\r\n        uint256 _serviceFee,\r\n        uint256 _luckyFee,\r\n        uint256 _startDate,\r\n        uint256 _endDate,\r\n        string memory _describe // first party and second party should be set here\r\n    ) public onlyOwner {\r\n        require(_serviceFee + _luckyFee <= 20, \"Voting base: so big percent\");\r\n\r\n        _eventCounter++;\r\n\r\n        Event storage e = events[_eventCounter];\r\n\r\n        e.token = IERC20(_token);\r\n        e.setups.minDeposit = _minimumDeposit;\r\n        e.setups.serviceFee = _serviceFee;\r\n        e.setups.luckyFee = _luckyFee;\r\n        e.setups.dateFrom = _startDate;\r\n        e.setups.dateTo = _endDate;\r\n        e.details = _describe;\r\n    }\r\n\r\n    function _depositToken(uint256 _eid, uint256 _amount) internal {\r\n        require(_amount >= minimumDeposit(_eid), \"VotingBase: minimum deposit\");\r\n        require(\r\n            _amount <= events[_eid].token.allowance(msg.sender, address(this)),\r\n            \"VotingBase: balance not allowed\"\r\n        );\r\n        require(\r\n            events[_eid].token.transferFrom(msg.sender, address(this), _amount),\r\n            \"VotingBase: transfer from failed\"\r\n        );\r\n\r\n        uint256 _serviceShare = _amount.mul(events[_eid].setups.serviceFee).div(100);\r\n        uint256 _luckyShare = _amount.mul(events[_eid].setups.luckyFee).div(100);\r\n\r\n        events[_eid].voters[teamWallet].balance += _serviceShare;\r\n        events[_eid].voters[msg.sender].balance += _amount.sub(_serviceShare).sub(_luckyShare);\r\n\r\n        emit Deposited(address(events[_eid].token), msg.sender, events[_eid].voters[msg.sender].balance);\r\n    }\r\n\r\n    function _deposit(uint256 _eid) internal {\r\n        require(\r\n            msg.value >= minimumDeposit(_eid),\r\n            \"VotingBase: not enough balance for deposit\"\r\n        );\r\n\r\n        uint256 _serviceShare = msg.value.mul(events[_eid].setups.serviceFee).div(100);\r\n        uint256 _luckyShare = msg.value.mul(events[_eid].setups.luckyFee).div(100);\r\n\r\n        events[_eid].voters[teamWallet].balance += _serviceShare;\r\n        events[_eid].voters[msg.sender].balance += msg.value.sub(_serviceShare).sub(_luckyShare);\r\n\r\n        emit Deposited(address(0), msg.sender, events[_eid].voters[msg.sender].balance);\r\n    }\r\n\r\n    function _selectLucky(uint256 _eid) internal {\r\n        uint256 luckyNum = randomOracle.getNumber(0, votersList[_eid].length.sub(1, \"SL1\"));\r\n        events[_eid].luckyAddress = (votersList[_eid])[luckyNum];\r\n\r\n        // logic to set balance\r\n        uint _luckyShare = events[_eid].metrics.voteWeight.mul(events[_eid].setups.luckyFee).div(100);\r\n        events[_eid].voters[msg.sender].luckyBalance =\r\n        events[_eid].voters[msg.sender].luckyBalance.add(_luckyShare);\r\n    }\r\n\r\n    function _vote(uint256 _eid, Consignmen _type)\r\n    internal\r\n    onlyDuring(_eid)\r\n    {\r\n        Voter storage sender = events[_eid].voters[msg.sender];\r\n\r\n        if (sender.voteType != Consignmen.NONE) {\r\n            require(sender.voteType == _type, \"VotingBase: Only for one candidate\");\r\n        }\r\n\r\n        uint256 amount = sender.balance;\r\n        sender.balance = sender.balance.sub(amount);\r\n        sender.weight = sender.weight.add(amount);\r\n        sender.voteType = _type;\r\n\r\n        if (_type == Consignmen.FIRST_PARTY) {\r\n            events[_eid].metrics.weightSecondParty = events[_eid].metrics.weightSecondParty.add(amount);\r\n        } else {\r\n            events[_eid].metrics.weightFirstParty = events[_eid].metrics.weightFirstParty.add(amount);\r\n        }\r\n\r\n        if (!sender.voted) {\r\n            events[_eid].metrics.votes++;\r\n            if (_type == Consignmen.FIRST_PARTY) {\r\n                events[_eid].metrics.forSecondParty++;\r\n            } else {\r\n                events[_eid].metrics.forFirstParty++;\r\n            }\r\n\r\n            sender.voted = true;\r\n\r\n            votersList[_eid].push(msg.sender);\r\n        }\r\n\r\n        events[_eid].metrics.voteWeight = events[_eid].metrics.voteWeight.add(amount);\r\n    }\r\n\r\n    function _countShare(uint256 share1, uint256 share2, uint256 userShare) internal pure returns(uint256) {\r\n        return userShare.mul(share2).div(share1);\r\n    }\r\n\r\n    modifier onlyDuring(uint256 _eid) {\r\n        require(\r\n            block.timestamp >= events[_eid].setups.dateFrom &&\r\n            block.timestamp <= events[_eid].setups.dateTo,\r\n            \"VotingBase: Voting not has not started or just ended yet\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfter(uint256 _eid) {\r\n        require(block.timestamp > events[_eid].setups.dateTo, \"VotingBase: Voting in progress\");\r\n        _;\r\n    }\r\n\r\n    modifier winnerNotSet(uint256 _eid) {\r\n        require(events[_eid].winner == Consignmen.NONE, \"VotingBase: Only if no winner\");\r\n        _;\r\n    }\r\n}\r\n"
    }
  }
}