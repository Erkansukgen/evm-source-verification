{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/StakingElection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/stakingNew1/IStakingRewards.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\ninterface IStakingRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerEth(address[] calldata tokenList, uint256[] calldata prices,uint256[] calldata amountsIn) external view returns (uint256);\n\n    function earned(address account, address[] calldata tokenList) external view returns (uint256);\n\n    function totalETHSupply(address[] calldata tokenList, uint256[] calldata prices, uint256[] calldata amountsIn) external view returns (uint256);\n\n    function totalTokenSupply(address token) external view returns (uint256);\n\n    function getTokenValueForEth(address token) external view returns (uint256);\n\n    function forEthPrice(address token) external  view returns (uint256[] memory);\n\n    function balanceOfToken(address token, address account)\n        external\n        view\n        returns (uint256);\n\n    function getIssueCounter() external view returns (uint256);\n\n    // Mutative\n\n    function stake(address token, uint256 amount) external;\n\n    function stakeWithEth(uint256 amount) payable external;\n\n    function withdraw(\n        address token,\n        uint256 amount,\n        address recipient\n    ) external;\n\n    function getReward() external;\n}\n\n// File: contracts/stakingNew1/StakingElection.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n}\ninterface ERC20{\n    function decimals() external view  returns (uint8);\n}\n\n\ncontract StakingElection is Ownable {\n    struct Currency {\n        address tokenAddr;\n        uint256 total;\n    }\n\n    uint256 proposalCounter = 0;\n\n    mapping(uint256 => address[]) public proposalResults;\n    mapping(uint256 => uint256) public proposalTimes;\n    mapping(address => uint8) public tokenDecimals;\n\n    address[] public candidateTokens;\n\n    uint256 public stakingLimit;\n\n    // stakingLimit * 7\n    uint256 public candidateLimit;\n\n    //stakingLimit * 5\n    uint256 public proposalLimit;\n\n    uint256 public bufferTime;\n\n    //rinkeby\n    //0xc778417E063141139Fce010982780140Aa0cD5Ab\n    address public WETH;\n    //0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n    address\n        public constant FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n\n    address public stakingRewards;\n\n    event CreateCandidate(address indexed tokenIn, address indexed tokenOut, uint8 decimals);\n    event Proposal(address user, uint256 proposalCounter);\n    event SetStakingLimit(address user, uint256 limit);\n\n    //0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f,0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,0xc778417E063141139Fce010982780140Aa0cD5Ab,10\n    constructor(\n        address _WETH,\n        uint256 _stakingLimit,\n        uint256 _bufferTime\n    ) public {\n        candidateLimit = _stakingLimit * 7;\n        stakingLimit = _stakingLimit;\n        proposalLimit = _stakingLimit * 5;\n        WETH = _WETH;\n        bufferTime = _bufferTime;\n    }\n\n    ///candidateTokens length inevitable >=  stakingTokens length\n    function proposal() external returns (bool) {\n        proposalCounter += 1;\n\n        address[] memory proposalRes;\n        address[] memory proposalList = getProposalList();\n        //候选名单列表长度小于等于质押名单长度 新加入的立即生效\n        if (proposalList.length <= stakingLimit) {\n            proposalRes = new address[](proposalList.length);\n            for (uint256 i = 0; i < proposalList.length; i++) {\n                proposalRes[i] = candidateTokens[i];\n            }\n            proposalTimes[proposalCounter] = 0;\n            //候选列表长多大于质押质押列表长度，进行排名取前{stakingLimit}名\n        } else {\n            proposalRes = new address[](stakingLimit);\n            Currency[] memory all = new Currency[](proposalList.length);\n            for (uint256 i = 0; i < proposalList.length; i++) {\n                uint256 value = IStakingRewards(stakingRewards)\n                    .getTokenValueForEth(proposalList[i]);\n                all[i] = Currency(proposalList[i], value);\n            }\n            _getMaxValues(all, stakingLimit);\n\n            for (uint256 i = 0; i < stakingLimit; i++) {\n                proposalRes[i] = all[i].tokenAddr;\n            }\n            if (proposalCounter == 1) {\n                proposalTimes[proposalCounter] = 0;\n            } else {\n                proposalTimes[proposalCounter] = block.timestamp;\n            }\n        }\n\n        proposalResults[proposalCounter] = proposalRes;\n        emit Proposal(msg.sender, proposalCounter);\n        return true;\n    }\n\n    function applyCandidate(address _token) external returns (bool) {\n        // check pair is created\n        address pair = _getPair(_token);\n        require(pair != address(0), \"pair not created\");\n        if (candidateTokens.length < candidateLimit) {\n            for (uint256 i = 0; i < candidateTokens.length; i++) {\n                if (_token == candidateTokens[i]) {\n                    return false;\n                }\n            }\n            uint8 decimals = ERC20(_token).decimals();\n            tokenDecimals[_token] = decimals;\n            candidateTokens.push(_token);\n            emit CreateCandidate(_token, address(0), decimals);\n            //Replace the one with the smallest market value\n        } else {\n            uint256 minKey = candidateTokens.length;\n            uint256 minBalance = IERC20(WETH).balanceOf(pair);\n            uint256 balance;\n            for (uint256 i = 0; i < candidateTokens.length; i++) {\n                if (_token == candidateTokens[i]) {\n                    return false;\n                }\n                balance = _getPairWETH(candidateTokens[i]);\n                if (balance < minBalance) {\n                    minBalance = balance;\n                    minKey = i;\n                }\n            }\n            if (minKey < candidateTokens.length) {\n                uint8 decimals = ERC20(_token).decimals();\n                tokenDecimals[_token] = decimals;\n                emit CreateCandidate(_token, candidateTokens[minKey], decimals);\n                candidateTokens[minKey] = _token;\n            }\n        }\n        return true;\n    }\n\n    function getProposalList() internal view returns(address[] memory proposalList){\n        if (candidateTokens.length <= proposalLimit) {\n            proposalList = new address[](candidateTokens.length);\n            for (uint256 i = 0; i < candidateTokens.length; i++) {\n                proposalList[i] = candidateTokens[i];\n            }\n        } else {\n            proposalList = new address[](proposalLimit);\n            Currency[] memory all = new Currency[](candidateTokens.length);\n            for (uint256 i = 0; i < candidateTokens.length; i++) {\n                address pair = _getPair(candidateTokens[i]);\n                uint256 value = IERC20(WETH).balanceOf(pair);\n                all[i] = Currency(candidateTokens[i], value);\n            }\n            _getMaxValues(all, proposalLimit);\n            for (uint256 i = 0; i < proposalLimit; i++) {\n                proposalList[i] = all[i].tokenAddr;\n            }\n        }\n    }\n\n    //提案成功后 原质押列表有{bufferTime}的缓冲时间\n    function stakingTokensList() external view returns (address[] memory) {\n        address[] memory tokenList;\n        uint256 key;\n        if (proposalCounter > 0) {\n            for (uint256 i = proposalCounter; i > 0; i--) {\n                uint256 proposalTime = proposalTimes[i];\n                if (proposalTime + bufferTime <= block.timestamp) {\n                    key = i;\n                    break;\n                }\n            }\n            tokenList = new address[](proposalResults[key].length + 1);\n            for (uint256 i = 0; i < proposalResults[key].length; i++) {\n                tokenList[i] = proposalResults[key][i];\n            }\n            tokenList[proposalResults[key].length] = WETH;\n        }\n        return tokenList;\n    }\n\n    function candidateTokensList() external view returns (address[] memory) {\n        address[] memory tokenlist = new address[](candidateTokens.length);\n        for (uint256 i = 0; i < candidateTokens.length; i++) {\n            tokenlist[i] = candidateTokens[i];\n        }\n        return tokenlist;\n    }\n\n    function proposalResult(uint256 _proposalCounter)\n        external\n        view\n        returns (address[] memory)\n    {\n        address[] memory tokenList;\n        if (_proposalCounter <= proposalCounter && _proposalCounter >= 1) {\n            tokenList = new address[](proposalResults[_proposalCounter].length);\n            for (\n                uint256 i = 0;\n                i < proposalResults[_proposalCounter].length;\n                i++\n            ) {\n                tokenList[i] = proposalResults[_proposalCounter][i];\n            }\n        }\n        return tokenList;\n    }\n\n    function _getPair(address _token) internal view returns (address) {\n        address pair = IUniswapV2Factory(FACTORY).getPair(_token, WETH);\n        return pair;\n    }\n\n    function _getPairWETH(address _token) internal view returns (uint256) {\n        uint256 balance = IERC20(WETH).balanceOf(\n            IUniswapV2Factory(FACTORY).getPair(_token, WETH)\n        );\n        return balance;\n    }\n\n    function _getMaxValues(Currency[] memory arr, uint256 k) internal pure {\n        uint256 hi = 0;\n        uint256 lo = arr.length - 1;\n        while (hi <= lo) {\n            uint256 index = _partition(arr, hi, lo);\n            if (index == k - 1) {\n                // find the kth maximal element.\n                break;\n            } else if (index < k - 1) {\n                hi = index + 1;\n            } else {\n                lo = index - 1;\n            }\n        }\n    }\n\n    function _partition(\n        Currency[] memory arr,\n        uint256 start,\n        uint256 end\n    ) internal pure returns (uint256) {\n        uint256 pivot = arr[end].total;\n        uint256 larger = start - 1;\n        while (start < end) {\n            if (arr[start].total > pivot) {\n                _swap(arr, start++, ++larger);\n            } else {\n                start++;\n            }\n        }\n        _swap(arr, end, ++larger);\n        return larger;\n    }\n\n    function _swap(\n        Currency[] memory arr,\n        uint256 a,\n        uint256 b\n    ) internal pure returns (bool) {\n        Currency memory temp = arr[b];\n        arr[b] = arr[a];\n        arr[a] = temp;\n        return true;\n    }\n\n    function setStakingRewards(address _stakingRewards) external onlyOwner {\n        // require(stakingRewards == address(0), \"stakingRewards address already set\");\n        stakingRewards = _stakingRewards;\n    }\n\n    function setStakingLimit(uint256 limit) external onlyOwner {\n        candidateLimit = limit * 7;\n        stakingLimit = limit;\n        proposalLimit = limit * 5;\n        emit SetStakingLimit(msg.sender, limit);\n    }\n}\n"
    }
  }
}