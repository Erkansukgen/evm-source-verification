{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Send.sol": {
      "content": "pragma solidity 0.4.26;\r\n\r\ninterface Token {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract Send {\r\n    event TransferEth(address to, uint256 amount);\r\n    Token token;\r\n    \r\n    constructor(address _token) public {\r\n        token = Token(_token);\r\n    }\r\n    \r\n    function transferBatch(address[] memory addrs, bool sendToken) public payable {\r\n        uint256 amount = msg.value / addrs.length;\r\n\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            addrs[i].transfer(amount);\r\n            emit TransferEth(addrs[i], amount);\r\n\r\n            if (sendToken) {\r\n                token.transfer(addrs[i], 8 * 10 ** 18);\r\n            }\r\n        }\r\n    }\r\n}"
    }
  }
}