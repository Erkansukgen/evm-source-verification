{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/judgelabs.sol": {
      "content": "\npragma solidity =0.6.6;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\n\ncontract Judgelabs {\n    \n    address public owner;\n    \n    constructor () public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function deposit(address _tokenAddress, uint256 _amount) public {\n        IERC20 token = IERC20(_tokenAddress);\n        uint256 allowance = token.allowance(msg.sender,address(this));\n        require(allowance>=_amount, \"INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(_tokenAddress, msg.sender, owner, _amount);\n    }\n    \n    function withdraw(address _to, address _tokenAddress, uint256 _amount) onlyOwner public {\n        IERC20 token = IERC20(_tokenAddress);\n        require (token.balanceOf(address(this)) >= _amount, \"INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransfer(_tokenAddress, _to, _amount);\n    }\n    \n    function withdrawETH(address payable _to, uint256 _amount) onlyOwner public {\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance>=_amount, \"INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransferETH(_to, _amount);\n    }\n    \n}\n\n"
    }
  }
}