{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "KNIGHTALLO24Month.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/******************************************/\n/*       IERC20 starts here               */\n/******************************************/\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/******************************************/\n/*       Context starts here              */\n/******************************************/\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/******************************************/\n/*       Ownable starts here              */\n/******************************************/\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/******************************************/\n/*       KnightAllocation Starting below      */\n/******************************************/\n\ncontract KNIGHTAllocation is Ownable {\n\n    IERC20 public KNIGHT; \n\n    uint256 public startBlock;\n    uint256 public endBlock;\n    bool initialized;\n\n    mapping (address => Allocation) public allocations;\n\n    struct Allocation {\n        uint256 sharePerBlock;\n        uint256 lastWithdrawalBlock;\n    }\n\n    /**\n     * @dev Populate allocations.\n     */\n    constructor()\n    {\n        address[3] memory shareHolders = [0xc82CC3ab1C860081507C85763eB3Daa21866be8B,\n            0x61281cBcBD75AF6C382b2E6Bf0675152918f0981,\n            0x9e67D018488aD636B538e4158E9e7577F2ECac12];\n\n        uint256[3] memory sharesPerBlock =[uint256(229070216049383000),229070216049383000,57267554012345700];\n\n        for (uint256 index = 0; index < shareHolders.length; index++) {\n            allocations[shareHolders[index]] = Allocation({\n            sharePerBlock: sharesPerBlock[index],\n            lastWithdrawalBlock: block.number\n            });\n        }\n       \n        startBlock = block.number;\n        endBlock = block.number + 4147200; //5760 blocks per day * 30 days * 24 months\n    }\n\n    function initialize(IERC20 _KNIGHT) external onlyOwner\n    {\n        require(initialized == false, \"Already initialized.\");\n        initialized = true;\n        KNIGHT = _KNIGHT;\n    }\n\n    /**\n     * @dev Withdraw all unlocked shares.\n     */\n    function withdrawShare() external\n    {\n        require(allocations[msg.sender].lastWithdrawalBlock < endBlock, \"All shares have already been claimed.\");\n        uint256 unlockedBlock;\n        if (block.number > endBlock) {\n            unlockedBlock = endBlock;\n        } else {\n            unlockedBlock = block.number;\n        }\n        uint256 tempLastWithdrawalBlock = allocations[msg.sender].lastWithdrawalBlock;\n        allocations[msg.sender].lastWithdrawalBlock = unlockedBlock;                    // Avoid reentrancy\n        uint256 unlockedShares = allocations[msg.sender].sharePerBlock * (unlockedBlock - tempLastWithdrawalBlock);\n        KNIGHT.transfer(msg.sender, unlockedShares);\n    }\n\n    /**\n     * @dev Get the remaining balance of a shareholder's total outstanding shares.\n     */\n    function getOutstandingShares() external view returns(uint256)\n    {\n        return allocations[msg.sender].sharePerBlock * (endBlock - allocations[msg.sender].lastWithdrawalBlock);\n    }\n\n    /**\n     * @dev Get the balance of a shareholder's claimable shares.\n     */\n    function getUnlockedShares() external view returns(uint256)\n    {\n        uint256 unlockedBlock;\n        if (block.number > endBlock) {\n            unlockedBlock = endBlock;\n        } else {\n            unlockedBlock = block.number;\n        }\n        return allocations[msg.sender].sharePerBlock * (unlockedBlock - allocations[msg.sender].lastWithdrawalBlock);\n    }\n\n    /**\n     * @dev Get the withdrawn shares of a shareholder.\n     */\n    function getWithdrawnShares() external view returns(uint256)\n    {\n        return allocations[msg.sender].sharePerBlock * (allocations[msg.sender].lastWithdrawalBlock - startBlock);\n    }\n\n    /**\n     * @dev Get the total shares of shareholder.\n     */\n    function getTotalShares(address shareholder) external view returns(uint256)\n    {\n        return allocations[shareholder].sharePerBlock * 4147200;\n    }\n\n}\n"
    }
  }
}