{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LuckyCatz.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IERC165\n{\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n\ninterface IERC721 is IERC165\n{\n    event   Transfer(      address indexed from,  address indexed to,       uint256  indexed tokenId);\n    event   Approval(      address indexed owner, address indexed approved, uint256  indexed tokenId);\n    event   ApprovalForAll(address indexed owner, address indexed operator, bool             approved);\n\n    function balanceOf(        address owner)                                   external view returns (uint256 balance);\n    function ownerOf(          uint256 tokenId)                                 external view returns (address owner);\n    function safeTransferFrom( address from,     address to, uint256 tokenId)   external;\n    function transferFrom(     address from,     address to, uint256 tokenId)   external;\n    function approve(          address to,       uint256 tokenId)               external;\n    function getApproved(      uint256 tokenId)                                 external view returns (address operator);\n    function setApprovalForAll(address operator, bool _approved)                external;\n    function isApprovedForAll( address owner,    address operator)              external view returns (bool);\n    function safeTransferFrom( address from,     address to, uint256 tokenId, bytes calldata data) external;\n}\n\n\n\ninterface IERC721Metadata is IERC721\n{\n    function name()                     external view returns (string memory);\n    function symbol()                   external view returns (string memory);\n    function tokenURI(uint256 tokenId)  external view returns (string memory);\n}\n\n\n\ninterface IERC721Enumerable is IERC721\n{\n    function totalSupply()                                      external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index)  external view returns (uint256 tokenId);\n    function tokenByIndex(uint256 index)                        external view returns (uint256);\n}\n\n\n\ninterface IERC721Receiver\n{\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n\n\n\nabstract contract ERC165 is IERC165\n{\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool)\n    {\n        return (interfaceId == type(IERC165).interfaceId);\n    }\n}\n\n\n\nabstract contract Context\n{\n    function _msgSender() internal view virtual returns (address)\n    {\n        return msg.sender;\n    }\n   \n   \n    function _msgData() internal view virtual returns (bytes calldata)\n    {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n\nabstract contract Ownable is Context\n{\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n   \n    constructor ()\n    {\n        address msgSender = _msgSender();\n                   _owner = msgSender;\n                   \n        emit OwnershipTransferred(address(0), msgSender);\n    }\n   \n   \n    function owner() public view virtual returns (address)\n    {\n        return _owner;\n    }\n   \n   \n    modifier onlyOwner()\n    {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n   \n   \n    function renounceOwnership() public virtual onlyOwner\n    {\n        emit OwnershipTransferred(_owner, address(0));\n       \n        _owner = address(0);\n    }\n   \n   \n    function transferOwnership(address newOwner) public virtual onlyOwner\n    {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n       \n        emit OwnershipTransferred(_owner, newOwner);\n       \n        _owner = newOwner;\n    }\n}\n\n\n\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, Ownable\n{\n    using Address for address;\n    using Strings for uint256;\n\n    string private _name;   // Token name\n    string private _symbol; // Token symbol\n\n    mapping(uint256 => address)                  internal _owners;              // Mapping from token ID to owner address\n    mapping(address => uint256)                  internal _balances;            // Mapping owner address to token count\n    mapping(uint256 => address)                  private  _tokenApprovals;      // Mapping from token ID to approved address\n    mapping(address => mapping(address => bool)) private  _operatorApprovals;   // Mapping from owner to operator approvals\n\n   \n    constructor(string memory name_, string memory symbol_)\n    {\n        _name   = name_;\n        _symbol = symbol_;\n    }\n   \n   \n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)\n    {\n        return  interfaceId == type(IERC721).interfaceId         ||\n                interfaceId == type(IERC721Metadata).interfaceId ||\n                super.supportsInterface(interfaceId);\n    }\n   \n   \n    function balanceOf(address owner) public view virtual override returns (uint256)\n    {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n       \n        return _balances[owner];\n    }\n   \n   \n    function ownerOf(uint256 tokenId) public view virtual override returns (address)\n    {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n   \n   \n    function name() public view virtual override returns (string memory)\n    {\n        return _name;\n    }\n   \n   \n    function symbol() public view virtual override returns (string memory)\n    {\n        return _symbol;\n    }\n   \n   \n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory)\n    {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n       \n        return (bytes(baseURI).length>0) ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n   \n   \n    function _baseURI() internal view virtual returns (string memory)\n    {\n        return \"\";\n    }\n   \n   \n    function approve(address to, uint256 tokenId) public virtual override\n    {\n        address owner = ERC721.ownerOf(tokenId);\n   \n        require(to!=owner, \"ERC721: approval to current owner\");\n        require(_msgSender()==owner || ERC721.isApprovedForAll(owner, _msgSender()), \"ERC721: approve caller is not owner nor approved for all\");\n\n        _approve(to, tokenId);\n    }\n   \n   \n    function getApproved(uint256 tokenId) public view virtual override returns (address)\n    {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n   \n   \n    function setApprovalForAll(address operator, bool approved) public virtual override\n    {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n   \n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n   \n   \n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n   \n   \n    function transferFrom(address from, address to, uint256 tokenId) public virtual override\n    {\n        //----- solhint-disable-next-line max-line-length\n       \n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n   \n   \n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override\n    {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n   \n   \n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override\n    {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n       \n        _safeTransfer(from, to, tokenId, _data);\n    }\n   \n   \n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual\n    {\n        _transfer(from, to, tokenId);\n   \n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n   \n   \n    function _exists(uint256 tokenId) internal view virtual returns (bool)\n    {\n        return _owners[tokenId] != address(0);\n    }\n   \n   \n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool)\n    {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n       \n        address owner = ERC721.ownerOf(tokenId);\n       \n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n   \n   \n    function _safeMint(address to, uint256 tokenId) internal virtual\n    {\n        _safeMint(to, tokenId, \"\");\n    }\n   \n   \n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual\n    {\n        _mint(to, tokenId);\n   \n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n   \n   \n    function _mint(address to, uint256 tokenId) internal virtual\n    {\n        require(to != address(0),  \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to]   += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n   \n   \n    function _batchMint(address to, uint256[] memory tokenIds) internal virtual\n    {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n       \n        _balances[to] += tokenIds.length;\n\n        for (uint256 i=0; i < tokenIds.length; i++)\n        {\n            require(!_exists(tokenIds[i]), \"ERC721: token already minted\");\n\n            _beforeTokenTransfer(address(0), to, tokenIds[i]);\n\n            _owners[tokenIds[i]] = to;\n\n            emit Transfer(address(0), to, tokenIds[i]);\n        }\n    }\n   \n   \n    function _burn(uint256 tokenId) internal virtual\n    {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        _approve(address(0), tokenId);      // Clear approvals\n\n        _balances[owner] -= 1;\n\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n   \n   \n    function _transfer(address from, address to, uint256 tokenId) internal virtual\n    {\n        require(ERC721.ownerOf(tokenId)==from,  \"ERC721: transfer of token that is not own\");\n        require(to != address(0),               \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        _approve(address(0), tokenId);      // Clear approvals from the previous owner\n\n        _balances[from] -= 1;\n        _balances[to]   += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n   \n   \n    function _approve(address to, uint256 tokenId) internal virtual\n    {\n        _tokenApprovals[tokenId] = to;\n   \n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n   \n   \n    function _checkOnERC721Received(address from,address to,uint256 tokenId,bytes memory _data) private returns (bool)\n    {\n        if (to.isContract())\n        {\n            try\n           \n                IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n           \n            returns (bytes4 retval)\n            {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            }\n            catch (bytes memory reason)\n            {\n                if (reason.length==0)\n                {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                }\n                else\n                {\n                    assembly { revert(add(32, reason), mload(reason)) }     //// solhint-disable-next-line no-inline-assembly\n                }\n            }\n        }\n        else\n        {\n            return true;\n        }\n    }\n   \n   \n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual\n    {\n        //\n    }\n}\n\n\n\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable\n{\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;           // Mapping from owner to list of owned token IDs\n    mapping(uint256 => uint256)                     private _ownedTokensIndex;      // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256)                     private _allTokensIndex;        // Mapping from token id to position in the allTokens array\n\n    uint256[] private _allTokens;                                                   // Array with all token ids, used for enumeration\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool)\n    {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function totalSupply() public view virtual override returns (uint256)\n    {\n        return _allTokens.length;\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256)\n    {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n   \n        return _ownedTokens[owner][index];\n    }\n\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256)\n    {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n   \n        return _allTokens[index];\n    }\n\n    function _beforeTokenTransfer(address from,address to,uint256 tokenId) internal virtual override\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n             if (from == address(0))     _addTokenToAllTokensEnumeration(tokenId);\n        else if (from != to)             _removeTokenFromOwnerEnumeration(from, tokenId);\n       \n             if (to == address(0))       _removeTokenFromAllTokensEnumeration(tokenId);\n        else if (to != from)             _addTokenToOwnerEnumeration(to, tokenId);\n    }\n\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private\n    {\n        uint256 length = ERC721.balanceOf(to);\n   \n        _ownedTokens[to][length]   = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private\n    {\n        _allTokensIndex[tokenId] = _allTokens.length;\n   \n        _allTokens.push(tokenId);\n    }\n\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private\n    {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private\n    {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\n\nlibrary Strings\n{\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n   \n    function toString(uint256 value) internal pure returns (string memory)\n    {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value==0)       return \"0\";\n   \n        uint256 temp = value;\n        uint256 digits;\n   \n        while (temp!=0)\n        {\n            digits++;\n            temp /= 10;\n        }\n       \n        bytes memory buffer = new bytes(digits);\n       \n        while (value != 0)\n        {\n            digits        -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value         /= 10;\n        }\n       \n        return string(buffer);\n    }\n   \n   \n    function toHexString(uint256 value) internal pure returns (string memory)\n    {\n        if (value==0)       return \"0x00\";\n       \n        uint256 temp   = value;\n        uint256 length = 0;\n       \n        while (temp != 0)\n        {\n            length++;\n            temp >>= 8;\n        }\n       \n        return toHexString(value, length);\n    }\n   \n   \n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n       \n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n       \n        for (uint256 i=2*length+1; i>1; --i)\n        {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n       \n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n\n\nlibrary Address\n{\n    function isContract(address account) internal view returns (bool)\n    {\n        uint256 size;\n       \n        assembly { size := extcodesize(account) }   // solhint-disable-next-line no-inline-assembly\n        return size > 0;\n    }\n   \n   \n    function sendValue(address payable recipient, uint256 amount) internal\n    {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{ value: amount }(\"\"); // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n   \n   \n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n   \n   \n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n   \n   \n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\n    {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n   \n   \n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\n    {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target),             \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);    // solhint-disable-next-line avoid-low-level-calls\n\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n   \n   \n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory)\n    {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n   \n   \n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory)\n    {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);  // solhint-disable-next-line avoid-low-level-calls\n\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n   \n   \n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory)\n    {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n   \n   \n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\n    {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);    // solhint-disable-next-line avoid-low-level-calls\n       \n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n   \n   \n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory)\n    {\n        if (success)\n        {\n            return returndata;\n        }\n        else\n        {\n            if (returndata.length > 0)      // Look for revert reason and bubble it up if present\n            {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                // solhint-disable-next-line no-inline-assembly\n                assembly\n                {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            }\n            else\n            {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\ncontract LuckyCatz     is  ERC721Enumerable\n{\n    using Address for address;\n    using Strings for uint256;\n\n    modifier callerIsUser()\n    {\n        require(tx.origin == msg.sender, \"The caller is another contract\");\n        _;\n    }\n\n    event   onWidthdrawal(address from, address to, uint256 amount);\n    event   onMaxMintPerWallet(uint256 lastMaxCount, uint256 newMaxCount);\n   \n    uint256 private     salesDate          = 1634482800;\n    uint256 private     salesPrice         = 0.07 ether;\n\n    uint256 private     totalTokens        = 7777;\n    uint256 private     leftTokenCount     = totalTokens;\n    uint256 private     mintedTokenCount   = 0;\n    uint256 private     maxMintPerWallet   = 7;\n   \n    string  private     baseURI = 'https://ipfs.io/ipfs/QmUaTJ3LvTr9FGVBDLwEi9nuyJwA2vK2tmVwXQYPbWRw4w/';\n\naddress private ownerWallet;\n\n    uint256 private maxReservableTokenCount = 777; //total reserved token for rewards and wages\n    uint256 private     totalReserved           = 0;\n\n    mapping(address => uint256) private walletMintCounts;\n    mapping(address => uint256) private walletMintedTokenIds;\n\n\n    constructor() ERC721(\"Lucky Catz\", \"LUCKYCATZ\")   // temporary Symbol and title\n    {\n        ownerWallet = msg.sender;\n    }\n   \n   \nfunction nftTransfer(address to, uint256 tokenId) external\n{\naddress fromAddr = _msgSender();\n\n        require(_isApprovedOrOwner(fromAddr, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n       \n        _transfer(fromAddr, to, tokenId);\n\n        require(isERC721ReceivedCheck(fromAddr, to, tokenId, \"\"), \"ERC721: transfer to non ERC721Receiver implementer\");\n}\n\n\nfunction    isERC721ReceivedCheck(address from,address to,uint256 tokenId,bytes memory _data) private returns (bool)\n{\n        if (to.isContract())\n        {\n            try\n           \n                IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n           \n            returns (bytes4 retval)\n            {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            }\n            catch (bytes memory reason)\n            {\n                if (reason.length==0)\n                {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                }\n                else\n                {\n                    assembly { revert(add(32, reason), mload(reason)) }     //// solhint-disable-next-line no-inline-assembly\n                }\n            }\n        }\n        else\n        {\n            return true;\n        }\n}\n\n\n    function    setBaseTokenURI(string memory newUri) external onlyOwner\n    {\n        baseURI = newUri;\n    }\n   \n   \n    function    addAvailableTokens(uint256 extraAmount) external onlyOwner\n    {\n        totalTokens += extraAmount;\n    }\n   \n   \n    function    setSalesDate(uint256 newSalesDate) external onlyOwner\n    {\n        salesDate = newSalesDate;\n    }\n   \n   \n    function    baseTokenURI() external view returns (string memory)\n    {\n        return baseURI;\n    }\n   \n   \n    function    getAvailableTokens() external view returns (uint256)\n    {\n        return leftTokenCount;\n    }\n   \n   \n    function    getSalesPrice() external view returns (uint256)\n    {\n        return salesPrice;\n    }\n\n\n    function    setSalesPrice(uint256 newSalesPrice) external onlyOwner\n    {\n        salesPrice = newSalesPrice;\n    }\n\n\n    function    setmaxMintPerWallet(uint256 newMaxCount) external\n    {\n        uint256 lastMaxCount = maxMintPerWallet;\n       \n        maxMintPerWallet = newMaxCount;\n       \n        emit onMaxMintPerWallet(lastMaxCount, maxMintPerWallet);\n    }\n\n\n    function    _baseURI() internal view virtual override returns (string memory)\n    {\n        return baseURI;\n    }\n\n\n    function    getTokenIdsByWallet(address walletAddress) external view returns(uint256[] memory)\n    {\n        require(walletAddress!=address(0), \"BlackHole wallet is not a real owner\");\n       \n        uint256          count  = balanceOf(walletAddress);\n        uint256[] memory result = new uint256[](count);\n       \n        for (uint256 i=0; i<count; i++)\n        {\n            result[i] = tokenOfOwnerByIndex(walletAddress, i);\n        }\n       \n        return result;\n    }\n   \n\nfunction    setMaxReserve(uint256 newAmount) external onlyOwner\n    {\n        maxReservableTokenCount = newAmount;\n    }\n\n\n    function    reserveSomeTokens(uint256 amount) external onlyOwner\n    {\n        require(amount         <= 200,                              \"Reserve is limited to 200 per call at max\");\n        require(leftTokenCount >= amount,                    \"Not enough tokens left to reserve anymore\");\n        require((totalReserved+amount) <= maxReservableTokenCount,  \"Too many to reserve. Reduce the amount\");\n       \n        for (uint256 i=0; i < amount; i++)\n        {\n    totalReserved++;\n            walletMintCounts[msg.sender]++;\n            mintedTokenCount++;\n            leftTokenCount--;\n           \n            _mint(msg.sender, mintedTokenCount);\n        }\n    }\n   \n   \n    function    mint() external payable callerIsUser\n    {\n        require(block.timestamp              >= salesDate,          \"Sales did not start yet\");\n        require(msg.value                    >= salesPrice,         \"Send exact Amount to claim your Nft\");\n        require(walletMintCounts[msg.sender] <= maxMintPerWallet,   \"You cannot claim more tokens\");\n        require(leftTokenCount               >  0,                  \"No tokens left to be claimed\");\n\n        walletMintCounts[msg.sender]++;\n        mintedTokenCount++;\n        leftTokenCount--;\n\n        _mint(msg.sender, mintedTokenCount);\n    }\n\n\n    function    batchMint(uint256 quantity) external payable callerIsUser\n    {\n        require(block.timestamp                         >= salesDate,               \"Sales did not start yet\");\n        require(msg.value                               == salesPrice * quantity,   \"Send exact Amount to claim your Nfts\");\n        require(walletMintCounts[msg.sender] + quantity <= maxMintPerWallet,        \"You cannot claim that much tokens\");\n        require(leftTokenCount                          >= quantity,                \"No tokens left to be claimed\");\n\n        for (uint256 i=0; i < quantity; i++)\n        {\n            walletMintCounts[msg.sender]++;\n            mintedTokenCount++;\n            leftTokenCount--;\n\n            _mint(msg.sender, mintedTokenCount);\n        }\n    }\n   \n   \n    function    withdraw() external onlyOwner\n    {\n        address  fromAddr = address(this);\n        uint256  balance  = fromAddr.balance;\n       \n        payable(ownerWallet).transfer(fromAddr.balance);\n\n        emit onWidthdrawal(fromAddr, ownerWallet, balance);\n    }\n}"
    }
  }
}