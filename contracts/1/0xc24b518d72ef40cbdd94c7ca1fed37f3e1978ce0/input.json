{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "FrenchieInu.sol": {
      "content": "pragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n\n            if (returndata.length > 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    function getTime() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract FrenchieInu is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\naddress payable public MarketingFundAddress = payable(0x6dfbE450B9f3f7BeB1C7e7e1D40b1ED4B96AeB9a); // MarketingFundAddress\naddress public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\nmapping (address => uint256) private _rOwned;\nmapping (address => uint256) private _tOwned;\nmapping (address => mapping (address => uint256)) private _allowances;\n\nmapping (address => bool) private _isExcludedFromFee;\n\nmapping (address => bool) private _isExcluded;\naddress[] private _excluded;\n\nmapping(address => bool) private _IsBot;\n\nbool public tradingOpen = false; //once switched on, can never be switched off.\n\n\n\nuint256 private constant MAX = ~uint256(0);\nuint256 private _tTotal = 1000 * 10**6 * 10**9;\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\nuint256 private _tFeeTotal;\n\nstring private _name = \"Frenchie Inu\";\nstring private _symbol = \"FRENCH\";\nuint8 private _decimals = 4;\n\n\nuint256 private _taxFee = 3; \nuint256 private _previousTaxFee = _taxFee;\n\nuint256 public _MarketingFee = 9;\nuint256 private _previousMarketingFee = _MarketingFee;\n\nuint256 private _tradingOpenTime;\n\nbool public tradingPaused;\n\nbool public pauseTradingFxnUsed;\n\nbool public  enableTradingFxnUsed;\n\nIUniswapV2Router02 public immutable uniswapV2Router;\naddress public immutable uniswapV2Pair;\n\nbool inSwapAndLiquify;\nbool public swapAndLiquifyEnabled = false;\n\n\n\nevent RewardLiquidityProviders(uint256 tokenAmount);\nevent SwapAndLiquifyEnabledUpdated(bool enabled);\nevent SwapAndLiquify(\nuint256 tokensSwapped,\nuint256 ethReceived,\nuint256 tokensIntoLiqudity\n);\n\nevent SwapETHForTokens(\nuint256 amountIn,\naddress[] path\n);\n\nevent SwapTokensForETH(\nuint256 amountIn,\naddress[] path\n);\n\nmodifier lockTheSwap {\ninSwapAndLiquify = true;\n_;\ninSwapAndLiquify = false;\n}\n    \nconstructor () {\n_rOwned[_msgSender()] = _rTotal;\n\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\nuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n.createPair(address(this), _uniswapV2Router.WETH());\n\nuniswapV2Router = _uniswapV2Router;\n\n\n// don't collect fees from the following account\n_isExcludedFromFee[owner()] = true;\n_isExcludedFromFee[address(this)] = true;\n\nemit Transfer(address(0), _msgSender(), _tTotal);\n}\n\n\nfunction enableTrading() external onlyOwner() {\nrequire(!enableTradingFxnUsed, \"This function can be used only once!\");\nswapAndLiquifyEnabled = true;\ntradingOpen = true;\n_tradingOpenTime = block.timestamp;\nenableTradingFxnUsed=true;\n}\n\nfunction pauseTrading() external onlyOwner() {\nrequire(!pauseTradingFxnUsed, \"This function can be used only once!\");\ntradingPaused = true;\npauseTradingFxnUsed=true;\n}\n\nfunction unpauseTrading() external onlyOwner() {\n//require(pauseTradingFxnUsed==0, \"This function can be used only once!\");\ntradingPaused = false;\n}\n\nfunction name() public view returns (string memory) {\nreturn _name;\n}\n\nfunction symbol() public view returns (string memory) {\nreturn _symbol;\n}\n\nfunction decimals() public view returns (uint8) {\nreturn _decimals;\n}\n\nfunction totalSupply() public view override returns (uint256) {\nreturn _tTotal;\n}\n\nfunction balanceOf(address account) public view override returns (uint256) {\nif (_isExcluded[account]) return _tOwned[account];\nreturn tokenFromReflection(_rOwned[account]);\n}\n\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\n_transfer(_msgSender(), recipient, amount);\nreturn true;\n}\n\nfunction allowance(address owner, address spender) public view override returns (uint256) {\nreturn _allowances[owner][spender];\n}\n\nfunction approve(address spender, uint256 amount) public override returns (bool) {\n_approve(_msgSender(), spender, amount);\nreturn true;\n}\n\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n_transfer(sender, recipient, amount);\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\nreturn true;\n}\n\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\nreturn true;\n}\n\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\nreturn true;\n}\n\nfunction isExcludedFromReward(address account) public view returns (bool) {\nreturn _isExcluded[account];\n}\n\nfunction totalFees() public view returns (uint256) {\nreturn _tFeeTotal;\n}\n\n\nfunction deliver(uint256 tAmount) public {\naddress sender = _msgSender();\nrequire(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n// adjust Tax\n//_adjustTax();\n\n(uint256 rAmount,,,,,) = _getValues(tAmount);\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\n_rTotal = _rTotal.sub(rAmount);\n_tFeeTotal = _tFeeTotal.add(tAmount);\n}\n\n\nfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\nrequire(tAmount <= _tTotal, \"Amount must be less than supply\");\nif (!deductTransferFee) {\n(uint256 rAmount,,,,,) = _getValues(tAmount);\nreturn rAmount;\n} else {\n(,uint256 rTransferAmount,,,,) = _getValues(tAmount);\nreturn rTransferAmount;\n}\n}\n\nfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\nrequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\nuint256 currentRate =  _getRate();\nreturn rAmount.div(currentRate);\n}\n\nfunction isBlockedBot(address account) public view returns (bool) {\nreturn _IsBot[account];\n}\n\n\nfunction setBots(address[] memory bots_) public onlyOwner {\nfor (uint256 i = 0; i < bots_.length; i++) {\n_IsBot[bots_[i]] = true;\n}\n}\n\nfunction delBot(address notbot) public onlyOwner {\n_IsBot[notbot] = false;\n}\n\n\nfunction excludeFromReward(address account) public onlyOwner() {\n\nrequire(!_isExcluded[account], \"Account is already excluded\");\nif(_rOwned[account] > 0) {\n_tOwned[account] = tokenFromReflection(_rOwned[account]);\n}\n_isExcluded[account] = true;\n_excluded.push(account);\n}\n\nfunction includeInReward(address account) external onlyOwner() {\nrequire(_isExcluded[account], \"Account is already excluded\");\nfor (uint256 i = 0; i < _excluded.length; i++) {\nif (_excluded[i] == account) {\n_excluded[i] = _excluded[_excluded.length - 1];\nuint256 currentRate = _getRate();\n_rOwned[account] = _tOwned[account].mul(currentRate);\n_tOwned[account] = 0;\n_isExcluded[account] = false;\n_excluded.pop();\nbreak;\n}\n}\n}\n\nfunction _approve(address owner, address spender, uint256 amount) private {\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\n\n_allowances[owner][spender] = amount;\nemit Approval(owner, spender, amount);\n}\n\n\nfunction _transfer(\naddress sender,\naddress recipient,\nuint256 amount\n) private {\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\nrequire(!_IsBot[recipient], \"You are a sending to a blocked bot!\");\nrequire(!_IsBot[msg.sender], \"You are blocked as a bot!\");\n\n// _adjustTax\n//_adjustTax();\n\nif(sender != owner() && recipient != owner()) {\nif (!(sender == address(this) || recipient == address(this)\n|| sender == address(owner()) || recipient == address(owner())))\n{\nrequire(tradingOpen, \"Trading is not enabled\");\nrequire(!tradingPaused, \"Trading is currently be paused\");\n}\n}\n\nuint256 contractTokenBalance = balanceOf(address(this));\nif (!inSwapAndLiquify && swapAndLiquifyEnabled && recipient == uniswapV2Pair) {\nswapTokens(contractTokenBalance);\n}\n\nbool takeFee = true;\n\n//if any account belongs to _isExcludedFromFee account then remove the fee\nif(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\ntakeFee = false;\n\n}\n\n_tokenTransfer(sender,recipient,amount,takeFee);\n}\n\nfunction swapTokens(uint256 contractTokenBalance) private lockTheSwap {\n\nuint256 initialBalance = address(this).balance;\nswapTokensForEth(contractTokenBalance);\nuint256 transferredBalance = address(this).balance.sub(initialBalance);\n\n//Send to Marketing address\ntransferToAddressETH(MarketingFundAddress, transferredBalance);\n\n}\n\n\nfunction swapTokensForEth(uint256 tokenAmount) private {\n// generate the uniswap pair path of token -> weth\naddress[] memory path = new address[](2);\npath[0] = address(this);\npath[1] = uniswapV2Router.WETH();\n\n_approve(address(this), address(uniswapV2Router), tokenAmount);\n\n// make the swap\nuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\ntokenAmount,\n0, // accept any amount of ETH\npath,\naddress(this), // The contract\nblock.timestamp\n);\n\nemit SwapTokensForETH(tokenAmount, path);\n}\n\nfunction swapETHForTokens(uint256 amount) private {\n// generate the uniswap pair path of token -> weth\naddress[] memory path = new address[](2);\npath[0] = uniswapV2Router.WETH();\npath[1] = address(this);\n\n// make the swap\nuniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\n0, // accept any amount of Tokens\npath,\ndeadAddress, // Burn address\nblock.timestamp.add(300)\n);\n\nemit SwapETHForTokens(amount, path);\n}\n\nfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n// approve token transfer to cover all possible scenarios\n_approve(address(this), address(uniswapV2Router), tokenAmount);\n\n// add the liquidity\nuniswapV2Router.addLiquidityETH{value: ethAmount}(\naddress(this),\ntokenAmount,\n0, // slippage is unavoidable\n0, // slippage is unavoidable\nowner(),\nblock.timestamp\n);\n}\n\nfunction _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\nif(!takeFee)\nremoveAllFee();\n\nif (_isExcluded[sender] && !_isExcluded[recipient]) {\n_transferFromExcluded(sender, recipient, amount);\n} else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n_transferToExcluded(sender, recipient, amount);\n} else if (_isExcluded[sender] && _isExcluded[recipient]) {\n_transferBothExcluded(sender, recipient, amount);\n} else {\n_transferStandard(sender, recipient, amount);\n}\n\nif(!takeFee)\nrestoreAllFee();\n}\n\nfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n_takeLiquidity(tLiquidity);\n_reflectFee(rFee, tFee);\nemit Transfer(sender, recipient, tTransferAmount);\n}\n\nfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n_takeLiquidity(tLiquidity);\n_reflectFee(rFee, tFee);\nemit Transfer(sender, recipient, tTransferAmount);\n}\n\nfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n_takeLiquidity(tLiquidity);\n_reflectFee(rFee, tFee);\nemit Transfer(sender, recipient, tTransferAmount);\n}\n\nfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n_takeLiquidity(tLiquidity);\n_reflectFee(rFee, tFee);\nemit Transfer(sender, recipient, tTransferAmount);\n}\n\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\n_rTotal = _rTotal.sub(rFee);\n_tFeeTotal = _tFeeTotal.add(tFee);\n}\n\nfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n(uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\nreturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n}\n\nfunction _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\nuint256 tFee = calculateTaxFee(tAmount);\nuint256 tLiquidity = calculateMarketingFee(tAmount);\nuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\nreturn (tTransferAmount, tFee, tLiquidity);\n}\n\nfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\nuint256 rAmount = tAmount.mul(currentRate);\nuint256 rFee = tFee.mul(currentRate);\nuint256 rLiquidity = tLiquidity.mul(currentRate);\nuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\nreturn (rAmount, rTransferAmount, rFee);\n}\n\nfunction _getRate() private view returns(uint256) {\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\nreturn rSupply.div(tSupply);\n}\n\nfunction _getCurrentSupply() private view returns(uint256, uint256) {\nuint256 rSupply = _rTotal;\nuint256 tSupply = _tTotal;\nfor (uint256 i = 0; i < _excluded.length; i++) {\nif (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\nrSupply = rSupply.sub(_rOwned[_excluded[i]]);\ntSupply = tSupply.sub(_tOwned[_excluded[i]]);\n}\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\nreturn (rSupply, tSupply);\n}\n\nfunction _takeLiquidity(uint256 tLiquidity) private {\nuint256 currentRate =  _getRate();\nuint256 rLiquidity = tLiquidity.mul(currentRate);\n_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\nif(_isExcluded[address(this)])\n_tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n}\n\nfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\nreturn _amount.mul(_taxFee).div(\n10**2\n);\n}\n\nfunction calculateMarketingFee(uint256 _amount) private view returns (uint256) {\nreturn _amount.mul(_MarketingFee).div(\n10**2\n);\n}\n\n\nfunction changeTaxFee(uint256 _newTax) public onlyOwner returns(uint256){\n_previousTaxFee = _taxFee;\n_taxFee = _newTax;\nreturn _taxFee;\n}\n\nfunction changeMarketingFee(uint256 _newMarketingFee) public onlyOwner returns(uint256){\n_MarketingFee = _newMarketingFee;\nreturn _MarketingFee;\n}\n\n\nfunction removeAllFee() private {\nif(_taxFee == 0 && _MarketingFee == 0) return;\n\n_previousTaxFee = _taxFee;\n_previousMarketingFee = _MarketingFee;\n\n_taxFee = 0;\n_MarketingFee = 0;\n}\n\nfunction restoreAllFee() private {\n_taxFee = _previousTaxFee;\n_MarketingFee = _previousMarketingFee;\n}\n\nfunction isExcludedFromFee(address account) public view returns(bool) {\nreturn _isExcludedFromFee[account];\n}\n\nfunction excludeFromFee(address account) public onlyOwner {\n_isExcludedFromFee[account] = true;\n}\n\nfunction includeInFee(address account) public onlyOwner {\n_isExcludedFromFee[account] = false;\n}\n\n\nfunction setMarketingFundAddress(address _MarketingFundAddress) external onlyOwner() {\nMarketingFundAddress = payable(_MarketingFundAddress);\n}\n\nfunction setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\nswapAndLiquifyEnabled = _enabled;\nemit SwapAndLiquifyEnabledUpdated(_enabled);\n}\n\nfunction transferToAddressETH(address payable recipient, uint256 amount) private {\nrecipient.transfer(amount);\n}\n\nfunction sendTokenTo(IERC20 token, address recipient, uint256 amount) external onlyOwner() {\ntoken.transfer(recipient, amount);\n\n}\n\nfunction getETHBalance() public view returns(uint) {\nreturn address(this).balance;\n}\n\nfunction sendETHTo(address payable _to) external onlyOwner() {\n_to.transfer(getETHBalance());\n}\n\nreceive() external payable {}\n}"
    }
  }
}