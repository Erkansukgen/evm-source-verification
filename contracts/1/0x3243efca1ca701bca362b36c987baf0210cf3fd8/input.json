{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/OverPie/interface/IEatPie.sol": {
      "content": "pragma solidity ^0.7.0;\n\ninterface IEatPie {\n    function setOwner(address payable newOwner) external;\n    function pieToBalancer(\n        address _pie, \n        uint256 _poolAmount, \n        address _balancer, \n        uint256 _minAmountOut, \n        uint256 _maxPrice, \n        uint256 _profit\n    ) external payable;\n    \n    function balancerToPie(\n        address _pie,\n        address _balancer,\n        uint256 _minBalancerOut,\n        uint256 _maxPrice,\n        uint256 _profit,\n        address[] calldata _tokens,\n        uint256[] calldata _amountOutMins\n    ) external payable;\n}"
    },
    "localhost/OverPie/interface/IToken.sol": {
      "content": "pragma solidity ^0.7.0;\n\ninterface IToken {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n}"
    },
    "localhost/OverPie/overpie.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport \"./interface/IToken.sol\";\nimport \"./interface/IEatPie.sol\";\n\ncontract OverPie {\n    constructor() payable {\n        _owner = msg.sender;\n    }\n    \n    address payable private _owner;\n    IEatPie private _eatpie = IEatPie(0xB30Ba7AB0E8295d0DA8bd0b6f2340e0bC7351eFf);\n    \n    modifier onlyOwner(){\n        require(msg.sender == _owner, \"Ownable.onlyOwner: msg.sender not owner\");\n        _;\n    }\n    \n    receive() external payable {}\n    \n    function setOwner(address payable newOwner) public onlyOwner {\n        _owner = newOwner;\n        _eatpie.setOwner(newOwner);\n    }\n\n    function transfer(address token, address spender, uint256 amount) public onlyOwner {\n        IToken ercToken = IToken(token);\n        ercToken.transfer(spender, amount);\n    }\n\n    function withdrawETH() public {\n        if(address(this).balance != 0) {\n            _owner.transfer(address(this).balance);\n        }\n    }\n\n    // _pie 是指defi token的合约\n    // _poolAMount 指过程中 defi token 的数量\n    // _balancer 是 defi token/weth 合约的地址\n    // _minAmountOut 是最后最少需要获得多少 weth \n    // _maxPrice 是交换过程中 weth 对 defi token 的最大价格\n    // _profit 是利润最低为多少\n    function pieToBalancer(\n        address _pie, \n        uint256 _poolAmount, \n        address _balancer, \n        uint256 _minAmountOut, \n        uint256 _maxPrice, \n        uint256 _profit\n    ) public payable onlyOwner {\n        _eatpie.pieToBalancer(_pie, _poolAmount, _balancer, _minAmountOut, _maxPrice, _profit);\n        msg.sender.transfer(address(this).balance);\n    }\n\n    // _pie 是指defi token的合约，非 pie 的入口\n    // _balancer 是指 defi token/weth 的合约地址 \n    // _minBalancerOut 是指从 balancer 里换出的 defi token 的最小值\n    // _maxPrice 是指交换过程中 defi token 对 weth 的最大值\n    // _profit 是最低的利润\n    // _tokens 是 defi token 的构成 token 的列表\n    // _amountOutMins 是 defi token 的每一种构成 token 换出的 eth 的最小值\n    function balancerToPie(\n        address _pie,\n        address _balancer,\n        uint256 _minBalancerOut,\n        uint256 _maxPrice,\n        uint256 _profit,\n        address[] calldata _tokens,\n        uint256[] calldata _amountOutMins\n    ) public payable onlyOwner {\n        _eatpie.balancerToPie(_pie, _balancer, _minBalancerOut, _maxPrice, _profit, _tokens, _amountOutMins);\n        msg.sender.transfer(address(this).balance);\n    }\n    \n    function sd() public onlyOwner {\n        selfdestruct(msg.sender);\n    }\n}"
    }
  }
}