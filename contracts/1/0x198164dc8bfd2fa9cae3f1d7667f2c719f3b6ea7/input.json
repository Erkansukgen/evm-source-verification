{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Oracle.sol":{"content":"// SPDX-License-Identifier: No License (None)\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\"Zero address not allowed\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface Oraclize{\r\n    function oracleCallback(uint256 requestId,uint256 balance) external returns(bool);\r\n    function oraclePriceAndBalanceCallback(uint256 requestId,uint256 priceA,uint256 priceB,uint256[] calldata balances) external returns(bool);\r\n}\r\n\r\ncontract Oracle is Ownable{\r\n    \r\n    uint256 public requestIdCounter;\r\n\r\n    mapping(address => bool) public isAllowedAddress;\r\n    mapping(address => bool) public isSystemAddress;\r\n    mapping(uint256 => bool) public requestFullFilled;\r\n    mapping(uint256 => address) public requestedBy;\r\n\r\n    \r\n    event BalanceRequested(uint256 indexed requestId,uint256 network,address token,address user);\r\n    event PriceAndBalanceRequested(uint256 indexed requestId,address tokenA,address tokenB,uint256 network,address token,address[] user);\r\n    event BalanceUpdated(uint256 indexed requestId,uint256 balance);\r\n    event PriceAndBalanceUpdated(uint256 indexed requestId,uint256 priceA,uint256 priceB,uint256[] balances);\r\n    event SetSystem(address system, bool isActive);\r\n\r\n    // only system wallet can send oracle response\r\n    modifier onlySystem() {\r\n        require(isSystemAddress[msg.sender],\"Not System\");\r\n        _;\r\n    }\r\n\r\n    // only system wallet can send oracle response\r\n    function setSystem(address system, bool isActive) external onlyOwner {\r\n        isSystemAddress[system] = isActive;\r\n        emit SetSystem(system, isActive);\r\n    }\r\n\r\n    function changeAllowedAddress(address _which,bool _bool) external onlyOwner returns(bool){\r\n        isAllowedAddress[_which] = _bool;\r\n        return true;\r\n    }\r\n\r\n    // parameter pass networkId like eth_mainNet = 1,ropsten = 97 etc \r\n    // token parameter is which token balance you want for native currency pass address(0)\r\n    // user which address you want to show\r\n    function getBalance(uint256 network,address token,address user) external returns(uint256){\r\n        require(isAllowedAddress[msg.sender],\"ERR_ALLOWED_ADDRESS_ONLY\");\r\n        requestIdCounter +=1;\r\n        requestedBy[requestIdCounter] = msg.sender;\r\n        emit BalanceRequested(requestIdCounter,network,token,user);\r\n        return requestIdCounter;\r\n    }\r\n    \r\n    function getPriceAndBalance(address tokenA,address tokenB,uint256 network,address token,address[] calldata user) external returns(uint256){\r\n        require(isAllowedAddress[msg.sender],\"ERR_ALLOWED_ADDRESS_ONLY\");\r\n        requestIdCounter +=1;\r\n        requestedBy[requestIdCounter] = msg.sender;\r\n        emit PriceAndBalanceRequested(requestIdCounter,tokenA,tokenB,network,token,user);\r\n        return requestIdCounter;\r\n    }\r\n    \r\n    function oracleCallback(uint256 _requestId,uint256 _balance) external onlySystem returns(bool){\r\n        require(requestFullFilled[_requestId]==false,\"ERR_REQUESTED_IS_FULFILLED\");\r\n        address _requestedBy = requestedBy[_requestId];\r\n        Oraclize(_requestedBy).oracleCallback(_requestId,_balance);\r\n        emit BalanceUpdated(_requestId,_balance);\r\n        requestFullFilled[_requestId] = true;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function oraclePriceAndBalanceCallback(uint256 _requestId,uint256 _priceA,uint256 _priceB,uint256[] calldata _balances) external onlySystem returns(bool){\r\n        require(requestFullFilled[_requestId]==false,\"ERR_REQUESTED_IS_FULFILLED\");\r\n        address _requestedBy = requestedBy[_requestId];\r\n        Oraclize(_requestedBy).oraclePriceAndBalanceCallback(_requestId,_priceA,_priceB,_balances);\r\n        emit PriceAndBalanceUpdated(_requestId,_priceA,_priceB,_balances);\r\n        requestFullFilled[_requestId] = true;\r\n        return true;\r\n    }\r\n}"}}}