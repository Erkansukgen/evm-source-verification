{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/estttnew.sol": {
      "content": "// File: @openzeppelin/contracts/GSN/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\n\npragma solidity ^0.6.0;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\n//\n// A Solidity Red-Black Tree binary search library to store and access a sorted\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\n//\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\n// ----------------------------------------------------------------------------\nlibrary BokkyPooBahsRedBlackTreeLibrary {\n\n    struct Node {\n        uint parent;\n        uint left;\n        uint right;\n        bool red;\n    }\n\n    struct Tree {\n        uint root;\n        mapping(uint => Node) nodes;\n    }\n\n    uint private constant EMPTY = 0;\n\n    function first(Tree storage self) internal view returns (uint _key) {\n        _key = self.root;\n        if (_key != EMPTY) {\n            while (self.nodes[_key].left != EMPTY) {\n                _key = self.nodes[_key].left;\n            }\n        }\n    }\n    function last(Tree storage self) internal view returns (uint _key) {\n        _key = self.root;\n        if (_key != EMPTY) {\n            while (self.nodes[_key].right != EMPTY) {\n                _key = self.nodes[_key].right;\n            }\n        }\n    }\n    function next(Tree storage self, uint target) internal view returns (uint cursor) {\n        require(target != EMPTY);\n        if (self.nodes[target].right != EMPTY) {\n            cursor = treeMinimum(self, self.nodes[target].right);\n        } else {\n            cursor = self.nodes[target].parent;\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\n                target = cursor;\n                cursor = self.nodes[cursor].parent;\n            }\n        }\n    }\n    function prev(Tree storage self, uint target) internal view returns (uint cursor) {\n        require(target != EMPTY);\n        if (self.nodes[target].left != EMPTY) {\n            cursor = treeMaximum(self, self.nodes[target].left);\n        } else {\n            cursor = self.nodes[target].parent;\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\n                target = cursor;\n                cursor = self.nodes[cursor].parent;\n            }\n        }\n    }\n    function exists(Tree storage self, uint key) internal view returns (bool) {\n        return (key != EMPTY) && ((key == self.root) || (self.nodes[key].parent != EMPTY));\n    }\n    function isEmpty(uint key) internal pure returns (bool) {\n        return key == EMPTY;\n    }\n    function getEmpty() internal pure returns (uint) {\n        return EMPTY;\n    }\n    function getNode(Tree storage self, uint key) internal view returns (uint _returnKey, uint _parent, uint _left, uint _right, bool _red) {\n        require(exists(self, key));\n        return(key, self.nodes[key].parent, self.nodes[key].left, self.nodes[key].right, self.nodes[key].red);\n    }\n\n    function insert(Tree storage self, uint key) internal {\n        require(key != EMPTY);\n        require(!exists(self, key));\n        uint cursor = EMPTY;\n        uint probe = self.root;\n        while (probe != EMPTY) {\n            cursor = probe;\n            if (key < probe) {\n                probe = self.nodes[probe].left;\n            } else {\n                probe = self.nodes[probe].right;\n            }\n        }\n        self.nodes[key] = Node({parent: cursor, left: EMPTY, right: EMPTY, red: true});\n        if (cursor == EMPTY) {\n            self.root = key;\n        } else if (key < cursor) {\n            self.nodes[cursor].left = key;\n        } else {\n            self.nodes[cursor].right = key;\n        }\n        insertFixup(self, key);\n    }\n    function remove(Tree storage self, uint key) internal {\n        require(key != EMPTY);\n        require(exists(self, key));\n        uint probe;\n        uint cursor;\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\n            cursor = key;\n        } else {\n            cursor = self.nodes[key].right;\n            while (self.nodes[cursor].left != EMPTY) {\n                cursor = self.nodes[cursor].left;\n            }\n        }\n        if (self.nodes[cursor].left != EMPTY) {\n            probe = self.nodes[cursor].left;\n        } else {\n            probe = self.nodes[cursor].right;\n        }\n        uint yParent = self.nodes[cursor].parent;\n        self.nodes[probe].parent = yParent;\n        if (yParent != EMPTY) {\n            if (cursor == self.nodes[yParent].left) {\n                self.nodes[yParent].left = probe;\n            } else {\n                self.nodes[yParent].right = probe;\n            }\n        } else {\n            self.root = probe;\n        }\n        bool doFixup = !self.nodes[cursor].red;\n        if (cursor != key) {\n            replaceParent(self, cursor, key);\n            self.nodes[cursor].left = self.nodes[key].left;\n            self.nodes[self.nodes[cursor].left].parent = cursor;\n            self.nodes[cursor].right = self.nodes[key].right;\n            self.nodes[self.nodes[cursor].right].parent = cursor;\n            self.nodes[cursor].red = self.nodes[key].red;\n            (cursor, key) = (key, cursor);\n        }\n        if (doFixup) {\n            removeFixup(self, probe);\n        }\n        delete self.nodes[cursor];\n    }\n\n    function treeMinimum(Tree storage self, uint key) private view returns (uint) {\n        while (self.nodes[key].left != EMPTY) {\n            key = self.nodes[key].left;\n        }\n        return key;\n    }\n    function treeMaximum(Tree storage self, uint key) private view returns (uint) {\n        while (self.nodes[key].right != EMPTY) {\n            key = self.nodes[key].right;\n        }\n        return key;\n    }\n\n    function rotateLeft(Tree storage self, uint key) private {\n        uint cursor = self.nodes[key].right;\n        uint keyParent = self.nodes[key].parent;\n        uint cursorLeft = self.nodes[cursor].left;\n        self.nodes[key].right = cursorLeft;\n        if (cursorLeft != EMPTY) {\n            self.nodes[cursorLeft].parent = key;\n        }\n        self.nodes[cursor].parent = keyParent;\n        if (keyParent == EMPTY) {\n            self.root = cursor;\n        } else if (key == self.nodes[keyParent].left) {\n            self.nodes[keyParent].left = cursor;\n        } else {\n            self.nodes[keyParent].right = cursor;\n        }\n        self.nodes[cursor].left = key;\n        self.nodes[key].parent = cursor;\n    }\n    function rotateRight(Tree storage self, uint key) private {\n        uint cursor = self.nodes[key].left;\n        uint keyParent = self.nodes[key].parent;\n        uint cursorRight = self.nodes[cursor].right;\n        self.nodes[key].left = cursorRight;\n        if (cursorRight != EMPTY) {\n            self.nodes[cursorRight].parent = key;\n        }\n        self.nodes[cursor].parent = keyParent;\n        if (keyParent == EMPTY) {\n            self.root = cursor;\n        } else if (key == self.nodes[keyParent].right) {\n            self.nodes[keyParent].right = cursor;\n        } else {\n            self.nodes[keyParent].left = cursor;\n        }\n        self.nodes[cursor].right = key;\n        self.nodes[key].parent = cursor;\n    }\n\n    function insertFixup(Tree storage self, uint key) private {\n        uint cursor;\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\n            uint keyParent = self.nodes[key].parent;\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[keyParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    key = self.nodes[keyParent].parent;\n                } else {\n                    if (key == self.nodes[keyParent].right) {\n                      key = keyParent;\n                      rotateLeft(self, key);\n                    }\n                    keyParent = self.nodes[key].parent;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    rotateRight(self, self.nodes[keyParent].parent);\n                }\n            } else {\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[keyParent].red = false;\n                    self.nodes[cursor].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    key = self.nodes[keyParent].parent;\n                } else {\n                    if (key == self.nodes[keyParent].left) {\n                      key = keyParent;\n                      rotateRight(self, key);\n                    }\n                    keyParent = self.nodes[key].parent;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[keyParent].parent].red = true;\n                    rotateLeft(self, self.nodes[keyParent].parent);\n                }\n            }\n        }\n        self.nodes[self.root].red = false;\n    }\n\n    function replaceParent(Tree storage self, uint a, uint b) private {\n        uint bParent = self.nodes[b].parent;\n        self.nodes[a].parent = bParent;\n        if (bParent == EMPTY) {\n            self.root = a;\n        } else {\n            if (b == self.nodes[bParent].left) {\n                self.nodes[bParent].left = a;\n            } else {\n                self.nodes[bParent].right = a;\n            }\n        }\n    }\n    function removeFixup(Tree storage self, uint key) private {\n        uint cursor;\n        while (key != self.root && !self.nodes[key].red) {\n            uint keyParent = self.nodes[key].parent;\n            if (key == self.nodes[keyParent].left) {\n                cursor = self.nodes[keyParent].right;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[keyParent].red = true;\n                    rotateLeft(self, keyParent);\n                    cursor = self.nodes[keyParent].right;\n                }\n                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {\n                    self.nodes[cursor].red = true;\n                    key = keyParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].right].red) {\n                        self.nodes[self.nodes[cursor].left].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateRight(self, cursor);\n                        cursor = self.nodes[keyParent].right;\n                    }\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[cursor].right].red = false;\n                    rotateLeft(self, keyParent);\n                    key = self.root;\n                }\n            } else {\n                cursor = self.nodes[keyParent].left;\n                if (self.nodes[cursor].red) {\n                    self.nodes[cursor].red = false;\n                    self.nodes[keyParent].red = true;\n                    rotateRight(self, keyParent);\n                    cursor = self.nodes[keyParent].left;\n                }\n                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {\n                    self.nodes[cursor].red = true;\n                    key = keyParent;\n                } else {\n                    if (!self.nodes[self.nodes[cursor].left].red) {\n                        self.nodes[self.nodes[cursor].right].red = false;\n                        self.nodes[cursor].red = true;\n                        rotateLeft(self, cursor);\n                        cursor = self.nodes[keyParent].left;\n                    }\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\n                    self.nodes[keyParent].red = false;\n                    self.nodes[self.nodes[cursor].left].red = false;\n                    rotateRight(self, keyParent);\n                    key = self.root;\n                }\n            }\n        }\n        self.nodes[key].red = false;\n    }\n}\n// ----------------------------------------------------------------------------\n// End - BokkyPooBah's Red-Black Tree Library\n// ----------------------------------------------------------------------------\n\n// File: contracts/Interfaces.sol\n\npragma solidity ^0.6.2;\n\ninterface ESTokenInterface {\n    function isESToken() external pure returns (bool);\n    function parentReferral(address user) external view returns (address);\n    function setParentReferral(address user, address parent, uint256 reward) external;\n}\n\ninterface ExchangeInterface {\n    function isExchange() external pure  returns (bool);\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function decimals() external view returns (uint8);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ninterface IERC20USDTCOMPATIBLE {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external;\n    function transferFrom(address from, address to, uint256 value) external;\n    function approve(address spender, uint256 value) external;\n    function decimals() external view returns (uint256);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/Exchange.sol\n\npragma solidity ^0.6.2;\n\n\n\n\n\n\n\ncontract Exchange is ExchangeInterface, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    using BokkyPooBahsRedBlackTreeLibrary for BokkyPooBahsRedBlackTreeLibrary.Tree;\n\n    struct Order {\n        // 32 bits for user, 8 bits for type, 186 for order uid (0x<186><8><32>)\n        uint256 uid;\n        address trader;\n        uint256 srcAmount;\n        uint256 destAmount;\n        uint256 filled;\n    }\n\n    struct MemoryOrder {\n        address trader;\n        address src;\n        uint256 srcAmount;\n        address dest;\n        uint256 destAmount;\n        uint256 filled;\n    }\n\n    struct TokenEntity {\n        uint256 reservedBalance;\n        Order[] orders;\n        mapping(uint256 => uint256) ids; // uid -> index\n    }\n\n    struct OrderBook {\n        // price tree\n        BokkyPooBahsRedBlackTreeLibrary.Tree tree;\n        // price -> [order uids]\n        mapping(uint256 => uint256[]) uids;\n    }\n\n    address constant private RESERVE_ADDRESS = 0x0000000000000000000000000000000000000001;\n    uint8 constant private ESTT_2_USDT = 1;\n    uint8 constant private USDT_2_ESTT = 2;\n    uint256 private _referralBonus;\n    uint256 private _exchangeFee;\n    uint256 private _minESTTPrice;\n    mapping(address => OrderBook) private _orderBooks; // srcToken -> OrderBook\n    mapping(uint256 => address) private _usersAddresses; // uint32(address) -> address\n    mapping(address => mapping(address => TokenEntity)) private _ledger; // user, ESTT/USDT pair => TokenEntity\n\n    IERC20 private _ESTT;\n    IERC20USDTCOMPATIBLE private _USDT;\n    uint256 private _ESTTDecimals;\n    uint256 private _USDTDecimals;\n    address private _ESTTAddress;\n    address private _USDTAddress;\n\n    uint192 private _lastUid;\n\n    constructor (address esttAddress, address usdtAddress) public {\n        ESTokenInterface potentialESTT = ESTokenInterface(esttAddress);\n        require(potentialESTT.isESToken(), \"address doesn't match to ESTT\");\n        _ESTT = IERC20(esttAddress);\n        _ESTTDecimals = 10 ** uint256(_ESTT.decimals());\n        _ESTTAddress = esttAddress;\n        IERC20USDTCOMPATIBLE potentialUSDT = IERC20USDTCOMPATIBLE(usdtAddress);\n        _USDTDecimals = potentialUSDT.decimals();\n        require(_USDTDecimals == 6, \"address doesn't match to USDT\");\n        _USDT = potentialUSDT;\n        _USDTAddress = usdtAddress;\n        _USDTDecimals = 10 ** _USDTDecimals;\n        _referralBonus = 500_000_000_000_000; // +0.05%\n        _exchangeFee = 8_000_000_000_000_000; // 0.8% fee from estt->usdt tx\n        _minESTTPrice = _ESTTDecimals;\n    }\n\n    function isExchange() pure external override returns (bool) {\n        return true;\n    }\n\n    function setReferralBonus(uint256 newReferralBonus) external onlyOwner {\n        require(newReferralBonus >= 10 ** 18, \"negative referral bonus\");\n        _referralBonus = newReferralBonus.sub(10 ** 18);\n    }\n\n    function referralBonus() external view returns (uint256) {\n        return _referralBonus.add(10 ** 18);\n    }\n\n    function setExchangeFee(uint256 newExchangeFee) external onlyOwner {\n        require(newExchangeFee >= 10 ** 18, \"negative exchange fee\");\n        _exchangeFee = newExchangeFee.sub(10 ** 18);\n    }\n\n    function exchangeFee() external view returns (uint256) {\n        return _exchangeFee.add(10 ** 18);\n    }\n\n    function setMinPrice(uint256 newMinPrice) external onlyOwner {\n        require(newMinPrice >= 1000000, \"min possible price not in range [1, 9999]\");\n        require(newMinPrice < 10000000000, \"min possible price not in range [1, 9999]\");\n        _minESTTPrice = _USDTDecimals.mul(_ESTTDecimals).div(newMinPrice);\n    }\n\n    function minPrice() external view returns (uint256) {\n        return _ESTTDecimals.mul(_USDTDecimals).div(_minESTTPrice);\n    }\n\n    function getNextPrice (address tokenSrc, uint256 price) external view returns (uint256) {\n        return price == 0 ? _orderBooks[tokenSrc].tree.first() : _orderBooks[tokenSrc].tree.next(price);\n    }\n\n    function getUidsByPrice (address tokenSrc, uint256 price) external view returns (uint256[] memory) {\n        return _orderBooks[tokenSrc].uids[price];\n    }\n\n    function getMyOrders () external view returns (uint256[] memory) {\n        uint256 lengthESTT = _ledger[_msgSender()][_ESTTAddress].orders.length;\n        uint256 lengthUSDT = _ledger[_msgSender()][_USDTAddress].orders.length;\n        uint256[] memory myOrderUids = new uint256[](lengthESTT + lengthUSDT);\n        for (uint256 i = 0; i < lengthESTT; ++i) {\n            myOrderUids[i] = _ledger[_msgSender()][_ESTTAddress].orders[i].uid;\n        }\n        for (uint256 i = 0; i < lengthUSDT; ++i) {\n            myOrderUids[i + lengthESTT] = _ledger[_msgSender()][_USDTAddress].orders[i].uid;\n        }\n        return myOrderUids;\n    }\n\n    function getOrderByUid (uint256 uid) external view returns (uint256, address, uint256, uint256, uint256) {\n        (address srcAddress, address user, uint256 index) = _unpackUid(uid);\n        Order memory o = _ledger[user][srcAddress].orders[index];\n        return (o.uid, o.trader, o.srcAmount, o.destAmount, o.filled);\n    }\n\n    function trade (\n        address src,\n        uint256 srcAmount,\n        address dest,\n        uint256 destAmount,\n        address referral\n    ) external {\n        uint32 userId = uint32(_msgSender());\n        if (_usersAddresses[userId] == address(0)) {\n            _usersAddresses[userId] = _msgSender();\n        }\n        require(_usersAddresses[userId] == _msgSender(), \"user address already exist\");\n        MemoryOrder memory order = MemoryOrder(\n            _msgSender(),\n            src,\n            srcAmount,\n            dest,\n            destAmount,\n            0\n        );\n        _orderCheck(order);\n        _ledger[_msgSender()][src].reservedBalance = _ledger[_msgSender()][src].reservedBalance.add(srcAmount);\n        // less than 10 wei\n        if(_trade(order) > 10) {\n            _insertOrder(order, src);\n        }\n        ESTokenInterface esttInerface = ESTokenInterface(_ESTTAddress);\n        if (referral != address(0) &&\n            esttInerface.parentReferral(_msgSender()) == address(0) &&\n            src == _USDTAddress\n        ) {\n            uint256 price = _getPriceInverted(order);\n            uint256 orderBonus = order.filled.mul(price).div(_USDTDecimals);\n            esttInerface.setParentReferral(_msgSender(), referral, orderBonus.mul(_referralBonus).div(10 ** 18));\n        }\n    }\n\n    function continueTrade (uint256 uid) external {\n        (address tokenSrcAddress, address user, uint256 index) = _unpackUid(uid);\n        Order memory storageOrder = _ledger[user][tokenSrcAddress].orders[index];\n        require(_msgSender() == storageOrder.trader, \"has no rights to continue trade\");\n        MemoryOrder memory order = MemoryOrder(\n            storageOrder.trader,\n            tokenSrcAddress,\n            storageOrder.srcAmount,\n            tokenSrcAddress == _ESTTAddress ? _USDTAddress : _ESTTAddress,\n            storageOrder.destAmount,\n            storageOrder.filled\n        );\n        if(_trade(order) == 0) {\n            _removeOrder(uid, order.src, order.trader);\n            uint256 price = _getPriceInverted(order);\n            _removeOrderFromOrderBook(uid, order.src, price);\n        } else {\n            _ledger[user][tokenSrcAddress].orders[index].filled = order.filled;\n        }\n    }\n\n    function cancel (uint256 uid) external {\n        (address tokenSrcAddress, address user, uint256 index) = _unpackUid(uid);\n        Order memory storageOrder = _ledger[user][tokenSrcAddress].orders[index];\n        MemoryOrder memory order = MemoryOrder(\n            storageOrder.trader,\n            tokenSrcAddress,\n            storageOrder.srcAmount,\n            tokenSrcAddress == _ESTTAddress ? _USDTAddress : _ESTTAddress,\n            storageOrder.destAmount,\n            storageOrder.filled\n        );\n        require(_msgSender() == order.trader, \"doesn't have rights to cancel order\");\n        uint256 restAmount = order.srcAmount.sub(order.filled);\n        _ledger[order.trader][order.src].reservedBalance = _ledger[order.trader][order.src].reservedBalance.sub(restAmount);\n        _removeOrder(uid, order.src, order.trader);\n        uint256 price = _getPriceInverted(order);\n        _removeOrderFromOrderBook(uid, order.src, price);\n    }\n\n    // place limit order\n    // if price more than market - order will be matched with market price\n    function _trade (MemoryOrder memory order) internal returns (uint256) {\n        OrderBook storage destOrderBook = _orderBooks[order.dest];\n        uint256 maxPrice = _getPrice(order);\n        uint256 destKey = destOrderBook.tree.first();\n\n        while (destKey != 0) {\n            // key can be deleted, so next will not be available in that case\n            uint256 nextKey = 0;\n            if (maxPrice >= destKey) {\n                while (destOrderBook.uids[destKey].length != 0) {\n                    uint256 uid = destOrderBook.uids[destKey][0];\n                    (address src, address user, uint256 index) = _unpackUid(uid);\n                    Order memory opposite = _ledger[user][src].orders[index];\n                    (bool badOpposite, uint256 filledOpposite) = _match(order, opposite, destKey);\n                    opposite.filled = opposite.filled.add(filledOpposite);\n                    if (opposite.srcAmount.sub(opposite.filled) < 10 || !badOpposite) {\n                        nextKey = destOrderBook.tree.next(destKey);\n                        _removeOrder(destOrderBook.uids[destKey][0], order.dest, opposite.trader);\n                        _removeOrderFromPriceIndex(destOrderBook, 0, destKey);\n                    } else {\n                        _ledger[user][src].orders[index].filled = opposite.filled;\n                    }\n                    if (order.filled == order.srcAmount || gasleft() < 600000) {\n                        return order.srcAmount.sub(order.filled);\n                    }\n                }\n            }\n            if (order.filled == order.srcAmount || gasleft() < 600000) {\n                return order.srcAmount.sub(order.filled);\n            }\n            if (nextKey > 0)\n                destKey = nextKey;\n            else\n                destKey = destOrderBook.tree.next(destKey);\n        }\n\n        if (\n            (order.src == _ESTTAddress && maxPrice == _minESTTPrice)\n            ||\n            (order.src == _USDTAddress && maxPrice == _ESTTDecimals.mul(_USDTDecimals).div(_minESTTPrice))\n        ) {\n            _match(order, Order(0, address(0), 0, 0, 0), maxPrice);\n        }\n        return order.srcAmount.sub(order.filled);\n    }\n\n    function _insertOrder (MemoryOrder memory order, address src) internal {\n        _lastUid++;\n        Order memory storageOrder = Order(\n            _packUid(_lastUid, src, _msgSender()),\n            order.trader,\n            order.srcAmount,\n            order.destAmount,\n            order.filled\n        );\n        _ledger[order.trader][src].orders.push(storageOrder);\n        uint256 length = _ledger[order.trader][src].orders.length;\n        _ledger[order.trader][src].ids[storageOrder.uid] = length;\n        uint256 price = _getPriceInverted(order);\n        _insertOrderToPriceIndex(_orderBooks[src], storageOrder.uid, price);\n    }\n\n    function _removeOrder (uint256 uid, address src, address user) internal {\n        uint256 index = _ledger[user][src].ids[uid];\n        uint256 length = _ledger[user][src].orders.length;\n        if (index != length) {\n            _ledger[user][src].orders[index.sub(1)] = _ledger[user][src].orders[length.sub(1)];\n            uint256 lastOrderUid = _ledger[user][src].orders[length.sub(1)].uid;\n            _ledger[user][src].ids[lastOrderUid] = index;\n        }\n        _ledger[user][src].orders.pop();\n        delete  _ledger[user][src].ids[uid];\n    }\n\n    function _removeOrderFromOrderBook (uint256 uid, address srcToken, uint256 price) internal {\n        uint256[] storage uids = _orderBooks[srcToken].uids[price];\n        for (uint256 i = 0; i < uids.length; ++i) {\n            if (uids[i] == uid) {\n                _removeOrderFromPriceIndex(_orderBooks[srcToken], i, price);\n                break;\n            }\n        }\n    }\n\n    function _insertOrderToPriceIndex (OrderBook storage orderBook, uint256 uid, uint256 key) internal {\n        if (!orderBook.tree.exists(key)) {\n            orderBook.tree.insert(key);\n        }\n        orderBook.uids[key].push(uid);\n    }\n\n    function _removeOrderFromPriceIndex (OrderBook storage orderBook, uint256 index, uint256 key) internal {\n        orderBook.uids[key][index] = orderBook.uids[key][orderBook.uids[key].length.sub(1)];\n        orderBook.uids[key].pop();\n        if (orderBook.uids[key].length == 0) {\n            orderBook.tree.remove(key);\n            delete orderBook.uids[key];\n        }\n    }\n\n    // TODO remove require\n    function _orderCheck (MemoryOrder memory order) internal view {\n        uint256 price = _getPrice(order);\n        if (order.src == _ESTTAddress) {\n            require(order.dest == _USDTAddress, \"wrong dest\");\n            require(price <= _minESTTPrice, \"ESTT can't be cheaper USDT\");\n        } else if (order.src == _USDTAddress) {\n            require(order.dest == _ESTTAddress, \"wrong dest\");\n            require(price >= _ESTTDecimals.mul(_USDTDecimals).div(_minESTTPrice), \"ESTT can't be cheaper USDT\");\n        } else {\n            revert(\"wrong src\");\n        }\n        require(order.srcAmount > 0, \"wrong src amount\");\n        require(order.destAmount > 0, \"wrong dest amount\");\n        uint256 totalAllowance = _ledger[order.trader][order.src].reservedBalance.add(order.srcAmount);\n        IERC20 ierc20 = IERC20(order.src);\n        require(ierc20.allowance(order.trader, address(this)) >= totalAllowance, \"not enough balance\");\n    }\n\n    function _match (MemoryOrder memory order, Order memory opposite, uint256 price) internal returns (bool, uint256) {\n        uint256 availableOpposite;\n        IERC20 erc20dest = IERC20(order.dest);\n        if (opposite.uid != 0) {\n            availableOpposite = (opposite.srcAmount.sub(opposite.filled)).mul(price).div(_decimals(order.dest));\n        } else {\n            availableOpposite = (erc20dest.balanceOf(address(this))).mul(price).div(_decimals(order.dest));\n        }\n        (uint256 needed, uint256 fee, uint256 neededOpposite, uint256 feeOpposite) = _calcMatch(order, opposite, availableOpposite, price);\n\n        IERC20 erc20src = IERC20(order.src);\n        require(erc20src.allowance(order.trader, address(this)) >= needed.add(fee), \"src not enough balance\");\n        if (opposite.uid != 0 && erc20dest.allowance(opposite.trader, address(this)) < neededOpposite) {\n            return (false, 0);\n        }\n\n        _ledger[order.trader][order.src].reservedBalance = _ledger[order.trader][order.src].reservedBalance.sub(needed.add(fee));\n        if (opposite.uid != 0) {\n            _ledger[opposite.trader][order.dest].reservedBalance = _ledger[opposite.trader][order.dest].reservedBalance.sub(neededOpposite.add(feeOpposite));\n        }\n\n        if (order.src == _ESTTAddress) {\n            if (opposite.uid != 0) {\n                _ESTT.transferFrom(order.trader, opposite.trader, needed);\n                _USDT.transferFrom(opposite.trader, order.trader, neededOpposite);\n            } else {\n                _ESTT.transferFrom(order.trader, address(this), needed);\n                _USDT.transfer(order.trader, neededOpposite);\n            }\n            if (fee > 0) {\n                _ESTT.transferFrom(order.trader, RESERVE_ADDRESS, fee);\n            }\n        } else {\n            if (opposite.uid != 0) {\n                _USDT.transferFrom(order.trader, opposite.trader, needed);\n                _ESTT.transferFrom(opposite.trader, order.trader, neededOpposite);\n            } else {\n                _USDT.transferFrom(order.trader, address(this), needed);\n                _ESTT.transfer(order.trader, neededOpposite);\n            }\n            if (feeOpposite > 0) {\n                _ESTT.transferFrom(opposite.trader, RESERVE_ADDRESS, feeOpposite);\n            }\n        }\n\n        order.filled = order.filled.add(needed.add(fee));\n\n        return (true, neededOpposite.add(feeOpposite));\n    }\n\n    function _calcMatch (MemoryOrder memory order, Order memory opposite, uint256 availableOpposite, uint256 price) internal view returns\n    (\n        uint256 needed,\n        uint256 fee,\n        uint256 neededOpposite,\n        uint256 feeOpposite\n    ) {\n        needed = order.srcAmount.sub(order.filled);\n        uint256 available = needed;\n        if (needed > availableOpposite) {\n            needed = availableOpposite;\n        }\n        neededOpposite = needed.mul(_decimals(order.dest)).div(price);\n        if (order.src == _ESTTAddress && order.trader != address(this)) {\n            fee = needed.mul(_exchangeFee).div(10 ** 18);\n            if (needed.add(fee) > available) {\n                fee = available.mul(_exchangeFee).div(10 ** 18);\n                needed = available.sub(fee);\n                neededOpposite = needed.mul(_decimals(order.dest)).div(price);\n            } else {\n                neededOpposite = needed.mul(_decimals(order.dest)).div(price);\n            }\n        } else if (order.src == _USDTAddress && opposite.uid > 0 && opposite.trader != address(this)) {\n            feeOpposite = neededOpposite.mul(_exchangeFee).div(10 ** 18);\n            availableOpposite = availableOpposite.mul(_decimals(order.dest)).div(price);\n            if (neededOpposite.add(feeOpposite) > availableOpposite) {\n                feeOpposite = availableOpposite.mul(_exchangeFee).div(10 ** 18);\n                neededOpposite = availableOpposite.sub(feeOpposite);\n                needed = neededOpposite.mul(price).div(_decimals(order.dest));\n            } else {\n                needed = neededOpposite.mul(price).div(_decimals(order.dest));\n            }\n        }\n        return (needed, fee, neededOpposite, feeOpposite);\n    }\n\n    function _packUid (uint256 index, address tokenSrc, address userAddress) internal view returns (uint256) {\n        uint8 tradeType = tokenSrc == _ESTTAddress ? ESTT_2_USDT : USDT_2_ESTT;\n        return index << 40 | (uint64(tradeType) << 32) | uint32(userAddress);\n    }\n\n    function _unpackUid (uint256 uid) internal view returns (address, address, uint256) {\n        uint8 tradeType = uint8(uid >> 32);\n        address tokenSrc;\n        if (tradeType == ESTT_2_USDT)\n            tokenSrc = _ESTTAddress;\n        else if (tradeType == USDT_2_ESTT)\n            tokenSrc = _USDTAddress;\n        else\n            revert(\"wrong token type\");\n        address userAddress = _usersAddresses[uint32(uid)];\n        uint256 index = _ledger[userAddress][tokenSrc].ids[uid];\n        // not needed sub has needed require\n        // require(index > 0, \"wrong uid\");\n        return (tokenSrc, userAddress, index.sub(1));\n    }\n\n    function _getPrice (MemoryOrder memory order) internal view returns (uint256) {\n        uint256 decimals = order.src == _ESTTAddress ? _USDTDecimals : _ESTTDecimals;\n        return order.srcAmount.mul(decimals).div(order.destAmount);\n    }\n\n    function _getPriceInverted (MemoryOrder memory order) internal view returns (uint256) {\n        uint256 decimals = order.src == _ESTTAddress ? _ESTTDecimals : _USDTDecimals;\n        return order.destAmount.mul(decimals).div(order.srcAmount);\n    }\n\n    function _decimals (address tokenAddress) internal view returns (uint256) {\n        if (tokenAddress == _ESTTAddress) {\n            return _ESTTDecimals;\n        }\n        return _USDTDecimals;\n    }\n}\n\n// File: contracts/ERC20.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // mapping (address => uint256) private _balances;  // @openzeppelin\n    mapping (address => uint256) internal _balances;    // custom code\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    // function balanceOf(address account) public view override returns (uint256) {         // @openzeppelin\n    function balanceOf(address account) public view override virtual returns (uint256) {    // custom code\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: contracts/ESToken.sol\n\npragma solidity ^0.6.2;\n\n\n\n\n\n\n\ncontract ESToken is ESTokenInterface, Context, ERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    struct Referral {\n        address user;\n        uint256 expIndex;\n    }\n\n    struct ParentRef {\n        address user;\n        uint256 index;\n    }\n\n    address constant private RESERVE_ADDRESS = 0x0000000000000000000000000000000000000001;\n    address private _reserveAddress;\n    address private _exchangeAddress;\n\n    uint256 private _dailyInterest;\n    uint256 private _referralInterest;\n    uint256 private _accrualTimestamp;\n    uint256 private _expIndex;\n    uint256 private _expReferralIndex;\n    uint256 private _holdersCounter;\n\n    mapping (address => uint256) private _holderIndex;\n    mapping (address => ParentRef) private _parentRef;\n    mapping (address => Referral[]) private _referrals;\n\n    modifier onlyExchange () {\n        require(_msgSender() == address(_exchangeAddress), \"caller is not allowed to do some\");\n        _;\n    }\n\n    constructor () public ERC20(\"ESToken\", \"ESTT\") {\n        _setupDecimals(6);\n        _dailyInterest = 300_000_000_000_000; // +0.02%\n        _referralInterest = 150_000_000_000_000; // +0.01%\n        _expIndex = 10 ** 18;\n        _expReferralIndex = 10 ** 18;\n        _accrualTimestamp = block.timestamp;\n    }\n\n    function init(address newExchangeAddress) external onlyOwner {\n        ExchangeInterface exchangeI = ExchangeInterface(newExchangeAddress);\n        require(exchangeI.isExchange(), \"ESToken: newExchangeAddress does not match the exchange\");\n        require(_reserveAddress == address(0), \"ESToken: re-initialization\");\n        _reserveAddress = RESERVE_ADDRESS;\n        _exchangeAddress = newExchangeAddress;\n        _mint(_exchangeAddress, 70_000_000 * 10 ** uint256(decimals()));\n        _mint(_reserveAddress, 25_000_000 * 10 ** uint256(decimals()));\n        _mint(_msgSender(), 5_000_000 * 10 ** uint256(decimals()));\n    }\n\n    function isESToken() pure external override returns (bool) {\n        return true;\n    }\n\n    function setDailyInterest(uint256 newDailyInterest) external onlyOwner {\n        require(newDailyInterest >= 10 ** 18, \"ESToken: negative daily interest\");\n        _dailyInterest = newDailyInterest.sub(10 ** 18);\n    }\n\n    function reserveAddress() external view returns (address) {\n        return _reserveAddress;\n    }\n\n    function exchangeAddress() external view returns (address) {\n        return _exchangeAddress;\n    }\n\n    function dailyInterest() external view returns (uint256) {\n        return _dailyInterest.add(10 ** 18);\n    }\n\n    function setReferralInterest(uint256 newReferralInterest) external onlyOwner {\n        require(newReferralInterest >= 10 ** 18, \"ESToken: negative referral interest\");\n        _referralInterest = newReferralInterest.sub(10 ** 18);\n    }\n\n    function referralInterest() external view returns (uint256) {\n        return _referralInterest.add(10 ** 18);\n    }\n\n    function parentReferral(address user) external view override returns (address) {\n        return _parentRef[user].user;\n    }\n\n    function holdersCounter() external view returns (uint256) {\n        return _holdersCounter;\n    }\n\n    function setParentReferral(address user, address parent, uint256 reward) external override onlyExchange {\n        require(parent != _reserveAddress &&\n                parent != _exchangeAddress &&\n                parent != owner(), \"Wrong referral\");\n        _updateBalance(parent);\n        _parentRef[user].user = parent;\n        _parentRef[user].index = _referrals[parent].length;\n        Referral memory referral = Referral(user, _expReferralIndex);\n        _referrals[parent].push(referral);\n        if (_balances[_reserveAddress] < reward) {\n            reward = _balances[_reserveAddress];\n        }\n        _balances[parent] = _balances[parent].add(reward);\n        _balances[_reserveAddress] = _balances[_reserveAddress].sub(reward);\n    }\n\n    function getMyReferrals() public view returns (address[] memory) {\n        uint256 length = _referrals[_msgSender()].length;\n        address[] memory addresses = new address[](length);\n        for (uint i = 0; i < length; ++i) {\n            addresses[i] = _referrals[_msgSender()][i].user;\n        }\n        return addresses;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return balanceByTime(account, block.timestamp);\n    }\n\n    function balanceByTime(address account, uint256 timestamp) public view returns (uint256) {\n        if (account == _reserveAddress ||\n            account == owner() ||\n            account == _exchangeAddress) {\n            return super.balanceOf(account);\n        }\n        uint256 bonus = 0;\n        for(uint256 i = 0; i < _referrals[account].length; ++i) {\n            uint256 newExpReferralIndex = _calculateInterest(timestamp, _referralInterest, _expReferralIndex);\n            Referral memory referral = _referrals[account][i];\n            if (referral.expIndex < (10 ** 18) || _holderIndex[referral.user] < (10 ** 18)) {\n                continue;\n            }\n            uint256 newBalanceOfPartner = _balances[referral.user].mul(_expIndex).div(_holderIndex[referral.user]);\n            uint256 bonusBalance = newBalanceOfPartner.mul(newExpReferralIndex).div(referral.expIndex);\n            uint256 partnerBonus = bonusBalance.sub(newBalanceOfPartner);\n            bonus = bonus.add(partnerBonus);\n        }\n        if (_balances[account] > 0 && _holderIndex[account] > 0) {\n            uint256 newExpIndex = _calculateInterest(timestamp, _dailyInterest, _expIndex);\n            return _balances[account].mul(newExpIndex).div(_holderIndex[account]).add(bonus); // (balance * newExpIndex / holderIndex) + ref.bonus\n        }\n        return super.balanceOf(account).add(bonus);\n    }\n\n    function accrueInterest() public {\n        _expIndex = _calculateInterest(block.timestamp, _dailyInterest, _expIndex);\n        _expReferralIndex = _calculateInterest(block.timestamp, _referralInterest, _expReferralIndex);\n        _accrualTimestamp = block.timestamp;\n    }\n\n    function _calculateInterest(uint256 timestampNow, uint256 interest, uint256 prevIndex) internal view returns (uint256) {\n        uint256 period = timestampNow.sub(_accrualTimestamp);\n        if (period < 60) {\n            return prevIndex;\n        }\n        uint256 interestFactor = interest.mul(period);\n        uint newExpIndex = (interestFactor.mul(prevIndex).div(10 ** 18).div(86400)).add(prevIndex);\n        return newExpIndex;\n    }\n\n    function _updateBalance(address account) internal {\n        if (account == _reserveAddress ||\n            account == owner() ||\n            account == _exchangeAddress) {\n            return ;\n        }\n        if (_holderIndex[account] > 0) {\n            uint256 newBalance = _balances[account].mul(_expIndex).div(_holderIndex[account]); // balance * expIndex / holderIndex\n            uint256 delta = newBalance.sub(_balances[account]);\n            for(uint256 i = 0; i < _referrals[account].length; ++i) {\n                Referral storage referral = _referrals[account][i];\n                if (referral.expIndex < (10 ** 18) || _holderIndex[referral.user] < (10 ** 18)) {\n                    continue;\n                }\n                uint256 newBalanceOfPartner = _balances[referral.user].mul(_expIndex).div(_holderIndex[referral.user]);\n                uint256 bonusBalance = newBalanceOfPartner.mul(_expReferralIndex).div(referral.expIndex);\n                uint256 partnerBonus = bonusBalance.sub(newBalanceOfPartner);\n                newBalance = newBalance.add(partnerBonus);\n                delta = delta.add(partnerBonus);\n                referral.expIndex = _expReferralIndex;\n            }\n            if (delta != 0 && _balances[_reserveAddress] >= delta) {\n                if (_balances[account] == 0) {\n                    _holdersCounter++;\n                }\n                _balances[account] = newBalance;\n                _balances[_reserveAddress] = _balances[_reserveAddress].sub(delta);\n                if (_parentRef[account].user != address(0)) {\n                    _referrals[_parentRef[account].user][_parentRef[account].index].expIndex = _expReferralIndex;\n                }\n            }\n        }\n        _holderIndex[account] = _expIndex;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\n        accrueInterest();\n        if (from != address(0)) {\n            _updateBalance(from);\n            _updateBalance(to);\n        }\n        if (_balances[from] == amount) {\n            _holdersCounter--;\n        }\n        if (_balances[to] == 0) {\n            _holdersCounter++;\n        }\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}"
    }
  }
}