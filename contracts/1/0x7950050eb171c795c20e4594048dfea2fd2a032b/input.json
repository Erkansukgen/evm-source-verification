{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Degens.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\n    /// @return _receiver - address of who should be sent the royalty payment\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\n        external\n        view\n        returns (address _receiver, uint256 _royaltyAmount);\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\n/// @dev This implementation has the same royalties for each and every tokens\nabstract contract ERC2981ContractWideRoyalties is ERC165, IERC2981Royalties {\n    address private _royaltiesRecipient;\n    uint256 private _royaltiesValue;\n\n    /// @inheritdoc\tERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC2981Royalties).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @dev Sets token royalties\n    /// @param recipient recipient of the royalties\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\n    function _setRoyalties(address recipient, uint256 value) internal {\n        require(value <= 10000, 'ERC2981Royalties: Too high');\n        _royaltiesRecipient = recipient;\n        _royaltiesValue = value;\n    }\n\n    /// @inheritdoc\tIERC2981Royalties\n    function royaltyInfo(uint256, uint256 value)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        return (_royaltiesRecipient, (value * _royaltiesValue) / 10000);\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\n\n\ncontract Degens is ERC721Enumerable, ERC2981ContractWideRoyalties, ReentrancyGuard, Ownable {\n    using Strings for uint256;\n\n    uint256 public constant MINT_COST = 50000000000000000; // 0.05 ETH\n    uint256 public constant MAX_SUPPLY = 10000;\n    uint256 public constant MAX_RESERVE = 150;\n    uint256 public constant MAX_PER_MINT = 20;\n    uint256 public constant ROYALTY_BASIS_PTS = 1000; // 10%\n\n    address public contractDev = 0x2533798d5f1386bbA9101387Ff3342FFFC220E27;\n\n    string public PROVENANCE;\n    string private baseDegenURI;\n    uint256 public tokenOffset = MAX_SUPPLY;\n    bool public mintingActive = false;\n    bool public earlyMintingActive = false;\n\n    mapping(address => uint256) whitelist;\n\n    constructor() ERC721(\"gmdegens\", \"GMD\") Ownable() {\n        _setRoyalties(owner(), ROYALTY_BASIS_PTS);\n\n        // snapshot of mint pass and founders pass holders\n        whitelist[0xff88bD69dc4D42B292B4ACADe8E24A20979C0098] = 2;\n        whitelist[0xfF3aB8989bf275CE128Ca69481bdabbe93055876] = 2;\n        whitelist[0xfDF0eaDE0C4ba947999e7885b60099985347eE7A] = 2;\n        whitelist[0xfa2Ff875d5DED2d6702e3d35678aB9fe674bd68B] = 2;\n        whitelist[0xF8038FD7DF0862faA5708c174b485F519698d628] = 2;\n        whitelist[0xF641e2800a94b49B8b428353ea71aAE85865decE] = 2;\n        whitelist[0xf33f4dF9d5693EC35Be246557E52bA250cF437Dd] = 2;\n        whitelist[0xeba06532a72bec44A1d33130aaa7C45c31e502F6] = 2;\n        whitelist[0xeA3AC159b6a623D503e48E3c1726072f20c73089] = 2;\n        whitelist[0xe8f596d68aEfc6aDdF7E0b4a3A1c5f462F6AF1E0] = 2;\n        whitelist[0xe8514Ba313Fb227Da83103BbcF57ec0eD710a325] = 2;\n        whitelist[0xE5e2a3E8fc49De0F2Fd7b87d6D88daA5A305ead9] = 2;\n        whitelist[0xE53008a668836514B6AC7E4039c788De7850d438] = 2;\n        whitelist[0xE0cD6DbcbAbc6aA967D1Dc318F7526090d47606C] = 2;\n        whitelist[0xDAc4f4356E9F92ed39427bb96A47E6981C7B3375] = 2;\n        whitelist[0xD3b129F1F796f5C26210Eb8f39a938175bDbe215] = 2;\n        whitelist[0xcEfa22191E49d3D501c57c9a831D01a09f7c1112] = 2;\n        whitelist[0xc9fbb3a7869aF25aefA08914021520cd05aF0E1D] = 2;\n        whitelist[0xBDB0Dd845E95d2E24B77D9bEf54d4dF82bAF8335] = 2;\n        whitelist[0xBD9dDf4b73aa454CC6D47E7C504eb73157BCf35D] = 2;\n        whitelist[0xbC6e70CB9b89851E6Cff7cE198a774549f4c0F0C] = 2;\n        whitelist[0xb7D7cE36de85E0E080b1F94Fa7cd8A47378B1b4c] = 2;\n        whitelist[0xB4e69092a6EB310559e50Bb160ae36f7193b6A99] = 2;\n        whitelist[0xB1b18bDE5DF9b447727c985e3942Ea937fb0C430] = 2;\n        whitelist[0xA54E54567c001F3D9f1259665d4E93De8A151A5e] = 2;\n        whitelist[0xa32f008Cb5Ae34a91abe833A64b13E4E58969B76] = 2;\n        whitelist[0x9D9Fa64Bd35F06c9F0e9598a7dF93c31d72D14Ce] = 2;\n        whitelist[0x99e0a9e19775b61b50C690E8F713a588eA3F28bF] = 2;\n        whitelist[0x9996e496a36B42897b44a5b0Df62A376C3390098] = 2;\n        whitelist[0x98938eDFfA707492A6E76420d2F42458CC1AC15B] = 2;\n        whitelist[0x95aF39507c413c12E33ACc34f044d12e5F86f551] = 2;\n        whitelist[0x946eC68B81f439b490b489F645c4D73bC8f9414c] = 2;\n        whitelist[0x92a7BD65c8b2a9c9d98be8eAa92de46d1fbdefaF] = 2;\n        whitelist[0x9260ae742F44b7a2e9472f5C299aa0432B3502FA] = 2;\n        whitelist[0x90ee9AF63F5d1dC23EfEE15f1598e3852165E195] = 2;\n        whitelist[0x906a2C11B033d0799107Ae1eFEDA2bd422133D7d] = 2;\n        whitelist[0x8Fb2A5d8736776291388827E9787F221a1d3633a] = 2;\n        whitelist[0x8cC140E41f064079F921f53A1c36e765DB4B7e59] = 2;\n        whitelist[0x889C97c24be9bBD5Fab464ba89D47f621Fbe019c] = 2;\n        whitelist[0x87b895F37A93E76CF1C27ed68B38d77fEE0f7867] = 2;\n        whitelist[0x8297A5971a05903D4d33453425D1B800730B10e7] = 2;\n        whitelist[0x7EFB9007074BBe3047c607531e77D6eF840D8FD5] = 2;\n        whitelist[0x774363d02e2C8FbBEB5b6B37DAA590317d5C4152] = 2;\n        whitelist[0x7305ce3A245168dDc87c3009F0B4b719BC4519F5] = 2;\n        whitelist[0x723D5453Fc08769cb454B5B95DB106Bf396C73B3] = 2;\n        whitelist[0x6D1fd99F6749C175F72441b04277eC50056A6ABE] = 2;\n        whitelist[0x691b7e59EA6E8569aBC4C2fE6a8bCAe49D802924] = 2;\n        whitelist[0x64211c2B214Ee2543AaA224EAdd9715818f085Ed] = 2;\n        whitelist[0x63E0bD39F6EAd960E2C6317D4540DECaf7ab53bA] = 2;\n        whitelist[0x6325178265892Ab382bf4f2BcF3745D2c4A987e6] = 2;\n        whitelist[0x5b046272cB9fDe317aB73a836546E52B1F2d81F3] = 3;\n        whitelist[0x4f368Dfb630Ba2107e51BABD062657DC7cb6381f] = 2;\n        whitelist[0x4D92A462e97443a72524664fC2300d07c208b4aF] = 2;\n        whitelist[0x4D4e5506C75642E2cB4C9b07CCcE305E71e30c15] = 2;\n        whitelist[0x487d0c7553c8d88500085A805d316eD5b18357f8] = 4;\n        whitelist[0x486843aD8adb101584FCcE56E88a09e6f25D16d1] = 4;\n        whitelist[0x41A88a01987174d49bBc72b6Ef46b58727aDc4d0] = 2;\n        whitelist[0x4115E41D52C6769C4f6D00B9aA6046dF92D41870] = 2;\n        whitelist[0x402112921222090851acbE280bB68b44bfe3eeB2] = 2;\n        whitelist[0x3a86FD7949F1bD3b2Bfb8dA3f5e86cFEDC79e0Fb] = 2;\n        whitelist[0x38D0401941d794D245d41870FcdD9f8Ec61C1352] = 2;\n        whitelist[0x383b8F1B11812E81D78f945ac344CbF9DD329316] = 2;\n        whitelist[0x332552959a4d437F2Eecdce021E650ED1F343E63] = 2;\n        whitelist[0x324Edc2211EF542792588de7A50D9A7E56d95C3a] = 2;\n        whitelist[0x3020d185B7c6dAE2C2248763Cc0EAB2b48BEb743] = 2;\n        whitelist[0x2CdbF64c0327a731b53bDD6ce715c3aD6BA099C7] = 2;\n        whitelist[0x2b8b26ceF820911E18db996396e8053cA1A4459C] = 2;\n        whitelist[0x25eA8dB35eb9F34cC4e3e1e7261096Fe86b006D2] = 2;\n        whitelist[0x24D10De50DCFcB21d9620bE3042Ee70aDF69d1D4] = 2;\n        whitelist[0x229a6A5Da12Ca0d134Fc8AeC58F3359E8eE247b6] = 2;\n        whitelist[0x1b7B45A9dBE2cc3df954bF52D49D5453a357c196] = 2;\n        whitelist[0x121b37caDb25A2e7D0c8389aae256144fE0f89A8] = 2;\n        whitelist[0x1200a40C18804F6B5e01f465D5489E53340d61EC] = 2;\n        whitelist[0x11aE298E74A77ec562A5Ff262eE0586568eb03c5] = 2;\n        whitelist[0x0dC83606A23cA9dd1a161CC7B95764b7E7424093] = 2;\n        whitelist[0x0CB7A06ec845EDCA1AF6DB6b6538C4Ca0942019A] = 2;\n        whitelist[0x05c232CE5BCC9bFDB838B41A7870Aea5E4fA0fA8] = 2;\n        whitelist[0x038c275A365b7bF84fbc5C86156619943DF1c123] = 2;\n        whitelist[0x010edAFA8a3C464413A680a1F6a7115B4eE4c74d] = 2;\n        whitelist[0xF547Ce1247D3F3959794Ca6Ccad99bf56b7CE52c] = 4;\n        whitelist[0xe6Fda5F67ebA9dE2cfb0fB2a0734969C951653be] = 4;\n        whitelist[0xe3E55Fae5B27f1Ec658d3808ecc6137E8F466F1f] = 4;\n        whitelist[0xcB724B38D476cd8e39bA12B1D06c34b8Be0E0B32] = 4;\n        whitelist[0x29D5cea7D511810f3Ff754886B898FcE16A6D8fD] = 4;\n        whitelist[0x17E31bf839acB700e0F584797574A2C1FDe46d0b] = 4;\n        whitelist[0x10b54d8e8E7EA708E5C71915401261F92E03B376] = 4;\n        whitelist[0xEF3feA2aB12C822dc3437bE195A1BFFc67f2AD08] = 6;\n        whitelist[0x230FCac06ae171309ea2E0D826cb021A0F786b81] = 6;\n        whitelist[0xBD9E322303Fa0EE764d8Efb497Ca4b81589A281a] = 10;\n        whitelist[0x0c2DFdDdeEF2deBBE58fEC8cf93D2daaCDBe1c1e] = 2;\n        whitelist[0x48c61D3aB04537448a16F52cF508Bc0dd71316b5] = 2;\n        whitelist[0x3094cf9A360Fb98ca7a9Dc666751DA9C16E45394] = 3;\n        whitelist[0xEcDC1c32E4b0bFf00afF1d8f809bDD8b33A58969] = 2;\n        whitelist[0x46c72258ef3266BD874e391E7A55666A532aeCbA] = 2;\n        whitelist[0x20f3C88d39c03262eFDDAEE16768e7a334Ff2A3d] = 2;\n        whitelist[0xB31999Ca48Bd9EFC065eB3E2676badD21dfa17b6] = 5;\n        whitelist[0x3AaA6A59f89de6419E9392e6F94B57c98573Ae05] = 2;\n        whitelist[0xA76E80209610480aafd8807a20325e7a9030ed55] = 2;\n        whitelist[0x7b5585D844A5af06e274C7D66Ce12A2a3d2469f0] = 2;\n        whitelist[0x6562A7e32a35c479B9044A75D96Ae38a9fe12aB7] = 2;\n        whitelist[0x7309e1582d611D3ef9DBA6FCe709F177240E0fd9] = 2;\n        whitelist[0x2d52538486de12CC3Ce00F60DE3CD84fD75597eE] = 2;\n        whitelist[0x4574F2AEbfa00B9489fad168d2530c1AB0dA94aF] = 2;\n        whitelist[0xDa56B1ae899Fab58cbB0EEDA7D667aF0DcAe5572] = 2;\n        whitelist[0xdc96fd721474C3632D6dd5774280a7E1650a3b00] = 2;\n        whitelist[0xd85Cc97FFC3b8Dc315F983f1bE00D916EF59e2cB] = 2;\n        whitelist[0x00b6852E20Cd924e536eD94Be2140B3728989cFc] = 2;\n        whitelist[0xcA1bCc5AfDcc45E87B1B73AdCCa5863f01C46629] = 5;\n        whitelist[0xe7733E30360B98677DA67F406b23327cA96A4750] = 2;\n        whitelist[0x3Cd9C90E94850BFfC6C1b7f8fF0Cbd151740Ef5b] = 2;\n        whitelist[0x59811762A399b4eCED3248406cE5412f5F2b6cb2] = 3;\n        whitelist[0xB0b8D3345A7276170de955bD8c1c9Bc787d62519] = 2;\n        whitelist[0x3b8b35D37aBC65CcF7C78Bd677241870417c8451] = 2;\n        whitelist[0x52D1c62020208dFF40eaAe4f1C41c51D82AB3A4e] = 2;\n        whitelist[0xB8221D5fb33C317CfBD912b8cE4Bd7C7740fAF88] = 2;\n        whitelist[0x20A32b6266febb861E0771116FB7B4a7dd6014cE] = 2;\n        whitelist[0xBD3fD7b44CA24741Db067ace1decEe9B164e31CA] = 2;\n        whitelist[0xfAcEAA25C46c84F3eE20F979A8bcB6d8deC0Ed78] = 3;\n        whitelist[0x7ad3d35f3D0970AE97D638C5d461E82401344e67] = 3;\n        whitelist[0x46e5a4b4721AD087680dC6c2EAE5E4Aa93F8f848] = 2;\n        whitelist[0x5220CD067677bc7aE6016bd0C8c4eb58B118B77b] = 1;\n        whitelist[0x52D4E9c6b23cFAfA13938034814AcdAB895B6848] = 1;\n        whitelist[0xB6B402de2B7fE014500C7e07dFE1eD5c291FFCa8] = 1;\n        whitelist[0x376a61DC5B30C805089eB027A49F9CA7c21a6c3F] = 1;\n        whitelist[0x0663C5cD5F11DdDE32630EE929ac00f0C3d4dB9F] = 1;\n        whitelist[0x70817f848cC79ACB114F606685E8751943fB02C2] = 1;\n        whitelist[0x95dC53A380D5AbB83438b9308f8219D603543Eed] = 1;\n        whitelist[0x9Da3f811143ED2208085f460754b32788913a788] = 1;\n        whitelist[0x36bBA2955490f46396E87f6DB052e1106dEAAcA1] = 1;\n        whitelist[0xb59C86A4c28bd2663855E02Be15d5a31d1C4eb0b] = 1;\n        whitelist[0xcF1e264B0B8Fa3cd014Cd7d32A81f5b46Bc06250] = 2;\n        whitelist[0x29aC2D2A79Dfc7B29277E328235F572C7E626b9C] = 1;\n        whitelist[0xCCdf62316CA146Ee87AbB2B2c6Fe686A2319466c] = 1;\n        whitelist[0x1E5139c78050D014f05968Dc5c0755dAe958481B] = 1;\n        whitelist[0x5eaF958de68f09E7b18D9dc3e424c01ca9136e3e] = 1;\n        whitelist[0x75321Bc4b5A2aA044C33f1f51e0Ec6e282E91e25] = 1;\n        whitelist[0x60ef47a7A264818797Ea298d045e7Ef8bA6ac16B] = 1;\n        whitelist[0xA7cA01E775Dd42ef73f1F87d08e774a9235d516d] = 1;\n        whitelist[0x8d7c651b9CFfFb23B98c533F11d10ea0BbA8Dd9B] = 2;\n        whitelist[0x8d4dAbA34C92E581F928fCA40e018382f7A0282a] = 1;\n        whitelist[0x54ad9d40414eD047067ae04C6faFc199A5bb90bB] = 1;\n    }\n\n    function mintDegens(uint256 mintCount) public payable nonReentrant {\n        uint256 lastTokenId = super.totalSupply();\n        require(mintingActive, 'minting not enabled yet');\n        require(mintCount <= MAX_PER_MINT, 'max 20 per mint');\n        require(lastTokenId + mintCount <= MAX_SUPPLY, 'sold out');\n        require(MINT_COST * mintCount <= msg.value, 'not enough ETH');\n\n        for (uint256 i = 1; i <= mintCount; i++) {\n            _mintDegen(_msgSender(), lastTokenId + i);\n        }\n    }\n\n    function reserveDegens(uint256 reserveCount) public nonReentrant onlyOwner {\n        uint256 lastTokenId = super.totalSupply();\n        require(lastTokenId + reserveCount <= MAX_RESERVE, 'max reserves reached.');\n\n        for (uint256 i = 1; i <= reserveCount; i++) {\n            _mintDegen(owner(), lastTokenId + i);\n        }\n    }\n\n    function mintDegensFromWhitelist(uint256 mintCount) public nonReentrant {\n        uint256 lastTokenId = super.totalSupply();\n        uint256 freePasses = whitelist[_msgSender()];\n\n        require(earlyMintingActive, 'early minting not enabled yet');\n        require(lastTokenId + mintCount <= MAX_SUPPLY, 'sold out');\n        require(mintCount <= freePasses, 'mintCount exceeds passes for this wallet');\n\n        whitelist[_msgSender()] = freePasses - mintCount;\n\n        for (uint256 i = 1; i <= mintCount; i++) {\n            _mintDegen(_msgSender(), lastTokenId + i);\n        }\n    }\n\n    function _mintDegen(address minter, uint256 tokenId) private {\n        _safeMint(minter, tokenId);\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        uint256 tokenIdOffset = 1 + (tokenId + tokenOffset) % MAX_SUPPLY;\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenIdOffset.toString())) : \"\";\n    }\n\n    function setProvenance(string memory provenance) public onlyOwner {\n        PROVENANCE = provenance;\n    }\n\n    function toggleMinting() public onlyOwner {\n        mintingActive = !mintingActive;\n    }\n\n    function toggleEarlyMinting() public onlyOwner {\n        earlyMintingActive = !earlyMintingActive;\n    }\n\n    function setTokenOffset(uint256 offset) external onlyOwner() {\n        require(tokenOffset == MAX_SUPPLY, 'tokenOffset can only be set once');\n        tokenOffset = offset % MAX_SUPPLY;\n    }\n\n    function setBaseURI(string memory baseURI) external onlyOwner() {\n        baseDegenURI = baseURI;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseDegenURI;\n    }\n\n    function withdraw() public onlyOwner {\n        uint256 balance = address(this).balance;\n        uint256 contractFee = balance / 40; // 2.5%\n\n        // send contractFee to contractDev\n        require(payable(contractDev).send(contractFee), \"failed to send contractFee\");\n\n        // send everything else to owner\n        balance = address(this).balance;\n        require(payable(owner()).send(balance), \"failed to withdraw\");\n    }\n\n    function emergencyWithdraw() public onlyOwner {\n        uint256 balance = address(this).balance;\n        payable(owner()).transfer(balance);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721Enumerable, ERC2981ContractWideRoyalties)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n}\n"}}}