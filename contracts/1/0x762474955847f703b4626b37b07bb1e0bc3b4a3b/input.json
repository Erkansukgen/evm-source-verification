{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"
    },
    "IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\nimport './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "MEGAWEAPON.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\n\r\ncontract WEAPON is Context, IERC20{\r\n\r\n    uint256 private _txLimit;\r\n    uint256 private _limitTime;\r\n    \r\n    bool private _swapping;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public stakingEnabled = false;\r\n\r\n    mapping (address => bool) private _isPool;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _stakedBalances;\r\n    mapping (address => uint256) private _stakeExpireTime;\r\n    mapping (address => uint256) private _stakeBeginTime;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply = 10 * 10**6 * 10**9; \r\n\r\n    string private _name = \"Megaweapon\";\r\n    string private _symbol = \"$WEAPON\";\r\n    uint8 private _decimals = 9;\r\n    uint8 private _buyTax = 10;\r\n    uint8 private _sellTax = 10;\r\n\r\n    address private _lp;\r\n    address payable private _devWallet;\r\n    address payable private _stakingContract;\r\n    address private _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private _pair = address(0);\r\n\r\n    IUniswapV2Router02 private UniV2Router;\r\n\r\n    constructor(address dev) {\r\n        _lp = _msgSender();\r\n        _balances[_lp] = _totalSupply;\r\n        UniV2Router = IUniswapV2Router02(_uniRouter);\r\n        _devWallet = payable(dev);\r\n    }\r\n\r\n    event Stake(address indexed _staker, uint256 amount, uint256 stakeTime, uint256 stakeExpire);\r\n    event Reconcile(address indexed _staker, uint256 amount, bool isLoss);\r\n\r\n\r\n    modifier lockSwap {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return availableBalanceOf(account);\r\n    }\r\n\r\n    function stakedBalanceOf(address account) public view returns (uint256) {\r\n        if (stakingEnabled && _stakeExpireTime[account] > block.timestamp) {\r\n            return _stakedBalances[account];    \r\n        }\r\n        else return 0;        \r\n    }\r\n\r\n    function availableBalanceOf(address account) public view returns (uint256) {\r\n        if (stakingEnabled && _stakeExpireTime[account] > block.timestamp) {\r\n            return _balances[account] - _stakedBalances[account];    \r\n        }\r\n        else return _balances[account];     \r\n    }\r\n\r\n    function isStaked(address account) public view returns (bool) {\r\n        if (stakingEnabled && _stakeExpireTime[account] > block.timestamp && _stakedBalances[account] > 0){\r\n            return true;\r\n        }\r\n        else return false;\r\n    }\r\n\r\n    function getStake(address account) public view returns (uint256, uint256, uint256) {\r\n        if (stakingEnabled && _stakeExpireTime[account] > block.timestamp && _stakedBalances[account] > 0)\r\n            return (_stakedBalances[account], _stakeBeginTime[account], _stakeExpireTime[account]);\r\n        else return (0,0,0);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require (_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: transfer exceeds balance\");\r\n        require(availableBalanceOf(sender) >= amount, \"$WEAPON: transfer exceeds unstaked balance\");\r\n        require(amount > 0, \"$WEAPON: cannot transfer zero\");\r\n\r\n        uint256 taxedAmount = amount;\r\n        uint256 tax = 0;\r\n    \r\n        if (_isPool[sender] == true && recipient != _lp && recipient != _uniRouter) {\r\n            require (block.timestamp > _limitTime || amount <= 50000 * 10**9, \"$WEAPON: max tx limit\");\r\n            require (block.number > _txLimit, \"$WEAPON: trading not enabled\");\r\n            tax = amount * _buyTax / 100;\r\n            taxedAmount = amount - tax;\r\n            _balances[address(this)] += tax;\r\n        }\r\n        if (_isPool[recipient] == true && sender != _lp && sender != _uniRouter){ \r\n            require (block.number > _txLimit, \"$WEAPON: trading not enabled\");\r\n            require (block.timestamp > _limitTime || amount <= 50000 * 10**9, \"$WEAPON: max tx limit\");\r\n            tax = amount * _sellTax / 100;\r\n            taxedAmount = amount - tax;\r\n            _balances[address(this)] += tax;\r\n\r\n            if (_balances[address(this)] > 100 * 10**9 && !_swapping) {\r\n                uint256 _swapAmount = _balances[address(this)];\r\n                if (_swapAmount > amount * 40 / 100) _swapAmount = amount * 40 / 100;\r\n                _tokensToETH(_swapAmount);\r\n            }\r\n        }\r\n    \r\n        _balances[recipient] += taxedAmount;\r\n        _balances[sender] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function stake(uint256 amount, uint256 unstakeTime) external {\r\n        require (stakingEnabled, \"$WEAPON: staking currently not enabled\"); \r\n        require (unstakeTime > (block.timestamp + 86000),\"$WEAPON: minimum stake time 24 hours\"); \r\n        require (unstakeTime >= _stakeExpireTime[_msgSender()], \"$WEAPON: new stake time cannot be shorter\");\r\n        require (availableBalanceOf(_msgSender()) >= amount, \"$WEAPON: stake exceeds available balance\");\r\n        require (amount > 0, \"$WEAPON: cannot stake 0 tokens\");\r\n\r\n        if (_stakeExpireTime[_msgSender()] > block.timestamp) _stakedBalances[_msgSender()] = _stakedBalances[_msgSender()] + amount;\r\n        else _stakedBalances[_msgSender()] = amount;\r\n        _stakeExpireTime[_msgSender()] = unstakeTime;\r\n        _stakeBeginTime[_msgSender()] = block.timestamp;\r\n\r\n        emit Stake(_msgSender(), amount, block.timestamp, unstakeTime);\r\n    }\r\n\r\n    function reconcile(address[] calldata account, uint256[] calldata amount, bool[] calldata isLoss) external {\r\n        require (_msgSender() == _stakingContract, \"$WEAPON: Unauthorized\");\r\n        uint i = 0;\r\n        uint max = account.length;\r\n        while (i < max) {\r\n            if (isLoss[i] == true) {\r\n                if (_stakedBalances[account[i]] > amount[i]) _stakedBalances[account[i]] = _stakedBalances[account[i]] - amount[i];\r\n                else _stakedBalances[account[i]] = 0;\r\n                _balances[account[i]] = _balances[account[i]] - amount[i];\r\n            }\r\n            else { \r\n                _stakedBalances[account[i]] = _stakedBalances[account[i]] + amount[i];\r\n                _balances[account[i]] = _balances[account[i]] + amount[i];\r\n            }\r\n\r\n            emit Reconcile(account[i], amount[i], isLoss[i]);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function mint(uint256 amount, address recipient) external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unauthorized\");\r\n        require (block.timestamp > 1640995199, \"$WEAPON: too soon\");\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n\r\n        emit Transfer(address(0), recipient, amount);\r\n    }\r\n\r\n    function toggleStaking() external {\r\n        require (_msgSender() == _devWallet || _msgSender() == _stakingContract, \"$WEAPON: Unauthorized\");\r\n        require (_stakingContract != address(0), \"$WEAPON: staking contract not set\");\r\n        if (stakingEnabled == true) stakingEnabled = false;\r\n        else stakingEnabled = true;\r\n    }\r\n\r\n    function lockedAndLoaded(uint txLimit) external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unauthorized\");\r\n        require (tradingEnabled == false, \"$WEAPON: already loaded, sucka\");\r\n        tradingEnabled = true;\r\n        _setTxLimit(txLimit, block.number);\r\n    }\r\n\r\n    function setStakingContract(address addr) external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unauthorized\");\r\n        _stakingContract = payable(addr);\r\n    }\r\n\r\n    function getStakingContract() public view returns (address) {\r\n        return _stakingContract;\r\n    }\r\n\r\n    function reduceBuyTax(uint8 newTax) external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unauthorized\");\r\n        require (newTax < _buyTax, \"$WEAPON: new tax must be lower\");\r\n        _buyTax = newTax;\r\n    }\r\n\r\n    function reduceSellTax(uint8 newTax) external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unauthorized\");\r\n        require (newTax < _sellTax, \"$WEAPON: new tax must be lower\");\r\n        _sellTax = newTax;\r\n    }\r\n\r\n    function setPool(address addr) external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unuthorized\");\r\n        _isPool[addr] = true;\r\n    }\r\n    \r\n    function isPool(address addr) public view returns (bool){\r\n        return _isPool[addr];\r\n    }\r\n\r\n    function _setTxLimit(uint256 txLimit, uint256 limitBegin) private {\r\n        _txLimit = limitBegin + txLimit;\r\n        _limitTime = block.timestamp + 1800;\r\n    }\r\n\r\n    function _transferETH(uint256 amount, address payable _to) private {\r\n        (bool sent, bytes memory data) = _to.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function _tokensToETH(uint256 amount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UniV2Router.WETH();\r\n\r\n        _approve(address(this), _uniRouter, amount);\r\n        UniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\r\n\r\n        if (address(this).balance > 0) \r\n        {\r\n            if (stakingEnabled) {\r\n                uint stakingShare = address(this).balance * 20 / 100;\r\n                _transferETH(stakingShare, _stakingContract);\r\n            }\r\n            _transferETH(address(this).balance, _devWallet);\r\n        }\r\n    }\r\n    \r\n    function failsafeTokenSwap(uint256 amount) external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unauthorized\");\r\n        _tokensToETH(amount);\r\n    }\r\n\r\n    function failsafeETHtransfer() external {\r\n        require (_msgSender() == _devWallet, \"$WEAPON: Unauthorized\");\r\n        (bool sent, bytes memory data) = _msgSender().call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}"
    }
  }
}