{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ERC223.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"https://github.com/Dexaran/ERC223-token-standard/blob/development/token/ERC223/IERC223.sol\";\nimport \"https://github.com/Dexaran/ERC223-token-standard/blob/development/token/ERC223/IERC223Recipient.sol\";\nimport \"https://github.com/Dexaran/ERC223-token-standard/blob/development/utils/Address.sol\";\n\n/**\n * @title Reference implementation of the ERC223 standard token.\n */\ncontract ERC223Token is IERC223 {\n\n    string  private _name;\n    string  private _symbol;\n    uint8   private _decimals;\n    uint256 private _totalSupply;\n    \n    mapping(address => uint256) public balances; // List of user balances.\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n     \n    constructor(string memory new_name, string memory new_symbol, uint8 new_decimals, uint256 supply_amount)\n    {\n        _name     = new_name;\n        _symbol   = new_symbol;\n        _decimals = new_decimals;\n        _totalSupply = supply_amount * 10 ** _decimals;\n        balances[msg.sender] = _totalSupply;\n    }\n\n    /**\n     * @dev ERC223 tokens must explicitly return \"erc223\" on standard() function call.\n     */\n    function standard() public pure override returns (string memory)\n    {\n        return \"erc223\";\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view override returns (string memory)\n    {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view override returns (string memory)\n    {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC223} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC223-balanceOf} and {IERC223-transfer}.\n     */\n    function decimals() public view override returns (uint8)\n    {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC223-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    \n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public view override returns (uint256)\n    {\n        return balances[_owner];\n    }\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes calldata _data) public override returns (bool success)\n    {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        // Added due to backwards compatibility reasons .\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        if(Address.isContract(_to)) {\n            IERC223Recipient(_to).tokenReceived(msg.sender, _value, _data);\n        }\n        emit Transfer(msg.sender, _to, _value);\n        emit TransferData(_data);\n        return true;\n    }\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint _value) public override returns (bool success)\n    {\n        bytes memory _empty = hex\"00000000\";\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        if(Address.isContract(_to)) {\n            IERC223Recipient(_to).tokenReceived(msg.sender, _value, _empty);\n        }\n        emit Transfer(msg.sender, _to, _value);\n        emit TransferData(_empty);\n        return true;\n    }\n}\n"
    },
    "https://github.com/Dexaran/ERC223-token-standard/blob/development/token/ERC223/IERC223.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC223 standard token as defined in the EIP.\n */\n\nabstract contract IERC223 {\n    \n    function name()        public view virtual returns (string memory);\n    function symbol()      public view virtual returns (string memory);\n    function standard()    public view virtual returns (string memory);\n    function decimals()    public view virtual returns (uint8);\n    function totalSupply() public view virtual returns (uint256);\n    \n    /**\n     * @dev Returns the balance of the `who` address.\n     */\n    function balanceOf(address who) public virtual view returns (uint);\n        \n    /**\n     * @dev Transfers `value` tokens from `msg.sender` to `to` address\n     * and returns `true` on success.\n     */\n    function transfer(address to, uint value) public virtual returns (bool success);\n        \n    /**\n     * @dev Transfers `value` tokens from `msg.sender` to `to` address with `data` parameter\n     * and returns `true` on success.\n     */\n    function transfer(address to, uint value, bytes calldata data) public virtual returns (bool success);\n     \n     /**\n     * @dev Event that is fired on successful transfer.\n     */\n    event Transfer(address indexed from, address indexed to, uint value);\n    \n     /**\n     * @dev Additional event that is fired on successful transfer and logs transfer metadata,\n     *      this event is implemented to keep Transfer event compatible with ERC20.\n     */\n    event TransferData(bytes data);\n}\n"
    },
    "https://github.com/Dexaran/ERC223-token-standard/blob/development/token/ERC223/IERC223Recipient.sol": {
      "content": "pragma solidity ^0.8.0;\n\n /**\n * @title Contract that will work with ERC223 tokens.\n */\n \nabstract contract IERC223Recipient {\n\n\n struct ERC223TransferInfo\n    {\n        address token_contract;\n        address sender;\n        uint256 value;\n        bytes   data;\n    }\n    \n    ERC223TransferInfo private tkn;\n    \n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenReceived(address _from, uint _value, bytes memory _data) public virtual\n    {\n        /**\n         * @dev Note that inside of the token transaction handler the actual sender of token transfer is accessible via the tkn.sender variable\n         * (analogue of msg.sender for Ether transfers)\n         * \n         * tkn.value - is the amount of transferred tokens\n         * tkn.data  - is the \"metadata\" of token transfer\n         * tkn.token_contract is most likely equal to msg.sender because the token contract typically invokes this function\n        */\n        tkn.token_contract = msg.sender;\n        tkn.sender         = _from;\n        tkn.value          = _value;\n        tkn.data           = _data;\n        \n        // ACTUAL CODE\n    }\n}\n"
    },
    "https://github.com/Dexaran/ERC223-token-standard/blob/development/utils/Address.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return payable(account);\n    }\n}\n"
    }
  }
}