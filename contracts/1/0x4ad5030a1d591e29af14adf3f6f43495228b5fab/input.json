{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "PC.sol": {
      "content": "pragma solidity ^0.5.16;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\t\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\t\t\r\n\t\tuint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\tfunction ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n\t\tuint256 c = add(a,m);\r\n\t\tuint256 d = sub(c,1);\r\n\t\treturn mul(div(d,m),m);\r\n\t}\t\r\n}\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\tbytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\t\r\n\tfunction toPayable(address account) internal pure returns (address payable) {\r\n\t\treturn address(uint160(account));\r\n    }\r\n    \r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ncontract Context {\r\n\tconstructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n\t\treturn msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\tconstructor(string memory name, string memory symbol, uint8 decimals) public {\r\n\t\t_name = name;\r\n\t\t_symbol = symbol;\r\n\t\t_decimals = decimals;\r\n\t}\r\n\r\n\tfunction name() public view returns(string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns(string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns(uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n}\r\n\r\ncontract PC is ERC20Detailed, Context {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\t\r\n\tmapping (address => uint256) private _balances;\r\n\tmapping (address => mapping (address => uint256)) private _allowed;\r\n\t\r\n\tstring constant tokenName = \"Pumpcore\";\r\n\tstring constant tokenSymbol = \"PC\";\r\n\tuint8  constant tokenDecimals = 18;\r\n\tuint256 private _totalSupply = 100 * (10 ** 18);\r\n\tuint256 public basePercent = 5;\r\n\t\r\n\tconstructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n        _mint(msg.sender, _totalSupply);\r\n\t}\t\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n\t\treturn _balances[owner];\r\n\t}\r\n\t\r\n\tfunction transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(_msgSender(), to, value);\r\n        return true;\r\n    }\r\n    \r\n\tfunction allowance(address owner, address spender) public view returns (uint256) {\r\n\t\treturn _allowed[owner][spender];\r\n\t}\r\n\t\r\n\tfunction approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(_msgSender(), spender, value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, _msgSender(), _allowed[from][_msgSender()].sub(value, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\t\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowed[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowed[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \t\r\n\tfunction _transfer(address from, address to, uint256 value) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t\r\n\t\tuint256 tokensToBurn = cut(value);\r\n\t\tuint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\t\t\r\n        _balances[from] = _balances[from].sub(value, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n\t\t_totalSupply = _totalSupply.sub(tokensToBurn);\r\n\t\t\r\n        emit Transfer(from, to, tokensToTransfer);\r\n\t\temit Transfer(from, address(0), tokensToBurn);\r\n    }\t\t\r\n    \r\n\tfunction _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\t\r\n\t\r\n\tfunction _burn(address account, uint256 amount) internal {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\trequire(amount <= _balances[account]);\r\n\t\t_balances[account] = _balances[account].sub(amount);\t\t\r\n\t\t_totalSupply = _totalSupply.sub(amount);\t\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n    \r\n\tfunction burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }  \t\r\n\r\n\tfunction _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n\tfunction cut(uint256 value) public view returns (uint256)  {\r\n\t\tuint256 cutValue = value.mul(basePercent).div(100);\r\n\t\treturn cutValue;\r\n\t}\t\r\n}"
    }
  }
}