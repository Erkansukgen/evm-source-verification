{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"splitter.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ncontract splitter {\r\n    \r\n    address ownerAddress;\r\n    mapping (uint256 => uint256) proportions;\r\n    mapping (uint256 => address payable) addresses;\r\n    \r\n    modifier onlyOwner {\r\n        if (msg.sender == ownerAddress) {\r\n            _;\r\n        }\r\n    }\r\n    \r\n    constructor () public {\r\n        ownerAddress = msg.sender;\r\n        proportions[0] = 30; \r\n        proportions[1] = 20;\r\n        addresses[0] = msg.sender;\r\n        addresses[1] = msg.sender;\r\n        addresses[2] = msg.sender;\r\n    }\r\n    \r\n    function setProportion(uint256 index, uint256 value) public onlyOwner {\r\n        proportions[index] = value;\r\n    }\r\n    \r\n    function setAddress(uint256 index, address payable addr) public onlyOwner {\r\n        addresses[index] = addr;\r\n    }\r\n    \r\n    receive() external payable {\r\n        uint256 lastValue = 100 -(proportions[0]+proportions[1]);\r\n        addresses[0].transfer(msg.value*proportions[0]/100); \r\n        addresses[1].transfer(msg.value*proportions[1]/100);\r\n        addresses[2].transfer(msg.value*lastValue/100);\r\n    }\r\n}"}}}