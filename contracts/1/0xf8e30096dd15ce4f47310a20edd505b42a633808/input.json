{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ConvergentAuction.sol":{"content":"\n// File: openzeppelin-solidity/contracts/utils/EnumerableSet.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\n\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/AccessControl.sol\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/ConvergentAuction.sol\n\n\npragma solidity ^0.6.12;\n\n\n\n\n\ninterface SupportsWhitelisting {\n  function addToWhiteList(address account) external;\n}\n\ncontract ConvergentAuction is AccessControl, SupportsWhitelisting {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    bytes32 private constant WHITELIST = keccak256(\"WHITELIST\"); // whitelist role\n    bytes32 private constant WHITELIST_ADMIN = keccak256(\"WHITELIST_ADMIN\"); // whitelist admin role\n\n    uint256 private constant price_external_multiplier = 100; // price we recieve is multiplied by 100, which allows 2 decimals\n    uint256 private constant price_internal_multiplier = 1;\n    uint256 private constant price_divisor = 100; \n\n    uint256 private constant at_unit = 1_000_000; // unit of auctioned token, 6 decimals\n    uint256 private constant pt_unit = 1_000_000; // unit of payment token, 6 decimals\n\n    uint private constant dayish = 86400; \n    \n    uint256 public min_price; // Minimal price\n    uint256 private max_price; // Maximal price\n    uint256 private constant min_amount = 10 * at_unit;\n    uint256 private constant tokens_for_sale = 211_500 * at_unit;\n\n    // each point allows increase by 0.1% of the original_price\n    uint[5] daily_increase_points = [\n        900,\n        700,\n        500,\n        300,\n        100\n    ];\n\n    address private _owner;\n    uint public _start_time;\n    bool private _threshold_finalized = false;\n    uint private _distributed_count = 0;\n    IERC20 public auctioned_token;\n    IERC20 public payment_token;\n    uint256 public threshold_price;\n    uint256 public threshold_ratio; // execution ration for bids exactly at threshold_price, should be divided by 1000\n\n    struct Bid {\n        address bid_address;\n        uint64 amount;\n        uint16 original_price;\n        uint16 price;\n        uint32 last_update;\n        uint8 day_of_auction;\n        uint16 points_used;\n        bool distributed;\n    }\n    \n    Bid[] private _bids;    \n    mapping (address => uint) private bid_indices; // index in _bids array plus one\n\n    modifier whenAuctionGoing() {\n        require(isInSubmissionPhase() || isInBiddingPhase(), \"auction is not going\");\n        _;\n    }\n\n    modifier whenAuctionEnded() {\n        require(auctionEnded(), \"auction is still on going\");\n        _;\n    }\n\n    modifier isThresholdFinalized() {\n        require(_threshold_finalized == true, \"auction threshold was not finalized yet\");\n        _;\n    }\n\n    event WhitelistAdded(address indexed account);\n    event ThresholdSet(uint256 price, uint256 ratio);\n    event BidCreated(address indexed account, uint256 amount, uint256 price);\n    event BidUpdated(address indexed account, uint256 amount, uint256 price);\n\n    // compute amount of payment tokens corresponding to purchase of amount of auctioned tokens at price\n    // we assume that price was multiplied by price_external_multiplier by the front-end\n    function compute_payment(uint256 amount, uint256 price) internal pure returns (uint256) {\n       return amount.mul(price).mul(price_internal_multiplier).div(price_divisor);\n    }\n\n    constructor(address owner, address wl_admin, uint _min_price, uint start_time, IERC20 a_token, IERC20 p_token) public {\n        // make sure that unit scaling is consistent\n        // for 1 unit of auctioned token and price of 1 (which is scaled by price_external_multiplier) we should get 1 unit of payment unit\n        require(compute_payment(at_unit, price_external_multiplier) == pt_unit, \"units not consistent\");\n        require(start_time >= block.timestamp, \"start time should be in the future time\");\n\n        min_price = _min_price;\n        max_price = _min_price.mul(100);\n        \n        _owner = owner;\n        _setupRole(DEFAULT_ADMIN_ROLE, owner); // owner can change wl admin list via grantRole/revokeRole\n        _setRoleAdmin(WHITELIST, WHITELIST_ADMIN); // accounts with WHITELIST_ADMIN role will be able to add accounts to WHITELIST role\n        _setupRole(WHITELIST_ADMIN, wl_admin); // start with one whitelist admin\n        _start_time = start_time;\n        auctioned_token = a_token;\n        payment_token = p_token;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function isInSubmissionPhase() public view returns (bool) {\n        return (block.timestamp >= _start_time && block.timestamp <= _start_time + (2 * dayish));\n    }\n\n    function isInBiddingPhase() public view returns (bool) {\n        return (block.timestamp > _start_time + (2 * dayish) && block.timestamp <= _start_time + (7 * dayish));\n    }\n\n    function auctionEnded() public view returns (bool) {\n        return block.timestamp > _start_time + (7 * dayish);\n    }\n\n    /**\n     * @dev admin can add a specific address to white list address\n     */\n    function addToWhiteList(address account) external override {\n        // caller must have WHITELIST_ADMIN role\n        grantRole(WHITELIST, account);\n        emit WhitelistAdded(account);\n    }\n    \n    function create_bid(uint64 amount, uint16 price) external whenAuctionGoing {\n        address _sender = _msgSender();\n        // verify that auction token was already fully deposited into the smart contract\n        if (_bids.length == 0) {\n            require(auctioned_token.balanceOf(address(this)) >= tokens_for_sale, 'auction token was not deposited enough');\n        }\n        // only white list address can join the auction\n        require(hasRole(WHITELIST, _sender), \"AccessControl: only white list address can join the auction\");\n        // check bidding submission is still allowed\n        require(isInSubmissionPhase(), \"submission time is over\");\n        // check parameter sanity\n        require(bid_indices[_sender] == 0, \"bidder already exists\");\n        require(price >= min_price && price <= max_price, \"bidding price is out of range\");\n        require(amount >= min_amount, \"too small amount\");\n\n        Bid storage bid = _bids.push();\n        bid.bid_address = _sender;\n        bid.amount = amount;\n        bid.original_price = price;\n        bid.price = price;\n        bid.last_update = uint32(block.timestamp);\n        // the rest of fields are zero-initialized\n        bid_indices[_sender] = _bids.length; // note: starting from 1\n        payment_token.safeTransferFrom(_sender, address(this), compute_payment(amount, price));\n        emit BidCreated(_sender, amount, price);\n    }\n\n    // this function is called only from the client \n    function max_price_increase_allowed(address bidder) external view returns (uint256) {\n        require(bid_indices[bidder] > 0, \"bid does not exist\");\n        Bid storage bid = _bids[bid_indices[bidder] - 1];\n        if (isInBiddingPhase()) {\n            uint8 day_of_auction = uint8((block.timestamp - _start_time) / dayish);\n            uint points_used = 0;\n            uint this_day_increase_points = daily_increase_points[day_of_auction-2];\n            \n            if (bid.day_of_auction == day_of_auction) {\n              points_used = bid.points_used;\n            }\n\n            if (points_used >= this_day_increase_points) {\n              return bid.price;\n            }\n            uint points_usable = this_day_increase_points - points_used - 1; // we remove 1 point to compensate for different rounding\n\n            uint calc_max_price = ((points_usable.mul(bid.original_price)).div(1000)).add(bid.price);\n            \n            if (calc_max_price <= max_price)\n              return calc_max_price;\n            else\n              return max_price;\n        } else {\n          return max_price;\n        }\n\n    }\n    \n    function update_bid(uint64 amount, uint16 price) external whenAuctionGoing {\n        address _sender = _msgSender();\n        require(bid_indices[_sender] > 0, \"bid does not exist\");\n        Bid storage bid = _bids[bid_indices[_sender] - 1];\n        // updating bid can't be more often than once an hour\n        require(block.timestamp - bid.last_update >= (dayish/24), \"updating bid can't be more often than once an hour\");\n        bid.last_update = uint32(block.timestamp);\n        // sanity check\n        require(price <= max_price, \"bidding price is out of range\");\n        require(price >= bid.price, \"new price must be greater or equal to current price\");\n        require(amount >= min_amount, \"too small amount\");\n        \n        uint256 old_collateral = compute_payment(bid.amount, bid.price);\n        uint256 new_collateral = compute_payment(amount, price);\n        require(new_collateral >= old_collateral, \"collateral cannot be decreased\");\n\n        // restrict update amount & price after 2 days of the submission phase\n        if (isInBiddingPhase()) {\n            require(price > bid.price, \"new price must be greater than current price\");\n            require(amount <= bid.amount, \"new amount must be less than or equal to current amount\");\n            uint8 day_of_auction = uint8((block.timestamp - _start_time) / dayish);\n            if (bid.day_of_auction < day_of_auction) { // reset points_used on new day \n                bid.day_of_auction = day_of_auction;\n                bid.points_used = 0;\n            }\n\n            // how many increase points are needed for this price increase?\n            uint points_needed =  uint(price - bid.price).mul(1000).div( bid.original_price );\n            uint points_this_day = daily_increase_points[day_of_auction-2];\n            \n            require(  points_needed.add( bid.points_used ) <=  points_this_day,\n                      \"price is over maximum daily price increment allowance\");\n            bid.points_used = uint16(bid.points_used + points_needed); // overflow is impossible\n        } else if (isInSubmissionPhase()) {\n            // update original_price also\n            bid.original_price = price;\n        }\n\n        // first two days have no restriction on price increase\n        bid.amount = amount;\n        bid.price = price;\n\n        if (new_collateral > old_collateral) {\n            payment_token.safeTransferFrom(_sender, address(this), new_collateral.sub(old_collateral));\n        }\n        emit BidUpdated(_sender, amount, price);\n    }\n\n    /**\n     * @dev get bid detail of the specific address\n     */\n    function getBid(address addr) external view returns (address, uint256, uint256, uint256, uint, uint, uint, bool) {\n        Bid memory bid = _bids[bid_indices[addr] - 1];\n        return (bid.bid_address, \n                bid.amount, \n                bid.original_price, \n                bid.price, \n                bid.last_update, \n                bid.day_of_auction,\n                bid.points_used, \n                bid.distributed);\n    }\n\n    /**\n     * @dev return array of bids (bid_address, amount, price) joining in the auction to calculate threshold price and threshold ratio off-chain\n     */\n    function getBids(uint from, uint count) external view returns (address[] memory, uint256[] memory, uint256[] memory)\n    {\n        uint length = from + count;\n        require(from >= 0 && from < _bids.length && count > 0 && length <= _bids.length, \"index out of range\");\n        address[] memory addresses = new address[](count);\n        uint256[] memory amounts = new uint256[](count);\n        uint256[] memory prices = new uint256[](count);\n        uint j = 0;\n        for (uint i = from; i < length; i++) {\n            Bid storage bid = _bids[i];\n            addresses[j] = bid.bid_address;\n            amounts[j] = bid.amount;\n            prices[j] = bid.price;\n            j++;\n        }\n        return (addresses, amounts, prices);\n    }\n    \n    function getBidsExtra(uint from, uint count) external view\n      returns (uint[] memory original_price, uint[] memory last_update, uint[] memory day_of_auction,\n               uint[] memory points_used, bool[] memory distributed)\n    {\n        uint length = from + count;\n        original_price = new uint[](count);\n        last_update = new uint[](count);\n        day_of_auction = new uint[](count);\n        points_used = new uint[](count);\n        distributed = new bool[](count);\n        \n        require(from >= 0 && from < _bids.length && count > 0 && length <= _bids.length, \"index out of range\");\n        uint j = 0;\n        for (uint i = from; i < length; i++) {\n            Bid storage bid = _bids[i];\n            original_price[j] = bid.original_price;\n            last_update[j] = bid.last_update;\n            day_of_auction[j] = bid.day_of_auction;\n            points_used[j] = bid.points_used;\n            distributed[j] = bid.distributed;\n            j++;\n        }\n    }\n\n    /**\n     * @dev return the total number of bids\n     */\n    function getBidCount() external view returns (uint) {\n        return _bids.length;\n    }\n\n    /**\n     * @dev contract owner can set temporarily current threshold price and ratio.\n     * Do not allow to reset threshold price and ratio when the auction already ended.\n     */\n    function setThreshold(uint256 price, uint256 ratio) external onlyOwner whenAuctionEnded {\n        require(_threshold_finalized == false, \"threshold already finalized\");\n        require(price >= min_price && price <= max_price, 'threshold price is out of range');\n        require(ratio >= 0 && ratio <= 1000, 'threshold ratio is out of range');\n        require(_distributed_count == 0); // if we started \"distributing\" before setThreshold via returnCollateral, the auction is considered failed, and cannot be finalized.\n        threshold_price = price;\n        threshold_ratio = ratio;\n        _threshold_finalized = true;\n        emit ThresholdSet(price, ratio);\n    }\n\n    function distributeTokens(address addr) public isThresholdFinalized {\n        require(bid_indices[addr] > 0);\n        Bid storage bid = _bids[bid_indices[addr] - 1];\n        require(bid.distributed == false);\n        bid.distributed = true;\n        _distributed_count++;\n        if (bid.price >= threshold_price) {\n            uint256 b_amount = bid.amount;\n            if (bid.price == threshold_price && threshold_ratio != 1000) {\n                // reduce bought amount using ratio\n                b_amount = b_amount.mul(threshold_ratio).div(1000);\n            }\n            \n            uint256 unused_collateral = compute_payment(bid.amount, bid.price).sub(compute_payment(b_amount, threshold_price));\n            if (unused_collateral > 0) {\n                payment_token.safeTransfer(addr, unused_collateral);\n            }\n            auctioned_token.safeTransfer(addr, b_amount);\n        } else {\n            // bid haven't won, just return the collateral\n            payment_token.safeTransfer(addr, compute_payment(bid.amount, bid.price));\n        }\n    }\n\n    function distributeTokensMulti(uint from, uint count) external isThresholdFinalized {\n        for (uint i = from; i < from + count; i++) {\n            Bid storage bid = _bids[i];\n            \n            address addr = bid.bid_address;\n            if (addr != address(0x0) && !bid.distributed)\n              distributeTokens(addr);\n       }\n    }\n\n    function returnCollateral(address addr) external whenAuctionEnded {\n        require(block.timestamp > _start_time + (10 * dayish), \"funds are still locked for auction\");\n        require(_threshold_finalized == false, \"auction threshold was already set to proceed\");\n        require(bid_indices[addr] > 0);\n        Bid storage bid = _bids[bid_indices[addr] - 1];\n        require(bid.distributed == false);\n        bid.distributed = true;\n        _distributed_count++;\n        payment_token.safeTransfer(addr, compute_payment(bid.amount, bid.price));\n    }\n\n    /**\n     * @dev owner should be able to withdraw proceedings\n     */\n    function withdraw(address addr) external onlyOwner whenAuctionEnded {\n        require(_distributed_count >= _bids.length, \"still not fully distribute token for the bidders\");\n        payment_token.safeTransfer(addr, payment_token.balanceOf(address(this)));\n        auctioned_token.safeTransfer(addr, auctioned_token.balanceOf(address(this)));\n    }\n}\n"}}}