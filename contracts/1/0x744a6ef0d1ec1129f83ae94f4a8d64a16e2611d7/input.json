{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ForwardUniswapSender.sol": {
      "content": "pragma solidity ^0.8.1;\n\nimport \"https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\nimport \"https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\";\n\ninterface GasToken {\n    function freeUpTo(uint256 value) external;\n}\n\ninterface WETHToken {\n    function withdraw(uint wad) external;\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract ForwardUniswapSenderV3 {\n    address public immutable owner;\n    GasToken constant public CHI = GasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n    WETHToken constant public WETH = WETHToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    using SafeMath for uint;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    //\n    //\n    // Receive and Fallback Functions\n    //\n    //\n\n    fallback () payable external {}\n    receive () payable external {}\n\n    //\n    //\n    // Modifiers\n    //\n    //\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier discountCHI {\n        _;\n        CHI.freeUpTo(3);\n   }\n\n   modifier tipMiner {\n       _;\n       if (msg.value > 0) {\n            payable(block.coinbase).transfer(msg.value);\n        }\n   }\n\n    ///\n    ///\n    /// Smart Contract Withdrawal Functions\n    ///\n    ///\n\n\n    // Transfer a list of coins (complete balance) to wallet\n    function transferListAllTokensToWallet(address [] memory _addresses) external onlyOwner {\n        uint arrayLength = _addresses.length;\n        for (uint256 i = 0; i < arrayLength; i++){\n            IERC20 token = IERC20(_addresses[i]);\n            uint coinPosition = token.balanceOf(address(this));\n            TransferHelper.safeTransfer(_addresses[i], owner, coinPosition);\n        }\n    }\n\n\n    // Select a certain amount to transfer out\n    function transferTokensToWallet(address _token, uint256 _amount) external onlyOwner {\n        TransferHelper.safeTransfer(_token, owner, _amount);\n    }\n\n    // Generic function to withdraw eth from the smart Contract\n    function withdrawETH() external payable onlyOwner {\n        uint256 balanceETH = address(this).balance;\n        WETH.withdraw(balanceETH);\n        payable(owner).transfer(balanceETH);\n    }\n\n    // Convert Smart Contract WETH to ETH and send it to the owner\n    function convertWETHToETHAndTransferToWallet (uint256 _amount) external payable onlyOwner {\n        WETH.withdraw(_amount);\n        payable(owner).transfer(_amount);\n    }\n\n    // Buy ETH and send to owner\n    function buyETHAndTransferToWallet(\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address _inputToken,\n        address _outputToken,\n        address _pair\n    ) external payable onlyOwner {\n\n        // Normal Swap Function\n        uint[] memory amounts = _getAmountsOut(_pair, _amountIn, _inputToken, _outputToken);\n        require(amounts[1] >= _amountOutMin, 'amounts[1] < amountOutMin');\n        TransferHelper.safeTransfer(_inputToken, _pair, amounts[0]);\n        _swap(amounts, _inputToken, _outputToken, address(this), _pair);\n\n        // Unwrap WETH and send to wallet\n        WETH.withdraw(amounts[1]);  // Unwrap the WETH\n        payable(owner).transfer(amounts[1]);  // Send it to owner\n    }\n\n    //\n    //\n    // Swap functions\n    //\n    //\n\n    // Current generic swap function\n    function openForwardPosition1_v3H(\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address _inputToken,\n        address _outputToken,\n        address _pair\n    ) external payable onlyOwner {\n        uint[] memory amounts = _getAmountsOut(_pair, _amountIn, _inputToken, _outputToken);\n        require(amounts[1] >= _amountOutMin, 'amounts[1] < amountOutMin');\n        TransferHelper.safeTransfer(_inputToken, _pair, amounts[0]);\n        _swap(amounts, _inputToken, _outputToken, address(this), _pair);\n    }\n\n    // Chi version of the swap\n    function openForwardPositionChi__kx(\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address _inputToken,\n        address _outputToken,\n        address _pair\n    ) external payable onlyOwner discountCHI {\n        uint[] memory amounts = _getAmountsOut(_pair, _amountIn, _inputToken, _outputToken);\n        require(amounts[1] >= _amountOutMin, 'amounts[1] < amountOutMin');\n        TransferHelper.safeTransfer(_inputToken, _pair, amounts[0]);\n        _swap(amounts, _inputToken, _outputToken, address(this), _pair);\n    }\n\n    // Close our whole balance in a certain coin\n    function closeForwardPosition_w64(\n        address _pair,\n        address _inputToken,\n        address _outputToken,\n        uint256 _amountOutMin\n    ) external payable onlyOwner tipMiner {\n        uint coinPositionMinusDust = IERC20(_inputToken).balanceOf(address(this)) - 1;\n        uint[] memory amounts = _getAmountsOut(_pair, coinPositionMinusDust, _inputToken, _outputToken);\n        require(amounts[1] >= _amountOutMin, 'amounts[1] < amountOutMin');\n        TransferHelper.safeTransfer(_inputToken, _pair, amounts[0]);\n        _swap(amounts, _inputToken, _outputToken, address(this), _pair);\n    }\n\n    // Chi version of the close\n    function closeForwardPositionChi_9N4(\n        address _pair,\n        address _inputToken,\n        address _outputToken,\n        uint256 _amountOutMin\n    ) external payable onlyOwner tipMiner discountCHI {\n        uint coinPositionMinusDust = IERC20(_inputToken).balanceOf(address(this)) - 1;\n        uint[] memory amounts = _getAmountsOut(_pair, coinPositionMinusDust, _inputToken, _outputToken);\n        require(amounts[1] >= _amountOutMin, 'amounts[1] < amountOutMin');\n        TransferHelper.safeTransfer(_inputToken, _pair, amounts[0]);\n        _swap(amounts, _inputToken, _outputToken, address(this), _pair);\n    }\n\n\n    //\n    //\n    // Private functions\n    //\n    //\n\n\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint[] memory amounts, address input, address output, address to, address pair) internal {\n        (address token0,) = _sortTokens(input, output);\n        uint amountOut = amounts[1];\n        (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n        IUniswapV2Pair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n\n\n    function _computeAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _getAmountsOut(address pair, uint amountIn, address inputToken, address outputToken) internal view returns (uint[] memory amounts) {\n        amounts = new uint[](2);\n        amounts[0] = amountIn;\n        (uint reserveIn, uint reserveOut) = _computeReserves(pair, inputToken, outputToken);\n        amounts[1] = _computeAmountOut(amounts[0], reserveIn, reserveOut);\n    }\n\n    function _sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n\n    function _computeReserves(address pair, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = _sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n}\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    }
  }
}