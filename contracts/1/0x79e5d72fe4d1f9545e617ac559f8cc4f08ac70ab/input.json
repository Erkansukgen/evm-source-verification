{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "buy1pooleth (2).sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n    \n    // 0x74825DbC8BF76CC4e9494d0ecB210f676Efa001D - DAI/ETH Testnet\n    // 0x773616E4d11A78F511299002da57A0a94577F1f4 - DAI/ETH Mainnet\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Ownable  {\n    address payable public _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ()  {\n        _owner = payable(msg.sender);\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ninterface Token {\n    function transfer(address to, uint256 value) external returns (bool);\n\n\n    function balanceOf(address who) external view returns (uint256);\n\n}\n\n\ncontract Buy_1Pool_Token is Ownable{\n    \n    using SafeMath for uint;\n\n    address public tokenAddr;\n    uint256 private bnbAmount;\n    uint256 public tokenPriceEth; \n    uint256 public tokenDecimal = 18;\n    uint256 public bnbDecimal = 18;\n    uint256 public startedAt;\n    uint256 public endAt;\n    \n    AggregatorV3Interface internal priceFeed;\n\n\n    event TokenTransfer(address beneficiary, uint amount);\n    \n    mapping (address => uint256) public balances;\n    mapping(address => uint256) public tokenExchanged;\n\n    constructor(address _tokenAddr, uint256 _startDate, uint256 _endDate)  {\n        startedAt = _startDate;\n        endAt = _endDate;\n        tokenAddr = _tokenAddr;\n        priceFeed = AggregatorV3Interface(0x773616E4d11A78F511299002da57A0a94577F1f4);\n\n    }\n    \n    \n    \n    receive() payable external {\n        ExchangeBNBforToken(msg.sender, msg.value);\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\n    }\n    \n    function getLatestPrice() public view returns (uint256) {\n        (\n            , \n            int price,\n            ,\n            ,\n        ) = priceFeed.latestRoundData();\n        return uint256(price);\n    }\n    \n    function ExchangeBNBforToken(address _addr, uint256 _amount) private {\n        uint256 amount = _amount;\n        address userAdd = _addr;\n        require(block.timestamp >= startedAt, \"ICO Not started\");\n        require(block.timestamp < endAt, \"ICO Ended\");\n        \n        tokenPriceEth = getLatestPrice();\n        \n        bnbAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceEth)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\n        require(Token(tokenAddr).balanceOf(address(this)) >= bnbAmount, \"There is low token balance in contract\");\n        \n        require(Token(tokenAddr).transfer(userAdd, bnbAmount));\n        emit TokenTransfer(userAdd, bnbAmount);\n        tokenExchanged[msg.sender] = tokenExchanged[msg.sender].add(bnbAmount);\n        _owner.transfer(amount);\n    }\n    \n    function ExchangeBNBforTokenMannual() public payable {\n        uint256 amount = msg.value;\n        address userAdd = msg.sender;\n        require(block.timestamp >= startedAt, \"ICO Not started\");\n        require(block.timestamp < endAt, \"ICO Ended\");\n        \n        tokenPriceEth = getLatestPrice();\n        \n        bnbAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceEth)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\n        require(Token(tokenAddr).balanceOf(address(this)) >= bnbAmount, \"There is low token balance in contract\");\n        \n        require(Token(tokenAddr).transfer(userAdd, bnbAmount));\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\n        emit TokenTransfer(userAdd, bnbAmount);\n        tokenExchanged[msg.sender] = tokenExchanged[msg.sender].add(bnbAmount);\n        _owner.transfer(amount);\n        \n    }\n    \n\n    function updateTokenDecimal(uint256 newDecimal) public onlyOwner {\n        tokenDecimal = newDecimal;\n    }\n    \n    function updateTokenAddress(address newTokenAddr) public onlyOwner {\n        tokenAddr = newTokenAddr;\n    }\n\n    function withdrawTokens(address beneficiary) public onlyOwner {\n        require(Token(tokenAddr).transfer(beneficiary, Token(tokenAddr).balanceOf(address(this))));\n    }\n    \n    function changeStartDate(uint256 _startedAt) public onlyOwner {\n        startedAt = _startedAt;\n    }\n     \n    function changeEndDate(uint256 _endAt) public onlyOwner {\n        endAt = _endAt;\n    }\n\n\n    function withdrawCrypto(address payable beneficiary) public onlyOwner {\n        beneficiary.transfer(address(this).balance);\n    }\n    function tokenBalance() public view returns (uint256){\n        return Token(tokenAddr).balanceOf(address(this));\n    }\n    function bnbBalance() public view returns (uint256){\n        return address(this).balance;\n    }\n}\n"
    }
  }
}