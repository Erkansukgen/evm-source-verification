{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/mvp_contract.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-12-09\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\npragma solidity ^0.7.5;\n\n\n///@title Simple ownable ether fund\n///@author iBerGroup\ncontract EtherFund {\n    // Use this lib for simple overflow control\n    using SafeMath for uint256;\n    \n    ////////////////////////////////////\n    // State variables               ///\n    ////////////////////////////////////\n    address public owner; // Fund owner - can use transferFrom\n    \n    /// @dev Funders balance records are stored in this mapping\n    /// @dev The compiler automatically creates getter functions \n    /// @dev for all public state variables. So you can use\n    /// @dev `balanceOf(address)` call for get any funder balance\n    mapping(address => uint256) public balanceOf; \n    \n    ////////////////////////////////////\n    // Events   (for use in frontend) //\n    ////////////////////////////////////\n    event Deposit(address founder, uint256 amount);\n    event Withdraw(address funder, uint256 amount);\n    \n    /// @dev Execute once at deploy time\n    constructor ()  {\n        // Owner is deploer address\n        owner = msg.sender;\n    }\n    \n    /// @dev Solidity special way receiver ether\n    /// @dev see https://docs.soliditylang.org/en/v0.7.4/contracts.html?highlight=receive%20ether#receive-ether-function\n    receive () external payable {\n        _deposit(msg.sender, msg.value);\n    }\n    \n    /// @notice Use this function to deposit your ether in fund;\n    /// @dev same behavior as receive()\n    function deposit() external payable {\n        _deposit(msg.sender, msg.value);\n    }\n    \n    /// @notice Use this function for withdraw your funds\n    function withdraw(uint256 _amount) external returns (bool success) {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount, \"Withdraw amount exceeds balance!\");\n        payable(address(msg.sender)).transfer(_amount);\n        emit Withdraw(msg.sender, _amount);\n        return true;\n    }\n    \n    /// @notice Simple transfer caller(!!!) amount to recipient inside fund\n    function transfer(address _recipient, uint256 _amount) external returns (bool success) {\n        _transfer(msg.sender, _recipient, _amount);\n        return true;\n    } \n    \n    /// @dev Same as transfer but can change any funder balance. For fund owner only!!!\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external {\n        require(msg.sender == owner, \"Only fund owner can do this!\");\n        _transfer(_sender, _recipient, _amount);\n    }\n    \n    /// @dev internal low level function for deposit funds\n    function _deposit(address _funder, uint256 _amount) internal {\n        balanceOf[_funder] = balanceOf[_funder].add(_amount);\n        emit Deposit(_funder, _amount);\n    }\n    \n\n    /// @dev internal low level function for transfer functionality with \n    /// @dev balance control\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal  {\n        require(_sender != address(0), \"Transfer from the zero address\");\n        require(_recipient != address(0), \"Transfer to the zero address\");\n\n        balanceOf[_sender] = balanceOf[_sender].sub(_amount, \"Transfer amount exceeds balance\");\n        balanceOf[_recipient] = balanceOf[_recipient].add(_amount);\n    }\n    \n    /// @dev Returns smart contract balance\n    function getFundBalance() public view returns (uint256 fund) {\n        return address(this).balance;\n    }\n       \n    \n}"
    }
  }
}