{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Bitrewards.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    \r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Bitrewards is ERC20Interface{\r\n    string public name = \"BitRewards\";\r\n    string public symbol = \"XBIT\";\r\n    uint public decimals = 8;\r\n    \r\n    uint public supply;\r\n    address public founder;\r\n    \r\n    mapping(address => uint) public balances;\r\n    \r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    //allowed[0x1111....][0x22222...] = 100;\r\n    \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n\r\n    constructor() public{\r\n        supply = 10800000000000000;\r\n        founder = msg.sender;\r\n        balances[founder] = supply;\r\n    }\r\n    \r\n    \r\n    function allowance(address tokenOwner, address spender) view public returns(uint){\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    \r\n    function approve(address spender, uint tokens) public returns(bool){\r\n        require(balances[msg.sender] >= tokens);\r\n        require(tokens > 0);\r\n        \r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokens) public returns(bool){\r\n        require(allowed[from][to] >= tokens);\r\n        require(balances[from] >= tokens);\r\n        \r\n        balances[from] -= tokens;\r\n        balances[to] += tokens;\r\n        \r\n        \r\n        allowed[from][to] -= tokens;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint){\r\n        return supply;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint balance){\r\n         return balances[tokenOwner];\r\n     }\r\n     \r\n     \r\n    function transfer(address to, uint tokens) public returns (bool success){\r\n         require(balances[msg.sender] >= tokens && tokens > 0);\r\n         \r\n         balances[to] += tokens;\r\n         balances[msg.sender] -= tokens;\r\n         emit Transfer(msg.sender, to, tokens);\r\n         return true;\r\n     }\r\n    \r\n}"}}}