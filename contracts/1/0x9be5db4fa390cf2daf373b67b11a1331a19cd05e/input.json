{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ivory.sol": {
      "content": "pragma solidity 0.6.6;\r\n\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// https://docs.balancer.finance/smart-contracts/interfaces\r\ninterface BPool {\r\n\r\n    function isPublicSwap() external view returns (bool);\r\n    function isFinalized() external view returns (bool);\r\n    function isBound(address t) external view returns (bool);\r\n    function getNumTokens() external view returns (uint);\r\n    function getCurrentTokens() external view returns (address[] memory tokens);\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n    function getDenormalizedWeight(address token) external view returns (uint);\r\n    function getTotalDenormalizedWeight() external view returns (uint);\r\n    function getNormalizedWeight(address token) external view returns (uint);\r\n    function getBalance(address token) external view returns (uint);\r\n    function getSwapFee() external view returns (uint);\r\n    function getController() external view returns (address);\r\n\r\n    function setSwapFee(uint swapFee) external;\r\n    function setController(address manager) external;\r\n    function setPublicSwap(bool public_) external;\r\n    function finalize() external;\r\n    function bind(address token, uint balance, uint denorm) external;\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n    function unbind(address token) external;\r\n    function gulp(address token) external;\r\n\r\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\r\n\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;   \r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint maxAmountIn,\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n\r\n    function joinswapPoolAmountOut(\r\n        address tokenIn,\r\n        uint poolAmountOut,\r\n        uint maxAmountIn\r\n    ) external returns (uint tokenAmountIn);\r\n\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint poolAmountIn,\r\n        uint minAmountOut\r\n    ) external returns (uint tokenAmountOut);\r\n\r\n    function exitswapExternAmountOut(\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPoolAmountIn\r\n    ) external returns (uint poolAmountIn);\r\n\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function allowance(address src, address dst) external view returns (uint);\r\n\r\n    function approve(address dst, uint amt) external returns (bool);\r\n    function transfer(address dst, uint amt) external returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint amt\r\n    ) external returns (bool);\r\n\r\n    function calcSpotPrice(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint swapFee\r\n    ) external pure returns (uint spotPrice);\r\n\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n\r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountIn);\r\n\r\n    function calcPoolOutGivenSingleIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint poolAmountOut);\r\n\r\n    function calcSingleInGivenPoolOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountIn);\r\n\r\n    function calcSingleOutGivenPoolIn(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountIn,\r\n        uint swapFee\r\n    ) external pure returns (uint tokenAmountOut);\r\n\r\n    function calcPoolInGivenSingleOut(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    ) external pure returns (uint poolAmountIn);\r\n\r\n}\r\n\r\n// https://uniswap.org/docs/v2/smart-contracts/router02/#interface\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n    function deposit() external payable;\r\n}\r\n\r\n\r\nabstract contract UniswapFlashSwapper {\r\n\r\n    enum SwapType {SimpleLoan, SimpleSwap, TriangularSwap}\r\n\r\n    IUniswapV2Factory constant UniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    address constant ETH = address(0);\r\n\r\n    // Only the `permissionedPairAddress` may call the `uniswapV2Call` function\r\n    address permissionedPairAddress = address(1);\r\n\r\n    address WETH;\r\n\r\n    // _DAI could be something else, like MKR, consider naming here.\r\n    constructor(address _WETH) public {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    // Fallback must be payable\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n\r\n    // STEP #2\r\n\r\n    // @notice Flash-borrows _amount of _tokenBorrow from a Uniswap V2 pair and repays using _tokenPay\r\n    // @param _tokenBorrow Address of token to flash borrow (0x0 = ETH, don't use this).\r\n    // @param _amount Amount of _tokenBorrow to temporarily borrow.\r\n    // @param _tokenPay Address of the token to repay (0x0 = ETH, don't use this).\r\n    function startSwap(address _tokenBorrow, uint256 _amount, address _tokenPay, address _balancerPool, uint _maxPrice) internal {\r\n        \r\n        require(_tokenBorrow != ETH && _tokenPay != ETH);\r\n        require(_tokenBorrow == WETH || _tokenPay == WETH);\r\n        require(_tokenBorrow != _tokenPay);\r\n\r\n        // Initiate flash borrow.\r\n        simpleFlashSwap(\r\n            _tokenBorrow,\r\n            _amount,\r\n            _tokenPay,\r\n            _balancerPool,\r\n            _maxPrice\r\n        );\r\n        \r\n        return;\r\n\r\n    }\r\n\r\n    // STEP #3\r\n    \r\n    // @dev Initiate flash borrow.\r\n    function simpleFlashSwap(address _tokenBorrow, uint _amount, address _tokenPay, address _balancerPool, uint _maxPrice) private {\r\n        \r\n        permissionedPairAddress = UniswapV2Factory.getPair(_tokenBorrow, _tokenPay);\r\n        address pairAddress = permissionedPairAddress;\r\n        \r\n        require(pairAddress != address(0), \"Requested pair is not available.\");\r\n        \r\n        address token0 = IUniswapV2Pair(pairAddress).token0();\r\n        address token1 = IUniswapV2Pair(pairAddress).token1();\r\n        \r\n        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        \r\n        bytes memory data = abi.encode(\r\n            _tokenBorrow,\r\n            _amount,\r\n            _tokenPay,\r\n            _balancerPool,\r\n            _maxPrice\r\n        );\r\n        \r\n        IUniswapV2Pair(pairAddress).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n\r\n    // STEP #4\r\n    \r\n    // @notice Function is called by the Uniswap V2 pair's `swap` function\r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\r\n        \r\n        // Access control.\r\n        require(msg.sender == permissionedPairAddress, \"Only permissioned UniswapV2 pair can call this function.\");\r\n        require(_sender == address(this), \"Only BaseSwapper may initiate prior function.\");\r\n\r\n        // Decode data.\r\n        (\r\n            address _tokenBorrow,\r\n            uint _amount,\r\n            address _tokenPay,\r\n            address _balancerPool,\r\n            uint _maxPrice\r\n        ) = abi.decode(_data, (address, uint, address, address, uint));\r\n\r\n        simpleFlashSwapExecute(_tokenBorrow, _amount, _tokenPay, msg.sender, _balancerPool, _maxPrice);\r\n        \r\n        return;\r\n    }\r\n\r\n\r\n\r\n    // @notice Executed after `simpleFlashSwap` does flash-borrow.\r\n    // @dev When this code executes, this contract owns _amount of _tokenBorrow.\r\n    function simpleFlashSwapExecute(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        address _pairAddress,\r\n        address _balancerPool,\r\n        uint _maxPrice\r\n    ) private {\r\n        \r\n        // Fetch amount of _tokenPay that needs to be repaid.\r\n        address pairAddress = permissionedPairAddress;\r\n        uint pairBalanceTokenBorrow = IERC20(_tokenBorrow).balanceOf(pairAddress);\r\n        uint pairBalanceTokenPay = IERC20(_tokenPay).balanceOf(pairAddress);\r\n        uint amountToRepay = ((1000 * pairBalanceTokenPay * _amount) / (997 * pairBalanceTokenBorrow)) + 1;\r\n\r\n        // Arbitrage logic happens here.\r\n        execute(_tokenBorrow, _amount, _tokenPay, amountToRepay, _balancerPool, _maxPrice);\r\n\r\n        IERC20(_tokenPay).transfer(_pairAddress, amountToRepay);\r\n    }\r\n\r\n    // @notice This is where the user's custom logic goes\r\n    // @dev When this function executes, this contract will hold _amount of _tokenBorrow\r\n    // @dev It is important that, by the end of the execution of this function, this contract holds the necessary\r\n    //     amount of the original _tokenPay needed to pay back the flash-loan.\r\n    // @dev Paying back the flash-loan happens automatically by the calling function -- do not pay back the loan in this function\r\n    function execute(address _tokenBorrow, uint _amount, address _tokenPay, uint _amountToRepay, address _balancerPool, uint _maxPrice) virtual internal;\r\n\r\n}\r\n\r\ncontract BaseSwapper is UniswapFlashSwapper {\r\n\r\n    uint public latestAmountOut;\r\n    uint public latestPriceAfter;\r\n\r\n    constructor(address _WETH) public UniswapFlashSwapper(_WETH) {}\r\n\r\n    // STEP #1\r\n    \r\n    // @notice Flash-borrows _amount of _tokenBorrow from a Uniswap V2 pair and repays using _tokenPay\r\n    // @param _tokenBorrow Address of token to flash borrow (0x0 = ETH, don't use this).\r\n    // @param _amount Amount of _tokenBorrow to temporarily borrow.\r\n    // @param _tokenPay Address of the token to repay (0x0 = ETH, don't use this).\r\n    function flashSwap(address _tokenBorrow, uint256 _amount, address _tokenPay, address _balancerPool, uint _maxPrice) external {\r\n        \r\n        // TODO: Confirm exchange rate on Balancer\r\n        // (optional, next version)\r\n        \r\n        // TODO: Confirm exchange rate on Uniswap\r\n        // (optional, next version)\r\n        \r\n        startSwap(_tokenBorrow, _amount, _tokenPay, _balancerPool, _maxPrice);\r\n\r\n        // TODO: Transfer gains to another wallet.\r\n    }\r\n\r\n\r\n    // @notice This is where the user's custom logic goes\r\n    // @dev When this function executes, this contract will hold _amount of _tokenBorrow.\r\n    // @dev This contract must own necessary amount of _tokenPay to pay back flash-loan.\r\n    // @dev Paying back the flash-loan happens in simpleFlashSwapExecute()\r\n    function execute(address _tokenBorrow, uint _amount, address _tokenPay, uint _amountToRepay, address _balancerPool, uint _maxPrice) override internal {\r\n        \r\n        // Swap _tokenBorrow tokens for _amount on balancer pool _balancerPool for tokens _tokenPay of amount >= _amountToRepay.\r\n        \r\n        // Approve BPool to take tokens borrowed.\r\n        IERC20(_tokenBorrow).approve(_balancerPool, _amount);\r\n        \r\n        // Swap tokens on BPool.\r\n        (latestAmountOut, latestPriceAfter) = BPool(_balancerPool).swapExactAmountIn(\r\n            _tokenBorrow,\r\n            _amount,\r\n            _tokenPay,\r\n            _amountToRepay,\r\n            _maxPrice\r\n        );\r\n        \r\n    }\r\n\r\n    // @notice Simple getter for convenience while testing\r\n    function getBalanceOf(address _input) external view returns (uint) {\r\n        if (_input == address(0)) {\r\n            return address(this).balance;\r\n        }\r\n        return IERC20(_input).balanceOf(address(this));\r\n    }\r\n}"
    }
  }
}