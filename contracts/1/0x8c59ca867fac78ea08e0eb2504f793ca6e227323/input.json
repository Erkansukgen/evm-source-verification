{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Coin.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\ncontract ERC20Interface {\r\n    function whoscoindefi() public view returns (string memory);\r\n\tfunction totalSupply() public view returns (uint);\r\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance);\r\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n\tfunction transfer(address to, uint tokens) public returns (bool success);\r\n\tfunction approve(address spender, uint tokens) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract SafeMath {\r\n\tfunction safeAdd(uint a, uint b) public pure returns (uint c) {\r\n\t\tc = a + b;\r\n\t\trequire(c >= a);\r\n\t}\r\n\tfunction safeSub(uint a, uint b) public pure returns (uint c) {\r\n\t\trequire(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\r\n\t\tc = a / b;\r\n\t}\r\n}\r\n\r\ncontract Coin is ERC20Interface, SafeMath {\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tstring public mensaje;\r\n\tuint8 public decimals;\r\n\tuint256 public _totalSupply;\r\n\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\tconstructor() public {\r\n\t\tname = \"Coin\";\r\n\t\tsymbol = \"COIN\";\r\n\t\tmensaje = \"CoinDeFi are a bunch of patent trolls!\";\r\n\t\tdecimals = 18;\r\n\t\t_totalSupply = 12000000000000000000000000; // Doce millones\r\n\r\n\t\tbalances[msg.sender] = _totalSupply;\r\n\t\temit Transfer(address(0), msg.sender, _totalSupply);\r\n\t}\r\n\t\r\n\tfunction whoscoindefi() public view returns (string memory) {\r\n\t\treturn mensaje;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint) {\r\n\t\treturn _totalSupply  - balances[address(0)];\r\n\t}\r\n\r\n\tfunction balanceOf(address tokenOwner) public view returns (uint balance) {\r\n\t\treturn balances[tokenOwner];\r\n\t}\r\n\r\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint tokens) public returns (bool success) {\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address to, uint tokens) public returns (bool success) {\r\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n\t\tbalances[to] = safeAdd(balances[to], tokens);\r\n\t\temit Transfer(msg.sender, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\t\tbalances[from] = safeSub(balances[from], tokens);\r\n\t\tallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n\t\tbalances[to] = safeAdd(balances[to], tokens);\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n}"}}}