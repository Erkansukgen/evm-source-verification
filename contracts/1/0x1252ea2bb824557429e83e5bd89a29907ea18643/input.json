{"language":"Solidity","sources":{"InterestRateModel.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\n// Copyright (c) WildCredit - All rights reserved\n// https://twitter.com/WildCredit\n\npragma solidity 0.8.6;\n\nimport \"IInterestRateModel.sol\";\nimport \"ILendingPair.sol\";\n\nimport \"Math.sol\";\nimport \"SafeOwnable.sol\";\n\ncontract InterestRateModel is IInterestRateModel, SafeOwnable {\n\n  // InterestRateModel can be re-deployed later\n  uint private constant BLOCK_TIME = 13.2e18; // 13.2 seconds\n  uint private constant LP_RATE = 50e18; // 50%\n\n  // Per block\n  uint public minRate;\n  uint public lowRate;\n  uint public highRate;\n  uint public targetUtilization; // 80e18 = 80%\n\n  event NewRates(uint minRate, uint lowRate, uint highRate);\n  event NewTargetUtilization(uint value);\n\n  constructor(\n    uint _minRate,\n    uint _lowRate,\n    uint _highRate,\n    uint _targetUtilization\n  ) {\n\n    setRates(_minRate, _lowRate, _highRate);\n    setTargetUtilization(_targetUtilization);\n  }\n\n  function setRates(\n    uint _minRate,\n    uint _lowRate,\n    uint _highRate\n  ) public onlyOwner {\n\n    require(_minRate < _lowRate,  \"InterestRateModel: _minRate < _lowRate\");\n    require(_lowRate < _highRate, \"InterestRateModel: _lowRate < highRate\");\n\n    minRate  = _timeRateToBlockRate(_minRate);\n    lowRate  = _timeRateToBlockRate(_lowRate);\n    highRate = _timeRateToBlockRate(_highRate);\n\n    emit NewRates(_minRate, _lowRate, _highRate);\n  }\n\n  function setTargetUtilization(uint _value) public onlyOwner {\n    require(_value > 0, \"InterestRateModel: _value > 0\");\n    require(_value < 100e18, \"InterestRateModel: _value < 100e18\");\n    targetUtilization = _value;\n    emit NewTargetUtilization(_value);\n  }\n\n  // InterestRateModel can later be replaced for more granular fees per _pair\n  function interestRatePerBlock(\n    address _pair,\n    address _token,\n    uint    _totalSupply,\n    uint    _totalDebt\n  ) external view override returns(uint) {\n    if (_totalSupply == 0 || _totalDebt == 0) { return minRate; }\n\n    // Same as: (_totalDebt * 100e18 / _totalSupply) * 100e18 / targetUtilization\n    uint utilization = _totalDebt * 100e18 * 100e18 / _totalSupply / targetUtilization;\n\n    if (utilization < 100e18) {\n      uint rate = lowRate * utilization / 100e18;\n      return Math.max(rate, minRate);\n    } else {\n      utilization = 100e18 * ( _totalDebt - (_totalSupply * targetUtilization / 100e18) ) / (_totalSupply * (100e18 - targetUtilization) / 100e18);\n      utilization = Math.min(utilization, 100e18);\n      return lowRate + (highRate - lowRate) * utilization / 100e18;\n    }\n  }\n\n  // Helper view function used only by the UI\n  function utilizationRate(\n    address _pair,\n    address _token\n  ) external view returns(uint) {\n    ILendingPair pair = ILendingPair(_pair);\n    uint totalSupply = pair.totalSupplyAmount(_token);\n    uint totalDebt = pair.totalDebtAmount(_token);\n    if (totalSupply == 0 || totalDebt == 0) { return 0; }\n    return Math.min(totalDebt * 100e18 / totalSupply, 100e18);\n  }\n\n  // InterestRateModel can later be replaced for more granular fees per _pair\n  function lpRate(address _pair, address _token) external view override returns(uint) {\n    return LP_RATE;\n  }\n\n  // _uint is set as 1e18 = 1% (annual) and converted to the block rate\n  function _timeRateToBlockRate(uint _uint) private view returns(uint) {\n    return _uint * BLOCK_TIME / (365 * 86400 * 1e18);\n  }\n}\n"},"IInterestRateModel.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.6;\n\ninterface IInterestRateModel {\n  function lpRate(address _pair, address _token) external view returns(uint);\n  function interestRatePerBlock(address _pair, address _token, uint _totalSupply, uint _totalDebt) external view returns(uint);\n}"},"ILendingPair.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.6;\n\ninterface ILendingPair {\n\n  function tokenA() external view returns(address);\n  function tokenB() external view returns(address);\n  function lpToken(address _token) external view returns(address);\n  function deposit(address _account, address _token, uint _amount) external;\n  function withdraw(address _token, uint _amount) external;\n  function withdrawAll(address _token) external;\n  function transferLp(address _token, address _from, address _to, uint _amount) external;\n  function supplySharesOf(address _token, address _account) external view returns(uint);\n  function totalSupplyShares(address _token) external view returns(uint);\n  function totalSupplyAmount(address _token) external view returns(uint);\n  function totalDebtShares(address _token) external view returns(uint);\n  function totalDebtAmount(address _token) external view returns(uint);\n  function supplyOf(address _token, address _account) external view returns(uint);\n\n  function supplyBalanceConverted(\n    address _account,\n    address _suppliedToken,\n    address _returnToken\n  ) external view returns(uint);\n\n  function initialize(\n    address _lpTokenMaster,\n    address _lendingController,\n    address _uniV3Helper,\n    address _feeRecipient,\n    address _tokenA,\n    address _tokenB\n  ) external;\n}"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.6;\n\nlibrary Math {\n\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow, so we distribute.\n    return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n  }\n\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b - 1) / b can overflow on addition, so we distribute.\n    return a / b + (a % b == 0 ? 0 : 1);\n  }\n}"},"SafeOwnable.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.6;\n\nimport \"IOwnable.sol\";\n\ncontract SafeOwnable is IOwnable {\n\n  uint public constant RENOUNCE_TIMEOUT = 1 hours;\n\n  address public override owner;\n  address public pendingOwner;\n  uint public renouncedAt;\n\n  event OwnershipTransferInitiated(address indexed previousOwner, address indexed newOwner);\n  event OwnershipTransferConfirmed(address indexed previousOwner, address indexed newOwner);\n\n  constructor() {\n    owner = msg.sender;\n    emit OwnershipTransferConfirmed(address(0), msg.sender);\n  }\n\n  modifier onlyOwner() {\n    require(isOwner(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function isOwner() public view returns (bool) {\n    return msg.sender == owner;\n  }\n\n  function transferOwnership(address _newOwner) external override onlyOwner {\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferInitiated(owner, _newOwner);\n    pendingOwner = _newOwner;\n  }\n\n  function acceptOwnership() external override {\n    require(msg.sender == pendingOwner, \"Ownable: caller is not pending owner\");\n    emit OwnershipTransferConfirmed(msg.sender, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n\n  function initiateRenounceOwnership() external onlyOwner {\n    require(renouncedAt == 0, \"Ownable: already initiated\");\n    renouncedAt = block.timestamp;\n  }\n\n  function acceptRenounceOwnership() external onlyOwner {\n    require(renouncedAt > 0, \"Ownable: not initiated\");\n    require(block.timestamp - renouncedAt > RENOUNCE_TIMEOUT, \"Ownable: too early\");\n    owner = address(0);\n    pendingOwner = address(0);\n    renouncedAt = 0;\n  }\n\n  function cancelRenounceOwnership() external onlyOwner {\n    require(renouncedAt > 0, \"Ownable: not initiated\");\n    renouncedAt = 0;\n  }\n}"},"IOwnable.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.6;\n\ninterface IOwnable {\n  function owner() external view returns(address);\n  function transferOwnership(address _newOwner) external;\n  function acceptOwnership() external;\n}"}},"settings":{"evmVersion":"istanbul","optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}}}