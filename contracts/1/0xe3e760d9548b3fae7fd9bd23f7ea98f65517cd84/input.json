{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"forex.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.5;\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface Oracle {\r\n    \r\n    struct ReferenceData {\r\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\r\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\r\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\r\n    }\r\n    \r\n    function getReferenceData(string memory _base, string memory _quote)\r\n        external\r\n        view\r\n        returns (ReferenceData memory);\r\n}\r\n\r\ncontract Synth {\r\n    /// @notice EIP-20 token name for this token\r\n    string public name;\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public symbol;\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public immutable decimals;\r\n\r\n    // @notice Decentralized Synthetic Stack\r\n    address immutable stack;\r\n    \r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply = 0;\r\n    \r\n    mapping(address => mapping (address => uint)) internal allowances;\r\n    mapping(address => uint) internal balances;\r\n    \r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n    \r\n    constructor (string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        stack = msg.sender;\r\n    }\r\n    \r\n    modifier only() {\r\n        require(msg.sender == stack);\r\n        _;\r\n    }\r\n    \r\n    function mint(address dst, uint amount) only external {\r\n        // mint the amount\r\n        totalSupply += amount;\r\n        // transfer the amount to the recipient\r\n        balances[dst] += amount;\r\n        emit Transfer(address(0), dst, amount);\r\n    }\r\n    \r\n    function burn(address dst, uint amount) only external {\r\n        // burn the amount\r\n        totalSupply -= amount;\r\n        // transfer the amount from the recipient\r\n        balances[dst] -= amount;\r\n        emit Transfer(dst, address(0), amount);\r\n    }\r\n    \r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != type(uint).max) {\r\n            uint newAllowance = spenderAllowance - amount;\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        balances[src] -= amount;\r\n        balances[dst] += amount;\r\n        \r\n        emit Transfer(src, dst, amount);\r\n    }\r\n}\r\n\r\ncontract Synths {\r\n    address public multisig;\r\n    address public pendingMultisig;\r\n    address public oracle = 0xDA7a001b254CD22e46d3eAB04d937489c93174C3;\r\n    string constant public quote = \"USD\";\r\n    \r\n    struct config {\r\n        bool active;\r\n        uint ltv;\r\n    }\r\n    \r\n    mapping(address => mapping(address => mapping(address => uint))) public credit;\r\n    mapping(address => mapping(address => mapping(address => uint))) public collateral;\r\n    mapping(address => config) public assets;\r\n    mapping(address => bool) public synths;\r\n    mapping(address => string) public refs;\r\n    \r\n    uint public BASE = 100;\r\n    uint public LIQUIDATION_VALUE = 90;\r\n    \r\n    constructor () {\r\n        multisig = msg.sender;\r\n    }\r\n    \r\n    modifier only() {\r\n        require(msg.sender == multisig);\r\n        _;\r\n    }\r\n    \r\n    function setOracle(address _oracle) only external {\r\n        oracle = _oracle;\r\n    }\r\n    \r\n    function validateLTV(uint ltv) public pure returns (bool) {\r\n        if ((ltv == 80) || (ltv == 70) || (ltv == 60)) {\r\n            return true;\r\n        } else if ((ltv == 50) || (ltv == 85) || (ltv == 65)) {\r\n            return true;\r\n        } else if (ltv >= 90) {\r\n            return true;\r\n        } else if (ltv == 75) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function gentleRepaymentCalculator(uint ltv, uint debt, uint value) public view returns (uint repayment) {\r\n        if (ltv == 80) {\r\n            return Math.min((debt - value) * 910 / BASE, debt);\r\n        } else if (ltv == 70) {\r\n            return Math.min((debt - value) * 460 / BASE, debt);\r\n        } else if (ltv == 60) {\r\n            return Math.min((debt - value) * 310 / BASE, debt);\r\n        } else if (ltv == 50) {\r\n            return Math.min((debt - value) * 235 / BASE, debt);\r\n        } else if (ltv == 85) {\r\n            return Math.min((debt - value) * 1810 / BASE, debt);\r\n        } else if (ltv == 65) {\r\n            return Math.min((debt - value) * 370 / BASE, debt);\r\n        } else if (ltv == 75) {\r\n            return Math.min((debt - value) * 610 / BASE, debt);\r\n        } else if (ltv >= 90) {\r\n            return debt;\r\n        }\r\n    }\r\n    \r\n    function activateAsset(address asset, uint ltv, string memory ref) only external {\r\n        require(validateLTV(ltv));\r\n        assets[asset] = config(true, ltv);\r\n        refs[asset] = ref;\r\n    }\r\n    \r\n    function deactivateAsset(address asset) only external {\r\n        assets[asset] = config(false, assets[asset].ltv);\r\n    }\r\n    \r\n    function createSynth(string memory name, string memory symbol, uint8 decimals, string memory ref) only external {\r\n        address _synth = address(new Synth(name, symbol, decimals));\r\n        synths[_synth] = true;\r\n        refs[_synth] = ref;\r\n    }\r\n    \r\n    function activateSynth(address synth) only external {\r\n        synths[synth] = true;\r\n    }\r\n    \r\n    function deactivateSynthetic(address synth) only external {\r\n        synths[synth] = false;\r\n    }\r\n    \r\n    function setReference(address base, string memory ref) only external {\r\n        refs[base] = ref;\r\n    }\r\n    \r\n    function setMultisig(address _multisig) only external {\r\n        pendingMultisig = _multisig;\r\n    }\r\n    \r\n    function accept() external {\r\n        require(msg.sender == pendingMultisig);\r\n        multisig = pendingMultisig;\r\n    }\r\n    \r\n    function lookup(address quoted, uint amount) public view returns (uint) {\r\n        return Oracle(oracle).getReferenceData(refs[quoted], quote).rate * amount / 10 ** IERC20(quoted).decimals();\r\n    }\r\n    \r\n    function mint(address asset, uint amount, address synth, uint minted, address recipient) external {\r\n        config memory _cfg = assets[asset];\r\n        require(_cfg.active&&synths[synth]);\r\n        \r\n        if (amount > 0) {\r\n            safeTransferFrom(asset, msg.sender, address(this), amount);\r\n        }\r\n        \r\n        collateral[msg.sender][asset][synth] += amount;\r\n        credit[msg.sender][asset][synth] += minted;\r\n        \r\n        require(lookup(asset, collateral[msg.sender][asset][synth] * _cfg.ltv / BASE) >= lookup(synth, credit[msg.sender][asset][synth]));\r\n        Synth(synth).mint(recipient, minted);\r\n    }\r\n    \r\n    function burn(address asset, uint amount, address synth, uint burned, address recipient) external {\r\n        Synth(synth).burn(msg.sender, burned);\r\n        \r\n        credit[msg.sender][asset][synth] -= burned;\r\n        collateral[msg.sender][asset][synth] -= amount;\r\n        \r\n        require(lookup(asset, collateral[msg.sender][asset][synth] * assets[asset].ltv / BASE) >= lookup(synth, credit[msg.sender][asset][synth]));\r\n        \r\n        if (amount > 0) {\r\n            safeTransfer(asset, recipient, amount);\r\n        }\r\n    }\r\n    \r\n    function liquididate(address owner, address asset, address synth) external {\r\n        config memory cfg = assets[asset];\r\n        uint _nominal = collateral[owner][asset][synth];\r\n        \r\n        uint _backed = lookup(asset, _nominal * cfg.ltv / BASE);\r\n        uint _debt = lookup(synth, credit[owner][asset][synth]);\r\n        require(_backed < _debt);\r\n        \r\n        uint _repayment = gentleRepaymentCalculator(cfg.ltv, _debt, _backed);\r\n        uint _payment = Math.min(_nominal * _repayment / lookup(asset, _nominal * LIQUIDATION_VALUE / BASE), _nominal);\r\n        \r\n        Synth(synth).burn(msg.sender, _repayment);\r\n        \r\n        credit[owner][asset][synth] -= _repayment;\r\n        collateral[owner][asset][synth] -= _payment;\r\n        \r\n        require(lookup(asset, collateral[owner][asset][synth] * cfg.ltv / BASE) >= lookup(synth, credit[owner][asset][synth]));\r\n        \r\n        safeTransfer(asset, msg.sender, _payment);\r\n    }\r\n    \r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}"}}}