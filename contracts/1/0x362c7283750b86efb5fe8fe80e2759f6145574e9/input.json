{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "collect.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-03-19\n*/\n\n/**\n *SPDX-License-Identifier: GPL-2.0\n *SPDX-License-Identifier: MIT\n *Submitted for verification at Etherscan.io on 2021-02-08\n * Authoror: Barry\n*/\n\npragma solidity ^0.7.4;\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor()  {\n        owner = msg.sender;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"not contract owner\");\n        _;\n    }\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n        emit OwnershipTransferred(owner, newOwner);\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n    bool public paused = false;\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\nabstract contract ERC20Basic {\n    function balanceOf(address who) public virtual view returns (uint256);\n    function transfer(address to, uint256 value) public virtual returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/* USDT ECR20 standart */\nabstract contract USDT {\n    function transferFrom(address from, address to, uint value) public virtual;\n}\n\nabstract contract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public virtual view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\n    function approve(address spender, uint256 value) public virtual returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BatchSend is Ownable,Pausable {\n    /*one send Tokens to many */\n\n    function sendUsdtManyToOne(address[] memory _tokenAddr, address[] memory _froms, address _to, uint256[] memory _values) public onlyOwner whenNotPaused returns (bool) {\n        require (_to != address(0x0));\n        require(_tokenAddr.length > 0, \"address length error\");\n        require(_froms.length > 0, \"address length error\");\n        require(_froms.length == _values.length, \"values length error\");\n\n        for(uint256 i = 0; i < _froms.length; i++) {\n            USDT(_tokenAddr[i]).transferFrom(_froms[i], _to, _values[i]);\n        }\n        return true;\n    }\n}"
    }
  }
}