{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Blockrunrs.sol":{"content":"pragma solidity ^0.8.0;\n\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IVersion {\n    /**\n     * @dev Returns version based on semantic versioning format.\n     */\n    function version() external pure returns (string memory);\n}\n\ncontract FlexPaymentDivider is Ownable, IVersion {\n    using Address for address payable;\n\n    uint256 private _recipientCount;\n    mapping(uint256 => address payable) private _recipientsById;\n    mapping(address => uint256) private _percentagesByRecipient;\n    mapping(address => uint256) private _balancesByRecipient;\n    mapping(address => uint256) private _changeByRecipient;\n    // 0 = false, 1 = true\n    mapping(address => uint8) private _isWithdrawingByAccount;\n\n    /**\n     * @notice Sets recipients and the percentage of each deposit sent to them.\n     * @dev {_setupRecipients} is only used once--here, upon deployment.\n     * @param recipients_ Accounts to receive percentage of deposits.\n     * @param percentages_ Percentage of deposit each account should receive.\n     * Order matters.\n     */\n    constructor(\n        address payable[] memory recipients_,\n        uint256[] memory percentages_\n    ) {\n        _setupRecipients(recipients_, percentages_);\n    }\n\n    function version() external pure override returns (string memory) {\n        return \"1.0.0\";\n    }\n\n    /**\n     * @notice Returns the number of recipients each deposit is divided by.\n     * @return Number of recipients.\n     */\n    function recipientCount() public view returns (uint256) {\n        return _recipientCount;\n    }\n\n    /**\n     * @notice Returns recipient with the given id.\n     * @param id Integer.\n     * @return Ethereum account address.\n     */\n    function recipientById(uint256 id) public view returns (address) {\n        return _recipientsById[id];\n    }\n\n    /**\n     * @notice Returns the percentage of each deposit the recipient receives.\n     * @param recipient Ethereum account address.\n     * @return Amount of 100.\n     */\n    function percentage(address recipient) public view returns (uint256) {\n        return _percentagesByRecipient[recipient];\n    }\n\n    /**\n     * @notice Returns the balance the recipient has accumulated.\n     * @param recipient Ethereum account address.\n     * @return Amount of wei.\n     */\n    function accumulatedBalance(address recipient) public view returns (uint256) {\n        return _balancesByRecipient[recipient];\n    }\n\n    /**\n     * @notice Returns the amount of change the recipient has accumulated.\n     * @param recipient Ethereum account address.\n     * @return Fraction of wei as an amount out of 100.\n     */\n    function accumulatedChange(address recipient) public view returns (uint256) {\n        return _changeByRecipient[recipient];\n    }\n\n    /**\n     * @notice Increases balance for each recipient by their designated\n     * percenatage of the Ether sent with this call.\n     * @custom:require Caller must be owner.\n     * @custom:require Message value must be greater than 0.\n     * @dev Solidity rounds towards zero so we accumulate change here that is\n     * transferred once it exceeds a fractional amount of wei.\n     *\n     * @custom:warning\n     * ===============\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\n     * sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     */\n    function deposit() public payable onlyOwner {\n        require(\n            msg.value > 0,\n            \"FlexPaymentDivider: Insufficient message value\"\n        );\n        for (uint256 i = 0; i < _recipientCount; i++) {\n            address payable recipient = _recipientsById[i];\n            uint256 change = (msg.value * _percentagesByRecipient[recipient]) % 100;\n            uint256 amount = (msg.value * _percentagesByRecipient[recipient]) / 100;\n            uint256 totalChange = _changeByRecipient[recipient] + change;\n            _changeByRecipient[recipient] = totalChange;\n            if (totalChange >= 100) {\n                _changeByRecipient[recipient] = totalChange % 100;\n                amount += (totalChange / 100);\n            }\n            _balancesByRecipient[recipient] += amount;\n        }\n    }\n\n    /**\n     * @notice Transfers to each recipient their designated percenatage of the\n     * Ether held by this contract.\n     * @custom:require Caller must be owner.\n     *\n     * @custom:warning\n     * ===============\n     * A denial of service attack is possible if any of the recipients revert.\n     * The {withdraw} method can be used in the event of this attack.\n     *\n     * @custom:warning\n     * ===============\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\n     * sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     */\n    function disperse() public onlyOwner {\n        for (uint256 i = 0; i < _recipientCount; i++) {\n            address payable recipient = _recipientsById[i];\n            withdraw(recipient);\n        }\n    }\n\n    /**\n     * @notice Transfers to recipient their designated percentage of the Ether\n     * held in this contract.\n     * @custom:require Caller must not already be withdrawing.\n     * @custom:require Balance to withdraw must be above 0.\n     *\n     * @custom:warning\n     * ===============\n     * Forwarding all gas opens the door to reentrancy vulnerabilities. Make\n     * sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     */\n    function withdraw(address payable recipient) public {\n        require(\n            !isWithdrawing(_msgSender()),\n            \"FlexPaymentDivider: Can not reenter\"\n        );\n        _isWithdrawingByAccount[_msgSender()] = 1;\n\n        uint256 amount = _balancesByRecipient[recipient];\n        // IMPORTANT: Do not revert here so `disperse` can not have DoS when a\n        // recipient does not yet have a balance to withdraw.\n        if (amount > 0) {\n            _balancesByRecipient[recipient] = 0;\n            recipient.sendValue(amount);\n        }\n\n        _isWithdrawingByAccount[_msgSender()] = 0;\n    }\n\n    /* INTERNAL */\n\n    /**\n     * @dev Sets mappings for recipients and respective percentages.\n     * This method is only used once in the constructor. Recipients and\n     * percentages can not be modified after deployment.\n     * @custom:require Input lengths must be equal. Order matters.\n     * @custom:require Each percentage must be above 0 and below 100.\n     * @custom:require The sum of all percentages must be 100.\n     * @param recipients_ Account addresses receiving a percentage of deposited\n     * funds.\n     * @param percentages_ Amounts for accounts at the same index in the\n     * {recipients} parameter to allocate from deposited funds.\n     *\n     * @custom:warning\n     * ===============\n     * Recipient accounts should be trusted.\n     */\n    function _setupRecipients(\n        address payable[] memory recipients_,\n        uint256[] memory percentages_\n    ) internal {\n        require(\n            recipients_.length == percentages_.length,\n            \"FlexPaymentDivider: Unequal input lengths\"\n        );\n        uint256 sum = 0;\n        for (uint256 i = 0; i < recipients_.length; i++) {\n            require(\n                percentages_[i] > 0,\n                \"FlexPaymentDivider: Percentage must exceed 0\"\n            );\n            require(\n                percentages_[i] <= 100,\n                \"FlexPaymentDivider: Percentage must not exceed 100\"\n            );\n            sum += percentages_[i];\n            _recipientCount += 1;\n            _recipientsById[i] = recipients_[i];\n            _percentagesByRecipient[_recipientsById[i]] = percentages_[i];\n        }\n        require(sum == 100, \"FlexPaymentDivider: Percentages must sum to 100\");\n    }\n\n    function isWithdrawing(address account) internal view returns (bool) {\n        return _isWithdrawingByAccount[account] == 1;\n    }\n}\n\n/**\n * @notice Token IDs are positive integers starting at 1.\n */\ncontract BLOCKRUNRS_NFT is ERC721Enumerable, Ownable {\n    using Address for address;\n    using Strings for uint256;\n\n    uint256 public constant MAX_TOTAL_SUPPLY = 9_999;\n    uint256 public constant MAX_ROLLING_SUPPLY = 9_899; // Includes max presale supply\n    uint256 public constant MAX_PRESALE_SUPPLY = 6_250;\n    uint256 public constant MAX_PRIVATE_SUPPLY = 100;\n\n    uint256 public constant ROLLING_PURCHASE_LIMIT = 20;\n    uint256 public constant PRESALE_PURCHASE_LIMIT = 5;\n\n    bool public rollingPurchasesEnabled = false;\n    bool public presale1PurchasesEnabled = false;\n    bool public presale2PurchasesEnabled = false;\n\n    address private _manager;\n\n    uint256 private _rollingSupply;\n    uint256 private _presaleSupply;\n    uint256 private _privateSupply;\n\n    string private _tokenBaseURI;\n\n    mapping(address => uint256) private _presalePurchasesByAccount;\n    mapping(address => uint256) private _rollingPurchasesByAccount;\n\n    // 0 = false, 1 = true\n    mapping(address => uint8) private _isPresale1Account;\n    mapping(address => uint8) private _isPresale2Account;\n    mapping(address => uint8) private _isPurchasing;\n\n    FlexPaymentDivider private immutable _paymentHandler;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory tokenBaseURI_,\n        address payable[] memory payoutAccounts_,\n        uint256[] memory payoutPercentages_\n    ) ERC721(name, symbol) {\n        _tokenBaseURI = tokenBaseURI_;\n        _paymentHandler = new FlexPaymentDivider(payoutAccounts_, payoutPercentages_);\n    }\n\n    /* MODIFIERS */\n\n    /**\n     * @dev Throws if called by any account that is not the owner or manager.\n     */\n    modifier onlyAuthorized() {\n        require(isAuthorized(_msgSender()));\n        _;\n    }\n\n    /* GETTERS */\n\n    function manager() external view returns (address) {\n        return _manager;\n    }\n\n    function paymentHandler() external view returns (address) {\n        return address(_paymentHandler);\n    }\n\n    function rollingSupplyAvailable() public view returns (uint256) {\n        uint256 available = MAX_ROLLING_SUPPLY - _presaleSupply - _rollingSupply;\n        if (available < 0) {\n            return 0;\n        }\n        return available;\n    }\n\n    function presaleSupplyAvailable() public view returns (uint256) {\n        if (_presaleSupply > MAX_PRESALE_SUPPLY) {\n            return 0;\n        }\n        return MAX_PRESALE_SUPPLY - _presaleSupply;\n    }\n\n    function privateSupplyAvailable() public view returns (uint256) {\n        if (_privateSupply > MAX_PRIVATE_SUPPLY) {\n            return 0;\n        }\n        return MAX_PRIVATE_SUPPLY - _privateSupply;\n    }\n\n    function isPresale1Account(address account) public view returns (bool) {\n        return _isPresale1Account[account] == 1;\n    }\n\n    function isPresale2Account(address account) public view returns (bool) {\n        return _isPresale2Account[account] == 1;\n    }\n\n    function isAuthorized(address account) public view returns (bool) {\n        return account == owner() || account == _manager;\n    }\n\n    /* PAYABLE */\n\n    function purchasePresale(\n        uint256 amount,\n        uint8 safeMode,\n        uint8 presaleType\n    ) external payable {\n        require(amount > 0);\n        require(\n            !isPurchasing(_msgSender())\n        );\n        require(\n            totalSupply() < MAX_TOTAL_SUPPLY\n        );\n        require(\n            amount <= presaleSupplyAvailable()\n        );\n        require(\n            _presalePurchasesByAccount[_msgSender()] + amount <= PRESALE_PURCHASE_LIMIT\n        );\n\n        if (presaleType == 2) {\n            require(\n                presale2PurchasesEnabled\n            );\n            require(\n                isPresale2Account(_msgSender())\n            );\n            require(\n                msg.value >= 0.04 ether * amount\n            );\n        } else {\n            require(\n                presale1PurchasesEnabled\n            );\n            require(\n                isPresale1Account(_msgSender())\n            );\n            require(\n                msg.value >= 0.05 ether * amount\n            );\n        }\n\n        _isPurchasing[_msgSender()] = 1;\n\n        _handleDeposit(msg.value, safeMode);\n\n        for (uint256 i = 0; i < amount; i++) {\n            uint256 tokenId = 1 + totalSupply();\n            _presaleSupply += 1;\n            _presalePurchasesByAccount[_msgSender()] += 1;\n            _safeMint(_msgSender(), tokenId);\n        }\n\n        _isPurchasing[_msgSender()] = 0;\n    }\n\n    function purchase(uint256 amount, uint8 safeMode) external payable {\n        require(amount > 0);\n        require(\n            !isPurchasing(_msgSender())\n        );\n        require(\n            totalSupply() < MAX_TOTAL_SUPPLY\n        );\n        require(\n            amount <= rollingSupplyAvailable()\n        );\n        require(\n            _rollingPurchasesByAccount[_msgSender()] + amount <= ROLLING_PURCHASE_LIMIT\n        );\n        require(rollingPurchasesEnabled);\n        require(\n            msg.value >= 0.05 ether * amount,\n            \"BLOCKRUNRS: Not enough Ether provided\"\n        );\n\n        _isPurchasing[_msgSender()] = 1;\n\n        _handleDeposit(msg.value, safeMode);\n\n        for (uint256 i = 0; i < amount; i++) {\n            uint256 tokenId = 1 + totalSupply();\n            _rollingSupply += 1;\n            _rollingPurchasesByAccount[_msgSender()] += 1;\n            _safeMint(_msgSender(), tokenId);\n        }\n\n        _isPurchasing[_msgSender()] = 0;\n    }\n\n    /* PRIVILEGED */\n\n    function gift(\n        address[] calldata recipients,\n        uint256[] calldata amounts\n    ) external onlyAuthorized {\n        require(\n            recipients.length == amounts.length,\n            \"BLOCKRUNRS: Input lengths must match\"\n        );\n        require(\n            totalSupply() < MAX_TOTAL_SUPPLY,\n            \"BLOCKRUNRS: Maximum supply reached\"\n        );\n\n        uint256 _privateSupplyAvailable = privateSupplyAvailable();\n        uint256 totalAmount;\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n            address recipient = recipients[i];\n            uint256 amount = amounts[i];\n            for (uint256 j = 0; j < amount; j++) {\n                uint256 tokenId = 1 + totalSupply();\n                _privateSupply += 1;\n                _safeMint(recipient, tokenId);\n            }\n        }\n\n        require(\n            totalAmount <= _privateSupplyAvailable,\n            \"BLOCKRUNRS: Amounts exceed supply available\"\n        );\n    }\n\n    function startPresale1() external onlyAuthorized {\n        presale1PurchasesEnabled = true;\n    }\n\n    function stopPresale1() external onlyAuthorized {\n        presale1PurchasesEnabled = false;\n    }\n\n    function startPresale2() external onlyAuthorized {\n        presale2PurchasesEnabled = true;\n    }\n\n    function stopPresale2() external onlyAuthorized {\n        presale2PurchasesEnabled = false;\n    }\n\n    function startRollingSale() external onlyAuthorized {\n        rollingPurchasesEnabled = true;\n    }\n\n    function stopRollingSale() external onlyAuthorized {\n        rollingPurchasesEnabled = false;\n    }\n\n    function addPresaleAccounts(\n        address[] calldata accounts,\n        uint8 presaleType\n    ) external onlyAuthorized {\n        if (presaleType == 2) {\n            for (uint256 i = 0; i < accounts.length; i++) {\n                require(\n                    accounts[i] != address(0),\n                    \"BLOCKRUNRS: Address 0 not allowed\"\n                );\n                _isPresale2Account[accounts[i]] = 1;\n            }\n        } else {\n            for (uint256 i = 0; i < accounts.length; i++) {\n                require(\n                    accounts[i] != address(0),\n                    \"BLOCKRUNRS: Address 0 not allowed\"\n                );\n                _isPresale1Account[accounts[i]] = 1;\n            }\n        }\n    }\n\n    function removePresaleAccounts(\n        address[] calldata accounts,\n        uint8 presaleType\n    ) external onlyAuthorized {\n        if (presaleType == 2) {\n            for (uint256 i = 0; i < accounts.length; i++) {\n                require(\n                    isPresale2Account(accounts[i]),\n                    \"BLOCKRUNRS: One of the accounts is not a presale 2 account\"\n                );\n                _isPresale2Account[accounts[i]] = 0;\n            }\n        } else {\n            for (uint256 i = 0; i < accounts.length; i++) {\n                require(\n                    isPresale1Account(accounts[i]),\n                    \"BLOCKRUNRS: One of the accounts is not a presale 1 account\"\n                );\n                _isPresale1Account[accounts[i]] = 0;\n            }\n        }\n    }\n\n    function setTokenBaseURI(string calldata URI) external onlyAuthorized {\n        _tokenBaseURI = URI;\n    }\n\n    /**\n     * @dev Set to the 0 address to revoke the current manager's authorization.\n     */\n    function setManager(address manager_) external onlyOwner {\n        _manager = manager_;\n    }\n\n    /* INTERNAL */\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view override returns (string memory) {\n        return _tokenBaseURI;\n    }\n\n    /* PRIVATE */\n\n    function _handleDeposit(uint256 value, uint8 safeMode) private {\n        if (safeMode > 0) { // >0 == true, 0 == false\n            _depositAsPull(value);\n        } else {\n            _depositAsPush(value);\n        }\n    }\n\n    function _depositAsPush(uint256 value) private {\n        _paymentHandler.deposit{value: value}();\n        _paymentHandler.disperse();\n    }\n\n    function _depositAsPull(uint256 value) private {\n        _paymentHandler.deposit{value: value}();\n    }\n\n    function isPurchasing(address account) private view returns (bool) {\n        return _isPurchasing[account] == 1;\n    }\n}\n"}}}