{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() {}\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n"
    },
    "DevToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// helpers\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Pausable.sol\";\nimport \"./Context.sol\";\n// contract\nimport \"./Stakeable.sol\";\nimport \"./Vendor.sol\";\nimport \"./Migration.sol\";\n\n/**\n * @notice DevToken is a development token that we use to learn how to code solidity\n * and what X interface requires\n */\ncontract DevToken is Context, Ownable, Pausable, Vendor, Stakeable, Migration {\n    using SafeMath for uint256;\n\n    /**\n     * @notice Our Tokens required variables that are needed to operate everything\n     */\n    uint256 private _totalSupply;\n    uint8 private _decimals;\n    string private _symbol;\n    string private _name;\n\n    struct infoToken {\n        uint256 _totalSupply;\n        uint8 _decimals;\n        string _symbol;\n        string _name;\n    }\n\n    /**\n     * @notice _balances is a mapping that contains a address as KEY\n     * and the balance of the address as the value\n     */\n    mapping(address => uint256) private _balances;\n\n    /**\n     * @notice _allowances is used to manage and control allownace\n     * An allowance is the right to use another accounts balance, or part of it\n     */\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    /**\n     * @notice Events are created below.\n     * Transfer event is a event that notify the blockchain that a transfer of assets has taken place\n     *\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @notice Approval is emitted when a new Spender is approved to spend Tokens on\n     * the Owners account\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @notice constructor will be triggered when we create the Smart contract\n     * _name = name of the token\n     * _short_symbol = Short Symbol name for the token\n     * token_decimals = The decimal precision of the Token, defaults 8\n     * _totalSupply is how much Tokens there are totally\n     */\n\n    uint256 minimum_purchase_amount_staked = 10000000000; // 100 Token\n\n    constructor() Vendor(address(this)) {\n        _name = \"JDB TOKEN\";\n        _symbol = \"JDB\";\n        _decimals = 8;\n        _totalSupply = 100000000 * 10**uint256(_decimals);\n        _balances[owner()] = _totalSupply;\n        emit Transfer(address(0), address(this), _totalSupply);\n    }\n\n    /**\n     * @notice we get the token information\n     */\n    function getInfoToken()\n        external\n        view\n        returns (infoToken memory _propertyObj)\n    {\n        return infoToken(_totalSupply, _decimals, _symbol, _name);\n    }\n\n    /**\n     * @notice balanceOf will return the account balance for the given account\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @notice _mint will create tokens on the address inputted and then increase the total supply\n     *\n     * It will also emit an Transfer event, with sender set to zero address (adress(0))\n     *\n     * Requires that the address that is recieveing the tokens is not zero address\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"cannot mint to zero address\");\n\n        // Increase total supply\n        _totalSupply = _totalSupply.add(amount);\n\n        // Add amount to the account balance using the balance mapping\n        _balances[account] = _balances[account].add(amount);\n\n        // Emit our event to log the action\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @notice _burn will destroy tokens from an address inputted and then decrease total supply\n     * An Transfer event will emit with receiever set to zero address\n     *\n     * Requires\n     * - Account cannot be zero\n     * - Account balance has to be bigger or equal to amount\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"cannot burn from zero address\");\n        require(\n            _balances[account] >= amount,\n            \"Cannot burn more than the account owns\"\n        );\n\n        // Remove the amount from the account balance\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"burn amount exceeds balance\"\n        );\n\n        // Decrease totalSupply\n        _totalSupply = _totalSupply.sub(amount);\n\n        // Emit event, use zero address as reciever\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @notice burn is used to destroy tokens on an address\n     *\n     * See {_burn}\n     * Requires\n     *   - msg.sender must be the token owner\n     *\n     */\n    function burn(address account, uint256 amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _burn(account, amount);\n        return true;\n    }\n\n    /**\n     * @notice mint is used to create tokens and assign them to msg.sender\n     *\n     * See {_mint}\n     * Requires\n     *   - msg.sender must be the token owner\n     *\n     */\n    function mint(address account, uint256 amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _mint(account, amount);\n        return true;\n    }\n\n    /**\n     * @notice transfer is used to transfer funds from the sender to the recipient\n     * This function is only callable from outside the contract. For internal usage see\n     * _transfer\n     *\n     * Requires\n     * - Caller cannot be zero\n     * - Caller must have a balance = or bigger than amount\n     *\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        whenNotPaused\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @notice _transfer is used for internal transfers\n     *\n     * Events\n     * - Transfer\n     *\n     * Requires\n     *  - Sender cannot be zero\n     *  - recipient cannot be zero\n     *  - sender balance most be = or bigger than amount\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), \"transfer from zero address\");\n        require(recipient != address(0), \"transfer to zero address\");\n        require(\n            _balances[sender] >= amount,\n            \"cant transfer more than your account holds\"\n        );\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"transfer amount exceeds balance\"\n        );\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /**\n     * @notice getOwner just calls Ownables owner function.\n     * returns owner of the token\n     *\n     */\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n\n    /**\n     * @notice allowance is used view how much allowance an spender has\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @notice approve will use the senders address and allow the spender to use X amount of tokens on his behalf\n     */\n    function approve(address spender, uint256 amount)\n        external\n        whenNotPaused\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice _approve is used to add a new Spender to a Owners account\n     *\n     * Events\n     *   - {Approval}\n     *\n     * Requires\n     *   - owner and spender cannot be zero address\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(\n            owner != address(0),\n            \"approve cannot be done from zero address\"\n        );\n        require(spender != address(0), \"approve cannot be to zero address\");\n\n        // Set the allowance of the spender address at the Owner mapping over accounts to the amount\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @notice transferFrom is uesd to transfer Tokens from a Accounts allowance\n     * Spender address should be the token holder\n     *\n     * Requires\n     *   - The caller must have a allowance = or bigger than the amount spending\n     */\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external whenNotPaused returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"You cannot spend that much on this account\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice increaseAllowance\n     * Adds allowance to a account from the function caller address\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n\n        return true;\n    }\n\n    /**\n     * @notice decreaseAllowance\n     * Decrease the allowance on the account inputted from the caller address\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        whenNotPaused\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"decreased allowance below zero\"\n            )\n        );\n\n        return true;\n    }\n\n    // ---------- STAKES ----------\n\n    /**\n     * Add functionality like burn to the _stake afunction\n     *\n     */\n    function stake(\n        uint256 _amount,\n        uint256 _untilBlock,\n        uint256 _rewardRate\n    ) public whenNotPausedPresale {\n        // Make sure staker actually is good for it\n        require(\n            _amount < _balances[_msgSender()],\n            \"Cannot stake more than you own\"\n        );\n\n        // the initial amount must be greater than 100 jdb\n        require(\n            _amount >= minimum_purchase_amount_staked,\n            \"the initial amount must be greater than 100 jdb\"\n        );\n\n        _stake(_amount, _untilBlock, _rewardRate);\n\n        // Burn the amount of tokens on the sender\n        _burn(_msgSender(), _amount);\n    }\n\n    /**\n     * @notice withdrawStake is used to withdraw stakes from the account holder\n     */\n    function withdrawStake(uint256 amount, uint256 stake_index)\n        public\n        whenNotPausedPresale\n    {\n        uint256 amount_to_mint = _withdrawStake(amount, stake_index);\n        // Return staked tokens to user\n        _mint(_msgSender(), amount_to_mint);\n    }\n\n    /**\n     * @notice A method to the aggregated stakes from all stakeholders.\n     * @return uint256 The aggregated stakes from all stakeholders.\n     */\n\n    function totalStakes() public view returns (uint256) {\n        return _totalStakes();\n    }\n\n    /**\n     * @dev change minimum purchase amount\n     */\n    function changeMinimumStakesAmount(uint256 _minimum_purchase_amount_staked)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        minimum_purchase_amount_staked = _minimum_purchase_amount_staked;\n        return true;\n    }\n}\n"
    },
    "Migration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Ownable.sol\";\nimport \"./DevToken.sol\";\n\n/**\n * @dev Initiate the account of destinations[i] with values[i]. The function must only be called before\n * any transfer of tokens (duringInitialization). The caller must check that destinations are unique addresses.\n * For a large number of destinations, separate the balances initialization in different calls to batchTransfer.\n * destinations List of addresses to set the values\n * values List of values to set\n */\n\ncontract Migration is Ownable {\n    DevToken _devToken;\n    event migrationTokens(address destinations, uint256 values);\n\n    function batchTransfer(\n        address[] memory destinations,\n        uint256[] memory values\n    ) public onlyOwner returns (bool) {\n        require(destinations.length == values.length);\n\n        uint256 length = destinations.length;\n        uint256 i;\n\n        for (i = 0; i < length; i++) {\n            _devToken.transfer(destinations[i], values[i]);\n            emit migrationTokens(destinations[i], values[i]);\n        }\n\n        return true;\n    }\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: only owner can call this function\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: only owner can call this function\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n"
    },
    "Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./Ownable.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused returns (bool) {\n        paused = true;\n        emit Pause();\n        return true;\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused returns (bool) {\n        paused = false;\n        emit Unpause();\n        return true;\n    }\n}\n"
    },
    "PausableSell.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./Ownable.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract PausableSell is Ownable {\n    event SellPause();\n    event SellUnpause();\n\n    bool public Sellpaused = false;\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier SellWhenNotPaused() {\n        require(!Sellpaused);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier SellWhenPaused() {\n        require(Sellpaused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function Sellpause() public onlyOwner SellWhenNotPaused returns (bool) {\n        Sellpaused = true;\n        emit SellPause();\n        return true;\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function Sellunpause() public onlyOwner SellWhenPaused returns (bool) {\n        Sellpaused = false;\n        emit SellUnpause();\n        return true;\n    }\n}\n"
    },
    "Presale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./Ownable.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Presale is Ownable {\n    event PausePresale();\n    event UnpausePresale();\n\n    bool public pausedPresale = false;\n\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPausedPresale() {\n        require(!pausedPresale);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier whenPausedPresale() {\n        require(pausedPresale);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pausePresale() public onlyOwner whenNotPausedPresale returns (bool) {\n        pausedPresale = true;\n        emit PausePresale();\n        return true;\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpausePresale() public onlyOwner whenPausedPresale returns (bool) {\n        pausedPresale = false;\n        emit UnpausePresale();\n        return true;\n    }\n}\n"
    },
    "PriceConsumerV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceConsumerV3 {\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: Rinkeby\n     * Decimal: 8\n     * Aggregator: ETH / USD\t\n     * Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n     */\n    constructor() {\n        priceFeed = AggregatorV3Interface(\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        );\n    }\n\n    /**\n     * Returns the latest price\n     */\n    function getEthUsd() public view returns (int256) {\n        (\n            uint80 roundID,\n            int256 price,\n            uint256 startedAt,\n            uint256 timeStamp,\n            uint80 answeredInRound\n        ) = priceFeed.latestRoundData();\n        // If the round is not complete yet, timestamp is 0\n        require(timeStamp > 0, \"Round not complete\");\n        return price;\n    }\n}\n"
    },
    "SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "Stakeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @notice Stakeable is a contract who is ment to be inherited by other contract that wants Staking capabilities\n */\ncontract Stakeable is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @notice Constructor since this contract is not ment to be used without inheritance\n     * push once to stakeholders for it to work proplerly\n     */\n    constructor() {\n        // This push is needed so we avoid index 0 causing bug of index-1\n        stakeholders.push();\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        address user;\n        uint256 amount;\n        uint256 sinceBlock;\n        uint256 untilBlock;\n        uint256 rewardRate;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n    }\n    /**\n     * @notice Stakeholder is a staker that has active stakes\n     */\n    struct Stakeholder {\n        address user;\n        Stake[] address_stakes;\n    }\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        Stake[] stakes;\n    }\n\n    /**\n     * @notice\n     *   This is a array where we store all Stakes that are performed on the Contract\n     *   The stakes for each address are stored at a certain index, the index can be found using the stakes mapping\n     */\n    Stakeholder[] internal stakeholders;\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => uint256) internal stakes;\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 index,\n        uint256 sinceBlock,\n        uint256 untilBlock,\n        uint256 rewardRate\n    );\n\n    // ---------- STAKES ----------\n\n    /**\n     * @notice _addStakeholder takes care of adding a stakeholder to the stakeholders array\n     */\n    function _addStakeholder(address staker) internal returns (uint256) {\n        // Push a empty item to the Array to make space for our new stakeholder\n        stakeholders.push();\n        // Calculate the index of the last item in the array by Len-1\n        uint256 userIndex = stakeholders.length - 1;\n        // Assign the address to the new index\n        stakeholders[userIndex].user = staker;\n        // Add index to the stakeHolders\n        stakes[staker] = userIndex;\n        return userIndex;\n    }\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function _stake(\n        uint256 _amount,\n        uint256 _untilBlock,\n        uint256 _rewardRate\n    ) internal {\n        // Simple check so that user does not stake 0\n        require(_amount > 0, \"Cannot stake nothing\");\n\n        // Mappings in solidity creates all values, but empty, so we can just check the address\n        uint256 index = stakes[_msgSender()];\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 sinceBlock = block.timestamp;\n        // See if the staker already has a staked index or if its the first time\n        if (index == 0) {\n            // This stakeholder stakes for the first time\n            // We need to add him to the stakeHolders and also map it into the Index of the stakes\n            // The index returned will be the index of the stakeholder in the stakeholders array\n            index = _addStakeholder(_msgSender());\n        }\n\n        uint256 timeToDistribute = sinceBlock + _untilBlock;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n        stakeholders[index].address_stakes.push(\n            Stake(\n                _msgSender(),\n                _amount,\n                sinceBlock,\n                timeToDistribute,\n                _rewardRate,\n                0\n            )\n        );\n        // Emit an event that the stake has occured\n        emit Staked(\n            _msgSender(),\n            _amount,\n            index,\n            sinceBlock,\n            timeToDistribute,\n            _rewardRate\n        );\n    }\n\n    /**\n     * @notice A method to the aggregated stakes from all stakeholders.\n     * @return uint256 The aggregated stakes from all stakeholders.\n     */\n    function _totalStakes() internal view returns (uint256) {\n        uint256 __totalStakes = 0;\n        for (uint256 s = 0; s < stakeholders.length; s += 1) {\n            __totalStakes =\n                __totalStakes +\n                stakeholders[s].address_stakes.length;\n        }\n\n        return __totalStakes;\n    }\n\n    /**\n     * @notice\n     * calculateStakeReward is used to calculate how much a user should be rewarded for their stakes\n     * and the duration the stake has been active\n     */\n\n    function calculateStakeRewardBlock(Stake memory _current_stake)\n        internal\n        pure\n        returns (uint256)\n    {\n        // Current staked Amount : staked amount *stake fee — unstaked amount *unstake fee\n        // RewardRate : APY %\n        // TimeDiff : current timestamp — last timestamp\n        // RewardInterval: 365 days\n\n        return\n            (1 + (_current_stake.rewardRate / 1) * 1 - 1) *\n            _current_stake.amount;\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the acount\n     * Will also calculateStakeReward and reset timer\n     */\n    function _withdrawStake(uint256 amount, uint256 index)\n        internal\n        returns (uint256)\n    {\n        // Grab user_index which is the index to use to grab the Stake[]\n        uint256 user_index = stakes[_msgSender()];\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n\n        require(\n            block.timestamp >= current_stake.untilBlock,\n            \"Staking: You cannot withdraw, it is still in its authorized blocking time\"\n        );\n\n        require(\n            current_stake.amount >= amount,\n            \"Staking: Cannot withdraw more than you have staked\"\n        );\n\n        // Calculate available Reward first before we start modifying data\n        uint256 reward = calculateStakeRewardBlock(current_stake);\n\n        // Remove by subtracting the money unstaked\n        current_stake.amount = current_stake.amount - amount;\n        // If stake is empty, 0, then remove it from the array of stakes\n        if (current_stake.amount == 0) {\n            delete stakeholders[user_index].address_stakes[index];\n        } else {\n            // If not empty then replace the value of it\n            stakeholders[user_index]\n                .address_stakes[index]\n                .amount = current_stake.amount;\n            // Reset timer of stake\n            stakeholders[user_index].address_stakes[index].sinceBlock = block\n                .timestamp;\n        }\n\n        return amount + reward;\n    }\n\n    /**\n     * @notice\n     * hasStake is used to check if a account has stakes and the total amount along with all the seperate stakes\n     */\n    function hasStake(address _staker)\n        public\n        view\n        returns (StakingSummary memory)\n    {\n        // totalStakeAmount is used to count total staked amount of the address\n        uint256 totalStakeAmount;\n        // Keep a summary in memory since we need to calculate this\n        StakingSummary memory summary = StakingSummary(\n            0,\n            stakeholders[stakes[_staker]].address_stakes\n        );\n\n        // Itterate all stakes and grab amount of stakes\n        for (uint256 s = 0; s < summary.stakes.length; s += 1) {\n            uint256 availableReward = calculateStakeRewardBlock(\n                summary.stakes[s]\n            );\n            summary.stakes[s].claimable = availableReward;\n            totalStakeAmount = totalStakeAmount + summary.stakes[s].amount;\n        }\n        // Assign calculate amount to summary\n        summary.total_amount = totalStakeAmount;\n        return summary;\n    }\n\n    /**\n     */\n    function getTime() public view returns (uint256 time) {\n        return block.timestamp; // timestamp of the current block in seconds since the epoch\n    }\n}\n"
    },
    "Vendor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./Ownable.sol\";\nimport \"./PausableSell.sol\";\n\nimport \"./SafeMath.sol\";\nimport \"./Presale.sol\";\nimport \"./DevToken.sol\";\nimport \"./PriceConsumerV3.sol\";\n\ncontract Vendor is Context, Ownable, PausableSell, Presale, PriceConsumerV3 {\n    // Our Token Contract\n    DevToken devToken;\n\n    using SafeMath for uint256;\n\n    // token price for ETH\n    uint256 public tokensPerEth = 100;\n\n    /*\n     * variables to obtain reward for purchase\n     */\n    uint256 bonusA = 10000000000; // 100 Token\n    uint256 bonusB = 100000000000; // 1000 Token\n    uint256 bonusC = 500000000000; // 5000 Token\n    uint256 bonusD = 1000000000000; // 10000 Token\n    uint256 minimum_purchase_amount = 10000000000; // 100 Token\n\n    // Event that log buy operation\n    event BuyTokens(address buyer, uint256 amountOfETH, uint256 amountOfTokens);\n    event BonusTreeTokens(address inviter, uint256 commissionInviter);\n    event SellTokens(\n        address seller,\n        uint256 amountOfTokens,\n        uint256 amountOfETH\n    );\n\n    constructor(address tokenAddress) {\n        devToken = DevToken(tokenAddress);\n    }\n\n    /**\n     * @notice Allow users to buy tokens for ETH\n     */\n    function buyTokens(address inviter)\n        public\n        payable\n        returns (uint256 tokenAmount)\n    {\n        require(msg.value > 0, \"Send ETH to buy some tokens\");\n\n        // precio variable por token // servicio chainlink\n        uint256 _price = uint256(getEthUsd()) / 10**8; // ETH/USD\n        uint256 amountToBuy = (msg.value * _price) / 10**10;\n\n        // Check that the requested amount of tokens to sell is more than 100\n        require(\n            amountToBuy >= minimum_purchase_amount,\n            \"DevToken: the initial amount must be greater than 100 jdb\"\n        );\n\n        // check if the Vendor Contract has enough amount of tokens for the transaction\n        uint256 vendorBalance = devToken.balanceOf(address(this));\n        require(\n            vendorBalance >= amountToBuy,\n            \"Vendor contract has not enough tokens in its balance\"\n        );\n\n        // variables mas bonus\n        uint256 amountToBuyMoreBonus = 0;\n        if (!pausedPresale) {\n            // pre-sale bonus calculation\n            amountToBuyMoreBonus = amountToBuy + calculateBonus(amountToBuy);\n\n            if (inviter != address(0) && inviter != address(this)) {\n                uint256 commissionInviter = amountToBuy.mul(10).div(100);\n\n                bool sent = devToken.transfer(inviter, commissionInviter);\n                require(\n                    sent,\n                    \"Commission Inviter Failed to transfer token to inviter\"\n                );\n\n                emit BonusTreeTokens(inviter, commissionInviter);\n            }\n        } else {\n            amountToBuyMoreBonus = amountToBuy;\n        }\n\n        // Transfer token to the msg.sender\n        bool sent = devToken.transfer(_msgSender(), amountToBuyMoreBonus);\n        require(sent, \"Failed to transfer token to user\");\n\n        // emit the event\n        emit BuyTokens(_msgSender(), msg.value, amountToBuyMoreBonus);\n\n        return amountToBuyMoreBonus;\n    }\n\n    /**\n     * @notice Allow users to sell tokens for ETH\n     */\n    function sellTokens(uint256 tokenAmountToSell) public SellWhenNotPaused {\n        // Check that the requested amount of tokens to sell is more than 0\n        require(\n            tokenAmountToSell > 0,\n            \"Specify an amount of token greater than zero\"\n        );\n\n        // Check that the user's token balance is enough to do the swap\n        uint256 userBalance = devToken.balanceOf(_msgSender());\n        require(\n            userBalance >= tokenAmountToSell,\n            \"Your balance is lower than the amount of tokens you want to sell\"\n        );\n\n        // Check that the Vendor's balance is enough to do the swap\n        // precio fijo por token\n        // uint256 amountOfETHToTransfer = tokenAmountToSell / tokensPerEth;\n\n        // precio variable por token // servicio chainlink\n        int256 _price = getEthUsd() / 10**8;\n        uint256 amountOfETHToTransfer = tokenAmountToSell / uint256(_price);\n\n        uint256 ownerETHBalance = address(this).balance;\n        require(\n            ownerETHBalance >= amountOfETHToTransfer,\n            \"Vendor has not enough funds to accept the sell request\"\n        );\n\n        bool sent = devToken.transferFrom(\n            _msgSender(),\n            address(this),\n            tokenAmountToSell\n        );\n        require(sent, \"Failed to transfer tokens from user to vendor\");\n\n        (sent, ) = _msgSender().call{value: amountOfETHToTransfer}(\"\");\n        require(sent, \"Failed to send ETH to the user\");\n    }\n\n    /**\n     * @notice Allow the owner of the contract to withdraw ETH\n     */\n    function withdraw() public onlyOwner {\n        uint256 ownerBalance = address(this).balance;\n        require(ownerBalance > 0, \"Owner has not balance to withdraw\");\n\n        (bool sent, ) = _msgSender().call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send user balance back to the owner\");\n    }\n\n    /**\n     * @notice we get the bonus according to the purchase\n     */\n    function calculateBonus(uint256 tokenAmountToBuy)\n        internal\n        view\n        returns (uint256)\n    {\n        require(tokenAmountToBuy > 0, \"must buy some tokens\");\n\n        uint256 result;\n\n        if (tokenAmountToBuy <= bonusA) {\n            // 5% de beneficio\n            result = 0;\n        } else if (tokenAmountToBuy > bonusA && tokenAmountToBuy <= bonusB) {\n            // 10% de beneficio\n            result = (tokenAmountToBuy.mul(5)).div(100);\n        } else if (tokenAmountToBuy > bonusB && tokenAmountToBuy <= bonusC) {\n            // 15% de beneficio\n            result = (tokenAmountToBuy.mul(10)).div(100);\n        } else if (tokenAmountToBuy > bonusC && tokenAmountToBuy <= bonusD) {\n            // 20% de beneficio\n            result = (tokenAmountToBuy.mul(15)).div(100);\n        } else if (tokenAmountToBuy > bonusD) {\n            // 25% de beneficio\n            result = (tokenAmountToBuy.mul(20)).div(100);\n        }\n        return result;\n    }\n\n    /**\n     * @dev cambiar el precio de los tokens\n     */\n    function changeMinimumPurchaseAmount(uint256 _minimum_purchase_amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        minimum_purchase_amount = _minimum_purchase_amount;\n        return true;\n    }\n}\n"
    }
  }
}