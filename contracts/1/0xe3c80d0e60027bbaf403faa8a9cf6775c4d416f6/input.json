{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MinimalLenderFirstResortOverlay.sol": {
      "content": "pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract GebLenderFirstResortRewardsLike {\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n    function toggleBypassAuctions() virtual external;\r\n}\r\ncontract MinimalLenderFirstResortOverlay is GebAuth {\r\n    GebLenderFirstResortRewardsLike public staking;\r\n\r\n    // Max amount of staked tokens to keep\r\n    uint256                         public maxStakedTokensToKeep;\r\n\r\n    constructor(address staking_, uint256 maxStakedTokensToKeep_) public GebAuth() {\r\n        require(staking_ != address(0), \"MinimalLenderFirstResortOverlay/null-address\");\r\n        require(maxStakedTokensToKeep_ > 0, \"MinimalLenderFirstResortOverlay/null-maxStakedTokensToKeep\");\r\n        staking               = GebLenderFirstResortRewardsLike(staking_);\r\n        maxStakedTokensToKeep = maxStakedTokensToKeep_;\r\n    }\r\n\r\n    /*\r\n    * @notify Modify parameters\r\n    * @param parameter Must be either minStakedTokensToKeep, escrowPaused, tokensToAuction or systemCoinsToRequest\r\n    * @param data The new value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"minStakedTokensToKeep\") {\r\n            require(data <= maxStakedTokensToKeep, \"MinimalLenderFirstResortOverlay/minStakedTokensToKeep-over-limit\");\r\n            staking.modifyParameters(parameter, data);\r\n        } else if (\r\n            parameter == \"escrowPaused\"    ||\r\n            parameter == \"tokensToAuction\" ||\r\n            parameter == \"systemCoinsToRequest\"\r\n            ) staking.modifyParameters(parameter, data);\r\n        else revert(\"MinimalLenderFirstResortOverlay/modify-forbidden-param\");\r\n    }\r\n\r\n    /*\r\n    * @notify Bypass Auctions\r\n    */\r\n    function toggleBypassAuctions() external isAuthorized {\r\n        staking.toggleBypassAuctions();\r\n    }\r\n\r\n\r\n}"
    }
  }
}