{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/20level.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-01-28\n*/\n\n/**\n\n\n* Hello\n * This contract belongs to ram (fixed)\n * URL: https://ethereums.live\n * \n */\n\npragma solidity  ^0.5.12;\n\ncontract ram {\n  address public creator;\n  uint MAX_LEVEL = 10;\n  uint REFERRALS_LIMIT = 2;\n  uint LEVEL_EXPIRE_TIME = 180 days;\n  mapping (address => User) public users;\n  mapping (uint => address) public userAddresses;\n  uint public last_uid;\n  mapping (uint => uint) public levelPrice;\n  mapping (uint => uint) public uplinesToRcvEth;\n  mapping (address => ProfitsRcvd) public rcvdProfits;\n  mapping (address => ProfitsGiven) public givenProfits;\n  mapping (address => LostProfits) public lostProfits;\n  \n  struct User {\n    uint id;\n    uint referrerID;\n    address[] referrals;\n    mapping (uint => uint) levelExpiresAt;\n  }\n  \n  struct ProfitsRcvd {\n    uint uid;\n    uint[] fromId;\n    address[] fromAddr;\n    uint[] amount;\n  }\n  \n  struct LostProfits {\n    uint uid;\n    uint[] toId;\n    address[] toAddr;\n    uint[] amount;\n    uint[] level;\n  }\n  \n  struct ProfitsGiven {\n    uint uid;\n    uint[] toId;\n    address[] toAddr;\n    uint[] amount;\n    uint[] level;\n    uint[] line;\n  }\n\n  modifier validLevelAmount(uint _level) {\n    require(msg.value == levelPrice[_level], 'Invalid level amount sent');\n    _;\n  }\n  modifier userRegistered() {\n    require(users[msg.sender].id != 0, 'User does not exist');\n    _;\n  }\n  modifier validReferrerID(uint _referrerID) {\n    require(_referrerID > 0 && _referrerID <= last_uid, 'Invalid referrer ID');\n    _;\n  }\n  modifier userNotRegistered() {\n    require(users[msg.sender].id == 0, 'User is already registered');\n    _;\n  }\n  modifier validLevel(uint _level) {\n    require(_level > 0 && _level <= MAX_LEVEL, 'Invalid level entered');\n    _;\n  }\n  event RegisterUserEvent(address indexed user, address indexed referrer, uint time);\n  event BuyLevelEvent(address indexed user, uint indexed level, uint time);\n  event GetLevelProfitEvent(address indexed user, address indexed referral, uint indexed level, uint time);\n  event LostLevelProfitEvent(address indexed user, address indexed referral, uint indexed level, uint time);\n\n  constructor() public {\n    last_uid++;\n    creator = msg.sender;\n    levelPrice[1] = 0.1 ether;\n    uplinesToRcvEth[1] = 10;\n\n    users[creator] = User({\n      id: last_uid,\n      referrerID: 0,\n      referrals: new address[](0)\n    });\n    userAddresses[last_uid] = creator;\n    // enter all levels expiry for creator\n    for (uint i = 1; i <= MAX_LEVEL; i++) {\n      users[creator].levelExpiresAt[i] = 1 << 37;\n    }\n  }\n\n\n  function registerUser(uint _referrerID)\n    public\n    payable\n    userNotRegistered()\n    validReferrerID(_referrerID)\n    validLevelAmount(1)\n  {\n    if (users[userAddresses[_referrerID]].referrals.length >= REFERRALS_LIMIT) {\n      _referrerID = users[findReferrer(userAddresses[_referrerID])].id;\n    }\n    last_uid++;\n    users[msg.sender] = User({\n      id: last_uid,\n      referrerID: _referrerID,\n      referrals: new address[](0)\n    });\n    userAddresses[last_uid] = msg.sender;\n    users[msg.sender].levelExpiresAt[1] = now + LEVEL_EXPIRE_TIME;\n    users[userAddresses[_referrerID]].referrals.push(msg.sender);\n\n    transferLevelPayment(1, msg.sender);\n    emit RegisterUserEvent(msg.sender, userAddresses[_referrerID], now);\n  }\n\n  function buyLevel(uint _level)\n    public\n    payable\n    userRegistered()\n    validLevel(_level)\n    validLevelAmount(_level)\n  {\n    for (uint l = _level - 1; l > 0; l--) {\n      require(getUserLevelExpiresAt(msg.sender, l) >= now, 'Buy previous level first');\n    }\n    if (getUserLevelExpiresAt(msg.sender, _level) == 0) {\n      users[msg.sender].levelExpiresAt[_level] = now + LEVEL_EXPIRE_TIME;\n    } else {\n      users[msg.sender].levelExpiresAt[_level] += LEVEL_EXPIRE_TIME;\n    }\n\n    transferLevelPayment(_level, msg.sender);\n    emit BuyLevelEvent(msg.sender, _level, now);\n  }\n\n  function findReferrer(address _user)\n    public\n    view\n    returns (address)\n  {\n    if (users[_user].referrals.length < REFERRALS_LIMIT) {\n      return _user;\n    }\n\n    address[1632] memory referrals;\n    referrals[0] = users[_user].referrals[0];\n    referrals[1] = users[_user].referrals[1];\n\n    address referrer;\n\n    for (uint i = 0; i < 16382; i++) {\n      if (users[referrals[i]].referrals.length < REFERRALS_LIMIT) {\n        referrer = referrals[i];\n        break;\n      }\n\n      if (i >= 8191) {\n        continue;\n      }\n\n      referrals[(i+1)*2] = users[referrals[i]].referrals[0];\n      referrals[(i+1)*2+1] = users[referrals[i]].referrals[1];\n    }\n\n    require(referrer != address(0), 'Referrer not found');\n    return referrer;\n  }\n\n  function transferLevelPayment(uint _level, address _user) internal {\n    uint height = _level;\n    address referrer = getUserUpline(_user, height);\n\n    if (referrer == address(0)) { referrer = creator; }\n   \n    uint uplines = uplinesToRcvEth[_level];\n    bool chkLostProfit = false;\n    address lostAddr;\n    for (uint i = 1; i <= uplines; i++) {\n      referrer = getUserUpline(_user, i);\n      \n      if(chkLostProfit){\n        lostProfits[lostAddr].uid = users[referrer].id;\n        lostProfits[lostAddr].toId.push(users[referrer].id);\n        lostProfits[lostAddr].toAddr.push(referrer);\n        lostProfits[lostAddr].amount.push(levelPrice[_level] / uplinesToRcvEth[_level]);\n        lostProfits[lostAddr].level.push(getUserLevel(referrer));\n        chkLostProfit = false;\n        \n        emit LostLevelProfitEvent(referrer, msg.sender, _level, 0);\n      }\n      \n      if (referrer != address(0) && (users[_user].levelExpiresAt[_level] == 0 || getUserLevelExpiresAt(referrer, _level) < now)) {\n        chkLostProfit = true;\n        uplines++;\n        lostAddr = referrer;\n        continue;\n      }\n      else {chkLostProfit = false;}\n      \n      //add msg.value / uplinesToRcvEth[_level] in user's earned\n      \n      if (referrer == address(0)) { referrer = creator; }\n      if (address(uint160(referrer)).send( msg.value / uplinesToRcvEth[_level] )) {\n        rcvdProfits[referrer].uid = users[referrer].id;\n        rcvdProfits[referrer].fromId.push(users[msg.sender].id);\n        rcvdProfits[referrer].fromAddr.push(msg.sender);\n        rcvdProfits[referrer].amount.push(levelPrice[_level] / uplinesToRcvEth[_level]);\n        \n        givenProfits[msg.sender].uid = users[msg.sender].id;\n        givenProfits[msg.sender].toId.push(users[referrer].id);\n        givenProfits[msg.sender].toAddr.push(referrer);\n        givenProfits[msg.sender].amount.push(levelPrice[_level] / uplinesToRcvEth[_level]);\n        givenProfits[msg.sender].level.push(getUserLevel(referrer));\n        givenProfits[msg.sender].line.push(i);\n        \n        emit GetLevelProfitEvent(referrer, msg.sender, _level, now);\n      }\n    }\n  }\n\n  function getUserUpline(address _user, uint height)\n    public\n    view\n    returns (address)\n  {\n    if (height <= 0 || _user == address(0)) {\n      return _user;\n    }\n\n    return this.getUserUpline(userAddresses[users[_user].referrerID], height - 1);\n  }\n\n  function getUserReferrals(address _user)\n    public\n    view\n    returns (address[] memory)\n  {\n    return users[_user].referrals;\n  }\n  \n  \n  function getUserProfitsFromId(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n      return rcvdProfits[_user].fromId;\n  }\n  \n  function getUserProfitsFromAddr(address _user)\n    public\n    view\n    returns (address[] memory)\n  {\n      return rcvdProfits[_user].fromAddr;\n  }\n  \n  function getUserProfitsAmount(address _user)\n    public\n    view\n    returns (uint256[] memory)\n  {\n      return rcvdProfits[_user].amount;\n  }\n  \n  \n  \n  function getUserProfitsGivenToId(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n      return givenProfits[_user].toId;\n  }\n  \n  function getUserProfitsGivenToAddr(address _user)\n    public\n    view\n    returns (address[] memory)\n  {\n      return givenProfits[_user].toAddr;\n  }\n  \n  function getUserProfitsGivenToAmount(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n      return givenProfits[_user].amount;\n  }\n  \n  function getUserProfitsGivenToLevel(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n      return givenProfits[_user].level;\n  }\n  \n  function getUserProfitsGivenToLine(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n      return givenProfits[_user].line;\n  }\n  \n  \n  function getUserLostsToId(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n    return (lostProfits[_user].toId);\n  }\n  \n  function getUserLostsToAddr(address _user)\n    public\n    view\n    returns (address[] memory)\n  {\n    return (lostProfits[_user].toAddr);\n  }\n  \n  function getUserLostsAmount(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n    return (lostProfits[_user].amount);\n  }\n  \n  function getUserLostsLevel(address _user)\n    public\n    view\n    returns (uint[] memory)\n  {\n    return (lostProfits[_user].level);\n  }\n  \n\n  function getUserLevelExpiresAt(address _user, uint _level)\n    public\n    view\n    returns (uint)\n  {\n    return users[_user].levelExpiresAt[_level];\n  }\n\n  \n\n  function () external payable {\n    revert();\n  }\n  \n  \n  function getUserLevel (address _user) public view returns (uint) {\n      if (getUserLevelExpiresAt(_user, 1) < now) {\n          return (0);\n      }\n      else if (getUserLevelExpiresAt(_user, 2) < now) {\n          return (1);\n      }\n      else if (getUserLevelExpiresAt(_user, 3) < now) {\n          return (2);\n      }\n      else if (getUserLevelExpiresAt(_user, 4) < now) {\n          return (3);\n      }\n      else if (getUserLevelExpiresAt(_user, 5) < now) {\n          return (4);\n      }\n      else if (getUserLevelExpiresAt(_user, 6) < now) {\n          return (5);\n      }\n      else if (getUserLevelExpiresAt(_user, 7) < now) {\n          return (6);\n      }\n      else if (getUserLevelExpiresAt(_user, 8) < now) {\n          return (7);\n      }\n      else if (getUserLevelExpiresAt(_user, 9) < now) {\n          return (8);\n      }\n      else if (getUserLevelExpiresAt(_user, 10) < now) {\n          return (9);\n      }\n  }\n  \n  function getUserDetails (address _user) public view returns (uint, uint) {\n      if (getUserLevelExpiresAt(_user, 1) < now) {\n          return (1, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 2) < now) {\n          return (2, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 3) < now) {\n          return (3, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 4) < now) {\n          return (4, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 5) < now) {\n          return (5, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 6) < now) {\n          return (6, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 7) < now) {\n          return (7, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 8) < now) {\n          return (8, users[_user].id);\n      }\n      else if (getUserLevelExpiresAt(_user, 9) < now) {\n          return (9, users[_user].id);\n      }\n  }\n}"
    }
  }
}