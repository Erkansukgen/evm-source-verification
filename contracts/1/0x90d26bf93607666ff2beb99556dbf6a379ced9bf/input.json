{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Groups.sol":{"content":"pragma solidity 0.6.6;\r\n\r\nimport \"./IGroupSchema.sol\";\r\nimport \"./StorageOwners.sol\";\r\nimport \"./SafeMath.sol\";\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Groups is IGroupSchema, StorageOwners {\r\n    \r\n    using SafeMath for uint256;\r\n    // list of group records\r\n    Group[] private Groups;\r\n    //Mapping that enables ease of traversal of the group records\r\n    mapping(uint256 => RecordIndex) private GroupIndexer;\r\n\r\n    // Mapping that enables ease of traversal of groups created by an addressor\r\n    mapping(address => RecordIndex[]) private GroupForCreatorIndexer;\r\n\r\n    // indexes a group location using the group name\r\n    mapping(string => RecordIndex) private GroupIndexerByName;\r\n    \r\n    mapping(address => uint256) private XendTokensReward;\r\n\r\n\r\n    GroupMember[] GroupMembers;\r\n\r\n    //Mapping of a groups members. Key is the group id,\r\n    mapping(uint256 => RecordIndex[]) private GroupMembersIndexer;\r\n\r\n    mapping(address => RecordIndex[]) private GroupMembersIndexerByDepositor;\r\n    mapping(uint256 => mapping(address => RecordIndex))\r\n        private GroupMembersDeepIndexer;\r\n\r\n    // list of group records\r\n    Member[] private Members;\r\n\r\n    //Mapping that enables ease of traversal of the member records. key is the member address\r\n    mapping(address => RecordIndex) private MemberIndexer;\r\n\r\n    uint256 lastGroupId;\r\n\r\n    address[] tokenAddresses;\r\n    uint256 totalEthersDeposited;\r\n    mapping(address => uint256) totalTokensDeposited;\r\n\r\n    function getLengthOfTokenAddressesUsedInDeposit()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return tokenAddresses.length;\r\n    }\r\n    \r\n    function getXendTokensReward(address payable receiverAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return XendTokensReward[receiverAddress];\r\n    }\r\n\r\n   function setXendTokensReward(\r\n        address payable receiverAddress,\r\n        uint256 amount\r\n    ) external onlyStorageOracle {\r\n        XendTokensReward[receiverAddress] = XendTokensReward[receiverAddress]\r\n            .add(amount);\r\n    }\r\n    function incrementTokenDeposit(address tokenAddress, uint256 amount)\r\n        external\r\n        onlyStorageOracle\r\n        returns (uint256)\r\n    {\r\n        if (totalTokensDeposited[tokenAddress] == 0) {\r\n            tokenAddresses.push(tokenAddress);\r\n        }\r\n        totalTokensDeposited[tokenAddress] += amount;\r\n        return totalTokensDeposited[tokenAddress];\r\n    }\r\n\r\n    function decrementTokenDeposit(address tokenAddress, uint256 amount)\r\n        external\r\n        onlyStorageOracle\r\n        returns (uint256)\r\n    {\r\n        uint256 currentAmount = totalTokensDeposited[tokenAddress];\r\n        require(\r\n            currentAmount >= amount,\r\n            \"deposit balance overdraft is not allowed\"\r\n        );\r\n        totalTokensDeposited[tokenAddress] -= amount;\r\n        return totalTokensDeposited[tokenAddress];\r\n    }\r\n\r\n    function getTokenDeposit(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalTokensDeposited[tokenAddress];\r\n    }\r\n\r\n    function incrementEtherDeposit(uint256 amount)\r\n        external\r\n        onlyStorageOracle\r\n        returns (uint256)\r\n    {\r\n        totalEthersDeposited += amount;\r\n        return totalEthersDeposited;\r\n    }\r\n\r\n    function decrementEtherDeposit(uint256 amount)\r\n        external\r\n        onlyStorageOracle\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            totalEthersDeposited >= amount,\r\n            \"deposit balance overdraft is not allowed\"\r\n        );\r\n        totalEthersDeposited -= amount;\r\n        return totalEthersDeposited;\r\n    }\r\n\r\n    function getEtherDeposit() external view returns (uint256) {\r\n        return totalEthersDeposited;\r\n    }\r\n\r\n    function createMember(address payable depositor)\r\n        external\r\n        onlyStorageOracle\r\n    {\r\n        Member memory member = Member(true, depositor);\r\n\r\n        bool exist = _doesMemberExist(depositor);\r\n\r\n        require(exist == false, \"Member already exists\");\r\n\r\n        RecordIndex memory recordIndex = RecordIndex(true, Members.length);\r\n\r\n        Members.push(member);\r\n        MemberIndexer[depositor] = recordIndex;\r\n    }\r\n\r\n    function getMember(address _address) external view returns (address) {\r\n        uint256 index = _getMemberIndex(_address);\r\n        Member memory member = Members[index];\r\n\r\n        return (member._address);\r\n    }\r\n    \r\n    function getGroup() external view returns (Group [] memory) {\r\n        return Groups;\r\n    }\r\n\r\n    function _getMemberIndex(address _address) internal view returns (uint256) {\r\n        bool doesMemberExist = MemberIndexer[_address].exists;\r\n        require(doesMemberExist == true, \"Member not found\");\r\n\r\n        uint256 index = MemberIndexer[_address].index;\r\n        return index;\r\n    }\r\n\r\n    function createGroup(\r\n        string calldata name,\r\n        string calldata symbol,\r\n        address groupCreator\r\n    ) external onlyStorageOracle returns (uint256) {\r\n        bool exist = _doesGroupExist(name);\r\n        require(exist == false, \"Group name has already been used\");\r\n\r\n        lastGroupId += 1;\r\n        Group memory group = Group(\r\n            true,\r\n            lastGroupId,\r\n            name,\r\n            symbol,\r\n            payable(groupCreator)\r\n        );\r\n        uint256 index = Groups.length;\r\n        RecordIndex memory recordIndex = RecordIndex(true, index);\r\n        Groups.push(group);\r\n        GroupIndexer[lastGroupId] = recordIndex;\r\n        GroupIndexerByName[name] = recordIndex;\r\n        GroupForCreatorIndexer[groupCreator].push(recordIndex);\r\n\r\n        return lastGroupId;\r\n    }\r\n\r\n    function updateGroup(\r\n        uint256 id,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        address payable creatorAddress\r\n    ) external onlyStorageOracle {\r\n        uint256 index = _getGroupIndex(id);\r\n        Groups[index].name = name;\r\n        Groups[index].symbol = symbol;\r\n        Groups[index].creatorAddress = creatorAddress;\r\n    }\r\n\r\n    function doesGroupExist(uint256 groupId) external view returns (bool) {\r\n        return _doesGroupExist(groupId);\r\n    }\r\n\r\n    function _doesGroupExist(uint256 groupId) internal view returns (bool) {\r\n        bool groupExist = GroupIndexer[groupId].exists;\r\n        return groupExist;\r\n    }\r\n\r\n    function doesGroupExist(string calldata groupName)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _doesGroupExist(groupName);\r\n    }\r\n\r\n    function _doesGroupExist(string memory groupName)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool groupExist = GroupIndexerByName[groupName].exists;\r\n\r\n        return groupExist;\r\n    }\r\n\r\n    function doesMemberExist(address depositor) external view returns (bool) {\r\n        return _doesMemberExist(depositor);\r\n    }\r\n\r\n    function _doesMemberExist(address depositor) internal view returns (bool) {\r\n        bool exist = MemberIndexer[depositor].exists;\r\n\r\n        if (exist) return true;\r\n        else return false;\r\n    }\r\n\r\n    function createGroupMember(uint256 groupId, address payable depositor)\r\n        external\r\n        onlyStorageOracle\r\n    {\r\n        bool exist = _doesGroupMemberExist(groupId, depositor);\r\n        require(exist == false, \"Group member exists\");\r\n\r\n        RecordIndex memory recordIndex = RecordIndex(true, GroupMembers.length);\r\n\r\n        GroupMember memory groupMember = GroupMember(true, depositor, groupId);\r\n\r\n        GroupMembersIndexer[groupId].push(recordIndex);\r\n        GroupMembersIndexerByDepositor[depositor].push(recordIndex);\r\n        GroupMembersDeepIndexer[groupId][depositor] = recordIndex;\r\n        GroupMembers.push(groupMember);\r\n    }\r\n\r\n    function getGroupMember(uint256 index)\r\n        external\r\n        view\r\n        returns (address payable _address, uint256 groupId)\r\n    {\r\n        GroupMember memory groupMember = GroupMembers[index];\r\n        return (groupMember._address, groupMember.groupId);\r\n    }\r\n\r\n    function getGroupMembersDeepIndexer(uint256 groupId, address depositor)\r\n        external\r\n        view\r\n        returns (bool exists, uint256 index)\r\n    {\r\n\r\n            RecordIndex memory recordIndex\r\n         = GroupMembersDeepIndexer[groupId][depositor];\r\n        return (recordIndex.exists, recordIndex.index);\r\n    }\r\n\r\n    function getRecordIndexLengthForGroupMembersIndexer(uint256 groupId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return GroupMembersIndexer[groupId].length;\r\n    }\r\n\r\n    function getRecordIndexLengthForGroupMembersIndexerByDepositor(\r\n        address depositor\r\n    ) external view returns (uint256) {\r\n        return GroupMembersIndexerByDepositor[depositor].length;\r\n    }\r\n\r\n    function getGroupMembersIndexer(uint256 groupId, uint256 indexerLocation)\r\n        external\r\n        view\r\n        returns (bool exist, uint256 index)\r\n    {\r\n\r\n            RecordIndex memory recordIndex\r\n         = GroupMembersIndexer[groupId][indexerLocation];\r\n        return (recordIndex.exists, recordIndex.index);\r\n    }\r\n\r\n    function getGroupMembersIndexerByDepositor(\r\n        address depositor,\r\n        uint256 indexerLocation\r\n    ) external view returns (bool exist, uint256 index) {\r\n\r\n            RecordIndex memory recordIndex\r\n         = GroupMembersIndexerByDepositor[depositor][indexerLocation];\r\n        return (recordIndex.exists, recordIndex.index);\r\n    }\r\n\r\n    function doesGroupMemberExist(uint256 groupId, address depositor)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _doesGroupMemberExist(groupId, depositor);\r\n    }\r\n\r\n    function _doesGroupMemberExist(uint256 groupId, address depositor)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool exist = GroupMembersDeepIndexer[groupId][depositor].exists;\r\n        return exist;\r\n    }\r\n\r\n    function getGroupIndexer(uint256 groupId)\r\n        external\r\n        view\r\n        returns (bool exist, uint256 index)\r\n    {\r\n        RecordIndex memory recordIndex = GroupIndexer[groupId];\r\n        return (recordIndex.exists, recordIndex.index);\r\n    }\r\n\r\n    function getRecordIndexLengthForCreator(address groupCreator)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return GroupForCreatorIndexer[groupCreator].length;\r\n    }\r\n\r\n    function getGroupForCreatorIndexer(\r\n        address groupCreator,\r\n        uint256 indexerLocation\r\n    ) external view returns (bool exist, uint256 index) {\r\n\r\n            RecordIndex memory recordIndex\r\n         = GroupForCreatorIndexer[groupCreator][indexerLocation];\r\n        return (recordIndex.exists, recordIndex.index);\r\n    }\r\n\r\n    function getGroupIndexerByName(string calldata groupName)\r\n        external\r\n        view\r\n        returns (bool exist, uint256 index)\r\n    {\r\n        RecordIndex memory recordIndex = GroupIndexerByName[groupName];\r\n        return (recordIndex.exists, recordIndex.index);\r\n    }\r\n\r\n    function getGroupById(uint256 groupId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            address payable\r\n        )\r\n    {\r\n        uint256 index = _getGroupIndex(groupId);\r\n\r\n        Group storage group = Groups[index];\r\n        return (group.id, group.name, group.symbol, group.creatorAddress);\r\n    }\r\n\r\n    function getGroupByIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            address payable\r\n        )\r\n    {\r\n        return _getGroupByIndex(index);\r\n    }\r\n\r\n    function getGroupsLength() external view returns (uint256 length) {\r\n        return Groups.length;\r\n    }\r\n\r\n    function _getGroupByIndex(uint256 index)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            address payable\r\n        )\r\n    {\r\n        uint256 length = Groups.length;\r\n        require(length > index, \"Out of range\");\r\n        Group storage group = Groups[index];\r\n        return (group.id, group.name, group.symbol, group.creatorAddress);\r\n    }\r\n\r\n    function getGroupIndex(uint256 groupId) external view returns (uint256) {\r\n        return _getGroupIndex(groupId);\r\n    }\r\n\r\n    function _getGroupIndex(uint256 groupId) internal view returns (uint256) {\r\n        bool doesGroupExist = GroupIndexer[groupId].exists;\r\n        require(doesGroupExist == true, \"Group not found\");\r\n        uint256 index = GroupIndexer[groupId].index;\r\n        return index;\r\n    }\r\n}\r\n"},"IGroupSchema.sol":{"content":"pragma solidity 0.6.6;\r\n\r\ninterface IGroupSchema {\r\n    struct Group {\r\n        bool exists;\r\n        uint256 id;\r\n        string name;\r\n        string symbol;\r\n        address payable creatorAddress;\r\n    }\r\n\r\n    struct Cycle {\r\n        bool exists;\r\n        uint256 id;\r\n        uint256 groupId;\r\n        uint256 numberOfDepositors;\r\n        uint256 cycleStartTimeStamp;\r\n        uint256 cycleDuration;\r\n        uint256 maximumSlots;\r\n        bool hasMaximumSlots;\r\n        uint256 cycleStakeAmount;\r\n        // represents the total stakes of every cycle member deposits\r\n        uint256 totalStakes;\r\n        //represents the total stakes of every cycle member withdrawal\r\n        uint256 stakesClaimed;\r\n        CycleStatus cycleStatus;\r\n        // represents the number of cycle stakes that user's have cashed out on before the cycle has ended\r\n        uint256 stakesClaimedBeforeMaturity;\r\n    }\r\n\r\n    struct CycleFinancial {\r\n        bool exists;\r\n        uint256 cycleId;\r\n        //total underlying asset deposited into contract\r\n        uint256 underlyingTotalDeposits;\r\n        //total underlying asset that have been withdrawn by cycle members\r\n        uint256 underlyingTotalWithdrawn;\r\n        // underlying amount gotten after lending period has ended and shares have been reedemed for underlying asset;\r\n        uint256 underlyingBalance;\r\n        // lending shares representation of amount deposited in lending protocol\r\n        uint256 derivativeBalance;\r\n        // represents the total underlying crypto amount that has been cashed out before the cycle ended\r\n        uint256 underylingBalanceClaimedBeforeMaturity;\r\n        // represents the total derivative crypto amount that has been cashed out on before the cycle ended\r\n        uint256 derivativeBalanceClaimedBeforeMaturity;\r\n    }\r\n\r\n    struct CycleMember {\r\n        bool exist;\r\n        uint256 cycleId;\r\n        uint256 groupId;\r\n        address payable _address;\r\n        uint256 totalLiquidityAsPenalty;\r\n        uint256 numberOfCycleStakes;\r\n        uint256 stakesClaimed;\r\n        bool hasWithdrawn;\r\n    }\r\n\r\n    struct Member {\r\n        bool exists;\r\n        address payable _address;\r\n    }\r\n\r\n    struct GroupMember {\r\n        bool exists;\r\n        address payable _address;\r\n        uint256 groupId;\r\n    }\r\n\r\n    struct RecordIndex {\r\n        bool exists;\r\n        uint256 index;\r\n    }\r\n\r\n    enum CycleStatus {NOT_STARTED, ONGOING, ENDED}\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"},"StorageOwners.sol":{"content":"pragma solidity 0.6.6;\r\n\r\ncontract StorageOwners {\r\n    address owner;\r\n    mapping(address => bool) private storageOracles;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function activateStorageOracle(address oracle) external onlyOwner {\r\n        storageOracles[oracle] = true;\r\n    }\r\n\r\n    function deactivateStorageOracle(address oracle) external onlyOwner {\r\n        storageOracles[oracle] = false;\r\n    }\r\n\r\n    function reAssignStorageOracle(address newOracle)\r\n        external\r\n        onlyStorageOracle\r\n    {\r\n        storageOracles[msg.sender] = false;\r\n        storageOracles[newOracle] = true;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"unauthorized access to contract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStorageOracle() {\r\n        bool hasAccess = storageOracles[msg.sender];\r\n        require(hasAccess, \"unauthorized access to contract\");\r\n        _;\r\n    }\r\n}\r\n"}}}