{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"HowlStore_flat.sol":{"content":"\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: contracts/HowlStore.sol\n\n\npragma solidity ^0.8.2;\n\n\ninterface IHowl {\n    function equipProperties(\n        address _caller,\n        uint256 _tokenId,\n        uint16[8] calldata _w\n    ) external;\n}\n\ninterface ISoul {\n    function mint(address _address, uint256 _amount) external;\n\n    function collectAndBurn(address _address, uint256 _amount) external;\n}\n\ncontract HowlStore is Ownable {\n    constructor(address _howlContractAddress, address _soulContractAddress)\n        Ownable()\n    {\n        howlContractAddress = _howlContractAddress;\n        soulContractAddress = _soulContractAddress;\n    }\n\n    address public howlContractAddress;\n    address public soulContractAddress;\n\n    function setHowlContractAddress(address _address) external onlyOwner {\n        howlContractAddress = _address;\n    }\n\n    function setSoulContractAddress(address _address) external onlyOwner {\n        soulContractAddress = _address;\n    }\n\n    event StorePurchase(\n        uint256 indexed _tokenId,\n        address indexed _address,\n        uint16[8] _properties,\n        uint16 _remainingQty\n    );\n\n    struct StoreItem {\n        uint16[8] properties;\n        uint16 qty;\n        uint128 soulPrice;\n    }\n\n    mapping(uint256 => StoreItem) public store;\n\n    function addStoreItem(\n        uint256 _slot,\n        uint16[8] calldata properties,\n        uint16 _qty,\n        uint128 _soulPrice\n    ) external onlyOwner {\n        store[_slot] = StoreItem(properties, _qty, _soulPrice);\n    }\n\n    function deleteStoreItems(uint256[] calldata _slotsToDelete)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < _slotsToDelete.length; i++) {\n            delete store[_slotsToDelete[i]];\n        }\n    }\n\n    function buyStoreItem(uint256 _tokenId, uint256 _slot) external {\n        StoreItem storage item = store[_slot];\n\n        require(item.qty > 0, \"HOWL Store: item is sold out or doesn't exist\");\n        item.qty -= 1;\n\n        ISoul(soulContractAddress).collectAndBurn(msg.sender, item.soulPrice);\n        IHowl(howlContractAddress).equipProperties(\n            msg.sender, // howl will verify that this address owns the token\n            _tokenId,\n            item.properties\n        );\n\n        emit StorePurchase(_tokenId, msg.sender, item.properties, item.qty);\n    }\n}\n"}}}