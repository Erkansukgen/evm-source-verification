{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/top.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external ;\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// 母合约池\r\ncontract TopPool {\r\n    event deposit_event (address bidder, uint id);\r\n    \r\n    event promote_event (address bidder, uint id);\r\n    \r\n    IERC20 usdt;                    // USDT（ERC20）\r\n    \r\n    address owner;                  // 所有者\r\n    \r\n    struct Investment {\r\n        address owner;              // 所有者\r\n        uint256 amount;             // 金额\r\n        address pool_address;       // 合约池地址\r\n        uint created_at;            // 创建时间\r\n    }\r\n    \r\n    struct Promote  {\r\n        address owner;              // 所有者\r\n        uint256 amount;             // 金额\r\n        address pool_address;       // 合约池地址\r\n        uint created_at;            // 创建时间\r\n    }\r\n    \r\n    mapping(address => uint) public sonAddress;             // 子合约地址\r\n    \r\n    uint public investmentId;                               // 入金自增ID\r\n    mapping(uint => Investment) public investments;         // 入金记录\r\n    mapping(address => uint[]) public userInvestments;      // 用户入金记录关联\r\n    \r\n    uint public promoteId;                                  // 推广大使自增id\r\n    mapping(uint => Promote) public promotes;               // 推广大使购买记录\r\n    mapping(address => uint) public userPromote;            // 用户推广大使购买记录关联\r\n    \r\n    address public quotaManage;                             // 提现管理地址\r\n    address public technologyAddress;                       // 技术版权地址\r\n    \r\n    mapping(address => uint) public admins;                 // 管理员地址\r\n    \r\n    uint public totalWithdrawalLimit;                       // 总提现额度\r\n    \r\n    constructor (IERC20 _usdt, address _quotoManage, address _technology) {\r\n        owner = msg.sender;\r\n        usdt = _usdt;\r\n        quotaManage = _quotoManage;\r\n        technologyAddress = _technology;\r\n    }\r\n    \r\n    // 用户提现操作\r\n    function withdraw (address _address, uint _amount) public {\r\n        if (msg.sender != owner && admins[msg.sender] == 0 && msg.sender != quotaManage) {\r\n            revert();\r\n        }\r\n        require(usdt.balanceOf(address(this)) >= _amount, \"Insufficient balance\");\r\n        require(totalWithdrawalLimit > _amount, \"Insufficient quota\");\r\n        totalWithdrawalLimit -= _amount;\r\n        usdt.transfer(_address, _amount);\r\n    }\r\n    \r\n    // 增加或减少总提现额度\r\n    function updateWithdrawLimit (uint _amount ,bool added) public {\r\n        require(msg.sender == quotaManage, \"No Permission\");\r\n        if (!added && totalWithdrawalLimit - _amount < 0) {\r\n            revert('Amount cannot be negative');\r\n        }\r\n        if (added) {\r\n            totalWithdrawalLimit += _amount;\r\n        } else {\r\n            totalWithdrawalLimit -= _amount;\r\n        }\r\n    }\r\n    \r\n    // 添加子级合约地址\r\n    function addSon (address _address) public {\r\n        require(msg.sender == owner);\r\n        sonAddress[_address]  = 1;\r\n    }\r\n    \r\n    // 添加管理员地址\r\n    function addAdmin (address _address) public {\r\n        require(msg.sender == owner);\r\n        admins[_address]  = 1;\r\n    }\r\n    \r\n    // 获取余额\r\n    function getBalance () public view returns (uint) {\r\n        return (usdt.balanceOf(address(this)));\r\n    }\r\n    \r\n    // 技术版权的转账\r\n    function technology (uint _amount) public {\r\n        if (msg.sender != owner && admins[msg.sender] == 0) {\r\n            revert();\r\n        }\r\n        require(usdt.balanceOf(address(this)) >= _amount, \"Insufficient balance\");\r\n        usdt.transfer(technologyAddress, _amount);\r\n    }\r\n    \r\n    // 入金\r\n    function deposit (uint _amount) public {\r\n        uint id = this.addRecord(_amount, msg.sender);\r\n        usdt.transferFrom(msg.sender, address(this), _amount);\r\n        emit deposit_event(msg.sender, id);\r\n    }\r\n    \r\n    // 增加入金记录\r\n    function addRecord (uint _amount, address _address) public returns (uint) {\r\n        if (msg.sender != address(this) && sonAddress[msg.sender] == 0) {\r\n            revert();\r\n        }\r\n        uint[] storage _userInvestments = userInvestments[_address];\r\n        investmentId += 1;\r\n        Investment storage sender = investments[investmentId];\r\n        _userInvestments.push(investmentId);\r\n        sender.owner = _address;\r\n        sender.amount = _amount;\r\n        sender.created_at = block.timestamp;\r\n        sender.pool_address = msg.sender;\r\n        return investmentId;\r\n    }\r\n    \r\n    // 购买推广大使\r\n    function buyPromote (uint _amount) public {\r\n        uint id = this.addPromote(_amount, msg.sender);\r\n        usdt.transferFrom(msg.sender, address(this), _amount);\r\n        emit promote_event(msg.sender, id);\r\n    }\r\n    \r\n    // 添加推广大使购买记录\r\n    function addPromote (uint _amount, address _address) public returns (uint) {\r\n        if (msg.sender != address(this) && sonAddress[msg.sender] == 0) {\r\n            revert();\r\n        }\r\n        promoteId += 1;\r\n        Promote storage promote = promotes[promoteId];\r\n        promote.owner = _address;\r\n        promote.amount = _amount;\r\n        promote.created_at = block.timestamp;\r\n        promote.pool_address = msg.sender;\r\n        userPromote[_address] = promoteId;\r\n        return promoteId;\r\n    }\r\n    \r\n    // 返回用户入金记录\r\n    function getUserRecord(address _address) public view returns (uint[] memory) {\r\n        return  userInvestments[_address];\r\n    }\r\n}"}}}