{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/deflator.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Deflator is IERC20 {\r\n\r\n    string public constant name = \"Deflator\";\r\n    string public constant symbol = \"DFL\";\r\n    uint8 public constant decimals = 10;\r\n    \r\n    string  public standard = \"ERC20 Deflator Token v0.0\";\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) newMe;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n   constructor(uint256 total) public {\r\n        totalSupply_ = total; \r\n        balances[msg.sender] = totalSupply_;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n\r\n        return totalSupply_;\r\n\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n\r\n        return balances[tokenOwner];\r\n\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n\r\n        require(numTokens <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n\r\n        allowed[msg.sender][delegate] = numTokens;\r\n\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n\r\n        return allowed[owner][delegate];\r\n\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\r\n\r\n        require(numTokens <= balances[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n        \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n\r\n        emit Transfer(owner, buyer, numTokens);\r\n\r\n        return true;\r\n\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n      assert(b <= a);\r\n\r\n      return a - b;\r\n\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n      uint256 c = a + b;\r\n\r\n      assert(c >= a);\r\n\r\n      return c;\r\n\r\n    }\r\n\r\n}"}}}