{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/TomToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @dev Implementation of Tom Token.\n * @author Tom Team\n */\ncontract TomToken is Context, IERC20, IERC20Metadata, Ownable {\n    mapping(address => uint256) private _balances;\n    mapping(address => uint256) private _freezes;\n    mapping(address => bool) private _addressExists;\n    mapping(uint256 => address) private _addresses;\n    uint256 private _addressCount = 0;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name = \"TomToken\";\n    string private _symbol = \"TT\";\n\n    uint256 private _totalAirdrop = 0;\n    uint256 private _totalVt = 0;\n\n    /**\n     * @dev constructor\n     */\n    constructor() {\n        _totalSupply = 1000_000_000 * 10**decimals();\n        _addressExists[_msgSender()] = true;\n        _addresses[_addressCount++] = _msgSender();\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 8;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"TomToken: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"TomToken: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev burn\n     */\n    function burn(uint256 amount) public virtual returns (bool) {\n        _burn(_msgSender(), amount);\n        return true;\n    }\n\n    /**\n     * @dev get address count\n     */\n    function addressCount() public view returns (uint256) {\n        return _addressCount;\n    }\n\n    /**\n     * @dev check if address exist\n     */\n    function isAddressExist(address target) public view returns (bool) {\n        return _addressExists[target];\n    }\n\n    /**\n     * @dev total airdrop vt\n     */\n    function totalAirdrop() public view returns (uint256) {\n        return _totalAirdrop;\n    }\n\n    /**\n     * @dev total user vt\n     */\n    function totalVt() public view returns (uint256) {\n        return _totalVt;\n    }\n\n    /**\n     * wallet transfer from superwallet\n     */\n    function walletTransfer(address recipient, uint256 amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require(\n            recipient != address(0),\n            \"TomToken: transfer to the zero address\"\n        );\n        require(\n            _totalVt + amount <= _totalSupply,\n            \"TomToken: transfer amount exceeds totolSupply\"\n        );\n\n        _beforeTokenTransfer(address(0), recipient, amount);\n\n        // if recipient not exist\n        if (!_addressExists[recipient]) {\n            _addressExists[recipient] = true;\n            _addresses[_addressCount++] = recipient;\n        }\n        _balances[recipient] += amount;\n        _totalVt += amount;\n        emit Transfer(address(0), recipient, amount);\n\n        _afterTokenTransfer(address(0), recipient, amount);\n\n        return true;\n    }\n\n    /**\n     * airdrop\n     */\n    function airdrop() public onlyOwner returns (bool) {\n        require(_totalAirdrop > 0, \"TomToken: no vt airdrop\");\n        require(_totalVt > 0, \"TomToken: no vt\");\n\n        for (uint256 i = 0; i < _addressCount; i++) {\n            address addr = _addresses[i];\n            uint256 balance = _balances[addr];\n            if (balance > 0) {\n                uint256 airdropVt = (_totalAirdrop * balance) / _totalVt;\n                _balances[addr] += airdropVt;\n                emit Airdrop(addr, airdropVt);\n            }\n        }\n        _totalVt += _totalAirdrop;\n        _totalAirdrop = 0;\n        return true;\n    }\n\n    /**\n     * freeze\n     */\n    function freeze(address target, uint256 amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require(_balances[target] >= amount, \"TomToken: freeze amount error\");\n\n        _balances[target] -= amount;\n        _freezes[target] += amount;\n        _totalVt -= amount;\n        emit Freeze(target, amount);\n        return true;\n    }\n\n    /**\n     * unfreeze\n     */\n    function unfreeze(address target, uint256 amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require(_freezes[target] >= amount, \"TomToken: unfreeze amount error\");\n\n        _balances[target] += amount;\n        _freezes[target] -= amount;\n        _totalVt += amount;\n        emit Unfreeze(target, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-freezeOf}.\n     */\n    function freezeOf(address account) public view returns (uint256) {\n        return _freezes[account];\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(\n            sender != address(0),\n            \"TomToken: transfer from the zero address\"\n        );\n        require(\n            recipient != address(0),\n            \"TomToken: transfer to the zero address\"\n        );\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"TomToken: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        // if recipient not exist\n        if (!_addressExists[recipient]) {\n            _addressExists[recipient] = true;\n            _addresses[_addressCount++] = recipient;\n        }\n        // 50% decrease\n        _balances[recipient] += amount / 2;\n        // 30% airdrop\n        _totalAirdrop += (amount * 3) / 10;\n        // 5% developer\n        _balances[owner()] += (amount * 5) / 100;\n        // 15% burn\n        _totalSupply -= (amount * 15) / 100;\n        _totalVt -= (amount * 45) / 100;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"TomToken: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"TomToken: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(\n            accountBalance >= amount,\n            \"TomToken: burn amount exceeds balance\"\n        );\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Burn(account, amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"TomToken: approve from the zero address\");\n        require(spender != address(0), \"TomToken: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * transfer balance to owner\n     */\n    function withdrawEther(uint256 amount) public onlyOwner {\n        require(\n            address(this).balance >= amount,\n            \"TomToken: not enough ether balance.\"\n        );\n        payable(owner()).transfer(amount);\n    }\n\n    /**\n     * can accept ether\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Emitted when `value` tokens are airdrop to another (`to`).\n     */\n    event Airdrop(address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when `value` tokens are burned.\n     */\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * @dev Emitted when `value` tokens are freezed.\n     */\n    event Freeze(address indexed target, uint256 value);\n\n    /**\n     * @dev Emitted when `value` tokens are unfreezed.\n     */\n    event Unfreeze(address indexed target, uint256 value);\n}\n"
    }
  }
}