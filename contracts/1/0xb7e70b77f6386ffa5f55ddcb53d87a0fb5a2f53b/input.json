{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MemberAdmin.sol":{"content":"// Copyright (C) 2020 Centrifuge\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.15 <0.6.0;\r\n\r\n// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.15 <0.6.0;\r\n/// note.sol -- the `note' modifier, for logging calls as events\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.4.23;\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint256           wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n        uint256 wad;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n            wad := callvalue()\r\n        }\r\n\r\n        _;\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\r\n    }\r\n}\r\n\r\ncontract Auth is DSNote {\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) public auth note { wards[usr] = 1; }\r\n    function deny(address usr) public auth note { wards[usr] = 0; }\r\n    modifier auth { require(wards[msg.sender] == 1); _; }\r\n}\r\n\r\ncontract MemberlistLike {\r\n    function updateMember(address usr, uint validUntil) public;\r\n    function updateMembers(address[] memory users, uint validUntil) public;\r\n}\r\n\r\n// Wrapper contract for permission restriction on the memberlists.\r\ncontract MemberAdmin is Auth {\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n    }\r\n\r\n    // Admins can manipulate memberlists, but have to be added and can be removed by any ward on the MemberAdmin contract\r\n    mapping (address => uint) public admins;\r\n\r\n    modifier admin { require(admins[msg.sender] == 1); _; }\r\n\r\n    function relyAdmin(address usr) public auth note { admins[usr] = 1; }\r\n    function denyAdmin(address usr) public auth note { admins[usr] = 0; }\r\n\r\n    function updateMember(address list, address usr, uint validUntil) public admin {\r\n        MemberlistLike(list).updateMember(usr, validUntil);\r\n    }\r\n\r\n    function updateMembers(address list, address[] memory users, uint validUntil) public admin {\r\n        MemberlistLike(list).updateMembers(users, validUntil);\r\n    }\r\n}"}}}