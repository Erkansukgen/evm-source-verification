{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/github/pickle-finance/protocol/src/voting/PicklesInTheCitadelV2.sol": {
      "content": "pragma solidity ^0.6.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface StakingRewards {\n    function balanceOf(address)\n        external\n        view\n        returns (uint256);\n}\n\ncontract PickleVoteProxyV2 {\n    // PICKLE token\n    IERC20 public constant votes = IERC20(\n        0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5\n    );\n\n    // Pickle's staking rewards contract\n    StakingRewards public constant stakingRewards = StakingRewards(\n        0xa17a8883dA1aBd57c690DF9Ebf58fC194eDAb66F\n    );\n\n    // Using 9 decimals as we're square rooting the votes\n    function decimals() external pure returns (uint8) {\n        return uint8(9);\n    }\n\n    function name() external pure returns (string memory) {\n        return \"PICKLEs In The Citadel V2\";\n    }\n\n    function symbol() external pure returns (string memory) {\n        return \"PICKLE C\";\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return sqrt(votes.totalSupply());\n    }\n\n    function balanceOf(address _voter) external view returns (uint256) {\n        uint256 _votes = stakingRewards.balanceOf(_voter);\n        return sqrt(_votes);\n    }\n\n    function sqrt(uint256 x) public pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n    constructor() public {}\n}\n"
    }
  }
}