{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"etholvants_svg.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// SVG exporter for Etholvants - 0x1fFF1e9e963f07AC4486503E5a35e71f4e9Fb9FD\n\npragma solidity ^0.8.0;\n\n\ninterface IEtholvants {\n\tfunction getCellPositions(\n        uint256 tokenId,\n        uint256 cursor,\n        uint256 limit\n    ) external view returns (uint256, uint256[] memory);\n\tfunction getNumCells(uint256 tokenId) external view returns (uint256);\n\tfunction getSize(uint256 numCells) external pure returns (uint256);\n}\n\ncontract EtholvantsSVG {\n\taddress public etholvants = 0x1fFF1e9e963f07AC4486503E5a35e71f4e9Fb9FD;\n\n\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k-1;\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n\t/**\n     * @dev returns the SVG representation of the Etholvant.\n\t *  result is paginated.\n     *  pass cursor as 0 at the beginning.\n     *  cursor will be returned 0 at the end.\n     */\n\tfunction getTokenSVG(uint tokenId, uint cursor, uint limit) public view returns (uint, string memory) {\n\t\tuint[] memory cells;\n\t\tstring memory svg;\n\t\tIEtholvants ethol = IEtholvants(etholvants);\n\t\tuint numCells = ethol.getNumCells(tokenId);\n\t\tuint size = ethol.getSize(numCells);\n\n\t\tif (cursor == 0) {\n\t\t\tstring memory sizeStr = uint2str(size);\n\t\t\tsvg = string(abi.encodePacked('<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ', sizeStr, ' ', sizeStr, '\"><path d=\"'));\n\t\t}\n\t\t(cursor, cells) = ethol.getCellPositions(tokenId, cursor, limit);\n\t\tfor (uint i=0; i<cells.length; i++) {\n\t\t\tuint x = cells[i] % size;\n\t\t\tuint y = cells[i] / size;\n\t\t\tsvg = string(abi.encodePacked(svg, 'M', uint2str(x), ',', uint2str(y), 'v1h1v-1'));\n\t\t}\n\n\t\tif (cursor == 0) {\n\t\t\tsvg = string(abi.encodePacked(svg, '\"/></svg>'));\n\t\t}\n\t\treturn (cursor, svg);\n\t}\n}"}}}