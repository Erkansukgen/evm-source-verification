{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/2_Owner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n    // ------------------------- \r\n    // Sample token contract // \r\n    // Symbol : MNF \r\n    // Name : Manifest \r\n    // Total supply : 21000000000 \r\n    // Decimals : 8\r\n    // Owner Account : 0x616B39F7451eEd1D3d5F23014Ee728582105E19d // \r\n    // _mint (msg.sender, 1 * 10 ** decimals());  manifest. //\r\n    // --------------------------\r\n   \r\n\r\n// --------------------------\r\n    // import\"@manifest/ contracts/token/ERC20/ERC20.sol\";\r\n    // import\"@manifest/ contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\n    // import\"@manifest/ contracts/token/ERC20/extensions/ERC20Snapshot.sol\";\r\n    // import\"@manifest/ contracts/access/ownable.sol\";\r\n    // import\"@manifest/ contracts/security/Pausable.sol\";\r\n    // import\"@manifest/ contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\r\n    // -------------------------\r\n\r\n\r\n// --------------------------\r\n    // function Snapshot()puplic only owner{_snapshot();}\r\n    // function pause() puplic onlyOwner{_pause();}\r\n    // function unpause() puplic onlyOwner{_unpause();}\r\n    // function mint(address to, uint256 amount) puplic onlyOwner{_mint(to amount);}\r\n    // function_beforeTokenTransfer(address from, address to, uint256 amount) internal whenNotPaused override (ERC20,ERC20Snapshot)\r\n    \r\n\r\n    // super_beforeTokenTransfer(from,to,amount); }}\r\n    // ---------------------------\r\n \r\n   \r\n    // —————————————————————————-\r\n    // library SafeMath { // only relevant functions\r\n    // function sub (uint256 a, uint256 b) internal pure returns ( uint256) \r\n    // assert (b <= a); \r\n    // return a -b;\r\n    // —————————————————————————-\r\n\r\n\r\n    // ------------------------- \r\n    // Sample token contract // \r\n    // Symbol : MNF \r\n    // Name : Manifest \r\n    // Total supply : 21000000000 \r\n    // Decimals : 8\r\n    // Owner Account : 0x616B39F7451eEd1D3d5F23014Ee728582105E19d  // \r\n    // _mint (msg.sender, 1 * 10 ** decimals());  manifest. //\r\n\r\n\r\n\r\n    // --------------------------\r\n   \r\n// ------------------------------------------------ ---------------------------\r\n// Yapıcı\r\n// ------------------------------------------------ ---------------------------\r\n// yapıcı () genel {\r\n// sembol = \"MNF\" ;\r\n// name = “ manifest “ Simgesi\" ;\r\n// ondalık sayılar = 8 ;\r\n// _totalSupply = 21000000000 ;\r\n// bakiyeler[0x616B39F7451eEd1D3d5F23014Ee728582105E19d  ] = _totalSupply;\r\n// yayan Aktarım ( adres ( 0 ), 0x616B39F7451eEd1D3d5F23014Ee728582105E19d , _totalSupply);\r\n// }\r\n// ------------------------------------------------ ---------------------------\r\n// Toplam arz\r\n// ------------------------------------------------ ---------------------------\r\n\r\n// ------------------------------------------------ ---------------------------\r\n\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Owner {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}"}}}