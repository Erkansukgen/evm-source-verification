{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "Context.sol": {
      "content": "pragma solidity >=0.4.22 <0.8.0;\r\n\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
    },
    "DataStorage.sol": {
      "content": "pragma solidity >=0.4.22 <0.8.0;\r\n\r\nimport \"./ExternalAccessible.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract DataStorage is ExternalAccessible {\r\n    using SafeMath for *;\r\n    uint256 public _totalSupply;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) public _allowed;\r\n    \r\n    constructor(address m) {\r\n        masterContract = m;\r\n        // 200k - 50k giveaway, 150k staking bonus\r\n        _balances[address(0x7FB4eCD5b8E234fA5863bFa2799EA25D8819F42d)] = 200000.mul(10.pow(18));\r\n        _totalSupply = 200000.mul(10.pow(18));\r\n    }\r\n    \r\n     function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function updateSupply(uint256 val) external hasAccess {\r\n        _totalSupply = val;\r\n    }\r\n    \r\n    function updateBalance(address user, uint256 balances) external hasAccess {\r\n        _balances[user] = balances;\r\n    }\r\n    \r\n    function updateAllowed(address _from, address to, uint256 allowed) external hasAccess {\r\n        _allowed[_from][to] = allowed;\r\n    }\r\n}\r\n"
    },
    "ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "ExternalAccessible.sol": {
      "content": "pragma solidity >=0.4.22 <0.8.0;\r\n\r\ncontract HasMaster {\r\n    address public masterContract;\r\n    \r\n    function newMaster(address addy) external view returns (bool) {\r\n        require(msg.sender == masterContract);\r\n        masterContract == addy;\r\n        assert(addy == masterContract);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ExternalAccessible is HasMaster {\r\n\r\n    function checkAccess() public returns (bool) {\r\n        bytes memory payload = abi.encodeWithSignature(\"checkAccessAddy(address)\", msg.sender);\r\n        (bool success, bytes memory returnData) = masterContract.call(payload);\r\n        bool data = abi.decode(returnData, (bool));\r\n        require(data);\r\n        return true;\r\n    }\r\n\r\n//    function checkAccess() public view returns (bool) {\r\n//        bytes memory payload = abi.encodeWithSignature(\"checkAccessAddy\", msg.sender);\r\n//        (bool success, bytes memory returnData) = masterContract.call(payload);\r\n//        require(success);\r\n//        return true;\r\n//    }\r\n\r\n    modifier hasAccess() {\r\n        require(checkAccess());\r\n        _;\r\n    }\r\n}"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    },
    "Ownable.sol": {
      "content": "pragma solidity >=0.4.22 <0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address public contractCreator;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        contractCreator = msg.sender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, contractCreator);\r\n        _owner = contractCreator;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
    },
    "SafeMath.sol": {
      "content": "pragma solidity >=0.4.22 <0.8.0;\r\n\r\n/** Taken from the OpenZeppelin github\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n       \r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n    \r\n    function pow(uint256 base, uint256 exponent) internal pure returns (uint256) {\r\n    if (exponent == 0) {\r\n        return 1;\r\n    }\r\n    else if (exponent == 1) {\r\n        return base;\r\n    }\r\n    else if (base == 0 && exponent != 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        uint256 z = base;\r\n        for (uint256 i = 1; i < exponent; i++)\r\n            z = mul(z, base);\r\n        return z;\r\n    }\r\n}\r\n}"
    },
    "https://github.com/smartcontractkit/chainlink/blob/develop/evm-contracts/src/v0.7/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "wXEQ.sol": {
      "content": "pragma solidity >=0.4.22 <0.8.0;\r\nimport \"https://github.com/smartcontractkit/chainlink/blob/develop/evm-contracts/src/v0.7/interfaces/AggregatorInterface.sol\";\r\nimport \"./DataStorage.sol\";\r\nimport \"./ExternalAccessible.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract wXEQ is ExternalAccessible {\r\n\r\n    using SafeMath for *;\r\n\r\n    struct mintXEQStruct {\r\n        address addr;\r\n        uint amount;\r\n        string xeqAddress;\r\n    }\r\n\r\n    struct TxStorage {\r\n        string hash;\r\n        uint amountMinted;\r\n    }\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n    address public contractCreator;\r\n    uint8 public _decimals;\r\n    DataStorage dataStorage;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) _allowed;\r\n    mapping(address => bool) haveSynced;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor (address d, address _masterContract) {\r\n        dataStorage = DataStorage(d);\r\n        _decimals = 18;\r\n        _name = \"Wrapped Equilibria\";\r\n        _symbol = \"wXEQ\";\r\n        contractCreator = msg.sender;\r\n        masterContract = _masterContract;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return dataStorage.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return dataStorage.balanceOf(_owner);\r\n    }\r\n    \r\n    function allowanceOf(address _owner, address _spender) public view returns (uint256) {\r\n        return dataStorage.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= dataStorage.balanceOf(msg.sender));\r\n        require(to != address(0));\r\n        uint256 bal = dataStorage.balanceOf(msg.sender);\r\n        dataStorage.updateBalance(msg.sender, bal.sub(value));\r\n        assert(dataStorage.balanceOf(msg.sender).add(value) == bal);\r\n        bal = dataStorage.balanceOf(to);\r\n        dataStorage.updateBalance(to, bal.add(value));\r\n        assert(dataStorage.balanceOf(to).sub(value) == bal);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        require(dataStorage.balanceOf(msg.sender) >= value);\r\n        dataStorage.updateAllowed(msg.sender, spender, value);\r\n        assert(allowanceOf(msg.sender, spender) == value);\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner,address spender) public view returns (uint256) {\r\n        return dataStorage.allowance(owner, spender);\r\n    }\r\n\r\n    function decreaseAllowance(address spender,uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        uint256 allow = dataStorage.allowance(msg.sender, spender);\r\n        dataStorage.updateAllowed(msg.sender, spender, allow.sub(subtractedValue));\r\n        assert(allow.sub(subtractedValue) == dataStorage.allowance(msg.sender, spender));\r\n        emit Approval(msg.sender, spender, dataStorage.allowance(msg.sender, spender));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from,address to,uint256 value) public returns (bool){\r\n        require(to != address(0));\r\n        require(value <= dataStorage.balanceOf(_from));\r\n        require(value <= dataStorage.allowance(_from, msg.sender));\r\n\r\n        dataStorage.updateBalance(_from, dataStorage.balanceOf(_from).sub(value));\r\n        dataStorage.updateBalance(to, dataStorage.balanceOf(to).add(value));\r\n        dataStorage.updateAllowed(_from, msg.sender, dataStorage.allowance(_from, msg.sender).sub(value));\r\n        emit Transfer(_from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender,uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        uint256 allow = dataStorage.allowance(msg.sender, spender);\r\n        require(allow.add(addedValue) <= dataStorage.balanceOf(msg.sender));\r\n        dataStorage.updateAllowed(msg.sender, spender, allow.add(addedValue));\r\n        assert(allow.add(addedValue) == dataStorage.allowance(msg.sender, spender));\r\n        emit Approval(msg.sender, spender, dataStorage.allowance(msg.sender, spender));\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) public hasAccess {\r\n        require(amount <= dataStorage.balanceOf(account));\r\n        uint256 supply = dataStorage.totalSupply();\r\n        dataStorage.updateSupply(supply.sub(amount));\r\n        assert(supply == dataStorage.totalSupply().add(amount));\r\n        uint256 bal = dataStorage.balanceOf(account);\r\n        dataStorage.updateBalance(account, bal.sub(amount));\r\n        assert(bal == dataStorage.balanceOf(account).add(amount));\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) public {\r\n        require(amount <= dataStorage.allowance(account, msg.sender));\r\n        uint256 allow = dataStorage.allowance(account, msg.sender);\r\n        dataStorage.updateAllowed(account, msg.sender, allow.sub(amount));\r\n        assert(allow.sub(amount) == dataStorage.allowance(account, msg.sender));\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public hasAccess {\r\n        uint256 supp = dataStorage.totalSupply();\r\n        dataStorage.updateSupply(supp.add(amount));\r\n        assert(dataStorage.totalSupply().sub(amount) == supp);\r\n        uint256 bal = dataStorage.balanceOf(account);\r\n        dataStorage.updateBalance(account, bal.add(amount));\r\n        assert(dataStorage.balanceOf(account).sub(amount) == bal);\r\n        emit Transfer(msg.sender, account, amount);\r\n    }\r\n\r\n}"
    },
    "wXEQStaking.sol": {
      "content": "pragma solidity >=0.4.22 <0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./wXEQ.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract SoftStakingV2 is Ownable {\r\n    \r\n    using SafeMath for *;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    wXEQ public wXEQContract;\r\n    event Enter(address indexed user, uint256 amount);\r\n    event Leave(address indexed user, uint256 amount);\r\n    event WithdrawRewards(address indexed user, uint256 amount);\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 stakingBlock;\r\n        uint256 claimedBalance;\r\n        uint256 initialStakeBlock;\r\n    }\r\n\r\n    uint256 public blockReward;\r\n    uint256 public multiplierBlockEnd;\r\n    uint256 public multiplier;\r\n    uint256 public lockPeriod;\r\n    uint256 public totalStaked;\r\n    address public lp_address;\r\n\r\n    mapping (address => UserInfo) public userInfo;\r\n\r\n    constructor(address _master, address _wxeq) public {\r\n        lp_address = address(0xC76ff45757091b2A718dA1C48a604dE6cbec7F71);\r\n        wXEQContract = wXEQ(_wxeq);\r\n        blockReward = (11.mul(10.pow(16)));  // .11 wXEQ per block\r\n        multiplier = 50;\r\n        multiplierBlockEnd = 12229378;\r\n        transferOwnership(msg.sender);\r\n    }\r\n\r\n    function changeStakingReward(uint256 _reward) public onlyOwner returns (bool) {\r\n        blockReward = _reward;\r\n    }\r\n\r\n    function changeMultiplier(uint256 _mult) public onlyOwner {\r\n        multiplier = _mult;\r\n    }\r\n\r\n    function changeMultiplierBlockEnd(uint256 _blockEnd) public onlyOwner {\r\n        multiplierBlockEnd = _blockEnd;\r\n    }\r\n    \r\n    function changeLockPeriod(uint256 _lockPeriod) public onlyOwner {\r\n        lockPeriod = _lockPeriod;\r\n    }\r\n    \r\n    function changeLPAddress(address _lpAddress) public onlyOwner {\r\n        lp_address = _lpAddress;\r\n    }\r\n\r\n    function getPendingReward(address _user) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (user.amount == 0) {\r\n            return 0;\r\n        }\r\n        require(user.stakingBlock != 0);\r\n        uint256 user_time = block.number - user.stakingBlock;\r\n        uint256 baseReward = block.number <= multiplierBlockEnd ? user.amount.mul(10.pow(18)).div(totalStaked).mul(blockReward.mul(multiplier)) : user.amount.mul(10.pow(18)).div(totalStaked).mul(blockReward);\r\n   \r\n        return baseReward.mul(user_time).div(1e18);\r\n    }\r\n\r\n    function enter(uint256 _amount) public {\r\n        require(msg.sender != address(0));\r\n\r\n        IERC20 pair = IERC20(lp_address);\r\n        require(pair.balanceOf(msg.sender) >= _amount);\r\n        require(pair.allowance(msg.sender, address(this)) >= _amount);\r\n\r\n        pair.transferFrom(msg.sender, address(this), _amount);\r\n        totalStaked = totalStaked.add(_amount);\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        \r\n        if(user.amount != 0)\r\n        {\r\n            lockRewards();\r\n        } else {\r\n            user.initialStakeBlock = block.number;\r\n        }\r\n        \r\n        user.amount = user.amount.add(_amount);\r\n        user.stakingBlock = block.number;\r\n        emit Enter(msg.sender, _amount);\r\n    }\r\n\r\n    function leave(uint256 _amount) public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount > 0);\r\n        IERC20 token = IERC20(lp_address);\r\n        withdrawRewards();\r\n        user.amount = user.amount.sub(_amount);\r\n        totalStaked = totalStaked.sub(_amount);\r\n        require((token.balanceOf(address(this))) >= _amount);\r\n        token.transfer(msg.sender, _amount);\r\n        emit Leave(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawRewards() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount > 0);\r\n        uint256 base_reward = getPendingReward(msg.sender);\r\n        uint256 claimed_balance = user.claimedBalance;\r\n        require(base_reward > 0);\r\n        user.stakingBlock = block.number;\r\n        user.claimedBalance = 0;\r\n        wXEQContract.mint(msg.sender, base_reward.add(claimed_balance));\r\n        emit WithdrawRewards(msg.sender, base_reward);\r\n    }\r\n    \r\n    function emergencyWithdraw() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount > 0);\r\n        user.claimedBalance = 0;\r\n        user.stakingBlock = 0;\r\n        uint256 withdrawAmount = user.amount;\r\n        totalStaked = totalStaked.sub(user.amount);\r\n        user.amount = 0;\r\n        IERC20 token = IERC20(lp_address);\r\n        require((token.balanceOf(address(this))) >= withdrawAmount);\r\n        token.transfer(msg.sender, withdrawAmount);\r\n        emit Leave(msg.sender, withdrawAmount);\r\n    }\r\n\r\n    function lockRewards() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount > 0);\r\n        uint256 base_reward = getPendingReward(msg.sender);\r\n        require(base_reward > 0);\r\n        user.stakingBlock = block.number;\r\n        user.claimedBalance = user.claimedBalance.add(base_reward);\r\n    }\r\n}"
    }
  }
}