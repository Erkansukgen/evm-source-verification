{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Tokenlocker.sol":{"content":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\npragma solidity ^0.6.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev A token holder contract that will allow a beneficiary to extract the\r\n * tokens after a given release time.\r\n *\r\n * Useful for simple vesting schedules like \"advisors get all of their tokens\r\n * after 1 year\".\r\n */\r\ncontract Tokenlocker {\r\n\r\n  // ERC20 basic token contract being held\r\n  IERC20 private _token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address private _beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 private _releaseTime;\r\n\r\n  constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {\r\n    // solhint-disable-next-line not-rely-on-time\r\n    _token = token;\r\n    _beneficiary = beneficiary;\r\n    _releaseTime = releaseTime; //\r\n    require(_releaseTime > block.timestamp, \"ERRROR\");\r\n  }\r\n\r\n  /**\r\n   * @return the token being held.\r\n   */\r\n  function token() public view returns (IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @return the beneficiary of the tokens.\r\n   */\r\n  function beneficiary() public view returns (address) {\r\n    return _beneficiary;\r\n  }\r\n\r\n  /**\r\n   * @return the time when the tokens are released.\r\n   */\r\n  function releaseTime() public view returns (uint256) {\r\n    return _releaseTime;\r\n  }\r\n  \r\n  function canRelease() public view returns (bool) {\r\n    if(_releaseTime < block.timestamp){return true;}\r\n    else {return false;}\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public virtual {\r\n    // solhint-disable-next-line not-rely-on-time\r\n    require(block.timestamp >= _releaseTime, \"TokenTimelock: current time is before release time\");\r\n\r\n    uint256 amount = _token.balanceOf(address(this));\r\n    require(amount > 0, \"TokenTimelock: no tokens to release\");\r\n\r\n    _token.transfer(_beneficiary, amount);\r\n  }\r\n}"}}}