{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DONCoin.sol":{"content":"// Specifies that the source code is for a version\n// of Solidity greater than 0.5.0\npragma solidity >=0.5.0 <0.7.0;\n\n// A contract is a collection of functions and data (its state)\n// that resides at a specific address on the Ethereum blockchain.\ncontract Coin {\n    // The keyword \"public\" makes variables accessible from outside a contract\n    // and creates a function that other contracts or SDKs can call to access the value\n\n\n    // An address stores addresses of contracts or external (user) accounts\n    address public minter;\n\n    // A mapping lets you create complex custom data types.\n    // This mapping assigns an unsigned integer to an address\n    // and is also a public variable.\n    mapping (address => uint) public balances;\n\n    // Events allow Ethereum clients to react to specific\n    // contract changes you declare.\n    // This defines the event and it is sent later\n    event Sent(address from, address to, uint amount);\n\n    // A special function only run during the creation of the contract\n    constructor() public {\n        // Uses the special msg global variable to store the\n        // address of the contract creator\n        minter = msg.sender;\n    }\n\n    // Sends an amount of newly created coins to an address\n    function mint(address receiver, uint amount) public {\n        // require statements define conditions that must pass\n        // before state is changed.\n        // If it fails (equals false), an exception is triggered\n        // and reverts all modifications to state from the current call\n\n        // Can only be called by the contract creator\n        require(msg.sender == minter);\n\n        // Ensures a maximum amount of tokens\n        require(amount < 1e60);\n        balances[receiver] += amount;\n    }\n\n    // Sends an amount of existing coins\n    // from any caller to an address\n    function send(address receiver, uint amount) public {\n        // The sender must have enough coins to send\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n        // Adjust balances\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n        // Emit event defined earlier\n        emit Sent(msg.sender, receiver, amount);\n    }\n}\n"}}}