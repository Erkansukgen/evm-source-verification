{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MinimalRewardsAdjusterOverlay.sol":{"content":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract RewardsAdjusterLike {\r\n    function modifyParameters(bytes32 parameter, address addr) external virtual;\r\n    function modifyParameters(address receiver, bytes4 targetFunction, bytes32 parameter, uint256 val) external virtual;\r\n}\r\n\r\ncontract MinimalRewardsAdjusterOverlay is GebAuth {\r\n    RewardsAdjusterLike public adjuster;\r\n\r\n    constructor(address adjuster_) public GebAuth() {\r\n        require(adjuster_ != address(0), \"MinimalRewardsAdjusterOverlay/null-adjuster\");\r\n        adjuster = RewardsAdjusterLike(adjuster_);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notice Modify the gasPriceOracle or ethPriceOracle address\r\n    * @param parameter Must be \"gasPriceOracle\" or \"ethPriceOracle\"\r\n    * @param data The new address\r\n    */\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        require(\r\n          either(parameter == \"gasPriceOracle\", parameter == \"ethPriceOracle\"),\r\n          \"MinimalRewardsAdjusterOverlay/invalid-parameter\"\r\n        );\r\n        adjuster.modifyParameters(parameter, data);\r\n    }\r\n\r\n    /*\r\n     * @notice Modify \"updateDelay\" for a funded function\r\n     * @param receiver The address of the funding receiver\r\n     * @param targetFunction The function whose callers receive funding for calling\r\n     * @param parameter Must be \"updateDelay\"\r\n     * @param val The new parameter value\r\n     */\r\n    function modifyParameters(address receiver, bytes4 targetFunction, bytes32 parameter, uint256 val) external isAuthorized {\r\n        require(parameter == \"updateDelay\", \"MinimalRewardsAdjusterOverlay/invalid-parameter\");\r\n        adjuster.modifyParameters(receiver, targetFunction, parameter, val);\r\n    }\r\n}"}}}