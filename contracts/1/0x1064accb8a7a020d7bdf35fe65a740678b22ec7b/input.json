{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ART.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function symbol() external view returns (string memory);\n\n    function name() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenOwner)\n        external\n        view\n        returns (uint256 balance);\n\n    function allowance(address tokenOwner, address spender)\n        external\n        view\n        returns (uint256 remaining);\n\n    function transfer(address to, uint256 tokens)\n        external\n        returns (bool success);\n\n    function approve(address spender, uint256 tokens)\n        external\n        returns (bool success);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokens\n    ) external returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(\n        address indexed tokenOwner,\n        address indexed spender,\n        uint256 tokens\n    );\n}\n\ncontract ERC20 is IERC20 {\n    string public constant override symbol = \"AVT\";\n    string public constant override name = \"ArtVerse Token\";\n    uint8 public constant override decimals = 18;\n    uint256 public constant override totalSupply = 2100000000000 * 10**18;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    constructor() {\n        balances[msg.sender] = totalSupply;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    function balanceOf(address tokenOwner)\n        public\n        view\n        override\n        returns (uint256 balance)\n    {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address to, uint256 tokens)\n        public\n        override\n        returns (bool success)\n    {\n        balances[msg.sender] -= tokens;\n        balances[to] += tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function approve(address spender, uint256 tokens)\n        public\n        override\n        returns (bool success)\n    {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokens\n    ) public override returns (bool success) {\n        balances[from] -= tokens;\n        allowed[from][msg.sender] -= tokens;\n        balances[to] += tokens;\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender)\n        public\n        view\n        override\n        returns (uint256 remaining)\n    {\n        return allowed[tokenOwner][spender];\n    }\n    \n}"
    }
  }
}