{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ZyxBridge.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2021-11-01\n*/\n\n// File: contracts/interfaces/IWZYX.sol\n\npragma solidity ^0.6.12;\n\ninterface IWZYX {\n    function mint(address _to, uint256 _amount) external;\n    function burnFrom(address account, uint256 amount) external;\n}\n\n// File: contracts/lib/ChainId.sol\n\npragma solidity 0.6.12;\n\nlibrary ChainId {\n    int256 public constant zyxChainId = 55;\n\n\n    function getChainId() internal pure returns (int256 chainId) {\n        assembly {\n            chainId := chainid()\n        }\n    }\n}\n\n// File: contracts/lib/SafeMath.sol\n\npragma solidity 0.6.12;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\n// File: contracts/interfaces/IERC20.sol\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external;\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external;\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/lib/Context.sol\n\npragma solidity 0.6.12;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: contracts/lib/Ownable.sol\n\npragma solidity 0.6.12;\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() public {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: contracts/lib/Pausable.sol\n\npragma solidity ^0.6.12;\n\n\n\nabstract contract Pausable is Ownable {\n    bool public pause;\n\n    modifier isPause() {\n        require(!pause, \"Pausable: paused\");\n        _;\n    }\n\n    function togglePause() public virtual onlyOwner {\n        pause = !pause;\n    }\n}\n\n// File: contracts/WzyxBridge.sol\n\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n\ncontract WZyxBridge is Pausable {\n    using SafeMath for *;\n\n    struct User {\n        uint256 amount;\n        uint256 fee;\n        uint256 totalRedeem;\n    }\n\n    struct Swap {\n        address token;\n        address user;\n        uint256 amount;\n        uint256 fee;\n        bytes32 hash;\n    }\n\n    int256 public chainId;\n\n    address public oracle;\n    address public wzyx;\n    address public feeTo;\n    address public migrator;\n\n    mapping(address => bool) public listOfSupportedTokens;\n    mapping(address => uint256) public minLimitForSwap;\n    mapping(address => uint256) public tokensBalances;\n    mapping(bytes32 => bool) public checkedHashes;\n    mapping(address => mapping(address => User)) public users;\n\n\n    constructor(address _oracle, address _wzyx, address _feeTo) public {\n        chainId = ChainId.getChainId();\n        oracle = _oracle;\n        wzyx = _wzyx;\n        feeTo = _feeTo;\n    }\n\n\n    /**** Modifiers ****/\n    modifier onlyOracle() {\n        require(msg.sender == oracle, \"ZyxBridge: Not oracle\");\n        _;\n    }\n\n    modifier supportedToken(address token) {\n        require(listOfSupportedTokens[token], \"ZyxBridge: Not supported token\");\n        _;\n    }\n\n    modifier newHash(bytes32 hash) {\n        require(!checkedHashes[hash], \"ZyxBridge: Duplicated hash\");\n        _;\n    }\n\n    event NewSwap(\n        address token,\n        address user,\n        address oracle,\n        uint256 amount,\n        uint256 fee,\n        int256 chainIdFrom,\n        int256 chainIdTo,\n        bytes32 hash\n    );\n\n    event Redeem(\n        address token,\n        address user,\n        uint256 amount,\n        uint256 fee\n    );\n\n    event NewDeposit(\n        address token,\n        address user,\n        uint256 amount,\n        int256 chainIdFrom,\n        int256 chainIdTo\n    );\n\n    function newTransfer(Swap calldata swapInfo) public onlyOracle\n        supportedToken(swapInfo.token)\n        isPause\n        newHash(swapInfo.hash)\n    {\n        User storage user = users[swapInfo.token][swapInfo.user];\n        user.amount = user.amount.add(swapInfo.amount);\n        user.fee = user.fee.add(swapInfo.fee);\n\n        if (wzyx != swapInfo.token) {\n            tokensBalances[swapInfo.token] = tokensBalances[swapInfo.token].sub(swapInfo.amount).sub(swapInfo.fee);\n        }\n\n        checkedHashes[swapInfo.hash] = true;\n\n        emit NewSwap(\n            swapInfo.token,\n            swapInfo.user,\n            msg.sender,\n            swapInfo.amount,\n            swapInfo.fee,\n            ChainId.zyxChainId,\n            chainId,\n            swapInfo.hash\n        );\n    }\n\n    function redeemToken(address token) public supportedToken(token) {\n        User storage user = users[token][msg.sender];\n        require(user.amount > 0, \"ZyxBridge: nothing to withdraw\");\n        if (token == wzyx) {\n            IWZYX(wzyx).mint(msg.sender, user.amount);\n            IWZYX(wzyx).mint(feeTo, user.fee);\n        } else {\n            IERC20(token).transfer(msg.sender, user.amount);\n            IERC20(token).transfer(feeTo, user.fee);\n        }\n        user.totalRedeem = user.totalRedeem.add(user.amount);\n        uint256 amount = user.amount;\n        uint256 fee = user.fee;\n        user.amount = 0;\n        user.fee = 0;\n        emit Redeem(token, msg.sender, amount, fee);\n    }\n\n    function depositToken(address token, uint256 amount) public supportedToken(token) isPause {\n        require(amount >= minLimitForSwap[token], \"ZyxBridge: amount is too small\");\n        if (token == wzyx) {\n            IWZYX(wzyx).burnFrom(msg.sender, amount);\n        } else {\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\n            tokensBalances[token] = tokensBalances[token].add(amount);\n        }\n        emit NewDeposit(token, msg.sender, amount, chainId, ChainId.zyxChainId);\n    }\n\n\n    /**** Admin functions  ****/\n    function addCoin(address _token, uint256 _minSwap) public onlyOwner {\n        listOfSupportedTokens[_token] = true;\n        minLimitForSwap[_token] = _minSwap;\n    }\n\n    function removeCoin(address _token) public onlyOwner {\n        delete listOfSupportedTokens[_token];\n        delete minLimitForSwap[_token];\n    }\n\n    function setOracle(address _oracle) public onlyOwner {\n        oracle = _oracle;\n    }\n\n    function setMigrator(address _migrator) public onlyOwner {\n        migrator = _migrator;\n    }\n\n    function setWzyx(address _wzyx) public onlyOwner {\n        wzyx = _wzyx;\n    }\n\n    function setFeeTo(address _feeTo) public onlyOwner {\n        feeTo = _feeTo;\n    }\n\n    function migrate(address _token) public onlyOwner {\n        uint256 currentBalance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(migrator,currentBalance);\n        delete listOfSupportedTokens[_token];\n        delete minLimitForSwap[_token];\n        delete tokensBalances[_token];\n    }\n}"
    }
  }
}