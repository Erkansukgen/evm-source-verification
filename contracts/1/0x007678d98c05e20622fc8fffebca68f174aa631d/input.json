{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Identity.sol": {
      "content": "pragma solidity >=0.4.0 <0.7.0;\n\ncontract Identity {\n\n     // ************ Modifier *********** //\n    modifier onlyManager() {\n        require(msg.sender == owner, \"Not allowed\");\n        _;\n    }\n\n    modifier onlyAddressAllowed() {\n        require(addressAllowed[msg.sender] == true, \"Not allowed\");\n        _;\n    }\n\n\n    // ************** Events ************ //\n    event addressAllowedAdded(string, address);\n    event addressAllowedRemoved(string, address);\n    event memberAdded(string, string);\n    event memeberRemoved(string, string);\n    event updated(string, string);\n\n\n    address private owner;\n    mapping (address => bool) private addressAllowed;\n    mapping (string => bool) private member_exist;\n    mapping (string => address) private members;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function addAddressAllowed(address _address_allowed) external onlyManager {\n        addressAllowed[_address_allowed] = true;\n        emit addressAllowedAdded(\"Added new address allowed: \", _address_allowed);\n    }\n\n    function removeAddressAllowed(address _address_allowed) external onlyManager {\n        addressAllowed[_address_allowed] = false;\n        emit addressAllowedRemoved(\"Removed address allowed: \", _address_allowed);\n    }\n\n    function addMember(string calldata hash, address _address) external onlyAddressAllowed {\n        require(member_exist[hash] == false, \"Member already exist\");\n\n        members[hash] = _address;\n        member_exist[hash] = true;\n\n        emit memberAdded(\"Added new member with hash: \", hash);\n    }\n\n    function removeMember(string calldata hash) external onlyAddressAllowed {\n        require(member_exist[hash] == true, \"Member does not exist\");\n\n        members[hash] = address(0x0);\n        member_exist[hash] = false;\n\n        emit memeberRemoved(\"Removed member with hash: \", hash);\n    }\n\n    function updateMember(string calldata hash, address _address) external onlyAddressAllowed {\n        require(member_exist[hash] == true, \"Member does not exist\");\n\n        members[hash] = _address;\n\n        emit updated(\"Updated member with hash: \", hash);\n    }\n\n    function isTrusted(string calldata hash, address _address) external view onlyAddressAllowed returns (bool)  {\n        require(bytes(hash).length > 0, \"Hash is required\");\n        require(_address != address(0), \"address is required\");\n\n        address tmp_address = members[hash];\n\n        if (tmp_address == _address) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n}"
    }
  }
}