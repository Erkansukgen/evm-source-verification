{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Headscapes.sol":{"content":"// File: @openzeppelin/contracts/utils/Context.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Strings.sol\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\npragma solidity ^0.8.0;\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\npragma solidity ^0.8.0;\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\n// File: contracts/Base64.sol\npragma solidity ^0.8.9;\n\nlibrary Base64 {\n    bytes internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\n                )\n                out := shl(224, out)\n                mstore(resultPtr, out)\n                resultPtr := add(resultPtr, 4)\n            }\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n            mstore(result, encodedLen)\n        }\n        return string(result);\n    }\n}\n\n// File: contracts/HeadscapesStorage.sol\npragma solidity ^0.8.9;\n\ncontract HeadscapesStorage {\n    constructor() {}\n\n    function getPalettes(uint256 index) public pure returns (string memory) {\n        return\n            [\n                \"b: #281C2D; --s: #695E93; --a: #8155BA; --m: #BEAFC2\",\n                \"b: #738FA7; --s: #0C4160; --a: #C3CEDA; --m: #071330\",\n                \"b: #1A5653; --s: #107869; --a: #5CD85A; --m: #08313A\",\n                \"b: #E95670; --s: #713770; --a: #B34270; --m: #432F70\",\n                \"b: #E1A140; --s: #532200; --a: #EFCFA0; --m: #914110\",\n                \"b: #0B0909; --s: #44444C; --a: #8C8C8C; --m: #D6D6D6\",\n                \"b: #F1D26C; --s: #2B1200; --a: #CF5C00; --m: #8D1E00\",\n                \"b: #8C9B88; --s: #F5E8DA; --a: #735E93; --m: #EFF1EF\",\n                \"b: #676E7F; --s: #0F0D12; --a: #F9F6F0; --m: #B6737C\"\n            ][index];\n    }\n\n    function getPatterns(uint256 index) public pure returns (string memory) {\n        return\n            [\n                'x=\"-7.25\" y=\"142.5\" patternUnits=\"userSpaceOnUse\" width=\"126\" height=\"200\" viewBox=\"0 0 10 16\"><g id=\"cube\"><path fill=\"var(--a)\" d=\"M0 0l5 3v5l-5 -3z\"></path><path d=\"M10 0l-5 3v5l5 -3\"></path></g><use x=\"5\" y=\"8\" href=\"#cube\"></use><use x=\"-5\" y=\"8\" href=\"#cube\"></use>',\n                'x=\"12\" y=\"-5\" width=\"375\" height=\"62.5\" patternUnits=\"userSpaceOnUse\"><linearGradient id=\"g1\"><stop offset=\"5%\" stop-color=\"var(--s)\"/><stop offset=\"50%\" stop-color=\"var(--m)\"/><stop offset=\"95%\" stop-color=\"var(--s)\"/></linearGradient><radialGradient id=\"g2\"><stop offset=\"10%\" stop-color=\"var(--s)\"/><stop offset=\"50%\" stop-color=\"var(--a)\"/></radialGradient><rect fill=\"url(#g1)\" height=\"10\" width=\"375\" x=\"0\" y=\"0\"/><g fill-opacity=\"0.5\" stroke=\"var(--s)\" fill=\"url(#g2)\"><circle cx=\"20\" cy=\"40\" r=\"5\" stroke-width=\"1\"/><circle cx=\"82.5\" cy=\"40\" r=\"7\" stroke-width=\"3\" /><circle cx=\"145\" cy=\"40\" r=\"4\" stroke-width=\"3\"/><circle cx=\"207.5\" cy=\"40\" r=\"8\" stroke-width=\"2\"/><circle cx=\"270\" cy=\"40\" r=\"2\" stroke-width=\"3\"/><circle cx=\"332.5\" cy=\"40\" r=\"3.5\" stroke-width=\"1\"/></g>',\n                'x=\"-12.5\" y=\"15.625\" width=\"150\" height=\"62.5\" patternUnits=\"userSpaceOnUse\" stroke-width=\"4\"><path d=\"M0 0 L0 0 25 25 M25 0 L25 0 0 25\" stroke=\"var(--a)\"/><path d=\"M12.5 25 v50\" stroke=\"var(--m)\"/><path d=\"M25 12.5 h45\" stroke=\"var(--m)\"/><path d=\"M87 29.25 v30\" stroke=\"var(--a)\"/><circle cx=\"87\" cy=\"13\" r=\"11.5\" fill=\"transparent\" stroke=\"var(--s)\" fill-opacity=\"0.5\"/><path d=\"M103 12.5 h45\" stroke=\"var(--m)\"/>',\n                'x=\"-12.5\" y=\"15.625\" width=\"150\" height=\"62.5\" patternUnits=\"userSpaceOnUse\"><linearGradient id=\"g1\" gradientTransform=\"rotate(90)\"><stop offset=\"5%\" stop-color=\"var(--m)\"/><stop offset=\"95%\" stop-color=\"var(--s)\"/></linearGradient><path d=\"M0 0 v62.5 h150z\" stroke=\"var(--a)\" fill=\"url(#g1)\" stroke-width=\"4\"/>',\n                'x=\"0\" y=\"0\" width=\"750\" height=\"250\" patternUnits=\"userSpaceOnUse\"><radialGradient id=\"g1\"><stop offset=\"10%\" stop-color=\"var(--b)\"/><stop offset=\"95%\" stop-color=\"var(--m)\"/></radialGradient><circle cx=\"0\" cy=\"125\" r=\"95\" fill=\"transparent\" stroke-width=\"2\" stroke=\"var(--m)\" /><circle cx=\"0\" cy=\"125\" r=\"45\" fill=\"var(--s)\"/><circle cx=\"750\" cy=\"125\" r=\"75\" fill=\"var(--a)\"/><circle cx=\"375\" cy=\"250\" r=\"80\" fill=\"var(--s)\"/><circle cx=\"375\" cy=\"0\" r=\"30\" fill=\"transparent\" stroke-width=\"2\" stroke=\"var(--a)\"/><circle cx=\"375\" cy=\"250\" r=\"30\" fill=\"transparent\" stroke-width=\"2\" stroke=\"var(--a)\"/><circle cx=\"375\" cy=\"125\" r=\"25\" fill=\"var(--m)\"/><circle cx=\"750\" cy=\"250\" r=\"31\" fill=\"var(--s)\"/><circle cx=\"750\" cy=\"0\" r=\"31\" fill=\"var(--a)\"/><circle cx=\"0\" cy=\"0\" r=\"22\" fill=\"var(--m)\"/><circle cx=\"750\" cy=\"0\" r=\"22\" fill=\"var(--s)\"/><circle cx=\"0\" cy=\"250\" r=\"22\" fill=\"var(--a)\"/><circle cx=\"750\" cy=\"250\" r=\"22\" fill=\"url(#g1)\"/>',\n                'x=\"0\" y=\"0\" width=\"750\" height=\"100\" patternUnits=\"userSpaceOnUse\" stroke-width=\"4\"><radialGradient cx=\"10%\" cy=\"10%\" id=\"g1\"><stop offset=\"5%\" stop-color=\"var(--a)\"/><stop offset=\"95%\" stop-color=\"var(--m)\"/></radialGradient><radialGradient cx=\"90%\" cy=\"90%\" id=\"g2\"><stop offset=\"5%\" stop-color=\"var(--m)\"/><stop offset=\"95%\" stop-color=\"var(--a)\"/></radialGradient><path d=\"M0 0 v100 h375 z\" stroke=\"var(--s)\" fill=\"url(#g1)\"/><path d=\"M375 100 h375 V0 z\" stroke=\"var(--s)\" fill=\"url(#g2)\"/>',\n                'x=\"0\" y=\"0\" width=\"300\" height=\"125\" patternUnits=\"userSpaceOnUse\" stroke-width=\"4\" fill=\"transparent\"><path d=\"M20 0 Q-30 75, 100 20 T65 120 \" stroke=\"var(--s)\" /><path d=\"M 20 0 C -30 75, 65 10, 100 10 S -180 150, 280 20 S -100 200, -100 200\" transform=\"scale(0.5) translate(200 10) rotate(180 150 75)\" stroke=\"var(--a)\" /><path d=\"M275 100 q-20 -30, -30 -40 t-20 30 t-20 -30 t20 -30\" stroke=\"var(--m)\" />',\n                'x=\"-12.5\" y=\"0\" width=\"125\" height=\"125\" patternUnits=\"userSpaceOnUse\" stroke-width=\"4\" fill-opacity=\"0.75\"><rect x=\"25\" y=\"12.5\" height=\"100\" width=\"100\" fill=\"var(--m)\"/><rect x=\"50\" y=\"37.5\" height=\"50\" width=\"50\" fill=\"var(--m)\"/><rect x=\"0\" y=\"0\" height=\"10\" width=\"150\" fill=\"var(--s)\"/><rect x=\"0\" y=\"115\" height=\"10\" width=\"150\" fill=\"var(--s)\"/><rect x=\"0\" y=\"10\" height=\"2.5\" width=\"125\" fill=\"var(--a)\"/><rect x=\"0\" y=\"112.5\" height=\"2.5\" width=\"125\" fill=\"var(--a)\"/><rect x=\"0\" y=\"22.5\" height=\"2.5\" width=\"125\" fill=\"var(--a)\"/><rect x=\"0\" y=\"100\" height=\"2.5\" width=\"125\" fill=\"var(--a)\"/><rect x=\"37.5\" y=\"0\" height=\"125\" width=\"2.5\" fill=\"var(--s)\" /><rect x=\"110\" y=\"0\" height=\"125\" width=\"2.5\" fill=\"var(--s)\"/><rect x=\"0\" y=\"60\" height=\"5\" width=\"375\" fill=\"var(--a)\"/><rect x=\"72.5\" y=\"0\" height=\"375\" width=\"5\" fill=\"var(--a)\"/>',\n                \"\"\n            ][index];\n    }\n\n    function getTurbs(uint256 index) public pure returns (string memory) {\n        return\n            [\n                'type=\"fractalNoise\" baseFrequency=\"0.0029, .0009\" numOctaves=\"5\"',\n                'type=\"fractalNoise\" baseFrequency=\"0.069, .0420\" numOctaves=\"5\"',\n                'type=\"fractalNoise\" baseFrequency=\"0.002, .029\" numOctaves=\"50\"',\n                'type=\"fractalNoise\" baseFrequency=\".0420, .069\" numOctaves=\"6.9\"',\n                'type=\"turbulence\" baseFrequency=\"0.09, .06\" numOctaves=\"1\"',\n                'type=\"fractalNoise\" baseFrequency=\"0.2, .9\" numOctaves=\"50\"',\n                'type=\"turbulence\" baseFrequency=\".00888, .0888\" numOctaves=\"88\"',\n                'type=\"turbulence\" baseFrequency=\"2, .029\" numOctaves=\"10\"',\n                'type=\"fractalNoise\" baseFrequency=\"0, 0\" numOctaves=\"0\"'\n            ][index];\n    }\n\n    function getBlurs(uint256 index) public pure returns (string memory) {\n        return\n            [\"0.0\", \"0.0\", \"0.0\", \"0.0\", \"0.04\", \"0.2\", \"0.7\", \"1.7\", \"7\"][index];\n    }\n\n    function getGrads(uint256 index) public pure returns (string memory) {\n        return\n            [\n                \"var(--b)\",\n                \"linear-gradient(var(--s), var(--b))\",\n                \"radial-gradient(var(--s), var(--b))\",\n                \"repeating-linear-gradient(var(--s), var(--b) 125px)\",\n                \"repeating-radial-gradient(var(--s), var(--b) 1px)\",\n                \"conic-gradient(var(--b), var(--s))\",\n                \"repeating-linear-gradient(0.85turn, transparent, var(--s) 100px),repeating-linear-gradient(0.15turn, transparent, var(--b) 50px),repeating-linear-gradient(0.5turn, transparent, var(--a) 20px),repeating-linear-gradient(transparent, var(--m) 1px)\",\n                \"repeating-conic-gradient(var(--b) 0 9deg, var(--s) 9deg 18deg)\",\n                \"repeating-conic-gradient(from 0deg at 50% 50%, red, orange, yellow, green, blue, indigo, violet)\"\n            ][index];\n    }\n\n    function getLights(uint256 index) public pure returns (string memory) {\n        return\n            [\n                \"\",\n                \"\",\n                \"\",\n                \"\",\n                \"\",\n                'surfaceScale=\"100\"><fePointLight x=\"750\" y=\"250\" z=\"200\"/></feDiffuseLighting>',\n                'surfaceScale=\"6\"><feDistantLight azimuth=\"10\" elevation=\"43\"/></feDiffuseLighting>',\n                'surfaceScale=\"10\"><fePointLight x=\"750\" y=\"250\" z=\"200\"/></feDiffuseLighting>',\n                'surfaceScale=\"22\"><feDistantLight azimuth=\"5\" elevation=\"40\"/></feDiffuseLighting>'\n            ][index];\n    }\n\n    function getMaps(uint256 index) public pure returns (string memory) {\n        return\n            [\n                'in=\"SourceGraphic\" scale=\"10\" xChannelSelector=\"A\" yChannelSelector=\"B\"',\n                'in=\"SourceGraphic\" scale=\"20\" xChannelSelector=\"R\" yChannelSelector=\"B\"',\n                'in=\"FillPaint\" scale=\"100\" xChannelSelector=\"B\" yChannelSelector=\"G\"',\n                'in=\"FillPaint\" scale=\"300\" xChannelSelector=\"A\" yChannelSelector=\"R\"',\n                'in=\"FillPaint\" scale=\"600\" xChannelSelector=\"R\" yChannelSelector=\"R\"',\n                'in=\"FillPaint\" scale=\"1000\" xChannelSelector=\"G\" yChannelSelector=\"R\"',\n                'in=\"SourceAlpha\" scale=\"987\" xChannelSelector=\"B\" yChannelSelector=\"A\"',\n                'in=\"[redacted]\" scale=\"69\" xChannelSelector=\"A\" yChannelSelector=\"R\"',\n                'in=\"[redacted]\" scale=\"420\" xChannelSelector=\"A\" yChannelSelector=\"A\"'\n            ][index];\n    }\n}\n\n// File: contracts/Headscapes.sol\npragma solidity ^0.8.9;\n\n//  ▄▄   ▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄  ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄\n// █  █ █  █       █      █      ██       █       █      █       █       █       █\n// █  █▄█  █    ▄▄▄█  ▄   █  ▄    █  ▄▄▄▄▄█       █  ▄   █    ▄  █    ▄▄▄█  ▄▄▄▄▄█\n// █       █   █▄▄▄█ █▄█  █ █ █   █ █▄▄▄▄▄█     ▄▄█ █▄█  █   █▄█ █   █▄▄▄█ █▄▄▄▄▄\n// █   ▄   █    ▄▄▄█      █ █▄█   █▄▄▄▄▄  █    █  █      █    ▄▄▄█    ▄▄▄█▄▄▄▄▄  █\n// █  █ █  █   █▄▄▄█  ▄   █       █▄▄▄▄▄█ █    █▄▄█  ▄   █   █   █   █▄▄▄ ▄▄▄▄▄█ █\n// █▄▄█ █▄▄█▄▄▄▄▄▄▄█▄█ █▄▄█▄▄▄▄▄▄██▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄█ █▄▄█▄▄▄█   █▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█\n// On Chain generative banner art\n\ncontract Headscapes is ERC721Enumerable, ReentrancyGuard, Ownable {\n    uint256 private nonce = 0;\n\n    HeadscapesStorage private store =\n        HeadscapesStorage(0x4e7a909736Aa3efb6bB7bDbbbFfB901a0917e055);\n\n    mapping(string => bool) private hashToMinted;\n    mapping(uint256 => string) private tokenIdToHash;\n    mapping(uint256 => string) private tokenIdToTitle;\n    mapping(bytes32 => bool) public titleToIsTaken;\n\n    struct Headscape {\n        uint8 blur;\n        uint8 gradient;\n        uint8 light;\n        uint8 map;\n        uint8 palette;\n        uint8 pattern;\n        uint8 turbulence;\n    }\n\n    constructor() ERC721(\"Headscapes\", \"HDSCP\") {}\n\n    function generateSvg(Headscape memory headscape, uint256 tokenId) internal view returns (string memory) {\n        string memory header = getSvgHeader(headscape, tokenId);\n        string memory rectTail = headscape.pattern == 8\n            ? ' fill=\"var(--b)\" />'\n            : ' fill=\"url(#p0)\" />';\n\n        return\n            string(\n                abi.encodePacked(\n                    header,\n                    '<rect height=\"500\" width=\"1500\" filter=\"url(#f0)\"',\n                    rectTail,\n                    \"</svg>\"\n                )\n            );\n    }\n\n    function getSvgHeader(Headscape memory headscape, uint256 tokenId) internal view returns (string memory) {\n        string memory o = string(\n            abi.encodePacked(\n                '<svg width=\"1500\" height=\"500\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"position: relative; background: ',\n                store.getGrads(headscape.gradient),\n                ';\" class=\"c0\">',\n                \"<style>.c0{--\",\n                store.getPalettes(headscape.palette),\n                \";}</style>\",\n                \"<defs>\",\n                headscape.pattern == 8\n                    ? \"\"\n                    : string(\n                        abi.encodePacked(\n                            '<pattern id=\"p0\" ',\n                            store.getPatterns(headscape.pattern),\n                            \"</pattern>\"\n                        )\n                    ),\n                getFilter(headscape, tokenId),\n                \"</defs>\"\n            )\n        );\n        return o;\n    }\n\n    function getFilter(Headscape memory headscape, uint256 tokenId) internal view returns (string memory) {\n        // pattern == 8 means no pattern\n        string memory r = headscape.pattern == 8\n            ? 'in=\"r2\" result=\"r3\" '\n            : 'in=\"r3\" result=\"r4\" ';\n        string memory light = store.getLights(headscape.light);\n        string memory l = compareStrings(light, \"\")\n            ? \"\"\n            : string(\n                abi.encodePacked(\n                    '<feDiffuseLighting lighting-color=\"var(--a)\" ',\n                    r,\n                    store.getLights(headscape.light)\n                )\n            );\n        // Every other token gets a merge node\n        string memory f = tokenId % 2 == 0\n            ? \"</filter>\"\n            : '<feMerge><feMergeNode in=\"r4\" /><feMergeNode in=\"r2\" /></feMerge></filter>';\n        string memory o;\n        if (headscape.pattern == 8) {\n            o = string(\n                abi.encodePacked(\n                    '<filter id=\"f0\">',\n                    \"<feTurbulence \",\n                    store.getTurbs(headscape.turbulence),\n                    ' seed=\"',\n                    toString(tokenId),\n                    '\" result=\"r1\" />',\n                    '<feGaussianBlur stdDeviation=\"',\n                    store.getBlurs(headscape.blur),\n                    '\" in=\"r1\" result=\"r2\" />',\n                    l,\n                    \"</filter>\"\n                )\n            );\n        } else {\n            o = string(\n                abi.encodePacked(\n                    '<filter id=\"f0\">',\n                    \"<feTurbulence \",\n                    store.getTurbs(headscape.turbulence),\n                    ' seed=\"',\n                    toString(tokenId),\n                    '\" result=\"r1\" />',\n                    '<feDisplacementMap in2=\"r1\" result=\"r2\" ',\n                    store.getMaps(headscape.map),\n                    \" />\",\n                    '<feGaussianBlur stdDeviation=\"',\n                    store.getBlurs(headscape.blur),\n                    '\" in=\"r2\" result=\"r3\" />',\n                    l,\n                    f\n                )\n            );\n        }\n        return o;\n    }\n\n    function getAttributes(Headscape memory headscape) internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '\", \"attributes\": [{\"trait_type\": \"Blur\",\"value\": \"',\n                    [\n                        \"None\",\n                        \"None\",\n                        \"None\",\n                        \"None\",\n                        \"Faint\",\n                        \"Bleary\",\n                        \"Fuzzy\",\n                        \"Hazy\",\n                        \"Myopia\"\n                    ][headscape.blur],\n                    '\"},{\"trait_type\": \"Gradient\",\"value\": \"',\n                    [\n                        \"None\",\n                        \"Linear\",\n                        \"Radial\",\n                        \"Repeating Linear\",\n                        \"Repeating Radial\",\n                        \"Conic\",\n                        \"Pyramid Flannel\",\n                        \"Rising Sun\",\n                        \"Rainbow Wheel\"\n                    ][headscape.gradient],\n                    '\"},{\"trait_type\": \"Light\",\"value\": \"',\n                    [\n                        \"None\",\n                        \"None\",\n                        \"None\",\n                        \"None\",\n                        \"None\",\n                        \"High Point Light\",\n                        \"Low Distance Light\",\n                        \"Low Point Light\",\n                        \"High Distance Light\"\n                    ][headscape.light],\n                    '\"},{\"trait_type\": \"Displacement Map\",\"value\": \"',\n                    [\n                        \"10\",\n                        \"20\",\n                        \"100\",\n                        \"300\",\n                        \"600\",\n                        \"1000\",\n                        \"987 Alpha\",\n                        \"[redacted] I\",\n                        \"[redacted] II\"\n                    ][headscape.map],\n                    '\"},{\"trait_type\": \"Palette\",\"value\": \"',\n                    [\n                        \"Purple Fabric\",\n                        \"Mountain Haze\",\n                        \"Northern Lights\",\n                        \"Lava Sky\",\n                        \"Autumn Crush\",\n                        \"Dark Metal\",\n                        \"Fall Fire\",\n                        \"Secret Spring\",\n                        \"Winter Musings\"\n                    ][headscape.palette],\n                    '\"},{\"trait_type\": \"Pattern\",\"value\": \"',\n                    [\n                        \"Cubes\",\n                        \"Dots & Lines\",\n                        \"Xs and Os\",\n                        \"Banners\",\n                        \"Circles\",\n                        \"Triangles\",\n                        \"Squiggles\",\n                        \"Plaid\",\n                        \"None\"\n                    ][headscape.pattern],\n                    '\"},{\"trait_type\": \"Turbulence\",\"value\": \"',\n                    [\n                        \"Fractal 1\",\n                        \"Fractal 2\",\n                        \"Fractal 3\",\n                        \"Fractal 4\",\n                        \"Turbulence 1\",\n                        \"Fractal 5\",\n                        \"Turbulence 2\",\n                        \"Turbulence 3\",\n                        \"None\"\n                    ][headscape.turbulence]\n                )\n            );\n    }\n\n    function getHeadscape(uint256 tokenId) internal view returns (Headscape memory) {\n        // substring locations for each relevant index are alphabetical (blur, gradient, light, etc)\n        // blur index is at tokenIdToHash[tokenId][0]\n        // gradient index is at tokenIdToHash[tokenId][1]. etc\n        Headscape memory headscape;\n        headscape.blur = uint8(\n            charToInt(substring(tokenIdToHash[tokenId], 0, 1))\n        );\n        headscape.gradient = uint8(\n            charToInt(substring(tokenIdToHash[tokenId], 1, 2))\n        );\n        headscape.light = uint8(\n            charToInt(substring(tokenIdToHash[tokenId], 2, 3))\n        );\n        headscape.map = uint8(\n            charToInt(substring(tokenIdToHash[tokenId], 3, 4))\n        );\n        headscape.palette = uint8(\n            charToInt(substring(tokenIdToHash[tokenId], 4, 5))\n        );\n        headscape.pattern = uint8(\n            charToInt(substring(tokenIdToHash[tokenId], 5, 6))\n        );\n        headscape.turbulence = uint8(\n            charToInt(substring(tokenIdToHash[tokenId], 6, 7))\n        );\n        return headscape;\n    }\n\n    function hash(uint256 tokenId) internal returns (string memory) {\n        uint8 blur = usew(\n            [240, 232, 180, 90, 80, 70, 60, 58, 55],\n            random(\n                string(\n                    abi.encodePacked(\n                        block.difficulty,\n                        block.timestamp,\n                        tokenId,\n                        nonce\n                    )\n                )\n            ) % 1065\n        );\n        uint8 gradient = usew(\n            [250, 240, 232, 180, 110, 90, 80, 70, 55],\n            random(\n                string(\n                    abi.encodePacked(\n                        block.difficulty,\n                        block.timestamp,\n                        tokenId,\n                        nonce\n                    )\n                )\n            ) % 1307\n        );\n        uint8 light = usew(\n            [240, 230, 220, 210, 200, 150, 140, 130, 120],\n            random(\n                string(\n                    abi.encodePacked(\n                        block.difficulty,\n                        block.timestamp,\n                        tokenId,\n                        nonce\n                    )\n                )\n            ) % 1640\n        );\n        uint8 map = usew(\n            [240, 232, 210, 188, 130, 100, 90, 78, 69],\n            random(\n                string(\n                    abi.encodePacked(\n                        block.difficulty,\n                        block.timestamp,\n                        tokenId,\n                        nonce\n                    )\n                )\n            ) % 1337\n        );\n        uint8 palette = usew(\n            [250, 245, 240, 235, 230, 225, 220, 215, 210],\n            random(\n                string(\n                    abi.encodePacked(\n                        block.difficulty,\n                        block.timestamp,\n                        tokenId,\n                        nonce\n                    )\n                )\n            ) % 2070\n        );\n        uint8 pattern = usew(\n            [240, 232, 200, 180, 170, 160, 140, 130, 120],\n            random(\n                string(\n                    abi.encodePacked(\n                        block.difficulty,\n                        block.timestamp,\n                        tokenId,\n                        nonce\n                    )\n                )\n            ) % 1572\n        );\n        uint8 turbulence = usew(\n            [240, 232, 180, 110, 90, 80, 70, 60, 55],\n            random(\n                string(\n                    abi.encodePacked(\n                        block.difficulty,\n                        block.timestamp,\n                        tokenId,\n                        nonce\n                    )\n                )\n            ) % 1117\n        );\n\n        // Hack to get around the fact that blur and light have multiple 'None's and need\n        // to be ranked the same using the same index\n        blur = blur < 5 ? 0 : blur;\n        light = light < 5 ? 0 : light;\n\n        string memory h = string(\n            abi.encodePacked(\n                toString(blur),\n                toString(gradient),\n                toString(light),\n                toString(map),\n                toString(palette),\n                toString(pattern),\n                toString(turbulence)\n            )\n        );\n        // no dupes\n        if (hashToMinted[h]) {\n            nonce++;\n            return hash(tokenId);\n        }\n        return h;\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n        Headscape memory headscape = getHeadscape(tokenId);\n        string memory name = bytes(tokenIdToTitle[tokenId]).length > 0\n            ? string(tokenIdToTitle[tokenId])\n            : string(abi.encodePacked(\"Headscape #\", toString(tokenId)));\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            string(\n                                abi.encodePacked(\n                                    '{\"name\": \"',\n                                    name,\n                                    getAttributes(headscape),\n                                    '\"},{\"trait_type\": \"Titled\",\"value\": \"',\n                                    compareStrings(tokenIdToTitle[tokenId], \"\")\n                                        ? \"false\"\n                                        : \"true\",\n                                    '\"}], \"image\": \"data:image/svg+xml;base64,',\n                                    Base64.encode(\n                                        bytes(generateSvg(headscape, tokenId))\n                                    ),\n                                    '\"}'\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    // Write Functions\n\n    // Adds a user-defined title to a Headscape\n    function addTitle(uint256 tokenId, string memory text) public nonReentrant {\n        require(\n            _msgSender() == ownerOf(tokenId),\n            \"You don't own this Headscape\"\n        );\n        require(\n            bytes(tokenIdToTitle[tokenId]).length == 0,\n            \"This Headscape already has a title!\"\n        );\n        require(\n            !titleToIsTaken[(keccak256(abi.encodePacked((text))))],\n            \"This title has already been taken\"\n        );\n        require(\n            bytes(text).length > 0 && bytes(text).length < 65,\n            \"Enter a title at least 1 and up to 64 chars long\"\n        );\n        tokenIdToTitle[tokenId] = cleanString(text);\n        titleToIsTaken[(keccak256(abi.encodePacked((text))))] = true;\n    }\n\n    // Claim from 1 and up to 10 at a time.\n    // Unfortunately, this contract is not ERC1155 so batch minting is not possible.\n    // Transfer event will be emitted for each call to _safeMint.\n    function claim(uint256 num) public payable nonReentrant {\n        require(\n            num > 0 && num < 11,\n            \"Choose at least 1 and at most 10 to mint\"\n        );\n        require(\n            num + totalSupply() < 9500,\n            \"Enter a different quantity - there arent that many left to mint\"\n        );\n        require(msg.value >= num * 15000000000000000, \"Price is .015 per mint\");\n        uint256 numClaimed = totalSupply();\n        for (uint256 i = 0; i < num; i++) {\n            string memory h = hash(numClaimed);\n            tokenIdToHash[numClaimed] = h;\n            hashToMinted[h] = true;\n            _safeMint(_msgSender(), numClaimed);\n            numClaimed = totalSupply();\n            nonce++;\n        }\n        // Send half to EFF!\n        // Verify their address here: https://www.eff.org/pages/other-ways-give-and-donor-support#crypto\n        // and here: https://etherscan.io/address/0x095f1fD53A56C01c76A2a56B7273995Ce915d8C4\n        if (msg.value > 0) {\n            payable(0x095f1fD53A56C01c76A2a56B7273995Ce915d8C4).transfer(\n                msg.value / 2\n            );\n        }\n    }\n\n    // Owner can claim ids 9500 - 9999, one at a time\n    function ownerClaim(uint256 tokenId) public nonReentrant onlyOwner {\n        require(\n            tokenId >= 9500 && tokenId < 10000,\n            \"Choose an unclaimed index between 9500 and 9999, inclusive\"\n        );\n        string memory h = hash(tokenId);\n        tokenIdToHash[tokenId] = h;\n        hashToMinted[h] = true;\n        _safeMint(owner(), tokenId);\n        nonce++;\n    }\n\n    function withdraw() public payable nonReentrant onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    // Util functions\n\n    // Random number generator\n    function random(string memory input) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(input)));\n    }\n\n    function compareStrings(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (keccak256(abi.encodePacked((a))) ==\n            keccak256(abi.encodePacked((b))));\n    }\n\n    // This function sucks, don't use it. Really dumb way to turn the hashed\n    // 'DNA' of each Headscape into useable integers.\n    function charToInt(string memory c) internal pure returns (uint256) {\n        if (compareStrings(c, \"0\")) return 0;\n        if (compareStrings(c, \"1\")) return 1;\n        if (compareStrings(c, \"2\")) return 2;\n        if (compareStrings(c, \"3\")) return 3;\n        if (compareStrings(c, \"4\")) return 4;\n        if (compareStrings(c, \"5\")) return 5;\n        if (compareStrings(c, \"6\")) return 6;\n        if (compareStrings(c, \"7\")) return 7;\n        if (compareStrings(c, \"8\")) return 8;\n        return 0;\n    }\n\n    function substring(\n        string memory str,\n        uint256 startIndex,\n        uint256 endIndex\n    ) internal pure returns (string memory) {\n        bytes memory strBytes = bytes(str);\n        bytes memory result = new bytes(endIndex - startIndex);\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            result[i - startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    // Weight function to get a weighted random number\n    // Tweaked from OnChainMonkeys - thank you!\n    function usew(uint8[9] memory w, uint256 i) internal pure returns (uint8) {\n        uint8 ind = 0;\n        uint256 j = uint256(w[0]);\n        while (j <= i) {\n            ind++;\n            j += uint256(w[ind]);\n        }\n        return ind;\n    }\n\n    // Turns a double quote character into a single quote character\n    function cleanString(string memory str) internal pure returns (string memory) {\n        bytes memory bytesStr = bytes(str);\n        for (uint256 i = 0; i < bytesStr.length; i++) {\n            if (bytesStr[i] == 0x22) {\n                bytesStr[i] = 0x27;\n            }\n        }\n        return string(bytesStr);\n    }\n\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n}\n"}}}