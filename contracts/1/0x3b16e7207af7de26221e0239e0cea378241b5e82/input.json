{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/LimitOrder.sol":{"content":"pragma solidity ^0.6.6;\n\nimport './UniswapRouter.sol';\n\ncontract LimitOrder{\n    uint256 public flatcost = 10 finney;\n    address public admin;\n    address public recoveradmin;\n    uint64 public currentid;\n    bool public paused;\n    address public uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    IUniswapV2Router uniswapRouter;\n    \n    mapping(uint64 => address payable) public requester;\n    mapping(uint64 => address) public inaddress;\n    mapping(uint64 => address) public outaddress;\n    mapping(uint64 => uint256) public inamt;\n    mapping(uint64 => uint256) public outamt;\n    mapping(uint64 => uint256) public deadline; \n    mapping(uint64 => bool) public outexact;\n    mapping(uint64 => uint256) public paymentBalance;\n    mapping(address => uint256) public fulfillments;\n    \n    constructor(address a) public {\n        admin = a;\n        recoveradmin = a;\n        uniswapRouter = IUniswapV2Router(uniswapRouterAddress);\n    }\n    receive() external payable {}\n    /**\n\t * @dev adds inamount to paymentBalance, so that eth given to contract, but not fulfilled, can be refunded\n\t * */\n\tfunction requestSwapExactTokenForTokens(address intoken, address outtoken, uint256 inamount, uint256 minoutamount, uint256 expiretime) \n\texternal payable{\n\t    require(msg.value == flatcost, 'invalid payment');\n\t    \n\t    currentid++;\n\t    paymentBalance[currentid] += flatcost;\n\t    requester[currentid] = msg.sender;\n\t    inaddress[currentid] = intoken;\n\t    outaddress[currentid] = outtoken;\n\t    inamt[currentid] = inamount;\n\t    outamt[currentid] = minoutamount;\n\t    deadline[currentid] = expiretime;\n\t    outexact[currentid] = false;\n\t    \n\t    ERC20 it = ERC20(intoken);\n\t    it.transferFrom(msg.sender, address(this), inamount); //transfer tokens from user to this\n\n\t    emit Requested(currentid, msg.sender, intoken, outtoken, inamt[currentid], outamt[currentid], expiretime, outexact[currentid]);\n\t}\n\t/**\n\t * @dev adds inamount to paymentBalance, so that tokens given to contract, but not fulfilled, can be refunded\n\t * */\n\tfunction requestSwapTokenForExactTokens(address intoken, address outtoken, uint256 inamount, uint256 outamount, uint256 expiretime) \n\texternal payable{\n\t    require(msg.value == flatcost, 'invalid payment');\n\t    \n\t    currentid++;\n\t    paymentBalance[currentid] += flatcost;\n\t    requester[currentid] = msg.sender;\n\t    inaddress[currentid] = intoken;\n\t    outaddress[currentid] = outtoken;\n\t    inamt[currentid] = inamount;\n\t    outamt[currentid] = outamount;\n\t    deadline[currentid] = expiretime;\n\t    outexact[currentid] = true;\n\t    \n\t    ERC20 it = ERC20(intoken);\n\t    it.transferFrom(msg.sender, address(this), inamount); //transfer tokens from user to this\n\n\t    emit Requested(currentid, msg.sender, intoken, outtoken, inamt[currentid], outamt[currentid], expiretime, outexact[currentid]);\n\t}\n\t/**\n\t * @dev adds inamount to paymentBalance, so that eth given to contract, but not fulfilled, can be refunded\n\t * */\n\tfunction requestSwapExactETHForTokens(address outtoken, uint256 inamount, uint256 outamount, uint256 expiretime) \n\texternal payable{\n\t    require(msg.value == flatcost + inamount, 'invalid payment');\n\t    \n\t    currentid++;\n\t    paymentBalance[currentid] += flatcost + inamount;\n\t    requester[currentid] = msg.sender;\n\t    inaddress[currentid] = uniswapRouter.WETH();\n\t    outaddress[currentid] = outtoken;\n\t    inamt[currentid] = inamount;\n\t    outamt[currentid] = outamount;\n\t    deadline[currentid] = expiretime;\n\t    outexact[currentid] = true;\n\t    \n\t    emit Requested(currentid, msg.sender, uniswapRouter.WETH(), outtoken, inamt[currentid], outamt[currentid], expiretime, outexact[currentid]);\n\t}\n\t/**\n\t * @dev adds inamount to paymentBalance, so that eth given to contract, but not fulfilled, can be refunded\n\t * */\n\tfunction requestSwapEthForExactTokens(address outtoken, uint256 inamount, uint256 outamount, uint256 expiretime) \n\texternal payable{\n\t    require(msg.value == flatcost + inamount, 'invalid payment');\n\t    currentid++;\n\t    paymentBalance[currentid] += flatcost + inamount;\n\t    requester[currentid] = msg.sender;\n\t    inaddress[currentid] = uniswapRouter.WETH();\n\t    outaddress[currentid] = outtoken;\n\t    inamt[currentid] = inamount;\n\t    outamt[currentid] = outamount;\n\t    deadline[currentid] = expiretime;\n\t    outexact[currentid] = true;\n\t    \n\t    emit Requested(currentid, msg.sender, uniswapRouter.WETH(), outtoken, inamt[currentid], outamt[currentid], expiretime, outexact[currentid]);\n\t}\n\tfunction requestSwapTokensForExactETH(address intoken, uint256 inamount, uint256 outamount, uint256 expiretime) \n\texternal payable{\n\t    require(msg.value == flatcost, 'invalid payment');\n\t    currentid++;\n\t    paymentBalance[currentid] += flatcost;\n\t    requester[currentid] = msg.sender;\n\t    inaddress[currentid] = intoken;\n\t    outaddress[currentid] = uniswapRouter.WETH();\n\t    inamt[currentid] = inamount;\n\t    outamt[currentid] = outamount;\n\t    deadline[currentid] = expiretime;\n\t    outexact[currentid] = true;\n\t    \n\t    ERC20 it = ERC20(intoken);\n\t    it.transferFrom(msg.sender, address(this), inamount); //transfer tokens from user to this\n\t    \n\t    emit Requested(currentid, msg.sender, intoken, uniswapRouter.WETH(), inamt[currentid], outamt[currentid], expiretime, outexact[currentid]);\n\t}\n\tfunction requestSwapExactTokensForETH(address intoken, uint256 inamount, uint256 outamount, uint256 expiretime) \n\texternal payable{\n\t    require(msg.value == flatcost, 'invalid payment');\n\t    currentid++;\n\t    paymentBalance[currentid] += flatcost;\n\t    requester[currentid] = msg.sender;\n\t    inaddress[currentid] = intoken;\n\t    outaddress[currentid] = uniswapRouter.WETH();\n\t    inamt[currentid] = inamount;\n\t    outamt[currentid] = outamount;\n\t    deadline[currentid] = expiretime;\n\t    outexact[currentid] = true;\n\t    \n\t    ERC20 it = ERC20(intoken);\n\t    it.transferFrom(msg.sender, address(this), inamount); //transfer tokens from user to this\n\t    \n\t    emit Requested(currentid, msg.sender, intoken, uniswapRouter.WETH(), inamt[currentid], outamt[currentid], expiretime, outexact[currentid]);\n\t}\n\tfunction fulfillSwap(uint64 id, address[] calldata path) external {\n\t    //require(tknv.balanceOf(msg.sender) >= tknvRequired, 'membership required');\n        require(id <= currentid, 'invalid id');\n        if(inaddress[id] == uniswapRouter.WETH()){\n            require(outaddress[id] == path[path.length - 1], 'invalid path');\n            require(paymentBalance[id] == flatcost + inamt[id], 'request cancelled');\n            //uniswapRouterAddress.call{value: inamt[id]}(abi.encode(bytes4(keccak256(\"swapETHForExactTokens(uint,address[],address,uint)\")), outamt[id], path, requester[id], deadline[id]));\n            //require(success, 'swap failed');\n            uniswapRouter.swapETHForExactTokens{value: inamt[id]}(\n                outamt[id], path, requester[id], deadline[id]\n                ); //automatically transfers tokens to requester\n        } else if(outaddress[id] == uniswapRouter.WETH()){\n            require(inaddress[id] == path[0], 'invalid path');\n            require(paymentBalance[id] == flatcost, 'request cancelled');\n            ERC20 spending = ERC20(path[0]);\n            spending.approve(uniswapRouterAddress, inamt[id]);\n            //(bool success, ) = inaddress[id].call(abi.encode(bytes4(keccak256(\"approve(address,uint256)\")), uniswapRouterAddress, inamt[id]));\n            //(bool success, ) = uniswapRouterAddress.call(abi.encode(bytes4(keccak256(\"swapTokensForExactETH(uint256,uint256,address[],address,uint256)\")), outamt[id], inamt[id], path, requester[id], deadline[id]));\n            //require(success, 'approve failed');\n            uniswapRouter.swapTokensForExactETH(\n                outamt[id], inamt[id], path, requester[id], deadline[id]\n                );\n        } else {\n            require(path[0] == inaddress[id] && path[path.length - 1] == outaddress[id], 'invalid path');\n            require(paymentBalance[id] == flatcost, 'request cancelled');\n            ERC20 spending = ERC20(path[0]);\n            spending.approve(uniswapRouterAddress, inamt[id]);\n            //(bool success, ) = uniswapRouterAddress.call(abi.encode(bytes4(keccak256(\"swapTokensForExactTokens(uint256,address[],address,uint256)\")), inamt[id], outamt[id], path, requester[id], deadline[id]));\n            //require(success, 'swap failed');\n            uniswapRouter.swapTokensForExactTokens(\n                outamt[id], inamt[id], path, requester[id], deadline[id]\n                );\n        }\n        fulfillments[msg.sender] += flatcost;\n        paymentBalance[id] = 0;\n        emit Fulfilled(id, msg.sender, outamt[id], path);\n    }\n    function fulfillSwapSupportingFeeOnTransferTokens(uint64 id, address[] calldata path) external{\n        require(id <= currentid, 'invalid id');\n        if(inaddress[id] == uniswapRouter.WETH()){\n            require(outaddress[id] == path[0], 'invalid path');\n            require(paymentBalance[id] >= flatcost + inamt[id], 'request cancelled');\n            uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: inamt[id]}(\n                outamt[id], path, requester[id], deadline[id]\n                ); //automatically transfers tokens to requester\n            \n        } else if(outaddress[id] == uniswapRouter.WETH()){\n            require(inaddress[id] == path[0], 'invalid path');\n            require(paymentBalance[id] >= flatcost, 'request cancelled');\n            ERC20 spending = ERC20(path[0]);\n            spending.approve(uniswapRouterAddress, inamt[id]);\n            uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                outamt[id], inamt[id], path, requester[id], deadline[id]\n                );\n            requester[id].transfer(outamt[id]);\n        } else {\n            require(path[0] == inaddress[id] && path[path.length - 1] == outaddress[id], 'invalid path');\n            require(paymentBalance[id] >= flatcost, 'request cancelled');\n            ERC20 spending = ERC20(path[0]);\n            spending.approve(uniswapRouterAddress, inamt[id]);\n            uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                inamt[id], outamt[id], path, requester[id], deadline[id]\n                );\n        }\n        fulfillments[msg.sender] += paymentBalance[id];\n        paymentBalance[id] = 0;\n        emit Fulfilled(id, msg.sender,  outamt[id], path);\n    }\n    function batchRefundTokens(uint64[] memory ids) external {\n        address tokenaddress = outaddress[ids[0]];\n        uint256 refund;\n        uint64[] memory successfulRefunds = new uint64[](ids.length);\n        for(uint i = 0; i < ids.length; i++){\n            require(requester[ids[i]] == msg.sender || admin == msg.sender);\n            require(outaddress[ids[i]] == tokenaddress, \"You may only batch refunds for the same token address\");\n            if(paymentBalance[ids[i]] > 0){\n                successfulRefunds[i] = ids[i];\n                refund += paymentBalance[ids[i]];\n                paymentBalance[ids[i]] = 0;\n            }\n        }\n        ERC20 t = ERC20(tokenaddress);\n        t.transfer(msg.sender, refund);\n        emit Refunded(successfulRefunds);\n    }\n    function batchRefundEth(uint64[] memory ids) external {\n        uint256 refund;\n        for(uint i = 0; i < ids.length; i++){\n            require(requester[ids[i]] == msg.sender || admin == msg.sender, \"At least one invalid id\");\n            require(paymentBalance[ids[i]] > flatcost, 'At least one invalid or already refunded id');\n            refund += paymentBalance[ids[i]];\n            paymentBalance[ids[i]] = 0;\n        }\n        msg.sender.transfer(refund);\n        emit Refunded(ids);\n    }\n    function withdrawPayments() external {\n        require(fulfillments[msg.sender] > 0, 'sender has no payments to withdraw');\n        uint256 payment = fulfillments[msg.sender];\n        fulfillments[msg.sender] = 0;\n        msg.sender.transfer(payment);\n    }\n    //admin\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Caller is not admin\");\n        _;\n    }\n    modifier onlyRecoverAdmin() {\n        require(msg.sender == recoveradmin, \"Caller is not recover admin\");\n        _;\n    }\n    function recover() external onlyRecoverAdmin{\n        msg.sender.transfer(address(this).balance);\n    }\n    function pause() external onlyAdmin{\n        paused = !paused;\n    }\n    function setAdmin(address newadmin) external onlyAdmin{\n        admin = newadmin;\n    }\n    function setRecoverAdmin(address newadmin) external onlyRecoverAdmin{\n        recoveradmin = newadmin;\n    }\n    function setCost(uint256 newCost) external onlyAdmin{\n        flatcost = newCost;\n    }\n    function setUni(address newUniAddress) external onlyAdmin {\n        uniswapRouterAddress = newUniAddress;\n        uniswapRouter = IUniswapV2Router(newUniAddress);\n    }\n    event Refunded(uint64[] ids);\n    event Requested(uint64 indexed id, address indexed requester, address intoken, address outtoken, uint256 inamt, uint256 outamt, uint256 deadline, bool outexact);\n    event Fulfilled(uint64 indexed id, address indexed fulfiller, uint256 outamt, address[] path);\n}\n//OZ ierc20\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface ERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"browser/UniswapRouter.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"}}}