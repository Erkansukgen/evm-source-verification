{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"bridge/lib/Context.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity  = 0.8.9;\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"bridge/lib/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity  = 0.8.9;\nimport \"./Context.sol\";\nabstract contract Ownable is Context {\n    address private _owner;\n    address public pendingOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event TransferPendingOwner(address indexed previousOwner, address indexed newOwner);\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    // constructor() {\n    //     _owner = msg.sender;\n    //     emit OwnershipTransferred(address(0), msg.sender);\n    // }\n\n    function ownerInit(address _initializeOwner) internal {\n        _owner = _initializeOwner;\n        emit OwnershipTransferred(address(0), _initializeOwner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner, \"no permission\");\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param newOwner The address to transfer ownership to.\n     */\n    //转移owner权限函数\n    function transferOwnership(address newOwner)  public onlyOwner {\n        pendingOwner = newOwner;//设置pendingOwner为newOwner\n        emit TransferPendingOwner(msg.sender, pendingOwner);\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    //接受owner权限函数，仅pendingOwner可调用\n    function acceptOwnership()  public onlyPendingOwner {\n        emit OwnershipTransferred(_owner, pendingOwner);\n        _owner = pendingOwner;//更新owner为pendingOwner\n        pendingOwner = address(0);//pendingOwner置为零地址\n    }\n\n}"},"bridge/lib/blockedList.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity  = 0.8.9;\nimport \"./Ownable.sol\";\ncontract BlockedList is Ownable {\n    mapping(address => bool) internal blockList;\n    address public configurationController;\n    event AddBlockList(address _account);\n    event RemoveBlockList(address _account);\n    event SetConfigAdmin(address _owner, address _account);\n    constructor(address _configurationController){\n        configurationController = _configurationController;\n    }\n    function isBlocked(address _account) public view  returns(bool) {\n        return blockList[_account];\n    }\n    modifier onlyConfigurationController() {\n        require(msg.sender== configurationController, \"caller is not the admin\");\n        _;\n    }\n\n    function setConfigurationController(address _configurationController) public onlyOwner{\n        require(_configurationController != address(0), \"the account is zero address\");\n        emit SetConfigAdmin(configurationController, _configurationController);\n        configurationController = _configurationController;\n\n    }\n\n    function addBlockList(address[] memory _accountList) public onlyConfigurationController {\n        uint256 length = _accountList.length;\n        for (uint i = 0; i < length; i++) {\n            blockList[_accountList[i]] = true;\n            emit AddBlockList(_accountList[i]);\n        }\n    }\n\n    function removeBlockList(address[] memory _accountList) public onlyConfigurationController{\n        uint256 length = _accountList.length;\n        for (uint i = 0; i < length; i++) {\n            blockList[_accountList[i]] = true;\n            emit RemoveBlockList(_accountList[i]);\n        }\n    }\n}"}}}