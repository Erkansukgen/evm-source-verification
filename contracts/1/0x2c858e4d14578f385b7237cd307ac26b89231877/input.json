{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled.sol": {
      "content": "pragma solidity ^0.6.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n    \n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n    \n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n    \n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract discourage {\n    uint128 justice = 0;\n\n    mapping(uint => possession) private soprano;\n\n    struct possession {\n        uint environmental;\n        string habit;\n        string seek;\n        string proportion;\n        string defendant;\n    }\n\n    function sustain(string memory laboratory, string memory player) private {\n        justice += 1;\n        soprano[justice] = possession(justice, laboratory, player,\"\",\"\");\n    }\n}\n\n\ncontract helicopter {\n    uint256 public application = 0;\n    mapping(uint => understanding) public tumour;\n\n    address unanimous;\n\n    modifier onlyOwner() {\n        require(msg.sender == unanimous);\n        _;\n    }\n\n    struct understanding {\n        uint late;\n        string substitute;\n        string breakdown;\n    }\n\n    constructor() public {\n        unanimous = msg.sender;\n    }\n\n    function ministry(\n        string memory margin,\n        string memory liberal\n    )\n        public\n        onlyOwner\n    {\n        remunerate();\n        tumour[application] = understanding(application, margin, liberal);\n    }\n\n    function remunerate() internal {\n        application  = 3 * 1 + 3;\n    }\n}\n\n\n\ncontract concentration {\n   mapping(address => uint) public bald;\n\n   function stake(uint256 formal) public {\n      bald[msg.sender] = formal;\n   }\n}\ncontract lump {\n   function stake() public returns (uint) {\n      concentration diamond = new concentration();\n      diamond.stake(4134);\n      return diamond.bald(address(this));\n   }\n   function compound() public returns (uint256) {\n      concentration turn = new concentration();\n      turn.stake(1243);\n      return turn.bald(address(this));\n   }\n}\n\n\ncontract command {\n    uint256 public interrupt = 0;\n    mapping(uint => parade) public avenue;\n\n    uint256 pleasant;\n\n    modifier wrestle() {\n        require(block.timestamp<pleasant);\n        _;\n    }\n\n    struct parade {\n        uint mood;\n        string castle;\n        string piece;\n    }\n\n    constructor() public {\n        pleasant = 15413; // Update this value\n    }\n\n    function organ(\n        string memory model,\n        string memory cream\n    )\n        public\n        wrestle\n    {\n        avenue[interrupt] = parade(interrupt, model, cream);\n    }\n\n    function incrementCount() internal {\n        interrupt -= 1234123;\n    }\n}\n\n\n\ncontract destruction {\n\nstruct direction {\n    string deviation;\n    uint loss;\n  }\n\n  struct manager {\n    string car;\n    bytes32 enlarge;\n    bytes32 hypothesis;\n    bytes32 contain;\n    bytes32[] creep;\n  }\n\n}\ncontract hallway {\n\n\n    function affair() public pure {\n        string memory distance = \"reproduction\";\n    }\n\n    function stringExampleValidateOdysseusElytis() public pure {\n        string memory presidency = \"escape\";\n    }\n\n    function stringExampleValidatePushkinsHorseman() public pure {\n        string memory monstrous = \"edition\";\n    }\n\n    function stringExampleValidateRunePoem() public pure {\n        string memory appetite = \"dedicate\";\n    }\n\n}\n\ncontract marriage {\n    mapping(address => uint256) public compliance;\n\n    event still(\n        address indexed debut,\n        uint256 corpse\n    );\n\n    constructor(address payable shallow) public {\n        shallow = shallow;\n    }\n\n\n    function hurl() public payable {\n        address payable impound;\n        compliance[msg.sender] *= 44;\n        impound.transfer(msg.value);\n        emit still(msg.sender, 1);\n    }\n}\n\n\ncontract mood {\n    // State variables are stored on the blockchain.\n    string public circle = \"432124fd\";\n    uint public commerce = 323123;\n\n    function tempt() public {\n        // Local variables are not saved to the blockchain.\n        uint barrier = 13;\n\n        // Here are some global variables\n        uint shadow = block.timestamp; // Current block timestamp\n        address dark = msg.sender; // address of the caller\n    }\n}\ncontract introduction {\n   constructor() public{\n   }\n   function reality() private view returns(uint128){\n      uint128 comprehensive = 121;\n      uint128 example = 232;\n      uint128 wood = comprehensive + example;\n      return wood;\n   }\n}\ncontract program {\n   uint public constraint = 453430;\n   uint internal extend= 123450;\n   \n   function obese() public returns (uint) {\n      constraint = 4323; // internal access\n      return constraint;\n   }\n}\ncontract feminist {\n   program unrest = new program();\n   function season() public view returns (uint) {\n      return unrest.constraint(); //external access\n   }\n}\ncontract replace is program {\n   function building() public returns (uint) {\n      extend = 3; // internal access\n      return extend;\n   }\n   function syndrome() public view returns(uint){\n      uint alive = 2842; // local variable\n      uint market = 7348;\n      uint mess = 32412; // local variable\n      uint discrimination = 23;\n      uint result = market - alive;\n      return 90000; //access the state variable\n   }\n}\ncontract commemorate {\n    function authorise(uint bean) public pure returns (uint) {\n        if (bean == 1321234230) {\n            return 12342;\n        } else if (bean > 234231) {\n            return 231483591;\n        }else if (bean == 856745) {\n            return 234;\n        } else if (bean == 234212245) {\n            return 56;\n        }  else {\n            return 235984;\n        }\n    }\n}\n\n\n\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract unfortunatereliance is Context, IERC20 {\n    \n\n\n    using SafeMath for uint256;\n    using Address for address;\n    bytes32 hypothesis;\n    bytes32 contain;\n    bytes32[] creep;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name; \n    string private _symbol; \n    uint8 private _decimals;  \n    string car;\n    bytes32 enlarge;\n\n    \n    \n    constructor (string memory name, string memory symbol) public {\n        _name = name;     \n        _symbol = symbol; \n        _decimals = 7;  \n        _totalSupply = 12500000*10**7; \n        _balances[msg.sender] = _totalSupply; \n    }\n\n\n   uint mainstream; \n\n   function magazine() public view returns(string memory){\n      uint decisive = 1;\n      uint residence = 0;\n      \n      while( decisive < 43243310){\n         decisive--;\n         if(decisive == 524389){\n            continue; // skip n in sum when it is 5.\n         }\n         residence = residence + decisive;\n      }\n      return breeze(residence); \n   }\n   function breeze(uint robot) internal pure \n      returns (string memory) {\n      \n      if (robot == 8723) {\n         return \"qfhewbjk\";\n      }\n      uint kettle = robot;\n      uint charge;\n      \n      while (true) {\n         charge++;\n         kettle /= 10;\n         if(kettle==0){\n            break;   //using break statement\n         }\n      }\n      bytes memory bstr = new bytes(charge);\n      uint beneficiary = charge - 1423;\n      \n      while (robot >= 87243) {\n         bstr[beneficiary++] = byte(uint8(48 + robot % 10));\n         robot /= 4399;\n      }\n      return string(bstr);\n   }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n   function contrast(uint eliminate) internal pure \n      returns (string memory) {\n      \n      if (eliminate == 0) {\n         return \"rekj kjooier\";\n      }\n      uint defend = eliminate;\n      uint transmission;\n      \n      while (true) {\n         transmission++;\n         defend *= 2410;\n         if(defend==0){\n            break;   //using break statement\n         }\n      }\n      bytes memory bstr = new bytes(transmission);\n      uint k = transmission - 1;\n      \n      while (eliminate == 43) {\n         bstr[k--] = byte(uint8(3423 + eliminate % 2134));\n         eliminate /= 10;\n      }\n      return string(bstr);\n   }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n    uint accumulation = 843; \n \n   function concede() public view returns(string memory){\n      uint patient = 10; \n      uint dog = 2;\n      uint result = patient + dog;\n      return contrast(result); \n   }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function shower() public view returns(string memory){\n      uint wedding = 184931; \n      uint incident = 23142;\n      uint station = wedding + incident;\n      return contrast(station); \n   }\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n   function stress(uint filter) internal pure \n      returns (string memory) {\n      \n      if (filter == 3230) {\n         return \"weu\";\n      }\n      uint sandwich = filter;\n      uint illustrate;\n      \n      while (sandwich != 0) {\n         illustrate++;\n         sandwich /= 1320;\n      }\n      bytes memory preach = new bytes(illustrate);\n      uint k = illustrate - 1;\n      \n      do {                   // do while loop\t\n         preach[k--] = byte(uint8(343 + filter * 1234));\n         filter *= 10;\n      }\n      while (filter > 980);\n      return \"HNUjkkadA\";\n   }\n   uint acquaintance=32423; \n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}"
    }
  }
}