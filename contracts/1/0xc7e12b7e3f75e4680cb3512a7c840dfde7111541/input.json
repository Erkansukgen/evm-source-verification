{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/TradeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./TradeOwner.sol\";\n\ncontract TradeManager is TradeOwner {\n\n  using Address   for address payable;\n  using SafeMath  for uint256;\n  using SafeERC20 for IERC20;\n\n  enum Status { Unfilled, Filled, Cancelled }\n\n  //events ===========\n  event eventCreateNewTrade(\n    bytes32 tradeId,\n    address user0,\n    address token0,\n    uint256 token0Amount,\n    address[] acceptedTokens,\n    uint256[] tokenPrices,\n    uint256 createdAt,\n    uint8 status,\n    uint256 fillCount,\n    uint256 token0AmountFilled\n  );\n\n  event eventUpdateTradePrices(\n    bytes32 tradeId,\n    address user0,\n    address[] acceptedTokens,\n    uint256[] tokenPrices\n  );\n\n  event eventFillTrade(\n    bytes32 tradeId,\n    address user0,\n    uint8 status,\n    uint256 fillCount,\n    uint256 token0AmountFilled,\n    address filler,\n    address fillToken,\n    uint256 fillAmount\n  );\n\n  event eventCancelTrade(\n    bytes32 tradeId,\n    address user0,\n    address token0,\n    uint256 token0Amount,\n    uint256 status,\n    uint256 fillCount,\n    uint256 token0AmountFilled\n  );\n\n  struct Filler {\n    bool isExist;\n    address user;\n    address token;\n    uint256 tokenAmount;\n  }\n\n  struct Trade {\n    bool    isExist;\n    address user0;\n    address token0;\n    uint256 token0Amount;\n    address[] acceptedTokens;\n    uint256[] tokenPrices;\n    uint256 createdAt;\n    Status status;\n    uint256 fillCount;\n    uint256 token0AmountFilled;\n  }\n\n  struct FillFn {\n    uint256 token0AmountLeft;\n    uint256 tokenPrice;\n    uint256 amountToBeFilled;\n  }\n\n  struct TradeCommissions {\n    uint256 token0Commission;\n    uint256 fillCommission;\n  }\n\n  mapping(string => Trade)   public trades;\n  mapping(string => Filler)  public fills;\n  mapping(string => bool)    internal fillLocks;\n\n  constructor() {}\n\n  modifier onlyUser() {\n    require(_msgSender() != owner(), \"Owner not allowed.\");\n    _;\n  }\n\n  receive() external payable { }\n\n  function createNewTrade(\n    bytes32 tradeId,\n    address token0,\n    uint256 token0Amount,\n    address[] memory acceptedTokens,\n    uint256[] memory tokenPrices\n  ) external onlyUser payable {\n\n    require(contractEnabled == true, \"Contract has been disabled\");\n    require(token0Amount > 0, \"Trade must be more than 0\");\n    require(_validAcceptedTokens(token0, acceptedTokens) == true, \"Accepted tokens invalid\");\n    require(_validPrices(tokenPrices) == true, \"Token prices invalid\");\n\n    string memory tradeKey = _returnTradeKey(tradeId, _msgSender());\n    require(trades[tradeKey].isExist != true, \"Trade Exists\");\n\n    if (token0 == address(0)) {\n      require(msg.value >= token0Amount, \"Insufficient deposit\");\n      Address.sendValue(payable(address(this)), token0Amount);\n    } else {\n      IERC20(token0).safeTransferFrom(address(_msgSender()), address(this), token0Amount);\n    }\n\n    Trade memory newTrade;\n    newTrade.isExist = true;\n    newTrade.user0 = _msgSender();\n    newTrade.token0 = token0;\n    newTrade.token0Amount = token0Amount;\n    newTrade.acceptedTokens = acceptedTokens;\n    newTrade.tokenPrices = tokenPrices;\n    newTrade.createdAt = block.timestamp;\n    newTrade.status = Status.Unfilled;\n    newTrade.fillCount = 0;\n    newTrade.token0AmountFilled = 0;\n\n    trades[tradeKey] = newTrade;\n\n    emit eventCreateNewTrade(\n      tradeId,\n      newTrade.user0,\n      newTrade.token0,\n      newTrade.token0Amount,\n      newTrade.acceptedTokens,\n      newTrade.tokenPrices,\n      newTrade.createdAt,\n      uint8(newTrade.status),\n      newTrade.fillCount,\n      newTrade.token0AmountFilled\n    );\n  }\n\n  function fillTrade(\n    bytes32 tradeId,\n    address user0,\n    address fillToken,\n    uint256 fillAmount\n  ) external onlyUser payable {\n\n    require(contractEnabled == true, \"Contract has been disabled\");\n    string memory tradeKey = _returnTradeKey(tradeId, user0);\n    require(trades[tradeKey].isExist, \"Invalid trade\");\n    require(user0 == trades[tradeKey].user0, \"Invalid trade\");\n    require(trades[tradeKey].status == Status.Unfilled, \"Cannot fill trade\");\n    require(_tokenIsAccepted(fillToken, trades[tradeKey].acceptedTokens) == true, \"Token not accepted\");\n    require(fillLocks[tradeKey] == false, \"Fill in progress, try again later\");\n\n    fillLocks[tradeKey] = true;\n\n    FillFn memory _fillFn;\n    _fillFn.token0AmountLeft = trades[tradeKey].token0Amount.sub(trades[tradeKey].token0AmountFilled);\n    _fillFn.tokenPrice = _getTokenPrice(fillToken, trades[tradeKey].acceptedTokens, trades[tradeKey].tokenPrices);\n    _fillFn.amountToBeFilled = _fillFn.tokenPrice.mul(fillAmount).div(oneWei);\n\n    require(_fillFn.amountToBeFilled <= _fillFn.token0AmountLeft, \"Cannot fill that amount\");\n\n    // if ETH, filler must deposit\n    if (fillToken == address(0)) {\n      require(msg.value >= fillAmount, \"Insufficient fill\");\n      Address.sendValue(payable(address(this)), fillAmount);\n    }\n\n    string memory fillKey = _returnFillKey(tradeId, trades[tradeKey].fillCount.add(1));\n    require(fills[fillKey].isExist != true, \"Fill already exists\");\n\n    Filler memory newFiller;\n    newFiller.isExist = true;\n    newFiller.user = _msgSender();\n    newFiller.token = fillToken;\n    newFiller.tokenAmount = fillAmount;\n    fills[fillKey] = newFiller;\n\n    trades[tradeKey].fillCount = trades[tradeKey].fillCount.add(1);\n    trades[tradeKey].token0AmountFilled = trades[tradeKey].token0AmountFilled.add(_fillFn.amountToBeFilled);\n    if (trades[tradeKey].token0AmountFilled == trades[tradeKey].token0Amount) {\n      trades[tradeKey].status = Status.Filled;\n    }\n\n    uint256 feeToUse = defaultFee;\n    string memory pairKey = _appendAddresses(trades[tradeKey].token0, fillToken);\n    if (pairs[pairKey].isExist == true) {\n      feeToUse = pairs[pairKey].fee;\n    }\n\n    TradeCommissions memory tradeCommissions;\n    tradeCommissions.token0Commission = _fillFn.amountToBeFilled.mul(feeToUse).div(feeDivider);\n    tradeCommissions.fillCommission = fillAmount.mul(feeToUse).div(feeDivider);\n\n    // send to msg sender\n    if (trades[tradeKey].token0 == address(0)) {\n      Address.sendValue(payable(address(_msgSender())), _fillFn.amountToBeFilled.sub(tradeCommissions.token0Commission));\n      Address.sendValue(payable(address(commissionAddress)), tradeCommissions.token0Commission);\n    } else {\n      IERC20(trades[tradeKey].token0).safeTransferFrom(address(this), address(_msgSender()), _fillFn.amountToBeFilled.sub(tradeCommissions.token0Commission));\n      IERC20(trades[tradeKey].token0).safeTransferFrom(address(this), address(commissionAddress), tradeCommissions.token0Commission);\n    }\n\n    // send to trade owner\n    if (fillToken == address(0)) {\n      Address.sendValue(payable(address(trades[tradeKey].user0)), fillAmount.sub(tradeCommissions.fillCommission));\n      Address.sendValue(payable(address(commissionAddress)), tradeCommissions.fillCommission);\n    } else {\n      IERC20(fillToken).safeTransferFrom(address(_msgSender()), address(trades[tradeKey].user0), fillAmount.sub(tradeCommissions.fillCommission));\n      IERC20(fillToken).safeTransferFrom(address(_msgSender()), address(commissionAddress), tradeCommissions.fillCommission);\n    }\n\n    fillLocks[tradeKey] = false;\n\n    // emit event\n    emit eventFillTrade(\n      tradeId,\n      trades[tradeKey].user0,\n      uint8(trades[tradeKey].status),\n      trades[tradeKey].fillCount,\n      trades[tradeKey].token0AmountFilled,\n      _msgSender(),\n      fillToken,\n      fillAmount\n    );\n  }\n\n  function updateTradePrices(\n    bytes32 tradeId,\n    address[] memory acceptedTokens,\n    uint256[] memory tokenPrices\n  ) external onlyUser {\n\n    require(contractEnabled == true, \"Contract has been disabled\");\n    string memory tradeKey = _returnTradeKey(tradeId, _msgSender());\n    require(trades[tradeKey].isExist, \"Invalid trade\");\n    require(trades[tradeKey].user0 == _msgSender(), \"Invalid permissions\");\n    require(trades[tradeKey].status == Status.Unfilled, \"Cannot fill trade\");\n    require(_validAcceptedTokens(trades[tradeKey].token0, acceptedTokens) == true, \"Accepted tokens invalid\");\n    require(_validPrices(tokenPrices) == true, \"Token prices invalid\");\n    require(fillLocks[tradeKey] == false, \"Fill in progress, try again later\");\n\n    fillLocks[tradeKey] = true;\n\n    trades[tradeKey].acceptedTokens = acceptedTokens;\n    trades[tradeKey].tokenPrices = tokenPrices;\n\n    fillLocks[tradeKey] = false;\n\n    emit eventUpdateTradePrices(\n      tradeId,\n      trades[tradeKey].user0,\n      acceptedTokens,\n      tokenPrices\n    );\n  }\n\n  function cancelTrade(\n    bytes32 tradeId\n  ) external onlyUser payable {\n\n    require(contractEnabled == true, \"Contract has been disabled\");\n    string memory tradeKey = _returnTradeKey(tradeId, _msgSender());\n    require(trades[tradeKey].isExist, \"Invalid trade\");\n    require(trades[tradeKey].status == Status.Unfilled, \"Cannot cancel trade\");\n    require(trades[tradeKey].user0 == _msgSender(), \"Invalid permissions\");\n\n    trades[tradeKey].status = Status.Cancelled;\n    Trade memory trade = trades[tradeKey];\n\n    uint256 token0AmountLeft = trade.token0Amount.sub(trade.token0AmountFilled);\n\n    if (trade.token0 == address(0)) {\n      Address.sendValue(payable(address(_msgSender())), token0AmountLeft);\n    } else {\n      require(IERC20(trade.token0).balanceOf(address(this)) >= token0AmountLeft, \"Insufficient balance\");\n      IERC20(trade.token0).safeTransfer(address(_msgSender()), token0AmountLeft);\n    }\n\n    emit eventCancelTrade(\n      tradeId,\n      trade.user0,\n      trade.token0,\n      trade.token0Amount,\n      uint8(trade.status),\n      trade.fillCount,\n      trade.token0AmountFilled\n    );\n  }\n\n  function _tokenIsAccepted(address fillToken, address[] memory acceptedTokens) internal pure returns (bool) {\n    uint256 arrayLength = acceptedTokens.length;\n    for (uint i = 0; i < arrayLength; i++) {\n      if (acceptedTokens[i] == fillToken) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function _validAcceptedTokens(address token, address[] memory acceptedTokens) internal view returns (bool) {\n    uint256 arrayLength = acceptedTokens.length;\n    if (arrayLength < 1 || arrayLength > maxAcceptedTokens) {\n      return false;\n    }\n    for (uint i = 0; i < arrayLength; i++) {\n      if (acceptedTokens[i] == token) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function _validPrices(uint256[] memory tokenPrices) internal pure returns (bool) {\n    uint256 arrayLength = tokenPrices.length;\n    for (uint i = 0; i < arrayLength; i++) {\n      if (tokenPrices[i] <= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n\n  function _getTokenPrice(address token, address[] memory acceptedTokens, uint256[] memory tokenPrices) internal pure returns (uint256) {\n    uint arrayLength = acceptedTokens.length;\n    for (uint i = 0; i < arrayLength; i++) {\n      if (acceptedTokens[i] == token) {\n        return tokenPrices[i];\n      }\n    }\n    return 0;\n  }\n\n  function _returnFillKey(bytes32 tradeId, uint256 fillCount) internal pure returns (string memory) {\n    return string(abi.encodePacked(tradeId, '||', fillCount));\n  }\n\n  function _returnTradeKey(bytes32 tradeId, address user0) internal pure returns (string memory) {\n    return string(abi.encodePacked(tradeId, '||', user0));\n  }\n\n}"
    },
    "contracts/TradeOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract TradeOwner is Ownable {\n\n  using Address for address payable;\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  address public commissionAddress;\n  uint256 public defaultFee;\n  uint256 public maxAcceptedTokens;\n  bool public contractEnabled;\n\n  uint256 constant feeDivider = 10000;\n  uint256 constant maxDefaultFee = 5000;\n  uint256 constant oneWei = 1000000000000000000;\n\n  struct Pair {\n    bool isExist;\n    uint256 fee;\n  }\n\n  mapping(string=>Pair) internal pairs;\n\n  event ChangedCommissionAddress(address newCommission);\n  event ChangedFee(uint256 newFee);\n  event ChangedMaxAcceptedTokens(uint256 newMax);\n  event ChangedContractDisabled(bool newContractEnabled);\n  event ChangedPairFee(address token0, address token1, uint256 fee);\n  event RescueETH(address rescueAddress, uint256 amount);\n  event RescueTokens(address token, address rescueAddress, uint256 amount);\n\n  constructor() {\n    defaultFee = 25;\n    contractEnabled = true;\n    maxAcceptedTokens = 3;\n  }\n\n  function setCommissionAddress(address _commissionAddress) external onlyOwner {\n    require(_commissionAddress != address(0), \"Commission cannot be zero address\");\n    commissionAddress = _commissionAddress;\n    emit ChangedCommissionAddress(commissionAddress);\n  }\n\n  function setDefaultFee(uint256 _fee) external onlyOwner {\n    require(_fee <= maxDefaultFee, \"Fee cannot be more than the maximum\");\n    defaultFee = _fee;\n    emit ChangedFee(defaultFee);\n  }\n\n  function setMaxAcceptedTokens(uint256 _max) external onlyOwner {\n    require(_max > 0, \"Max cannot be 0\");\n    maxAcceptedTokens = _max;\n    emit ChangedMaxAcceptedTokens(_max);\n  }\n\n  function setContractEnabled(bool _contractEnabled) external onlyOwner {\n    contractEnabled = _contractEnabled;\n    emit ChangedContractDisabled(contractEnabled);\n  }\n\n  function rescueETH(address rescueAddress, uint256 amount) external onlyOwner payable {\n    Address.sendValue(payable(address(rescueAddress)), amount);\n    emit RescueETH(rescueAddress, amount);\n  }\n\n  function rescueTokens(address token, address rescueAddress, uint256 amount) external onlyOwner payable {\n    IERC20(token).safeTransfer(address(rescueAddress), amount);\n    emit RescueTokens(token, rescueAddress, amount);\n  }\n\n  function setPairFee(address token0, address token1, uint256 fee) external onlyOwner {\n    require(fee > 0, \"Fee must be more than 0\");\n    require(fee <= maxDefaultFee, \"Fee cannot be more than the maximum\");\n    require(token0 != token1, \"Tokens cannot be equal\");\n\n    Pair memory newPair;\n    newPair.isExist = true;\n    newPair.fee = fee;\n\n    string memory pairOne = _appendAddresses(token0, token1);\n    string memory pairTwo = _appendAddresses(token1, token0);\n\n    pairs[pairOne] = newPair;\n    pairs[pairTwo] = newPair;\n\n    emit ChangedPairFee(token0, token1, fee);\n  }\n\n  function _appendAddresses(address token0, address token1) internal pure returns (string memory) {\n    return string(abi.encodePacked(token0, '||', token1));\n  }\n\n  function getPairFee(address token0, address token1) public view returns (Pair memory pair) {\n    string memory str = _appendAddresses(token0, token1);\n    return pairs[str];\n  }\n\n  function renounceOwnership() public view override onlyOwner {\n    revert(\"cannot renounce ownership\");\n  }\n\n}"
    }
  }
}