{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"contracts/batch_transfer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\nimport \"./ownable.sol\";\nimport \"./safe_erc20.sol\";\n\ncontract BatchTransfer is Ownable {\n    using SafeERC20 for IERC20;\n\n    function transferETH(address[] memory _tos, uint256 value) payable onlyOwner public returns (bool) {\n        require(_tos.length > 0);\n        for(uint32 i=0;i<_tos.length;i++) {\n            address(uint160(_tos[i])).transfer(value);\n        }\n        uint256 usedValue = _tos.length * value;\n        if (msg.value > usedValue) {\n            msg.sender.transfer(msg.value - usedValue);\n        }\n        return true;\n    }\n\n    function transferToken(address tokenAddress, address[] memory _tos, uint256 value) payable onlyOwner public returns (bool) {\n        require(_tos.length > 0);\n        IERC20 token = IERC20(tokenAddress);\n        for(uint32 i=0;i<_tos.length;i++) {\n            token.safeTransferFrom(msg.sender, address(uint160(_tos[i])), value);\n        }\n        return true;\n    }\n    \n    function withdraw() payable onlyOwner public {\n        require(address(this).balance > 0, \"no balance\");\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function depositToken(address tokenAddress, uint value) public {\n        require(value > 0, \"deposit amount should be > 0\");\n        IERC20 token = IERC20(tokenAddress);\n        token.safeTransferFrom(msg.sender, address(this), value);\n    }\n\n    function withdrawToken(address tokenAddress, uint value) onlyOwner public {\n        IERC20 token = IERC20(tokenAddress);\n        uint balance = token.balanceOf(address(this));\n        if (value == 0) {\n            value = balance;\n        } else {\n            require(balance >= value, \"token balance not enough\");\n        }\n        token.safeTransfer(msg.sender, value);\n    }\n\n    // important to receive ETH\n    receive() payable external {}\n}"},"contracts/grab.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\nimport \"./ownable.sol\";\nimport \"./whitelist.sol\";\nimport \"./batch_transfer.sol\";\nimport \"./safe_erc20.sol\";\nimport \"./iuniswap_router.sol\";\n\ncontract Grab is Ownable, Whitelist {\n    address internal uniswapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    IUniswapV2Router02 internal uniswapRouter;\n    // using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n    address[] public path;\n    uint256 public ai;\n    uint256 public aom;\n\n    constructor () public {\n        uniswapRouter = IUniswapV2Router02(uniswapRouterAddress);\n    }\n    \n    // function rush_e22(address[] memory path, uint256 ai, uint256 aom, uint8 ratio) payable public returns (uint[] memory) {\n    function rush_e11(address[] memory path, uint256 ai, uint256 aom) payable public onlyWhitelisted returns (uint[] memory) {\n        require(ai > 0, \"no in\");\n        require(aom > 0, \"no aom\");\n        // require(ai <= IERC20(path[0]).balanceOf(address(this)), \"no enough balance\"); // check balance\n        return uniswapRouter.swapExactTokensForTokens(ai, aom, path, address(this), now + 3600);\n    }\n    \n    function swap() payable public returns (uint[] memory) {\n        require(path.length >= 2 , \"path not set\");\n        require(ai > 0, \"no in\");\n        require(aom > 0, \"no aom\");\n        return uniswapRouter.swapExactTokensForTokens(ai, aom, path, address(this), now + 3600);\n    }\n    \n    function deposit(uint value) payable public {\n        require(value > 0, \"deposit amount should be > 0\");\n        require(msg.value >= value , \"msg value not enough\");\n        address(this).transfer(value);\n    }\n    \n    function withdraw(uint value) payable onlyOwner public {\n        if (value == 0) {\n            value = address(this).balance;\n        } else {\n            require(address(this).balance >= value, \"no enough balance\");\n        }\n        msg.sender.transfer(value);\n    }\n    \n    function depositToken(address tokenAddress, uint value) public {\n        require(value > 0, \"deposit amount should be > 0\");\n        IERC20 token = IERC20(tokenAddress);\n        token.safeTransferFrom(msg.sender, address(this), value);\n    }\n\n    function withdrawToken(address tokenAddress, uint value) onlyOwner public {\n        IERC20 token = IERC20(tokenAddress);\n        uint balance = token.balanceOf(address(this));\n        if (value == 0) {\n            value = balance;\n        } else {\n            require(balance >= value, \"token balance not enough\");\n        }\n        token.safeTransfer(msg.sender, value);\n    }\n    \n    function approveToken(address[] memory tokenAddresses, uint amount) onlyOwner public {\n        require(tokenAddresses.length > 0, \"token address length is invalid\");\n        for (uint i = 0; i < tokenAddresses.length; i++) {\n            IERC20 erc_obj = IERC20(tokenAddresses[i]);\n            erc_obj.approve(address(this), amount);\n        }\n    }\n    \n    function approveToRouter(address[] memory tokenAddresses, uint amount) onlyOwner public {\n        require(tokenAddresses.length > 0, \"token address length is invalid\");\n        for (uint i = 0; i < tokenAddresses.length; i++) {\n            IERC20 erc_obj = IERC20(tokenAddresses[i]);\n            erc_obj.safeApprove(address(uniswapRouter), amount);\n        }\n    }\n    \n    function setUniswapRouter(address newAddress) onlyOwner public  {\n        uniswapRouterAddress = newAddress;\n        uniswapRouter = IUniswapV2Router02(uniswapRouterAddress);\n    }\n    \n    function setGrab(address[] memory _path, uint256 _ai, uint256 _aom) onlyOwner public {\n        path = _path;\n        ai = _ai;\n        aom = _aom;\n    }\n    \n    // important to receive ETH\n    receive() payable external {}\n}"},"contracts/iuniswap_router.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"},"contracts/ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\ncontract Ownable {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"not owner\");\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public{\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}"},"contracts/safe_erc20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\nimport \"./safemath.sol\";\nimport \"./address.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n    //     uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n    //     _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    // }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"contracts/safemath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure  returns (uint) {\n        uint c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n    function div(uint a, uint b) internal pure returns (uint) {\n        require(b > 0);\n        uint c = a / b;\n        require(a == b * c + a % b);\n        return c;\n    }\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a);\n        return a - b;\n    }\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a);\n        return c;\n    }\n    function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n    function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\n        return a < b ? a : b;\n    }\n    function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n    function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}"},"contracts/whitelist.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.4;\n\nimport \"./ownable.sol\";\n\ncontract Whitelist is Ownable {\n    mapping(address => bool) whitelist;\n    event AddedToWhitelist(address indexed account);\n    event RemovedFromWhitelist(address indexed account);\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender), \"Fuck You!\");\n        _;\n    }\n\n    function add(address[] memory _address) public onlyOwner {\n        require(_address.length > 0, \"address length is 0\");\n        for (uint i = 0; i < _address.length; i++) {\n            whitelist[_address[i]] = true;\n            emit AddedToWhitelist(_address[i]);\n        }\n    }\n\n    function remove(address[] memory _address) public onlyOwner {\n        require(_address.length > 0, \"address length is 0\");\n        for (uint i = 0; i < _address.length; i++) {\n            whitelist[_address[i]] = false;\n            emit RemovedFromWhitelist(_address[i]);\n        }\n    }\n\n    function isWhitelisted(address _address) public view returns(bool) {\n        return whitelist[_address];\n    }\n}"}}}