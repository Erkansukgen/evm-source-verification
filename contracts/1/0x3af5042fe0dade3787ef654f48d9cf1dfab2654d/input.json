{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DSA/ConnectPool.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ninterface LiqudityInterface {\n    function deposit(address, uint) external payable;\n    function withdraw(address, uint) external;\n\n    function accessLiquidity(address[] calldata, uint[] calldata) external;\n    function returnLiquidity(address[] calldata) external payable;\n\n    function isTknAllowed(address) external view returns(bool);\n    function tknToCTkn(address) external view returns(address);\n    function liquidityBalance(address, address) external view returns(uint);\n}\n\ninterface CTokenInterface {\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\n}\n\ninterface CETHInterface {\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function repayBorrowBehalf(address borrower) external payable;\n}\n\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\ninterface MemoryInterface {\n    function getUint(uint _id) external returns (uint _num);\n    function setUint(uint _id, uint _val) external;\n}\n\ninterface EventInterface {\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\n}\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n    /**\n     * @dev Return ethereum address\n     */\n    function getAddressETH() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n    }\n\n    /**\n     * @dev Return Memory Variable Address\n     */\n    function getMemoryAddr() internal pure returns (address) {\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n    }\n\n    /**\n     * @dev Return InstaEvent Address.\n     */\n    function getEventAddr() internal pure returns (address) {\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n    }\n\n    /**\n     * @dev Get Uint value from InstaMemory Contract.\n    */\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n    }\n\n    /**\n     * @dev Set Uint value in InstaMemory Contract.\n    */\n    function setUint(uint setId, uint val) internal {\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n    }\n\n    /**\n     * @dev Connector Details\n    */\n    function connectorID() public pure returns(uint _type, uint _id) {\n        (_type, _id) = (1, 5);\n    }\n}\n\n\ncontract LiquidityHelpers is Helpers {\n    /**\n     * @dev Return InstaPool address\n     */\n    function getLiquidityAddress() internal pure returns (address) {\n        return 0x88046ab50A87c60c572aaa94647dC42Bdd18810d;\n    }\n}\n\n\ncontract LiquidityManage is LiquidityHelpers {\n\n    event LogDepositLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\n    event LogWithdrawLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\n\n    /**\n     * @dev Deposit Liquidity in InstaPool.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function deposit(address token, uint amt, uint getId, uint setId) external payable {\n        uint _amt = getUint(getId, amt);\n\n        uint ethAmt;\n        if (token == getAddressETH()) {\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\n            ethAmt = _amt;\n        } else {\n            _amt = _amt == uint(-1) ? TokenInterface(token).balanceOf(address(this)) : _amt;\n            TokenInterface(token).approve(getLiquidityAddress(), _amt);\n        }\n\n        LiqudityInterface(getLiquidityAddress()).deposit.value(ethAmt)(token, _amt);\n        setUint(setId, _amt);\n\n        emit LogDepositLiquidity(token, _amt, getId, setId);\n        bytes32 _eventCode = keccak256(\"LogDepositLiquidity(address,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\n        (uint _type, uint _id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n    }\n\n    /**\n     * @dev Withdraw Liquidity in InstaPool.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function withdraw(address token, uint amt, uint getId, uint setId) external payable {\n        uint _amt = getUint(getId, amt);\n\n        LiqudityInterface(getLiquidityAddress()).withdraw(token, _amt);\n        setUint(setId, _amt);\n\n        emit LogWithdrawLiquidity(token, _amt, getId, setId);\n        bytes32 _eventCode = keccak256(\"LogWithdrawLiquidity(address,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\n        (uint _type, uint _id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n    }\n}\n\n\ncontract LiquidityAccess is LiquidityManage {\n    event LogAccessLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\n    event LogReturnLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\n\n    /**\n     * @dev Access Token Liquidity from InstaPool.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function accessLiquidity(address token, uint amt, uint getId, uint setId) external payable {\n        uint _amt = getUint(getId, amt);\n\n        address[] memory _tknAddrs = new address[](1);\n        _tknAddrs[0] = token;\n        uint[] memory _amts = new uint[](1);\n        _amts[0] = _amt;\n\n        LiqudityInterface(getLiquidityAddress()).accessLiquidity(_tknAddrs, _amts);\n\n        setUint(setId, _amt);\n\n        emit LogAccessLiquidity(token, _amt, getId, setId);\n        bytes32 _eventCode = keccak256(\"LogAccessLiquidity(address,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\n        (uint _type, uint _id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n    }\n\n    /**\n     * @dev Return Token Liquidity from InstaPool.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function returnLiquidity(address token, uint getId, uint setId) external payable {\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\n        uint _amt;\n\n        if (token == getAddressETH()) {\n            CETHInterface cethContract = CETHInterface(liquidityContract.tknToCTkn(token));\n            _amt = cethContract.borrowBalanceCurrent(address(liquidityContract));\n            cethContract.repayBorrowBehalf.value(_amt)(address(liquidityContract));\n        } else {\n            CTokenInterface ctokenContract = CTokenInterface(liquidityContract.tknToCTkn(token));\n            _amt = ctokenContract.borrowBalanceCurrent(address(liquidityContract));\n            TokenInterface(token).approve(address(ctokenContract), _amt);\n            require(ctokenContract.repayBorrowBehalf(address(liquidityContract), _amt) == 0, \"repay-failed\");\n        }\n\n        setUint(setId, _amt);\n\n        emit LogReturnLiquidity(token, _amt, getId, setId);\n        bytes32 _eventCode = keccak256(\"LogReturnLiquidity(address,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\n        (uint _type, uint _id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n    }\n\n    /**\n     * @dev Access Multiple Token liquidity from InstaPool.\n     * @param tokens Array of token addresses.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amts Array of token amount.\n     * @param getId get token amounts at this IDs from `InstaMemory` Contract.\n     * @param setId set token amounts at this IDs in `InstaMemory` Contract.\n    */\n    function accessMultiLiquidity(\n        address[] calldata tokens,\n        uint[] calldata amts,\n        uint[] calldata getId,\n        uint[] calldata setId\n    ) external payable {\n        uint _length = tokens.length;\n        uint[] memory _amts = new uint[](_length);\n        for (uint i = 0; i < _length; i++) {\n            _amts[i] = getUint(getId[i], amts[i]);\n        }\n\n        LiqudityInterface(getLiquidityAddress()).accessLiquidity(tokens, _amts);\n\n        for (uint i = 0; i < _length; i++) {\n            setUint(setId[i], _amts[i]);\n\n            emit LogAccessLiquidity(tokens[i], _amts[i], getId[i], setId[i]);\n            bytes32 _eventCode = keccak256(\"LogAccessLiquidity(address,uint256,uint256,uint256)\");\n            bytes memory _eventParam = abi.encode(tokens[i], _amts[i], getId[i], setId[i]);\n            (uint _type, uint _id) = connectorID();\n            EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n        }\n    }\n\n    /**\n     * @dev Return Multiple token liquidity from InstaPool.\n     * @param tokens Array of token addresses.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param getId get token amounts at this IDs from `InstaMemory` Contract.\n     * @param setId set token amounts at this IDs in `InstaMemory` Contract.\n    */\n    function returnMultiLiquidity(address[] calldata tokens, uint[] calldata getId, uint[] calldata setId) external payable {\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\n\n        uint _length = tokens.length;\n\n        for (uint i = 0; i < _length; i++) {\n\n            for (uint j = 0; j < _length; j++) {\n                if (tokens[i] == tokens[j] && i != j) require(false, \"tkn-repeated\");\n            }\n\n            uint _amt;\n\n            if (tokens[i] == getAddressETH()) {\n                CETHInterface cethContract = CETHInterface(liquidityContract.tknToCTkn(tokens[i]));\n                _amt = cethContract.borrowBalanceCurrent(address(liquidityContract));\n                cethContract.repayBorrowBehalf.value(_amt)(address(liquidityContract));\n            } else {\n                CTokenInterface ctokenContract = CTokenInterface(liquidityContract.tknToCTkn(tokens[i]));\n                _amt = ctokenContract.borrowBalanceCurrent(address(liquidityContract));\n                TokenInterface(tokens[i]).approve(address(ctokenContract), _amt);\n                require(ctokenContract.repayBorrowBehalf(address(liquidityContract), _amt) == 0, \"repay-failed\");\n            }\n\n            setUint(setId[i], _amt);\n\n            emit LogReturnLiquidity(tokens[i], _amt, getId[i], setId[i]);\n            bytes32 _eventCode = keccak256(\"LogReturnLiquidity(address,uint256,uint256,uint256)\");\n            bytes memory _eventParam = abi.encode(tokens[i], _amt, getId[i], setId[i]);\n            (uint _type, uint _id) = connectorID();\n            EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n        }\n    }\n}\n\n\ncontract ConnectPool is LiquidityAccess {\n    string public name = \"InstaPool-v1\";\n}"}}}