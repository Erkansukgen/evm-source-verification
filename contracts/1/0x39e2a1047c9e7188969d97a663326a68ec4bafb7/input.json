{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ownable.sol":{"content":"contract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}"},"browser/whitelist.sol":{"content":"pragma solidity >=0.4.4;\r\n\r\nimport \"./ownable.sol\";\r\n// contract Ownable {\r\n//     address public owner;\r\n\r\n//     constructor() public {\r\n//         owner = msg.sender;\r\n//     }\r\n\r\n//     modifier onlyOwner {\r\n//         require(msg.sender == owner);\r\n//         _;\r\n//     }\r\n//     function transferOwnership(address newOwner) onlyOwner public{\r\n//         if (newOwner != address(0)) {\r\n//             owner = newOwner;\r\n//         }\r\n//     }\r\n// }\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n    event AddedToWhitelist(address indexed account);\r\n    event RemovedFromWhitelist(address indexed account);\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function add(address[] memory _address) public onlyOwner {\r\n        require(_address.length > 0, \"address length is 0\");\r\n        for (uint i = 0; i < _address.length; i++) {\r\n            whitelist[_address[i]] = true;\r\n            emit AddedToWhitelist(_address[i]);\r\n        }\r\n    }\r\n\r\n    function remove(address[] memory _address) public onlyOwner {\r\n        require(_address.length > 0, \"address length is 0\");\r\n        for (uint i = 0; i < _address.length; i++) {\r\n            whitelist[_address[i]] = false;\r\n            emit RemovedFromWhitelist(_address[i]);\r\n        }\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns(bool) {\r\n        return whitelist[_address];\r\n    }\r\n}"}}}