{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AgicAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// File: contracts/interface/IAgicAddressesProvider.sol\n\n\n\npragma solidity ^0.6.8;\n\n/**\n@title AgicAddressesProvider interface\n@notice provides the interface to fetch the Agic address\n */\n\ninterface IAgicAddressesProvider {\n\n    function getAgicFundPoolWhiteList() external view returns (address[] memory);\n\n    function verifyFundPoolWhiteList(address) external view returns (bool);\n\n    function addAgicFundPoolWhiteList(address) external;\n\n    function subAgicFundPoolWhiteList(address) external;\n\n    function getAgicFundPool() external view returns (address payable);\n\n    function setAgicFundPool(address payable pool) external;\n\n    function getAgic() external view returns (address);\n\n    function setAgic(address agic) external;\n\n    function getAgicEquityCard() external view returns (address);\n\n    function setAgicEquityCard(address agicEquityCard) external;\n\n    //Not used yet\n    function getExtendAddressesProvider() external view returns (address);\n\n    //Not used yet\n    function setExtendAddressesProvider(address extend) external;\n\n\n}\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/support/AgicAddressesProvider.sol\n\n\npragma solidity ^0.6.8;\n\n\n\n/**\n@title AgicAddressesProvider interface\n@notice provides the interface to fetch the Agic address\n */\n\ncontract AgicAddressesProvider is IAgicAddressesProvider, Ownable {\n\n    address payable private _agicFundPool;\n\n    address private _agic;\n\n    address private _agicEquityCard;\n\n    address private _extendAddressesProvider;\n\n    mapping(address => uint256) private _whiteListIndex;\n\n    address[] private _whiteList;\n\n    constructor() public {\n        _whiteList.push(address(0));\n    }\n\n    function getAgicFundPoolWhiteList() public view override returns (address[] memory){\n        return _whiteList;\n    }\n\n    function verifyFundPoolWhiteList(address aecAddress) override public view returns (bool){\n        return _whiteListIndex[aecAddress] != 0;\n    }\n\n    function addAgicFundPoolWhiteList(address aecAddress) public override onlyOwner {\n        _whiteListIndex[aecAddress] = _whiteList.length;\n        _whiteList.push(aecAddress);\n    }\n\n    function subAgicFundPoolWhiteList(address aecAddress) public override onlyOwner {\n        uint256 index = _whiteListIndex[aecAddress];\n        if (index != 0) {\n            delete _whiteList[index];\n            delete _whiteListIndex[aecAddress];\n            _whiteList.pop();\n        }\n    }\n\n    function getAgicFundPool() public view override returns (address payable){\n        return _agicFundPool;\n    }\n\n    function setAgicFundPool(address payable pool) public override onlyOwner {\n        _agicFundPool = pool;\n    }\n\n    function getAgic() public view override returns (address){\n        return _agic;\n    }\n\n    function setAgic(address agic) public override onlyOwner {\n        _agic = agic;\n    }\n\n    function getAgicEquityCard() public view override returns (address){\n        return _agicEquityCard;\n    }\n\n    function setAgicEquityCard(address agicEquityCard) public override onlyOwner {\n        _agicEquityCard = agicEquityCard;\n    }\n\n    //Not used yet\n    function getExtendAddressesProvider() public view override returns (address){\n        return _extendAddressesProvider;\n    }\n\n    //Not used yet\n    function setExtendAddressesProvider(address extend) public override onlyOwner {\n        _extendAddressesProvider = extend;\n    }\n\n}\n"
    }
  }
}