{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Address.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"Context.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"Dogira.sol":{"content":"/**\n * Dogira Token\n * https://Dogira.net\n */\n\npragma solidity ^0.6.12;\n// SPDX-License-Identifier: Unlicensed\n\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\n\ncontract Dogira is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1000000000 * 10**9;\n\n    string private constant _name = \"Dogira\";\n    string private constant _symbol = \"DOGIRA\";\n    uint8 private constant _decimals = 9;\n\n    uint256 public _taxFee = 0;\n    uint256 private _previousTaxFee = _taxFee;\n    address[] private _includedInFees;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n    address public previousUniswapV2Pair;\n    address public pendingUniswapV2Pair;\n    uint256 public pairSwitchUnlockTimestamp = 0;\n    bool public pairSwitchPossible = false;\n\n    address public bridge;\n\n    address payable public devWallet;\n\n    bool inSwapTokens;\n    bool public SwapTokensEnabled = true;\n\n    uint256 public maxTxAmount = 50000000 * 10**9;\n    uint256 private numTokensSwap = 50000 * 10**9;\n\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapTokensEnabledUpdated(bool enabled);\n    event SwapAndLiquifyFailed(uint256 tokensSwapped);\n    event SwapTokensForETH(uint256 tokensSwapped);\n\n    event FeeAppliedTo(address _address);\n    event FeeExcludedFrom(address _address);\n\n    event SwapRouterUpdated(address _router);\n    event SwapPairUpdated(address _pair);\n    event SwapPairRequested(address _pair, uint256 unlockTimestamp);\n    event SwapPairLocked(address _pair);\n    event BridgeAddressUpdated(address _bridge);\n    event TaxUpdated(uint256 taxFee);\n    event MaxTxPercentUpdated(uint256 maxTxPercent);\n    event DevWalletChanged(address newWallet);\n    event GlobalTradingEnabled();\n\n    address[] private blacklist;\n    uint256 public blacklistUnlockTimestamp = 0;\n    uint8 constant private _maxBlacklistings = 5;\n    uint8 private _currentBlacklistings = 0;\n    bool public limitedBlacklist = true;\n    bool public blacklistPossible = true;\n\n    // whitelist for adding liquidity while global trading is disabled\n    mapping (address => bool) private _routerWhitelist;\n    event Whitelisted(address indexed node);\n\n    event Blacklisted(address indexed node, uint8 blacklistsThisUnlock);\n    event Unblacklisted(address indexed node);\n    event BlacklistUnlockCalled(uint256 unlockTimestamp, uint daysUntilUnlock, bool isLimited);\n    event BlacklistLockCalled(uint256 lockTimestamp);\n\n    bool public globalTradingEnabled = false;\n\n    modifier lockTheSwap {\n        inSwapTokens = true;\n        _;\n        inSwapTokens = false;\n    }\n\n    constructor (address _wallet) public {\n        _balances[_msgSender()] = _tTotal;\n\n        // This Router address should be changed based on network.\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n        // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n\n        // set the rest of the contract variables\n        uniswapV2Router = _uniswapV2Router;\n        devWallet = payable(_wallet);\n\n        // whitelisting for liquidity pair adding\n        _routerWhitelist[address(this)] = true;\n        _routerWhitelist[owner()] = true;\n        _routerWhitelist[address(_uniswapV2Router)] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n\n        //Public list of flashbots & front-runners\n        blacklistPreloadedAddress(address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a));\n        blacklistPreloadedAddress(address(0xFFFFF6E70842330948Ca47254F2bE673B1cb0dB7));\n        blacklistPreloadedAddress(address(0xD334C5392eD4863C81576422B968C6FB90EE9f79));\n        blacklistPreloadedAddress(address(0x20f6fCd6B8813c4f98c0fFbD88C87c0255040Aa3));\n        blacklistPreloadedAddress(address(0xC6bF34596f74eb22e066a878848DfB9fC1CF4C65));\n        blacklistPreloadedAddress(address(0x231DC6af3C66741f6Cf618884B953DF0e83C1A2A));\n        blacklistPreloadedAddress(address(0x00000000003b3cc22aF3aE1EAc0440BcEe416B40));\n        blacklistPreloadedAddress(address(0x42d4C197036BD9984cA652303e07dD29fA6bdB37));\n        blacklistPreloadedAddress(address(0x22246F9BCa9921Bfa9A3f8df5baBc5Bc8ee73850));\n        blacklistPreloadedAddress(address(0xbCb05a3F85d34f0194C70d5914d5C4E28f11Cc02));\n        blacklistPreloadedAddress(address(0x5B83A351500B631cc2a20a665ee17f0dC66e3dB7));\n        blacklistPreloadedAddress(address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b));\n        blacklistPreloadedAddress(address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5));\n        blacklistPreloadedAddress(address(0x4aEB32e16DcaC00B092596ADc6CD4955EfdEE290));\n        blacklistPreloadedAddress(address(0xe986d48EfeE9ec1B8F66CD0b0aE8e3D18F091bDF));\n        blacklistPreloadedAddress(address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7));\n        blacklistPreloadedAddress(address(0xc496D84215d5018f6F53E7F6f12E45c9b5e8e8A9));\n        blacklistPreloadedAddress(address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F));\n        blacklistPreloadedAddress(address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE));\n        blacklistPreloadedAddress(address(0x72b30cDc1583224381132D379A052A6B10725415));\n        blacklistPreloadedAddress(address(0x7100e690554B1c2FD01E8648db88bE235C1E6514));\n        blacklistPreloadedAddress(address(0x000000917de6037d52b1F0a306eeCD208405f7cd));\n        blacklistPreloadedAddress(address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6));\n        blacklistPreloadedAddress(address(0x00000000000003441d59DdE9A90BFfb1CD3fABf1));\n        blacklistPreloadedAddress(address(0x0000000000007673393729D5618DC555FD13f9aA));\n        blacklistPreloadedAddress(address(0xA3b0e79935815730d942A444A84d4Bd14A339553));\n        blacklistPreloadedAddress(address(0x000000005804B22091aa9830E50459A15E7C9241));\n        blacklistPreloadedAddress(address(0x323b7F37d382A68B0195b873aF17CeA5B67cd595));\n        blacklistPreloadedAddress(address(0x6dA4bEa09C3aA0761b09b19837D9105a52254303));\n        blacklistPreloadedAddress(address(0x000000000000084e91743124a982076C59f10084));\n        blacklistPreloadedAddress(address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d));\n        blacklistPreloadedAddress(address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));\n        blacklistPreloadedAddress(address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));\n        blacklistPreloadedAddress(address(0x45fD07C63e5c316540F14b2002B085aEE78E3881));\n        blacklistPreloadedAddress(address(0xDC81a3450817A58D00f45C86d0368290088db848));\n        blacklistPreloadedAddress(address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964));\n        blacklistPreloadedAddress(address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95));\n        blacklistPreloadedAddress(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));\n        blacklistPreloadedAddress(address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345));\n        blacklistPreloadedAddress(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));\n        blacklistPreloadedAddress(address(0x65A67DF75CCbF57828185c7C050e34De64d859d0));\n        blacklistPreloadedAddress(address(0x7589319ED0fD750017159fb4E4d96C63966173C1));\n        blacklistPreloadedAddress(address(0x0000000099cB7fC48a935BcEb9f05BbaE54e8987));\n        blacklistPreloadedAddress(address(0x03BB05BBa541842400541142d20e9C128Ba3d17c));\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function includeInFee(address _address) external onlyOwner {\n        _includedInFees.push(_address);\n\n        emit FeeAppliedTo(_address);\n    }\n\n    function isIncludedInFees(address _address) public view returns(bool) {\n        for(uint i = 0; i < _includedInFees.length; i++) {\n            if(_includedInFees[i] == _address) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function excludeFromFee(address _address) external onlyOwner {\n        for(uint i = 0; i < _includedInFees.length; i++) {\n            if(_includedInFees[i] == _address) {\n                _includedInFees[i] = _includedInFees[_includedInFees.length - 1];\n                _includedInFees[_includedInFees.length - 1] = address(0x0);\n                _includedInFees.pop();\n\n                emit FeeExcludedFrom(_address);\n                break;\n            }\n        }\n    }\n\n    function setUniswapRouter(address _router) external onlyOwner {\n        require(_router != address(0x0), \"Invalid address\");\n        uniswapV2Router = IUniswapV2Router02(_router);\n\n        emit SwapRouterUpdated(_router);\n    }\n\n    function requestPairSwitch(address _pair) external onlyOwner {\n        require(_pair != address(0x0), \"Invalid address\");\n        pendingUniswapV2Pair = _pair;\n        previousUniswapV2Pair = uniswapV2Pair;\n        pairSwitchUnlockTimestamp = now + 7 days;\n        pairSwitchPossible = true;\n        emit SwapPairRequested(_pair, pairSwitchUnlockTimestamp);\n    }\n\n    function setUniswapPairToPending() external onlyOwner {\n        require(pairSwitchPossible, \"Cannot update pair - requestPairSwitch has not been called.\");\n        require(now > pairSwitchUnlockTimestamp, \"Cannot update pair - required unlock time period has not yet passed.\");\n\n        uniswapV2Pair = pendingUniswapV2Pair;\n        emit SwapPairUpdated(pendingUniswapV2Pair);\n    }\n\n    function revertToPreviousPair() external onlyOwner {\n        require(pairSwitchPossible, \"Cannot update pair - requestPairSwitch has not been called.\");\n        require(now > pairSwitchUnlockTimestamp, \"Cannot update pair - required unlock time period has not yet passed.\");\n\n        uniswapV2Pair = previousUniswapV2Pair;\n        emit SwapPairUpdated(uniswapV2Pair);\n    }\n\n    function lockPairSwitching() external onlyOwner {\n        pairSwitchPossible = false;\n        emit SwapPairLocked(uniswapV2Pair);\n    }\n\n    function setBridgeAddress(address _bridge) external onlyOwner {\n        require(_bridge != address(0x0), \"Invalid address\");\n        bridge = _bridge;\n\n        emit BridgeAddressUpdated(_bridge);\n    }\n\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\n        require(taxFee <= 2, \"Input number between 0 - 2\");\n        _taxFee = taxFee;\n\n        emit TaxUpdated(taxFee);\n    }\n\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n        require(maxTxPercent >= 1, \"Anti-whale limitations cannot fall below 1%/supply per Tx.\");\n        maxTxAmount = _tTotal.mul(maxTxPercent).div(\n            10**2\n        );\n\n        emit MaxTxPercentUpdated(maxTxPercent);\n    }\n\n    function setConvertMinimum(uint256 _numTokensSwap) external onlyOwner {\n        require(_numTokensSwap < 500000, \"Minimum token conversion amount cannot exceed 500,000 tokens!\");\n        require(_numTokensSwap > 500, \"Minimum token conversion amount cannot be under 500 tokens!\");\n        numTokensSwap = _numTokensSwap * 10**9;\n        emit MinTokensBeforeSwapUpdated(numTokensSwap);\n    }\n\n    function setDevWallet(address payable newWallet) external onlyOwner {\n        require(newWallet != address(0x0), \"Invalid address\");\n        require(devWallet != newWallet, \"Wallet already set!\");\n        devWallet = payable(newWallet);\n\n        emit DevWalletChanged(newWallet);\n    }\n\n    function setSwapEnabled(bool enabled) external onlyOwner {\n        SwapTokensEnabled = enabled;\n        emit SwapTokensEnabledUpdated(enabled);\n    }\n\n    function setGlobalTradingEnabled() external onlyOwner {\n        globalTradingEnabled = true;\n        emit GlobalTradingEnabled();\n    }\n\n    //to receive ETH from uniswapV2Router when swapping\n    receive() external payable {}\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\n        uint256 tFee = calculateTaxFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tFee);\n        return (tTransferAmount, tFee);\n    }\n\n\n    function _takeFee(uint256 tFee) private {\n        _balances[address(this)] = _balances[address(this)].add(tFee);\n    }\n\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_taxFee).div(\n            10**2\n        );\n    }\n\n    function removeAllFee() private {\n        if(_taxFee == 0) return;\n\n        _previousTaxFee = _taxFee;\n        _taxFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        if (!globalTradingEnabled && !_routerWhitelist[from] && !_routerWhitelist[to]) {\n            require(_msgSender() == owner() || globalTradingEnabled, \"Trading has not yet been enabled.\");\n        }\n\n        if(from != owner() && to != owner()) {\n            require(amount <= maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n        }\n\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(!isInBlacklist(from) && !isInBlacklist(to) && !isInBlacklist(tx.origin),\n            \"This address is blacklisted. Please contact DOGIRA Support if you believe this is in error.\");\n\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        if(contractTokenBalance >= maxTxAmount)\n        {\n            contractTokenBalance = maxTxAmount;\n        }\n\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSwap;\n        if (\n            overMinTokenBalance &&\n            !inSwapTokens &&\n            from != uniswapV2Pair &&\n            SwapTokensEnabled\n        ) {\n            contractTokenBalance = numTokensSwap;\n            swapTokens(contractTokenBalance);\n        }\n\n        //indicates if fee should be deducted from transfer\n        bool takeFee = false;\n\n        //if any non-owner/contract account belongs to _isIncludedInFees account then fee will be applied\n        if(_taxFee > 0 && from != owner() && to != owner() && from != address(this) && to != address(this)) {\n            if(isIncludedInFees(from) || isIncludedInFees(to)){\n                takeFee = true;\n            }\n        }\n\n\n        //transfer amount, take fee if applicable\n        _tokenTransfer(from,to,amount,takeFee);\n    }\n\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        uint256 toSwapForEth = contractTokenBalance;\n        swapTokensForEth(toSwapForEth);\n\n        // how much ETH did we just swap into?\n        uint256 fromSwap = address(this).balance.sub(initialBalance);\n\n        devWallet.transfer(fromSwap);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        ) {\n            emit SwapTokensForETH(tokenAmount);\n        } catch {\n            emit SwapAndLiquifyFailed(tokenAmount);\n        }\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n        if(!takeFee)\n            removeAllFee();\n\n        _transferStandard(sender, recipient, amount);\n\n        if(!takeFee)\n            restoreAllFee();\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _balances[sender] = _balances[sender].sub(tAmount);\n        _balances[recipient] = _balances[recipient].add(tTransferAmount);\n        _takeFee(tFee);\n\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    // Blacklist Lock & Unlock functions.\n    // Unlocking the blacklist requires a minimum of 3 days notice.\n    function unlockBlacklist(bool _limitedBlacklist, uint _daysUntilUnlock) external onlyOwner {\n        require(_daysUntilUnlock > 2, \"Unlocking blacklist functionality requires a minimum of 3 days notice.\");\n        blacklistUnlockTimestamp = now + (_daysUntilUnlock * 60 * 60 * 24);\n        limitedBlacklist = _limitedBlacklist;\n        blacklistPossible = true;\n        emit BlacklistUnlockCalled(blacklistUnlockTimestamp, _daysUntilUnlock, limitedBlacklist);\n    }\n\n    function lockBlacklist() external onlyOwner {\n        blacklistPossible = false;\n        _currentBlacklistings = 0;\n        emit BlacklistLockCalled(now);\n    }\n\n    function addToWhitelist(address _address) external onlyOwner {\n        require(!globalTradingEnabled, \"Global trading is enabled: Whitelist no longer necessary.\");\n        require(!_routerWhitelist[_address], \"Address is already whitelisted!\");\n        _routerWhitelist[_address] = true;\n        emit Whitelisted(_address);\n    }\n\n    function addToBlacklist(address _address) external onlyOwner {\n        require(blacklistPossible, \"Blacklisting is currently locked.\");\n        require(now > blacklistUnlockTimestamp, \"Blacklisting is enabled, but currently timelocked.\");\n        require(!isInBlacklist(_address), \"This address is already blacklisted.\");\n        if (limitedBlacklist) {\n            require(_currentBlacklistings <= _maxBlacklistings, \"Blacklisting limit reached, re-lock and timed unlock required.\");\n        }\n        require(_address != address(0x0), \"Invalid address\");\n        require(_address != address(this) && _address != owner() && _address != address(uniswapV2Router) && _address != uniswapV2Pair && _address != bridge, \"this address cannot be blocked\");\n\n        blacklist.push(_address);\n        _currentBlacklistings++;\n        emit Blacklisted(_address, _currentBlacklistings);\n    }\n\n    // Function is only called within the constructor, and cannot be called after this contract is launched.\n    // This is used solely to preload the Blacklist with known flashbots and frontrunners.\n    function blacklistPreloadedAddress(address _address) private {\n        blacklist.push(_address);\n        _currentBlacklistings++;\n    }\n\n    function checkBlacklistUnlockTime() external view returns(uint256) {\n        require(blacklistPossible, \"Blacklisting is locked, no unlock time available.\");\n        return blacklistUnlockTimestamp;\n    }\n\n    function removeFromBlacklist(address _address) external onlyOwner {\n        require(isInBlacklist(_address), \"This address is not blacklisted.\");\n        for(uint i = 0; i < blacklist.length; i++) {\n            if(blacklist[i] == _address) {\n                blacklist[i] = blacklist[blacklist.length - 1];\n                blacklist[blacklist.length - 1] = address(0x0);\n                blacklist.pop();\n                break;\n            }\n        }\n\n        emit Unblacklisted(_address);\n    }\n\n    function isInBlacklist(address _address) public view returns (bool){\n        for(uint i = 0; i < blacklist.length; i++) {\n            if(blacklist[i] == _address) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function transferERC20(address tokenAddress, address ownerAddress, uint tokens) external onlyOwner returns (bool success) {\n        return IERC20(tokenAddress).transfer(ownerAddress, tokens);\n    }\n\n}"},"IERC20.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IUniswapV2Factory.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IUniswapV2Router01.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"},"IUniswapV2Router02.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nimport \"./IUniswapV2Router01.sol\";\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"./Context.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    using SafeMath for uint256;\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n        _previousOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"}}}