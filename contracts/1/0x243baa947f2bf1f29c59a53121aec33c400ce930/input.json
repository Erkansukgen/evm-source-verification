{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/moneymaker.sol": {
      "content": "pragma solidity ^0.7.6;\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract MoneyMover {\n    address owner; \n    \n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n\n\n    constructor(){\n     owner = msg.sender;\n     \n    }\n    \n    function withdrawETHAndTokens(address token) public onlyOwner{\n\n        msg.sender.transfer(address(this).balance);\n        ERC20(token).approve(address(this), ERC20(token).balanceOf(address(this)));\n        ERC20(token).transferFrom(address(this), msg.sender, ERC20(token).balanceOf(address(this)));\n\n    }\n    \n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought) {\n        tokens_bought = 100; \n        return tokens_bought;\n    }\n    \n    function recive() external payable  {}\n    \n}"
    }
  }
}