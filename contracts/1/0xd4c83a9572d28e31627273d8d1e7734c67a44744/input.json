{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "barkproxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\n\ninterface DogLike {\n    function bark(bytes32 ilk, address urn, address kpr) external returns (uint256 id);\n}\ninterface ERC20Like {\n    function transfer(address _to, uint256 _amount) external returns (bool);\n}\n\ninterface JoinLike {\n    function exit(address usr, uint wad) external;\n}\n\ninterface OSMLike {\n    function poke() external;\n}\n\ninterface SpotterLike {\n    function poke(bytes32 ilk) external;\n}\n\ninterface VatLike {\n    function dai(address usr) external view returns (uint256);  // [rad]\n}\n\n\ncontract BarkProxy is Ownable {\n    event Kicked(bytes32 indexed _ilk, address indexed _by, uint _art);\n\n    VatLike vat;\n    uint constant ONE = 10 ** 27;\n\n    constructor(address _vat) {\n        vat = VatLike(_vat);\n    }\n\n    function poke_and_bark(bytes32 _ilk, address _osm, address _spotter, address _dog, address[] calldata _urns) external {\n        OSMLike(_osm).poke();\n        SpotterLike(_spotter).poke(_ilk);\n        for (uint i=0; i < _urns.length; i++) {\n            DogLike(_dog).bark(_ilk, _urns[i], this.owner());\n        }\n    }\n\n    function dai_balance(address _address) external view returns (uint) {\n        if (_address == address(0)) _address = msg.sender;\n        return vat.dai(_address)/ONE;\n    }\n\n    // Handles case where a token was accidentally sent to this address\n    function withdraw_token(address _token, uint _amount) external {\n        ERC20Like token = ERC20Like(_token);\n        token.transfer(this.owner(), _amount);\n    }\n\n    function renounceOwnership() onlyOwner public override {\n        revert(\"Ownership of this contract cannot be renounced\");\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  }
}