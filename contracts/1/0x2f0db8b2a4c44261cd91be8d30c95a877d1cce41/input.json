{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Muffin Coin.sol":{"content":"pragma solidity ^0.6.9;\r\n \r\n \r\ncontract MFFN {\r\n \r\n \r\n \r\n    //Standard Namespacing\r\n \r\n    string public name = \"Muffin Token MFFN\";\r\n \r\n    string public symbol = \"MFFN\";\r\n \r\n    string public standard = \"v1.0\";\r\n \r\n    uint8 public decimals = 18;\r\n \r\n \r\n    uint256 public joinCost = 5; //Cost to become a member\r\n \r\n    uint256 public burnedTokens; // Total number of coins burned\r\n \r\n    address public membershipAddress =0x9fea7bC2F44bDf760A271EfeFFa2aE6d3F3813be; //Address 50% of the coins go to\r\n \r\n \r\n    //Regulation\r\n \r\n    uint256 public totalSupply = 1000000;\r\n \r\n    mapping(address => uint256) public balanceOf;\r\n \r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n \r\n \r\n \r\n    //Transfer Event\r\n \r\n    event Transfer(\r\n \r\n        address indexed _from,\r\n \r\n        address indexed _to,\r\n \r\n        uint256 _value\r\n \r\n    );\r\n \r\n \r\n \r\n    //Approval Event\r\n \r\n    event Approval(\r\n \r\n        address indexed _owner,\r\n \r\n        address indexed _spender,\r\n \r\n        uint256 _value\r\n \r\n    );\r\n \r\n \r\n    //Burn Event\r\n \r\n    event Burn(\r\n \r\n        uint256 _value\r\n \r\n    );\r\n \r\n \r\n    //Update Total Supply\r\n \r\n    event SupplyUpdate(\r\n \r\n        uint256 _before,\r\n \r\n        uint256 _after\r\n \r\n    );\r\n \r\n \r\n    //Member Join Event\r\n \r\n    event MemberJoin(\r\n \r\n        address indexed _user\r\n \r\n    );\r\n \r\n \r\n    //Constructor\r\n \r\n    constructor() public {\r\n \r\n \r\n \r\n        //Allocate the intitial supply\r\n \r\n        balanceOf[msg.sender] = totalSupply;\r\n \r\n \r\n    }\r\n \r\n \r\n \r\n    //-----------Regular Functions-----------\r\n \r\n \r\n \r\n    //Balance Transfer Function\r\n \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n \r\n \r\n \r\n        //Check balance for transfer\r\n \r\n        require(balanceOf[msg.sender] >= _value);\r\n \r\n \r\n        //Transfer Balance\r\n \r\n        balanceOf[msg.sender] -= _value;\r\n \r\n        balanceOf[_to] += _value;\r\n \r\n \r\n        //Call Transfer Event\r\n \r\n        emit Transfer(msg.sender, _to, _value);\r\n \r\n \r\n        //Return Completion Boolean\r\n \r\n        return true;\r\n \r\n \r\n    }\r\n \r\n \r\n    //Execute to Join Membership\r\n \r\n    function joinMembership() public returns (bool success) {\r\n \r\n \r\n        //Check balance\r\n \r\n        require(balanceOf[msg.sender] >= joinCost);\r\n \r\n \r\n        //Remove Join Cost from balance\r\n \r\n        balanceOf[msg.sender] -= joinCost;\r\n \r\n \r\n        //Burn half of tokens [Please have joinCost an even number :)]\r\n \r\n        totalSupply -= div(joinCost, 2, \"Divising Error\");\r\n \r\n        burnedTokens += div(joinCost, 2, \"Divising Error\");\r\n \r\n        emit Burn(div(joinCost, 2, \"Divising Error\"));\r\n \r\n        emit SupplyUpdate(totalSupply + (div(joinCost, 2, \"Divising Error\")), totalSupply);\r\n \r\n \r\n        //Send half of the tokens to Membership Address\r\n \r\n        balanceOf[membershipAddress] += (joinCost - div(joinCost, 2, \"Divising Error\"));\r\n \r\n \r\n        //Return Completion Boolean\r\n \r\n        return true;\r\n \r\n \r\n    }\r\n \r\n \r\n \r\n    //Aprrove 3rd Party Transfering\r\n \r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n \r\n \r\n \r\n        //Approve Allowence\r\n \r\n        allowance[msg.sender][_spender] = _value;\r\n \r\n \r\n        //Call Aprroval Event\r\n \r\n        emit Approval(msg.sender, _spender, _value);\r\n \r\n \r\n        //Return Completion Boolean\r\n \r\n        return true;\r\n \r\n \r\n    }\r\n \r\n \r\n    //3rd Party Transfering\r\n \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n \r\n \r\n        //Check Balance for transfer\r\n \r\n        require(_value <= balanceOf[_from]);\r\n \r\n \r\n        //Checks the Allownace\r\n \r\n        require(_value <= allowance[_from][msg.sender]);\r\n \r\n \r\n        //Transfer Balance\r\n \r\n        balanceOf[_from] -= _value;\r\n \r\n        balanceOf[_to] += _value;\r\n \r\n \r\n        //Update Allowance\r\n \r\n        allowance[_from][msg.sender] =- _value;\r\n \r\n \r\n \r\n        //Call Transfer Event\r\n \r\n        emit Transfer(_from, _to, _value);\r\n \r\n \r\n        //Return Completion Boolean\r\n \r\n        return true;\r\n \r\n \r\n    }\r\n \r\n \r\n \r\n    //Multiply Function (Safe Math)\r\n \r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z){\r\n \r\n        require(y == 0 || (z = x * y) / y == x);\r\n \r\n    }\r\n \r\n \r\n    //Division Function (Safe Math)\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n \r\n        require(b > 0, errorMessage);\r\n \r\n        uint256 c = a / b;\r\n \r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n \r\n}\r\n "}}}