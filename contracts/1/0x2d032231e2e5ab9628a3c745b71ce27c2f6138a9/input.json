{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled100.sol": {
      "content": "pragma solidity ^0.7.1;\n\ncontract UNO {\n    string public name     = \"UNO\";\n    string public symbol   = \"UNO\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    uint256 private constant ONE_UNO = 10 ** 18;\n\n    constructor() {\n        emit Transfer(address(0), msg.sender, ONE_UNO);\n        balanceOf[msg.sender] = ONE_UNO;\n    }\n\n    function totalSupply() external pure returns (uint) {\n        return ONE_UNO;\n    }\n\n    function approve(address guy, uint wad) external returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) external returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        uint256 bal = balanceOf[src];\n        require(bal >= wad);\n        balanceOf[src] = bal - wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n"
    }
  }
}