{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "chfry-mainnet/CheeseStakePool.sol": {
      "content": "// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/cryptography/MerkleProof.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n\n\n// Dependency file: contracts/libraries/Upgradable.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\ncontract UpgradableProduct {\n    address public impl;\n\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\n\n    constructor() public {\n        impl = msg.sender;\n    }\n\n    modifier requireImpl() {\n        require(msg.sender == impl, \"FORBIDDEN\");\n        _;\n    }\n\n    function upgradeImpl(address _newImpl) public requireImpl {\n        require(_newImpl != address(0), \"INVALID_ADDRESS\");\n        require(_newImpl != impl, \"NO_CHANGE\");\n        address lastImpl = impl;\n        impl = _newImpl;\n        emit ImplChanged(lastImpl, _newImpl);\n    }\n}\n\ncontract UpgradableGovernance {\n    address public governor;\n\n    event GovernorChanged(\n        address indexed _oldGovernor,\n        address indexed _newGovernor\n    );\n\n    constructor() public {\n        governor = msg.sender;\n    }\n\n    modifier requireGovernor() {\n        require(msg.sender == governor, \"FORBIDDEN\");\n        _;\n    }\n\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\n        require(_newGovernor != address(0), \"INVALID_ADDRESS\");\n        require(_newGovernor != governor, \"NO_CHANGE\");\n        address lastGovernor = governor;\n        governor = _newGovernor;\n        emit GovernorChanged(lastGovernor, _newGovernor);\n    }\n}\n\n\n// Dependency file: contracts/libraries/TransferHelper.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// Dependency file: contracts/libraries/WhiteList.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\npragma experimental ABIEncoderV2;\n\n// import \"contracts/libraries/Upgradable.sol\";\n\ncontract WhiteList is UpgradableProduct {\n    event SetWhitelist(address indexed user, bool state);\n\n    mapping(address => bool) public whiteList;\n\n    /// This function reverts if the caller is not governance\n    ///\n    /// @param _toWhitelist the account to mint tokens to.\n    /// @param _state the whitelist state.\n    function setWhitelist(address _toWhitelist, bool _state)\n        external\n        requireImpl\n    {\n        whiteList[_toWhitelist] = _state;\n        emit SetWhitelist(_toWhitelist, _state);\n    }\n\n    /// @dev A modifier which checks if whitelisted for minting.\n    modifier onlyWhitelisted() {\n        require(whiteList[msg.sender], \"!whitelisted\");\n        _;\n    }\n}\n\n\n// Dependency file: contracts/libraries/ConfigNames.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\nlibrary ConfigNames {\n    bytes32 public constant FRYER_LTV = bytes32(\"FRYER_LTV\");\n    bytes32 public constant FRYER_HARVEST_FEE = bytes32(\"FRYER_HARVEST_FEE\");\n    bytes32 public constant FRYER_VAULT_PERCENTAGE =\n        bytes32(\"FRYER_VAULT_PERCENTAGE\");\n\n    bytes32 public constant FRYER_FLASH_FEE_PROPORTION =\n        bytes32(\"FRYER_FLASH_FEE_PROPORTION\");\n\n    bytes32 public constant PRIVATE = bytes32(\"PRIVATE\");\n    bytes32 public constant STAKE = bytes32(\"STAKE\");\n}\n\n\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n// import \"@openzeppelin/contracts/utils/Context.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n// Dependency file: contracts/CheeseToken.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol';\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol';\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\n// import 'contracts/libraries/Upgradable.sol';\n\ncontract CheeseToken is ERC20, UpgradableProduct {\n\tusing SafeMath for uint256;\n\n\tmapping(address => bool) public whiteList;\n\n\tconstructor(string memory _symbol, string memory _name) public ERC20(_name, _symbol) {\n\t\t_mint(msg.sender, uint256(2328300).mul(1e18));\n\t}\n\n\tmodifier onlyWhitelisted() {\n\t\trequire(whiteList[msg.sender], '!whitelisted');\n\t\t_;\n\t}\n\n\tfunction setWhitelist(address _toWhitelist, bool _state) external requireImpl {\n\t\twhiteList[_toWhitelist] = _state;\n\t}\n\n\tfunction mint(address account, uint256 amount) external virtual onlyWhitelisted {\n\t\trequire(totalSupply().add(amount) <= cap(), 'ERC20Capped: cap exceeded');\n\t\t_mint(account, amount);\n\t}\n\n\tfunction cap() public pure virtual returns (uint256) {\n\t\treturn 9313200 * 1e18;\n\t}\n\n\tfunction burnFrom(address account, uint256 amount) public virtual {\n\t\tuint256 decreasedAllowance = allowance(account, _msgSender()).sub(\n\t\t\tamount,\n\t\t\t'ERC20: burn amount exceeds allowance'\n\t\t);\n\t\t_approve(account, _msgSender(), decreasedAllowance);\n\t\t_burn(account, amount);\n\t}\n\n\tfunction burn(uint256 amount) external virtual {\n\t\t_burn(_msgSender(), amount);\n\t}\n}\n\n\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// Dependency file: contracts/CheeseFactory.sol\n\n// pragma solidity >=0.6.5 <0.8.0;\n\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\n// import 'contracts/libraries/Upgradable.sol';\n// import 'contracts/CheeseToken.sol';\n// import 'contracts/libraries/ConfigNames.sol';\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n\n//a1 = 75000, n = week, d= -390, week = [0,156]\n//an=a1+(n-1)*d\n//Sn=n*a1+(n(n-1)*d)/2\ncontract CheeseFactory is UpgradableProduct, ReentrancyGuard {\n\tusing SafeMath for uint256;\n\n\tuint256 public constant MAX_WEEK = 156;\n\tuint256 public constant d = 390 * 10**18;\n\tuint256 public constant a1 = 75000 * 10**18;\n\tuint256 public constant TOTAL_WEIGHT = 10000;\n\n\tuint256 public startTimestamp;\n\tuint256 public lastTimestamp;\n\tuint256 public weekTimestamp;\n\tuint256 public totalMintAmount;\n\tCheeseToken public token;\n\tbool public initialized;\n\n\tstruct Pool {\n\t\taddress pool;\n\t\tuint256 weight;\n\t\tuint256 minted;\n\t}\n\n\tmapping(bytes32 => Pool) public poolInfo;\n\n\tconstructor(address token_, uint256 weekTimestamp_) public {\n\t\tweekTimestamp = weekTimestamp_;\n\t\ttoken = CheeseToken(token_);\n\t}\n\n\tfunction setCheeseToken(address token_) external requireImpl {\n\t\ttoken = CheeseToken(token_);\n\t}\n\n\tfunction setPool(bytes32 poolName_, address poolAddress_) external requireImpl {\n\t\trequire(poolName_ == ConfigNames.PRIVATE || poolName_ == ConfigNames.STAKE, 'name error');\n\t\tPool storage pool = poolInfo[poolName_];\n\t\tpool.pool = poolAddress_;\n\t}\n\n\tmodifier expectInitialized() {\n\t\trequire(initialized, 'not initialized.');\n\t\t_;\n\t}\n\n\tfunction initialize(\n\t\taddress private_,\n\t\taddress stake_,\n\t\tuint256 startTimestamp_\n\t) external requireImpl {\n\t\trequire(!initialized, 'already initialized');\n\t\trequire(startTimestamp_ >= block.timestamp, '!startTime');\n\t\t// weight\n\t\tpoolInfo[ConfigNames.PRIVATE] = Pool(private_, 1000, 0);\n\t\tpoolInfo[ConfigNames.STAKE] = Pool(stake_, 9000, 0);\n\t\tinitialized = true;\n\t\tstartTimestamp = startTimestamp_;\n\t\tlastTimestamp = startTimestamp_;\n\t}\n\n\tfunction preMint() public view returns (uint256) {\n\t\tif (block.timestamp <= startTimestamp) {\n\t\t\treturn uint256(0);\n\t\t}\n\n\t\tif (block.timestamp <= lastTimestamp) {\n\t\t\treturn uint256(0);\n\t\t}\n\t\tuint256 time = block.timestamp.sub(startTimestamp);\n\t\tuint256 max_week_time = MAX_WEEK.mul(weekTimestamp);\n\t\t// time lt 156week\n\t\tif (time > max_week_time) {\n\t\t\ttime = max_week_time;\n\t\t}\n\n\t\t// gt 1week\n\t\tif (time >= weekTimestamp) {\n\t\t\tuint256 n = time.div(weekTimestamp);\n\n\t\t\t//an =a1-(n)*d d<0\n\t\t\t//=> a1+(n)*(-d)\n\t\t\tuint256 an = a1.sub(n.mul(d));\n\n\t\t\t// gt 1week time stamp\n\t\t\tuint256 otherTimestamp = time.mod(weekTimestamp);\n\t\t\tuint256 other = an.mul(otherTimestamp).div(weekTimestamp);\n\n\t\t\t//Sn=n*a1+(n(n-1)*d)/2 d<0\n\t\t\t// => n*a1-(n(n-1)*(-d))/2\n\n\t\t\t// fist = n*a1\n\t\t\tuint256 first = n.mul(a1);\n\t\t\t// last = (n(n-1)*(-d))/2\n\t\t\tuint256 last = n.mul(n.sub(1)).mul(d).div(2);\n\t\t\tuint256 sn = first.sub(last);\n\t\t\treturn other.add(sn).sub(totalMintAmount);\n\t\t} else {\n\t\t\treturn a1.mul(time).div(weekTimestamp).sub(totalMintAmount);\n\t\t}\n\t}\n\n\tfunction _updateTotalAmount() internal returns (uint256) {\n\t\tuint256 preMintAmount = preMint();\n\t\ttotalMintAmount = totalMintAmount.add(preMintAmount);\n\t\tlastTimestamp = block.timestamp;\n\t\treturn preMintAmount;\n\t}\n\n\tfunction prePoolMint(bytes32 poolName_) public view returns (uint256) {\n\t\tuint256 preMintAmount = preMint();\n\t\tPool memory pool = poolInfo[poolName_];\n\t\tuint256 poolTotal = totalMintAmount.add(preMintAmount).mul(pool.weight).div(TOTAL_WEIGHT);\n\t\treturn poolTotal.sub(pool.minted);\n\t}\n\n\tfunction poolMint(bytes32 poolName_) external nonReentrant expectInitialized returns (uint256) {\n\t\tPool storage pool = poolInfo[poolName_];\n\t\trequire(msg.sender == pool.pool, 'Permission denied');\n\t\t_updateTotalAmount();\n\t\tuint256 poolTotal = totalMintAmount.mul(pool.weight).div(TOTAL_WEIGHT); // Todo: total weight should cal from each pools?\n\t\tuint256 amount = poolTotal.sub(pool.minted);\n\t\tif (amount > 0) {\n\t\t\ttoken.mint(msg.sender, amount);\n\t\t\tpool.minted = pool.minted.add(amount);\n\t\t}\n\t\treturn amount;\n\t}\n}\n\n\n// Root file: contracts/CheeseStakePool.sol\n\npragma solidity >=0.6.5 <0.8.0;\n// pragma experimental ABIEncoderV2;\n\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol';\n// import 'contracts/libraries/Upgradable.sol';\n// import 'contracts/libraries/TransferHelper.sol';\n// import 'contracts/libraries/WhiteList.sol';\n// import 'contracts/libraries/ConfigNames.sol';\n// import 'contracts/CheeseToken.sol';\n// import 'contracts/CheeseFactory.sol';\n// import '/Users/sg99022ml/Downloads/chfry-protocol-internal-feat/node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n\ncontract CheeseStakePool is UpgradableProduct, ReentrancyGuard {\n\tevent AddPoolToken(address indexed pool, uint256 indexed weight);\n\tevent UpdatePoolToken(address indexed pool, uint256 indexed weight);\n\n\tevent Stake(address indexed pool, address indexed user, uint256 indexed amount);\n\tevent Withdraw(address indexed pool, address indexed user, uint256 indexed amount);\n\tevent Claimed(address indexed pool, address indexed user, uint256 indexed amount);\n\tevent SetCheeseFactory(address indexed factory);\n\tevent SetCheeseToken(address indexed token);\n\tevent SettleFlashLoan(bytes32 indexed merkleRoot, uint256 indexed index, uint256 amount, uint256 settleBlockNumber);\n\tusing TransferHelper for address;\n\tusing SafeMath for uint256;\n\n\tstruct UserInfo {\n\t\tuint256 amount;\n\t\tuint256 debt;\n\t\tuint256 reward;\n\t\tuint256 totalIncome;\n\t}\n\n\tstruct PoolInfo {\n\t\tuint256 pid;\n\t\taddress token;\n\t\tuint256 weight;\n\t\tuint256 rewardPerShare;\n\t\tuint256 reward;\n\t\tuint256 lastBlockTimeStamp;\n\t\tuint256 debt;\n\t\tuint256 totalAmount;\n\t}\n\n\tstruct MerkleDistributor {\n\t\tbytes32 merkleRoot;\n\t\tuint256 index;\n\t\tuint256 amount;\n\t\tuint256 settleBlocNumber;\n\t}\n\n\tCheeseToken public token;\n\tCheeseFactory public cheeseFactory;\n\tPoolInfo[] public poolInfos;\n\tPoolInfo public flashloanPool;\n\n\tuint256 public lastBlockTimeStamp;\n\tuint256 public rewardPerShare;\n\tuint256 public totalWeight;\n\n\tMerkleDistributor[] public merkleDistributors;\n\n\tmapping(address => uint256) public tokenOfPid;\n\tmapping(address => bool) public tokenUsed;\n\n\tmapping(uint256 => mapping(address => UserInfo)) public userInfos;\n\tmapping(uint256 => mapping(address => bool)) claimedFlashLoanState;\n\n\tconstructor(address cheeseFactory_, address token_) public {\n\t\tcheeseFactory = CheeseFactory(cheeseFactory_);\n\t\ttoken = CheeseToken(token_);\n\t\t_initFlashLoanPool(0);\n\t}\n\n\tfunction _initFlashLoanPool(uint256 flashloanPoolWeight) internal {\n\t\tflashloanPool = PoolInfo(0, address(this), flashloanPoolWeight, 0, 0, block.timestamp, 0, 0);\n\t\ttotalWeight = totalWeight.add(flashloanPool.weight);\n\t\temit AddPoolToken(address(this), flashloanPool.weight);\n\t}\n\n\tfunction setCheeseFactory(address cheeseFactory_) external requireImpl {\n\t\tcheeseFactory = CheeseFactory(cheeseFactory_);\n\t\temit SetCheeseFactory(cheeseFactory_);\n\t}\n\n\tfunction setCheeseToken(address token_) external requireImpl {\n\t\ttoken = CheeseToken(token_);\n\t\temit SetCheeseToken(token_);\n\t}\n\n\tmodifier verifyPid(uint256 pid) {\n\t\trequire(poolInfos.length > pid && poolInfos[pid].token != address(0), 'pool does not exist');\n\t\t_;\n\t}\n\n\tmodifier updateAllPoolRewardPerShare() {\n\t\tif (totalWeight > 0 && block.timestamp > lastBlockTimeStamp) {\n\t\t\t(uint256 _reward, uint256 _perShare) = currentAllPoolRewardShare();\n\t\t\trewardPerShare = _perShare;\n\t\t\tlastBlockTimeStamp = block.timestamp;\n\t\t\trequire(_reward == cheeseFactory.poolMint(ConfigNames.STAKE), 'pool mint error');\n\t\t}\n\t\t_;\n\t}\n\n\tmodifier updateSinglePoolReward(PoolInfo storage poolInfo) {\n\t\tif (poolInfo.weight > 0) {\n\t\t\tuint256 debt = poolInfo.weight.mul(rewardPerShare).div(1e18);\n\t\t\tuint256 poolReward = debt.sub(poolInfo.debt);\n\t\t\tpoolInfo.reward = poolInfo.reward.add(poolReward);\n\t\t\tpoolInfo.debt = debt;\n\t\t}\n\t\t_;\n\t}\n\n\tmodifier updateSinglePoolRewardPerShare(PoolInfo storage poolInfo) {\n\t\tif (poolInfo.totalAmount > 0 && block.timestamp > poolInfo.lastBlockTimeStamp) {\n\t\t\t(uint256 _reward, uint256 _perShare) = currentSinglePoolRewardShare(poolInfo.pid);\n\t\t\tpoolInfo.rewardPerShare = _perShare;\n\t\t\tpoolInfo.reward = poolInfo.reward.sub(_reward);\n\t\t\tpoolInfo.lastBlockTimeStamp = block.timestamp;\n\t\t}\n\t\t_;\n\t}\n\n\tmodifier updateUserReward(PoolInfo storage poolInfo, address user) {\n\t\tUserInfo storage userInfo = userInfos[poolInfo.pid][user];\n\t\tif (userInfo.amount > 0) {\n\t\t\tuint256 debt = userInfo.amount.mul(poolInfo.rewardPerShare).div(1e18);\n\t\t\tuint256 userReward = debt.sub(userInfo.debt);\n\t\t\tuserInfo.reward = userInfo.reward.add(userReward);\n\t\t\tuserInfo.debt = debt;\n\t\t}\n\t\t_;\n\t}\n\n\tfunction getPoolInfo(uint256 pid)\n\t\texternal\n\t\tview\n\t\tvirtual\n\t\tverifyPid(pid)\n\t\treturns (\n\t\t\tuint256 _pid,\n\t\t\taddress _token,\n\t\t\tuint256 _weight,\n\t\t\tuint256 _rewardPerShare,\n\t\t\tuint256 _reward,\n\t\t\tuint256 _lastBlockTimeStamp,\n\t\t\tuint256 _debt,\n\t\t\tuint256 _totalAmount\n\t\t)\n\t{\n\t\tPoolInfo memory pool = poolInfos[pid];\n\t\treturn (\n\t\t\tpool.pid,\n\t\t\tpool.token,\n\t\t\tpool.weight,\n\t\t\tpool.rewardPerShare,\n\t\t\tpool.reward,\n\t\t\tpool.lastBlockTimeStamp,\n\t\t\tpool.debt,\n\t\t\tpool.totalAmount\n\t\t);\n\t}\n\n\tfunction getPoolInfos()\n\t\texternal\n\t\tview\n\t\tvirtual\n\t\treturns (\n\t\t\tuint256 length,\n\t\t\tuint256[] memory _pid,\n\t\t\taddress[] memory _token,\n\t\t\tuint256[] memory _weight,\n\t\t\tuint256[] memory _lastBlockTimeStamp,\n\t\t\tuint256[] memory _totalAmount\n\t\t)\n\t{\n\t\tlength = poolInfos.length;\n\t\t_pid = new uint256[](length);\n\t\t_token = new address[](length);\n\t\t_weight = new uint256[](length);\n\t\t_lastBlockTimeStamp = new uint256[](length);\n\t\t_totalAmount = new uint256[](length);\n\n\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\tPoolInfo memory pool = poolInfos[i];\n\t\t\t_pid[i] = pool.pid;\n\t\t\t_token[i] = pool.token;\n\t\t\t_weight[i] = pool.weight;\n\t\t\t_lastBlockTimeStamp[i] = pool.lastBlockTimeStamp;\n\t\t\t_totalAmount[i] = pool.totalAmount;\n\t\t}\n\n\t\treturn (length, _pid, _token, _weight, _lastBlockTimeStamp, _totalAmount);\n\t}\n\n\tfunction getUserInfo(uint256 pid, address userAddress)\n\t\texternal\n\t\tview\n\t\tvirtual\n\t\treturns (\n\t\t\tuint256 _amount,\n\t\t\tuint256 _debt,\n\t\t\tuint256 _reward,\n\t\t\tuint256 _totalIncome\n\t\t)\n\t{\n\t\tUserInfo memory userInfo = userInfos[pid][userAddress];\n\t\treturn (userInfo.amount, userInfo.debt, userInfo.reward, userInfo.totalIncome);\n\t}\n\n\tfunction currentAllPoolRewardShare() public view virtual returns (uint256 _reward, uint256 _perShare) {\n\t\t_reward = cheeseFactory.prePoolMint(ConfigNames.STAKE);\n\t\t_perShare = rewardPerShare;\n\n\t\tif (totalWeight > 0) {\n\t\t\t_perShare = _perShare.add(_reward.mul(1e18).div(totalWeight));\n\t\t}\n\t\treturn (_reward, _perShare);\n\t}\n\n\tfunction currentSinglePoolRewardShare(uint256 pid)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\tverifyPid(pid)\n\t\treturns (uint256 _reward, uint256 _perShare)\n\t{\n\t\tPoolInfo memory poolInfo = poolInfos[pid];\n\n\t\t_reward = poolInfo.reward;\n\t\t_perShare = poolInfo.rewardPerShare;\n\n\t\tif (poolInfo.totalAmount > 0) {\n\t\t\tuint256 pendingShare = _reward.mul(1e18).div(poolInfo.totalAmount);\n\t\t\t_perShare = _perShare.add(pendingShare);\n\t\t}\n\t\treturn (_reward, _perShare);\n\t}\n\n\tfunction stake(uint256 pid, uint256 amount)\n\t\texternal\n\t\tvirtual\n\t\tnonReentrant\n\t\tverifyPid(pid)\n\t\tupdateAllPoolRewardPerShare()\n\t\tupdateSinglePoolReward(poolInfos[pid])\n\t\tupdateSinglePoolRewardPerShare(poolInfos[pid])\n\t\tupdateUserReward(poolInfos[pid], msg.sender)\n\t{\n\t\tPoolInfo storage poolInfo = poolInfos[pid];\n\n\t\tif (amount > 0) {\n\t\t\tUserInfo storage userInfo = userInfos[pid][msg.sender];\n\t\t\tuserInfo.amount = userInfo.amount.add(amount);\n\t\t\tuserInfo.debt = userInfo.amount.mul(poolInfo.rewardPerShare).div(1e18);\n\t\t\tpoolInfo.totalAmount = poolInfo.totalAmount.add(amount);\n\t\t\taddress(poolInfo.token).safeTransferFrom(msg.sender, address(this), amount);\n\t\t\temit Stake(poolInfo.token, msg.sender, amount);\n\t\t}\n\t}\n\n\tfunction withdraw(uint256 pid, uint256 amount)\n\t\texternal\n\t\tvirtual\n\t\tnonReentrant\n\t\tverifyPid(pid)\n\t\tupdateAllPoolRewardPerShare()\n\t\tupdateSinglePoolReward(poolInfos[pid])\n\t\tupdateSinglePoolRewardPerShare(poolInfos[pid])\n\t\tupdateUserReward(poolInfos[pid], msg.sender)\n\t{\n\t\tPoolInfo storage poolInfo = poolInfos[pid];\n\n\t\tif (amount > 0) {\n\t\t\tUserInfo storage userInfo = userInfos[pid][msg.sender];\n\t\t\trequire(userInfo.amount >= amount, 'Insufficient balance');\n\t\t\tuserInfo.amount = userInfo.amount.sub(amount);\n\t\t\tuserInfo.debt = userInfo.amount.mul(poolInfo.rewardPerShare).div(1e18);\n\t\t\tpoolInfo.totalAmount = poolInfo.totalAmount.sub(amount);\n\t\t\taddress(poolInfo.token).safeTransfer(msg.sender, amount);\n\t\t\temit Withdraw(poolInfo.token, msg.sender, amount);\n\t\t}\n\t}\n\n\tfunction claim(uint256 pid)\n\t\texternal\n\t\tvirtual\n\t\tnonReentrant\n\t\tverifyPid(pid)\n\t\tupdateAllPoolRewardPerShare()\n\t\tupdateSinglePoolReward(poolInfos[pid])\n\t\tupdateSinglePoolRewardPerShare(poolInfos[pid])\n\t\tupdateUserReward(poolInfos[pid], msg.sender)\n\t{\n\t\tPoolInfo storage poolInfo = poolInfos[pid];\n\t\tUserInfo storage userInfo = userInfos[pid][msg.sender];\n\t\tif (userInfo.reward > 0) {\n\t\t\tuint256 amount = userInfo.reward;\n\t\t\tuserInfo.reward = 0;\n\t\t\tuserInfo.totalIncome = userInfo.totalIncome.add(amount);\n\t\t\taddress(token).safeTransfer(msg.sender, amount);\n\t\t\temit Claimed(poolInfo.token, msg.sender, amount);\n\t\t}\n\t}\n\n\tfunction calculateIncome(uint256 pid, address userAddress) external view virtual verifyPid(pid) returns (uint256) {\n\t\tPoolInfo storage poolInfo = poolInfos[pid];\n\t\tUserInfo storage userInfo = userInfos[pid][userAddress];\n\n\t\t(uint256 _reward, uint256 _perShare) = currentAllPoolRewardShare();\n\n\t\tuint256 poolPendingReward = poolInfo.weight.mul(_perShare).div(1e18).sub(poolInfo.debt);\n\t\t_reward = poolInfo.reward.add(poolPendingReward);\n\t\t_perShare = poolInfo.rewardPerShare;\n\n\t\tif (block.timestamp > poolInfo.lastBlockTimeStamp && poolInfo.totalAmount > 0) {\n\t\t\tuint256 poolPendingShare = _reward.mul(1e18).div(poolInfo.totalAmount);\n\t\t\t_perShare = _perShare.add(poolPendingShare);\n\t\t}\n\t\tuint256 userReward = userInfo.amount.mul(_perShare).div(1e18).sub(userInfo.debt);\n\t\treturn userInfo.reward.add(userReward);\n\t}\n\n\tfunction isClaimedFlashLoan(uint256 index, address user) public view returns (bool) {\n\t\treturn claimedFlashLoanState[index][user];\n\t}\n\n\tfunction settleFlashLoan(\n\t\tuint256 index,\n\t\tuint256 amount,\n\t\tuint256 settleBlockNumber,\n\t\tbytes32 merkleRoot\n\t) external requireImpl updateAllPoolRewardPerShare() updateSinglePoolReward(flashloanPool) {\n\t\trequire(index == merkleDistributors.length, 'index already exists');\n\t\trequire(flashloanPool.reward >= amount, 'Insufficient reward funds');\n\t\trequire(block.number >= settleBlockNumber, '!blockNumber');\n\n\t\tif (merkleDistributors.length > 0) {\n\t\t\tMerkleDistributor memory md = merkleDistributors[merkleDistributors.length - 1];\n\t\t\trequire(md.settleBlocNumber < settleBlockNumber, '!settleBlocNumber');\n\t\t}\n\n\t\tflashloanPool.reward = flashloanPool.reward.sub(amount);\n\t\tmerkleDistributors.push(MerkleDistributor(merkleRoot, index, amount, settleBlockNumber));\n\t\temit SettleFlashLoan(merkleRoot, index, amount, settleBlockNumber);\n\t}\n\n\tfunction claimFlashLoan(\n\t\tuint256 index,\n\t\tuint256 amount,\n\t\tbytes32[] calldata proof\n\t) external {\n\t\taddress user = msg.sender;\n\t\trequire(merkleDistributors.length > index, 'Invalid index');\n\t\trequire(!isClaimedFlashLoan(index, user), 'Drop already claimed.');\n\t\tMerkleDistributor storage merkleDistributor = merkleDistributors[index];\n\t\trequire(merkleDistributor.amount >= amount, 'Not sufficient');\n\t\tbytes32 leaf = keccak256(abi.encodePacked(index, user, amount));\n\t\trequire(MerkleProof.verify(proof, merkleDistributor.merkleRoot, leaf), 'Invalid proof.');\n\t\tmerkleDistributor.amount = merkleDistributor.amount.sub(amount);\n\t\tclaimedFlashLoanState[index][user] = true;\n\t\taddress(token).safeTransfer(msg.sender, amount);\n\t\temit Claimed(address(this), user, amount);\n\t}\n\n\tfunction addPool(address tokenAddr, uint256 weight) external virtual requireImpl updateAllPoolRewardPerShare() {\n\t\trequire(weight >= 0 && tokenAddr != address(0) && tokenUsed[tokenAddr] == false, 'Check the parameters');\n\t\tuint256 pid = poolInfos.length;\n\t\tuint256 debt = weight.mul(rewardPerShare).div(1e18);\n\t\tpoolInfos.push(PoolInfo(pid, tokenAddr, weight, 0, 0, block.timestamp, debt, 0));\n\t\ttokenOfPid[tokenAddr] = pid;\n\t\ttokenUsed[tokenAddr] = true;\n\t\ttotalWeight = totalWeight.add(weight);\n\t\temit AddPoolToken(tokenAddr, weight);\n\t}\n\n\tfunction _updatePool(PoolInfo storage poolInfo, uint256 weight) internal {\n\t\ttotalWeight = totalWeight.sub(poolInfo.weight);\n\t\tpoolInfo.weight = weight;\n\t\tpoolInfo.debt = poolInfo.weight.mul(rewardPerShare).div(1e18);\n\t\ttotalWeight = totalWeight.add(weight);\n\t}\n\n\tfunction updatePool(address tokenAddr, uint256 weight)\n\t\texternal\n\t\tvirtual\n\t\trequireImpl\n\t\tverifyPid(tokenOfPid[tokenAddr])\n\t\tupdateAllPoolRewardPerShare()\n\t\tupdateSinglePoolReward(poolInfos[tokenOfPid[tokenAddr]])\n\t\tupdateSinglePoolRewardPerShare(poolInfos[tokenOfPid[tokenAddr]])\n\t{\n\t\trequire(weight >= 0 && tokenAddr != address(0), 'Parameter error');\n\t\tPoolInfo storage poolInfo = poolInfos[tokenOfPid[tokenAddr]];\n\t\trequire(poolInfo.token == tokenAddr, 'pool does not exist');\n\t\t_updatePool(poolInfo, weight);\n\t\temit UpdatePoolToken(address(poolInfo.token), weight);\n\t}\n\n\tfunction updateFlashloanPool(uint256 weight)\n\t\texternal\n\t\tvirtual\n\t\trequireImpl\n\t\tupdateAllPoolRewardPerShare()\n\t\tupdateSinglePoolReward(flashloanPool)\n\t{\n\t\trequire(weight >= 0, 'Parameter error');\n\t\t_updatePool(flashloanPool, weight);\n\t\temit UpdatePoolToken(address(flashloanPool.token), weight);\n\t}\n}\n"
    }
  }
}