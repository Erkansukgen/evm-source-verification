{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MustMint.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma abicoder v2;\n\ncontract AProxy {\n\n  fallback () payable external {\n    _fallback();\n  }\n\n  receive () payable external {\n    _fallback();\n  }\n  \n  address public admin;\n  address _impl;\n  \n  constructor(address newImpl){\n      admin = msg.sender;\n      _impl = newImpl;\n  }\n  \n  function _upgrade(address newImpl) public {\n      require(admin==msg.sender,\"not admin\");\n      _impl = newImpl;\n  }\n\n  function _implementation() public view returns (address) {\n      return _impl;\n  }\n\n  function _delegate(address implementation) internal {\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      case 0 { revert(0, returndatasize()) }\n      default { return(0, returndatasize()) }\n    }\n  }\n  \n  function _fallback() internal {\n    _delegate(_implementation());\n  }\n}\n\ninterface IERC720 {\n    function mint(address _to, uint256 _count) external payable;\n    function totalSupply() external view returns (uint256);\n}\n\ncontract Attacker {\n    \n    constructor()  {\n  \n    }\n    \n    // function mustMint(uint256 id,address nft) public payable{\n    //     require(IERC720(nft).totalSupply()+1 == id,\"missed\");\n    //     IERC720(nft).mint{value:msg.value}(msg.sender,1);\n    // }\n    \n    function mustMintNum(uint256 targetId,uint256 mintTimes,address nft,uint256 amount,uint256 mintNum) public payable{\n        uint256 totalSupply = IERC720(nft).totalSupply();\n        require(totalSupply + 1 <= targetId,\"missed\");\n        \n        // totalSupply 5\n        // nextId 6\n        // targetId 16\n        // 6 7 8 9 10, 10\n        // 11 12 13 14 15, 15\n        // \n        while (totalSupply + 1 <= targetId) {\n            if(totalSupply+5 <= targetId){\n                IERC720(nft).mint{value:amount*5}(msg.sender,5);\n                totalSupply+=5;\n            }else{\n                uint256 num = targetId-totalSupply;\n                IERC720(nft).mint{value:amount*num}(msg.sender,num);\n                totalSupply=targetId;\n            }\n            \n        }\n        \n        msg.sender.transfer(address(this).balance);\n    }\n    \n   \n}"}}}