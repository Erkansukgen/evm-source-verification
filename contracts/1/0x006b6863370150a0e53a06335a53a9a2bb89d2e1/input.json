{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"TokenLockFactoryHelper.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.6;\n\n\ninterface ITokenLockFactory {\n  \n    enum Revocability { NotSet, Enabled, Disabled }\n    function createTokenLock(\n        address _token,\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable,\n        bool _canDelegate\n    ) external returns(address contractAddress);\n}\n\ncontract TokenLockFactoryHelper {\n    \n    ITokenLockFactory public  tokenLockFactory;\n    \n    constructor(ITokenLockFactory _tokenLockFactory) {\n        tokenLockFactory = _tokenLockFactory;\n    }\n\n\n    function createTokenLocks(\n        address _token,\n        address _owner,\n        address[] memory _beneficiaries,\n        uint256[] memory _managedAmounts,\n        uint256[] memory _startTimes,\n        uint256[] memory _endTimes,\n        uint256[] memory _periods,\n        ITokenLockFactory.Revocability[] memory _revocables,\n        bool[] memory _canDelegates\n    ) external {\n        // Create contract using a minimal proxy and call initializer\n        uint256 i;\n        for (i= 0;i< _beneficiaries.length;i++) {\n            tokenLockFactory.createTokenLock(_token,\n                                              _owner,\n                                              _beneficiaries[i],\n                                              _managedAmounts[i],\n                                              _startTimes[i],\n                                              _endTimes[i],\n                                              _periods[i],\n                                              0,\n                                              0,\n                                              _revocables[i],\n                                              _canDelegates[i]);\n        }\n        \n    }\n}\n"}}}