{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/mint.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\n\n\ninterface IJungleFreaks {\n    function mint(uint256 amount) external payable;\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )  external;\n}\n\n\n//NFT基本上都是ETH支付\ncontract NFT  {\n\n    address public nft_contract;\n    address private admin_addr;\n    mapping(address => bool) public allowList; //这些地址belong to admin_addr;\n\n    constructor(address addr) {\n        nft_contract = addr;\n        admin_addr = msg.sender;\n    }\n\n    receive() external payable {}\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual  returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n    \n    function SetAllows(address[] memory _allowList) public {\n        require(msg.sender == admin_addr,\"invalid msg.sender\");\n        for (uint256 i=0; i < _allowList.length; i++) {\n            allowList[_allowList[i]] = true;\n        }\n    }\n\n\n    function mintWithCoinbase(uint256  single_mint_amount,uint256  single_pay_amount,uint256  total_coinbase_amount,uint256 mint_num) external payable {\n        require(allowList[address(msg.sender)],\"invalid msg.sender\");\n        for (uint256 i=0;i<mint_num;i++) {\n            (bool success,bytes memory data) = nft_contract.call{value: single_pay_amount}(abi.encodeWithSignature(\"mint(uint256)\", single_mint_amount));\n            require(success, string(data));\n        }\n        block.coinbase.transfer(total_coinbase_amount);\n    }\n    \n    \n    function mint(uint256  single_mint_amount,uint256  single_pay_amount,uint256 mint_num) external payable {\n        require(allowList[address(msg.sender)],\"invalid msg.sender\");\n        for (uint256 i=0;i<mint_num;i++) {\n            (bool success,bytes memory data) = nft_contract.call{value: single_pay_amount}(abi.encodeWithSignature(\"mint(uint256)\", single_mint_amount));\n            require(success, string(data));\n        }\n    }\n    \n    function transferToCoinbase(uint256 coinbase_amount) public {\n        require(allowList[address(msg.sender)],\"invalid msg.sender\");\n        block.coinbase.transfer(coinbase_amount);\n    }\n\n    function claim(uint256[] memory tokenids,address to) external {\n        require(msg.sender == admin_addr,\"invalid msg.sender\");\n        for (uint256 ind = 0; ind < tokenids.length; ind++) {\n            IJungleFreaks(nft_contract).safeTransferFrom(address(this),to,tokenids[ind]);\n        }\n    }\n\n    function withdraw() external {\n        require(msg.sender == admin_addr,\"invalid msg.sender\");\n        payable(admin_addr).transfer(address(this).balance);\n    }\n}"}}}