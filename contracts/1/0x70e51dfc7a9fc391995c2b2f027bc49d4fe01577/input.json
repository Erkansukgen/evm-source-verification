{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Interfaces/IWETH.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.11;\n\ninterface IWETH {\t\n\tfunction deposit() payable external;\n\tfunction withdraw(uint256 wad) external;\n}\n"},"Treasury/FarmTokenV1.sol":{"content":"// SPDX-License-Identifier: MIT\n/*\nThis is a Stacker.vc FarmToken version 1 contract. It deploys a rebase token where it rebases to be equivalent to it's underlying token. 1 stackUSDT = 1 USDT.\nThe underlying assets are used to farm on different smart contract and produce yield via the ever-expanding DeFi ecosystem.\n\nNOTE: \nThis is an abstract contract, and two functions need to be implemented for a valid deployment: \n_verify(address _account, uint256 _amountUnderlyingToSend) --> in order to pass any locks on sending funds/withdrawing\n_getTotalUnderlying() --> to know the total amount of funds under management\n\nTHANKS! \nTo Lido DAO for the inspiration in more ways than one, but especially for a lot of the code here. \nIf you haven't already, stake your ETH for ETH2.0 with Lido.fi!\nAlso thanks for Aragon for hosting our Stacker Ventures DAO, and for more inspiration!\n*/\n\npragma solidity ^0.6.11;\n\nimport \"../openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; // call ERC20 safely\nimport \"../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../openzeppelin/contracts/utils/Address.sol\";\n\nabstract contract FarmTokenV1 is IERC20 {\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\t// shares are how a users balance is generated. For rebase tokens, balances are always generated at runtime, while shares stay constant.\n\t// shares is your proportion of the total pool of invested UnderlyingToken\n\t// shares are like a Compound.finance cToken, while our token balances are like an Aave aToken.\n\tmapping(address => uint256) private shares;\n\tmapping(address => mapping (address => uint256)) private allowances;\n\n\tuint256 public totalShares;\n\n\tstring public name;\n\tstring public symbol;\n\tstring public underlying;\n\taddress public underlyingContract;\n\n\tuint8 public decimals;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory _name, uint8 _decimals, address _underlyingContract) public {\n    \tname = string(abi.encodePacked(abi.encodePacked(\"Stacker Ventures \", _name), \" v1\"));\n    \tsymbol = string(abi.encodePacked(\"stack\", _name));\n    \tunderlying = _name;\n\n    \tdecimals = _decimals;\n\n    \tunderlyingContract = _underlyingContract;\n    }\n\n    // 1 stackToken = 1 underlying token\n    function totalSupply() external override view returns (uint256){\n    \treturn _getTotalUnderlying();\n    }\n\n    function totalUnderlying() external view returns (uint256){\n    \treturn _getTotalUnderlying();\n    }\n\n    function balanceOf(address _account) public override view returns (uint256){\n    \treturn getUnderlyingForShares(_sharesOf(_account));\n    }\n\n    // transfer tokens, not shares\n    function transfer(address _recipient, uint256 _amount) external override returns (bool){\n    \t_verify(msg.sender, _amount);\n    \t_transfer(msg.sender, _recipient, _amount);\n        return true;\n    }\n\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool){\n    \t_verify(_sender, _amount);\n    \tuint256 _currentAllowance = allowances[_sender][msg.sender];\n        require(_currentAllowance >= _amount, \"FARMTOKENV1: not enough allowance\");\n\n        _transfer(_sender, _recipient, _amount);\n        _approve(_sender, msg.sender, _currentAllowance.sub(_amount));\n        return true;\n    }\n\n    // this checks if a transfer/transferFrom/withdraw is allowed. There are some conditions on withdraws/transfers from new deposits\n    // function stub, this needs to be implemented in a contract which inherits this for a valid deployment\n    // IMPLEMENT THIS\n    function _verify(address _account, uint256 _amountUnderlyingToSend) internal virtual;\n\n    // allow tokens, not shares\n    function allowance(address _owner, address _spender) external override view returns (uint256){\n    \treturn allowances[_owner][_spender];\n    }\n\n    // approve tokens, not shares\n    function approve(address _spender, uint256 _amount) external override returns (bool){\n    \t_approve(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    // shares of _account\n    function sharesOf(address _account) external view returns (uint256) {\n    \treturn _sharesOf(_account);\n    }\n\n    // how many shares for _amount of underlying?\n    // if there are no shares, or no underlying yet, we are initing the contract or suffered a total loss\n    // either way, init this state at 1:1 shares:underlying\n    function getSharesForUnderlying(uint256 _amountUnderlying) public view returns (uint256){\n    \tuint256 _totalUnderlying = _getTotalUnderlying();\n    \tif (_totalUnderlying == 0){\n    \t\treturn _amountUnderlying; // this will init at 1:1 _underlying:_shares\n    \t}\n    \tuint256 _totalShares = totalShares;\n    \tif (_totalShares == 0){\n    \t\treturn _amountUnderlying; // this will init the first shares, expected contract underlying balance == 0, or there will be a bonus (doesn't belong to anyone so ok)\n    \t}\n\n    \treturn _amountUnderlying.mul(_totalShares).div(_totalUnderlying);\n    }\n\n    // how many underlying for _amount of shares?\n    // if there are no shares, or no underlying yet, we are initing the contract or suffered a total loss\n    // either way, init this state at 1:1 shares:underlying\n    function getUnderlyingForShares(uint256 _amountShares) public view returns (uint256){\n    \tuint256 _totalShares = totalShares;\n    \tif (_totalShares == 0){\n    \t\treturn _amountShares; // this will init at 1:1 _shares:_underlying\n    \t}\n    \tuint256 _totalUnderlying = _getTotalUnderlying();\n    \tif (_totalUnderlying == 0){\n    \t\treturn _amountShares; // this will init at 1:1 \n    \t}\n\n    \treturn _amountShares.mul(_totalUnderlying).div(_totalShares);\n\n    }\n\n    function _sharesOf(address _account) internal view returns (uint256){\n    \treturn shares[_account];\n    }\n\n    // function stub, this needs to be implemented in a contract which inherits this for a valid deployment\n    // sum the contract balance + working balance withdrawn from the contract and actively farming\n    // IMPLEMENT THIS\n    function _getTotalUnderlying() internal virtual view returns (uint256);\n\n    // in underlying\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\n    \tuint256 _sharesToTransfer = getSharesForUnderlying(_amount);\n    \t_transferShares(_sender, _recipient, _sharesToTransfer);\n    \temit Transfer(_sender, _recipient, _amount);\n    }\n\n    // in underlying\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\n    \trequire(_owner != address(0), \"FARMTOKENV1: from == 0x0\");\n        require(_spender != address(0), \"FARMTOKENV1: to == 0x00\");\n\n        allowances[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n    }\n\n    function _transferShares(address _sender, address _recipient,  uint256 _amountShares) internal {\n    \trequire(_sender != address(0), \"FARMTOKENV1: from == 0x00\");\n        require(_recipient != address(0), \"FARMTOKENV1: to == 0x00\");\n\n        uint256 _currentSenderShares = shares[_sender];\n        require(_amountShares <= _currentSenderShares, \"FARMTOKENV1: transfer amount exceeds balance\");\n\n        shares[_sender] = _currentSenderShares.sub(_amountShares);\n        shares[_recipient] = shares[_recipient].add(_amountShares);\n    }\n\n    function _mintShares(address _recipient, uint256 _amountShares) internal {\n    \trequire(_recipient != address(0), \"FARMTOKENV1: to == 0x00\");\n\n        totalShares = totalShares.add(_amountShares);\n        shares[_recipient] = shares[_recipient].add(_amountShares);\n\n        // NOTE: we're not emitting a Transfer event from the zero address here\n        // If we mint shares with no underlying, we basically just diluted everyone\n\n        // It's not possible to send events from _everyone_ to reflect each balance dilution (ie: balance going down)\n\n        // Not compliant to ERC20 standard...\n    }\n\n    function _burnShares(address _account, uint256 _amountShares) internal {\n    \trequire(_account != address(0), \"FARMTOKENV1: burn from == 0x00\");\n\n        uint256 _accountShares = shares[_account];\n        require(_amountShares <= _accountShares, \"FARMTOKENV1: burn amount exceeds balance\");\n        totalShares = totalShares.sub(_amountShares);\n\n        shares[_account] = _accountShares.sub(_amountShares);\n\n        // NOTE: we're not emitting a Transfer event to the zero address here \n        // If we burn shares without burning/withdrawing the underlying\n        // then it looks like a system wide credit to everyones balance\n\n        // It's not possible to send events to _everyone_ to reflect each balance credit (ie: balance going up)\n\n        // Not compliant to ERC20 standard...\n    }\n}"},"Treasury/FarmTreasuryV1.sol":{"content":"// SPDX-License-Identifier: MIT\n/*\nThis is a Stacker.vc FarmTreasury version 1 contract. It deploys a rebase token where it rebases to be equivalent to it's underlying token. 1 stackUSDT = 1 USDT.\nThe underlying assets are used to farm on different smart contract and produce yield via the ever-expanding DeFi ecosystem.\n\nTHANKS! To Lido DAO for the inspiration in more ways than one, but especially for a lot of the code here. \nIf you haven't already, stake your ETH for ETH2.0 with Lido.fi!\n\nAlso thanks for Aragon for hosting our Stacker Ventures DAO, and for more inspiration!\n*/\n\npragma solidity ^0.6.11;\n\nimport \"../openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; // call ERC20 safely\nimport \"../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./FarmTokenV1.sol\";\n\ncontract FarmTreasuryV1 is ReentrancyGuard, FarmTokenV1 {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tmapping(address => DepositInfo) public userDeposits;\n\tmapping(address => bool) public noLockWhitelist;\n\n\tstruct DepositInfo {\n\t\tuint256 amountUnderlyingLocked;\n\t\tuint256 timestampDeposit;\n\t\tuint256 timestampUnlocked;\n\t}\n\n\tuint256 internal constant LOOP_LIMIT = 200;\n\n\taddress payable public governance;\n\taddress payable public farmBoss;\n\n\tbool public paused = false;\n\tbool public pausedDeposits = false;\n\n\t// fee schedule, can be changed by governance, in bips\n\t// performance fee is on any gains, base fee is on AUM/yearly\n\tuint256 public constant max = 10000;\n\tuint256 public performanceToTreasury = 1000;\n\tuint256 public performanceToFarmer = 1000;\n\tuint256 public baseToTreasury = 100;\n\tuint256 public baseToFarmer = 100;\n\n\t// limits on rebalancing from the farmer, trying to negate errant rebalances\n\tuint256 public rebalanceUpLimit = 100; // maximum of a 1% gain per rebalance\n\tuint256 public rebalanceUpWaitTime = 23 hours;\n\tuint256 public lastRebalanceUpTime;\n\n\t// waiting period on withdraws from time of deposit\n\t// locked amount linearly decreases until the time is up, so at waitPeriod/2 after deposit, you can withdraw depositAmt/2 funds.\n\tuint256 public waitPeriod = 1 weeks;\n\n\t// hot wallet holdings for instant withdraw, in bips\n\t// if the hot wallet balance expires, the users will need to wait for the next rebalance period in order to withdraw\n\tuint256 public hotWalletHoldings = 1000; // 10% initially\n\n\tuint256 public ACTIVELY_FARMED;\n\n\tevent RebalanceHot(uint256 amountIn, uint256 amountToFarmer, uint256 timestamp);\n\tevent ProfitDeclared(bool profit, uint256 amount, uint256 timestamp, uint256 totalAmountInPool, uint256 totalSharesInPool, uint256 performanceFeeTotal, uint256 baseFeeTotal);\n\tevent Deposit(address depositor, uint256 amount, address referral);\n\tevent Withdraw(address withdrawer, uint256 amount);\n\n\tconstructor(string memory _nameUnderlying, uint8 _decimalsUnderlying, address _underlying) public FarmTokenV1(_nameUnderlying, _decimalsUnderlying, _underlying) {\n\t\tgovernance = msg.sender;\n\t\tlastRebalanceUpTime = block.timestamp;\n\t}\n\n\tfunction setGovernance(address payable _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tgovernance = _new;\n\t}\n\n\t// the \"farmBoss\" is a trusted smart contract that functions kind of like an EOA.\n\t// HOWEVER specific contract addresses need to be whitelisted in order for this contract to be allowed to interact w/ them\n\t// the governance has full control over the farmBoss, and other addresses can have partial control for strategy rotation/rebalancing\n\tfunction setFarmBoss(address payable _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tfarmBoss = _new;\n\t}\n\n\tfunction setNoLockWhitelist(address[] calldata _accounts, bool[] calldata _noLock) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_accounts.length == _noLock.length && _accounts.length <= LOOP_LIMIT, \"FARMTREASURYV1: check array lengths\");\n\n\t\tfor (uint256 i = 0; i < _accounts.length; i++){\n\t\t\tnoLockWhitelist[_accounts[i]] = _noLock[i];\n\t\t}\n\t}\n\n\tfunction pause() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpaused = true;\n\t}\n\n\tfunction unpause() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpaused = false;\n\t}\n\n\tfunction pauseDeposits() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpausedDeposits = true;\n\t}\n\n\tfunction unpauseDeposits() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpausedDeposits = false;\n\t}\n\n\tfunction setFeeDistribution(uint256 _performanceToTreasury, uint256 _performanceToFarmer, uint256 _baseToTreasury, uint256 _baseToFarmer) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_performanceToTreasury.add(_performanceToFarmer) < max, \"FARMTREASURYV1: too high performance\");\n\t\trequire(_baseToTreasury.add(_baseToFarmer) <= 500, \"FARMTREASURYV1: too high base\");\n\t\t\n\t\tperformanceToTreasury = _performanceToTreasury;\n\t\tperformanceToFarmer = _performanceToFarmer;\n\t\tbaseToTreasury = _baseToTreasury;\n\t\tbaseToFarmer = _baseToFarmer;\n\t}\n\n\tfunction setWaitPeriod(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new <= 10 weeks, \"FARMTREASURYV1: too long wait\");\n\n\t\twaitPeriod = _new;\n\t}\n\n\tfunction setHotWalletHoldings(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new <= max && _new >= 100, \"FARMTREASURYV1: hot wallet values bad\");\n\n\t\thotWalletHoldings = _new;\n\t}\n\n\tfunction setRebalanceUpLimit(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new < max, \"FARMTREASURYV1: >= max\");\n\n\t\trebalanceUpLimit = _new;\n\t}\n\n\tfunction setRebalanceUpWaitTime(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new <= 1 weeks, \"FARMTREASURYV1: > 1 week\");\n\n\t\trebalanceUpWaitTime = _new;\n\t}\n\n\tfunction deposit(uint256 _amountUnderlying, address _referral) external nonReentrant {\n\t\trequire(_amountUnderlying > 0, \"FARMTREASURYV1: amount == 0\");\n\t\trequire(!paused && !pausedDeposits, \"FARMTREASURYV1: paused\");\n\n\t\t_deposit(_amountUnderlying, _referral);\n\n\t\tIERC20 _underlying = IERC20(underlyingContract);\n\t\tuint256 _before = _underlying.balanceOf(address(this));\n\t\t_underlying.safeTransferFrom(msg.sender, address(this), _amountUnderlying);\n\t\tuint256 _after = _underlying.balanceOf(address(this));\n\t\tuint256 _total = _after.sub(_before);\n\t\trequire(_total >= _amountUnderlying, \"FARMTREASURYV1: bad transfer\");\n\t}\n\n\tfunction _deposit(uint256 _amountUnderlying, address _referral) internal {\n\t\t// determine how many shares this will be\n\t\tuint256 _sharesToMint = getSharesForUnderlying(_amountUnderlying);\n\n\t\t_mintShares(msg.sender, _sharesToMint);\n\t\t// store some important info for this deposit, that will be checked on withdraw/transfer of tokens\n\t\t_storeDepositInfo(msg.sender, _amountUnderlying);\n\n\t\t// emit deposit w/ referral event... can't refer yourself\n\t\tif (_referral != msg.sender){\n\t\t\temit Deposit(msg.sender, _amountUnderlying, _referral);\n\t\t}\n\t\telse {\n\t\t\temit Deposit(msg.sender, _amountUnderlying, address(0));\n\t\t}\n\n\t\temit Transfer(address(0), msg.sender, _amountUnderlying);\n\t}\n\n\tfunction _storeDepositInfo(address _account, uint256 _amountUnderlying) internal {\n\n\t\tDepositInfo memory _existingInfo = userDeposits[_account];\n\n\t\t// first deposit, make a new entry in the mapping, lock all funds for \"waitPeriod\"\n\t\tif (_existingInfo.timestampDeposit == 0){\n\t\t\tDepositInfo memory _info = DepositInfo(\n\t\t\t\t{\n\t\t\t\t\tamountUnderlyingLocked: _amountUnderlying, \n\t\t\t\t\ttimestampDeposit: block.timestamp, \n\t\t\t\t\ttimestampUnlocked: block.timestamp.add(waitPeriod)\n\t\t\t\t}\n\t\t\t);\n\t\t\tuserDeposits[_account] = _info;\n\t\t}\n\t\t// not the first deposit, if there are still funds locked, then average out the waits (ie: 1 BTC locked 10 days = 2 BTC locked 5 days)\n\t\telse {\n\t\t\tuint256 _lockedAmt = _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\n\t\t\t// if there's no lock, disregard old info and make a new lock\n\n\t\t\tif (_lockedAmt == 0){\n\t\t\t\tDepositInfo memory _info = DepositInfo(\n\t\t\t\t\t{\n\t\t\t\t\t\tamountUnderlyingLocked: _amountUnderlying, \n\t\t\t\t\t\ttimestampDeposit: block.timestamp, \n\t\t\t\t\t\ttimestampUnlocked: block.timestamp.add(waitPeriod)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tuserDeposits[_account] = _info;\n\t\t\t}\n\t\t\t// funds are still locked from a past deposit, average out the waittime remaining with the waittime for this new deposit\n\t\t\t/*\n\t\t\t\tsolve this equation:\n\n\t\t\t\tnewDepositAmt * waitPeriod + remainingAmt * existingWaitPeriod = (newDepositAmt + remainingAmt) * X waitPeriod\n\n\t\t\t\ttherefore:\n\n\t\t\t\t\t\t\t\t(newDepositAmt * waitPeriod + remainingAmt * existingWaitPeriod)\n\t\t\t\tX waitPeriod =  ----------------------------------------------------------------\n\t\t\t\t\t\t\t\t\t\t\t\t(newDepositAmt + remainingAmt)\n\n\t\t\t\tExample: 7 BTC new deposit, with wait period of 2 weeks\n\t\t\t\t\t\t 1 BTC remaining, with remaining wait period of 1 week\n\t\t\t\t\t\t ...\n\t\t\t\t\t\t (7 BTC * 2 weeks + 1 BTC * 1 week) / 8 BTC = 1.875 weeks\n\t\t\t*/\n\t\t\telse {\n\t\t\t\tuint256 _lockedAmtTime = _lockedAmt.mul(_existingInfo.timestampUnlocked.sub(block.timestamp));\n\t\t\t\tuint256 _newAmtTime = _amountUnderlying.mul(waitPeriod);\n\t\t\t\tuint256 _total = _amountUnderlying.add(_lockedAmt);\n\n\t\t\t\tuint256 _newLockedTime = (_lockedAmtTime.add(_newAmtTime)).div(_total);\n\n\t\t\t\tDepositInfo memory _info = DepositInfo(\n\t\t\t\t\t{\n\t\t\t\t\t\tamountUnderlyingLocked: _total, \n\t\t\t\t\t\ttimestampDeposit: block.timestamp, \n\t\t\t\t\t\ttimestampUnlocked: block.timestamp.add(_newLockedTime)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tuserDeposits[_account] = _info;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getLockedAmount(address _account) public view returns (uint256) {\n\t\tDepositInfo memory _existingInfo = userDeposits[_account];\n\t\treturn _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\n\t}\n\n\t// the locked amount linearly decreases until the timestampUnlocked time, then it's zero\n\t// Example: if 5 BTC contributed (2 week lock), then after 1 week there will be 2.5 BTC locked, the rest is free to transfer/withdraw\n\tfunction _getLockedAmount(address _account, uint256 _amountLocked, uint256 _timestampDeposit, uint256 _timestampUnlocked) internal view returns (uint256) {\n\t\tif (_timestampUnlocked <= block.timestamp || noLockWhitelist[_account]){\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\tuint256 _remainingTime = _timestampUnlocked.sub(block.timestamp);\n\t\t\tuint256 _totalTime = _timestampUnlocked.sub(_timestampDeposit);\n\n\t\t\treturn _amountLocked.mul(_remainingTime).div(_totalTime);\n\t\t}\n\t}\n\n\tfunction withdraw(uint256 _amountUnderlying) external nonReentrant {\n\t\trequire(_amountUnderlying > 0, \"FARMTREASURYV1: amount == 0\");\n\t\trequire(!paused, \"FARMTREASURYV1: paused\");\n\n\t\t_withdraw(_amountUnderlying);\n\n\t\tIERC20(underlyingContract).safeTransfer(msg.sender, _amountUnderlying);\n\t}\n\n\tfunction _withdraw(uint256 _amountUnderlying) internal {\n\t\t_verify(msg.sender, _amountUnderlying);\n\t\t// try and catch the more obvious error of hot wallet being depleted, otherwise proceed\n\t\tif (IERC20(underlyingContract).balanceOf(address(this)) < _amountUnderlying){\n\t\t\trevert(\"FARMTREASURYV1: Hot wallet balance depleted. Please try smaller withdraw or wait for rebalancing.\");\n\t\t}\n\n\t\tuint256 _sharesToBurn = getSharesForUnderlying(_amountUnderlying);\n\t\t_burnShares(msg.sender, _sharesToBurn); // they must have >= _sharesToBurn, checked here\n\n\t\temit Transfer(msg.sender, address(0), _amountUnderlying);\n\t\temit Withdraw(msg.sender, _amountUnderlying);\n\t}\n\n\t// wait time verification\n\tfunction _verify(address _account, uint256 _amountUnderlyingToSend) internal override {\n\t\tDepositInfo memory _existingInfo = userDeposits[_account];\n\n\t\tuint256 _lockedAmt = _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\n\t\tuint256 _balance = balanceOf(_account);\n\n\t\t// require that any funds locked are not leaving the account in question.\n\t\trequire(_balance.sub(_amountUnderlyingToSend) >= _lockedAmt, \"FARMTREASURYV1: requested funds are temporarily locked\");\n\t}\n\n\t// this means that we made a GAIN, due to standard farming gains\n\t// operaratable by farmBoss, this is standard operating procedure, farmers can only report gains\n\tfunction rebalanceUp(uint256 _amount, address _farmerRewards) external nonReentrant returns (bool, uint256) {\n\t\trequire(msg.sender == farmBoss, \"FARMTREASURYV1: !farmBoss\");\n\t\trequire(!paused, \"FARMTREASURYV1: paused\");\n\n\t\t// fee logic & profit recording\n\t\t// check farmer limits on rebalance wait time for earning reportings. if there is no _amount reported, we don't take any fees and skip these checks\n\t\t// we should always allow pure hot wallet rebalances, however earnings needs some checks and restrictions\n\t\tif (_amount > 0){\n\t\t\trequire(block.timestamp.sub(lastRebalanceUpTime) >= rebalanceUpWaitTime, \"FARMTREASURYV1: <rebalanceUpWaitTime\");\n\t\t\trequire(ACTIVELY_FARMED.mul(rebalanceUpLimit).div(max) >= _amount, \"FARMTREASURYV1 _amount > rebalanceUpLimit\");\n\t\t\t// farmer incurred a gain of _amount, add this to the amount being farmed\n\t\t\tACTIVELY_FARMED = ACTIVELY_FARMED.add(_amount);\n\t\t\tuint256 _totalPerformance = _performanceFee(_amount, _farmerRewards);\n\t\t\tuint256 _totalAnnual = _annualFee(_farmerRewards);\n\n\t\t\t// for farmer controls, and also for the annual fee time\n\t\t\t// only update this if there is a reported gain, otherwise this is just a hot wallet rebalance, and we should always allow these\n\t\t\tlastRebalanceUpTime = block.timestamp; \n\n\t\t\t// for off-chain APY calculations, fees assessed\n\t\t\temit ProfitDeclared(true, _amount, block.timestamp, _getTotalUnderlying(), totalShares, _totalPerformance, _totalAnnual);\n\t\t}\n\t\telse {\n\t\t\t// for off-chain APY calculations, no fees assessed\n\t\t\temit ProfitDeclared(true, _amount, block.timestamp, _getTotalUnderlying(), totalShares, 0, 0);\n\t\t}\n\t\t// end fee logic & profit recording\n\n\t\t// funds are in the contract and gains are accounted for, now determine if we need to further rebalance the hot wallet up, or can take funds in order to farm\n\t\t// start hot wallet and farmBoss rebalance logic\n\t\t(bool _fundsNeeded, uint256 _amountChange) = _calcHotWallet();\n\t\t_rebalanceHot(_fundsNeeded, _amountChange); // if the hot wallet rebalance fails, revert() the entire function\n\t\t// end logic\n\n\t\treturn (_fundsNeeded, _amountChange); // in case we need them, FE simulations and such\n\t}\n\n\t// this means that the system took a loss, and it needs to be reflected in the next rebalance\n\t// only operatable by governance, (large) losses should be extremely rare by good farming practices\n\t// this would look like a farmed smart contract getting exploited/hacked, and us not having the necessary insurance for it\n\t// possible that some more aggressive IL strategies could also need this function called\n\tfunction rebalanceDown(uint256 _amount, bool _rebalanceHotWallet) external nonReentrant returns (bool, uint256) {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\t// require(!paused, \"FARMTREASURYV1: paused\"); <-- governance can only call this anyways, leave this commented out\n\n\t\tACTIVELY_FARMED = ACTIVELY_FARMED.sub(_amount);\n\n\t\tif (_rebalanceHotWallet){\n\t\t\t(bool _fundsNeeded, uint256 _amountChange) = _calcHotWallet();\n\t\t\t_rebalanceHot(_fundsNeeded, _amountChange); // if the hot wallet rebalance fails, revert() the entire function\n\n\t\t\treturn (_fundsNeeded, _amountChange); // in case we need them, FE simulations and such\n\t\t}\n\n\t\t// for off-chain APY calculations, no fees assessed\n\t\temit ProfitDeclared(false, _amount, block.timestamp, _getTotalUnderlying(), totalShares, 0, 0);\n\n\t\treturn (false, 0);\n\t}\n\n\tfunction _performanceFee(uint256 _amount, address _farmerRewards) internal returns (uint256){\n\n\t\tuint256 _existingShares = totalShares;\n\t\tuint256 _balance = _getTotalUnderlying();\n\n\t\tuint256 _performanceToFarmerUnderlying = _amount.mul(performanceToFarmer).div(max);\n\t\tuint256 _performanceToTreasuryUnderlying = _amount.mul(performanceToTreasury).div(max);\n\t\tuint256 _performanceTotalUnderlying = _performanceToFarmerUnderlying.add(_performanceToTreasuryUnderlying);\n\n\t\tif (_performanceTotalUnderlying == 0){\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 _sharesToMint = _underlyingFeeToShares(_performanceTotalUnderlying, _balance, _existingShares);\n\n\t\tuint256 _sharesToFarmer = _sharesToMint.mul(_performanceToFarmerUnderlying).div(_performanceTotalUnderlying); // by the same ratio\n\t\tuint256 _sharesToTreasury = _sharesToMint.sub(_sharesToFarmer);\n\n\t\t_mintShares(_farmerRewards, _sharesToFarmer);\n\t\t_mintShares(governance, _sharesToTreasury);\n\n\t\tuint256 _underlyingFarmer = getUnderlyingForShares(_sharesToFarmer);\n\t\tuint256 _underlyingTreasury = getUnderlyingForShares(_sharesToTreasury);\n\n\t\t// do two mint events, in underlying, not shares\n\t\temit Transfer(address(0), _farmerRewards, _underlyingFarmer);\n\t\temit Transfer(address(0), governance, _underlyingTreasury);\n\n\t\treturn _underlyingFarmer.add(_underlyingTreasury);\n\t}\n\n\t// we are taking baseToTreasury + baseToFarmer each year, every time this is called, look when we took fee last, and linearize the fee to now();\n\tfunction _annualFee(address _farmerRewards) internal returns (uint256) {\n\t\tuint256 _lastAnnualFeeTime = lastRebalanceUpTime;\n\t\tif (_lastAnnualFeeTime >= block.timestamp){\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 _elapsedTime = block.timestamp.sub(_lastAnnualFeeTime);\n\t\tuint256 _existingShares = totalShares;\n\t\tuint256 _balance = _getTotalUnderlying();\n\n\t\tuint256 _annualPossibleUnderlying = _balance.mul(_elapsedTime).div(365 days);\n\t\tuint256 _annualToFarmerUnderlying = _annualPossibleUnderlying.mul(baseToFarmer).div(max);\n\t\tuint256 _annualToTreasuryUnderlying = _annualPossibleUnderlying.mul(baseToFarmer).div(max);\n\t\tuint256 _annualTotalUnderlying = _annualToFarmerUnderlying.add(_annualToTreasuryUnderlying);\n\n\t\tif (_annualTotalUnderlying == 0){\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 _sharesToMint = _underlyingFeeToShares(_annualTotalUnderlying, _balance, _existingShares);\n\n\t\tuint256 _sharesToFarmer = _sharesToMint.mul(_annualToFarmerUnderlying).div(_annualTotalUnderlying); // by the same ratio\n\t\tuint256 _sharesToTreasury = _sharesToMint.sub(_sharesToFarmer);\n\n\t\t_mintShares(_farmerRewards, _sharesToFarmer);\n\t\t_mintShares(governance, _sharesToTreasury);\n\n\t\tuint256 _underlyingFarmer = getUnderlyingForShares(_sharesToFarmer);\n\t\tuint256 _underlyingTreasury = getUnderlyingForShares(_sharesToTreasury);\n\n\t\t// do two mint events, in underlying, not shares\n\t\temit Transfer(address(0), _farmerRewards, _underlyingFarmer);\n\t\temit Transfer(address(0), governance, _underlyingTreasury);\n\n\t\treturn _underlyingFarmer.add(_underlyingTreasury);\n\t}\n\n\tfunction _underlyingFeeToShares(uint256 _totalFeeUnderlying, uint256 _balance, uint256 _existingShares) pure internal returns (uint256 _sharesToMint){\n\t\t// to mint the required amount of fee shares, solve:\n\t\t/* \n\t\t\tratio:\n\n\t\t\t    \tcurrentShares \t\t\t  newShares\t\t\n\t\t\t-------------------------- : --------------------, where newShares = (currentShares + mintShares)\n\t\t\t(totalUnderlying - feeAmt) \t\ttotalUnderlying\n\n\t\t\tsolved:\n\t\t\t---> (currentShares / (totalUnderlying - feeAmt) * totalUnderlying) - currentShares = mintShares, where newBalanceLessFee = (totalUnderlying - feeAmt)\n\t\t*/\n\t\treturn _existingShares\n\t\t\t\t.mul(_balance)\n\t\t\t\t.div(_balance.sub(_totalFeeUnderlying))\n\t\t\t\t.sub(_existingShares);\n\t}\n\n\tfunction _calcHotWallet() internal view returns (bool _fundsNeeded, uint256 _amountChange) {\n\t\tuint256 _balanceHere = IERC20(underlyingContract).balanceOf(address(this));\n\t\tuint256 _balanceFarmed = ACTIVELY_FARMED;\n\n\t\tuint256 _totalAmount = _balanceHere.add(_balanceFarmed);\n\t\tuint256 _hotAmount = _totalAmount.mul(hotWalletHoldings).div(max);\n\n\t\t// we have too much in hot wallet, send to farmBoss\n\t\tif (_balanceHere >= _hotAmount){\n\t\t\treturn (false, _balanceHere.sub(_hotAmount));\n\t\t}\n\t\t// we have too little in hot wallet, pull from farmBoss\n\t\tif (_balanceHere < _hotAmount){\n\t\t\treturn (true, _hotAmount.sub(_balanceHere));\n\t\t}\n\t}\n\n\t// usually paired with _calcHotWallet()\n\tfunction _rebalanceHot(bool _fundsNeeded, uint256 _amountChange) internal {\n\t\tif (_fundsNeeded){\n\t\t\tuint256 _before = IERC20(underlyingContract).balanceOf(address(this));\n\t\t\tIERC20(underlyingContract).safeTransferFrom(farmBoss, address(this), _amountChange);\n\t\t\tuint256 _after = IERC20(underlyingContract).balanceOf(address(this));\n\t\t\tuint256 _total = _after.sub(_before);\n\n\t\t\trequire(_total >= _amountChange, \"FARMTREASURYV1: bad rebalance, hot wallet needs funds!\");\n\n\t\t\t// we took funds from the farmBoss to refill the hot wallet, reflect this in ACTIVELY_FARMED\n\t\t\tACTIVELY_FARMED = ACTIVELY_FARMED.sub(_amountChange);\n\n\t\t\temit RebalanceHot(_amountChange, 0, block.timestamp);\n\t\t}\n\t\telse {\n\t\t\trequire(farmBoss != address(0), \"FARMTREASURYV1: !FarmBoss\"); // don't burn funds\n\n\t\t\tIERC20(underlyingContract).safeTransfer(farmBoss, _amountChange); // _calcHotWallet() guarantees we have funds here to send\n\n\t\t\t// we sent more funds for the farmer to farm, reflect this\n\t\t\tACTIVELY_FARMED = ACTIVELY_FARMED.add(_amountChange);\n\n\t\t\temit RebalanceHot(0, _amountChange, block.timestamp);\n\t\t}\n\t}\n\n\tfunction _getTotalUnderlying() internal override view returns (uint256) {\n\t\tuint256 _balanceHere = IERC20(underlyingContract).balanceOf(address(this));\n\t\tuint256 _balanceFarmed = ACTIVELY_FARMED;\n\n\t\treturn _balanceHere.add(_balanceFarmed);\n\t}\n\n\tfunction rescue(address _token, uint256 _amount) external nonReentrant {\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\n        if (_token != address(0)){\n            IERC20(_token).safeTransfer(governance, _amount);\n        }\n        else { // if _tokenContract is 0x0, then escape ETH\n            governance.transfer(_amount);\n        }\n    }\n}"},"Treasury/FarmTreasuryV1_ETH.sol":{"content":"// SPDX-License-Identifier: MIT\n/*\n\tInherits FarmTreasuryV1, but allows for direct ETH deposits & withdraws\n*/\n\npragma solidity ^0.6.11;\n\nimport \"../openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; // call ERC20 safely\nimport \"../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./FarmTreasuryV1.sol\";\nimport \"../Interfaces/IWETH.sol\";\n\ncontract FarmTreasuryV1_ETH is ReentrancyGuard, FarmTreasuryV1 {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tconstructor(string memory _nameUnderlying, uint8 _decimalsUnderlying, address _underlying) public FarmTreasuryV1(_nameUnderlying, _decimalsUnderlying, _underlying){\n\t}\n\n\treceive() payable external {\n\t\t// ie: not getting sent back WETH from an unwrapping\n\t\tif(msg.sender != underlyingContract){\n\t\t\tdepositETH(address(0));\n\t\t}\n\t}\n\n\tfunction depositETH(address _referral) public payable nonReentrant {\n\t\trequire(msg.value > 0, \"FARMTREASURYV1: msg.value == 0\");\n\t\trequire(!paused && !pausedDeposits, \"FARMTREASURYV1: paused\");\n\n\t\t_deposit(msg.value, _referral);\n\n\t\tIWETH(underlyingContract).deposit{value: msg.value}();\n\t}\n\n\tfunction withdrawETH(uint256 _amountUnderlying) external nonReentrant {\n\t\trequire(_amountUnderlying > 0, \"FARMTREASURYV1: amount == 0\");\n\t\trequire(!paused, \"FARMTREASURYV1: paused\");\n\n\t\t_withdraw(_amountUnderlying);\n\n\t\tIWETH(underlyingContract).withdraw(_amountUnderlying);\n\t\tmsg.sender.transfer(_amountUnderlying);\n\t}\n}"},"openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}"},"openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"}}}