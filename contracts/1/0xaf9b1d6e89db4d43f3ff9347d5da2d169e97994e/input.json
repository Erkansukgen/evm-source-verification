{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":1500},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"/bifi-project/bifi/1/0xaF9B1d6e89Db4d43F3ff9347D5da2D169E97994E/interestModel.sol":{"content":"pragma solidity 0.6;\ninterface ERC20  {\n\tfunction totalSupply() view external returns (uint256);\n\n\tfunction balanceOf(address who) view external returns (uint256);\n\n\tfunction allowance(address owner, address spender) view external returns (uint256);\n\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction approve(address spender, uint256 value) external returns (bool);\n\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\n}interface interestModelInterface  {\n\tfunction getInterestAmount(address handlerDataStorageAddr, address payable userAddr, bool isView) view external returns (bool, uint256, uint256, bool, uint256, uint256);\n\n\tfunction viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) view external returns (bool, uint256, uint256, bool, uint256, uint256);\n\n\tfunction getSIRandBIR(uint256 depositTotalAmount, uint256 borrowTotalAmount) view external returns (uint256, uint256);\n}interface marketHandlerDataStorageInterface  {\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\n\n\tfunction getUserAccessed(address payable userAddr) view external returns (bool);\n\n\tfunction setUserAccessed(address payable userAddr, bool _accessed) external returns (bool);\n\n\tfunction getReservedAddr() view external returns (address payable);\n\n\tfunction setReservedAddr(address payable reservedAddress) external returns (bool);\n\n\tfunction getReservedAmount() view external returns (int256);\n\n\tfunction addReservedAmount(uint256 amount) external returns (int256);\n\n\tfunction subReservedAmount(uint256 amount) external returns (int256);\n\n\tfunction updateSignedReservedAmount(int256 amount) external returns (int256);\n\n\tfunction setTokenHandler(address _marketHandlerAddr, address _interestModelAddr, uint256 _underlyingTokenDecimal) external returns (bool);\n\n\tfunction setCoinHandler(address _marketHandlerAddr, address _interestModelAddr) external returns (bool);\n\n\tfunction getDepositTotalAmount() view external returns (uint256);\n\n\tfunction addDepositTotalAmount(uint256 amount) external returns (uint256);\n\n\tfunction subDepositTotalAmount(uint256 amount) external returns (uint256);\n\n\tfunction getBorrowTotalAmount() view external returns (uint256);\n\n\tfunction addBorrowTotalAmount(uint256 amount) external returns (uint256);\n\n\tfunction subBorrowTotalAmount(uint256 amount) external returns (uint256);\n\n\tfunction getUserIntraDepositAmount(address payable userAddr) view external returns (uint256);\n\n\tfunction addUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\n\n\tfunction subUserIntraDepositAmount(address payable userAddr, uint256 amount) external returns (uint256);\n\n\tfunction getUserIntraBorrowAmount(address payable userAddr) view external returns (uint256);\n\n\tfunction addUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\n\n\tfunction subUserIntraBorrowAmount(address payable userAddr, uint256 amount) external returns (uint256);\n\n\tfunction addDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\n\n\tfunction addBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\n\n\tfunction subDepositAmount(address payable userAddr, uint256 amount) external returns (bool);\n\n\tfunction subBorrowAmount(address payable userAddr, uint256 amount) external returns (bool);\n\n\tfunction getUserAmount(address payable userAddr) view external returns (uint256, uint256);\n\n\tfunction getHandlerAmount() view external returns (uint256, uint256);\n\n\tfunction getHandlerAmountInfo(address payable userAddr) view external returns (uint256, uint256, uint256, uint256);\n\n\tfunction setAmount(address payable userAddr, uint256 depositTotalAmount, uint256 borrowTotalAmount, uint256 depositAmount, uint256 borrowAmount) external returns (uint256);\n\n\tfunction getLastUpdatedBlock() view external returns (uint256);\n\n\tfunction setLastUpdatedBlock(uint256 _lastUpdatedBlock) external returns (bool);\n\n\tfunction getInactiveActionDelta() view external returns (uint256);\n\n\tfunction setInactiveActionDelta(uint256 inactiveActionDelta) external returns (bool);\n\n\tfunction getActionEXR() view external returns (uint256, uint256);\n\n\tfunction setActionEXR(uint256 actionDepositExRate, uint256 actionBorrowExRate) external returns (bool);\n\n\tfunction getGlobalDepositEXR() view external returns (uint256);\n\n\tfunction getGlobalBorrowEXR() view external returns (uint256);\n\n\tfunction setEXR(address payable userAddr, uint256 globalDepositEXR, uint256 globalBorrowEXR) external returns (bool);\n\n\tfunction getUserEXR(address payable userAddr) view external returns (uint256, uint256);\n\n\tfunction setUserEXR(address payable userAddr, uint256 depositEXR, uint256 borrowEXR) external returns (bool);\n\n\tfunction getGlobalEXR() view external returns (uint256, uint256);\n\n\tfunction getUnifiedTokenDecimal() view external returns (uint256);\n\n\tfunction setUnifiedTokenDecimal(uint256 unifiedTokenDecimal) external returns (bool);\n\n\tfunction getUnderlyingTokenDecimal() view external returns (uint256);\n\n\tfunction setUnderlyingTokenDecimal(uint256 underlyingTokenDecimal) external returns (bool);\n\n\tfunction getLiquidityLimit() view external returns (uint256);\n\n\tfunction setLiquidityLimit(uint256 liquidityLimit) external returns (bool);\n\n\tfunction getMarketHandlerAddr() view external returns (address);\n\n\tfunction setMarketHandlerAddr(address marketHandlerAddr) external returns (bool);\n\n\tfunction getInterestModelAddr() view external returns (address);\n\n\tfunction setInterestModelAddr(address interestModelAddr) external returns (bool);\n\n\tfunction setInterestEffectLimit(uint256 _interestEffectLimit) external returns (bool);\n\n\tfunction getInterestEffectLimit() view external returns (uint256);\n\n\tfunction setLimitOfAction(uint256 _limitOfAction) external returns (bool);\n\n\tfunction getLimitOfAction() view external returns (uint256);\n}contract interestModel is interestModelInterface {\n\tevent InterestParams(uint256 minimumInterestRate, uint256 sensitivity);\n\n\taddress owner;\n\n\tuint256 constant blocksPerYear = 2102400;\n\n\tuint256 minimumInterestRate;\n\n\tuint256 liquiditySensitivity;\n\n\tuint256 constant unifiedPoint = 10 ** 18;\n\n\tstruct InterestUpdateModel {\n\t\tuint256 SIR;\n\t\tuint256 BIR;\n\t\tuint256 depositTotalAmount;\n\t\tuint256 borrowTotalAmount;\n\t\tuint256 userDepositAmount;\n\t\tuint256 userBorrowAmount;\n\t\tuint256 deltaDepositAmount;\n\t\tuint256 deltaBorrowAmount;\n\t\tuint256 globalDepositEXR;\n\t\tuint256 globalBorrowEXR;\n\t\tuint256 userDepositEXR;\n\t\tuint256 userBorrowEXR;\n\t\tuint256 actionDepositEXR;\n\t\tuint256 actionBorrowEXR;\n\t\tuint256 deltaDepositEXR;\n\t\tuint256 deltaBorrowEXR;\n\t\tbool depositNegativeFlag;\n\t\tbool borrowNegativeFlag;\n\t}\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner, \"onlyOwner function\");\n\t\t_;\n\t}\n\n\tconstructor () public\n\t{\n\t\towner = msg.sender;\n\t\tliquiditySensitivity = mul(10 ** 17, 3);\n\t\tminimumInterestRate = mul(10 ** 16, 2);\n\t}\n\n\tfunction setOwner(address payable _owner)onlyOwner public returns (bool)\n\t{\n\t\towner = _owner;\n\t\treturn true;\n\t}\n\n\tfunction getOwner() view public returns (address)\n\t{\n\t\treturn owner;\n\t}\n\n\tfunction setInterestModelParams(uint256 _minimumInterestRate, uint256 _liquiditySensitivity)onlyOwner external returns (bool)\n\t{\n\t\tminimumInterestRate = _minimumInterestRate;\n\t\tliquiditySensitivity = _liquiditySensitivity;\n\t\temit InterestParams(_minimumInterestRate, _liquiditySensitivity);\n\t\treturn true;\n\t}\n\n\tfunction getInterestAmount(address handlerDataStorageAddr, address payable userAddr, bool isView) view external override returns (bool, uint256, uint256, bool, uint256, uint256)\n\t{\n\t\tif (isView)\n\t\t{\n\t\t\treturn _viewInterestAmount(handlerDataStorageAddr, userAddr);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn _getInterestAmount(handlerDataStorageAddr, userAddr);\n\t\t}\n\t}\n\n\tfunction viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) view external override returns (bool, uint256, uint256, bool, uint256, uint256)\n\t{\n\t\treturn _viewInterestAmount(handlerDataStorageAddr, userAddr);\n\t}\n\n\tfunction getSIRandBIR(uint256 totalDepositAmount, uint256 totalBorrowAmount) view external override returns (uint256, uint256)\n\t{\n\t\treturn _getSIRandBIR(totalDepositAmount, totalBorrowAmount);\n\t}\n\n\tfunction _getInterestAmount(address handlerDataStorageAddr, address payable userAddr) view internal returns (bool, uint256, uint256, bool, uint256, uint256)\n\t{\n\t\tmarketHandlerDataStorageInterface handlerDataStorage = marketHandlerDataStorageInterface(handlerDataStorageAddr);\n\t\tuint256 delta = handlerDataStorage.getInactiveActionDelta();\n\t\tuint256 actionDepositEXR;\n\t\tuint256 actionBorrowEXR;\n\t\t(actionDepositEXR, actionBorrowEXR) = handlerDataStorage.getActionEXR();\n\t\treturn _calcInterestAmount(handlerDataStorageAddr, userAddr, delta, actionDepositEXR, actionBorrowEXR);\n\t}\n\n\tfunction _viewInterestAmount(address handlerDataStorageAddr, address payable userAddr) view internal returns (bool, uint256, uint256, bool, uint256, uint256)\n\t{\n\t\tmarketHandlerDataStorageInterface handlerDataStorage = marketHandlerDataStorageInterface(handlerDataStorageAddr);\n\t\tuint256 blockDelta = sub(block.number, handlerDataStorage.getLastUpdatedBlock());\n\t\tuint256 globalDepositEXR;\n\t\tuint256 globalBorrowEXR;\n\t\t(globalDepositEXR, globalBorrowEXR) = handlerDataStorage.getGlobalEXR();\n\t\treturn _calcInterestAmount(handlerDataStorageAddr, userAddr, blockDelta, globalDepositEXR, globalBorrowEXR);\n\t}\n\n\tfunction _calcInterestAmount(address handlerDataStorageAddr, address payable userAddr, uint256 delta, uint256 actionDepositEXR, uint256 actionBorrowEXR) view internal returns (bool, uint256, uint256, bool, uint256, uint256)\n\t{\n\t\tInterestUpdateModel memory interestUpdateModel;\n\t\tmarketHandlerDataStorageInterface handlerDataStorage = marketHandlerDataStorageInterface(handlerDataStorageAddr);\n\t\t(interestUpdateModel.depositTotalAmount, interestUpdateModel.borrowTotalAmount) = handlerDataStorage.getHandlerAmount();\n\t\t(interestUpdateModel.SIR, interestUpdateModel.BIR) = _getSIRandBIRonBlock(interestUpdateModel.depositTotalAmount, interestUpdateModel.borrowTotalAmount);\n\t\t(interestUpdateModel.userDepositAmount, interestUpdateModel.userBorrowAmount) = handlerDataStorage.getUserAmount(userAddr);\n\t\t(interestUpdateModel.actionDepositEXR, interestUpdateModel.actionBorrowEXR) = (actionDepositEXR, actionBorrowEXR);\n\t\t(interestUpdateModel.userDepositEXR, interestUpdateModel.userBorrowEXR) = handlerDataStorage.getUserEXR(userAddr);\n\t\tinterestUpdateModel.globalDepositEXR = _getNewGlobalEXR(interestUpdateModel.actionDepositEXR, interestUpdateModel.SIR, delta);\n\t\t(interestUpdateModel.depositNegativeFlag, interestUpdateModel.deltaDepositAmount) = _getDeltaAmount(interestUpdateModel.userDepositAmount, interestUpdateModel.globalDepositEXR, interestUpdateModel.userDepositEXR);\n\t\tinterestUpdateModel.globalBorrowEXR = _getNewGlobalEXR(interestUpdateModel.actionBorrowEXR, interestUpdateModel.BIR, delta);\n\t\t(interestUpdateModel.borrowNegativeFlag, interestUpdateModel.deltaBorrowAmount) = _getDeltaAmount(interestUpdateModel.userBorrowAmount, interestUpdateModel.globalBorrowEXR, interestUpdateModel.userBorrowEXR);\n\t\treturn (interestUpdateModel.depositNegativeFlag, interestUpdateModel.deltaDepositAmount, interestUpdateModel.globalDepositEXR, interestUpdateModel.borrowNegativeFlag, interestUpdateModel.deltaBorrowAmount, interestUpdateModel.globalBorrowEXR);\n\t}\n\n\tfunction _getUtilizationRate(uint256 depositTotalAmount, uint256 borrowTotalAmount) view internal returns (uint256)\n\t{\n\t\tif ((depositTotalAmount == 0) && (borrowTotalAmount == 0))\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t\treturn unifiedDiv(borrowTotalAmount, add(depositTotalAmount, borrowTotalAmount));\n\t}\n\n\tfunction _getSIRandBIR(uint256 depositTotalAmount, uint256 borrowTotalAmount) view internal returns (uint256, uint256)\n\t{\n\t\tuint256 utilRate = _getUtilizationRate(depositTotalAmount, borrowTotalAmount);\n\t\tuint256 BIR = add(minimumInterestRate, unifiedMul(utilRate, liquiditySensitivity));\n\t\tuint256 SIR = unifiedMul(utilRate, BIR);\n\t\treturn (SIR, BIR);\n\t}\n\n\tfunction _getSIRandBIRonBlock(uint256 depositTotalAmount, uint256 borrowTotalAmount) view internal returns (uint256, uint256)\n\t{\n\t\tuint256 SIR;\n\t\tuint256 BIR;\n\t\t(SIR, BIR) = _getSIRandBIR(depositTotalAmount, borrowTotalAmount);\n\t\treturn (div(SIR, blocksPerYear), div(BIR, blocksPerYear));\n\t}\n\n\tfunction _getNewGlobalEXR(uint256 actionEXR, uint256 interestRate, uint256 delta) view internal returns (uint256)\n\t{\n\t\treturn unifiedMul(actionEXR, add(unifiedPoint, mul(interestRate, delta)));\n\t}\n\n\tfunction _getDeltaAmount(uint256 unifiedAmount, uint256 globalEXR, uint256 userEXR) view internal returns (bool, uint256)\n\t{\n\t\tuint256 deltaEXR;\n\t\tbool negativeFlag;\n\t\tuint256 deltaAmount;\n\t\tif (unifiedAmount != 0)\n\t\t{\n\t\t\t(negativeFlag, deltaEXR) = _getDeltaEXR(globalEXR, userEXR);\n\t\t\tdeltaAmount = unifiedMul(unifiedAmount, deltaEXR);\n\t\t}\n\t\t\n\t\treturn (negativeFlag, deltaAmount);\n\t}\n\n\tfunction _getDeltaEXR(uint256 newGlobalEXR, uint256 lastUserEXR) view internal returns (bool, uint256)\n\t{\n\t\tuint256 EXR = unifiedDiv(newGlobalEXR, lastUserEXR);\n\t\tif (EXR >= unifiedPoint)\n\t\t{\n\t\t\treturn (false, sub(EXR, unifiedPoint));\n\t\t}\n\t\t\n\t\treturn (true, sub(unifiedPoint, EXR));\n\t}\n\n\tfunction add(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"add overflow\");\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\treturn _sub(a, b, \"sub overflow\");\n\t}\n\n\tfunction mul(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\treturn _mul(a, b);\n\t}\n\n\tfunction div(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\treturn _div(a, b, \"div by zero\");\n\t}\n\n\tfunction mod(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\treturn _mod(a, b, \"mod by zero\");\n\t}\n\n\tfunction _sub(uint256 a, uint256 b, string memory errorMessage) pure internal returns (uint256)\n\t{\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\n\tfunction _mul(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\tif (a == 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t\tuint256 c = a * b;\n\t\trequire((c / a) == b, \"mul overflow\");\n\t\treturn c;\n\t}\n\n\tfunction _div(uint256 a, uint256 b, string memory errorMessage) pure internal returns (uint256)\n\t{\n\t\trequire(b > 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\n\tfunction _mod(uint256 a, uint256 b, string memory errorMessage) pure internal returns (uint256)\n\t{\n\t\trequire(b != 0, errorMessage);\n\t\treturn a % b;\n\t}\n\n\tfunction unifiedDiv(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\treturn _div(_mul(a, unifiedPoint), b, \"unified div by zero\");\n\t}\n\n\tfunction unifiedMul(uint256 a, uint256 b) pure internal returns (uint256)\n\t{\n\t\treturn _div(_mul(a, b), unifiedPoint, \"unified mul by zero\");\n\t}\n}"}}}