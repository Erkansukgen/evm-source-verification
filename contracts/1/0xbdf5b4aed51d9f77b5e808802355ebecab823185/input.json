{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":2000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/MyContract.sol":{"content":"\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n}\n\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n}\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n}\n\n// File: contracts/interfaces/IERC20.sol\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IWETH is IERC20{\n    function deposit() external payable;\n    //function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\ninterface ILGT\n{\n    // Freeing Tokens\n    function free(uint256 amount) external returns (bool success);\n    function freeFrom(uint256 amount, address owner) external returns (bool success);\n}\n\ncontract SwappingContract\n{\n\tIWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\tILGT constant private lgt = ILGT(0x000000000000C1CB11D5c062901F32D06248CE48);\n    \n    address private m_Owner;\n    \n    //Constructor\n\tconstructor() public\n\t{\t\t\n\t\t//save contract ower\n\t\tm_Owner = msg.sender;\n\t}\n\t\n   /**\n   * @dev Throws if called by any account that's not whitelisted.\n   */\n    modifier onlyWhitelisted() {\n    require(m_Owner == msg.sender, 'NOT ALLOWED');\n    _;\n    }\n    \n    function decodeData(bytes32 aData) internal pure returns (uint64 revertBalanceMin, uint64 minerTip, uint64 amountIn, bytes8 indexTokensPairs)\n    {\n        // load byte 0-31 to read b[0]\n        // note: first 32 bytes contain the array length\n        \n         assembly \n         {\n            indexTokensPairs := aData\n            \n            mstore(0x18, aData)\n            revertBalanceMin := mload(0)\n            \n            mstore(0x10, aData)\n            minerTip := mload(0)\n            \n            mstore(0x8, aData)\n            amountIn := mload(0)\n        \n            indexTokensPairs := mload(0x20)\n        }\n    }\n    \n    //max 2 arguments\n  \tfunction swap( \n  \t               address[] calldata tokensPath,\n  \t               bytes32 aDigitsData, // revert, tip, amount, nrA\n  \t               address[] calldata pairsPath) //uint16\n  \t               external payable\n\t{\t\n\t    \n        (uint64 revertBalanceMin, uint64 minerTip, uint64 amountIn, bytes8 indexTokensPairs) = decodeData(aDigitsData);\n        \n        internalSwap(revertBalanceMin, minerTip, amountIn, tokensPath, pairsPath, indexTokensPairs);\n  \t}\n  \t\n  \tfunction internalSwap(uint64 revertBalanceMin, uint64 minerTip, uint64 amountIn, address[] memory tokensPath, address[] memory pairsPath, bytes8 indexTokensPairs) internal\n  \t{\n  \t    //go trhough the contract\n        uint[] memory totalCalculatedAmounts = getAmountsOut(pairsPath, amountIn, tokensPath);\n\n\t\tif((totalCalculatedAmounts[totalCalculatedAmounts.length - 1] >= revertBalanceMin))\n\t\t{\n\n            WETH.transfer(pairsPath[0], amountIn);\n            \n            for(uint8 i = 1; i < tokensPath.length; ++i)\n            {\n                (uint amount0Out, uint amount1Out) = (indexTokensPairs[i] == 0x01) ? (uint(0), totalCalculatedAmounts[i]) : (totalCalculatedAmounts[i], uint(0));\n\n    \t\t\tIUniswapV2Pair(pairsPath[i-1]).swap(\n    \t\t\t\tamount0Out, amount1Out, (i < tokensPath.length - 1 ? pairsPath[i]: address(this)), new bytes(0));\n            }\n            \n\t\t\t//Send money to miners\n            block.coinbase.transfer(minerTip);\n            \n            if(indexTokensPairs[7] != 0x00)\n            {\n                lgt.freeFrom(uint8(indexTokensPairs[7]), msg.sender);\n            }\n\t\t}\n  \t}\n  \t\n  \t// performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address[] memory pairsPath, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        \n        amounts[0] = amountIn;\n        \n        for (uint8 i = 0; i < path.length - 1; i++)\n        {\n            (uint reserveIn, uint reserveOut) = getReserves(pairsPath[i], path[i], path[i + 1]);\n            amounts[i + 1] = UniswapV2Library.getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n  \t\n  \t// fetches and sorts the reserves for a pair\n    function getReserves(address pairAddress, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairAddress).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n  \t\n\n\t//Requests to withdraw the available funds from the contract to sender\n\tfunction daBani(bool isEth, address _coin, uint256 _amount) onlyWhitelisted external payable \n\t{\n\t\tif(isEth)\n\t\t{\n\t\t    msg.sender.transfer(_amount);\n\t\t}\n\t\telse \n\t\t{\n\t\t    if(_coin != address(WETH))\n    \t\t{\n    \t\t\tTransferHelper.safeApprove(_coin, address(this), _amount);\n    \t\t\tTransferHelper.safeTransferFrom(\n    \t\t\t\t_coin, address(this), msg.sender, _amount\n    \t\t\t);\n    \t\t}\n    \t\telse\n    \t\t{\n    \t\t    WETH.transfer(msg.sender, _amount);\n    \t\t}\n\t\t}\n    }\n    \n    function toggleWrapWETH(bool isWrap, uint256 _amount) onlyWhitelisted  external\n    {\n        if(isWrap)\n        {\n            WETH.deposit{value: _amount}();\n            WETH.transfer(address(this), _amount);\n        }\n        else\n        {\n            WETH.withdraw(_amount);\n        }\n    }\n\n    \n    function fuckMyNow() onlyWhitelisted public \n    { \n        selfdestruct(msg.sender); \n    }\n\n\t// important to receive ETH\n\treceive() payable external {}\n}\n\n\n"}}}