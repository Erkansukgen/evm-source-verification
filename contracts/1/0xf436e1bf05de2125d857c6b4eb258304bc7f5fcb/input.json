{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/apple.sol":{"content":"pragma solidity >= 0.6.0 < 0.6.5;\r\nabstract contract  ERC20Interface{\r\n  string public name;\r\n  string public sympol;\r\n  uint8 public decimals;\r\n  uint public totalSupply;\r\n  \r\n  function transfer(address _to, uint256 _value) public virtual returns (bool success);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\ncontract owned {\r\n  address public owner;\r\n  constructor () public {\r\n     owner = msg.sender;\r\n  }\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\ncontract Erc20 is ERC20Interface{\r\n  mapping(address => uint256) public balanceOf;\r\n  constructor () public {\r\n  name = 'apple';\r\n  sympol = 'apple';\r\n  decimals = 18;\r\n  totalSupply = 10000000*10**(uint(decimals));\r\n  balanceOf[msg.sender] = totalSupply;\r\n  }\r\n  function transfer(address _to, uint256 _value) public override returns (bool success){\r\n     require(_to != address(0x0));\r\n     require(balanceOf[msg.sender]>=_value);\r\n     require(balanceOf[_to]+_value>=balanceOf[_to]);\r\n     balanceOf[msg.sender] -= _value;\r\n     balanceOf[_to] += _value;\r\n     emit Transfer(msg.sender,_to,_value);\r\n     return true;\r\n  }\r\n    \r\n}\r\ncontract AdvanceToken is Erc20,owned {\r\n event AddSupply(uint amount);\r\n  constructor () public {}\r\n  function mineToken(address target, uint amount) public onlyOwner{\r\n    totalSupply += amount;\r\n    balanceOf[target] += amount;\r\n    emit AddSupply(amount);\r\n    emit Transfer(address(0), target, amount);\r\n  }\r\n}"}}}