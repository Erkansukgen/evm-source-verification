{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "gist-314004e0d4de055bd488390866f8ac4a/TokenVesting.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title Select Token Vesting smart contract\n * @author Michal Wojcik\n * @notice Contract for distribute bought SELECT tokens\n * @dev WARNING!\n *      Released Tokens - all tokens allowed to CLAIM.\n *      Claimed tokens - all tokens already transferred to address account from vesting contract.\n*/\ncontract TokenVesting is Ownable {\n    using SafeMath for uint256;\n\n    uint256 private constant RELEASE_TIMEFRAME = 604_800; // 1 week\n    uint256 private constant SINGLE_RELEASE_PERCENTAGE = 3;\n    uint256 private constant INITIAL_PERCENTAGE = 10;\n    uint256 private _vestingStartTime;\n    IERC20  private _erc20Token;\n\n    event TokensClaimed(address recipient, uint256 claimedAmount, bool isInitialClaim);\n\n    /**\n     * @notice Struct defining vesting user input data\n     * @param userAddress - vesting user address\n     * @param salesStagesBalance - all bought and earned user tokens during pre listing period (WEI)\n     */\n    struct VestingUserInput {\n        address userAddress;\n        uint256 salesStagesBalance;\n    }\n\n    /**\n     * @notice Struct defining vesting user state\n     * @param userAddress - vesting user address\n     * @param salesStagesBalance - all bought and earned user tokens during pre listing period (WEI)\n     * @param claimedTokens - already claimed tokens (WEI)\n     */\n    struct VestingUser {\n        address userAddress;\n        uint256 salesStagesBalance;\n        uint256 claimedTokens;\n    }\n\n    mapping(address => VestingUser) private _vestingUsers;\n\n    /**\n     * @notice Initialization of contract\n     * @param erc20TokenAddress - address of ERC-20 token contract\n     * @param vestingStartTime - timestamp first day of vesting\n     * @param vestingUsers - list of users who bought the tokens\n     */\n    constructor(address erc20TokenAddress, uint256 vestingStartTime, VestingUserInput[] memory vestingUsers) {\n        _erc20Token = IERC20(erc20TokenAddress);\n        _vestingStartTime = vestingStartTime;\n\n\n        for (uint256 i = 0; i < vestingUsers.length; i++) {\n            VestingUserInput memory vestingUser = vestingUsers[i];\n            _vestingUsers[vestingUser.userAddress] = VestingUser(vestingUser.userAddress, vestingUser.salesStagesBalance, 0);\n        }\n    }\n\n    /**\n     * @notice Update vesting users - for fixing porpoises\n     * @param vestingUsers - list of users who bought the tokens\n     * @dev Warning! If you pass existing user his values can be reset.\n     */\n    function updateVestingUsers(VestingUserInput[] memory vestingUsers) external onlyOwner() {\n        for (uint256 i = 0; i < vestingUsers.length; i++) {\n            VestingUserInput memory vestingUser = vestingUsers[i];\n            _vestingUsers[vestingUser.userAddress] = VestingUser(vestingUser.userAddress, vestingUser.salesStagesBalance, 0);\n        }\n    }\n\n    /**\n     * @notice Transfer released ERC-20 tokens to caller's address.\n     * @dev Emits {TokensClaimed} event on success\n     */\n    function claimTokens() external {\n        VestingUser memory vestingUserSummary = _vestingUsers[msg.sender];\n        uint256 timeNow = block.timestamp;\n        uint256 vestingStartTime = _vestingStartTime;\n        bool isInitialClaim = _getTimeframesCount(timeNow, vestingStartTime) == 0;\n\n        require(timeNow > vestingStartTime, \"Vesting not started yet.\");\n\n        require(vestingUserSummary.salesStagesBalance > 0, \"You don't have any tokens.\");\n\n        uint256 tokensToClaim = _getReleasedTokensAmount(timeNow, vestingStartTime, vestingUserSummary.salesStagesBalance)\n        .sub(vestingUserSummary.claimedTokens);\n\n        require(tokensToClaim > 0, \"You don't have tokens to claim.\");\n\n        _vestingUsers[msg.sender].claimedTokens += tokensToClaim;\n\n        require(_erc20Token.transfer(msg.sender, tokensToClaim), \"ERC20Token: Transfer failed\");\n\n        emit TokensClaimed(msg.sender, tokensToClaim, isInitialClaim);\n    }\n\n    /**\n     * @notice Returns information about current account vesting state\n     * @return releasedTokens - sum of all tokens allowed to be released (already claimed founds included)\n     * @return salesStageBalance - all bought and earned tokens during sale stages\n     * @return claimedTokensAmount - already withdrawn amount of tokens\n     * @dev To get actual tokensToClaim you need to do operation: {tokensToRelease} - {withdrawnTokensAmount}\n     */\n    function getAddressVestingInfo() external view returns (uint256 releasedTokens, uint256 salesStageBalance, uint256 claimedTokensAmount, uint256 filledTimeframesCount) {\n        VestingUser memory vestingUserSummary = _vestingUsers[msg.sender];\n        uint256 timeNow = block.timestamp;\n        uint256 vestingStartTime = _vestingStartTime;\n\n        filledTimeframesCount = _getTimeframesCount(timeNow, vestingStartTime);\n        releasedTokens = _getReleasedTokensAmount(block.timestamp, _vestingStartTime, vestingUserSummary.salesStagesBalance);\n        salesStageBalance = vestingUserSummary.salesStagesBalance;\n        claimedTokensAmount = vestingUserSummary.claimedTokens;\n    }\n\n    /**\n     * @notice Returns amount of released tokens for given account address\n     * @param timeNow - actual timestamp\n     * @param vestingStartTime - timestamp when vesting program starts\n     * @param accountBalance - sum of all bought and earned tokens during sale stages\n     */\n    function _getReleasedTokensAmount(uint256 timeNow, uint256 vestingStartTime, uint256 accountBalance) private pure returns (uint256) {\n\n        if (timeNow < vestingStartTime) {\n            return 0;\n        }\n\n        uint256 timeframesCount = _getTimeframesCount(timeNow, vestingStartTime);\n        uint256 numberOfPercentToRelease = timeframesCount.mul(SINGLE_RELEASE_PERCENTAGE).add(INITIAL_PERCENTAGE);\n\n        return (accountBalance * numberOfPercentToRelease) / 100;\n    }\n\n    /**\n     * @notice Returns amount of timeframes from vesting program start till now\n     * @param timeNow - actual timestamp\n     * @param vestingStartTime - timestamp when vesting program starts\n     */\n    function _getTimeframesCount(uint256 timeNow, uint256 vestingStartTime) private pure returns (uint256) {\n\n        if (timeNow < vestingStartTime) {\n            return 0;\n        }\n\n        uint256 maxTimeframes = (100 - INITIAL_PERCENTAGE) / SINGLE_RELEASE_PERCENTAGE;\n\n        uint256 timeframesCount = (timeNow.sub(vestingStartTime)) / RELEASE_TIMEFRAME;\n\n        return (timeframesCount <= maxTimeframes) ? timeframesCount : maxTimeframes;\n    }\n}"
    }
  }
}