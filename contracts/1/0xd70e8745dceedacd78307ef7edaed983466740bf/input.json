{"language":"Solidity","settings":{"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","devdoc","userdoc","metadata","abi"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/utils/Whitelisted.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @dev Interface describing the required method for a whitelistable project\ninterface IWhitelistable {\n\n    /// @dev Returns the number of tokens in the owner's account.\n    function balanceOf(address owner) external view returns (uint256 balance);\n}\n\n/// @title Contract for Whitelisting 100% on-chain projects\n/// @dev Since this contract is public, other projects may wish to rely on this list\ncontract Whitelisted is Ownable {\n\n    /// Holds the list of IWhitelistable (e.g. ERC-721) projects in which ownership affords whitelisting\n    IWhitelistable[] private _approvedProjects;\n\n    /// Deploys a new Whitelisted contract with approved projects\n    /// @param projects The list of contracts to add to the approved list\n    constructor(address[] memory projects) {\n        for (uint256 index = 0; index < projects.length; index++) {\n            _approvedProjects.push(IWhitelistable(projects[index]));\n        }\n    }\n\n    /// Adds additional projects to the approved list\n    /// @dev Providing valid contract address that implement `balanceOf()` is the responsibility of the caller\n    /// @param projects The list of contracts to add to the approved list\n    function addApprovedProjects(address[] calldata projects) external onlyOwner {\n        for (uint256 index = 0; index < projects.length; index++) {\n            _approvedProjects.push(IWhitelistable(projects[index]));\n        }\n    }\n\n    /// Returns the approved projects whitelisted by this contract\n    function getApprovedProjects() external view returns (IWhitelistable[] memory) {\n        return _approvedProjects;\n    }\n\n    /// Removes an approved project whitelisted by this contract\n    /// @param project The address to remove from the list\n    function removeApprovedProject(address project) external onlyOwner {\n        uint256 length = _approvedProjects.length;\n        for (uint256 index = 0; index < length; index++) {\n            if (address(_approvedProjects[index]) == project) {\n                if (index < length-1) {\n                    _approvedProjects[index] = _approvedProjects[length-1];\n                }\n                _approvedProjects.pop();\n                return;\n            }\n        }\n    }\n\n    /// Returns whether the owning address is eligible for whitelisting due to ownership in one of the approved projects\n    /// @param owner The owning address to check\n    /// @return True if the address at owner owns a token in one of the approved projects\n    function isWhitelisted(address owner) external view returns (bool) {\n        uint256 projects = _approvedProjects.length;\n        for (uint256 index = 0; index < projects; index++) {\n            IWhitelistable project = _approvedProjects[index];\n            if (project.balanceOf(owner) > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}}}