{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/2_Owner.sol":{"content":"\npragma solidity ^0.6.12;\n// SPDX-License-Identifier: UNLICENSED\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    \n    function mint(address to, uint amount) external;\n    \n    function burn( address _account, uint amount) external;\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function geUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    //Locks the contract for owner for the amount of time provided\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = now + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    //Unlocks the contract for owner when _lockTime is exceeds\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n        require(now > _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\ninterface PredictionLala {\n    function depositFor( address _account, uint _amount) external returns (bool);\n    function updateLiquidateLala( address _account, uint _amount) external;\n    function updateLiquidatedBrorrowLala( address _account, uint _amount) external;\n    function viewBorrowAvailable( address _user) external view returns ( uint);\n}\n\ncontract BorrowLala is Ownable {\n    using SafeMath for uint;\n    \n    // Event logs\n    event Borrow( address indexed _vault, address indexed _token, uint _collateral, uint _borrowed, uint indexed _borrowID, uint _borrowTime);\n    event Payback( address indexed _vault, address indexed _token, uint indexed _borrowID, uint _paybackToken, uint _collateral, uint _borrowTime);\n    \n    IERC20 public lala;\n    PredictionLala public PredictionCon;\n    \n    struct token {\n        uint _tokenPrice;\n        uint _decimals;\n        bool _isActive;\n    }\n    \n    struct Vault {\n        uint _borrowed;\n        mapping(address => borrows)  _borrow;\n    }\n    \n    struct borrows {\n        uint borrowID;\n        uint pastBorrowID;\n        uint pastBorrows;\n        uint pastLalaBorrows;\n        uint recentBorrows;\n        mapping(uint => borrowListStruct) listOfBorrows;\n    }\n    \n    struct borrowListStruct{\n        uint borrows;\n        uint lalaBorrows;\n        uint pastBorrowTime;\n        bool isExpired;\n    }\n    \n    mapping(address => token) public getToken;\n    mapping(address => Vault) public vault;\n    \n    address public predictionContract;\n    address[] public tokenList;\n    \n    address liquidateWallet;\n    address public _dead = 0x000000000000000000000000000000000000dEaD;\n    \n    uint public estimatedLoop = 10; \n    uint public borrowTimeStamp = 7 days;\n    \n    constructor(PredictionLala _predictionContract, address _liquidateWallet) public {\n        PredictionCon = _predictionContract;\n        liquidateWallet = _liquidateWallet;\n    }\n    \n    function setlala(IERC20 _lala) public onlyOwner { lala = _lala; }\n    \n    function updateLoopEstimation( uint _esLp) public onlyOwner { estimatedLoop = _esLp; }\n    \n    function updateBorrowTimeStamp( uint _borrowTimeStamp) public onlyOwner { borrowTimeStamp = _borrowTimeStamp; }\n    \n    function updatePrediction( PredictionLala _predict) public onlyOwner { PredictionCon = _predict; }\n    \n    function addToken( address _token, uint _decimal, uint _price) public onlyOwner {\n        require(_price > 0, \"lendingAndBorrow :: addToken : Price must be greater than zero\");\n        require(!getToken[_token]._isActive, \"lendingAndBorrow :: addToken : Token already activated\");\n        require((_decimal >= 0) && (_decimal <= 18), \"lendingAndBorrow :: addToken : decimals must be inbetween 0 to 18\");\n        \n        getToken[_token] = token(_price,(10**(_decimal)),true);\n        tokenList.push(_token);\n    }\n    \n    function updateTokenPrice(address _token, uint _price) public onlyOwner {\n        require(_price > 0, \"lendingAndBorrow :: updateCollateralPrice : Price must be greater than zero\");\n        require(getToken[_token]._isActive, \"lendingAndBupdateCollateralPriceorrow :: updateCollateralPrice : Token is not activated\");\n        \n        getToken[_token]._tokenPrice = _price;\n    }\n    \n    function borrow( address _token, uint _value, uint _leverage, bool _withUpdate) public payable {\n        require(getToken[_token]._isActive, \"lendingAndBorrow :: borrow : Token is not activated\");\n        require(_leverage <= 125, \"lendingAndBorrow :: borrow : leverage must be between 1 to 125\");\n        \n        if(_token == address(0)) { require((msg.value > 0) && (msg.value == _value), \"lendingAndBorrow :: borrow : value must be equal to msg.value and msg.value must be greater than zero\"); }\n        else{\n            require(IERC20(_token).balanceOf(msg.sender) > _value, \"lendingAndBorrow :: borrow : insufficient balance\");\n            require(IERC20(_token).allowance(msg.sender, address(this)) >= _value, \"lendingAndBorrow :: borrow : insufficient allowance\");\n            require(IERC20(_token).transferFrom(msg.sender, address(this), _value), \"lendingAndBorrow :: borrow : transferFrom failed\");\n        }\n        \n        uint _borrow = cumulativePrice(_token, _value);\n        _borrow = _borrow.add(cumulativePrice(_token, _value.mul(30).div(100))); // 30% more on investment\n        \n        if(_leverage >= 1)\n            _borrow = _borrow.add(_borrow.mul(_leverage).div(100));\n        \n        lala.mint( address(PredictionCon), _borrow);\n        PredictionCon.depositFor( msg.sender, _borrow);\n        \n        vault[msg.sender]._borrowed = vault[msg.sender]._borrowed.add(_borrow);\n        \n        if(_withUpdate) { updateTokenVaults( msg.sender,_token); }// With update. \n        \n        vault[msg.sender]._borrow[_token].borrowID++;\n        \n        uint _collateralFee = _value.div(100);\n        \n        vault[msg.sender]._borrow[_token].listOfBorrows[vault[msg.sender]._borrow[_token].borrowID] = borrowListStruct(_value.sub(_collateralFee), _borrow, block.timestamp, false);\n        vault[msg.sender]._borrow[_token].recentBorrows = vault[msg.sender]._borrow[_token].recentBorrows.add(_value.sub(_collateralFee));\n        \n        if(_token == address(0)) require(payable(liquidateWallet).send(_collateralFee), \"borrow: _collateralFee transfer failed\");\n        else\n            IERC20(_token).transfer(liquidateWallet,_collateralFee);\n        \n        emit Borrow( msg.sender, _token, _value, _borrow, vault[msg.sender]._borrow[_token].borrowID, block.timestamp);\n    }\n    \n    function payBack( address _token, address _account, uint _borrowID, uint _amount) external {\n        require(vault[_account]._borrow[_token].borrowID >= _borrowID);\n        require(!vault[_account]._borrow[_token].listOfBorrows[_borrowID].isExpired, \"lendingAndBorrow :: payBack : payback period ends\");\n        \n        updateTokenVaults( _account,_token);\n        \n        require(vault[_account]._borrow[_token].recentBorrows > 0, \"lendingAndBorrow :: payBack : There is no recent borrows to payback\");\n        require(_amount == vault[_account]._borrow[_token].listOfBorrows[_borrowID].lalaBorrows, \"lendingAndBorrow :: payBack : payBack amount doesnot match\");\n        \n        if(vault[_account]._borrow[_token].listOfBorrows[_borrowID].pastBorrowTime.add(borrowTimeStamp) > block.timestamp) {\n        \n            lala.transferFrom(msg.sender, _dead, _amount);\n            \n            uint _amountOut = vault[_account]._borrow[_token].listOfBorrows[_borrowID].borrows;\n             uint _deduction;\n             \n            if(_amountOut > 0){\n                _deduction = _amountOut.mul(3).div(100);\n                if(_token == address(0)){\n                    require(payable(_account).send(_amountOut.sub(_deduction)), \"lendingAndBorrow :: payBack : value send failed\");\n                    require(payable(liquidateWallet).send(_deduction), \"lendingAndBorrow :: payBack : payback commission value send failed\");\n                }\n                else{\n                    require(IERC20(_token).transfer(_account,_amountOut.sub(_deduction)), \"lendingAndBorrow :: payBack : Token transfer failed\");\n                    require(IERC20(_token).transfer(liquidateWallet,_deduction), \"lendingAndBorrow :: payBack : payback commission Token transfer failed\");\n                }\n                \n                vault[_account]._borrow[_token].recentBorrows = vault[_account]._borrow[_token].recentBorrows.sub(_amountOut);\n                vault[_account]._borrow[_token].listOfBorrows[_borrowID].isExpired = true;\n            }\n            else{\n                revert(\"lendingAndBorrow :: payBack : collateral returns zero\");\n            }\n            \n            emit Payback( _account, _token, _borrowID, _amount, _amountOut.sub(_deduction), block.timestamp);\n        }\n    }\n    \n    function updateTokenVaults(address _vault, address _token) public returns (bool) {\n        if((vault[_vault]._borrow[_token].borrowID > 0) && (vault[_vault]._borrow[_token].pastBorrowID < vault[_vault]._borrow[_token].borrowID)){\n            uint _workUntill = vault[_vault]._borrow[_token].borrowID;\n            uint _start = vault[_vault]._borrow[_token].pastBorrowID;\n            if(vault[_vault]._borrow[_token].borrowID.sub(vault[_vault]._borrow[_token].pastBorrowID) > estimatedLoop) _workUntill = vault[_vault]._borrow[_token].pastBorrowID.add(estimatedLoop);\n            \n            _start = (vault[_vault]._borrow[_token].pastBorrowID == 0) ? 1 : vault[_vault]._borrow[_token].pastBorrowID;\n            \n            for(uint i=_start;i <= _workUntill;i++){\n                if((vault[_vault]._borrow[_token].listOfBorrows[i].pastBorrowTime.add(borrowTimeStamp) < block.timestamp) && (vault[_vault]._borrow[_token].listOfBorrows[i].pastBorrowTime != 0)){\n                    if(!vault[_vault]._borrow[_token].listOfBorrows[i].isExpired){\n                        vault[_vault]._borrow[_token].pastLalaBorrows = vault[_vault]._borrow[_token].pastLalaBorrows.add(vault[_vault]._borrow[_token].listOfBorrows[i].lalaBorrows);\n                        vault[_vault]._borrow[_token].recentBorrows = vault[_vault]._borrow[_token].recentBorrows.sub(vault[_vault]._borrow[_token].listOfBorrows[i].borrows);\n                        vault[_vault]._borrow[_token].pastBorrows = vault[_vault]._borrow[_token].pastBorrows.add(vault[_vault]._borrow[_token].listOfBorrows[i].borrows);\n                        vault[_vault]._borrow[_token].listOfBorrows[i].isExpired = true;\n                    }\n                }\n                else break;\n                \n                vault[_vault]._borrow[_token].pastBorrowID++;\n            }\n        }\n        \n        return true;\n    }\n    \n    function liquidateVault( address _vault, address _token) public {\n        if(updateTokenVaults( _vault, _token)){\n            if(vault[_vault]._borrow[_token].pastBorrows > 0){\n                uint _amount = vault[_vault]._borrow[_token].pastBorrows;\n                vault[_vault]._borrow[_token].pastBorrows = 0;\n                liquidate(_token, _amount);\n            }\n        }\n    }\n    \n    function liquidate(address _token, uint _amount) internal returns (bool) {\n        address _contract = address(this);\n        \n        if(_token == address(0)){\n            if(_contract.balance < _amount) { return false; }\n            require(payable(liquidateWallet).send(_amount), \"lendingAndBorrow :: liquidate : value send failed\");\n        }\n        else{\n            if(IERC20(_token).balanceOf(_contract) < _amount) { return false; }\n            require(IERC20(_token).transfer(liquidateWallet,_amount), \"lendingAndBorrow :: liquidate : Token transfer failed\");\n        }\n        \n        return true;\n    }\n    \n    function failsafe( address _token, address _to, uint amount) public onlyOwner returns (bool) {\n        address _contractAdd = address(this);\n        if(_token == address(0)){\n            require(_contractAdd.balance >= amount,\"insufficient ETH\");\n            address(uint160(_to)).transfer(amount);\n        }\n        else{\n            require( IERC20(_token).balanceOf(_contractAdd) >= amount,\"insufficient Token balance\");\n            IERC20(_token).transfer(_to, amount);\n        }\n    }\n    \n    \n    function cumulativePrice( address _token, uint _amountIn) public view returns (uint){\n          return _amountIn.mul(1e18).div(getToken[_token]._tokenPrice);\n    }\n    \n    function cumulativePaybackPrice( address _token, uint _amountIn) public view returns (uint){\n          uint _price = _amountIn.mul(1e12).mul(getToken[_token]._tokenPrice).div(1e18);\n          return _price.div(1e12);\n    }\n    \n    function getUserCurrentBorrowID( address _vault, address _token) public view returns (uint) {\n        return vault[_vault]._borrow[_token].borrowID;\n    }\n    \n    function getBorrowDetails( address _vault, address _token, uint _borrowID) public view returns ( uint pastBorrowID, uint pastBorrows, uint recentBorrows, uint borrowed, uint pastBorrowTime, bool _isexpired) {\n        (pastBorrowID, pastBorrows, recentBorrows, borrowed, pastBorrowTime, _isexpired) = (\n            vault[_vault]._borrow[_token].pastBorrowID,\n            vault[_vault]._borrow[_token].pastBorrows,\n            vault[_vault]._borrow[_token].recentBorrows,\n            vault[_vault]._borrow[_token].listOfBorrows[_borrowID].borrows,\n            vault[_vault]._borrow[_token].listOfBorrows[_borrowID].pastBorrowTime,\n            vault[_vault]._borrow[_token].listOfBorrows[_borrowID].isExpired);\n    }\n    \n    function getBorrowedLalaByID( address _vault, address _token, uint _borrowID) public view returns (uint _borrowedLala) {\n        return vault[_vault]._borrow[_token].listOfBorrows[_borrowID].lalaBorrows;\n    }\n    \n    function getBorrowedCurrentID( address _vault, address _token) public view returns (uint _borrowedID) {\n        return vault[_vault]._borrow[_token].borrowID;\n    }\n}"}}}