{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "privateSale.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n}\r\n\r\ncontract privateSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address[] public participants; \r\n    address public tokenContract; \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint256) public withdrawCounter;\r\n\r\n    bool sendingAllowed = true;\r\n    bool claimingAllowed = false;\r\n\r\n    uint256 public hcCounter = 0; \r\n\r\n    uint256 public tokensPerBNB = 100 * (10 ** 18); \r\n\r\n\r\n    receive() external payable {\r\n        require(sendingAllowed);\r\n        require(msg.value <= 0.3 ether && msg.value >= 0.1 ether, \"Min Contr. is 0.1 ETH, Max Contr. is 0.3 Eth\");\r\n        require(balances[msg.sender] <= 0, \"You already contributed\");\r\n        require(address(this).balance + msg.value <= 40 ether, \"The Hardcap is filled\"); \r\n        balances[msg.sender] = msg.value;\r\n        participants.push(msg.sender);\r\n        hcCounter += 1; \r\n    }\r\n\r\n    function updateTokensPerETH(uint256 _tokensPerBNB) public onlyOwner {\r\n        tokensPerBNB = _tokensPerBNB.mul(1e18); \r\n    }\r\n\r\n    function updateTokenContract (address _tokenContract) public onlyOwner {\r\n        tokenContract = _tokenContract;\r\n    }\r\n\r\n    function startClaiming() external {\r\n        require(msg.sender == tokenContract, \"Sender is not the Token Address\");\r\n        claimingAllowed = true; \r\n        \r\n    }\r\n\r\n    function startClaimingManually() public onlyOwner {\r\n        claimingAllowed = true; \r\n    }\r\n\r\n\r\n    function transferERC20(address _receiver, uint256 _amount) internal {\r\n        IERC20(tokenContract).transfer(_receiver, _amount); \r\n    }\r\n\r\n    function getTokenBalance() public view onlyOwner returns(uint256) {\r\n        return IERC20(tokenContract).balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawETH(address _recipient) public onlyOwner {\r\n        payable(_recipient).transfer(address(this).balance); \r\n    }\r\n\r\n    function withdrawERC20(address _tokenCA, address _recipient, uint256 _amount) public onlyOwner {\r\n        IERC20(_tokenCA).transfer(_recipient, _amount);\r\n    }\r\n\r\n    function withdrawTokens() public {\r\n        require(claimingAllowed, \"Whithdrawing is not allowed, yet\");\r\n        require(balances[msg.sender]>0, \"You did not participate in the private sale\");\r\n        require(withdrawCounter[msg.sender]<1, \"You already withdrew all your tokens\");\r\n        \r\n        uint256 transferAmount = tokensPerBNB.mul(balances[msg.sender]).div(1e18);\r\n        transferERC20(msg.sender, transferAmount);\r\n        withdrawCounter[msg.sender] +=1;\r\n        balances[msg.sender] = 0;\r\n        \r\n        }\r\n\r\n    function removeFromParticipants(address _address) public onlyOwner {\r\n        balances[_address] = 0;\r\n        hcCounter -= 1; \r\n    }\r\n\r\n    function updateSendingAllowed (bool _bool) public onlyOwner {\r\n        sendingAllowed = _bool;\r\n    }\r\n\r\n}"
    }
  }
}