{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/game changer.sol":{"content":"\r\npragma solidity 0.5.11;\r\n\r\ncontract gamechanger {\r\n    address public ownerWallet;\r\n    struct Variables {\r\n        uint currUserID          ;\r\n        uint pool1currUserID     ;\r\n        uint pool2currUserID     ;\r\n        uint pool3currUserID     ;\r\n        uint pool4currUserID     ;\r\n        uint pool5currUserID     ;\r\n        uint pool6currUserID     ;\r\n        uint pool7currUserID     ;\r\n    }\r\n    struct Variables2 {\r\n        uint pool1activeUserID   ;\r\n        uint pool2activeUserID   ;\r\n        uint pool3activeUserID   ;\r\n        uint pool4activeUserID   ;\r\n        uint pool5activeUserID   ;\r\n        uint pool6activeUserID   ;\r\n        uint pool7activeUserID   ;\r\n    }\r\n    Variables public vars;\r\n    Variables2 public vars2;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint referredUsers;\r\n        \r\n    }\r\n    \r\n    struct PoolUserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint payment_received; \r\n        uint autojoinCount;\r\n    }\r\n    \r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    \r\n    mapping (address => PoolUserStruct) public pool1users;\r\n    mapping (uint => address) public pool1userList;\r\n    \r\n    mapping (address => PoolUserStruct) public pool2users;\r\n    mapping (uint => address) public pool2userList;\r\n    \r\n    mapping (address => PoolUserStruct) public pool3users;\r\n    mapping (uint => address) public pool3userList;\r\n    \r\n    mapping (address => PoolUserStruct) public pool4users;\r\n    mapping (uint => address) public pool4userList;\r\n    \r\n    mapping (address => PoolUserStruct) public pool5users;\r\n    mapping (uint => address) public pool5userList;\r\n    \r\n    mapping (address => PoolUserStruct) public pool6users;\r\n    mapping (uint => address) public pool6userList;\r\n    \r\n    mapping (address => PoolUserStruct) public pool7users;\r\n    mapping (uint => address) public pool7userList;\r\n    \r\n     \r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    \r\n    uint public unlimited_level_price   = 0;\r\n    \r\n    uint REGESTRATION_FESS      =   0.10    ether;\r\n    \r\n    uint pool1_price            =   0.10    ether;\r\n    uint pool2_price            =   0.20    ether;\r\n    uint pool3_price            =   0.50    ether;\r\n    uint pool4_price            =   1.00    ether;\r\n    uint pool5_price            =   2.00    ether;\r\n    uint pool6_price            =   5.00    ether;\r\n    uint pool7_price            =   10.00    ether;\r\n\r\n   \r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral,uint _poolNumber, uint _level, uint _time);\r\n    event regPoolEntry(address indexed _user,uint _level,   uint _time);\r\n    event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);\r\n    event getMoneyForPoolEvent(address indexed _user, address indexed _referral,uint _level, uint _time);\r\n    \r\n    UserStruct[] public requests;\r\n    uint public totalEarned = 0;\r\n     \r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n\r\n        LEVEL_PRICE[1] = 0.01 ether;   \r\n        LEVEL_PRICE[2] = 0.005 ether; \r\n\r\n        UserStruct memory userStruct;\r\n        vars.currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: vars.currUserID,\r\n            referrerID: 0,\r\n            referredUsers:0\r\n        });\r\n        \r\n        users[ownerWallet] = userStruct;\r\n        userList[vars.currUserID] = ownerWallet;\r\n       \r\n       \r\n        PoolUserStruct memory pooluserStruct;\r\n        \r\n        vars.pool1currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:vars.pool1currUserID,\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n        vars2.pool1activeUserID=vars.pool1currUserID;\r\n        pool1users[msg.sender] = pooluserStruct;\r\n        pool1userList[vars.pool1currUserID]=msg.sender;\r\n\r\n        vars.pool2currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:vars.pool2currUserID,\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n        vars2.pool2activeUserID=vars.pool2currUserID;\r\n        pool2users[msg.sender] = pooluserStruct;\r\n        pool2userList[vars.pool2currUserID]=msg.sender;\r\n       \r\n        vars.pool3currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:vars.pool3currUserID,\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n        vars2.pool3activeUserID=vars.pool3currUserID;\r\n        pool3users[msg.sender] = pooluserStruct;\r\n        pool3userList[vars.pool3currUserID]=msg.sender;\r\n       \r\n        vars.pool4currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:vars.pool4currUserID,\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n        vars2.pool4activeUserID=vars.pool4currUserID;\r\n        pool4users[msg.sender] = pooluserStruct;\r\n        pool4userList[vars.pool4currUserID]=msg.sender;\r\n\r\n        vars.pool5currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:vars.pool5currUserID,\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n        vars2.pool5activeUserID=vars.pool5currUserID;\r\n        pool5users[msg.sender] = pooluserStruct;\r\n        pool5userList[vars.pool5currUserID]=msg.sender;\r\n\r\n        vars.pool6currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:vars.pool6currUserID,\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n        vars2.pool6activeUserID=vars.pool6currUserID;\r\n        pool6users[msg.sender] = pooluserStruct;\r\n        pool6userList[vars.pool6currUserID]=msg.sender;\r\n       \r\n        vars.pool7currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:vars.pool7currUserID,\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n        vars2.pool7activeUserID=vars.pool7currUserID;\r\n        pool7users[msg.sender] = pooluserStruct;\r\n        pool7userList[vars.pool7currUserID]=msg.sender;\r\n       \r\n       \r\n       \r\n    }\r\n     \r\n    function regUser(uint _referrerID) public payable {\r\n       \r\n        require(!users[msg.sender].isExist, \"User Exists\");\r\n        require(_referrerID > 0 && _referrerID <= vars.currUserID, 'Incorrect referral ID');\r\n        require(msg.value == REGESTRATION_FESS, 'Incorrect Value');\r\n       \r\n        UserStruct memory userStruct;\r\n        vars.currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: vars.currUserID,\r\n            referrerID: _referrerID,\r\n            referredUsers:0\r\n        });\r\n   \r\n        users[msg.sender] = userStruct;\r\n        userList[vars.currUserID]=msg.sender;\r\n       \r\n        users[userList[users[msg.sender].referrerID]].referredUsers=users[userList[users[msg.sender].referrerID]].referredUsers+1;\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n\r\n        //Register pool 1 and pay the rest to active user\r\n        buyPool1();\r\n        \r\n    }\r\n    function buyPool1() internal {\r\n        bool isinpool = isInPool(1,msg.sender);\r\n        require(!isinpool, \"Already in AutoPool\");\r\n\r\n        PoolUserStruct memory userStruct;\r\n        address poolCurrentActiveuser=getPoolCurrentActiveUser(1);\r\n        increasePoolCurrentUserID(1);\r\n        \r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:getPoolCurrentUserID(1),\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n\r\n        assignPoolUser(1,msg.sender,userStruct.id,userStruct);\r\n        \r\n        uint pool_price = getPoolPrice(1);\r\n        \r\n        //direct fee for referer (10%)\r\n        uint fee_direct = (pool_price * 10) / 100;\r\n        //level 2 fee for referer (5%)\r\n        uint fee_level2 = (pool_price * 5) / 100;\r\n        address referer;\r\n        address referer_l2 = address(0);\r\n        uint poolshare = pool_price - fee_direct;\r\n         \r\n        referer = userList[users[msg.sender].referrerID];\r\n        \r\n        if (users[referer].referrerID >= 1){\r\n            referer_l2 = userList[users[referer].referrerID];\r\n            poolshare -= fee_level2;\r\n        }\r\n        \r\n        if (address(uint160(referer)).send(fee_direct)){\r\n            emit getMoneyForLevelEvent(referer, msg.sender,1, 1, now);\r\n            if (referer_l2 != address(0)){\r\n                \r\n                if (!address(uint160(referer_l2)).send(fee_level2))\r\n                    revert();\r\n                else\r\n                    emit getMoneyForLevelEvent(referer_l2, msg.sender,1, 2, now);\r\n            }\r\n            \r\n        }\r\n        else \r\n            revert();\r\n            \r\n        if (address(uint160(poolCurrentActiveuser)).send(poolshare)) {\r\n            totalEarned += poolshare;\r\n            increasePoolPaymentReceive(1,poolCurrentActiveuser);\r\n            uint currentAutoJoinCount = getPoolAutoRejoinCount(1,poolCurrentActiveuser);\r\n            uint PaymentReceived = getPoolPaymentReceive(1,poolCurrentActiveuser);\r\n            \r\n            emit getMoneyForPoolEvent(referer, msg.sender,1, now);\r\n            emit getPoolPayment(msg.sender,poolCurrentActiveuser, 1, now);\r\n            emit regPoolEntry(msg.sender, 1, now);\r\n            \r\n            if ((PaymentReceived>=3 * (currentAutoJoinCount+1))&&(currentAutoJoinCount<10))\r\n            {\r\n                //re-join automatically\r\n               \r\n                increasePoolCurrentUserID(1);\r\n                \r\n                uint poolCurrentUserID = getPoolCurrentUserID(1);\r\n                uint poolActiveID = getPoolActiveUserID(1);\r\n                \r\n                userStruct = PoolUserStruct({\r\n                    isExist:true,\r\n                    id:poolActiveID,\r\n                    payment_received:PaymentReceived,\r\n                    autojoinCount:currentAutoJoinCount+1\r\n                });\r\n                \r\n                assignPoolUser(1,poolCurrentActiveuser,poolCurrentUserID,userStruct);\r\n                \r\n                //\r\n                increasePoolActiveUserID(1);\r\n                emit regPoolEntry(poolCurrentActiveuser, 1, now);\r\n                \r\n            }\r\n\r\n        }\r\n        else\r\n            revert();\r\n    }\r\n    function buyPool(uint poolNumber) public payable{\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n        \r\n        bool check = isInPool(poolNumber,msg.sender);\r\n        require(!check, \"Already in AutoPool\");\r\n        \r\n        require(poolNumber>=2,\"Pool number <2\");\r\n        require(poolNumber<=12,\"Pool number >12\");\r\n        \r\n        check = checkPrice(poolNumber,msg.value);\r\n        require(check,\"Price of Pool is Wrong\");\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address poolCurrentActiveuser=getPoolCurrentActiveUser(poolNumber);\r\n        increasePoolCurrentUserID(poolNumber);\r\n        \r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:getPoolCurrentUserID(poolNumber),\r\n            payment_received:0,\r\n            autojoinCount:0\r\n        });\r\n\r\n        assignPoolUser(poolNumber,msg.sender,userStruct.id,userStruct);\r\n        \r\n        uint pool_price = getPoolPrice(poolNumber);\r\n        \r\n        //direct fee for referer (10%)\r\n        uint fee_direct = (pool_price * 10) / 100;\r\n        //level 2 fee for referer (5%)\r\n        uint fee_level2 = (pool_price * 5) / 100;\r\n        address referer;\r\n        address referer_l2 = address(0);\r\n        uint poolshare = pool_price - fee_direct;\r\n         \r\n        referer = userList[users[msg.sender].referrerID];\r\n        \r\n        if (users[referer].referrerID >= 1){\r\n            referer_l2 = userList[users[referer].referrerID];\r\n            poolshare -= fee_level2;\r\n        }\r\n        \r\n        if (address(uint160(referer)).send(fee_direct)){\r\n            emit getMoneyForLevelEvent(referer, msg.sender,poolNumber, 1, now);\r\n            if (referer_l2 != address(0)){\r\n                \r\n                if (!address(uint160(referer_l2)).send(fee_level2))\r\n                    revert();\r\n                else\r\n                    emit getMoneyForLevelEvent(referer_l2, msg.sender,poolNumber, 2, now);\r\n            }\r\n            \r\n        }\r\n        else \r\n            revert();\r\n            \r\n        if (address(uint160(poolCurrentActiveuser)).send(poolshare)) {\r\n            totalEarned += poolshare;\r\n            increasePoolPaymentReceive(poolNumber,poolCurrentActiveuser);\r\n            uint currentAutoJoinCount = getPoolAutoRejoinCount(poolNumber,poolCurrentActiveuser);\r\n            uint PaymentReceived = getPoolPaymentReceive(poolNumber,poolCurrentActiveuser);\r\n\r\n            emit getMoneyForPoolEvent(referer, msg.sender,poolNumber, now);\r\n            emit getPoolPayment(msg.sender,poolCurrentActiveuser, poolNumber, now);\r\n            emit regPoolEntry(msg.sender, poolNumber, now);\r\n            \r\n            if ((PaymentReceived>=3 * (currentAutoJoinCount+1))&&(currentAutoJoinCount<=10))\r\n            {\r\n                //re-join automatically\r\n               \r\n                increasePoolCurrentUserID(poolNumber);\r\n                \r\n                uint poolCurrentUserID = getPoolCurrentUserID(poolNumber);\r\n                uint poolActiveID = getPoolActiveUserID(poolNumber);\r\n                \r\n                userStruct = PoolUserStruct({\r\n                    isExist:true,\r\n                    id:poolActiveID,\r\n                    payment_received:PaymentReceived,\r\n                    autojoinCount:currentAutoJoinCount+1\r\n                });\r\n                \r\n                assignPoolUser(poolNumber,poolCurrentActiveuser,poolCurrentUserID,userStruct);\r\n                \r\n                //\r\n                increasePoolActiveUserID(poolNumber);\r\n                emit regPoolEntry(poolCurrentActiveuser, poolNumber, now);\r\n                \r\n            }\r\n\r\n        }\r\n        else\r\n            revert();\r\n        \r\n    }\r\n    \r\n    function isInPool(uint _poolNumber,address _PoolMember) internal view returns (bool){\r\n        if (_poolNumber == 1)\r\n            return pool1users[_PoolMember].isExist;\r\n        else if (_poolNumber == 2)\r\n            return pool2users[_PoolMember].isExist;\r\n        else if (_poolNumber == 3)\r\n            return pool3users[_PoolMember].isExist;\r\n        else if (_poolNumber == 4)\r\n            return pool4users[_PoolMember].isExist;\r\n        else if (_poolNumber == 5)\r\n            return pool5users[_PoolMember].isExist;\r\n        else if (_poolNumber == 6)\r\n            return pool6users[_PoolMember].isExist;\r\n        else if (_poolNumber == 7)\r\n            return pool7users[_PoolMember].isExist;\r\n        \r\n        \r\n        return true;\r\n    }\r\n    \r\n    function checkPrice(uint _poolNumber,uint256 Amount) internal view returns (bool){\r\n        bool ret = false;\r\n        \r\n        if ((_poolNumber == 1)&&(Amount ==pool1_price))\r\n            ret = true;\r\n        else if ((_poolNumber == 2)&&(Amount ==pool2_price))\r\n            ret = true;\r\n        else if ((_poolNumber == 3)&&(Amount ==pool3_price))\r\n            ret = true;\r\n        else if ((_poolNumber == 4)&&(Amount ==pool4_price))\r\n            ret = true;\r\n        else if ((_poolNumber == 5)&&(Amount ==pool5_price))\r\n            ret = true;\r\n        else if ((_poolNumber == 6)&&(Amount ==pool6_price))\r\n            ret = true;\r\n        else if ((_poolNumber == 7)&&(Amount ==pool7_price))\r\n            ret = true;\r\n        \r\n            \r\n        return ret;\r\n    }\r\n    \r\n    function getPoolCurrentActiveUser(uint _poolNumber) internal view returns (address){\r\n        if (_poolNumber == 1)\r\n            return pool1userList[vars2.pool1activeUserID];\r\n        else if (_poolNumber == 2)\r\n            return pool2userList[vars2.pool2activeUserID];\r\n        else if (_poolNumber == 3)\r\n            return pool3userList[vars2.pool3activeUserID];\r\n        else if (_poolNumber == 4)\r\n            return pool4userList[vars2.pool4activeUserID];\r\n        else if (_poolNumber == 5)\r\n            return pool5userList[vars2.pool5activeUserID];\r\n        else if (_poolNumber == 6)\r\n            return pool6userList[vars2.pool6activeUserID];\r\n        else if (_poolNumber == 7)\r\n            return pool7userList[vars2.pool7activeUserID];\r\n        \r\n        \r\n        return address(0);\r\n    }\r\n    \r\n    function increasePoolCurrentUserID(uint _poolNumber) internal {\r\n       if (_poolNumber == 1)\r\n            vars.pool1currUserID++;\r\n        else if (_poolNumber == 2)\r\n            vars.pool2currUserID++;\r\n        else if (_poolNumber == 3)\r\n            vars.pool3currUserID++;\r\n        else if (_poolNumber == 4)\r\n            vars.pool4currUserID++;\r\n        else if (_poolNumber == 5)\r\n            vars.pool5currUserID++;\r\n        else if (_poolNumber == 6)\r\n            vars.pool6currUserID++;\r\n        else if (_poolNumber == 7)\r\n            vars.pool7currUserID++;\r\n        \r\n    }\r\n    \r\n    function getPoolCurrentUserID(uint _poolNumber) internal view returns (uint){\r\n        if (_poolNumber == 1)\r\n            return vars.pool1currUserID;\r\n        else if (_poolNumber == 2)\r\n            return vars.pool2currUserID;\r\n        else if (_poolNumber == 3)\r\n            return vars.pool3currUserID;\r\n        else if (_poolNumber == 4)\r\n            return vars.pool4currUserID;\r\n        else if (_poolNumber == 5)\r\n            return vars.pool5currUserID;\r\n        else if (_poolNumber == 6)\r\n            return vars.pool6currUserID;\r\n        else if (_poolNumber == 7)\r\n            return vars.pool7currUserID;\r\n        \r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function assignPoolUser(uint _poolNumber,address newPoolMember,uint poolCurrentUserID,PoolUserStruct memory userStruct) internal {\r\n        if (_poolNumber == 1){\r\n            pool1users[newPoolMember] = userStruct;\r\n            pool1userList[poolCurrentUserID]=newPoolMember;\r\n        }\r\n        else if (_poolNumber == 2){\r\n            pool2users[newPoolMember] = userStruct;\r\n            pool2userList[poolCurrentUserID]=newPoolMember;\r\n        }\r\n        else if (_poolNumber == 3){\r\n            pool3users[newPoolMember] = userStruct;\r\n            pool3userList[poolCurrentUserID]=newPoolMember;\r\n        }\r\n        else if (_poolNumber == 4){\r\n            pool4users[newPoolMember] = userStruct;\r\n            pool4userList[poolCurrentUserID]=newPoolMember;\r\n        }\r\n        else if (_poolNumber == 5){\r\n            pool5users[newPoolMember] = userStruct;\r\n            pool5userList[poolCurrentUserID]=newPoolMember;\r\n        }\r\n        else if (_poolNumber == 6){\r\n            pool6users[newPoolMember] = userStruct;\r\n            pool6userList[poolCurrentUserID]=newPoolMember;\r\n        }\r\n        else if (_poolNumber == 7){\r\n            pool7users[newPoolMember] = userStruct;\r\n            pool7userList[poolCurrentUserID]=newPoolMember;\r\n        }\r\n        \r\n    }\r\n    \r\n    function getPoolPrice(uint _poolNumber) internal view returns (uint){\r\n        if (_poolNumber == 1)\r\n            return pool1_price;\r\n        else if (_poolNumber == 2)\r\n            return pool2_price;\r\n        else if (_poolNumber == 3)\r\n            return pool3_price;\r\n        else if (_poolNumber == 4)\r\n            return pool4_price;\r\n        else if (_poolNumber == 5)\r\n            return pool5_price;\r\n        else if (_poolNumber == 6)\r\n            return pool6_price;\r\n        else if (_poolNumber == 7)\r\n            return pool7_price;\r\n        \r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function increasePoolPaymentReceive(uint _poolNumber, address CurrentUser) internal {\r\n        if (_poolNumber == 1)\r\n            pool1users[CurrentUser].payment_received+=1;\r\n        else if (_poolNumber == 2)\r\n            pool2users[CurrentUser].payment_received+=1;\r\n        else if (_poolNumber == 3)\r\n            pool3users[CurrentUser].payment_received+=1;\r\n        else if (_poolNumber == 4)\r\n            pool4users[CurrentUser].payment_received+=1;\r\n        else if (_poolNumber == 5)\r\n            pool5users[CurrentUser].payment_received+=1;\r\n        else if (_poolNumber == 6)\r\n            pool6users[CurrentUser].payment_received+=1;\r\n        else if (_poolNumber == 7)\r\n            pool7users[CurrentUser].payment_received+=1;\r\n        \r\n    }\r\n    \r\n    function getPoolPaymentReceive(uint _poolNumber, address CurrentUser) internal view returns(uint){\r\n        if (_poolNumber == 1)\r\n            return pool1users[CurrentUser].payment_received;\r\n        else if (_poolNumber == 2)\r\n            return pool2users[CurrentUser].payment_received;\r\n        else if (_poolNumber == 3)\r\n            return pool3users[CurrentUser].payment_received;\r\n        else if (_poolNumber == 4)\r\n            return pool4users[CurrentUser].payment_received;\r\n        else if (_poolNumber == 5)\r\n            return pool5users[CurrentUser].payment_received;\r\n        else if (_poolNumber == 6)\r\n            return pool6users[CurrentUser].payment_received;\r\n        else if (_poolNumber == 7)\r\n            return pool7users[CurrentUser].payment_received;\r\n        \r\n    }\r\n    \r\n    function getPoolAutoRejoinCount(uint _poolNumber, address CurrentUser) internal view returns(uint){\r\n        if (_poolNumber == 1)\r\n            return pool1users[CurrentUser].autojoinCount;\r\n        else if (_poolNumber == 2)\r\n            return pool2users[CurrentUser].autojoinCount;\r\n        else if (_poolNumber == 3)\r\n            return pool3users[CurrentUser].autojoinCount;\r\n        else if (_poolNumber == 4)\r\n            return pool4users[CurrentUser].autojoinCount;\r\n        else if (_poolNumber == 5)\r\n            return pool5users[CurrentUser].autojoinCount;\r\n        else if (_poolNumber == 6)\r\n            return pool6users[CurrentUser].autojoinCount;\r\n        else if (_poolNumber == 7)\r\n            return pool7users[CurrentUser].autojoinCount;\r\n        \r\n    }\r\n    function increasePoolActiveUserID(uint _poolNumber) internal {\r\n        if (_poolNumber == 1)\r\n            vars2.pool1activeUserID+=1;\r\n        else if (_poolNumber == 2)\r\n            vars2.pool2activeUserID+=1;\r\n        else if (_poolNumber == 3)\r\n            vars2.pool3activeUserID+=1;\r\n        else if (_poolNumber == 4)\r\n            vars2.pool4activeUserID+=1;\r\n        else if (_poolNumber == 5)\r\n            vars2.pool5activeUserID+=1;\r\n        else if (_poolNumber == 6)\r\n            vars2.pool6activeUserID+=1;\r\n        else if (_poolNumber == 7)\r\n            vars2.pool7activeUserID+=1;\r\n        \r\n    }\r\n    \r\n    function getPoolActiveUserID(uint _poolNumber) internal view returns (uint){\r\n        if (_poolNumber == 1)\r\n            return vars2.pool1activeUserID;\r\n        else if (_poolNumber == 2)\r\n            return vars2.pool2activeUserID;\r\n        else if (_poolNumber == 3)\r\n            return vars2.pool3activeUserID;\r\n        else if (_poolNumber == 4)\r\n            return vars2.pool4activeUserID;\r\n        else if (_poolNumber == 5)\r\n            return vars2.pool5activeUserID;\r\n        else if (_poolNumber == 6)\r\n            return vars2.pool6activeUserID;\r\n        else if (_poolNumber == 7)\r\n            return vars2.pool7activeUserID;\r\n \r\n        return 0;\r\n    }\r\n    \r\n    function getEthBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n    }\r\n    \r\n    function sendBalance() private\r\n    {\r\n         if (!address(uint160(ownerWallet)).send(getEthBalance()))\r\n         {\r\n             \r\n         }\r\n    }\r\n   \r\n   \r\n}"}}}