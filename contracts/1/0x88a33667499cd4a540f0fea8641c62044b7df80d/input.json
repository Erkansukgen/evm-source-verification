{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/deposit.sol":{"content":"pragma solidity >=0.4.22 <0.8.0;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * This is the deposit contract\r\n */\r\ncontract deposit is Ownable {\r\n  bool public isDepositAllowed = true;\r\n\r\n  // start and end timestamps when investments are allowed  (both inclusive)\r\n  uint256 public startTime =  block.timestamp ; \r\n  uint256 public duration = 5 days;\r\n  uint256 public endTime;\r\n\r\n  mapping (address=> uint256) depositors;\r\n\r\n  // amount of money deposited in wei\r\n  uint256 public weiDeposited;\r\n\r\n  // address where all funds deposited are stored\r\n  address payable wallet;\r\n\r\n  /**\r\n    * event for funds received \r\n    * @param depositor who deposited value     \r\n    */\r\n  event depositReceived(address indexed depositor,uint256 value);\r\n\r\n\r\n  constructor (address payable _wallet) public {        \r\n    require(_wallet != address(0));   \r\n    require(startTime >= block.timestamp); \r\n    endTime = (startTime + duration);    \r\n    wallet = _wallet;\r\n  }\r\n\r\n  // This function is called when anyone sends ether to this contract\r\n\r\n  receive() external payable {\r\n    require(msg.sender != address(0));                      //Contributor's address should not be zero\r\n    require(msg.value != 0);                                //Contributed  amount should be greater then zero\r\n    require(isDepositAllowed);                              //Check if contracts can receive deposits\r\n\r\n    //forward fund received to Platform's account\r\n    forwardFunds();            \r\n\r\n    // Add to investments with the investor\r\n    depositors[msg.sender] += msg.value;\r\n    weiDeposited += msg.value;\r\n\r\n    //Notify server that an investment has been received\r\n    emit depositReceived(msg.sender,msg.value); \r\n  }\r\n\r\n  // send ether to the fund collection wallet  , this ideally would be an multisig wallet\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // Called by owner when preico token cap has been reached\r\n  function updateisDepositAllowed(bool _value) public onlyOwner {\r\n    isDepositAllowed = _value;\r\n  }\r\n}\r\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"}}}