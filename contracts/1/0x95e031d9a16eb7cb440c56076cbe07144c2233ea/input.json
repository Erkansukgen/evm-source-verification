{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/oasisResolver.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface OasisInterface {\n    function getMinSell(TokenInterface pay_gem) external view returns (uint);\n    function getBuyAmount(address dest, address src, uint srcAmt) external view returns(uint);\n\tfunction getPayAmount(address src, address dest, uint destAmt) external view returns (uint);\n}\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function decimals() external view returns (uint);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    uint constant WAD = 10 ** 18;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n    /**\n     * @dev get Ethereum address\n     */\n    function getAddressETH() public pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n}\n\n\ncontract OasisHelpers is Helpers {\n    /**\n     * @dev Return WETH address\n     */\n    function getAddressWETH() internal pure returns (address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    }\n\n    /**\n     * @dev Return Oasis Address\n     */\n    function getOasisAddr() internal pure returns (address) {\n        return 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    }\n\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\n        _buy = buy == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\n        _sell = sell == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\n    }\n\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = mul(_amt, 10 ** (18 - _dec));\n    }\n\n    function getBuyUnitAmt(\n        TokenInterface buyAddr,\n        uint expectedAmt,\n        TokenInterface sellAddr,\n        uint sellAmt,\n        uint slippage\n    ) internal view returns (uint unitAmt) {\n        uint _sellAmt = convertTo18((sellAddr).decimals(), sellAmt);\n        uint _buyAmt = convertTo18(buyAddr.decimals(), expectedAmt);\n        unitAmt = wdiv(_buyAmt, _sellAmt);\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\n    }\n\n    function getSellUnitAmt(\n        TokenInterface sellAddr,\n        uint expectedAmt,\n        TokenInterface buyAddr,\n        uint buyAmt,\n        uint slippage\n    ) internal view returns (uint unitAmt) {\n        uint _buyAmt = convertTo18(buyAddr.decimals(), buyAmt);\n        uint _sellAmt = convertTo18(sellAddr.decimals(), expectedAmt);\n        unitAmt = wdiv(_sellAmt, _buyAmt);\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\n    }\n\n}\n\n\ncontract Resolver is OasisHelpers {\n\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage) public view returns (uint buyAmt, uint unitAmt) {\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\n        buyAmt = OasisInterface(getOasisAddr()).getBuyAmount(address(_buyAddr), address(_sellAddr), sellAmt);\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\n    }\n\n    function getSellAmount(address buyAddr, address sellAddr, uint buyAmt, uint slippage) public view returns (uint sellAmt, uint unitAmt) {\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\n        sellAmt = OasisInterface(getOasisAddr()).getPayAmount(address(_sellAddr), address(_buyAddr), buyAmt);\n        unitAmt = getBuyUnitAmt(_sellAddr, sellAmt, _buyAddr, buyAmt, slippage);\n    }\n\n    function getMinSellAmount(address sellAddr) public view returns (uint minAmt) {\n        (, TokenInterface _sellAddr) = changeEthAddress(getAddressETH(), sellAddr);\n        minAmt = OasisInterface(getOasisAddr()).getMinSell(_sellAddr);\n    }\n\n}\n\n\ncontract InstaOasisResolver is Resolver {\n    string public constant name = \"Oasis-Resolver-v1\";\n}"}}}