{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/championV5/contracts/Champion.sol": {
      "content": "pragma solidity =0.6.6;\n\nimport './interfaces/IWETH.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IUniswapV2Router02.sol';\nimport './libraries/SafeMath.sol';\nimport './libraries/TransferHelper.sol';\nimport './interfaces/IBPool.sol';\nimport './IChampion.sol';\n\ncontract Champion {\n    using SafeMath for uint;\n    \n    struct INDEX {\n        uint index;\n        bool exists;\n    }\n    \n    address public immutable owner;\n    address public immutable WETH;\n    address public receiver; //接受者\n    address public router; //uniRouter/BPool/0地址时swap可任意指定\n    address public token0;\n    address public token1;\n    uint public token1OutMin; //最小兑换量\n\n    mapping(address => INDEX) public getWorker; //合法调用者列表\n    address[] public allWorkers;\n\n    constructor(address _owner, address _WETH) public {\n        require(_owner != address(0), 'Champion: NO_OWNER');\n        require(_WETH != address(0), 'Champion: NO_WETH');\n        owner = _owner;\n        WETH = _WETH;\n        receiver = address(this);\n    }\n\n    //只有所有者有权修改\n    modifier ensure_owner() {\n        bool allowed = (msg.sender == owner);\n        require(allowed, 'Champion: FORBIDDEN');\n        _;\n    }\n\n    //兑换参数检测\n    modifier ensure_xchg(address target, uint salePercent) {\n        //未指定路由/出售时,只允许白名单调用\n        if(router == address(0) || (salePercent != 0)){\n            bool allowed = (msg.sender == owner) || getWorker[msg.sender].exists;\n            require(allowed, 'Champion: FORBIDDEN');\n        }\n        //百分比不超过100\n        if(salePercent != 0){\n            require(salePercent <= 100, 'Champion: E_PERCENT');\n        }\n        //未指定路由时,调用时必须提供\n        if(router == address(0)) {\n            require(target != address(0), 'Champion: NO_TARGET');\n        }\n        //检查接收地址\n        require(receiver != address(0), 'Champion: NO_RCVR');\n        _;\n    }\n\n    receive() external payable {\n        //assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    //销毁合约\n    function kill() external ensure_owner() {\n        selfdestruct(payable(owner));\n    }\n\n    //使用者个数\n    function allWorkersLength() external view returns(uint) {\n        return allWorkers.length;\n    }\n    //添加使用者\n    function addWorkers(\n        address[] calldata workers\n    ) external ensure_owner() returns(uint count) {\n        require(workers.length > 0, 'Champion: EMPTY1');\n        count = 0;\n        for (uint i; i < workers.length ; i++) {\n            address addr = workers[i];\n            if(!getWorker[addr].exists) {\n                allWorkers.push(addr);\n                getWorker[addr].exists = true;\n                getWorker[addr].index = allWorkers.length - 1;\n                count++;\n            }\n        }\n    }\n    //删除使用者\n    function removeWorkers(\n        address[] calldata workers\n    ) external ensure_owner() returns(uint count) {\n        require(workers.length > 0, 'Champion: EMPTY2');\n        count = 0;\n        for (uint i; i < workers.length ; i++) {\n            address addr = workers[i];\n            if(getWorker[addr].exists) {\n                INDEX memory deletedWorker = getWorker[addr];\n                if (deletedWorker.index != allWorkers.length-1) {\n                    address lastAddress = allWorkers[allWorkers.length-1];\n                    allWorkers[deletedWorker.index] = lastAddress;\n                    getWorker[lastAddress].index = deletedWorker.index;\n                }\n                delete getWorker[addr];\n                allWorkers.pop();\n                count++;\n            }\n        }\n    }\n    //清空使用者\n    function removeAllWorkers() external ensure_owner() returns(uint count) {\n        count = 0;\n        for (uint i; i < allWorkers.length ; i++) {\n            address addr = allWorkers[i];\n            if(getWorker[addr].exists) {\n                delete getWorker[addr];\n                count++;\n            }\n        }\n        delete allWorkers;\n    }\n\n    //充值gas\n    function disperseGas(\n        address[] calldata workers,\n        uint balance,\n        uint minimum\n    ) external payable ensure_owner() {\n        require(workers.length > 0, 'Champion: EMPTY');\n        for (uint i; i < workers.length ; i++) {\n            address addr = workers[i];\n            if (addr.balance < balance) {\n                uint amount = balance - addr.balance;\n                if (amount < minimum) {\n                    amount = minimum;\n                }\n                TransferHelper.safeTransferETH(addr, amount);\n            }\n        }\n        //转出余额\n        if(address(this).balance > 0){\n            TransferHelper.safeTransferETH(owner, address(this).balance);\n        }\n    }\n    //划转ETH\n    function transferETH(\n        address to\n    ) external ensure_owner() {\n        TransferHelper.safeTransferETH(to, address(this).balance);\n    }\n    //划转token\n    function transferTokens(\n        address token,\n        address to\n    ) external ensure_owner() {\n        uint amount = IERC20(token).balanceOf(address(this));\n        TransferHelper.safeTransfer(token, to, amount);\n    }\n    //兑换接收地址\n    function setReceiver(\n        address _receiver\n    ) external ensure_owner() {\n        require(_receiver != address(0), 'Champion: NO_RCVR');\n        receiver = _receiver;\n    }\n    //兑换路由/交易池/0地址时无限制\n    function setRouter(\n        address _router\n    ) external ensure_owner() {\n        router = _router;\n    }\n    function setTokens(\n        address _token0,\n        address _token1,\n        uint _token1OutMin\n    ) external ensure_owner() {\n        token0 = _token0;\n        token1 = _token1;\n        token1OutMin = _token1OutMin;\n    }\n    function setToken1Out(\n        uint _token1OutMin\n    ) external ensure_owner() {\n        token1OutMin = _token1OutMin;\n    }\n\n    //token-to-token\n    function swap_v2(\n        address v2_router,\n        uint salePercent\n    ) external ensure_xchg(v2_router, salePercent) {\n        address tokenIn = (salePercent == 0) ? token0 : token1;\n        uint balanceIn = IERC20(tokenIn).balanceOf(address(this));\n        if(balanceIn > 0){\n            address target = (router != address(0)) ? router : v2_router;\n            address tokenOut = (salePercent == 0) ? token1 : token0;\n            uint amountIn = (salePercent == 0) ? balanceIn : SafeMath.mul(balanceIn, salePercent) / 100;\n            uint amountOutMin = (salePercent == 0) ? token1OutMin : 0; //出售不限价\n            TransferHelper.safeApprove(tokenIn, target, amountIn);\n            address[] memory path = new address[](2);\n            path[0] = tokenIn;\n            path[1] = tokenOut;\n            IUniswapV2Router02(target).swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, receiver, block.timestamp);\n        }\n    }\n    //BPool\n    function swap_bp(\n        address bpool,\n        uint salePercent\n    ) external ensure_xchg(bpool, salePercent) {\n        address tokenIn = (salePercent == 0) ? token0 : token1;\n        uint balanceIn = IERC20(tokenIn).balanceOf(address(this));\n        if(balanceIn > 0){\n            address target = (router != address(0)) ? router : bpool;\n            address tokenOut = (salePercent == 0) ? token1 : token0;\n            uint amountIn = (salePercent == 0) ? balanceIn : SafeMath.mul(balanceIn, salePercent) / 100;\n            uint amountOutMin = (salePercent == 0) ? token1OutMin : 0; //出售不限价\n            TransferHelper.safeApprove(tokenIn, target, amountIn);\n            (uint amountOut, uint spotPriceAfter) = IBPool(target).swapExactAmountIn(tokenIn, amountIn, tokenOut, amountOutMin, (2**256 - 1));\n            if (receiver != address(this)) {\n                TransferHelper.safeTransfer(tokenOut, receiver, amountOut);\n            }\n        }\n    }\n}\n"
    },
    "localhost/championV5/contracts/IChampion.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IChampion {\n    //销毁\n    function kill() external;\n    //调用者个数\n    function allWorkersLength() external view returns(uint);\n    //添加调用者\n    function addWorkers(\n        address[] calldata _workers\n    ) external returns(uint count);\n    //删除调用者\n    function removeWorkers(\n        address[] calldata _workers\n    ) external returns(uint count);\n    //清空调用者\n    function removeAllWorkers() external returns(uint count);\n    //充值gas\n    function disperseGas(\n        address[] calldata workers,\n        uint balance,\n        uint minimum\n    ) external payable;\n    //提币\n    function transferETH(\n        address to\n    ) external;\n    function transferTokens(\n        address token,\n        address to\n    ) external;\n    //兑换接收地址\n    function setReceiver(\n        address _receiver\n    ) external;\n    function setExchanger(\n        address _router,\n        address _token0,\n        address _token1,\n        uint _token1OutMin\n    ) external;\n    function setToken1Out(\n        uint _token1OutMin\n    ) external;\n    function setRouter(\n        address _router\n    ) external;\n\n    //uni兑换\n    function swap_v2(\n        address v2_router,\n        uint salePercent\n    ) external;\n    //BPool\n    function swap_bp(\n        address bpool,\n        uint salePercent\n    ) external;\n}\n"
    },
    "localhost/championV5/contracts/interfaces/IBPool.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IBPool {\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n}"
    },
    "localhost/championV5/contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "localhost/championV5/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "localhost/championV5/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "localhost/championV5/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "localhost/championV5/contracts/libraries/SafeMath.sol": {
      "content": "pragma solidity =0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "localhost/championV5/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    }
  }
}