{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract FatPresale is Ownable {\n  using SafeMath for uint256;\n\n  IERC20 public Token;\n  uint256 public TokenDecimals;\n\n  mapping(address => uint256) public investments; // total WEI invested per address (1ETH = 1e18WEI)\n  mapping(address => uint256) public investmentsLevelOne; // total WEI invested per address (1ETH = 1e18WEI)\n  mapping(address => uint256) public investmentsLevelTwo; // total WEI invested per address (1ETH = 1e18WEI)\n  mapping(address => uint256) public amountOfTokens; // amount of tokens to claim\n  mapping (uint256=> address) public investors;   // list of participating investor addresses\n  uint256 private _investorCount = 0;             // number of unique addresses that have invested\n  uint256 public _totalEthInvestedLevelOne;             // total ethereum invested\n  uint256 public _totalEthInvestedLevelTwo;             // total ethereum invested\n\n  mapping(address => bool) public whitelistAddresses; // all addresses eligible for presale\n  mapping(address => bool) public devAddresses;       // all addresses that are devs\n\n  uint256 public constant INVESTMENT_LIMIT_MIN = 0.5  ether; // 0.5 ETH is maximum investment limit for pre-sale\n  uint256 public constant INVESTMENT_LIMIT_PRESALE = 5  ether; // 5 ETH is maximum investment limit for pre-sale\n  uint256 public constant INVESTMENT_LIMIT_DEVELOPER = 5 ether; // 5 ETH is maximum investment limit for developer pre-sale\n  uint256 public constant INVESTMENT_LIMIT_PUBLIC = 5 ether;    // 5 ETH is maximum investment limit for public pre-sale\n\n  uint256 public constant LEVEL_ONE_LIMIT = 600 ether;\n  uint256 public constant LEVEL_TWO_LIMIT = 400 ether;\n\n\n  bool public isPresaleActive = false; // investing is only allowed if presale is active\n  bool public allowPublicInvestment = false; // public investing is only allowed once the devlist/whitelist presale is over\n\n  constructor() public {\n    TokenDecimals = 1e18;\n  }\n\n  function passTokenAddress(address tokenAddress) public onlyOwner {\n    Token = IERC20(tokenAddress);\n  }\n\n  function startPresale() public onlyOwner {\n    isPresaleActive = true;\n  }\n\n  function startPublicPresale() public onlyOwner {\n    allowPublicInvestment = true;\n  }\n\n  function endPresale() public onlyOwner {\n    isPresaleActive = false;\n    payable(owner()).transfer(address(this).balance);\n    \n  }\n\nfunction returnExtraTokens() public onlyOwner {\n    isPresaleActive = false;\n    Token.transfer(_msgSender(), Token.balanceOf(address(this)));\n  }\n\n  function addWhitelistAddresses(address[] calldata _whitelistAddresses) external onlyOwner {\n    for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\n      whitelistAddresses[_whitelistAddresses[i]] = true;\n    }\n  }\n\n  function addDevAddresses(address[] calldata _devlistAddresses) external onlyOwner {\n    for (uint256 i = 0; i < _devlistAddresses.length; i++) {\n      devAddresses[_devlistAddresses[i]] = true;\n    }\n  }\n\n  function refundInvestors() external onlyOwner {\n    for (uint256 i = 0; i < _investorCount; i++) {\n      address addressToRefund = investors[i];\n      uint256 refundAmount = investments[investors[i]];\n\n\n      payable(addressToRefund).transfer(refundAmount);\n      investments[investors[i]].sub(refundAmount);\n    }\n  }\n\n  modifier presaleActive() {\n    require(isPresaleActive, \"Presale is currently not active.\");\n    _;\n  }\n\n  receive()\n    external\n    payable\n    presaleActive\n   \n  {\n    uint256 addressTotalInvestment = investments[_msgSender()].add(msg.value);\n    uint256 totalEthInvestedLevelOne = _totalEthInvestedLevelOne.add(msg.value);\n    uint256 totalEthInvestedLevelTwo = _totalEthInvestedLevelTwo.add(msg.value);\n\n    if (!allowPublicInvestment) {\n\n      require(totalEthInvestedLevelOne <= LEVEL_ONE_LIMIT);\n      require(addressTotalInvestment >= INVESTMENT_LIMIT_MIN && addressTotalInvestment <= INVESTMENT_LIMIT_PRESALE);\n      investmentsLevelOne[_msgSender()] = investmentsLevelOne[_msgSender()].add(msg.value);\n      _totalEthInvestedLevelOne = _totalEthInvestedLevelOne.add(msg.value);\n\n    } else if (allowPublicInvestment) {\n      require(totalEthInvestedLevelTwo <= LEVEL_TWO_LIMIT);\n      require(addressTotalInvestment >= INVESTMENT_LIMIT_MIN && addressTotalInvestment <= INVESTMENT_LIMIT_PUBLIC);\n        investmentsLevelTwo[_msgSender()] = investmentsLevelTwo[_msgSender()].add(msg.value);\n        _totalEthInvestedLevelTwo = _totalEthInvestedLevelTwo.add(msg.value);\n        \n    }\n\n    investors[_investorCount] = msg.sender;\n    _investorCount++;\n    amountOfTokens[_msgSender()] = (investmentsLevelOne[_msgSender()].mul(5000)).add(investmentsLevelTwo[_msgSender()].mul(4000));\n    investments[_msgSender()] = addressTotalInvestment;\n\n  }\n\n  function claim() external {\n      require(!isPresaleActive);\n      uint256 tokensToClaim = amountOfTokens[_msgSender()];\n      require(tokensToClaim > 0);\n      amountOfTokens[_msgSender()] = 0;\n      Token.transfer(_msgSender(), tokensToClaim);\n  } \n\n  function isWhitelisted(address adr) public view returns (bool){\n    return whitelistAddresses[adr];\n  }\n\n  function isDevAddress(address adr) public view returns (bool){\n    return devAddresses[adr];\n  }\n\n  function getInvestedAmount(address adr) public view returns (uint256){\n      return investments[adr];\n  }\n\n  function getInvestorCount() public view returns (uint256){\n    return _investorCount;\n  }\n\n  function getPresaleInvestmentLimit() pure public returns (uint256) {\n    return INVESTMENT_LIMIT_PRESALE;\n  }\n\n  function getDeveloperPresaleInvestmentLimit() pure public returns (uint256) {\n    return INVESTMENT_LIMIT_DEVELOPER;\n  }\n\n//   function getPublicPresaleInvestmentLimit() view public returns (uint256) {\n//     return INVESTMENT_RATIO_PUBLIC;\n//   }\n\n}"}}}