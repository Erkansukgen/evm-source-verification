{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Snipe/DodoSnipe.sol":{"content":"pragma solidity =0.6.6;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract DodoSnipe {\r\n    fallback() external payable {\r\n        require(msg.data.length == 0, \"Function doesn't exists, calling fallback function\");\r\n        emit LogDepositReceived(msg.sender);\r\n    }\r\n    \r\n    receive() external payable {\r\n        emit LogDepositReceived(msg.sender);\r\n    }\r\n    \r\n    address public owner = msg.sender;\r\n    address private constant QUOTE_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    IERC20 private QUOTE = IERC20(QUOTE_ADDRESS);\r\n\r\n    event LogDepositReceived(address sender);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function balance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function balanceErc20(IERC20 token) external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function buyBaseToken(address dodoPairAddress) external {\r\n        require(QUOTE.balanceOf(address(this)) > 0, \"No stablecoin found in contract\");\r\n\r\n        uint buyAmount = 227272 * 10 ** 18;\r\n        uint maxPayQuote = 50000 * 10 ** 6;\r\n        \r\n        IDODO dodoPair = IDODO(dodoPairAddress);\r\n        \r\n        require(QUOTE.approve(dodoPairAddress, maxPayQuote), 'approve failed.');\r\n\r\n        dodoPair.buyBaseToken(buyAmount, maxPayQuote, \"\");\r\n    }\r\n\r\n    function deposit() external payable {\r\n        require(msg.value > 0);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        require(address(this).balance > 0 ether, \"No ETH found in contract\");\r\n\r\n        (bool success, ) = msg.sender.call{ value: address(this).balance }(\"\");\r\n        require(success, \"Withdraw failed.\");\r\n    }\r\n    \r\n    function withdrawErc20(IERC20 token) external onlyOwner {\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ninterface IDODO {\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256 payQuote);\r\n}\r\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}}}