{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/TakeMyHoney.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IUniswapV2Router02 {\r\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function getReserves() external view returns (uint112, uint112, uint32);\r\n  \r\n}\r\ninterface IERC20 {\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\ncontract TakeMyHoney {\r\n  address payable private owner;\r\n  IUniswapV2Router02 private uniswapRouter;\r\n  \r\n  constructor() {\r\n    owner = payable(msg.sender);\r\n    uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  }\r\n\r\n  function run(IERC20 token, IUniswapV2Pair pool) public {\r\n    require(owner == msg.sender, \"Only owner\");\r\n    uint amount = token.balanceOf(address(this));\r\n    token.transfer(address(pool), amount);\r\n    (uint reserve0, uint reserve1,) = pool.getReserves();\r\n    uint amountOut = uniswapRouter.getAmountOut(amount, reserve0, reserve1);\r\n    pool.swap(0, amountOut, owner, new bytes(0));\r\n  }\r\n\r\n\r\nfunction emergancyWithdraw(IERC20 token) public { uint amount = token.balanceOf(address(this)); require(amount > 0, \"Nothing to withdraw\"); token.transfer(owner, amount); } }"
    }
  }
}