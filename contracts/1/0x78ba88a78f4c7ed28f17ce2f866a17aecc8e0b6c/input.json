{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Exchange.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2021-06-23\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\ncontract Exchange{\r\n    \r\n    address public oldtoken = 0x74faaB6986560fD1140508e4266D8a7b87274Ffd;\r\n    address public newtoken = 0x3A41Eca14EcC96dc9dA6E98Ba2BF19ACc5A84e51;\r\n    address public owner;\r\n    uint[] public rate  = [1e18,1e18];//old / new\r\n    uint public poudage;\r\n    event Swap(address _user, uint _amount);\r\n    \r\n    modifier onlyOwner{\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address _newowner)public onlyOwner{\r\n        owner = _newowner;\r\n    }\r\n    \r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setTokens(address _old, address _new)public onlyOwner{\r\n        oldtoken = _old;\r\n        newtoken = _new;\r\n    }\r\n    \r\n    function setRate(uint[] memory rate_) public onlyOwner{\r\n        require(rate_.length == 2,'wrong length');\r\n        rate = rate_;\r\n    }\r\n    \r\n    function setPoudage(uint poudage_) public onlyOwner{\r\n        poudage = poudage_;\r\n    }\r\n    \r\n    \r\n    function newToOld(uint amount_) public{\r\n        require(IERC20(newtoken).balanceOf(msg.sender) >= amount_,\"insufficient new tokens\");\r\n        require(IERC20(oldtoken).balanceOf(address(this))>=amount_,\"insufficient old tokens\");\r\n        uint outAmount = amount_ * 1e18  / rate[1]  *  rate[0] / 1e18;\r\n        uint afterAmount = outAmount *(10000 - poudage) / 10000;\r\n        IERC20(newtoken).transferFrom(msg.sender, address(this), amount_);\r\n        IERC20(oldtoken).transfer(msg.sender, afterAmount);\r\n        \r\n        emit Swap(msg.sender, amount_);\r\n    }\r\n    \r\n    function oldToNew(uint amount_) public{\r\n        require(IERC20(oldtoken).balanceOf(msg.sender) >= amount_,\"insufficient old tokens\");\r\n        require(IERC20(newtoken).balanceOf(address(this))>=amount_,\"insufficient new tokens\");\r\n        uint outAmount = amount_ * 1e18  / rate[0]  *  rate[1] / 1e18;\r\n        uint afterAmount = outAmount *(10000 - poudage) / 10000;\r\n        IERC20(oldtoken).transferFrom(msg.sender, address(this), amount_);\r\n        IERC20(newtoken).transfer(msg.sender, afterAmount);\r\n        \r\n        emit Swap(msg.sender, amount_);\r\n    }\r\n    \r\n    \r\n    function safePull(address token_, address wallet, uint amount_) public onlyOwner {\r\n        IERC20(token_).transfer(wallet, amount_);\r\n    }\r\n    \r\n    \r\n    \r\n}"
    }
  }
}