{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BondFactory.sol": {
      "content": "\n/**\n *Submitted for verification at Etherscan.io on 2020-07-15\n*/\n\npragma experimental ABIEncoderV2;\npragma solidity ^0.6.0;\n\n\ninterface IRouter {\n    function f(uint id, bytes32 k) external view returns (address);\n    function defaultDataContract(uint id) external view returns (address);\n    function bondNr() external view returns (uint);\n    function setBondNr(uint _bondNr) external;\n\n    function setDefaultContract(uint id, address data) external;\n    function addField(uint id, bytes32 field, address data) external;\n}\n\n/**\n *Submitted for verification at Etherscan.io on 2020-04-03\n*/\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    // function toPayable(address account) internal pure returns (address payable) {\n    //     return address(uint160(account));\n    // }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    // function sendValue(address payable recipient, uint256 amount) internal {\n    //     require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n    //     // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n    //     (bool success, ) = recipient.call.value(amount)(\"\");\n    //     require(success, \"Address: unable to send value, recipient may have reverted\");\n    // }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    // function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n    //     uint256 newAllowance = token.allowance(address(this), spender).add(value);\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    // }\n\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n    //     uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    // }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\nabstract contract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    // function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    //     return true;\n    // }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    // function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n    //     return true;\n    // }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        // _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        // _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        // _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    // function _burnFrom(address account, uint256 amount) internal virtual {\n    //     _burn(account, amount);\n    //     _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    // }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\n     */\n    // function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: ../../../../tmp/openzeppelin-contracts/contracts/token/ERC20/ERC20Burnable.sol\n// pragma solidity ^0.6.0;\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\ncontract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev See {ERC20-_burnFrom}.\n     */\n    // function burnFrom(address account, uint256 amount) public virtual {\n    //     _burnFrom(account, amount);\n    // }\n}\n\n//https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\nenum BondStage {\n        //无意义状态\n        DefaultStage,\n        //评级\n        RiskRating,\n        RiskRatingFail,\n        //募资\n        CrowdFunding,\n        CrowdFundingSuccess,\n        CrowdFundingFail,\n        UnRepay,//待还款\n        RepaySuccess,\n        Overdue,\n        //由清算导致的债务结清\n        DebtClosed\n    }\n\n//状态标签\nenum IssuerStage {\n        DefaultStage,\n\t\tUnWithdrawCrowd,\n        WithdrawCrowdSuccess,\n\t\tUnWithdrawPawn,\n        WithdrawPawnSuccess       \n    }\n\ninterface ICore {\n    function initialDepositCb(uint256 id, uint256 amount) external;\n    function depositCb(address who, uint256 id, uint256 amount) external returns (bool);\n\n    function investCb(address who, uint256 id, uint256 amount) external returns (bool);\n\n    function interestBearingPeriod(uint256 id) external returns (bool);\n\n    function txOutCrowdCb(address who, uint256 id) external returns (uint);\n\n    function repayCb(address who, uint256 id) external returns (uint);\n\n    function withdrawPawnCb(address who, uint256 id) external returns (uint);\n\n    function withdrawPrincipalCb(address who, uint id) external returns (uint);\n    function withdrawPrincipalAndInterestCb(address who, uint id) external returns (uint);\n    function liquidateCb(address who, uint id, uint liquidateAmount) external returns (uint, uint, uint, uint);\n    function overdueCb(uint256 id) external;\n\n    function withdrawSysProfitCb(address who, uint256 id) external returns (uint256);\n    \n    \n    function MonitorEventCallback(address who, address bond, bytes32 funcName, bytes calldata) external;\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20Detailed {\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ninterface IVote {\n    function take(uint256 id, address who) external returns(uint256);\n    function cast(uint256 id, address who, address proposal, uint256 amount) external;\n    function profit(uint256 id, address who) external returns(uint256);\n}\n\ninterface IACL {\n    function accessible(address sender, address to, bytes4 sig)\n        external\n        view\n        returns (bool);\n    function enableany(address from, address to) external;\n    function enableboth(address from, address to) external;\n}\n\ncontract BondData is ERC20Detailed, ERC20Burnable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public logic;\n\n    constructor(\n        address _ACL,\n        uint256 bondId,\n        string memory _bondName,\n        address _issuer,\n        address _collateralToken,\n        address _crowdToken,\n        uint256[8] memory info,\n        bool[2] memory _redeemPutback //是否支持赎回和回售\n    ) public ERC20Detailed(_bondName, _bondName, 0) {\n        ACL = _ACL;\n        id = bondId;\n        issuer = _issuer;\n        collateralToken = _collateralToken;\n        crowdToken = _crowdToken;\n        totalBondIssuance = info[0];\n        couponRate = info[1];\n        maturity = info[2];\n        issueFee = info[3];\n        minIssueRatio = info[4];\n        financePurposeHash = info[5];\n        paymentSourceHash = info[6];\n        issueTimestamp = info[7];\n        supportRedeem = _redeemPutback[0];\n        supportPutback = _redeemPutback[1];\n        par = 100;\n    }\n\n    /** ACL */\n    address public ACL;\n\n    modifier auth {\n        IACL _ACL = IACL(ACL);\n        require(\n            _ACL.accessible(msg.sender, address(this), msg.sig)\n        , \"access unauthorized\");\n        _;\n    }\n\n    /** 债券基本信息 */\n\n    uint256 public id;\n    address public issuer; //发债方\n    address public collateralToken; //质押代币\n    address public crowdToken; //融资代币地址\n\n    uint256 public totalBondIssuance; //预计发行量，债券发行总量，以USDT计\n    uint256 public actualBondIssuance; //实际发行份数\n    uint256 public mintCnt;//增发的次数\n    uint256 public par; //票面价值（面值）,USDT or DAI\n    uint256 public couponRate; //票面利率；息票利率 15%\n\n    uint256 public maturity; //债券期限，到期日,债券期限(30天)\n    uint256 public issueFee; //发行费用,0.2%\n    uint256 public minIssueRatio; //最低融资比率\n\n    uint256 public financePurposeHash;\n    uint256 public paymentSourceHash;\n    uint256 public issueTimestamp;//申请发债时间\n    bool public supportRedeem;//是否支持赎回, 该变量之前没有使用，现作为是否支持评级的标志, 支持为true，否则为false\n    bool public supportPutback;//是否支持回售\n\n    //分批清算的参数设置，设置最后剩余清算额度为1000单位，当最后剩余清算额度<1000时，用户需一次性清算完毕。\n    uint256 public partialLiquidateAmount;\n\n    uint256 public discount; //清算折扣,系统设定，非发行方提交\n    uint256 public liquidateLine = 7e17;//质押资产价值下跌30%时进行清算 1-0.3 = 0.7\n    uint256 public gracePeriod = 1 days; //债务宽限期\n    uint256 public depositMultiple;\n\n    /** 债券状态时间线 */\n\n    uint256 public voteExpired; //债券投票截止时间\n    uint256 public investExpired; //用户购买债券截止时间\n    uint256 public bondExpired; //债券到期日\n\n    /** 债券创建者/投资者信息 */\n\n    struct Balance {\n        //发行者：\n        //amountGive: 质押的token数量，项目方代币\n        //amountGet: 募集的token数量，USDT，USDC\n\n        //投资者：\n        //amountGive: 投资的token数量，USDT，USDC\n        //amountGet: 债券凭证数量\n        uint256 amountGive;\n        uint256 amountGet;\n    }\n\n    //1个发行人\n    uint256 public issuerBalanceGive;\n    //多个投资人\n    mapping(address => Balance) public supplyMap; //usr->supply\n\n    /** 债券配置对象 */\n\n    uint256 public fee;\n    uint256 public sysProfit;//平台盈利，为手续费的分成\n\n    //债务加利息\n    uint256 public liability;\n    uint256 public originLiability;\n\n    //状态：\n    uint256 public bondStage;\n    uint256 public issuerStage;\n\n    function setLogics(address _logic, address _voteLogic) external auth {\n        logic = _logic;\n        voteLogic = _voteLogic;\n    }\n\n    function setBondParam(bytes32 k, uint256 v) external auth {\n        if (k == bytes32(\"discount\")) {\n            discount = v;\n            return;\n        }\n\n        if (k == bytes32(\"liquidateLine\")) {\n            liquidateLine = v;\n            return;\n        }\n\n        if (k == bytes32(\"depositMultiple\")) {\n            depositMultiple = v;\n            return;\n        }\n\n        if (k == bytes32(\"gracePeriod\")) {\n            gracePeriod = v;\n            return;\n        }\n\n        if (k == bytes32(\"voteExpired\")) {\n            voteExpired = v;\n            return;\n        }\n\n        if (k == bytes32(\"investExpired\")) {\n            investExpired = v;\n            return;\n        }\n\n        if (k == bytes32(\"bondExpired\")) {\n            bondExpired = v;\n            return;\n        }\n\n        if (k == bytes32(\"partialLiquidateAmount\")) {\n            partialLiquidateAmount = v;\n            return;\n        }\n        \n        if (k == bytes32(\"fee\")) {\n            fee = v;\n            return;\n        }\n        \n        if (k == bytes32(\"sysProfit\")) {\n            sysProfit = v;\n            return;\n        }\n        \n        if (k == bytes32(\"originLiability\")) {\n            originLiability = v;\n            return;\n        }\n\n        if (k == bytes32(\"liability\")) {\n            liability = v;\n            return;\n        }\n\n        if (k == bytes32(\"totalWeights\")) {\n            totalWeights = v;\n            return;\n        }\n\n        if (k == bytes32(\"totalProfits\")) {\n            totalProfits = v;\n            return;\n        }\n\n        if (k == bytes32(\"borrowAmountGive\")) {\n            issuerBalanceGive = v;\n            return;\n        }\n\n        if (k == bytes32(\"bondStage\")) {\n            bondStage = v;\n            return;\n        }\n\n        if (k == bytes32(\"issuerStage\")) {\n            issuerStage = v;\n            return;\n        }\n        revert(\"setBondParam: invalid bytes32 key\");\n    }\n\n    function setBondParamAddress(bytes32 k, address v) external auth {\n        if (k == bytes32(\"gov\")) {\n            gov = v;\n            return;\n        }\n\n        if (k == bytes32(\"top\")) {\n            top = v;\n            return;\n        }\n        revert(\"setBondParamAddress: invalid bytes32 key\");\n    }\n\n\n    function getSupplyAmount(address who) external view returns (uint256) {\n        return supplyMap[who].amountGive;\n    }\n\n    function getBorrowAmountGive() external view returns (uint256) {\n        return issuerBalanceGive;\n    }\n\n\n\n    /** 清算记录流水号 */\n    uint256 public liquidateIndexes;\n\n    /** 分批清算设置标记 */\n    bool public liquidating;\n    function setLiquidating(bool _liquidating) external auth {\n        liquidating = _liquidating;\n    }\n\n    /** 评级 */\n\n    address public voteLogic;\n    \n    struct what {\n        address proposal;\n        uint256 weight;\n    }\n\n    struct prwhat {\n        address who;\n        address proposal;\n        uint256 reason;\n    }\n\n    mapping(address => uint256) public voteLedger; //who => amount\n    mapping(address => what) public votes; //who => what\n    mapping(address => uint256) public weights; //proposal => weight\n    mapping(address => uint256) public profits; //who => profit\n    uint256 public totalProfits;    //累计已经被取走的投票收益, 用于对照 @fee.\n    uint256 public totalWeights;\n    address public gov;\n    address public top;\n    prwhat public pr;\n\n\n    function setVotes(address who, address proposal, uint256 weight)\n        external\n        auth\n    {\n        votes[who].proposal = proposal;\n        votes[who].weight = weight;\n    }\n\n\n\n    function setACL(\n        address _ACL) external {\n        require(msg.sender == ACL, \"require ACL\");\n        ACL = _ACL;\n    }\n\n\n    function setPr(address who, address proposal, uint256 reason) external auth {\n        pr.who = who;\n        pr.proposal = proposal;\n        pr.reason = reason;\n    }\n\n    \n    function setBondParamMapping(bytes32 name, address k, uint256 v) external auth {\n        if (name == bytes32(\"weights\")) {\n            weights[k] = v;\n            return;\n        }\n\n        if (name == bytes32(\"profits\")) {\n            profits[k] = v;\n            return;\n        }\n        revert(\"setBondParamMapping: invalid bytes32 name\");\n    }\n\n\n    function vote(address proposal, uint256 amount) external nonReentrant {\n        IVote(voteLogic).cast(id, msg.sender, proposal, amount);\n        voteLedger[msg.sender] = voteLedger[msg.sender].add(amount);\n        IERC20(gov).safeTransferFrom(msg.sender, address(this), amount);\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"vote\", abi.encodePacked(\n            proposal,\n            amount, \n            govTokenCash()\n        ));\n    }\n\n    function take() external nonReentrant {\n        uint256 amount = IVote(voteLogic).take(id, msg.sender);\n        voteLedger[msg.sender] = voteLedger[msg.sender].sub(amount);\n        IERC20(gov).safeTransfer(msg.sender, amount);\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"take\", abi.encodePacked(\n            amount, \n            govTokenCash()\n        ));\n    }\n\n    function profit() external nonReentrant {\n        uint256 _profit = IVote(voteLogic).profit(id, msg.sender);\n        IERC20(crowdToken).safeTransfer(msg.sender, _profit);\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"profit\", abi.encodePacked(\n            _profit, \n            crowdTokenCash()\n        ));\n    }\n\n    function withdrawSysProfit() external nonReentrant auth {\n        uint256 _sysProfit = ICore(logic).withdrawSysProfitCb(msg.sender, id);\n        require(_sysProfit <= totalFee() && (bondStage == uint(BondStage.RepaySuccess) || bondStage == uint(BondStage.DebtClosed)), \"> totalFee\");\n\n        IERC20(crowdToken).safeTransfer(msg.sender, _sysProfit);\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"withdrawSysProfit\", abi.encodePacked(\n            _sysProfit,\n            crowdTokenCash()\n        ));\n    }\n\n    function burnBond(address who, uint256 amount) external auth {\n        _burn(who, amount);\n        actualBondIssuance = actualBondIssuance.sub(amount);\n    }\n\n    function mintBond(address who, uint256 amount) external auth {\n        _mint(who, amount);\n        mintCnt = mintCnt.add(amount);\n        actualBondIssuance = actualBondIssuance.add(amount);\n    }\n\n    function txn(address sender, address recipient, uint256 bondAmount, bytes32 name) internal {\n        uint256 txAmount = bondAmount.mul(par).mul(10**uint256(crowdDecimals()));\n        supplyMap[sender].amountGive = supplyMap[sender].amountGive.sub(txAmount);\n        supplyMap[sender].amountGet = supplyMap[sender].amountGet.sub(bondAmount);\n        supplyMap[recipient].amountGive = supplyMap[recipient].amountGive.add(txAmount);\n        supplyMap[recipient].amountGet = supplyMap[recipient].amountGet.add(bondAmount);\n\n        ICore(logic).MonitorEventCallback(sender, address(this), name, abi.encodePacked(\n            recipient,\n            bondAmount\n        ));\n    }\n\n    function transfer(address recipient, uint256 bondAmount) \n        public override(IERC20, ERC20) nonReentrant\n        returns (bool)\n    {\n        txn(msg.sender, recipient, bondAmount, \"transfer\");\n        return ERC20.transfer(recipient, bondAmount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 bondAmount)\n        public override(IERC20, ERC20) nonReentrant\n        returns (bool)\n    {\n        txn(sender, recipient, bondAmount, \"transferFrom\");\n        return ERC20.transferFrom(sender, recipient, bondAmount);\n    }\n\n    mapping(address => uint256) public depositLedger;\n    function crowdDecimals() public view returns (uint8) {\n        return ERC20Detailed(crowdToken).decimals();\n    }\n\n    //可转出金额,募集到的总资金减去给所有投票人的手续费\n    function transferableAmount() public view returns (uint256) {\n        uint256 baseDec = 18;\n        uint256 _1 = 1 ether;\n        //principal * (1-0.05) * 1e18/(10** (18 - 6))\n        return\n            mintCnt.mul(par).mul((_1).sub(issueFee)).div(\n                10**baseDec.sub(uint256(crowdDecimals()))\n            );\n    }\n\n    function totalFee() public view returns (uint256) {\n        uint256 baseDec = 18;\n        uint256 delta = baseDec.sub(\n            uint256(crowdDecimals())\n        );\n        //principal * (0.05) * 1e18/(10** (18 - 6))\n        return mintCnt.mul(par).mul(issueFee).div(10**delta);\n    }\n\n    //追加抵押物\n    function deposit(uint256 amount) external nonReentrant payable {\n        require(ICore(logic).depositCb(msg.sender, id, amount), \"deposit err\");\n        depositLedger[msg.sender] = depositLedger[msg.sender].add(amount);\n        if (collateralToken != address(0)) {\n            IERC20(collateralToken).safeTransferFrom(msg.sender, address(this), amount);\n        } else {\n            require(amount == msg.value && msg.value > 0, \"deposit eth err\");\n        }\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"deposit\", abi.encodePacked(\n            amount, \n            collateralTokenCash()\n        ));\n    }\n\n    function collateralTokenCash() internal view returns (uint256) {\n        return collateralToken != address(0) ? IERC20(collateralToken).balanceOf(address(this)) : address(this).balance;\n    }\n\n    function crowdTokenCash() internal view returns (uint256) {\n        return IERC20(crowdToken).balanceOf(address(this));\n    }\n\n    function govTokenCash() internal view returns (uint256) {\n        return IERC20(gov).balanceOf(address(this));\n    }\n\n    //首次加入抵押物\n    function initialDeposit(address who, uint256 amount) external auth nonReentrant payable {\n        depositLedger[who] = depositLedger[who].add(amount);\n        if (collateralToken != address(0)) {\n            IERC20(collateralToken).safeTransferFrom(msg.sender, address(this), amount);\n        } else {\n\t        require(amount == msg.value && msg.value > 0, \"initDeposit eth err\");\n\t    }\n\n        ICore(logic).initialDepositCb(id, amount);\n\n        ICore(logic).MonitorEventCallback(who, address(this), \"initialDeposit\", abi.encodePacked(\n            amount, \n            collateralTokenCash()\n        ));\n    }\n\n    function invest(uint256 amount) external nonReentrant {\n        if (ICore(logic).investCb(msg.sender, id, amount)) {\n            supplyMap[msg.sender].amountGive = supplyMap[msg.sender].amountGive.add(amount);\n            supplyMap[msg.sender].amountGet = supplyMap[msg.sender].amountGet.add(amount.div(par.mul(10**uint256(crowdDecimals()))));\n\n            //充值amount token到合约中，充值之前需要approve\n            IERC20(crowdToken).safeTransferFrom(msg.sender, address(this), amount);\n        }\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"invest\", abi.encodePacked(\n            amount, \n            crowdTokenCash()\n        ));\n    }\n\n    function txOutCrowd() external nonReentrant {\n        uint256 balance = ICore(logic).txOutCrowdCb(msg.sender, id);\n        require(balance <= transferableAmount(), \"exceed max tx amount\");\n\n\n        IERC20(crowdToken).safeTransfer(msg.sender, balance);\n\n\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"txOutCrowd\", abi.encodePacked(\n            balance, \n            crowdTokenCash()\n        ));\n    }\n\n    function overdue() external {\n        ICore(logic).overdueCb(id);\n    }\n\n    function repay() external nonReentrant {\n        uint repayAmount = ICore(logic).repayCb(msg.sender, id);\n\n        IERC20(crowdToken).safeTransferFrom(msg.sender, address(this), repayAmount);\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"repay\", abi.encodePacked(\n            repayAmount, \n            crowdTokenCash()\n        ));\n    }\n\n    function withdrawPawn() external nonReentrant {\n        uint amount = ICore(logic).withdrawPawnCb(msg.sender, id);\n        depositLedger[msg.sender] = depositLedger[msg.sender].sub(amount);\n        if (collateralToken != address(0)) {\n\n            IERC20(collateralToken).safeTransfer(msg.sender, amount);\n        } else {\n            msg.sender.transfer(amount);\n        }\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"withdrawPawn\", abi.encodePacked(\n            amount, \n            collateralTokenCash()\n        ));\n    }\n\n    function withdrawInvest(address who, uint amount, bytes32 name) internal {\n        IERC20(crowdToken).safeTransfer(who, amount);\n        ICore(logic).MonitorEventCallback(who, address(this), name, abi.encodePacked(\n            amount, \n            crowdTokenCash()\n        ));\n    }\n\n    function withdrawPrincipal() external nonReentrant {\n        uint256 supplyGive = ICore(logic).withdrawPrincipalCb(msg.sender, id);\n        supplyMap[msg.sender].amountGive = supplyMap[msg.sender].amountGet = 0;\n        withdrawInvest(msg.sender, supplyGive, \"withdrawPrincipal\");\n    }\n\n    function withdrawPrincipalAndInterest() external nonReentrant {\n        uint256 amount = ICore(logic).withdrawPrincipalAndInterestCb(msg.sender, id);\n        uint256 _1 = 1 ether;\n        require(amount <= supplyMap[msg.sender].amountGive.mul(_1.add(couponRate)).div(_1) && supplyMap[msg.sender].amountGive != 0, \"exceed max invest amount or not an invester\");\n        supplyMap[msg.sender].amountGive = supplyMap[msg.sender].amountGet = 0;\n\n        withdrawInvest(msg.sender, amount, \"withdrawPrincipalAndInterest\");\n    }\n\n    //分批清算,y为债务\n    function liquidate(uint liquidateAmount) external nonReentrant {\n        (uint y1, uint x1, uint y, uint x) = ICore(logic).liquidateCb(msg.sender, id, liquidateAmount);\n\n        if (collateralToken != address(0)) {\n\n            IERC20(collateralToken).safeTransfer(msg.sender, x1);\n        } else {\n            msg.sender.transfer(x1);\n        }\n\n\n\n        IERC20(crowdToken).safeTransferFrom(msg.sender, address(this), y1);\n\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"liquidate\", abi.encodePacked(\n            liquidateIndexes, \n            x1, \n            y1,\n            x,\n            y,\n            now, \n            collateralTokenCash(),\n            crowdTokenCash()\n        ));\n        liquidateIndexes = liquidateIndexes.add(1);\n    }\n}\n\n/*\n * Copyright (c) The Force Protocol Development Team\n*/\ninterface INameGen {\n    function gen(address token, uint id) external view returns (string memory);\n}\n\ninterface IVerify {\n    function verify(address[2] calldata, uint256[8] calldata) external view returns (bool);\n}\n\ncontract BondFactory {\n    using SafeERC20 for IERC20;\n\n    address public router;\n    address public verify;\n    address public vote;\n    address public core;\n    address public nameGen;\n    address public ACL;\n\n    constructor(\n        address _ACL,\n        address _router,\n        address _verify,\n        address _vote,\n        address _core,\n\t    address _nameGen\n    ) public {\n        ACL = _ACL;\n        router = _router;\n        verify = _verify;\n        vote = _vote;\n        core = _core;\n        nameGen = _nameGen;\n    }\n\n    function setACL(address _ACL) external {\n        require(msg.sender == ACL, \"require ACL\");\n        ACL = _ACL;\n    }\n\n    //提交发债信息，new BondData\n    //tokens[0]: _collateralToken\n    //tokens[1]: _crowdToken\n    //info[0]: _totalBondIssuance\n    //info[1]: _couponRate, //一期的利率\n    //info[2]: _maturity, //秒数\n    //info[3]: _issueFee\n    //info[4]: _minIssueRatio\n    //info[5]: _financePurposeHash,//融资用途hash\n    //info[6]: _paymentSourceHash,//还款来源hash\n    //info[7]: _issueTimestamp,//发债时间\n    //_redeemPutback[0]: _supportRedeem,\n    //_redeemPutback[1]: _supportPutback\n    function issue(\n        address[2] calldata tokens,\n        uint256 _minCollateralAmount,\n        uint256[8] calldata info,\n        bool[2] calldata _redeemPutback\n    ) external payable returns (uint256)  {\n        require(IVerify(verify).verify(tokens, info), \"verify error\");\n\n        uint256 nr = IRouter(router).bondNr();\n        string memory bondName = INameGen(nameGen).gen(tokens[0], nr);\n\n        BondData b = new BondData(\n            ACL,\n            nr,\n            bondName,\n            msg.sender,\n            tokens[0],\n            tokens[1],\n            info,\n            _redeemPutback\n        );\n        IRouter(router).setDefaultContract(nr, address(b));\n        IRouter(router).setBondNr(nr + 1);\n\n        IACL(ACL).enableany(address(this), address(b));\n        IACL(ACL).enableboth(core, address(b));\n        IACL(ACL).enableboth(vote, address(b));\n\n        b.setLogics(core, vote);\n\n        if (tokens[0] == address(0)) {\n            b.initialDeposit.value(msg.value)(msg.sender, msg.value);\n\t        require(msg.value == _minCollateralAmount, \"invalid issue eth amount\");\n        } else {\n            //合约划转用户的币到用户的bondData合约中\n            IERC20(tokens[0]).safeTransferFrom(msg.sender, address(this), _minCollateralAmount);\n            IERC20(tokens[0]).safeApprove(address(b), _minCollateralAmount);\n            b.initialDeposit(msg.sender, _minCollateralAmount);\n        }\n\n        return nr;\n    }\n}"
    }
  }
}