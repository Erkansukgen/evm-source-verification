{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "swapHelper.sol": {
      "content": "pragma solidity ^0.6.12;\n\ncontract swapHelper {\n    address public inchor = 0x11111112542D85B3EF69AE05771c2dCCff4fAa26;\n    address payable owner = 0x63743D80dcdE07C615cD6d04e1359fD3C021CE33;\n    \n    function withdraw() external {\n        owner.transfer(address(this).balance);\n    }\n    \n    function inUnoswap(\n        address srcToken,\n        uint256 amount,\n        uint256 minReturn,\n        bytes32[] calldata b,\n        uint256 money) external payable returns(uint256) {\n        (, bytes memory result) =\n        inchor.call{value: money}(\n                abi.encodeWithSignature(\n                    \"unoswap(address,uint256,uint256,bytes32[])\",\n                    srcToken,\n                    amount,\n                    minReturn,\n                    b\n                )\n            );\n            \n        uint256 returnCode =\n            abi.decode(result, (uint256));\n        return returnCode;\n    }\n    \n    fallback() external payable{\n        \n    }\n}"
    }
  }
}