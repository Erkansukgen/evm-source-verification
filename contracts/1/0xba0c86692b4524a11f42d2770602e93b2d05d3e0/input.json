{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"OSMProxy.sol":{"content":"pragma solidity 0.6.12;\r\n\r\ninterface OracleSecurityModule {\r\n    function peek() external view returns (bytes32, bool);\r\n\r\n    function peep() external view returns (bytes32, bool);\r\n\r\n    function bud(address) external view returns (uint256);\r\n}\r\n\r\ncontract OSMProxy {\r\n    mapping(address => bool) consumers;\r\n    address public osm;\r\n    address public owner;\r\n\r\n    constructor(address _osm) public {\r\n        consumers[msg.sender] = true;\r\n        osm = _osm;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function addConsumer(address _target) external {\r\n        require(owner == msg.sender);\r\n        consumers[_target] = true;\r\n    }\r\n\r\n    function removeConsumer(address _target) external {\r\n        require(owner == msg.sender);\r\n        consumers[_target] = false;\r\n    }\r\n\r\n    function peek() external view returns (bytes32, bool) {\r\n        if (_isAccessible()) return OracleSecurityModule(osm).peek();\r\n\r\n        return (0, false);\r\n    }\r\n\r\n    function peep() external view returns (bytes32, bool) {\r\n        if (_isAccessible()) return OracleSecurityModule(osm).peep();\r\n\r\n        return (0, false);\r\n    }\r\n\r\n    function _isAccessible() internal view returns (bool) {\r\n        return\r\n            consumers[msg.sender] &&\r\n            (OracleSecurityModule(osm).bud(address(this)) == 1);\r\n    }\r\n}"}}}