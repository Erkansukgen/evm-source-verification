{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/arb03.sol": {
      "content": "pragma solidity ^0.7.0;  \r\n\r\ninterface IUniswap {\r\n    function swapExactTokensForETH( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external  returns (uint[] memory amounts); \r\n    function WETH() external pure returns(address);\r\n }  \r\ninterface IERC20 {\r\n   function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n   function approve(address spender, uint256 amount) external returns (bool);\r\n   function transfer(address recipient, uint256 amount) external returns (bool);\r\n   function balanceOf(address account) external view returns (uint256);\r\n} \r\n\r\ncontract Arb03 { \r\n    IUniswap uniswap;\r\n    address public manager;   \r\n     \r\n    constructor(address _uniswap, address _manager){\r\n        uniswap = IUniswap(_uniswap); \r\n        manager = _manager;\r\n    }   \r\n    \r\n    modifier OnlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    } \r\n    \r\n    fallback() external payable {}  \r\n    receive() external payable {}  \r\n\r\n    // Returns contract's ETH balance\r\n    function getETHBalance () external view returns (uint){\r\n        return address(this).balance;\r\n    }  \r\n    \r\n    // Transfer contract ownership\r\n    function transferOwnership (address _manager) external payable OnlyManager{\r\n        manager = _manager;\r\n    }\r\n\r\n    // Reset DEX contract address\r\n    function resetDexAddress  (address _uniswap) external payable OnlyManager {\r\n        uniswap = IUniswap(_uniswap); \r\n    }\r\n\r\n    // Returns contract's particular token balance\r\n    function getTokenBalance(address _address) external view returns (uint) {\r\n      return IERC20(_address).balanceOf(address(this));\r\n    }  \r\n    \r\n    // Swap token for ETH on Uniswap\r\n    function swapTokensForETH( address token, uint amountIn, uint amountOutMin )external OnlyManager{   \r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = uniswap.WETH();\r\n        IERC20(token).approve(address(uniswap), amountIn);\r\n        uint deadline = block.timestamp + 3600;\r\n        uniswap.swapExactTokensForETH( amountIn, amountOutMin, path, address(this), deadline ); \r\n    }  \r\n    \r\n     // Transfer ETH from contract's balance after token swap \r\n    function transferETH (address payable _recipient, uint _amount) external payable OnlyManager{\r\n        _recipient.transfer(_amount);    \r\n    }  \r\n    \r\n    // Withdraw contract's ETH balance\r\n    function withdrawETHBalance(address payable  recipient) external OnlyManager{\r\n        recipient.transfer(address(this).balance);\r\n    }    \r\n    \r\n    // Withdraw contract's particular token balance\r\n    function withdrawTokenBalance (address _tokenAddress, address  _recipient, uint _amount) public payable OnlyManager returns (bool){  \r\n        IERC20(_tokenAddress).transfer(_recipient, _amount);\r\n        return true;\r\n    }  \r\n}"
    }
  }
}