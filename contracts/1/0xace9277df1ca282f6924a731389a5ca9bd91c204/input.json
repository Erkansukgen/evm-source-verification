{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/WebaverseAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ncontract WebaverseAccount {\n    event MetadataSet(\n      address owner,\n      string key,\n      string value\n    );\n\n    mapping (address => mapping(string => string)) private addressToMetadata;\n\n    constructor() public {}\n\n    // 0x08E242bB06D85073e69222aF8273af419d19E4f6, \"lol\"\n    function getMetadata(address owner, string memory key) public view returns (string memory) {\n        return addressToMetadata[owner][key];\n    }\n    \n    // 0x08E242bB06D85073e69222aF8273af419d19E4f6, \"lol\", \"zol\"\n    function setMetadata(address owner, string memory key, string memory value) public {\n        require(msg.sender == owner);\n        addressToMetadata[owner][key] = value;\n        \n        emit MetadataSet(owner, key, value);\n    }\n}\n"
    }
  }
}