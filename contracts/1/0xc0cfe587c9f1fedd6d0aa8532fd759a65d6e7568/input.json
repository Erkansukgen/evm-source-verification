{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface Minereum {\n  function Payment (  ) payable external;  \n}\n\ncontract MinereumLuckyDraw\n{\n\tMinereum public mne;\n\tuint public stakeHoldersfee = 50;\n\tuint public percentWin = 80;\n\tuint public mnefee = 0;\n\tuint public ethfee = 15000000000000000;\n\tuint public totalSentToStakeHolders = 0;\n\tuint public totalPaidOut = 0;\n\tuint public ticketsSold = 0;\n\taddress public owner = 0x0000000000000000000000000000000000000000;\t\n\tuint public maxNumber = 10000001;\n\tuint public systemNumber = 0;\t\n\tuint public currentTickets = 0;\n\tuint public closedBlock = 0;\n\t\n\tbool public ticketsOpen = true;\n\t//winners from past contracts\n\tuint public winnersCount = 4;\n\tuint public winnersEthCount = 4000000000000000000;\n\t\n\taddress[] public players;\n\tuint[] public tickets;\n\t\t\n\tuint[] public pastGameNr;\n\tuint[] public pastGameSystemNumber;\n\tuint[] public pastGameTickets;\n\tuint[] public pastGamePlayers;\n\taddress[] public winners;\n\tuint[] public winnerTickets;\n\tuint[] public winnerETHAmount;\n\tuint[] public pastGameTimestamp;\n\t\n\taddress[] public winnersOnly;\n\tuint[] public winnersOnlyTickets;\n\tuint[] public winnersOnlyETH;\n\tuint[] public winnersOnlyTimestamp;\n\t\n\tevent Numbers(address indexed from, uint n, string m);\n\t\n\taddress public _closerAddress;\n\t\n\tconstructor() public\n\t{\n\t\tmne = Minereum(0x7eE48259C4A894065d4a5282f230D00908Fd6D96);\n\t\t_closerAddress = 0xF8094e15c897518B5Ac5287d7070cA5850eFc6ff;\n\t\towner = payable(msg.sender);\t\n\t\tpastGameNr.push(0);\n\t\tpastGameSystemNumber.push(0);\n\t\tpastGamePlayers.push(0);\n\t\tpastGameTickets.push(0);\n\t\twinners.push(0x0000000000000000000000000000000000000000);\n\t\twinnerTickets.push(0);\n\t\twinnerETHAmount.push(0);\n\t\tpastGameTimestamp.push(0);\n\t}\n\t\n\treceive() external payable { }\n\t\n\tfunction VerifyWinners(uint min, uint max) public\n    {\n        require(msg.sender == tx.origin);\n\t\tif ((!ticketsOpen) && (block.number > closedBlock + 3))\n\t\t{\n\t\t\tuint i = 0;\n\t\t\tuint m = players.length;\n\t\t\t\n\t\t\tif (msg.sender == _closerAddress && min > 0 && max > 0)\n\t\t\t{\n\t\t\t\ti = min;\n\t\t\t\tm = max;\n\t\t\t}\n\t\t\t\n\t\t\tsystemNumber = uint256(uint256(keccak256(abi.encodePacked(blockhash(block.number - 1))))%maxNumber);\n\t\t\taddress _winner;\n\t\t\tuint _winnerTickets;\n\t\t\t\n\t\t\tbool win = false;\n\t\t\t\n\t\t\twhile (i < m)\n\t\t\t{\n\t\t\t\tif (win)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tuint j = 0;\n\t\t\t\twhile (j < tickets[i])\n\t\t\t\t{\t\t\t\t\t\t\n\t\t\t\t\tif (uint256(uint256(keccak256(abi.encodePacked(players[i], j)))%maxNumber) == systemNumber)\n\t\t\t\t\t{\n\t\t\t\t\t\twin = true;\n\t\t\t\t\t\t_winner = players[i];\n\t\t\t\t\t\t_winnerTickets = tickets[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\tif (win)\n\t\t\t{\n\t\t\t\taddress payable add = payable(_winner);\n\t\t\t\tuint contractBalance = address(this).balance;\n\t\t\t\tuint winAmount = contractBalance * percentWin / 100;\n\t\t\t\tuint totalToPay = winAmount;\n\t\t\t\tif (!add.send(totalToPay)) revert('Error While Executing Payment.');\n\t\t\t\ttotalPaidOut += totalToPay;\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\twinnersOnly.push(_winner);\n\t\t\t\twinnersOnlyTickets.push(_winnerTickets);\n\t\t\t\twinnersOnlyETH.push(totalToPay);\n\t\t\t\twinnersOnlyTimestamp.push(block.timestamp);\n\t\t\t\t\n\t\t\t\tpastGameNr.push(pastGameNr[pastGameNr.length - 1] + 1);\n\t\t\t\tpastGameSystemNumber.push(systemNumber);\n\t\t\t\tpastGamePlayers.push(players.length);\n\t\t\t\tpastGameTickets.push(currentTickets);\n\t\t\t\twinners.push(_winner);\n\t\t\t\twinnerTickets.push(_winnerTickets);\n\t\t\t\twinnerETHAmount.push(totalToPay);\n\t\t\t\tpastGameTimestamp.push(block.timestamp);\n\t\t\t\twinnersCount++;\n\t\t\t\twinnersEthCount += totalToPay;\n\t\t\t\temit Numbers(_winner, systemNumber, \"WINNER!\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\n\t\t\t\tpastGameNr.push(pastGameNr[pastGameNr.length - 1] + 1);\n\t\t\t\tpastGameSystemNumber.push(systemNumber);\n\t\t\t\tpastGamePlayers.push(players.length);\n\t\t\t\tpastGameTickets.push(currentTickets);\n\t\t\t\twinners.push(0x0000000000000000000000000000000000000000);\n\t\t\t\twinnerTickets.push(0);\n\t\t\t\twinnerETHAmount.push(0);\n\t\t\t\tpastGameTimestamp.push(block.timestamp);\n\t\t\t\temit Numbers(msg.sender, systemNumber, \"No winners! Try Again.\");\n\t\t\t}\n\t\t\t\n\t\t\tcurrentTickets = 0;\t\t\n\t\t\tdelete players;\n\t\t\tdelete tickets;\n\t\t\tticketsOpen = true;\n\t\t\tclosedBlock = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert('Tickets must be closed and block number must be + 10');\n\t\t}\n    }\n\t\n\tfunction CloseTickets() public\n\t{\n\t\trequire(msg.sender == _closerAddress);\n\t\tticketsOpen = false;\n\t\tclosedBlock = block.number;\n\t}\n\t\n\tfunction OpenTickets() public\n\t{\n\t\trequire(msg.sender == _closerAddress);\n\t\tticketsOpen = true;\n\t\tclosedBlock = 0;\n\t}\n\t\n    function BuyTickets(address _sender, uint256[] memory _max) public payable returns (uint256)\n    {\n\t\trequire(msg.sender == address(mne));\n\t\trequire(_sender == tx.origin);\n\t\t\n\t\tif (ticketsOpen)\n\t\t{\n\t\t\tplayers.push(_sender);\n\t\t\ttickets.push(_max[0]);\t\t\t\n\t\t\tuint valueStakeHolder = msg.value * stakeHoldersfee / 100;\t\t\t\t\t\n\t\t\tcurrentTickets += _max[0];\n\t\t\tticketsSold += _max[0];\t\t\t\n\t\t\tuint totalEthfee = ethfee * _max[0];\n\t\t\tuint totalMneFee = mnefee * _max[0];\n\t\t\tif (msg.value < totalEthfee) revert('Not enough ETH.');\n\t\t\tmne.Payment.value(valueStakeHolder)();\n\t\t\ttotalSentToStakeHolders += valueStakeHolder;\n\t\t\treturn totalMneFee;\n\t\t}\n\t\telse \n\t\t{\n\t\t\trevert('tickets closed until draw is done.');\n\t\t}\n\t\t\n\t\treturn 0;\n    }\n\t\n\tfunction transferFundsOut() public\n\t{\n\t\tif (msg.sender == owner)\n\t\t{\n\t\t\taddress payable add = payable(msg.sender);\n\t\t\tuint contractBalance = address(this).balance;\n\t\t\tif (!add.send(contractBalance)) revert('Error While Executing Payment.');\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert();\n\t\t}\n\t}\n\t\n\tfunction updateFees(uint _stakeHoldersfee, uint _mnefee, uint _ethfee) public\n\t{\n\t\tif (msg.sender == owner)\n\t\t{\n\t\t\tstakeHoldersfee = _stakeHoldersfee;\n\t\t\tmnefee = _mnefee;\n\t\t\tethfee = _ethfee;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert();\n\t\t}\n\t}\n\t\n\tfunction updateSystemNumber(uint _systemNumber) public\n\t{\n\t\tif (msg.sender == owner)\n\t\t{\n\t\t\tsystemNumber = _systemNumber;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert();\n\t\t}\n\t}\n\t\n\tfunction updateMaxNumber(uint _maxNumber) public\n\t{\n\t\tif (msg.sender == owner)\n\t\t{\n\t\t\tmaxNumber = _maxNumber;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert();\n\t\t}\n\t}\n\t\n\tfunction updatePercentWin(uint _percentWin) public\n\t{\n\t\tif (msg.sender == owner)\n\t\t{\n\t\t\tpercentWin = _percentWin;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert();\n\t\t}\n\t}\t\n\t\n\tfunction updateMNEContract(address _mneAddress) public\n\t{\n\t\tif (msg.sender == owner)\n\t\t{\n\t\t\tmne = Minereum(_mneAddress);\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert();\n\t\t}\n\t}\n\t\n\tfunction updateCloserAddress(address _address) public\n\t{\n\t\tif (msg.sender == owner)\n\t\t{\n\t\t\t_closerAddress = _address;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevert();\n\t\t}\n\t}\n\t\n\tfunction pastGameNrLength() public view returns (uint256) { return pastGameNr.length; }\n\tfunction winnersOnlyLength() public view returns (uint256) { return winnersOnly.length; }\n\tfunction playersLength() public view returns (uint256) { return players.length; }\n\tfunction ticketsLength() public view returns (uint256) { return tickets.length; }\n}"}}}